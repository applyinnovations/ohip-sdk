/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ReservationAPIService ReservationAPI service
type ReservationAPIService service

type ReservationAPIChangeReservationLocatorsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	locatorId string
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationLocatorsInfo *ReservationLocatorsInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIChangeReservationLocatorsRequest) Authorization(authorization string) ReservationAPIChangeReservationLocatorsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIChangeReservationLocatorsRequest) XAppKey(xAppKey string) ReservationAPIChangeReservationLocatorsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIChangeReservationLocatorsRequest) XHotelid(xHotelid string) ReservationAPIChangeReservationLocatorsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for changing hotel Notes for hotels.
func (r ReservationAPIChangeReservationLocatorsRequest) ReservationLocatorsInfo(reservationLocatorsInfo ReservationLocatorsInfo) ReservationAPIChangeReservationLocatorsRequest {
	r.reservationLocatorsInfo = &reservationLocatorsInfo
	return r
}

// External system code.
func (r ReservationAPIChangeReservationLocatorsRequest) XExternalsystem(xExternalsystem string) ReservationAPIChangeReservationLocatorsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIChangeReservationLocatorsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIChangeReservationLocatorsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIChangeReservationLocatorsRequest) Execute() (*ReservationLocatorsStatus, *http.Response, error) {
	return r.ApiService.ChangeReservationLocatorsExecute(r)
}

/*
ChangeReservationLocators Change Reservation Guest Locators

Change a list of Guest Locater for a Reservation. <p><strong>OperationId:</strong>changeReservationLocators</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param locatorId
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIChangeReservationLocatorsRequest
*/
func (a *ReservationAPIService) ChangeReservationLocators(ctx context.Context, locatorId string, reservationId string, hotelId string) ReservationAPIChangeReservationLocatorsRequest {
	return ReservationAPIChangeReservationLocatorsRequest{
		ApiService: a,
		ctx: ctx,
		locatorId: locatorId,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationLocatorsStatus
func (a *ReservationAPIService) ChangeReservationLocatorsExecute(r ReservationAPIChangeReservationLocatorsRequest) (*ReservationLocatorsStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationLocatorsStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.ChangeReservationLocators")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/guestLocators/{locatorId}"
	localVarPath = strings.Replace(localVarPath, "{"+"locatorId"+"}", url.PathEscape(parameterValueToString(r.locatorId, "locatorId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.locatorId) < 1 {
		return localVarReturnValue, nil, reportError("locatorId must have at least 1 elements")
	}
	if strlen(r.locatorId) > 2000 {
		return localVarReturnValue, nil, reportError("locatorId must have less than 2000 elements")
	}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationLocatorsInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteCancellationPolicyRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	policyId *string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIDeleteCancellationPolicyRequest) PolicyId(policyId string) ReservationAPIDeleteCancellationPolicyRequest {
	r.policyId = &policyId
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteCancellationPolicyRequest) Authorization(authorization string) ReservationAPIDeleteCancellationPolicyRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteCancellationPolicyRequest) XAppKey(xAppKey string) ReservationAPIDeleteCancellationPolicyRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteCancellationPolicyRequest) XHotelid(xHotelid string) ReservationAPIDeleteCancellationPolicyRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIDeleteCancellationPolicyRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteCancellationPolicyRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteCancellationPolicyRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteCancellationPolicyRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteCancellationPolicyRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteCancellationPolicyExecute(r)
}

/*
DeleteCancellationPolicy Delete a Cancellation policy

Delete an existing cancellation policy for a specific hotel. <p><strong>OperationId:</strong>deleteCancellationPolicy</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteCancellationPolicyRequest
*/
func (a *ReservationAPIService) DeleteCancellationPolicy(ctx context.Context, reservationId string, hotelId string) ReservationAPIDeleteCancellationPolicyRequest {
	return ReservationAPIDeleteCancellationPolicyRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteCancellationPolicyExecute(r ReservationAPIDeleteCancellationPolicyRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteCancellationPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/cancellationPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "policyId", r.policyId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteDepositPolicyRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	policyId *string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIDeleteDepositPolicyRequest) PolicyId(policyId string) ReservationAPIDeleteDepositPolicyRequest {
	r.policyId = &policyId
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteDepositPolicyRequest) Authorization(authorization string) ReservationAPIDeleteDepositPolicyRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteDepositPolicyRequest) XAppKey(xAppKey string) ReservationAPIDeleteDepositPolicyRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteDepositPolicyRequest) XHotelid(xHotelid string) ReservationAPIDeleteDepositPolicyRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIDeleteDepositPolicyRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteDepositPolicyRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteDepositPolicyRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteDepositPolicyRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteDepositPolicyRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteDepositPolicyExecute(r)
}

/*
DeleteDepositPolicy Delete deposit policy

Delete deposit policy for a property.   <p><strong>OperationId:</strong>deleteDepositPolicy</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteDepositPolicyRequest
*/
func (a *ReservationAPIService) DeleteDepositPolicy(ctx context.Context, reservationId string, hotelId string) ReservationAPIDeleteDepositPolicyRequest {
	return ReservationAPIDeleteDepositPolicyRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteDepositPolicyExecute(r ReservationAPIDeleteDepositPolicyRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteDepositPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/depositPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "policyId", r.policyId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteECouponsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	eCouponId *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteECouponsRequest) Authorization(authorization string) ReservationAPIDeleteECouponsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteECouponsRequest) XAppKey(xAppKey string) ReservationAPIDeleteECouponsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteECouponsRequest) XHotelid(xHotelid string) ReservationAPIDeleteECouponsRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIDeleteECouponsRequest) ECouponId(eCouponId string) ReservationAPIDeleteECouponsRequest {
	r.eCouponId = &eCouponId
	return r
}

// External system code.
func (r ReservationAPIDeleteECouponsRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteECouponsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteECouponsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteECouponsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteECouponsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteECouponsExecute(r)
}

/*
DeleteECoupons Delete Reservation ECoupons

Delete the Reservation Ecoupons. <p><strong>OperationId:</strong>deleteECoupons</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteECouponsRequest
*/
func (a *ReservationAPIService) DeleteECoupons(ctx context.Context, reservationId string, hotelId string) ReservationAPIDeleteECouponsRequest {
	return ReservationAPIDeleteECouponsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteECouponsExecute(r ReservationAPIDeleteECouponsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteECoupons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/eCoupons"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.eCouponId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eCouponId", r.eCouponId, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteGuestMessagesRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	guestMessageId string
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteGuestMessagesRequest) Authorization(authorization string) ReservationAPIDeleteGuestMessagesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteGuestMessagesRequest) XAppKey(xAppKey string) ReservationAPIDeleteGuestMessagesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteGuestMessagesRequest) XHotelid(xHotelid string) ReservationAPIDeleteGuestMessagesRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIDeleteGuestMessagesRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteGuestMessagesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteGuestMessagesRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteGuestMessagesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteGuestMessagesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteGuestMessagesExecute(r)
}

/*
DeleteGuestMessages Delete guest messages

Delete guest messages from a reservation. <p><strong>OperationId:</strong>deleteGuestMessages</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guestMessageId Guest Message Id
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteGuestMessagesRequest
*/
func (a *ReservationAPIService) DeleteGuestMessages(ctx context.Context, guestMessageId string, reservationId string, hotelId string) ReservationAPIDeleteGuestMessagesRequest {
	return ReservationAPIDeleteGuestMessagesRequest{
		ApiService: a,
		ctx: ctx,
		guestMessageId: guestMessageId,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteGuestMessagesExecute(r ReservationAPIDeleteGuestMessagesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteGuestMessages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/guestMessages/{guestMessageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"guestMessageId"+"}", url.PathEscape(parameterValueToString(r.guestMessageId, "guestMessageId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.guestMessageId) < 1 {
		return localVarReturnValue, nil, reportError("guestMessageId must have at least 1 elements")
	}
	if strlen(r.guestMessageId) > 2000 {
		return localVarReturnValue, nil, reportError("guestMessageId must have less than 2000 elements")
	}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteMasterAccountRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteMasterAccountRequest) Authorization(authorization string) ReservationAPIDeleteMasterAccountRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteMasterAccountRequest) XAppKey(xAppKey string) ReservationAPIDeleteMasterAccountRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteMasterAccountRequest) XHotelid(xHotelid string) ReservationAPIDeleteMasterAccountRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIDeleteMasterAccountRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteMasterAccountRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteMasterAccountRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteMasterAccountRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteMasterAccountRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteMasterAccountExecute(r)
}

/*
DeleteMasterAccount Cancel Master Account

Cancel Master account on a reservation. <p><strong>OperationId:</strong>deleteMasterAccount</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteMasterAccountRequest
*/
func (a *ReservationAPIService) DeleteMasterAccount(ctx context.Context, reservationId string, hotelId string) ReservationAPIDeleteMasterAccountRequest {
	return ReservationAPIDeleteMasterAccountRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteMasterAccountExecute(r ReservationAPIDeleteMasterAccountRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteMasterAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/masterAccount"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeletePaymentMethodsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeletePaymentMethodsRequest) Authorization(authorization string) ReservationAPIDeletePaymentMethodsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeletePaymentMethodsRequest) XAppKey(xAppKey string) ReservationAPIDeletePaymentMethodsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeletePaymentMethodsRequest) XHotelid(xHotelid string) ReservationAPIDeletePaymentMethodsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIDeletePaymentMethodsRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeletePaymentMethodsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeletePaymentMethodsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeletePaymentMethodsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeletePaymentMethodsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeletePaymentMethodsExecute(r)
}

/*
DeletePaymentMethods Delete a payment method 

Use this API to delete a payment method from a reservation. <p><strong>OperationId:</strong>deletePaymentMethods</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeletePaymentMethodsRequest
*/
func (a *ReservationAPIService) DeletePaymentMethods(ctx context.Context, reservationId string, hotelId string) ReservationAPIDeletePaymentMethodsRequest {
	return ReservationAPIDeletePaymentMethodsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeletePaymentMethodsExecute(r ReservationAPIDeletePaymentMethodsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeletePaymentMethods")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/paymentMethods"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeletePreCheckInReservationRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	resvIDExtension *int32
	arrivalTime *string
	roomNumber *string
	guestPreferredCurrency *string
	allowMobileViewFolio *bool
	paymentMethodDescription *[]string
	paymentMethodFolioView *[]int32
	paymentMethod *[]string
	attachCreditCardToProfile *bool
	cardHolderName *string
	cardNumber *string
	cardNumberLast4Digits *string
	cardNumberMasked *string
	cardOrToken *string
	cardType *string
	expirationDate *string
	expirationDateExpired *bool
	expirationDateMasked *string
	processing *string
	swiped *bool
	userDefinedCardType *string
	cardId *string
	cardIdIDExtension *int32
	cardIdIDContext *string
	cardIdType *string
	currentAuthorizedAmount *float32
	authorizedAmountCurrencyCode *string
	approvalAmountNeeded *float32
	approvalAmountCurrencyCode *string
	balanceAmount *float32
	balanceCurrencyCode *string
	authorizationRuleCode *int32
	authorizationRuleAmount *float32
	authorizationRuleCurrencyCode *string
	authorizationRulePercent *float32
	emailFolio *bool
	emailFolioID *string
	emailFolioIDExtension *int32
	emailFolioIDContext *string
	emailFolioIDType *string
	emailFolioCreateDateTime *string
	emailFolioCreatorID *string
	emailFolioEmailAddress *string
	emailFolioEmailFormat *string
	emailFolioLastModifierID *string
	emailFolioLastModifyDateTime *string
	emailFolioOrderSequence *float32
	emailFolioPrimaryInd *bool
	emailFolioPurgeDate *string
	emailFolioType *string
	emailFolioTypeDescription *string
	arrivalCarrierCode *string
	arrivalDateTime *string
	arrivalStationCode *string
	arrivalTransportCode *string
	arrivalTransportationReqd *bool
	arrivalType *string
	arrivalComments *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeletePreCheckInReservationRequest) Authorization(authorization string) ReservationAPIDeletePreCheckInReservationRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeletePreCheckInReservationRequest) XAppKey(xAppKey string) ReservationAPIDeletePreCheckInReservationRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeletePreCheckInReservationRequest) XHotelid(xHotelid string) ReservationAPIDeletePreCheckInReservationRequest {
	r.xHotelid = &xHotelid
	return r
}

// Additional identifying value assigned by the creating system.
func (r ReservationAPIDeletePreCheckInReservationRequest) ResvIDExtension(resvIDExtension int32) ReservationAPIDeletePreCheckInReservationRequest {
	r.resvIDExtension = &resvIDExtension
	return r
}

// The time at which the guest arrives at the hotel.
func (r ReservationAPIDeletePreCheckInReservationRequest) ArrivalTime(arrivalTime string) ReservationAPIDeletePreCheckInReservationRequest {
	r.arrivalTime = &arrivalTime
	return r
}

// Room Number to be assigned to the reservation.
func (r ReservationAPIDeletePreCheckInReservationRequest) RoomNumber(roomNumber string) ReservationAPIDeletePreCheckInReservationRequest {
	r.roomNumber = &roomNumber
	return r
}

// Currency code preferred by guest.
func (r ReservationAPIDeletePreCheckInReservationRequest) GuestPreferredCurrency(guestPreferredCurrency string) ReservationAPIDeletePreCheckInReservationRequest {
	r.guestPreferredCurrency = &guestPreferredCurrency
	return r
}

// Attribute AllowMobileViewFolio is set to true when the reservation is eligible for viewing folio using mobile device.
func (r ReservationAPIDeletePreCheckInReservationRequest) AllowMobileViewFolio(allowMobileViewFolio bool) ReservationAPIDeletePreCheckInReservationRequest {
	r.allowMobileViewFolio = &allowMobileViewFolio
	return r
}

func (r ReservationAPIDeletePreCheckInReservationRequest) PaymentMethodDescription(paymentMethodDescription []string) ReservationAPIDeletePreCheckInReservationRequest {
	r.paymentMethodDescription = &paymentMethodDescription
	return r
}

func (r ReservationAPIDeletePreCheckInReservationRequest) PaymentMethodFolioView(paymentMethodFolioView []int32) ReservationAPIDeletePreCheckInReservationRequest {
	r.paymentMethodFolioView = &paymentMethodFolioView
	return r
}

func (r ReservationAPIDeletePreCheckInReservationRequest) PaymentMethod(paymentMethod []string) ReservationAPIDeletePreCheckInReservationRequest {
	r.paymentMethod = &paymentMethod
	return r
}

// Attach the credit card to profile.
func (r ReservationAPIDeletePreCheckInReservationRequest) AttachCreditCardToProfile(attachCreditCardToProfile bool) ReservationAPIDeletePreCheckInReservationRequest {
	r.attachCreditCardToProfile = &attachCreditCardToProfile
	return r
}

func (r ReservationAPIDeletePreCheckInReservationRequest) CardHolderName(cardHolderName string) ReservationAPIDeletePreCheckInReservationRequest {
	r.cardHolderName = &cardHolderName
	return r
}

func (r ReservationAPIDeletePreCheckInReservationRequest) CardNumber(cardNumber string) ReservationAPIDeletePreCheckInReservationRequest {
	r.cardNumber = &cardNumber
	return r
}

func (r ReservationAPIDeletePreCheckInReservationRequest) CardNumberLast4Digits(cardNumberLast4Digits string) ReservationAPIDeletePreCheckInReservationRequest {
	r.cardNumberLast4Digits = &cardNumberLast4Digits
	return r
}

func (r ReservationAPIDeletePreCheckInReservationRequest) CardNumberMasked(cardNumberMasked string) ReservationAPIDeletePreCheckInReservationRequest {
	r.cardNumberMasked = &cardNumberMasked
	return r
}

// Simple type for indicating if credit card number is tokenized.
func (r ReservationAPIDeletePreCheckInReservationRequest) CardOrToken(cardOrToken string) ReservationAPIDeletePreCheckInReservationRequest {
	r.cardOrToken = &cardOrToken
	return r
}

// This is required for Credit Card Payment Methods. This indicates the type of Credit Card associated with this payment method.
func (r ReservationAPIDeletePreCheckInReservationRequest) CardType(cardType string) ReservationAPIDeletePreCheckInReservationRequest {
	r.cardType = &cardType
	return r
}

// Expiration date of the credit card
func (r ReservationAPIDeletePreCheckInReservationRequest) ExpirationDate(expirationDate string) ReservationAPIDeletePreCheckInReservationRequest {
	r.expirationDate = &expirationDate
	return r
}

func (r ReservationAPIDeletePreCheckInReservationRequest) ExpirationDateExpired(expirationDateExpired bool) ReservationAPIDeletePreCheckInReservationRequest {
	r.expirationDateExpired = &expirationDateExpired
	return r
}

// Masked Expiration date of the credit card
func (r ReservationAPIDeletePreCheckInReservationRequest) ExpirationDateMasked(expirationDateMasked string) ReservationAPIDeletePreCheckInReservationRequest {
	r.expirationDateMasked = &expirationDateMasked
	return r
}

func (r ReservationAPIDeletePreCheckInReservationRequest) Processing(processing string) ReservationAPIDeletePreCheckInReservationRequest {
	r.processing = &processing
	return r
}

func (r ReservationAPIDeletePreCheckInReservationRequest) Swiped(swiped bool) ReservationAPIDeletePreCheckInReservationRequest {
	r.swiped = &swiped
	return r
}

// Indicates the user defined credit card type if credit card type from a defined list is not provided
func (r ReservationAPIDeletePreCheckInReservationRequest) UserDefinedCardType(userDefinedCardType string) ReservationAPIDeletePreCheckInReservationRequest {
	r.userDefinedCardType = &userDefinedCardType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIDeletePreCheckInReservationRequest) CardId(cardId string) ReservationAPIDeletePreCheckInReservationRequest {
	r.cardId = &cardId
	return r
}

// Additional identifying value assigned by the creating system.
func (r ReservationAPIDeletePreCheckInReservationRequest) CardIdIDExtension(cardIdIDExtension int32) ReservationAPIDeletePreCheckInReservationRequest {
	r.cardIdIDExtension = &cardIdIDExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ReservationAPIDeletePreCheckInReservationRequest) CardIdIDContext(cardIdIDContext string) ReservationAPIDeletePreCheckInReservationRequest {
	r.cardIdIDContext = &cardIdIDContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIDeletePreCheckInReservationRequest) CardIdType(cardIdType string) ReservationAPIDeletePreCheckInReservationRequest {
	r.cardIdType = &cardIdType
	return r
}

// A monetary amount.
func (r ReservationAPIDeletePreCheckInReservationRequest) CurrentAuthorizedAmount(currentAuthorizedAmount float32) ReservationAPIDeletePreCheckInReservationRequest {
	r.currentAuthorizedAmount = &currentAuthorizedAmount
	return r
}

// Provides a currency code to reflect the currency in which an amount may be expressed.
func (r ReservationAPIDeletePreCheckInReservationRequest) AuthorizedAmountCurrencyCode(authorizedAmountCurrencyCode string) ReservationAPIDeletePreCheckInReservationRequest {
	r.authorizedAmountCurrencyCode = &authorizedAmountCurrencyCode
	return r
}

// A monetary amount.
func (r ReservationAPIDeletePreCheckInReservationRequest) ApprovalAmountNeeded(approvalAmountNeeded float32) ReservationAPIDeletePreCheckInReservationRequest {
	r.approvalAmountNeeded = &approvalAmountNeeded
	return r
}

// Provides a currency code to reflect the currency in which an amount may be expressed.
func (r ReservationAPIDeletePreCheckInReservationRequest) ApprovalAmountCurrencyCode(approvalAmountCurrencyCode string) ReservationAPIDeletePreCheckInReservationRequest {
	r.approvalAmountCurrencyCode = &approvalAmountCurrencyCode
	return r
}

// A monetary amount.
func (r ReservationAPIDeletePreCheckInReservationRequest) BalanceAmount(balanceAmount float32) ReservationAPIDeletePreCheckInReservationRequest {
	r.balanceAmount = &balanceAmount
	return r
}

// Provides a currency code to reflect the currency in which an amount may be expressed.
func (r ReservationAPIDeletePreCheckInReservationRequest) BalanceCurrencyCode(balanceCurrencyCode string) ReservationAPIDeletePreCheckInReservationRequest {
	r.balanceCurrencyCode = &balanceCurrencyCode
	return r
}

// The authorization rule code.
func (r ReservationAPIDeletePreCheckInReservationRequest) AuthorizationRuleCode(authorizationRuleCode int32) ReservationAPIDeletePreCheckInReservationRequest {
	r.authorizationRuleCode = &authorizationRuleCode
	return r
}

// A monetary amount.
func (r ReservationAPIDeletePreCheckInReservationRequest) AuthorizationRuleAmount(authorizationRuleAmount float32) ReservationAPIDeletePreCheckInReservationRequest {
	r.authorizationRuleAmount = &authorizationRuleAmount
	return r
}

// Provides a currency code to reflect the currency in which an amount may be expressed.
func (r ReservationAPIDeletePreCheckInReservationRequest) AuthorizationRuleCurrencyCode(authorizationRuleCurrencyCode string) ReservationAPIDeletePreCheckInReservationRequest {
	r.authorizationRuleCurrencyCode = &authorizationRuleCurrencyCode
	return r
}

// A percentage value if the authorization rule is percentage based.
func (r ReservationAPIDeletePreCheckInReservationRequest) AuthorizationRulePercent(authorizationRulePercent float32) ReservationAPIDeletePreCheckInReservationRequest {
	r.authorizationRulePercent = &authorizationRulePercent
	return r
}

func (r ReservationAPIDeletePreCheckInReservationRequest) EmailFolio(emailFolio bool) ReservationAPIDeletePreCheckInReservationRequest {
	r.emailFolio = &emailFolio
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIDeletePreCheckInReservationRequest) EmailFolioID(emailFolioID string) ReservationAPIDeletePreCheckInReservationRequest {
	r.emailFolioID = &emailFolioID
	return r
}

// Additional identifying value assigned by the creating system.
func (r ReservationAPIDeletePreCheckInReservationRequest) EmailFolioIDExtension(emailFolioIDExtension int32) ReservationAPIDeletePreCheckInReservationRequest {
	r.emailFolioIDExtension = &emailFolioIDExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ReservationAPIDeletePreCheckInReservationRequest) EmailFolioIDContext(emailFolioIDContext string) ReservationAPIDeletePreCheckInReservationRequest {
	r.emailFolioIDContext = &emailFolioIDContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIDeletePreCheckInReservationRequest) EmailFolioIDType(emailFolioIDType string) ReservationAPIDeletePreCheckInReservationRequest {
	r.emailFolioIDType = &emailFolioIDType
	return r
}

// Time stamp of the creation.
func (r ReservationAPIDeletePreCheckInReservationRequest) EmailFolioCreateDateTime(emailFolioCreateDateTime string) ReservationAPIDeletePreCheckInReservationRequest {
	r.emailFolioCreateDateTime = &emailFolioCreateDateTime
	return r
}

// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
func (r ReservationAPIDeletePreCheckInReservationRequest) EmailFolioCreatorID(emailFolioCreatorID string) ReservationAPIDeletePreCheckInReservationRequest {
	r.emailFolioCreatorID = &emailFolioCreatorID
	return r
}

// Defines the e-mail address.
func (r ReservationAPIDeletePreCheckInReservationRequest) EmailFolioEmailAddress(emailFolioEmailAddress string) ReservationAPIDeletePreCheckInReservationRequest {
	r.emailFolioEmailAddress = &emailFolioEmailAddress
	return r
}

// Supported Email format.
func (r ReservationAPIDeletePreCheckInReservationRequest) EmailFolioEmailFormat(emailFolioEmailFormat string) ReservationAPIDeletePreCheckInReservationRequest {
	r.emailFolioEmailFormat = &emailFolioEmailFormat
	return r
}

// Identifies the last software system or person to modify a record.
func (r ReservationAPIDeletePreCheckInReservationRequest) EmailFolioLastModifierID(emailFolioLastModifierID string) ReservationAPIDeletePreCheckInReservationRequest {
	r.emailFolioLastModifierID = &emailFolioLastModifierID
	return r
}

// Time stamp of last modification.
func (r ReservationAPIDeletePreCheckInReservationRequest) EmailFolioLastModifyDateTime(emailFolioLastModifyDateTime string) ReservationAPIDeletePreCheckInReservationRequest {
	r.emailFolioLastModifyDateTime = &emailFolioLastModifyDateTime
	return r
}

// Display Order sequence.
func (r ReservationAPIDeletePreCheckInReservationRequest) EmailFolioOrderSequence(emailFolioOrderSequence float32) ReservationAPIDeletePreCheckInReservationRequest {
	r.emailFolioOrderSequence = &emailFolioOrderSequence
	return r
}

// When true, indicates a primary information.
func (r ReservationAPIDeletePreCheckInReservationRequest) EmailFolioPrimaryInd(emailFolioPrimaryInd bool) ReservationAPIDeletePreCheckInReservationRequest {
	r.emailFolioPrimaryInd = &emailFolioPrimaryInd
	return r
}

// Date an item will be purged from a database (e.g., from a live database to an archive).
func (r ReservationAPIDeletePreCheckInReservationRequest) EmailFolioPurgeDate(emailFolioPurgeDate string) ReservationAPIDeletePreCheckInReservationRequest {
	r.emailFolioPurgeDate = &emailFolioPurgeDate
	return r
}

// Defines the purpose of the e-mail address (e.g. personal, business, listserve).
func (r ReservationAPIDeletePreCheckInReservationRequest) EmailFolioType(emailFolioType string) ReservationAPIDeletePreCheckInReservationRequest {
	r.emailFolioType = &emailFolioType
	return r
}

// Describes the Type code
func (r ReservationAPIDeletePreCheckInReservationRequest) EmailFolioTypeDescription(emailFolioTypeDescription string) ReservationAPIDeletePreCheckInReservationRequest {
	r.emailFolioTypeDescription = &emailFolioTypeDescription
	return r
}

func (r ReservationAPIDeletePreCheckInReservationRequest) ArrivalCarrierCode(arrivalCarrierCode string) ReservationAPIDeletePreCheckInReservationRequest {
	r.arrivalCarrierCode = &arrivalCarrierCode
	return r
}

func (r ReservationAPIDeletePreCheckInReservationRequest) ArrivalDateTime(arrivalDateTime string) ReservationAPIDeletePreCheckInReservationRequest {
	r.arrivalDateTime = &arrivalDateTime
	return r
}

func (r ReservationAPIDeletePreCheckInReservationRequest) ArrivalStationCode(arrivalStationCode string) ReservationAPIDeletePreCheckInReservationRequest {
	r.arrivalStationCode = &arrivalStationCode
	return r
}

func (r ReservationAPIDeletePreCheckInReservationRequest) ArrivalTransportCode(arrivalTransportCode string) ReservationAPIDeletePreCheckInReservationRequest {
	r.arrivalTransportCode = &arrivalTransportCode
	return r
}

func (r ReservationAPIDeletePreCheckInReservationRequest) ArrivalTransportationReqd(arrivalTransportationReqd bool) ReservationAPIDeletePreCheckInReservationRequest {
	r.arrivalTransportationReqd = &arrivalTransportationReqd
	return r
}

func (r ReservationAPIDeletePreCheckInReservationRequest) ArrivalType(arrivalType string) ReservationAPIDeletePreCheckInReservationRequest {
	r.arrivalType = &arrivalType
	return r
}

func (r ReservationAPIDeletePreCheckInReservationRequest) ArrivalComments(arrivalComments string) ReservationAPIDeletePreCheckInReservationRequest {
	r.arrivalComments = &arrivalComments
	return r
}

// External system code.
func (r ReservationAPIDeletePreCheckInReservationRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeletePreCheckInReservationRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeletePreCheckInReservationRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeletePreCheckInReservationRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeletePreCheckInReservationRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeletePreCheckInReservationExecute(r)
}

/*
DeletePreCheckInReservation Revert a PreCheckIn Reservation

This will cancel or rather revert the pre-checkin action for a guest's reservation. The reservation will return to DUEIN status. <p><strong>OperationId:</strong>deletePreCheckInReservation</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeletePreCheckInReservationRequest
*/
func (a *ReservationAPIService) DeletePreCheckInReservation(ctx context.Context, reservationId string, hotelId string) ReservationAPIDeletePreCheckInReservationRequest {
	return ReservationAPIDeletePreCheckInReservationRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeletePreCheckInReservationExecute(r ReservationAPIDeletePreCheckInReservationRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeletePreCheckInReservation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/preCheckIn"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.resvIDExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resvIDExtension", r.resvIDExtension, "")
  }
	if r.arrivalTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalTime", r.arrivalTime, "")
  }
	if r.roomNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomNumber", r.roomNumber, "")
  }
	if r.guestPreferredCurrency != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "guestPreferredCurrency", r.guestPreferredCurrency, "")
  }
	if r.allowMobileViewFolio != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowMobileViewFolio", r.allowMobileViewFolio, "")
  }
	if r.paymentMethodDescription != nil {
		t := *r.paymentMethodDescription
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "paymentMethodDescription", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "paymentMethodDescription", t, "multi")
		}
  }
	if r.paymentMethodFolioView != nil {
		t := *r.paymentMethodFolioView
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "paymentMethodFolioView", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "paymentMethodFolioView", t, "multi")
		}
  }
	if r.paymentMethod != nil {
		t := *r.paymentMethod
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "paymentMethod", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "paymentMethod", t, "multi")
		}
  }
	if r.attachCreditCardToProfile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attachCreditCardToProfile", r.attachCreditCardToProfile, "")
  }
	if r.cardHolderName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardHolderName", r.cardHolderName, "")
  }
	if r.cardNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardNumber", r.cardNumber, "")
  }
	if r.cardNumberLast4Digits != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardNumberLast4Digits", r.cardNumberLast4Digits, "")
  }
	if r.cardNumberMasked != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardNumberMasked", r.cardNumberMasked, "")
  }
	if r.cardOrToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardOrToken", r.cardOrToken, "")
  }
	if r.cardType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardType", r.cardType, "")
  }
	if r.expirationDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expirationDate", r.expirationDate, "")
  }
	if r.expirationDateExpired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expirationDateExpired", r.expirationDateExpired, "")
  }
	if r.expirationDateMasked != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expirationDateMasked", r.expirationDateMasked, "")
  }
	if r.processing != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processing", r.processing, "")
  }
	if r.swiped != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "swiped", r.swiped, "")
  }
	if r.userDefinedCardType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userDefinedCardType", r.userDefinedCardType, "")
  }
	if r.cardId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardId", r.cardId, "")
  }
	if r.cardIdIDExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardIdIDExtension", r.cardIdIDExtension, "")
  }
	if r.cardIdIDContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardIdIDContext", r.cardIdIDContext, "")
  }
	if r.cardIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardIdType", r.cardIdType, "")
  }
	if r.currentAuthorizedAmount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "currentAuthorizedAmount", r.currentAuthorizedAmount, "")
  }
	if r.authorizedAmountCurrencyCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authorizedAmountCurrencyCode", r.authorizedAmountCurrencyCode, "")
  }
	if r.approvalAmountNeeded != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approvalAmountNeeded", r.approvalAmountNeeded, "")
  }
	if r.approvalAmountCurrencyCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approvalAmountCurrencyCode", r.approvalAmountCurrencyCode, "")
  }
	if r.balanceAmount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "balanceAmount", r.balanceAmount, "")
  }
	if r.balanceCurrencyCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "balanceCurrencyCode", r.balanceCurrencyCode, "")
  }
	if r.authorizationRuleCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authorizationRuleCode", r.authorizationRuleCode, "")
  }
	if r.authorizationRuleAmount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authorizationRuleAmount", r.authorizationRuleAmount, "")
  }
	if r.authorizationRuleCurrencyCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authorizationRuleCurrencyCode", r.authorizationRuleCurrencyCode, "")
  }
	if r.authorizationRulePercent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authorizationRulePercent", r.authorizationRulePercent, "")
  }
	if r.emailFolio != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolio", r.emailFolio, "")
  }
	if r.emailFolioID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioID", r.emailFolioID, "")
  }
	if r.emailFolioIDExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioIDExtension", r.emailFolioIDExtension, "")
  }
	if r.emailFolioIDContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioIDContext", r.emailFolioIDContext, "")
  }
	if r.emailFolioIDType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioIDType", r.emailFolioIDType, "")
  }
	if r.emailFolioCreateDateTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioCreateDateTime", r.emailFolioCreateDateTime, "")
  }
	if r.emailFolioCreatorID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioCreatorID", r.emailFolioCreatorID, "")
  }
	if r.emailFolioEmailAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioEmailAddress", r.emailFolioEmailAddress, "")
  }
	if r.emailFolioEmailFormat != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioEmailFormat", r.emailFolioEmailFormat, "")
  }
	if r.emailFolioLastModifierID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioLastModifierID", r.emailFolioLastModifierID, "")
  }
	if r.emailFolioLastModifyDateTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioLastModifyDateTime", r.emailFolioLastModifyDateTime, "")
  }
	if r.emailFolioOrderSequence != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioOrderSequence", r.emailFolioOrderSequence, "")
  }
	if r.emailFolioPrimaryInd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioPrimaryInd", r.emailFolioPrimaryInd, "")
  }
	if r.emailFolioPurgeDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioPurgeDate", r.emailFolioPurgeDate, "")
  }
	if r.emailFolioType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioType", r.emailFolioType, "")
  }
	if r.emailFolioTypeDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioTypeDescription", r.emailFolioTypeDescription, "")
  }
	if r.arrivalCarrierCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalCarrierCode", r.arrivalCarrierCode, "")
  }
	if r.arrivalDateTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalDateTime", r.arrivalDateTime, "")
  }
	if r.arrivalStationCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalStationCode", r.arrivalStationCode, "")
  }
	if r.arrivalTransportCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalTransportCode", r.arrivalTransportCode, "")
  }
	if r.arrivalTransportationReqd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalTransportationReqd", r.arrivalTransportationReqd, "")
  }
	if r.arrivalType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalType", r.arrivalType, "")
  }
	if r.arrivalComments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalComments", r.arrivalComments, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteRefundTicketsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteRefundTicketsRequest) Authorization(authorization string) ReservationAPIDeleteRefundTicketsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteRefundTicketsRequest) XAppKey(xAppKey string) ReservationAPIDeleteRefundTicketsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteRefundTicketsRequest) XHotelid(xHotelid string) ReservationAPIDeleteRefundTicketsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIDeleteRefundTicketsRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteRefundTicketsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteRefundTicketsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteRefundTicketsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteRefundTicketsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteRefundTicketsExecute(r)
}

/*
DeleteRefundTickets Refund Reservation tickets

You can use this API to refund Reservation tickets. <p><strong>OperationId:</strong>deleteRefundTickets</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteRefundTicketsRequest
*/
func (a *ReservationAPIService) DeleteRefundTickets(ctx context.Context, reservationId string, hotelId string) ReservationAPIDeleteRefundTicketsRequest {
	return ReservationAPIDeleteRefundTicketsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteRefundTicketsExecute(r ReservationAPIDeleteRefundTicketsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteRefundTickets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/tickets/refund"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteReservationAttachmentRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	attachmentId string
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteReservationAttachmentRequest) Authorization(authorization string) ReservationAPIDeleteReservationAttachmentRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteReservationAttachmentRequest) XAppKey(xAppKey string) ReservationAPIDeleteReservationAttachmentRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteReservationAttachmentRequest) XHotelid(xHotelid string) ReservationAPIDeleteReservationAttachmentRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIDeleteReservationAttachmentRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteReservationAttachmentRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteReservationAttachmentRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteReservationAttachmentRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteReservationAttachmentRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteReservationAttachmentExecute(r)
}

/*
DeleteReservationAttachment Delete Reservation attachments

Delete attachments from a Reservation. <p><strong>OperationId:</strong>deleteReservationAttachment</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param attachmentId Unique Id of the attachment to be deleted.
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteReservationAttachmentRequest
*/
func (a *ReservationAPIService) DeleteReservationAttachment(ctx context.Context, attachmentId string, reservationId string, hotelId string) ReservationAPIDeleteReservationAttachmentRequest {
	return ReservationAPIDeleteReservationAttachmentRequest{
		ApiService: a,
		ctx: ctx,
		attachmentId: attachmentId,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteReservationAttachmentExecute(r ReservationAPIDeleteReservationAttachmentRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteReservationAttachment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/attachments/{attachmentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"attachmentId"+"}", url.PathEscape(parameterValueToString(r.attachmentId, "attachmentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.attachmentId) < 1 {
		return localVarReturnValue, nil, reportError("attachmentId must have at least 1 elements")
	}
	if strlen(r.attachmentId) > 2000 {
		return localVarReturnValue, nil, reportError("attachmentId must have less than 2000 elements")
	}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteReservationCertificateRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteReservationCertificateRequest) Authorization(authorization string) ReservationAPIDeleteReservationCertificateRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteReservationCertificateRequest) XAppKey(xAppKey string) ReservationAPIDeleteReservationCertificateRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteReservationCertificateRequest) XHotelid(xHotelid string) ReservationAPIDeleteReservationCertificateRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIDeleteReservationCertificateRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteReservationCertificateRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteReservationCertificateRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteReservationCertificateRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteReservationCertificateRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteReservationCertificateExecute(r)
}

/*
DeleteReservationCertificate Detach Certificate

Remove a certification from a reservation. <p><strong>OperationId:</strong>deleteReservationCertificate</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteReservationCertificateRequest
*/
func (a *ReservationAPIService) DeleteReservationCertificate(ctx context.Context, reservationId string, hotelId string) ReservationAPIDeleteReservationCertificateRequest {
	return ReservationAPIDeleteReservationCertificateRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteReservationCertificateExecute(r ReservationAPIDeleteReservationCertificateRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteReservationCertificate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/certificates"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteReservationLinksRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteReservationLinksRequest) Authorization(authorization string) ReservationAPIDeleteReservationLinksRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteReservationLinksRequest) XAppKey(xAppKey string) ReservationAPIDeleteReservationLinksRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteReservationLinksRequest) XHotelid(xHotelid string) ReservationAPIDeleteReservationLinksRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIDeleteReservationLinksRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteReservationLinksRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteReservationLinksRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteReservationLinksRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteReservationLinksRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteReservationLinksExecute(r)
}

/*
DeleteReservationLinks Remove Reservation Links

Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinks</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteReservationLinksRequest
*/
func (a *ReservationAPIService) DeleteReservationLinks(ctx context.Context, reservationId string, hotelId string) ReservationAPIDeleteReservationLinksRequest {
	return ReservationAPIDeleteReservationLinksRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteReservationLinksExecute(r ReservationAPIDeleteReservationLinksRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteReservationLinks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/linkedReservations/{reservationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteReservationLinksByChainRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteReservationLinksByChainRequest) Authorization(authorization string) ReservationAPIDeleteReservationLinksByChainRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteReservationLinksByChainRequest) XAppKey(xAppKey string) ReservationAPIDeleteReservationLinksByChainRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteReservationLinksByChainRequest) XHotelid(xHotelid string) ReservationAPIDeleteReservationLinksByChainRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIDeleteReservationLinksByChainRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteReservationLinksByChainRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteReservationLinksByChainRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteReservationLinksByChainRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteReservationLinksByChainRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteReservationLinksByChainExecute(r)
}

/*
DeleteReservationLinksByChain Remove Reservation Links By Chain

Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinksByChain</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @return ReservationAPIDeleteReservationLinksByChainRequest
*/
func (a *ReservationAPIService) DeleteReservationLinksByChain(ctx context.Context, reservationId string) ReservationAPIDeleteReservationLinksByChainRequest {
	return ReservationAPIDeleteReservationLinksByChainRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteReservationLinksByChainExecute(r ReservationAPIDeleteReservationLinksByChainRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteReservationLinksByChain")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reservations/linkedReservations/{reservationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteReservationLinksByExtIdRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationExternalId string
	externalSystemCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteReservationLinksByExtIdRequest) Authorization(authorization string) ReservationAPIDeleteReservationLinksByExtIdRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteReservationLinksByExtIdRequest) XAppKey(xAppKey string) ReservationAPIDeleteReservationLinksByExtIdRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteReservationLinksByExtIdRequest) XHotelid(xHotelid string) ReservationAPIDeleteReservationLinksByExtIdRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIDeleteReservationLinksByExtIdRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteReservationLinksByExtIdRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteReservationLinksByExtIdRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteReservationLinksByExtIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteReservationLinksByExtIdRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteReservationLinksByExtIdExecute(r)
}

/*
DeleteReservationLinksByExtId Remove Reservation Links

Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinksByExtId</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationExternalId External reservation ID.
 @param externalSystemCode Code to identify the external system from which the request is coming. This is the ExternalSystem ID used to exchange information between OPERA and the external system.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteReservationLinksByExtIdRequest
*/
func (a *ReservationAPIService) DeleteReservationLinksByExtId(ctx context.Context, reservationExternalId string, externalSystemCode string, hotelId string) ReservationAPIDeleteReservationLinksByExtIdRequest {
	return ReservationAPIDeleteReservationLinksByExtIdRequest{
		ApiService: a,
		ctx: ctx,
		reservationExternalId: reservationExternalId,
		externalSystemCode: externalSystemCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteReservationLinksByExtIdExecute(r ReservationAPIDeleteReservationLinksByExtIdRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteReservationLinksByExtId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/linkedReservations/{reservationExternalId}"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationExternalId"+"}", url.PathEscape(parameterValueToString(r.reservationExternalId, "reservationExternalId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalSystemCode"+"}", url.PathEscape(parameterValueToString(r.externalSystemCode, "externalSystemCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationExternalId) < 1 {
		return localVarReturnValue, nil, reportError("reservationExternalId must have at least 1 elements")
	}
	if strlen(r.reservationExternalId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationExternalId must have less than 2000 elements")
	}
	if strlen(r.externalSystemCode) < 1 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have at least 1 elements")
	}
	if strlen(r.externalSystemCode) > 2000 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteReservationLocatorsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	locatorId string
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteReservationLocatorsRequest) Authorization(authorization string) ReservationAPIDeleteReservationLocatorsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteReservationLocatorsRequest) XAppKey(xAppKey string) ReservationAPIDeleteReservationLocatorsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteReservationLocatorsRequest) XHotelid(xHotelid string) ReservationAPIDeleteReservationLocatorsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIDeleteReservationLocatorsRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteReservationLocatorsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteReservationLocatorsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteReservationLocatorsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteReservationLocatorsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteReservationLocatorsExecute(r)
}

/*
DeleteReservationLocators Remove Reservation Locators

Delete a Guest Locater for a Reservation. <p><strong>OperationId:</strong>deleteReservationLocators</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param locatorId
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteReservationLocatorsRequest
*/
func (a *ReservationAPIService) DeleteReservationLocators(ctx context.Context, locatorId string, reservationId string, hotelId string) ReservationAPIDeleteReservationLocatorsRequest {
	return ReservationAPIDeleteReservationLocatorsRequest{
		ApiService: a,
		ctx: ctx,
		locatorId: locatorId,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteReservationLocatorsExecute(r ReservationAPIDeleteReservationLocatorsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteReservationLocators")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/guestLocators/{locatorId}"
	localVarPath = strings.Replace(localVarPath, "{"+"locatorId"+"}", url.PathEscape(parameterValueToString(r.locatorId, "locatorId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.locatorId) < 1 {
		return localVarReturnValue, nil, reportError("locatorId must have at least 1 elements")
	}
	if strlen(r.locatorId) > 2000 {
		return localVarReturnValue, nil, reportError("locatorId must have less than 2000 elements")
	}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteReservationLockRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	lockHandle string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteReservationLockRequest) Authorization(authorization string) ReservationAPIDeleteReservationLockRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteReservationLockRequest) XAppKey(xAppKey string) ReservationAPIDeleteReservationLockRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteReservationLockRequest) XHotelid(xHotelid string) ReservationAPIDeleteReservationLockRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIDeleteReservationLockRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteReservationLockRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteReservationLockRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteReservationLockRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteReservationLockRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteReservationLockExecute(r)
}

/*
DeleteReservationLock Release Reservation Lock

Release Reservation Lock. <p><strong>OperationId:</strong>deleteReservationLock</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param lockHandle Lock handle of the lock to be released.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteReservationLockRequest
*/
func (a *ReservationAPIService) DeleteReservationLock(ctx context.Context, lockHandle string, hotelId string) ReservationAPIDeleteReservationLockRequest {
	return ReservationAPIDeleteReservationLockRequest{
		ApiService: a,
		ctx: ctx,
		lockHandle: lockHandle,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteReservationLockExecute(r ReservationAPIDeleteReservationLockRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteReservationLock")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/locks/{lockHandle}"
	localVarPath = strings.Replace(localVarPath, "{"+"lockHandle"+"}", url.PathEscape(parameterValueToString(r.lockHandle, "lockHandle")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.lockHandle) < 1 {
		return localVarReturnValue, nil, reportError("lockHandle must have at least 1 elements")
	}
	if strlen(r.lockHandle) > 2000 {
		return localVarReturnValue, nil, reportError("lockHandle must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteReservationMembershipRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteReservationMembershipRequest) Authorization(authorization string) ReservationAPIDeleteReservationMembershipRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteReservationMembershipRequest) XAppKey(xAppKey string) ReservationAPIDeleteReservationMembershipRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteReservationMembershipRequest) XHotelid(xHotelid string) ReservationAPIDeleteReservationMembershipRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIDeleteReservationMembershipRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteReservationMembershipRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteReservationMembershipRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteReservationMembershipRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteReservationMembershipRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteReservationMembershipExecute(r)
}

/*
DeleteReservationMembership Delete a Reservation membership

Delete a membership from an existing reservation. <p><strong>OperationId:</strong>deleteReservationMembership</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteReservationMembershipRequest
*/
func (a *ReservationAPIService) DeleteReservationMembership(ctx context.Context, reservationId string, hotelId string) ReservationAPIDeleteReservationMembershipRequest {
	return ReservationAPIDeleteReservationMembershipRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteReservationMembershipExecute(r ReservationAPIDeleteReservationMembershipRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteReservationMembership")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/memberships"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteReservationPackageRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteReservationPackageRequest) Authorization(authorization string) ReservationAPIDeleteReservationPackageRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteReservationPackageRequest) XAppKey(xAppKey string) ReservationAPIDeleteReservationPackageRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteReservationPackageRequest) XHotelid(xHotelid string) ReservationAPIDeleteReservationPackageRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIDeleteReservationPackageRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteReservationPackageRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteReservationPackageRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteReservationPackageRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteReservationPackageRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteReservationPackageExecute(r)
}

/*
DeleteReservationPackage Delete a package from a Reservation

This API will allow you to delete packages from a reservation. <p><strong>OperationId:</strong>deleteReservationPackage</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteReservationPackageRequest
*/
func (a *ReservationAPIService) DeleteReservationPackage(ctx context.Context, reservationId string, hotelId string) ReservationAPIDeleteReservationPackageRequest {
	return ReservationAPIDeleteReservationPackageRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteReservationPackageExecute(r ReservationAPIDeleteReservationPackageRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteReservationPackage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/packages"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteReservationPreferenceRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	preferenceCode string
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteReservationPreferenceRequest) Authorization(authorization string) ReservationAPIDeleteReservationPreferenceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteReservationPreferenceRequest) XAppKey(xAppKey string) ReservationAPIDeleteReservationPreferenceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteReservationPreferenceRequest) XHotelid(xHotelid string) ReservationAPIDeleteReservationPreferenceRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIDeleteReservationPreferenceRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteReservationPreferenceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteReservationPreferenceRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteReservationPreferenceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteReservationPreferenceRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteReservationPreferenceExecute(r)
}

/*
DeleteReservationPreference Delete a Reservation Preference

You can use this API to remove a preference that exist on a reservation. <p><strong>OperationId:</strong>deleteReservationPreference</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param preferenceCode Preference Code
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteReservationPreferenceRequest
*/
func (a *ReservationAPIService) DeleteReservationPreference(ctx context.Context, preferenceCode string, reservationId string, hotelId string) ReservationAPIDeleteReservationPreferenceRequest {
	return ReservationAPIDeleteReservationPreferenceRequest{
		ApiService: a,
		ctx: ctx,
		preferenceCode: preferenceCode,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteReservationPreferenceExecute(r ReservationAPIDeleteReservationPreferenceRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteReservationPreference")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/preferences/{preferenceCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"preferenceCode"+"}", url.PathEscape(parameterValueToString(r.preferenceCode, "preferenceCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.preferenceCode) < 1 {
		return localVarReturnValue, nil, reportError("preferenceCode must have at least 1 elements")
	}
	if strlen(r.preferenceCode) > 2000 {
		return localVarReturnValue, nil, reportError("preferenceCode must have less than 2000 elements")
	}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteReservedInventoryItemsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteReservedInventoryItemsRequest) Authorization(authorization string) ReservationAPIDeleteReservedInventoryItemsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteReservedInventoryItemsRequest) XAppKey(xAppKey string) ReservationAPIDeleteReservedInventoryItemsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteReservedInventoryItemsRequest) XHotelid(xHotelid string) ReservationAPIDeleteReservedInventoryItemsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIDeleteReservedInventoryItemsRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteReservedInventoryItemsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteReservedInventoryItemsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteReservedInventoryItemsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteReservedInventoryItemsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteReservedInventoryItemsExecute(r)
}

/*
DeleteReservedInventoryItems Delete Reserved Inventory Items

Delete the Inventory Items reserved for the Reservation. <p><strong>OperationId:</strong>deleteReservedInventoryItems</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteReservedInventoryItemsRequest
*/
func (a *ReservationAPIService) DeleteReservedInventoryItems(ctx context.Context, reservationId string, hotelId string) ReservationAPIDeleteReservedInventoryItemsRequest {
	return ReservationAPIDeleteReservedInventoryItemsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteReservedInventoryItemsExecute(r ReservationAPIDeleteReservedInventoryItemsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteReservedInventoryItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/inventoryItems"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteRoutingInstructionsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteRoutingInstructionsRequest) Authorization(authorization string) ReservationAPIDeleteRoutingInstructionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteRoutingInstructionsRequest) XAppKey(xAppKey string) ReservationAPIDeleteRoutingInstructionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteRoutingInstructionsRequest) XHotelid(xHotelid string) ReservationAPIDeleteRoutingInstructionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIDeleteRoutingInstructionsRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteRoutingInstructionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteRoutingInstructionsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteRoutingInstructionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteRoutingInstructionsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteRoutingInstructionsExecute(r)
}

/*
DeleteRoutingInstructions Delete routing instructions

You can use this API to delete routing instructions from a reservation. <p><strong>OperationId:</strong>deleteRoutingInstructions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteRoutingInstructionsRequest

Deprecated
*/
func (a *ReservationAPIService) DeleteRoutingInstructions(ctx context.Context, reservationId string, hotelId string) ReservationAPIDeleteRoutingInstructionsRequest {
	return ReservationAPIDeleteRoutingInstructionsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
// Deprecated
func (a *ReservationAPIService) DeleteRoutingInstructionsExecute(r ReservationAPIDeleteRoutingInstructionsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteRoutingInstructions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/routingInstructions"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteSellMessageConfigRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteSellMessageConfigRequest) Authorization(authorization string) ReservationAPIDeleteSellMessageConfigRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteSellMessageConfigRequest) XAppKey(xAppKey string) ReservationAPIDeleteSellMessageConfigRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteSellMessageConfigRequest) XHotelid(xHotelid string) ReservationAPIDeleteSellMessageConfigRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIDeleteSellMessageConfigRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteSellMessageConfigRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteSellMessageConfigRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteSellMessageConfigRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteSellMessageConfigRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteSellMessageConfigExecute(r)
}

/*
DeleteSellMessageConfig Delete sell message

Delete an existing sell message configuration for a property. <p><strong>OperationId:</strong>deleteSellMessageConfig</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteSellMessageConfigRequest
*/
func (a *ReservationAPIService) DeleteSellMessageConfig(ctx context.Context, hotelId string) ReservationAPIDeleteSellMessageConfigRequest {
	return ReservationAPIDeleteSellMessageConfigRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteSellMessageConfigExecute(r ReservationAPIDeleteSellMessageConfigRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteSellMessageConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/sellMessages/config"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteSellMessageConfigByChainRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	sellMessageConfigId *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteSellMessageConfigByChainRequest) Authorization(authorization string) ReservationAPIDeleteSellMessageConfigByChainRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteSellMessageConfigByChainRequest) XAppKey(xAppKey string) ReservationAPIDeleteSellMessageConfigByChainRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteSellMessageConfigByChainRequest) XHotelid(xHotelid string) ReservationAPIDeleteSellMessageConfigByChainRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIDeleteSellMessageConfigByChainRequest) SellMessageConfigId(sellMessageConfigId []string) ReservationAPIDeleteSellMessageConfigByChainRequest {
	r.sellMessageConfigId = &sellMessageConfigId
	return r
}

// External system code.
func (r ReservationAPIDeleteSellMessageConfigByChainRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteSellMessageConfigByChainRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteSellMessageConfigByChainRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteSellMessageConfigByChainRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteSellMessageConfigByChainRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteSellMessageConfigByChainExecute(r)
}

/*
DeleteSellMessageConfigByChain Delete sell message by chain

Delete an existing sell message configuration. <p><strong>OperationId:</strong>deleteSellMessageConfigByChain</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReservationAPIDeleteSellMessageConfigByChainRequest
*/
func (a *ReservationAPIService) DeleteSellMessageConfigByChain(ctx context.Context) ReservationAPIDeleteSellMessageConfigByChainRequest {
	return ReservationAPIDeleteSellMessageConfigByChainRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteSellMessageConfigByChainExecute(r ReservationAPIDeleteSellMessageConfigByChainRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteSellMessageConfigByChain")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sellMessages/config"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sellMessageConfigId != nil {
		t := *r.sellMessageConfigId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sellMessageConfigId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sellMessageConfigId", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteShareReservationRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	overrideInventoryCheck *bool
	overrideMaxOccupancyCheck *bool
	overrideRateAvailabilityCheck *bool
	returnShareReservations *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteShareReservationRequest) Authorization(authorization string) ReservationAPIDeleteShareReservationRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteShareReservationRequest) XAppKey(xAppKey string) ReservationAPIDeleteShareReservationRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteShareReservationRequest) XHotelid(xHotelid string) ReservationAPIDeleteShareReservationRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicate to Override the Room Inventory Check if applicable.
func (r ReservationAPIDeleteShareReservationRequest) OverrideInventoryCheck(overrideInventoryCheck bool) ReservationAPIDeleteShareReservationRequest {
	r.overrideInventoryCheck = &overrideInventoryCheck
	return r
}

// Indicate to Override the check on Maximum Room Occupancy if applicable.
func (r ReservationAPIDeleteShareReservationRequest) OverrideMaxOccupancyCheck(overrideMaxOccupancyCheck bool) ReservationAPIDeleteShareReservationRequest {
	r.overrideMaxOccupancyCheck = &overrideMaxOccupancyCheck
	return r
}

// Indicate to Override the check on Maximum Room Occupancy if applicable.
func (r ReservationAPIDeleteShareReservationRequest) OverrideRateAvailabilityCheck(overrideRateAvailabilityCheck bool) ReservationAPIDeleteShareReservationRequest {
	r.overrideRateAvailabilityCheck = &overrideRateAvailabilityCheck
	return r
}

// After the break share operation, return the new list of Sharer Reservations.
func (r ReservationAPIDeleteShareReservationRequest) ReturnShareReservations(returnShareReservations bool) ReservationAPIDeleteShareReservationRequest {
	r.returnShareReservations = &returnShareReservations
	return r
}

// External system code.
func (r ReservationAPIDeleteShareReservationRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteShareReservationRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteShareReservationRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteShareReservationRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteShareReservationRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteShareReservationExecute(r)
}

/*
DeleteShareReservation Separate share Reservations

This API can be used to separate the share reservations. <p><strong>OperationId:</strong>deleteShareReservation</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteShareReservationRequest
*/
func (a *ReservationAPIService) DeleteShareReservation(ctx context.Context, reservationId string, hotelId string) ReservationAPIDeleteShareReservationRequest {
	return ReservationAPIDeleteShareReservationRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteShareReservationExecute(r ReservationAPIDeleteShareReservationRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteShareReservation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/shares"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.overrideInventoryCheck != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "overrideInventoryCheck", r.overrideInventoryCheck, "")
  }
	if r.overrideMaxOccupancyCheck != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "overrideMaxOccupancyCheck", r.overrideMaxOccupancyCheck, "")
  }
	if r.overrideRateAvailabilityCheck != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "overrideRateAvailabilityCheck", r.overrideRateAvailabilityCheck, "")
  }
	if r.returnShareReservations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "returnShareReservations", r.returnShareReservations, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteShareReservationByExtIdRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationExternalId string
	externalSystemCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	overrideInventoryCheck *bool
	overrideMaxOccupancyCheck *bool
	overrideRateAvailabilityCheck *bool
	returnShareReservations *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteShareReservationByExtIdRequest) Authorization(authorization string) ReservationAPIDeleteShareReservationByExtIdRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteShareReservationByExtIdRequest) XAppKey(xAppKey string) ReservationAPIDeleteShareReservationByExtIdRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteShareReservationByExtIdRequest) XHotelid(xHotelid string) ReservationAPIDeleteShareReservationByExtIdRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicate to Override the Room Inventory Check if applicable.
func (r ReservationAPIDeleteShareReservationByExtIdRequest) OverrideInventoryCheck(overrideInventoryCheck bool) ReservationAPIDeleteShareReservationByExtIdRequest {
	r.overrideInventoryCheck = &overrideInventoryCheck
	return r
}

// Indicate to Override the check on Maximum Room Occupancy if applicable.
func (r ReservationAPIDeleteShareReservationByExtIdRequest) OverrideMaxOccupancyCheck(overrideMaxOccupancyCheck bool) ReservationAPIDeleteShareReservationByExtIdRequest {
	r.overrideMaxOccupancyCheck = &overrideMaxOccupancyCheck
	return r
}

// Indicate to Override the check on Maximum Room Occupancy if applicable.
func (r ReservationAPIDeleteShareReservationByExtIdRequest) OverrideRateAvailabilityCheck(overrideRateAvailabilityCheck bool) ReservationAPIDeleteShareReservationByExtIdRequest {
	r.overrideRateAvailabilityCheck = &overrideRateAvailabilityCheck
	return r
}

// After the break share operation, return the new list of Sharer Reservations.
func (r ReservationAPIDeleteShareReservationByExtIdRequest) ReturnShareReservations(returnShareReservations bool) ReservationAPIDeleteShareReservationByExtIdRequest {
	r.returnShareReservations = &returnShareReservations
	return r
}

// External system code.
func (r ReservationAPIDeleteShareReservationByExtIdRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteShareReservationByExtIdRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteShareReservationByExtIdRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteShareReservationByExtIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteShareReservationByExtIdRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteShareReservationByExtIdExecute(r)
}

/*
DeleteShareReservationByExtId Separate share Reservations

This API can be used to separate the share reservations. <p><strong>OperationId:</strong>deleteShareReservationByExtId</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationExternalId External reservation ID.
 @param externalSystemCode Code to identify the external system from which the request is coming. This is the ExternalSystem ID used to exchange information between OPERA and the external system.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteShareReservationByExtIdRequest
*/
func (a *ReservationAPIService) DeleteShareReservationByExtId(ctx context.Context, reservationExternalId string, externalSystemCode string, hotelId string) ReservationAPIDeleteShareReservationByExtIdRequest {
	return ReservationAPIDeleteShareReservationByExtIdRequest{
		ApiService: a,
		ctx: ctx,
		reservationExternalId: reservationExternalId,
		externalSystemCode: externalSystemCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteShareReservationByExtIdExecute(r ReservationAPIDeleteShareReservationByExtIdRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteShareReservationByExtId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/shares"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationExternalId"+"}", url.PathEscape(parameterValueToString(r.reservationExternalId, "reservationExternalId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalSystemCode"+"}", url.PathEscape(parameterValueToString(r.externalSystemCode, "externalSystemCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationExternalId) < 1 {
		return localVarReturnValue, nil, reportError("reservationExternalId must have at least 1 elements")
	}
	if strlen(r.reservationExternalId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationExternalId must have less than 2000 elements")
	}
	if strlen(r.externalSystemCode) < 1 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have at least 1 elements")
	}
	if strlen(r.externalSystemCode) > 2000 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.overrideInventoryCheck != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "overrideInventoryCheck", r.overrideInventoryCheck, "")
  }
	if r.overrideMaxOccupancyCheck != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "overrideMaxOccupancyCheck", r.overrideMaxOccupancyCheck, "")
  }
	if r.overrideRateAvailabilityCheck != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "overrideRateAvailabilityCheck", r.overrideRateAvailabilityCheck, "")
  }
	if r.returnShareReservations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "returnShareReservations", r.returnShareReservations, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteTicketsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteTicketsRequest) Authorization(authorization string) ReservationAPIDeleteTicketsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteTicketsRequest) XAppKey(xAppKey string) ReservationAPIDeleteTicketsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteTicketsRequest) XHotelid(xHotelid string) ReservationAPIDeleteTicketsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIDeleteTicketsRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteTicketsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteTicketsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteTicketsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteTicketsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteTicketsExecute(r)
}

/*
DeleteTickets Delete tickets

You can use this API to delete tickets from a reservation. <p><strong>OperationId:</strong>deleteTickets</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteTicketsRequest
*/
func (a *ReservationAPIService) DeleteTickets(ctx context.Context, reservationId string, hotelId string) ReservationAPIDeleteTicketsRequest {
	return ReservationAPIDeleteTicketsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteTicketsExecute(r ReservationAPIDeleteTicketsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteTickets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/tickets"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteTransactionDiversionsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteTransactionDiversionsRequest) Authorization(authorization string) ReservationAPIDeleteTransactionDiversionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteTransactionDiversionsRequest) XAppKey(xAppKey string) ReservationAPIDeleteTransactionDiversionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteTransactionDiversionsRequest) XHotelid(xHotelid string) ReservationAPIDeleteTransactionDiversionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIDeleteTransactionDiversionsRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteTransactionDiversionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteTransactionDiversionsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteTransactionDiversionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteTransactionDiversionsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteTransactionDiversionsExecute(r)
}

/*
DeleteTransactionDiversions Delete Transaction Diversions 

You can use this API to delete Transaction Diversions. <p><strong>OperationId:</strong>deleteTransactionDiversions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteTransactionDiversionsRequest
*/
func (a *ReservationAPIService) DeleteTransactionDiversions(ctx context.Context, reservationId string, hotelId string) ReservationAPIDeleteTransactionDiversionsRequest {
	return ReservationAPIDeleteTransactionDiversionsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteTransactionDiversionsExecute(r ReservationAPIDeleteTransactionDiversionsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteTransactionDiversions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/transactionDiversions"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIDeleteUpsellRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIDeleteUpsellRequest) Authorization(authorization string) ReservationAPIDeleteUpsellRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIDeleteUpsellRequest) XAppKey(xAppKey string) ReservationAPIDeleteUpsellRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIDeleteUpsellRequest) XHotelid(xHotelid string) ReservationAPIDeleteUpsellRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIDeleteUpsellRequest) XExternalsystem(xExternalsystem string) ReservationAPIDeleteUpsellRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIDeleteUpsellRequest) AcceptLanguage(acceptLanguage string) ReservationAPIDeleteUpsellRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIDeleteUpsellRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteUpsellExecute(r)
}

/*
DeleteUpsell Delete a Reservation Upsell

This API will enable you to delete an upsell from a reservation. There may be reservation policies that might prevent an upsell from being deleted and as such an appropriate response will be returned. <p><strong>OperationId:</strong>deleteUpsell</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIDeleteUpsellRequest
*/
func (a *ReservationAPIService) DeleteUpsell(ctx context.Context, reservationId string, hotelId string) ReservationAPIDeleteUpsellRequest {
	return ReservationAPIDeleteUpsellRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) DeleteUpsellExecute(r ReservationAPIDeleteUpsellRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.DeleteUpsell")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/upsell"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetAlertNoticesRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	alertArea *string
	welcomeOffer *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetAlertNoticesRequest) Authorization(authorization string) ReservationAPIGetAlertNoticesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetAlertNoticesRequest) XAppKey(xAppKey string) ReservationAPIGetAlertNoticesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetAlertNoticesRequest) XHotelid(xHotelid string) ReservationAPIGetAlertNoticesRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r ReservationAPIGetAlertNoticesRequest) AlertArea(alertArea string) ReservationAPIGetAlertNoticesRequest {
	r.alertArea = &alertArea
	return r
}

// Determines whether to fetch Global Alert Notices or Welcome Offer Alert Notice.
func (r ReservationAPIGetAlertNoticesRequest) WelcomeOffer(welcomeOffer bool) ReservationAPIGetAlertNoticesRequest {
	r.welcomeOffer = &welcomeOffer
	return r
}

// External system code.
func (r ReservationAPIGetAlertNoticesRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetAlertNoticesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetAlertNoticesRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetAlertNoticesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetAlertNoticesRequest) Execute() (*Alerts, *http.Response, error) {
	return r.ApiService.GetAlertNoticesExecute(r)
}

/*
GetAlertNotices Fetch Alert Notices

Get the alert notices including global alerts for a reservation. <p><strong>OperationId:</strong>getAlertNotices</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetAlertNoticesRequest
*/
func (a *ReservationAPIService) GetAlertNotices(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetAlertNoticesRequest {
	return ReservationAPIGetAlertNoticesRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Alerts
func (a *ReservationAPIService) GetAlertNoticesExecute(r ReservationAPIGetAlertNoticesRequest) (*Alerts, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Alerts
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetAlertNotices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/alerts"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.alertArea != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "alertArea", r.alertArea, "")
  }
	if r.welcomeOffer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "welcomeOffer", r.welcomeOffer, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetAwardUpgradesRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	profileId *string
	idContext *string
	profileIdType *string
	membershipType *string
	membershipCardNo *string
	membershipPoints *int32
	id *[]string
	reservationTimeSpanStartDate *string
	reservationTimeSpanEndDate *string
	reservationTimeSpanDuration *string
	numberOfRooms *int32
	roomType *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetAwardUpgradesRequest) Authorization(authorization string) ReservationAPIGetAwardUpgradesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetAwardUpgradesRequest) XAppKey(xAppKey string) ReservationAPIGetAwardUpgradesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetAwardUpgradesRequest) XHotelid(xHotelid string) ReservationAPIGetAwardUpgradesRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetAwardUpgradesRequest) ProfileId(profileId string) ReservationAPIGetAwardUpgradesRequest {
	r.profileId = &profileId
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ReservationAPIGetAwardUpgradesRequest) IdContext(idContext string) ReservationAPIGetAwardUpgradesRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIGetAwardUpgradesRequest) ProfileIdType(profileIdType string) ReservationAPIGetAwardUpgradesRequest {
	r.profileIdType = &profileIdType
	return r
}

// The type of the membership.
func (r ReservationAPIGetAwardUpgradesRequest) MembershipType(membershipType string) ReservationAPIGetAwardUpgradesRequest {
	r.membershipType = &membershipType
	return r
}

// The card number associated with this membership.
func (r ReservationAPIGetAwardUpgradesRequest) MembershipCardNo(membershipCardNo string) ReservationAPIGetAwardUpgradesRequest {
	r.membershipCardNo = &membershipCardNo
	return r
}

// Current membership points available for this guest.
func (r ReservationAPIGetAwardUpgradesRequest) MembershipPoints(membershipPoints int32) ReservationAPIGetAwardUpgradesRequest {
	r.membershipPoints = &membershipPoints
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetAwardUpgradesRequest) Id(id []string) ReservationAPIGetAwardUpgradesRequest {
	r.id = &id
	return r
}

func (r ReservationAPIGetAwardUpgradesRequest) ReservationTimeSpanStartDate(reservationTimeSpanStartDate string) ReservationAPIGetAwardUpgradesRequest {
	r.reservationTimeSpanStartDate = &reservationTimeSpanStartDate
	return r
}

func (r ReservationAPIGetAwardUpgradesRequest) ReservationTimeSpanEndDate(reservationTimeSpanEndDate string) ReservationAPIGetAwardUpgradesRequest {
	r.reservationTimeSpanEndDate = &reservationTimeSpanEndDate
	return r
}

func (r ReservationAPIGetAwardUpgradesRequest) ReservationTimeSpanDuration(reservationTimeSpanDuration string) ReservationAPIGetAwardUpgradesRequest {
	r.reservationTimeSpanDuration = &reservationTimeSpanDuration
	return r
}

// The number of rooms.
func (r ReservationAPIGetAwardUpgradesRequest) NumberOfRooms(numberOfRooms int32) ReservationAPIGetAwardUpgradesRequest {
	r.numberOfRooms = &numberOfRooms
	return r
}

// Room type associated with the reservation.
func (r ReservationAPIGetAwardUpgradesRequest) RoomType(roomType string) ReservationAPIGetAwardUpgradesRequest {
	r.roomType = &roomType
	return r
}

// External system code.
func (r ReservationAPIGetAwardUpgradesRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetAwardUpgradesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetAwardUpgradesRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetAwardUpgradesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetAwardUpgradesRequest) Execute() (*AwardUpgrades, *http.Response, error) {
	return r.ApiService.GetAwardUpgradesExecute(r)
}

/*
GetAwardUpgrades Get Award Upgrades

Get award upgrades for a specific property. <p><strong>OperationId:</strong>getAwardUpgrades</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetAwardUpgradesRequest
*/
func (a *ReservationAPIService) GetAwardUpgrades(ctx context.Context, hotelId string) ReservationAPIGetAwardUpgradesRequest {
	return ReservationAPIGetAwardUpgradesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return AwardUpgrades
func (a *ReservationAPIService) GetAwardUpgradesExecute(r ReservationAPIGetAwardUpgradesRequest) (*AwardUpgrades, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AwardUpgrades
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetAwardUpgrades")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/awardUpgrades"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.profileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileId", r.profileId, "")
  }
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
  }
	if r.profileIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileIdType", r.profileIdType, "")
  }
	if r.membershipType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipType", r.membershipType, "")
  }
	if r.membershipCardNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipCardNo", r.membershipCardNo, "")
  }
	if r.membershipPoints != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipPoints", r.membershipPoints, "")
  }
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
  }
	if r.reservationTimeSpanStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationTimeSpanStartDate", r.reservationTimeSpanStartDate, "")
  }
	if r.reservationTimeSpanEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationTimeSpanEndDate", r.reservationTimeSpanEndDate, "")
  }
	if r.reservationTimeSpanDuration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationTimeSpanDuration", r.reservationTimeSpanDuration, "")
  }
	if r.numberOfRooms != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "numberOfRooms", r.numberOfRooms, "")
  }
	if r.roomType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", r.roomType, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetAwardsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationId *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetAwardsRequest) Authorization(authorization string) ReservationAPIGetAwardsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetAwardsRequest) XAppKey(xAppKey string) ReservationAPIGetAwardsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetAwardsRequest) XHotelid(xHotelid string) ReservationAPIGetAwardsRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetAwardsRequest) ReservationId(reservationId string) ReservationAPIGetAwardsRequest {
	r.reservationId = &reservationId
	return r
}

// External system code.
func (r ReservationAPIGetAwardsRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetAwardsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetAwardsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetAwardsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetAwardsRequest) Execute() (*ReservationAwards, *http.Response, error) {
	return r.ApiService.GetAwardsExecute(r)
}

/*
GetAwards Fetch Awards

Get certificates and awards associated with the Reservation. <p><strong>OperationId:</strong>getAwards</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetAwardsRequest
*/
func (a *ReservationAPIService) GetAwards(ctx context.Context, hotelId string) ReservationAPIGetAwardsRequest {
	return ReservationAPIGetAwardsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationAwards
func (a *ReservationAPIService) GetAwardsExecute(r ReservationAPIGetAwardsRequest) (*ReservationAwards, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationAwards
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetAwards")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/awards"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.reservationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationId", r.reservationId, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetCallHistoryRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetCallHistoryRequest) Authorization(authorization string) ReservationAPIGetCallHistoryRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetCallHistoryRequest) XAppKey(xAppKey string) ReservationAPIGetCallHistoryRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetCallHistoryRequest) XHotelid(xHotelid string) ReservationAPIGetCallHistoryRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIGetCallHistoryRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetCallHistoryRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetCallHistoryRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetCallHistoryRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetCallHistoryRequest) Execute() (*CallHistory, *http.Response, error) {
	return r.ApiService.GetCallHistoryExecute(r)
}

/*
GetCallHistory Get the Reservation Call History

Get the Reservation Call History <p><strong>OperationId:</strong>getCallHistory</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetCallHistoryRequest
*/
func (a *ReservationAPIService) GetCallHistory(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetCallHistoryRequest {
	return ReservationAPIGetCallHistoryRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CallHistory
func (a *ReservationAPIService) GetCallHistoryExecute(r ReservationAPIGetCallHistoryRequest) (*CallHistory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CallHistory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetCallHistory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/calls"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetCallStatisticsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	end *string
	start *string
	domain *string
	appUserName *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetCallStatisticsRequest) Authorization(authorization string) ReservationAPIGetCallStatisticsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetCallStatisticsRequest) XAppKey(xAppKey string) ReservationAPIGetCallStatisticsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetCallStatisticsRequest) XHotelid(xHotelid string) ReservationAPIGetCallStatisticsRequest {
	r.xHotelid = &xHotelid
	return r
}

// The ending value of the date range.
func (r ReservationAPIGetCallStatisticsRequest) End(end string) ReservationAPIGetCallStatisticsRequest {
	r.end = &end
	return r
}

// The starting value of the date range.
func (r ReservationAPIGetCallStatisticsRequest) Start(start string) ReservationAPIGetCallStatisticsRequest {
	r.start = &start
	return r
}

func (r ReservationAPIGetCallStatisticsRequest) Domain(domain string) ReservationAPIGetCallStatisticsRequest {
	r.domain = &domain
	return r
}

func (r ReservationAPIGetCallStatisticsRequest) AppUserName(appUserName []string) ReservationAPIGetCallStatisticsRequest {
	r.appUserName = &appUserName
	return r
}

// External system code.
func (r ReservationAPIGetCallStatisticsRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetCallStatisticsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetCallStatisticsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetCallStatisticsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetCallStatisticsRequest) Execute() (*CallStatistics, *http.Response, error) {
	return r.ApiService.GetCallStatisticsExecute(r)
}

/*
GetCallStatistics Get call statistics

Use this API to get call statistics. <p><strong>OperationId:</strong>getCallStatistics</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReservationAPIGetCallStatisticsRequest
*/
func (a *ReservationAPIService) GetCallStatistics(ctx context.Context) ReservationAPIGetCallStatisticsRequest {
	return ReservationAPIGetCallStatisticsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CallStatistics
func (a *ReservationAPIService) GetCallStatisticsExecute(r ReservationAPIGetCallStatisticsRequest) (*CallStatistics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CallStatistics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetCallStatistics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/calls/statistics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
  }
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
  }
	if r.domain != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "domain", r.domain, "")
  }
	if r.appUserName != nil {
		t := *r.appUserName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "appUserName", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "appUserName", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetCancellationHistoryRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelName *string
	roomStayStartDate *string
	roomStayEndDate *string
	roomStayDuration *string
	roomClass *string
	roomType *string
	numberOfRooms *int32
	roomId *string
	ratePlanCode *string
	reservationBlockHotelId *string
	reservationBlockId *[]string
	reservationBlockIdType *[]string
	blockName *string
	bookingChannelCode *string
	linkCode *string
	onHold *bool
	membershipAccountId *string
	membershipBonusCode *string
	membershipLevel *string
	membershipId *float32
	lastStayDate *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetCancellationHistoryRequest) Authorization(authorization string) ReservationAPIGetCancellationHistoryRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetCancellationHistoryRequest) XAppKey(xAppKey string) ReservationAPIGetCancellationHistoryRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetCancellationHistoryRequest) XHotelid(xHotelid string) ReservationAPIGetCancellationHistoryRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r ReservationAPIGetCancellationHistoryRequest) HotelName(hotelName string) ReservationAPIGetCancellationHistoryRequest {
	r.hotelName = &hotelName
	return r
}

func (r ReservationAPIGetCancellationHistoryRequest) RoomStayStartDate(roomStayStartDate string) ReservationAPIGetCancellationHistoryRequest {
	r.roomStayStartDate = &roomStayStartDate
	return r
}

func (r ReservationAPIGetCancellationHistoryRequest) RoomStayEndDate(roomStayEndDate string) ReservationAPIGetCancellationHistoryRequest {
	r.roomStayEndDate = &roomStayEndDate
	return r
}

func (r ReservationAPIGetCancellationHistoryRequest) RoomStayDuration(roomStayDuration string) ReservationAPIGetCancellationHistoryRequest {
	r.roomStayDuration = &roomStayDuration
	return r
}

// Room class code
func (r ReservationAPIGetCancellationHistoryRequest) RoomClass(roomClass string) ReservationAPIGetCancellationHistoryRequest {
	r.roomClass = &roomClass
	return r
}

// Room type code
func (r ReservationAPIGetCancellationHistoryRequest) RoomType(roomType string) ReservationAPIGetCancellationHistoryRequest {
	r.roomType = &roomType
	return r
}

// Room Id
func (r ReservationAPIGetCancellationHistoryRequest) NumberOfRooms(numberOfRooms int32) ReservationAPIGetCancellationHistoryRequest {
	r.numberOfRooms = &numberOfRooms
	return r
}

// Room Id
func (r ReservationAPIGetCancellationHistoryRequest) RoomId(roomId string) ReservationAPIGetCancellationHistoryRequest {
	r.roomId = &roomId
	return r
}

// Rate plan code
func (r ReservationAPIGetCancellationHistoryRequest) RatePlanCode(ratePlanCode string) ReservationAPIGetCancellationHistoryRequest {
	r.ratePlanCode = &ratePlanCode
	return r
}

// This is the HotelCode of the Block.
func (r ReservationAPIGetCancellationHistoryRequest) ReservationBlockHotelId(reservationBlockHotelId string) ReservationAPIGetCancellationHistoryRequest {
	r.reservationBlockHotelId = &reservationBlockHotelId
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetCancellationHistoryRequest) ReservationBlockId(reservationBlockId []string) ReservationAPIGetCancellationHistoryRequest {
	r.reservationBlockId = &reservationBlockId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIGetCancellationHistoryRequest) ReservationBlockIdType(reservationBlockIdType []string) ReservationAPIGetCancellationHistoryRequest {
	r.reservationBlockIdType = &reservationBlockIdType
	return r
}

// The Name of the block that is attached to the reservation.
func (r ReservationAPIGetCancellationHistoryRequest) BlockName(blockName string) ReservationAPIGetCancellationHistoryRequest {
	r.blockName = &blockName
	return r
}

// Booking channel code
func (r ReservationAPIGetCancellationHistoryRequest) BookingChannelCode(bookingChannelCode string) ReservationAPIGetCancellationHistoryRequest {
	r.bookingChannelCode = &bookingChannelCode
	return r
}

// Party code
func (r ReservationAPIGetCancellationHistoryRequest) LinkCode(linkCode string) ReservationAPIGetCancellationHistoryRequest {
	r.linkCode = &linkCode
	return r
}

// Guarantee Code.
func (r ReservationAPIGetCancellationHistoryRequest) OnHold(onHold bool) ReservationAPIGetCancellationHistoryRequest {
	r.onHold = &onHold
	return r
}

// The account identification number for this particular member in this particular program.
func (r ReservationAPIGetCancellationHistoryRequest) MembershipAccountId(membershipAccountId string) ReservationAPIGetCancellationHistoryRequest {
	r.membershipAccountId = &membershipAccountId
	return r
}

// The code or name of the bonus program. BonusCode can be used to indicate the level of membership (Gold Club, Platinum member, etc.)
func (r ReservationAPIGetCancellationHistoryRequest) MembershipBonusCode(membershipBonusCode string) ReservationAPIGetCancellationHistoryRequest {
	r.membershipBonusCode = &membershipBonusCode
	return r
}

// The code or name of the membership level and indicates the level of membership (Gold Club, Platinum member, etc.). This is same as the BonusCode.
func (r ReservationAPIGetCancellationHistoryRequest) MembershipLevel(membershipLevel string) ReservationAPIGetCancellationHistoryRequest {
	r.membershipLevel = &membershipLevel
	return r
}

// Membership ID (Unique ID from the memberships table).
func (r ReservationAPIGetCancellationHistoryRequest) MembershipId(membershipId float32) ReservationAPIGetCancellationHistoryRequest {
	r.membershipId = &membershipId
	return r
}

// Guest&#39;s last stay date.
func (r ReservationAPIGetCancellationHistoryRequest) LastStayDate(lastStayDate string) ReservationAPIGetCancellationHistoryRequest {
	r.lastStayDate = &lastStayDate
	return r
}

// External system code.
func (r ReservationAPIGetCancellationHistoryRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetCancellationHistoryRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetCancellationHistoryRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetCancellationHistoryRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetCancellationHistoryRequest) Execute() (*CancellationHistory, *http.Response, error) {
	return r.ApiService.GetCancellationHistoryExecute(r)
}

/*
GetCancellationHistory Get cancellation history

Get cancellation history for a reservation. <p><strong>OperationId:</strong>getCancellationHistory</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetCancellationHistoryRequest
*/
func (a *ReservationAPIService) GetCancellationHistory(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetCancellationHistoryRequest {
	return ReservationAPIGetCancellationHistoryRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CancellationHistory
func (a *ReservationAPIService) GetCancellationHistoryExecute(r ReservationAPIGetCancellationHistoryRequest) (*CancellationHistory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CancellationHistory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetCancellationHistory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/cancellationHistory"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.hotelName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelName", r.hotelName, "")
  }
	if r.roomStayStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomStayStartDate", r.roomStayStartDate, "")
  }
	if r.roomStayEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomStayEndDate", r.roomStayEndDate, "")
  }
	if r.roomStayDuration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomStayDuration", r.roomStayDuration, "")
  }
	if r.roomClass != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomClass", r.roomClass, "")
  }
	if r.roomType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", r.roomType, "")
  }
	if r.numberOfRooms != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "numberOfRooms", r.numberOfRooms, "")
  }
	if r.roomId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomId", r.roomId, "")
  }
	if r.ratePlanCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", r.ratePlanCode, "")
  }
	if r.reservationBlockHotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationBlockHotelId", r.reservationBlockHotelId, "")
  }
	if r.reservationBlockId != nil {
		t := *r.reservationBlockId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reservationBlockId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reservationBlockId", t, "multi")
		}
  }
	if r.reservationBlockIdType != nil {
		t := *r.reservationBlockIdType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reservationBlockIdType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reservationBlockIdType", t, "multi")
		}
  }
	if r.blockName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blockName", r.blockName, "")
  }
	if r.bookingChannelCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bookingChannelCode", r.bookingChannelCode, "")
  }
	if r.linkCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "linkCode", r.linkCode, "")
  }
	if r.onHold != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "onHold", r.onHold, "")
  }
	if r.membershipAccountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipAccountId", r.membershipAccountId, "")
  }
	if r.membershipBonusCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipBonusCode", r.membershipBonusCode, "")
  }
	if r.membershipLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipLevel", r.membershipLevel, "")
  }
	if r.membershipId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipId", r.membershipId, "")
  }
	if r.lastStayDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastStayDate", r.lastStayDate, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetConfirmationLettersRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	notAttached *bool
	pending *bool
	sent *bool
	createdOnEndDate *string
	createdOnStartDate *string
	arrivalEndDate *string
	arrivalStartDate *string
	letterStyleId *[]string
	letterStyle *[]string
	letterStyleIdType *[]string
	reservationGuestId *string
	reservationGuestIdType *string
	membershipId *string
	membershipLevelCode *[]string
	membershipTypeCode *[]string
	surname *string
	givenName *string
	blockHotelId *string
	blockId *[]string
	blockIdType *[]string
	blockName *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetConfirmationLettersRequest) Authorization(authorization string) ReservationAPIGetConfirmationLettersRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetConfirmationLettersRequest) XAppKey(xAppKey string) ReservationAPIGetConfirmationLettersRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetConfirmationLettersRequest) XHotelid(xHotelid string) ReservationAPIGetConfirmationLettersRequest {
	r.xHotelid = &xHotelid
	return r
}

// If true then the fetch result will include the reservations that do not have a letter attached to them.
func (r ReservationAPIGetConfirmationLettersRequest) NotAttached(notAttached bool) ReservationAPIGetConfirmationLettersRequest {
	r.notAttached = &notAttached
	return r
}

// If true then the result will include only the pending confirmation letters.
func (r ReservationAPIGetConfirmationLettersRequest) Pending(pending bool) ReservationAPIGetConfirmationLettersRequest {
	r.pending = &pending
	return r
}

// If true then the result will include only the confirmation letters that have been sent to the guest.
func (r ReservationAPIGetConfirmationLettersRequest) Sent(sent bool) ReservationAPIGetConfirmationLettersRequest {
	r.sent = &sent
	return r
}

// The ending value of the date range.
func (r ReservationAPIGetConfirmationLettersRequest) CreatedOnEndDate(createdOnEndDate string) ReservationAPIGetConfirmationLettersRequest {
	r.createdOnEndDate = &createdOnEndDate
	return r
}

// The starting value of the date range.
func (r ReservationAPIGetConfirmationLettersRequest) CreatedOnStartDate(createdOnStartDate string) ReservationAPIGetConfirmationLettersRequest {
	r.createdOnStartDate = &createdOnStartDate
	return r
}

// The ending value of the date range.
func (r ReservationAPIGetConfirmationLettersRequest) ArrivalEndDate(arrivalEndDate string) ReservationAPIGetConfirmationLettersRequest {
	r.arrivalEndDate = &arrivalEndDate
	return r
}

// The starting value of the date range.
func (r ReservationAPIGetConfirmationLettersRequest) ArrivalStartDate(arrivalStartDate string) ReservationAPIGetConfirmationLettersRequest {
	r.arrivalStartDate = &arrivalStartDate
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetConfirmationLettersRequest) LetterStyleId(letterStyleId []string) ReservationAPIGetConfirmationLettersRequest {
	r.letterStyleId = &letterStyleId
	return r
}

// Name of the confirmation letter style.
func (r ReservationAPIGetConfirmationLettersRequest) LetterStyle(letterStyle []string) ReservationAPIGetConfirmationLettersRequest {
	r.letterStyle = &letterStyle
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIGetConfirmationLettersRequest) LetterStyleIdType(letterStyleIdType []string) ReservationAPIGetConfirmationLettersRequest {
	r.letterStyleIdType = &letterStyleIdType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetConfirmationLettersRequest) ReservationGuestId(reservationGuestId string) ReservationAPIGetConfirmationLettersRequest {
	r.reservationGuestId = &reservationGuestId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIGetConfirmationLettersRequest) ReservationGuestIdType(reservationGuestIdType string) ReservationAPIGetConfirmationLettersRequest {
	r.reservationGuestIdType = &reservationGuestIdType
	return r
}

// Membership ID criteria.
func (r ReservationAPIGetConfirmationLettersRequest) MembershipId(membershipId string) ReservationAPIGetConfirmationLettersRequest {
	r.membershipId = &membershipId
	return r
}

func (r ReservationAPIGetConfirmationLettersRequest) MembershipLevelCode(membershipLevelCode []string) ReservationAPIGetConfirmationLettersRequest {
	r.membershipLevelCode = &membershipLevelCode
	return r
}

func (r ReservationAPIGetConfirmationLettersRequest) MembershipTypeCode(membershipTypeCode []string) ReservationAPIGetConfirmationLettersRequest {
	r.membershipTypeCode = &membershipTypeCode
	return r
}

// Family name, last name.
func (r ReservationAPIGetConfirmationLettersRequest) Surname(surname string) ReservationAPIGetConfirmationLettersRequest {
	r.surname = &surname
	return r
}

// Given name, first name or names
func (r ReservationAPIGetConfirmationLettersRequest) GivenName(givenName string) ReservationAPIGetConfirmationLettersRequest {
	r.givenName = &givenName
	return r
}

// This is the HotelCode of the Block.
func (r ReservationAPIGetConfirmationLettersRequest) BlockHotelId(blockHotelId string) ReservationAPIGetConfirmationLettersRequest {
	r.blockHotelId = &blockHotelId
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetConfirmationLettersRequest) BlockId(blockId []string) ReservationAPIGetConfirmationLettersRequest {
	r.blockId = &blockId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIGetConfirmationLettersRequest) BlockIdType(blockIdType []string) ReservationAPIGetConfirmationLettersRequest {
	r.blockIdType = &blockIdType
	return r
}

// The Name of the block that is attached to the reservation.
func (r ReservationAPIGetConfirmationLettersRequest) BlockName(blockName string) ReservationAPIGetConfirmationLettersRequest {
	r.blockName = &blockName
	return r
}

// External system code.
func (r ReservationAPIGetConfirmationLettersRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetConfirmationLettersRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetConfirmationLettersRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetConfirmationLettersRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetConfirmationLettersRequest) Execute() (*ReservationConfirmationLetters, *http.Response, error) {
	return r.ApiService.GetConfirmationLettersExecute(r)
}

/*
GetConfirmationLetters Fetch Confirmation Letters

Get a list of Reservations for which confirmation letters need to be sent. <p><strong>OperationId:</strong>getConfirmationLetters</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetConfirmationLettersRequest
*/
func (a *ReservationAPIService) GetConfirmationLetters(ctx context.Context, hotelId string) ReservationAPIGetConfirmationLettersRequest {
	return ReservationAPIGetConfirmationLettersRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationConfirmationLetters
func (a *ReservationAPIService) GetConfirmationLettersExecute(r ReservationAPIGetConfirmationLettersRequest) (*ReservationConfirmationLetters, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationConfirmationLetters
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetConfirmationLetters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/confirmationLetters"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.notAttached != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "notAttached", r.notAttached, "")
  }
	if r.pending != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pending", r.pending, "")
  }
	if r.sent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sent", r.sent, "")
  }
	if r.createdOnEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdOnEndDate", r.createdOnEndDate, "")
  }
	if r.createdOnStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdOnStartDate", r.createdOnStartDate, "")
  }
	if r.arrivalEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalEndDate", r.arrivalEndDate, "")
  }
	if r.arrivalStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalStartDate", r.arrivalStartDate, "")
  }
	if r.letterStyleId != nil {
		t := *r.letterStyleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "letterStyleId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "letterStyleId", t, "multi")
		}
  }
	if r.letterStyle != nil {
		t := *r.letterStyle
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "letterStyle", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "letterStyle", t, "multi")
		}
  }
	if r.letterStyleIdType != nil {
		t := *r.letterStyleIdType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "letterStyleIdType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "letterStyleIdType", t, "multi")
		}
  }
	if r.reservationGuestId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationGuestId", r.reservationGuestId, "")
  }
	if r.reservationGuestIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationGuestIdType", r.reservationGuestIdType, "")
  }
	if r.membershipId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipId", r.membershipId, "")
  }
	if r.membershipLevelCode != nil {
		t := *r.membershipLevelCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "membershipLevelCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "membershipLevelCode", t, "multi")
		}
  }
	if r.membershipTypeCode != nil {
		t := *r.membershipTypeCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "membershipTypeCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "membershipTypeCode", t, "multi")
		}
  }
	if r.surname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "surname", r.surname, "")
  }
	if r.givenName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "givenName", r.givenName, "")
  }
	if r.blockHotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blockHotelId", r.blockHotelId, "")
  }
	if r.blockId != nil {
		t := *r.blockId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "blockId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "blockId", t, "multi")
		}
  }
	if r.blockIdType != nil {
		t := *r.blockIdType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "blockIdType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "blockIdType", t, "multi")
		}
  }
	if r.blockName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blockName", r.blockName, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetECouponsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetECouponsRequest) Authorization(authorization string) ReservationAPIGetECouponsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetECouponsRequest) XAppKey(xAppKey string) ReservationAPIGetECouponsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetECouponsRequest) XHotelid(xHotelid string) ReservationAPIGetECouponsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ReservationAPIGetECouponsRequest) Limit(limit int32) ReservationAPIGetECouponsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ReservationAPIGetECouponsRequest) Offset(offset int32) ReservationAPIGetECouponsRequest {
	r.offset = &offset
	return r
}

// External system code.
func (r ReservationAPIGetECouponsRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetECouponsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetECouponsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetECouponsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetECouponsRequest) Execute() (*ECoupons, *http.Response, error) {
	return r.ApiService.GetECouponsExecute(r)
}

/*
GetECoupons Get Reservation Ecoupons

Get the Reservation Ecoupons. <p><strong>OperationId:</strong>getECoupons</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetECouponsRequest
*/
func (a *ReservationAPIService) GetECoupons(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetECouponsRequest {
	return ReservationAPIGetECouponsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ECoupons
func (a *ReservationAPIService) GetECouponsExecute(r ReservationAPIGetECouponsRequest) (*ECoupons, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ECoupons
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetECoupons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/eCoupons"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetExternalSystemDeliveryHistoryRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationId *string
	reservationIdType *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetExternalSystemDeliveryHistoryRequest) Authorization(authorization string) ReservationAPIGetExternalSystemDeliveryHistoryRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetExternalSystemDeliveryHistoryRequest) XAppKey(xAppKey string) ReservationAPIGetExternalSystemDeliveryHistoryRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetExternalSystemDeliveryHistoryRequest) XHotelid(xHotelid string) ReservationAPIGetExternalSystemDeliveryHistoryRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetExternalSystemDeliveryHistoryRequest) ReservationId(reservationId string) ReservationAPIGetExternalSystemDeliveryHistoryRequest {
	r.reservationId = &reservationId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIGetExternalSystemDeliveryHistoryRequest) ReservationIdType(reservationIdType string) ReservationAPIGetExternalSystemDeliveryHistoryRequest {
	r.reservationIdType = &reservationIdType
	return r
}

// External system code.
func (r ReservationAPIGetExternalSystemDeliveryHistoryRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetExternalSystemDeliveryHistoryRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetExternalSystemDeliveryHistoryRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetExternalSystemDeliveryHistoryRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetExternalSystemDeliveryHistoryRequest) Execute() (*DeliveryHistoryLog, *http.Response, error) {
	return r.ApiService.GetExternalSystemDeliveryHistoryExecute(r)
}

/*
GetExternalSystemDeliveryHistory Get External system delivery history

Get external system delivery history. <p><strong>OperationId:</strong>getExternalSystemDeliveryHistory</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetExternalSystemDeliveryHistoryRequest
*/
func (a *ReservationAPIService) GetExternalSystemDeliveryHistory(ctx context.Context, hotelId string) ReservationAPIGetExternalSystemDeliveryHistoryRequest {
	return ReservationAPIGetExternalSystemDeliveryHistoryRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return DeliveryHistoryLog
func (a *ReservationAPIService) GetExternalSystemDeliveryHistoryExecute(r ReservationAPIGetExternalSystemDeliveryHistoryRequest) (*DeliveryHistoryLog, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeliveryHistoryLog
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetExternalSystemDeliveryHistory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/fetchExternalSystemDeliveryHistory"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.reservationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationId", r.reservationId, "")
  }
	if r.reservationIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIdType", r.reservationIdType, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetExternalSystemReservationsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	extSystemCode string
	externalReferenceList *[]string
	authorization *string
	xAppKey *string
	xHotelid *string
	recentlyAccessed *bool
	limit *int32
	offset *int32
	searchType *string
	hotelIds *[]string
	text *string
	arrivalEndDate *string
	arrivalStartDate *string
	departureEndDate *string
	departureStartDate *string
	expectedArrivalStartTime *string
	expectedArrivalEndTime *string
	expectedReturnEndTime *string
	expectedReturnStartTime *string
	companyNames *[]string
	travelAgentIds *[]string
	companyIds *[]string
	sourceIds *[]string
	contactIds *[]string
	groupIds *[]string
	billingContactIds *[]string
	profileIds *[]string
	membershipCardNumber *string
	membershipLevels *[]string
	membershipTypes *[]string
	surname *string
	givenName *string
	anyVIPStatus *bool
	vipCodes *[]string
	guaranteeCode *string
	paymentMethod *string
	discountApplied *bool
	user *[]string
	createdBy *string
	cancelledByList *[]string
	cancelledOn *string
	ratePlanCodes *[]string
	sourceCodes *[]string
	marketCodes *[]string
	excludeBlockReservations *bool
	blockName *string
	blockIds *[]string
	blockCodes *[]string
	customReference *string
	recordLocator *string
	orderBy *[]string
	sortOrder *[]string
	roomAssignedOnly *bool
	roomUnassignedOnly *bool
	roomId *string
	roomType *[]string
	roomFeatures *[]string
	roomSpecials *[]string
	roomSmokingPreference *string
	roomFloorPreferences *[]string
	housekeepingRoomStatuses *[]string
	roomClasses *[]string
	roomRangeFrom *string
	roomRangeTo *string
	communication *string
	fetchInstructions *[]string
	allowPreRegistration *bool
	hasDepositBalance *bool
	hasOpenBalance *bool
	hasOpenFolio *bool
	includeScheduledCheckOut *bool
	linkedOnly *bool
	unlinkedOnly *bool
	actualArrivals *bool
	actualDepartures *bool
	complimentaryReservations *bool
	dayOfArrivalCancels *bool
	dayUse *bool
	earlyDepartures *bool
	expectedArrivals *bool
	expectedDepartures *bool
	extendedStays *bool
	houseUseReservations *bool
	stayovers *bool
	stayDate *string
	roomRoutingId *string
	excludePseudoRoomReservations *bool
	excludeReservationIds *[]string
	excludeVIPStatusCodes *[]string
	excludeSpecials *[]string
	excludeFloorPreferences *[]string
	excludeAdvanceCheckedIn *bool
	excludeRoomFeatures *[]string
	playerId *string
	gamingBalanceFrom *float32
	gamingBalanceTo *float32
	compAccountingBalanceFrom *float32
	compAccountingBalanceTo *float32
	searchTypes *[]string
	reservationStatuses *[]string
	transportationCodes *[]string
	roomReadyStatuses *[]string
	checkoutMessageReceived *bool
	optedForCommunication *bool
	xExternalsystem *string
	acceptLanguage *string
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetExternalSystemReservationsRequest) ExternalReferenceList(externalReferenceList []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.externalReferenceList = &externalReferenceList
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetExternalSystemReservationsRequest) Authorization(authorization string) ReservationAPIGetExternalSystemReservationsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetExternalSystemReservationsRequest) XAppKey(xAppKey string) ReservationAPIGetExternalSystemReservationsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetExternalSystemReservationsRequest) XHotelid(xHotelid string) ReservationAPIGetExternalSystemReservationsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Mark this reservation as recently accessed.
func (r ReservationAPIGetExternalSystemReservationsRequest) RecentlyAccessed(recentlyAccessed bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.recentlyAccessed = &recentlyAccessed
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ReservationAPIGetExternalSystemReservationsRequest) Limit(limit int32) ReservationAPIGetExternalSystemReservationsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ReservationAPIGetExternalSystemReservationsRequest) Offset(offset int32) ReservationAPIGetExternalSystemReservationsRequest {
	r.offset = &offset
	return r
}

// Represents Reservation search type Player Snapshot.
func (r ReservationAPIGetExternalSystemReservationsRequest) SearchType(searchType string) ReservationAPIGetExternalSystemReservationsRequest {
	r.searchType = &searchType
	return r
}

// List of Hotels to support searches with multiple resorts for which traces are to be fetched.
func (r ReservationAPIGetExternalSystemReservationsRequest) HotelIds(hotelIds []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.hotelIds = &hotelIds
	return r
}

// Free form text field for searching all reservation fields
func (r ReservationAPIGetExternalSystemReservationsRequest) Text(text string) ReservationAPIGetExternalSystemReservationsRequest {
	r.text = &text
	return r
}

// The ending value of the date range.
func (r ReservationAPIGetExternalSystemReservationsRequest) ArrivalEndDate(arrivalEndDate string) ReservationAPIGetExternalSystemReservationsRequest {
	r.arrivalEndDate = &arrivalEndDate
	return r
}

// The starting value of the date range.
func (r ReservationAPIGetExternalSystemReservationsRequest) ArrivalStartDate(arrivalStartDate string) ReservationAPIGetExternalSystemReservationsRequest {
	r.arrivalStartDate = &arrivalStartDate
	return r
}

// The ending value of the date range.
func (r ReservationAPIGetExternalSystemReservationsRequest) DepartureEndDate(departureEndDate string) ReservationAPIGetExternalSystemReservationsRequest {
	r.departureEndDate = &departureEndDate
	return r
}

// The starting value of the date range.
func (r ReservationAPIGetExternalSystemReservationsRequest) DepartureStartDate(departureStartDate string) ReservationAPIGetExternalSystemReservationsRequest {
	r.departureStartDate = &departureStartDate
	return r
}

// The ending value of the time span.
func (r ReservationAPIGetExternalSystemReservationsRequest) ExpectedArrivalStartTime(expectedArrivalStartTime string) ReservationAPIGetExternalSystemReservationsRequest {
	r.expectedArrivalStartTime = &expectedArrivalStartTime
	return r
}

// The starting value of the time span.
func (r ReservationAPIGetExternalSystemReservationsRequest) ExpectedArrivalEndTime(expectedArrivalEndTime string) ReservationAPIGetExternalSystemReservationsRequest {
	r.expectedArrivalEndTime = &expectedArrivalEndTime
	return r
}

// The ending value of the time span.
func (r ReservationAPIGetExternalSystemReservationsRequest) ExpectedReturnEndTime(expectedReturnEndTime string) ReservationAPIGetExternalSystemReservationsRequest {
	r.expectedReturnEndTime = &expectedReturnEndTime
	return r
}

// The starting value of the time span.
func (r ReservationAPIGetExternalSystemReservationsRequest) ExpectedReturnStartTime(expectedReturnStartTime string) ReservationAPIGetExternalSystemReservationsRequest {
	r.expectedReturnStartTime = &expectedReturnStartTime
	return r
}

// Attached profile name
func (r ReservationAPIGetExternalSystemReservationsRequest) CompanyNames(companyNames []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.companyNames = &companyNames
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetExternalSystemReservationsRequest) TravelAgentIds(travelAgentIds []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.travelAgentIds = &travelAgentIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetExternalSystemReservationsRequest) CompanyIds(companyIds []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.companyIds = &companyIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetExternalSystemReservationsRequest) SourceIds(sourceIds []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.sourceIds = &sourceIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetExternalSystemReservationsRequest) ContactIds(contactIds []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.contactIds = &contactIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetExternalSystemReservationsRequest) GroupIds(groupIds []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.groupIds = &groupIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetExternalSystemReservationsRequest) BillingContactIds(billingContactIds []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.billingContactIds = &billingContactIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetExternalSystemReservationsRequest) ProfileIds(profileIds []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.profileIds = &profileIds
	return r
}

// Membership ID criteria.
func (r ReservationAPIGetExternalSystemReservationsRequest) MembershipCardNumber(membershipCardNumber string) ReservationAPIGetExternalSystemReservationsRequest {
	r.membershipCardNumber = &membershipCardNumber
	return r
}

func (r ReservationAPIGetExternalSystemReservationsRequest) MembershipLevels(membershipLevels []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.membershipLevels = &membershipLevels
	return r
}

func (r ReservationAPIGetExternalSystemReservationsRequest) MembershipTypes(membershipTypes []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.membershipTypes = &membershipTypes
	return r
}

// Family name, last name.
func (r ReservationAPIGetExternalSystemReservationsRequest) Surname(surname string) ReservationAPIGetExternalSystemReservationsRequest {
	r.surname = &surname
	return r
}

// Given name, first name or names
func (r ReservationAPIGetExternalSystemReservationsRequest) GivenName(givenName string) ReservationAPIGetExternalSystemReservationsRequest {
	r.givenName = &givenName
	return r
}

// VIP status of the customer.
func (r ReservationAPIGetExternalSystemReservationsRequest) AnyVIPStatus(anyVIPStatus bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.anyVIPStatus = &anyVIPStatus
	return r
}

// VIP status of the customer.
func (r ReservationAPIGetExternalSystemReservationsRequest) VipCodes(vipCodes []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.vipCodes = &vipCodes
	return r
}

// Fetches the reservation having Guarantee Code(Reservation Type) supplied here.
func (r ReservationAPIGetExternalSystemReservationsRequest) GuaranteeCode(guaranteeCode string) ReservationAPIGetExternalSystemReservationsRequest {
	r.guaranteeCode = &guaranteeCode
	return r
}

// Fetches the reservation having method of payment supplied here.
func (r ReservationAPIGetExternalSystemReservationsRequest) PaymentMethod(paymentMethod string) ReservationAPIGetExternalSystemReservationsRequest {
	r.paymentMethod = &paymentMethod
	return r
}

// Fetches the reservation for which discount is applied
func (r ReservationAPIGetExternalSystemReservationsRequest) DiscountApplied(discountApplied bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.discountApplied = &discountApplied
	return r
}

func (r ReservationAPIGetExternalSystemReservationsRequest) User(user []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.user = &user
	return r
}

// Fetches reservation created by specified user. If both CreatedByUsers and CreatedBy is specified, CreatedByUsers will take precedence.
func (r ReservationAPIGetExternalSystemReservationsRequest) CreatedBy(createdBy string) ReservationAPIGetExternalSystemReservationsRequest {
	r.createdBy = &createdBy
	return r
}

// Fetches reservations cancelled by list of users.
func (r ReservationAPIGetExternalSystemReservationsRequest) CancelledByList(cancelledByList []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.cancelledByList = &cancelledByList
	return r
}

// Fetches the reservations which are cancelled on a specific date.
func (r ReservationAPIGetExternalSystemReservationsRequest) CancelledOn(cancelledOn string) ReservationAPIGetExternalSystemReservationsRequest {
	r.cancelledOn = &cancelledOn
	return r
}

func (r ReservationAPIGetExternalSystemReservationsRequest) RatePlanCodes(ratePlanCodes []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.ratePlanCodes = &ratePlanCodes
	return r
}

func (r ReservationAPIGetExternalSystemReservationsRequest) SourceCodes(sourceCodes []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.sourceCodes = &sourceCodes
	return r
}

func (r ReservationAPIGetExternalSystemReservationsRequest) MarketCodes(marketCodes []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.marketCodes = &marketCodes
	return r
}

// If true the search result will exclude the blocks reservations.
func (r ReservationAPIGetExternalSystemReservationsRequest) ExcludeBlockReservations(excludeBlockReservations bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.excludeBlockReservations = &excludeBlockReservations
	return r
}

// The Name of the block that is attached to the reservation.
func (r ReservationAPIGetExternalSystemReservationsRequest) BlockName(blockName string) ReservationAPIGetExternalSystemReservationsRequest {
	r.blockName = &blockName
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetExternalSystemReservationsRequest) BlockIds(blockIds []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.blockIds = &blockIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetExternalSystemReservationsRequest) BlockCodes(blockCodes []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.blockCodes = &blockCodes
	return r
}

// Custom reference
func (r ReservationAPIGetExternalSystemReservationsRequest) CustomReference(customReference string) ReservationAPIGetExternalSystemReservationsRequest {
	r.customReference = &customReference
	return r
}

// GDS Record Locator for reservation.
func (r ReservationAPIGetExternalSystemReservationsRequest) RecordLocator(recordLocator string) ReservationAPIGetExternalSystemReservationsRequest {
	r.recordLocator = &recordLocator
	return r
}

func (r ReservationAPIGetExternalSystemReservationsRequest) OrderBy(orderBy []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ReservationAPIGetExternalSystemReservationsRequest) SortOrder(sortOrder []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.sortOrder = &sortOrder
	return r
}

// Indicator to query reservations which have a room number assigned.
func (r ReservationAPIGetExternalSystemReservationsRequest) RoomAssignedOnly(roomAssignedOnly bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.roomAssignedOnly = &roomAssignedOnly
	return r
}

// Indicator to query reservations which does not have a room number assigned.
func (r ReservationAPIGetExternalSystemReservationsRequest) RoomUnassignedOnly(roomUnassignedOnly bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.roomUnassignedOnly = &roomUnassignedOnly
	return r
}

// Room number of the reservation to search by.
func (r ReservationAPIGetExternalSystemReservationsRequest) RoomId(roomId string) ReservationAPIGetExternalSystemReservationsRequest {
	r.roomId = &roomId
	return r
}

// Room Type.
func (r ReservationAPIGetExternalSystemReservationsRequest) RoomType(roomType []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.roomType = &roomType
	return r
}

// A code representing a room feature.
func (r ReservationAPIGetExternalSystemReservationsRequest) RoomFeatures(roomFeatures []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.roomFeatures = &roomFeatures
	return r
}

// Preference value for display purposes.
func (r ReservationAPIGetExternalSystemReservationsRequest) RoomSpecials(roomSpecials []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.roomSpecials = &roomSpecials
	return r
}

// Preference value for display purposes.
func (r ReservationAPIGetExternalSystemReservationsRequest) RoomSmokingPreference(roomSmokingPreference string) ReservationAPIGetExternalSystemReservationsRequest {
	r.roomSmokingPreference = &roomSmokingPreference
	return r
}

// Preference value for display purposes.
func (r ReservationAPIGetExternalSystemReservationsRequest) RoomFloorPreferences(roomFloorPreferences []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.roomFloorPreferences = &roomFloorPreferences
	return r
}

// Simple type for room status instructions to be used in requests for fetching housekeeping rooms. Valid status values are Clean, Dirty, Pickup, Inspected, OutOfOrder, OutOfService.
func (r ReservationAPIGetExternalSystemReservationsRequest) HousekeepingRoomStatuses(housekeepingRoomStatuses []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.housekeepingRoomStatuses = &housekeepingRoomStatuses
	return r
}

func (r ReservationAPIGetExternalSystemReservationsRequest) RoomClasses(roomClasses []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.roomClasses = &roomClasses
	return r
}

func (r ReservationAPIGetExternalSystemReservationsRequest) RoomRangeFrom(roomRangeFrom string) ReservationAPIGetExternalSystemReservationsRequest {
	r.roomRangeFrom = &roomRangeFrom
	return r
}

func (r ReservationAPIGetExternalSystemReservationsRequest) RoomRangeTo(roomRangeTo string) ReservationAPIGetExternalSystemReservationsRequest {
	r.roomRangeTo = &roomRangeTo
	return r
}

// Filter by the last digits of a reservation&#39;s phone number.
func (r ReservationAPIGetExternalSystemReservationsRequest) Communication(communication string) ReservationAPIGetExternalSystemReservationsRequest {
	r.communication = &communication
	return r
}

// Instruction to fetch whether the room was assigned/upgraded by AI. This will also include Reservation instruction.
func (r ReservationAPIGetExternalSystemReservationsRequest) FetchInstructions(fetchInstructions []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// Flag containing true or false value for reservation to be eligible for prior check in by guest using mobile device. Pass the &#39;true&#39; or &#39;false&#39; values when creating / modifying reservation to indicate whether a reservation is eligible for mobile check in yes / no. Upon fetch, the current state of the flag will show true or false.
func (r ReservationAPIGetExternalSystemReservationsRequest) AllowPreRegistration(allowPreRegistration bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.allowPreRegistration = &allowPreRegistration
	return r
}

// Indicates that only reservations with deposit balance should be expected from the result.
func (r ReservationAPIGetExternalSystemReservationsRequest) HasDepositBalance(hasDepositBalance bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.hasDepositBalance = &hasDepositBalance
	return r
}

// Indicates that only reservations with open balance should be expected from the result.
func (r ReservationAPIGetExternalSystemReservationsRequest) HasOpenBalance(hasOpenBalance bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.hasOpenBalance = &hasOpenBalance
	return r
}

// Indicates that only reservations with open folio should be expected from the result.
func (r ReservationAPIGetExternalSystemReservationsRequest) HasOpenFolio(hasOpenFolio bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.hasOpenFolio = &hasOpenFolio
	return r
}

// Criteria that indicates whether to scheduled checkouts or not.
func (r ReservationAPIGetExternalSystemReservationsRequest) IncludeScheduledCheckOut(includeScheduledCheckOut bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.includeScheduledCheckOut = &includeScheduledCheckOut
	return r
}

// Indicates that only linked reservations should be expected from the result.
func (r ReservationAPIGetExternalSystemReservationsRequest) LinkedOnly(linkedOnly bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.linkedOnly = &linkedOnly
	return r
}

// Indicates that only unlinked reservations should be expected from the result.
func (r ReservationAPIGetExternalSystemReservationsRequest) UnlinkedOnly(unlinkedOnly bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.unlinkedOnly = &unlinkedOnly
	return r
}

// Indicates if reservations which have already arrived on the Search Date is required.
func (r ReservationAPIGetExternalSystemReservationsRequest) ActualArrivals(actualArrivals bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.actualArrivals = &actualArrivals
	return r
}

// Indicates if reservations which were expected to depart on the Search Date and have already checked, is required.
func (r ReservationAPIGetExternalSystemReservationsRequest) ActualDepartures(actualDepartures bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.actualDepartures = &actualDepartures
	return r
}

// Indicates if reservations where rate codes are marked as Complimentary Rates , is required. This flag should be used in conjunction with the Arrivals, Departures or StayOvers criteria.
func (r ReservationAPIGetExternalSystemReservationsRequest) ComplimentaryReservations(complimentaryReservations bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.complimentaryReservations = &complimentaryReservations
	return r
}

// Indicates if reservations which have cancelled on the Search Date which is also the day of arrival is required.
func (r ReservationAPIGetExternalSystemReservationsRequest) DayOfArrivalCancels(dayOfArrivalCancels bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.dayOfArrivalCancels = &dayOfArrivalCancels
	return r
}

// Indicates if reservations which are day use reservation on the Search Date, is required.
func (r ReservationAPIGetExternalSystemReservationsRequest) DayUse(dayUse bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.dayUse = &dayUse
	return r
}

// Indicates if reservations which checked out early on the Search Date, is required.
func (r ReservationAPIGetExternalSystemReservationsRequest) EarlyDepartures(earlyDepartures bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.earlyDepartures = &earlyDepartures
	return r
}

// Indicates if reservations which are expected arrivals for the Search Date and who have not yet arrived, is required.
func (r ReservationAPIGetExternalSystemReservationsRequest) ExpectedArrivals(expectedArrivals bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.expectedArrivals = &expectedArrivals
	return r
}

// Indicates if reservations which are expected departures for the Search Date and who have not yet departed, is required.
func (r ReservationAPIGetExternalSystemReservationsRequest) ExpectedDepartures(expectedDepartures bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.expectedDepartures = &expectedDepartures
	return r
}

// Indicates if reservations which have extended their stays on the Search Date, is required.
func (r ReservationAPIGetExternalSystemReservationsRequest) ExtendedStays(extendedStays bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.extendedStays = &extendedStays
	return r
}

// Indicates if reservations where rate codes are marked as House Use Rates , is required. This flag should be used in conjunction with the Arrivals, Departures or StayOvers criteria.
func (r ReservationAPIGetExternalSystemReservationsRequest) HouseUseReservations(houseUseReservations bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.houseUseReservations = &houseUseReservations
	return r
}

// Indicates if reservations which are StayOvers on the Search Date, is required.
func (r ReservationAPIGetExternalSystemReservationsRequest) Stayovers(stayovers bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.stayovers = &stayovers
	return r
}

// Date for searching the reservations. This is the date for which the search types are applicable. If date is not available, the business date will be used by default.
func (r ReservationAPIGetExternalSystemReservationsRequest) StayDate(stayDate string) ReservationAPIGetExternalSystemReservationsRequest {
	r.stayDate = &stayDate
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetExternalSystemReservationsRequest) RoomRoutingId(roomRoutingId string) ReservationAPIGetExternalSystemReservationsRequest {
	r.roomRoutingId = &roomRoutingId
	return r
}

// Indicates to exclude Pseudo room reservations.
func (r ReservationAPIGetExternalSystemReservationsRequest) ExcludePseudoRoomReservations(excludePseudoRoomReservations bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.excludePseudoRoomReservations = &excludePseudoRoomReservations
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetExternalSystemReservationsRequest) ExcludeReservationIds(excludeReservationIds []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.excludeReservationIds = &excludeReservationIds
	return r
}

// VIP status of the customer.
func (r ReservationAPIGetExternalSystemReservationsRequest) ExcludeVIPStatusCodes(excludeVIPStatusCodes []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.excludeVIPStatusCodes = &excludeVIPStatusCodes
	return r
}

// Preference value for display purposes.
func (r ReservationAPIGetExternalSystemReservationsRequest) ExcludeSpecials(excludeSpecials []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.excludeSpecials = &excludeSpecials
	return r
}

// Preference value for display purposes.
func (r ReservationAPIGetExternalSystemReservationsRequest) ExcludeFloorPreferences(excludeFloorPreferences []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.excludeFloorPreferences = &excludeFloorPreferences
	return r
}

// Indicates to exclude Advance Checked In Reservations from search result.
func (r ReservationAPIGetExternalSystemReservationsRequest) ExcludeAdvanceCheckedIn(excludeAdvanceCheckedIn bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.excludeAdvanceCheckedIn = &excludeAdvanceCheckedIn
	return r
}

// Exclude the reservation(s) with provided room features from the search result.
func (r ReservationAPIGetExternalSystemReservationsRequest) ExcludeRoomFeatures(excludeRoomFeatures []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.excludeRoomFeatures = &excludeRoomFeatures
	return r
}

// Player ID associated to the reservation.
func (r ReservationAPIGetExternalSystemReservationsRequest) PlayerId(playerId string) ReservationAPIGetExternalSystemReservationsRequest {
	r.playerId = &playerId
	return r
}

// Balance from.
func (r ReservationAPIGetExternalSystemReservationsRequest) GamingBalanceFrom(gamingBalanceFrom float32) ReservationAPIGetExternalSystemReservationsRequest {
	r.gamingBalanceFrom = &gamingBalanceFrom
	return r
}

// Balance to.
func (r ReservationAPIGetExternalSystemReservationsRequest) GamingBalanceTo(gamingBalanceTo float32) ReservationAPIGetExternalSystemReservationsRequest {
	r.gamingBalanceTo = &gamingBalanceTo
	return r
}

// Comp Balance From
func (r ReservationAPIGetExternalSystemReservationsRequest) CompAccountingBalanceFrom(compAccountingBalanceFrom float32) ReservationAPIGetExternalSystemReservationsRequest {
	r.compAccountingBalanceFrom = &compAccountingBalanceFrom
	return r
}

// Comp Balance To
func (r ReservationAPIGetExternalSystemReservationsRequest) CompAccountingBalanceTo(compAccountingBalanceTo float32) ReservationAPIGetExternalSystemReservationsRequest {
	r.compAccountingBalanceTo = &compAccountingBalanceTo
	return r
}

// Represents Reservation search type Player Snapshot.
func (r ReservationAPIGetExternalSystemReservationsRequest) SearchTypes(searchTypes []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.searchTypes = &searchTypes
	return r
}

// Reservation status type for reservations search.
func (r ReservationAPIGetExternalSystemReservationsRequest) ReservationStatuses(reservationStatuses []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.reservationStatuses = &reservationStatuses
	return r
}

// Codes to be searched.
func (r ReservationAPIGetExternalSystemReservationsRequest) TransportationCodes(transportationCodes []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.transportationCodes = &transportationCodes
	return r
}

// Enum to denote the Status of Readiness messages sent to Guest Devices.
func (r ReservationAPIGetExternalSystemReservationsRequest) RoomReadyStatuses(roomReadyStatuses []string) ReservationAPIGetExternalSystemReservationsRequest {
	r.roomReadyStatuses = &roomReadyStatuses
	return r
}

// Fetches the reservations for which Checkout Message is received.
func (r ReservationAPIGetExternalSystemReservationsRequest) CheckoutMessageReceived(checkoutMessageReceived bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.checkoutMessageReceived = &checkoutMessageReceived
	return r
}

// Fetches the reservations for which reservation communication has been opted.
func (r ReservationAPIGetExternalSystemReservationsRequest) OptedForCommunication(optedForCommunication bool) ReservationAPIGetExternalSystemReservationsRequest {
	r.optedForCommunication = &optedForCommunication
	return r
}

// External system code.
func (r ReservationAPIGetExternalSystemReservationsRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetExternalSystemReservationsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetExternalSystemReservationsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetExternalSystemReservationsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetExternalSystemReservationsRequest) Execute() (*ReservationsDetails, *http.Response, error) {
	return r.ApiService.GetExternalSystemReservationsExecute(r)
}

/*
GetExternalSystemReservations Get Reservations for a hotel

This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getExternalSystemReservations</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param extSystemCode Code to identify the external system from which the request is coming. This is the ExternalSystem ID used to exchange information between OPERA and the external system.
 @return ReservationAPIGetExternalSystemReservationsRequest
*/
func (a *ReservationAPIService) GetExternalSystemReservations(ctx context.Context, extSystemCode string) ReservationAPIGetExternalSystemReservationsRequest {
	return ReservationAPIGetExternalSystemReservationsRequest{
		ApiService: a,
		ctx: ctx,
		extSystemCode: extSystemCode,
	}
}

// Execute executes the request
//  @return ReservationsDetails
func (a *ReservationAPIService) GetExternalSystemReservationsExecute(r ReservationAPIGetExternalSystemReservationsRequest) (*ReservationsDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationsDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetExternalSystemReservations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/externalSystems/{extSystemCode}/reservations"
	localVarPath = strings.Replace(localVarPath, "{"+"extSystemCode"+"}", url.PathEscape(parameterValueToString(r.extSystemCode, "extSystemCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.extSystemCode) < 1 {
		return localVarReturnValue, nil, reportError("extSystemCode must have at least 1 elements")
	}
	if strlen(r.extSystemCode) > 2000 {
		return localVarReturnValue, nil, reportError("extSystemCode must have less than 2000 elements")
	}

	{
		t := *r.externalReferenceList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "externalReferenceList", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "externalReferenceList", t, "multi")
		}
	}
	if r.recentlyAccessed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recentlyAccessed", r.recentlyAccessed, "")
  }
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.searchType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "searchType", r.searchType, "")
  }
	if r.hotelIds != nil {
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
  }
	if r.text != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "text", r.text, "")
  }
	if r.arrivalEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalEndDate", r.arrivalEndDate, "")
  }
	if r.arrivalStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalStartDate", r.arrivalStartDate, "")
  }
	if r.departureEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "departureEndDate", r.departureEndDate, "")
  }
	if r.departureStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "departureStartDate", r.departureStartDate, "")
  }
	if r.expectedArrivalStartTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expectedArrivalStartTime", r.expectedArrivalStartTime, "")
  }
	if r.expectedArrivalEndTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expectedArrivalEndTime", r.expectedArrivalEndTime, "")
  }
	if r.expectedReturnEndTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expectedReturnEndTime", r.expectedReturnEndTime, "")
  }
	if r.expectedReturnStartTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expectedReturnStartTime", r.expectedReturnStartTime, "")
  }
	if r.companyNames != nil {
		t := *r.companyNames
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "companyNames", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "companyNames", t, "multi")
		}
  }
	if r.travelAgentIds != nil {
		t := *r.travelAgentIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "travelAgentIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "travelAgentIds", t, "multi")
		}
  }
	if r.companyIds != nil {
		t := *r.companyIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "companyIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "companyIds", t, "multi")
		}
  }
	if r.sourceIds != nil {
		t := *r.sourceIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sourceIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sourceIds", t, "multi")
		}
  }
	if r.contactIds != nil {
		t := *r.contactIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contactIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contactIds", t, "multi")
		}
  }
	if r.groupIds != nil {
		t := *r.groupIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "groupIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "groupIds", t, "multi")
		}
  }
	if r.billingContactIds != nil {
		t := *r.billingContactIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "billingContactIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "billingContactIds", t, "multi")
		}
  }
	if r.profileIds != nil {
		t := *r.profileIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "profileIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "profileIds", t, "multi")
		}
  }
	if r.membershipCardNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipCardNumber", r.membershipCardNumber, "")
  }
	if r.membershipLevels != nil {
		t := *r.membershipLevels
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "membershipLevels", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "membershipLevels", t, "multi")
		}
  }
	if r.membershipTypes != nil {
		t := *r.membershipTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "membershipTypes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "membershipTypes", t, "multi")
		}
  }
	if r.surname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "surname", r.surname, "")
  }
	if r.givenName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "givenName", r.givenName, "")
  }
	if r.anyVIPStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "anyVIPStatus", r.anyVIPStatus, "")
  }
	if r.vipCodes != nil {
		t := *r.vipCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vipCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vipCodes", t, "multi")
		}
  }
	if r.guaranteeCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "guaranteeCode", r.guaranteeCode, "")
  }
	if r.paymentMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paymentMethod", r.paymentMethod, "")
  }
	if r.discountApplied != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "discountApplied", r.discountApplied, "")
  }
	if r.user != nil {
		t := *r.user
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user", t, "multi")
		}
  }
	if r.createdBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdBy", r.createdBy, "")
  }
	if r.cancelledByList != nil {
		t := *r.cancelledByList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cancelledByList", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cancelledByList", t, "multi")
		}
  }
	if r.cancelledOn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cancelledOn", r.cancelledOn, "")
  }
	if r.ratePlanCodes != nil {
		t := *r.ratePlanCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCodes", t, "multi")
		}
  }
	if r.sourceCodes != nil {
		t := *r.sourceCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sourceCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sourceCodes", t, "multi")
		}
  }
	if r.marketCodes != nil {
		t := *r.marketCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "marketCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "marketCodes", t, "multi")
		}
  }
	if r.excludeBlockReservations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeBlockReservations", r.excludeBlockReservations, "")
  }
	if r.blockName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blockName", r.blockName, "")
  }
	if r.blockIds != nil {
		t := *r.blockIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "blockIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "blockIds", t, "multi")
		}
  }
	if r.blockCodes != nil {
		t := *r.blockCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "blockCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "blockCodes", t, "multi")
		}
  }
	if r.customReference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customReference", r.customReference, "")
  }
	if r.recordLocator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recordLocator", r.recordLocator, "")
  }
	if r.orderBy != nil {
		t := *r.orderBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", t, "multi")
		}
  }
	if r.sortOrder != nil {
		t := *r.sortOrder
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", t, "multi")
		}
  }
	if r.roomAssignedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomAssignedOnly", r.roomAssignedOnly, "")
  }
	if r.roomUnassignedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomUnassignedOnly", r.roomUnassignedOnly, "")
  }
	if r.roomId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomId", r.roomId, "")
  }
	if r.roomType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", r.roomType, "csv")
  }
	if r.roomFeatures != nil {
		t := *r.roomFeatures
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomFeatures", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomFeatures", t, "multi")
		}
  }
	if r.roomSpecials != nil {
		t := *r.roomSpecials
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomSpecials", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomSpecials", t, "multi")
		}
  }
	if r.roomSmokingPreference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomSmokingPreference", r.roomSmokingPreference, "")
  }
	if r.roomFloorPreferences != nil {
		t := *r.roomFloorPreferences
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomFloorPreferences", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomFloorPreferences", t, "multi")
		}
  }
	if r.housekeepingRoomStatuses != nil {
		t := *r.housekeepingRoomStatuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "housekeepingRoomStatuses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "housekeepingRoomStatuses", t, "multi")
		}
  }
	if r.roomClasses != nil {
		t := *r.roomClasses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", t, "multi")
		}
  }
	if r.roomRangeFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomRangeFrom", r.roomRangeFrom, "")
  }
	if r.roomRangeTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomRangeTo", r.roomRangeTo, "")
  }
	if r.communication != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "communication", r.communication, "")
  }
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
  }
	if r.allowPreRegistration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowPreRegistration", r.allowPreRegistration, "")
  }
	if r.hasDepositBalance != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hasDepositBalance", r.hasDepositBalance, "")
  }
	if r.hasOpenBalance != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hasOpenBalance", r.hasOpenBalance, "")
  }
	if r.hasOpenFolio != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hasOpenFolio", r.hasOpenFolio, "")
  }
	if r.includeScheduledCheckOut != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeScheduledCheckOut", r.includeScheduledCheckOut, "")
  }
	if r.linkedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "linkedOnly", r.linkedOnly, "")
  }
	if r.unlinkedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "unlinkedOnly", r.unlinkedOnly, "")
  }
	if r.actualArrivals != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "actualArrivals", r.actualArrivals, "")
  }
	if r.actualDepartures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "actualDepartures", r.actualDepartures, "")
  }
	if r.complimentaryReservations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "complimentaryReservations", r.complimentaryReservations, "")
  }
	if r.dayOfArrivalCancels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dayOfArrivalCancels", r.dayOfArrivalCancels, "")
  }
	if r.dayUse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dayUse", r.dayUse, "")
  }
	if r.earlyDepartures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "earlyDepartures", r.earlyDepartures, "")
  }
	if r.expectedArrivals != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expectedArrivals", r.expectedArrivals, "")
  }
	if r.expectedDepartures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expectedDepartures", r.expectedDepartures, "")
  }
	if r.extendedStays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "extendedStays", r.extendedStays, "")
  }
	if r.houseUseReservations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "houseUseReservations", r.houseUseReservations, "")
  }
	if r.stayovers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stayovers", r.stayovers, "")
  }
	if r.stayDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stayDate", r.stayDate, "")
  }
	if r.roomRoutingId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomRoutingId", r.roomRoutingId, "")
  }
	if r.excludePseudoRoomReservations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludePseudoRoomReservations", r.excludePseudoRoomReservations, "")
  }
	if r.excludeReservationIds != nil {
		t := *r.excludeReservationIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeReservationIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeReservationIds", t, "multi")
		}
  }
	if r.excludeVIPStatusCodes != nil {
		t := *r.excludeVIPStatusCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeVIPStatusCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeVIPStatusCodes", t, "multi")
		}
  }
	if r.excludeSpecials != nil {
		t := *r.excludeSpecials
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeSpecials", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeSpecials", t, "multi")
		}
  }
	if r.excludeFloorPreferences != nil {
		t := *r.excludeFloorPreferences
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeFloorPreferences", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeFloorPreferences", t, "multi")
		}
  }
	if r.excludeAdvanceCheckedIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeAdvanceCheckedIn", r.excludeAdvanceCheckedIn, "")
  }
	if r.excludeRoomFeatures != nil {
		t := *r.excludeRoomFeatures
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeRoomFeatures", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeRoomFeatures", t, "multi")
		}
  }
	if r.playerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playerId", r.playerId, "")
  }
	if r.gamingBalanceFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gamingBalanceFrom", r.gamingBalanceFrom, "")
  }
	if r.gamingBalanceTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gamingBalanceTo", r.gamingBalanceTo, "")
  }
	if r.compAccountingBalanceFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "compAccountingBalanceFrom", r.compAccountingBalanceFrom, "")
  }
	if r.compAccountingBalanceTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "compAccountingBalanceTo", r.compAccountingBalanceTo, "")
  }
	if r.searchTypes != nil {
		t := *r.searchTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "searchTypes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "searchTypes", t, "multi")
		}
  }
	if r.reservationStatuses != nil {
		t := *r.reservationStatuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reservationStatuses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reservationStatuses", t, "multi")
		}
  }
	if r.transportationCodes != nil {
		t := *r.transportationCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "transportationCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "transportationCodes", t, "multi")
		}
  }
	if r.roomReadyStatuses != nil {
		t := *r.roomReadyStatuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomReadyStatuses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomReadyStatuses", t, "multi")
		}
  }
	if r.checkoutMessageReceived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "checkoutMessageReceived", r.checkoutMessageReceived, "")
  }
	if r.optedForCommunication != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "optedForCommunication", r.optedForCommunication, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetFutureReservationsOrBlocksRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetFutureReservationsOrBlocksRequest) Authorization(authorization string) ReservationAPIGetFutureReservationsOrBlocksRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetFutureReservationsOrBlocksRequest) XAppKey(xAppKey string) ReservationAPIGetFutureReservationsOrBlocksRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetFutureReservationsOrBlocksRequest) XHotelid(xHotelid string) ReservationAPIGetFutureReservationsOrBlocksRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIGetFutureReservationsOrBlocksRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetFutureReservationsOrBlocksRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetFutureReservationsOrBlocksRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetFutureReservationsOrBlocksRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetFutureReservationsOrBlocksRequest) Execute() (*FutureReservationsOrBlocksDetails, *http.Response, error) {
	return r.ApiService.GetFutureReservationsOrBlocksExecute(r)
}

/*
GetFutureReservationsOrBlocks Get Future Reservations on a profile

Use this API to identify whether there are future reservations or business block for the profile id. <p><strong>OperationId:</strong>getFutureReservationsOrBlocks</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Unique OPERA internal profile ID which is used to find any type of profile from OPERA. This ID is a primary identification of a profile in OPERA.
 @return ReservationAPIGetFutureReservationsOrBlocksRequest
*/
func (a *ReservationAPIService) GetFutureReservationsOrBlocks(ctx context.Context, profileId string) ReservationAPIGetFutureReservationsOrBlocksRequest {
	return ReservationAPIGetFutureReservationsOrBlocksRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return FutureReservationsOrBlocksDetails
func (a *ReservationAPIService) GetFutureReservationsOrBlocksExecute(r ReservationAPIGetFutureReservationsOrBlocksRequest) (*FutureReservationsOrBlocksDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FutureReservationsOrBlocksDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetFutureReservationsOrBlocks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/reservations"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetGuestMessagesRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	reservationId *string
	retrieveDeliveredMessages *bool
	room *string
	travelAgent *string
	company *string
	group *string
	source *string
	reservationStatus *string
	retrieveUndeliveredMessages *bool
	retrievePrintedMessages *bool
	retrieveTextedMessages *bool
	blockName *string
	recipientName *string
	confirmationNo *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetGuestMessagesRequest) Authorization(authorization string) ReservationAPIGetGuestMessagesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetGuestMessagesRequest) XAppKey(xAppKey string) ReservationAPIGetGuestMessagesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetGuestMessagesRequest) XHotelid(xHotelid string) ReservationAPIGetGuestMessagesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ReservationAPIGetGuestMessagesRequest) Limit(limit int32) ReservationAPIGetGuestMessagesRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ReservationAPIGetGuestMessagesRequest) Offset(offset int32) ReservationAPIGetGuestMessagesRequest {
	r.offset = &offset
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetGuestMessagesRequest) ReservationId(reservationId string) ReservationAPIGetGuestMessagesRequest {
	r.reservationId = &reservationId
	return r
}

// Flag that specified if Delivered Guest Messages will also be retrieved.
func (r ReservationAPIGetGuestMessagesRequest) RetrieveDeliveredMessages(retrieveDeliveredMessages bool) ReservationAPIGetGuestMessagesRequest {
	r.retrieveDeliveredMessages = &retrieveDeliveredMessages
	return r
}

// Room number attached to the reservation.
func (r ReservationAPIGetGuestMessagesRequest) Room(room string) ReservationAPIGetGuestMessagesRequest {
	r.room = &room
	return r
}

// Lookup guest messages with this Travel agent name.
func (r ReservationAPIGetGuestMessagesRequest) TravelAgent(travelAgent string) ReservationAPIGetGuestMessagesRequest {
	r.travelAgent = &travelAgent
	return r
}

// Lookup guest messages with the Company name.
func (r ReservationAPIGetGuestMessagesRequest) Company(company string) ReservationAPIGetGuestMessagesRequest {
	r.company = &company
	return r
}

// Lookup guest messages with the Travel agent name.
func (r ReservationAPIGetGuestMessagesRequest) Group(group string) ReservationAPIGetGuestMessagesRequest {
	r.group = &group
	return r
}

// Lookup guest messages with the Source name.
func (r ReservationAPIGetGuestMessagesRequest) Source(source string) ReservationAPIGetGuestMessagesRequest {
	r.source = &source
	return r
}

// Represents Reservation search type Player Snapshot.
func (r ReservationAPIGetGuestMessagesRequest) ReservationStatus(reservationStatus string) ReservationAPIGetGuestMessagesRequest {
	r.reservationStatus = &reservationStatus
	return r
}

// Flag that specified if Undelivered Guest Messages will also be retrieved.
func (r ReservationAPIGetGuestMessagesRequest) RetrieveUndeliveredMessages(retrieveUndeliveredMessages bool) ReservationAPIGetGuestMessagesRequest {
	r.retrieveUndeliveredMessages = &retrieveUndeliveredMessages
	return r
}

// Flag that specified if Printed Guest Messages will also be retrieved.
func (r ReservationAPIGetGuestMessagesRequest) RetrievePrintedMessages(retrievePrintedMessages bool) ReservationAPIGetGuestMessagesRequest {
	r.retrievePrintedMessages = &retrievePrintedMessages
	return r
}

// Flag that specified if Texted Guest Messages will also be retrieved.
func (r ReservationAPIGetGuestMessagesRequest) RetrieveTextedMessages(retrieveTextedMessages bool) ReservationAPIGetGuestMessagesRequest {
	r.retrieveTextedMessages = &retrieveTextedMessages
	return r
}

// Lookup messages using Block name.
func (r ReservationAPIGetGuestMessagesRequest) BlockName(blockName string) ReservationAPIGetGuestMessagesRequest {
	r.blockName = &blockName
	return r
}

// Lookup guest messages with the recipient name.
func (r ReservationAPIGetGuestMessagesRequest) RecipientName(recipientName string) ReservationAPIGetGuestMessagesRequest {
	r.recipientName = &recipientName
	return r
}

// Lookup guest messages using reservation confirmation no.
func (r ReservationAPIGetGuestMessagesRequest) ConfirmationNo(confirmationNo string) ReservationAPIGetGuestMessagesRequest {
	r.confirmationNo = &confirmationNo
	return r
}

// External system code.
func (r ReservationAPIGetGuestMessagesRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetGuestMessagesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetGuestMessagesRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetGuestMessagesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetGuestMessagesRequest) Execute() (*GuestMessages, *http.Response, error) {
	return r.ApiService.GetGuestMessagesExecute(r)
}

/*
GetGuestMessages Get guest messages

Get guest messages which exist on a reservation. <p><strong>OperationId:</strong>getGuestMessages</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetGuestMessagesRequest
*/
func (a *ReservationAPIService) GetGuestMessages(ctx context.Context, hotelId string) ReservationAPIGetGuestMessagesRequest {
	return ReservationAPIGetGuestMessagesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return GuestMessages
func (a *ReservationAPIService) GetGuestMessagesExecute(r ReservationAPIGetGuestMessagesRequest) (*GuestMessages, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GuestMessages
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetGuestMessages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/guestMessages"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.reservationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationId", r.reservationId, "")
  }
	if r.retrieveDeliveredMessages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retrieveDeliveredMessages", r.retrieveDeliveredMessages, "")
  }
	if r.room != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "room", r.room, "")
  }
	if r.travelAgent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "travelAgent", r.travelAgent, "")
  }
	if r.company != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "company", r.company, "")
  }
	if r.group != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group", r.group, "")
  }
	if r.source != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "source", r.source, "")
  }
	if r.reservationStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationStatus", r.reservationStatus, "")
  }
	if r.retrieveUndeliveredMessages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retrieveUndeliveredMessages", r.retrieveUndeliveredMessages, "")
  }
	if r.retrievePrintedMessages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retrievePrintedMessages", r.retrievePrintedMessages, "")
  }
	if r.retrieveTextedMessages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retrieveTextedMessages", r.retrieveTextedMessages, "")
  }
	if r.blockName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blockName", r.blockName, "")
  }
	if r.recipientName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recipientName", r.recipientName, "")
  }
	if r.confirmationNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "confirmationNo", r.confirmationNo, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetHotelReservationsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	keyTrack2 *string
	discrepancy *string
	recentlyAccessed *bool
	limit *int32
	offset *int32
	searchType *string
	text *string
	reservationIdList *[]string
	confirmationNumberList *[]string
	cancellationNumberList *[]string
	externalReferenceIds *[]string
	externalSystemCodes *[]string
	arrivalEndDate *string
	arrivalStartDate *string
	departureEndDate *string
	departureStartDate *string
	stayOnStartDate *string
	createdOnStartDate *string
	expectedArrivalEndTime *string
	expectedArrivalStartTime *string
	depositDueEndDate *string
	depositDueStartDate *string
	expectedReturnEndTime *string
	expectedReturnStartTime *string
	companyNames *[]string
	sourceNames *[]string
	travelAgentNames *[]string
	groupNames *[]string
	travelAgentIds *[]string
	companyIds *[]string
	sourceIds *[]string
	contactIds *[]string
	groupIds *[]string
	billingContactIds *[]string
	profileId *string
	commissionPaid *bool
	membershipCardNumber *string
	membershipLevels *[]string
	membershipTypes *[]string
	surname *string
	givenName *string
	fromName *string
	toName *string
	anyVIPStatus *bool
	vipCodes *[]string
	guaranteeCode *string
	paymentMethod *string
	discountApplied *bool
	user *[]string
	createdBy *string
	cancelledByList *[]string
	cancelledOn *string
	ratePlanCodes *[]string
	sourceCodes *[]string
	marketCodes *[]string
	excludeBlockReservations *bool
	blockCriteriaHotelCode *string
	blockName *string
	blockIds *[]string
	blockCodes *[]string
	customReference *string
	recordLocator *string
	orderBy *[]string
	sortOrder *[]string
	roomAssignedOnly *bool
	roomUnassignedOnly *bool
	roomId *string
	roomType *[]string
	roomFeatures *[]string
	roomSpecials *[]string
	roomSmokingPreference *string
	roomFloorPreferences *[]string
	housekeepingRoomStatuses *[]string
	roomClasses *[]string
	roomRangeFrom *string
	roomRangeTo *string
	communication *string
	fetchInstructions *[]string
	allowedReservationActions *[]string
	allowPreRegistration *bool
	excludeNoPost *bool
	excludePMRooms *bool
	hasDepositBalance *bool
	hasOpenBalance *bool
	hasOpenFolio *bool
	includeScheduledCheckOut *bool
	linkedOnly *bool
	unlinkedOnly *bool
	actualArrivals *bool
	actualDepartures *bool
	complimentaryReservations *bool
	dayOfArrivalCancels *bool
	dayUse *bool
	earlyDepartures *bool
	expectedArrivals *bool
	expectedDepartures *bool
	extendedStays *bool
	houseUseReservations *bool
	stayovers *bool
	stayDate *string
	roomRoutingId *string
	periodicFolio *string
	folioSettlementTypes *string
	defaultDays *bool
	excludePseudoRoomReservations *bool
	excludeReservationIds *[]string
	excludeVIPStatusCodes *[]string
	excludeSpecials *[]string
	excludeFloorPreferences *[]string
	excludeAdvanceCheckedIn *bool
	excludeRoomFeatures *[]string
	playerId *string
	gamingBalanceFrom *float32
	gamingBalanceTo *float32
	compAccountingBalanceFrom *float32
	compAccountingBalanceTo *float32
	searchTypes *[]string
	reservationStatuses *[]string
	transportationCodes *[]string
	roomReadyStatuses *[]string
	checkoutMessageReceived *bool
	optedForCommunication *bool
	swapShiftRoomReservationId *string
	roomSmokingPreferences *[]string
	roomFeaturePreferences *[]string
	roomsFloorPreferences *[]string
	contactNames *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetHotelReservationsRequest) Authorization(authorization string) ReservationAPIGetHotelReservationsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetHotelReservationsRequest) XAppKey(xAppKey string) ReservationAPIGetHotelReservationsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetHotelReservationsRequest) XHotelid(xHotelid string) ReservationAPIGetHotelReservationsRequest {
	r.xHotelid = &xHotelid
	return r
}

// keyTrack2 is an id which is either generated by the PMS or provided by the door lock system and which is associated to the reservation. With the keyTrack2 value a reservation can be identified.
func (r ReservationAPIGetHotelReservationsRequest) KeyTrack2(keyTrack2 string) ReservationAPIGetHotelReservationsRequest {
	r.keyTrack2 = &keyTrack2
	return r
}

func (r ReservationAPIGetHotelReservationsRequest) Discrepancy(discrepancy string) ReservationAPIGetHotelReservationsRequest {
	r.discrepancy = &discrepancy
	return r
}

// Mark this reservation as recently accessed.
func (r ReservationAPIGetHotelReservationsRequest) RecentlyAccessed(recentlyAccessed bool) ReservationAPIGetHotelReservationsRequest {
	r.recentlyAccessed = &recentlyAccessed
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ReservationAPIGetHotelReservationsRequest) Limit(limit int32) ReservationAPIGetHotelReservationsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ReservationAPIGetHotelReservationsRequest) Offset(offset int32) ReservationAPIGetHotelReservationsRequest {
	r.offset = &offset
	return r
}

// Represents Reservation search type Player Snapshot.
func (r ReservationAPIGetHotelReservationsRequest) SearchType(searchType string) ReservationAPIGetHotelReservationsRequest {
	r.searchType = &searchType
	return r
}

// Free form text field for searching all reservation fields
func (r ReservationAPIGetHotelReservationsRequest) Text(text string) ReservationAPIGetHotelReservationsRequest {
	r.text = &text
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetHotelReservationsRequest) ReservationIdList(reservationIdList []string) ReservationAPIGetHotelReservationsRequest {
	r.reservationIdList = &reservationIdList
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetHotelReservationsRequest) ConfirmationNumberList(confirmationNumberList []string) ReservationAPIGetHotelReservationsRequest {
	r.confirmationNumberList = &confirmationNumberList
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetHotelReservationsRequest) CancellationNumberList(cancellationNumberList []string) ReservationAPIGetHotelReservationsRequest {
	r.cancellationNumberList = &cancellationNumberList
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetHotelReservationsRequest) ExternalReferenceIds(externalReferenceIds []string) ReservationAPIGetHotelReservationsRequest {
	r.externalReferenceIds = &externalReferenceIds
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ReservationAPIGetHotelReservationsRequest) ExternalSystemCodes(externalSystemCodes []string) ReservationAPIGetHotelReservationsRequest {
	r.externalSystemCodes = &externalSystemCodes
	return r
}

// The ending value of the date range.
func (r ReservationAPIGetHotelReservationsRequest) ArrivalEndDate(arrivalEndDate string) ReservationAPIGetHotelReservationsRequest {
	r.arrivalEndDate = &arrivalEndDate
	return r
}

// The starting value of the date range.
func (r ReservationAPIGetHotelReservationsRequest) ArrivalStartDate(arrivalStartDate string) ReservationAPIGetHotelReservationsRequest {
	r.arrivalStartDate = &arrivalStartDate
	return r
}

// The ending value of the date range.
func (r ReservationAPIGetHotelReservationsRequest) DepartureEndDate(departureEndDate string) ReservationAPIGetHotelReservationsRequest {
	r.departureEndDate = &departureEndDate
	return r
}

// The starting value of the date range.
func (r ReservationAPIGetHotelReservationsRequest) DepartureStartDate(departureStartDate string) ReservationAPIGetHotelReservationsRequest {
	r.departureStartDate = &departureStartDate
	return r
}

// The starting value of the date range.
func (r ReservationAPIGetHotelReservationsRequest) StayOnStartDate(stayOnStartDate string) ReservationAPIGetHotelReservationsRequest {
	r.stayOnStartDate = &stayOnStartDate
	return r
}

// Fetches reservations which are created on the given property business date.
func (r ReservationAPIGetHotelReservationsRequest) CreatedOnStartDate(createdOnStartDate string) ReservationAPIGetHotelReservationsRequest {
	r.createdOnStartDate = &createdOnStartDate
	return r
}

// The ending value of the time span.
func (r ReservationAPIGetHotelReservationsRequest) ExpectedArrivalEndTime(expectedArrivalEndTime string) ReservationAPIGetHotelReservationsRequest {
	r.expectedArrivalEndTime = &expectedArrivalEndTime
	return r
}

// The starting value of the time span.
func (r ReservationAPIGetHotelReservationsRequest) ExpectedArrivalStartTime(expectedArrivalStartTime string) ReservationAPIGetHotelReservationsRequest {
	r.expectedArrivalStartTime = &expectedArrivalStartTime
	return r
}

// The ending value of the date range.
func (r ReservationAPIGetHotelReservationsRequest) DepositDueEndDate(depositDueEndDate string) ReservationAPIGetHotelReservationsRequest {
	r.depositDueEndDate = &depositDueEndDate
	return r
}

// The starting value of the date range.
func (r ReservationAPIGetHotelReservationsRequest) DepositDueStartDate(depositDueStartDate string) ReservationAPIGetHotelReservationsRequest {
	r.depositDueStartDate = &depositDueStartDate
	return r
}

// The ending value of the time span.
func (r ReservationAPIGetHotelReservationsRequest) ExpectedReturnEndTime(expectedReturnEndTime string) ReservationAPIGetHotelReservationsRequest {
	r.expectedReturnEndTime = &expectedReturnEndTime
	return r
}

// The starting value of the time span.
func (r ReservationAPIGetHotelReservationsRequest) ExpectedReturnStartTime(expectedReturnStartTime string) ReservationAPIGetHotelReservationsRequest {
	r.expectedReturnStartTime = &expectedReturnStartTime
	return r
}

// Attached profile name
func (r ReservationAPIGetHotelReservationsRequest) CompanyNames(companyNames []string) ReservationAPIGetHotelReservationsRequest {
	r.companyNames = &companyNames
	return r
}

// Attached profile name
func (r ReservationAPIGetHotelReservationsRequest) SourceNames(sourceNames []string) ReservationAPIGetHotelReservationsRequest {
	r.sourceNames = &sourceNames
	return r
}

// Attached profile name
func (r ReservationAPIGetHotelReservationsRequest) TravelAgentNames(travelAgentNames []string) ReservationAPIGetHotelReservationsRequest {
	r.travelAgentNames = &travelAgentNames
	return r
}

// Attached profile name
func (r ReservationAPIGetHotelReservationsRequest) GroupNames(groupNames []string) ReservationAPIGetHotelReservationsRequest {
	r.groupNames = &groupNames
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. API expects CompanyName Query parameter along with the ID to obtain correct results.
func (r ReservationAPIGetHotelReservationsRequest) TravelAgentIds(travelAgentIds []string) ReservationAPIGetHotelReservationsRequest {
	r.travelAgentIds = &travelAgentIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. API expects CompanyName Query parameter along with the ID to obtain correct results.
func (r ReservationAPIGetHotelReservationsRequest) CompanyIds(companyIds []string) ReservationAPIGetHotelReservationsRequest {
	r.companyIds = &companyIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. API expects CompanyName Query parameter along with the ID to obtain correct results.
func (r ReservationAPIGetHotelReservationsRequest) SourceIds(sourceIds []string) ReservationAPIGetHotelReservationsRequest {
	r.sourceIds = &sourceIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. API expects CompanyName Query parameter along with the ID to obtain correct results.
func (r ReservationAPIGetHotelReservationsRequest) ContactIds(contactIds []string) ReservationAPIGetHotelReservationsRequest {
	r.contactIds = &contactIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. API expects CompanyName Query parameter along with the ID to obtain correct results.
func (r ReservationAPIGetHotelReservationsRequest) GroupIds(groupIds []string) ReservationAPIGetHotelReservationsRequest {
	r.groupIds = &groupIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. API expects CompanyName Query parameter along with the ID to obtain correct results.
func (r ReservationAPIGetHotelReservationsRequest) BillingContactIds(billingContactIds []string) ReservationAPIGetHotelReservationsRequest {
	r.billingContactIds = &billingContactIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetHotelReservationsRequest) ProfileId(profileId string) ReservationAPIGetHotelReservationsRequest {
	r.profileId = &profileId
	return r
}

// Commission Paid criteria
func (r ReservationAPIGetHotelReservationsRequest) CommissionPaid(commissionPaid bool) ReservationAPIGetHotelReservationsRequest {
	r.commissionPaid = &commissionPaid
	return r
}

// Membership ID criteria.
func (r ReservationAPIGetHotelReservationsRequest) MembershipCardNumber(membershipCardNumber string) ReservationAPIGetHotelReservationsRequest {
	r.membershipCardNumber = &membershipCardNumber
	return r
}

func (r ReservationAPIGetHotelReservationsRequest) MembershipLevels(membershipLevels []string) ReservationAPIGetHotelReservationsRequest {
	r.membershipLevels = &membershipLevels
	return r
}

func (r ReservationAPIGetHotelReservationsRequest) MembershipTypes(membershipTypes []string) ReservationAPIGetHotelReservationsRequest {
	r.membershipTypes = &membershipTypes
	return r
}

// Family name, last name.
func (r ReservationAPIGetHotelReservationsRequest) Surname(surname string) ReservationAPIGetHotelReservationsRequest {
	r.surname = &surname
	return r
}

// Given name, first name or names
func (r ReservationAPIGetHotelReservationsRequest) GivenName(givenName string) ReservationAPIGetHotelReservationsRequest {
	r.givenName = &givenName
	return r
}

// Given name, first name or names
func (r ReservationAPIGetHotelReservationsRequest) FromName(fromName string) ReservationAPIGetHotelReservationsRequest {
	r.fromName = &fromName
	return r
}

// Given name, first name or names
func (r ReservationAPIGetHotelReservationsRequest) ToName(toName string) ReservationAPIGetHotelReservationsRequest {
	r.toName = &toName
	return r
}

// VIP status of the customer.
func (r ReservationAPIGetHotelReservationsRequest) AnyVIPStatus(anyVIPStatus bool) ReservationAPIGetHotelReservationsRequest {
	r.anyVIPStatus = &anyVIPStatus
	return r
}

// VIP status of the customer.
func (r ReservationAPIGetHotelReservationsRequest) VipCodes(vipCodes []string) ReservationAPIGetHotelReservationsRequest {
	r.vipCodes = &vipCodes
	return r
}

// Fetches the reservation having Guarantee Code(Reservation Type) supplied here.
func (r ReservationAPIGetHotelReservationsRequest) GuaranteeCode(guaranteeCode string) ReservationAPIGetHotelReservationsRequest {
	r.guaranteeCode = &guaranteeCode
	return r
}

// Fetches the reservation having method of payment supplied here.
func (r ReservationAPIGetHotelReservationsRequest) PaymentMethod(paymentMethod string) ReservationAPIGetHotelReservationsRequest {
	r.paymentMethod = &paymentMethod
	return r
}

// Fetches the reservation for which discount is applied
func (r ReservationAPIGetHotelReservationsRequest) DiscountApplied(discountApplied bool) ReservationAPIGetHotelReservationsRequest {
	r.discountApplied = &discountApplied
	return r
}

func (r ReservationAPIGetHotelReservationsRequest) User(user []string) ReservationAPIGetHotelReservationsRequest {
	r.user = &user
	return r
}

// Fetches reservation created by specified user. If both CreatedByUsers and CreatedBy is specified, CreatedByUsers will take precedence.
func (r ReservationAPIGetHotelReservationsRequest) CreatedBy(createdBy string) ReservationAPIGetHotelReservationsRequest {
	r.createdBy = &createdBy
	return r
}

// Fetches reservations cancelled by list of users.
func (r ReservationAPIGetHotelReservationsRequest) CancelledByList(cancelledByList []string) ReservationAPIGetHotelReservationsRequest {
	r.cancelledByList = &cancelledByList
	return r
}

// Fetches reservations which are cancelled on the given property business date.
func (r ReservationAPIGetHotelReservationsRequest) CancelledOn(cancelledOn string) ReservationAPIGetHotelReservationsRequest {
	r.cancelledOn = &cancelledOn
	return r
}

func (r ReservationAPIGetHotelReservationsRequest) RatePlanCodes(ratePlanCodes []string) ReservationAPIGetHotelReservationsRequest {
	r.ratePlanCodes = &ratePlanCodes
	return r
}

func (r ReservationAPIGetHotelReservationsRequest) SourceCodes(sourceCodes []string) ReservationAPIGetHotelReservationsRequest {
	r.sourceCodes = &sourceCodes
	return r
}

func (r ReservationAPIGetHotelReservationsRequest) MarketCodes(marketCodes []string) ReservationAPIGetHotelReservationsRequest {
	r.marketCodes = &marketCodes
	return r
}

// If true the search result will exclude the blocks reservations.
func (r ReservationAPIGetHotelReservationsRequest) ExcludeBlockReservations(excludeBlockReservations bool) ReservationAPIGetHotelReservationsRequest {
	r.excludeBlockReservations = &excludeBlockReservations
	return r
}

// The Hotel Code of the Block.
func (r ReservationAPIGetHotelReservationsRequest) BlockCriteriaHotelCode(blockCriteriaHotelCode string) ReservationAPIGetHotelReservationsRequest {
	r.blockCriteriaHotelCode = &blockCriteriaHotelCode
	return r
}

// The Name of the block that is attached to the reservation.
func (r ReservationAPIGetHotelReservationsRequest) BlockName(blockName string) ReservationAPIGetHotelReservationsRequest {
	r.blockName = &blockName
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetHotelReservationsRequest) BlockIds(blockIds []string) ReservationAPIGetHotelReservationsRequest {
	r.blockIds = &blockIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetHotelReservationsRequest) BlockCodes(blockCodes []string) ReservationAPIGetHotelReservationsRequest {
	r.blockCodes = &blockCodes
	return r
}

// Custom reference
func (r ReservationAPIGetHotelReservationsRequest) CustomReference(customReference string) ReservationAPIGetHotelReservationsRequest {
	r.customReference = &customReference
	return r
}

// GDS Record Locator for reservation.
func (r ReservationAPIGetHotelReservationsRequest) RecordLocator(recordLocator string) ReservationAPIGetHotelReservationsRequest {
	r.recordLocator = &recordLocator
	return r
}

func (r ReservationAPIGetHotelReservationsRequest) OrderBy(orderBy []string) ReservationAPIGetHotelReservationsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ReservationAPIGetHotelReservationsRequest) SortOrder(sortOrder []string) ReservationAPIGetHotelReservationsRequest {
	r.sortOrder = &sortOrder
	return r
}

// Indicator to query reservations which have a room number assigned.
func (r ReservationAPIGetHotelReservationsRequest) RoomAssignedOnly(roomAssignedOnly bool) ReservationAPIGetHotelReservationsRequest {
	r.roomAssignedOnly = &roomAssignedOnly
	return r
}

// Indicator to query reservations which does not have a room number assigned.
func (r ReservationAPIGetHotelReservationsRequest) RoomUnassignedOnly(roomUnassignedOnly bool) ReservationAPIGetHotelReservationsRequest {
	r.roomUnassignedOnly = &roomUnassignedOnly
	return r
}

// Room number of the reservation to search by.
func (r ReservationAPIGetHotelReservationsRequest) RoomId(roomId string) ReservationAPIGetHotelReservationsRequest {
	r.roomId = &roomId
	return r
}

// Room Type.
func (r ReservationAPIGetHotelReservationsRequest) RoomType(roomType []string) ReservationAPIGetHotelReservationsRequest {
	r.roomType = &roomType
	return r
}

// A code representing a room feature.
func (r ReservationAPIGetHotelReservationsRequest) RoomFeatures(roomFeatures []string) ReservationAPIGetHotelReservationsRequest {
	r.roomFeatures = &roomFeatures
	return r
}

// Preference value for display purposes.
func (r ReservationAPIGetHotelReservationsRequest) RoomSpecials(roomSpecials []string) ReservationAPIGetHotelReservationsRequest {
	r.roomSpecials = &roomSpecials
	return r
}

// Preference value for display purposes.
func (r ReservationAPIGetHotelReservationsRequest) RoomSmokingPreference(roomSmokingPreference string) ReservationAPIGetHotelReservationsRequest {
	r.roomSmokingPreference = &roomSmokingPreference
	return r
}

// Preference value for display purposes.
func (r ReservationAPIGetHotelReservationsRequest) RoomFloorPreferences(roomFloorPreferences []string) ReservationAPIGetHotelReservationsRequest {
	r.roomFloorPreferences = &roomFloorPreferences
	return r
}

// Simple type for room status instructions to be used in requests for fetching housekeeping rooms. Valid status values are Clean, Dirty, Pickup, Inspected, OutOfOrder, OutOfService.
func (r ReservationAPIGetHotelReservationsRequest) HousekeepingRoomStatuses(housekeepingRoomStatuses []string) ReservationAPIGetHotelReservationsRequest {
	r.housekeepingRoomStatuses = &housekeepingRoomStatuses
	return r
}

func (r ReservationAPIGetHotelReservationsRequest) RoomClasses(roomClasses []string) ReservationAPIGetHotelReservationsRequest {
	r.roomClasses = &roomClasses
	return r
}

func (r ReservationAPIGetHotelReservationsRequest) RoomRangeFrom(roomRangeFrom string) ReservationAPIGetHotelReservationsRequest {
	r.roomRangeFrom = &roomRangeFrom
	return r
}

func (r ReservationAPIGetHotelReservationsRequest) RoomRangeTo(roomRangeTo string) ReservationAPIGetHotelReservationsRequest {
	r.roomRangeTo = &roomRangeTo
	return r
}

// Filter by the last digits of a reservation&#39;s phone number.
func (r ReservationAPIGetHotelReservationsRequest) Communication(communication string) ReservationAPIGetHotelReservationsRequest {
	r.communication = &communication
	return r
}

// Instruction to fetch whether the room was assigned/upgraded by AI. This will also include Reservation instruction.
func (r ReservationAPIGetHotelReservationsRequest) FetchInstructions(fetchInstructions []string) ReservationAPIGetHotelReservationsRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// Flag indicating whether the Enrollment is in progress or not for the Profile associated with this Reservation.
func (r ReservationAPIGetHotelReservationsRequest) AllowedReservationActions(allowedReservationActions []string) ReservationAPIGetHotelReservationsRequest {
	r.allowedReservationActions = &allowedReservationActions
	return r
}

// Flag containing true or false value for reservation to be eligible for prior check in by guest using mobile device. Pass the &#39;true&#39; or &#39;false&#39; values when creating / modifying reservation to indicate whether a reservation is eligible for mobile check in yes / no. Upon fetch, the current state of the flag will show true or false.
func (r ReservationAPIGetHotelReservationsRequest) AllowPreRegistration(allowPreRegistration bool) ReservationAPIGetHotelReservationsRequest {
	r.allowPreRegistration = &allowPreRegistration
	return r
}

// Indicates that reservations with No Post flag should not be expected from the result.
func (r ReservationAPIGetHotelReservationsRequest) ExcludeNoPost(excludeNoPost bool) ReservationAPIGetHotelReservationsRequest {
	r.excludeNoPost = &excludeNoPost
	return r
}

// Indicates that reservations with PM room type should not be expected from the result.
func (r ReservationAPIGetHotelReservationsRequest) ExcludePMRooms(excludePMRooms bool) ReservationAPIGetHotelReservationsRequest {
	r.excludePMRooms = &excludePMRooms
	return r
}

// Indicates that only reservations with deposit balance should be expected from the result.
func (r ReservationAPIGetHotelReservationsRequest) HasDepositBalance(hasDepositBalance bool) ReservationAPIGetHotelReservationsRequest {
	r.hasDepositBalance = &hasDepositBalance
	return r
}

// Indicates that only reservations with open balance should be expected from the result.
func (r ReservationAPIGetHotelReservationsRequest) HasOpenBalance(hasOpenBalance bool) ReservationAPIGetHotelReservationsRequest {
	r.hasOpenBalance = &hasOpenBalance
	return r
}

// Indicates that only reservations with open folio should be expected from the result.
func (r ReservationAPIGetHotelReservationsRequest) HasOpenFolio(hasOpenFolio bool) ReservationAPIGetHotelReservationsRequest {
	r.hasOpenFolio = &hasOpenFolio
	return r
}

// Criteria that indicates whether to scheduled checkouts or not.
func (r ReservationAPIGetHotelReservationsRequest) IncludeScheduledCheckOut(includeScheduledCheckOut bool) ReservationAPIGetHotelReservationsRequest {
	r.includeScheduledCheckOut = &includeScheduledCheckOut
	return r
}

// Indicates that only linked reservations should be expected from the result.
func (r ReservationAPIGetHotelReservationsRequest) LinkedOnly(linkedOnly bool) ReservationAPIGetHotelReservationsRequest {
	r.linkedOnly = &linkedOnly
	return r
}

// Indicates that only unlinked reservations should be expected from the result.
func (r ReservationAPIGetHotelReservationsRequest) UnlinkedOnly(unlinkedOnly bool) ReservationAPIGetHotelReservationsRequest {
	r.unlinkedOnly = &unlinkedOnly
	return r
}

// Indicates if reservations which have already arrived on the Search Date is required.
func (r ReservationAPIGetHotelReservationsRequest) ActualArrivals(actualArrivals bool) ReservationAPIGetHotelReservationsRequest {
	r.actualArrivals = &actualArrivals
	return r
}

// Indicates if reservations which were expected to depart on the Search Date and have already checked, is required.
func (r ReservationAPIGetHotelReservationsRequest) ActualDepartures(actualDepartures bool) ReservationAPIGetHotelReservationsRequest {
	r.actualDepartures = &actualDepartures
	return r
}

// Indicates if reservations where rate codes are marked as Complimentary Rates , is required. This flag should be used in conjunction with the Arrivals, Departures or StayOvers criteria.
func (r ReservationAPIGetHotelReservationsRequest) ComplimentaryReservations(complimentaryReservations bool) ReservationAPIGetHotelReservationsRequest {
	r.complimentaryReservations = &complimentaryReservations
	return r
}

// Indicates if reservations which have cancelled on the Search Date which is also the day of arrival is required.
func (r ReservationAPIGetHotelReservationsRequest) DayOfArrivalCancels(dayOfArrivalCancels bool) ReservationAPIGetHotelReservationsRequest {
	r.dayOfArrivalCancels = &dayOfArrivalCancels
	return r
}

// Indicates if reservations which are day use reservation on the Search Date, is required.
func (r ReservationAPIGetHotelReservationsRequest) DayUse(dayUse bool) ReservationAPIGetHotelReservationsRequest {
	r.dayUse = &dayUse
	return r
}

// Indicates if reservations which checked out early on the Search Date, is required.
func (r ReservationAPIGetHotelReservationsRequest) EarlyDepartures(earlyDepartures bool) ReservationAPIGetHotelReservationsRequest {
	r.earlyDepartures = &earlyDepartures
	return r
}

// Indicates if reservations which are expected arrivals for the Search Date and who have not yet arrived, is required.
func (r ReservationAPIGetHotelReservationsRequest) ExpectedArrivals(expectedArrivals bool) ReservationAPIGetHotelReservationsRequest {
	r.expectedArrivals = &expectedArrivals
	return r
}

// Indicates if reservations which are expected departures for the Search Date and who have not yet departed, is required.
func (r ReservationAPIGetHotelReservationsRequest) ExpectedDepartures(expectedDepartures bool) ReservationAPIGetHotelReservationsRequest {
	r.expectedDepartures = &expectedDepartures
	return r
}

// Indicates if reservations which have extended their stays on the Search Date, is required.
func (r ReservationAPIGetHotelReservationsRequest) ExtendedStays(extendedStays bool) ReservationAPIGetHotelReservationsRequest {
	r.extendedStays = &extendedStays
	return r
}

// Indicates if reservations where rate codes are marked as House Use Rates , is required. This flag should be used in conjunction with the Arrivals, Departures or StayOvers criteria.
func (r ReservationAPIGetHotelReservationsRequest) HouseUseReservations(houseUseReservations bool) ReservationAPIGetHotelReservationsRequest {
	r.houseUseReservations = &houseUseReservations
	return r
}

// Indicates if reservations which are StayOvers on the Search Date, is required.
func (r ReservationAPIGetHotelReservationsRequest) Stayovers(stayovers bool) ReservationAPIGetHotelReservationsRequest {
	r.stayovers = &stayovers
	return r
}

// Date for searching the reservations. This is the date for which the search types are applicable. If date is not available, the business date will be used by default.
func (r ReservationAPIGetHotelReservationsRequest) StayDate(stayDate string) ReservationAPIGetHotelReservationsRequest {
	r.stayDate = &stayDate
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetHotelReservationsRequest) RoomRoutingId(roomRoutingId string) ReservationAPIGetHotelReservationsRequest {
	r.roomRoutingId = &roomRoutingId
	return r
}

// Periodic folio type.
func (r ReservationAPIGetHotelReservationsRequest) PeriodicFolio(periodicFolio string) ReservationAPIGetHotelReservationsRequest {
	r.periodicFolio = &periodicFolio
	return r
}

// Comma-delimited list of Folio Settlement Type codes.
func (r ReservationAPIGetHotelReservationsRequest) FolioSettlementTypes(folioSettlementTypes string) ReservationAPIGetHotelReservationsRequest {
	r.folioSettlementTypes = &folioSettlementTypes
	return r
}

// Use the Number of Days For Settlement, defined for the Reservation.
func (r ReservationAPIGetHotelReservationsRequest) DefaultDays(defaultDays bool) ReservationAPIGetHotelReservationsRequest {
	r.defaultDays = &defaultDays
	return r
}

// Indicates to exclude Pseudo room reservations.
func (r ReservationAPIGetHotelReservationsRequest) ExcludePseudoRoomReservations(excludePseudoRoomReservations bool) ReservationAPIGetHotelReservationsRequest {
	r.excludePseudoRoomReservations = &excludePseudoRoomReservations
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetHotelReservationsRequest) ExcludeReservationIds(excludeReservationIds []string) ReservationAPIGetHotelReservationsRequest {
	r.excludeReservationIds = &excludeReservationIds
	return r
}

// VIP status of the customer.
func (r ReservationAPIGetHotelReservationsRequest) ExcludeVIPStatusCodes(excludeVIPStatusCodes []string) ReservationAPIGetHotelReservationsRequest {
	r.excludeVIPStatusCodes = &excludeVIPStatusCodes
	return r
}

// Preference value for display purposes.
func (r ReservationAPIGetHotelReservationsRequest) ExcludeSpecials(excludeSpecials []string) ReservationAPIGetHotelReservationsRequest {
	r.excludeSpecials = &excludeSpecials
	return r
}

// Preference value for display purposes.
func (r ReservationAPIGetHotelReservationsRequest) ExcludeFloorPreferences(excludeFloorPreferences []string) ReservationAPIGetHotelReservationsRequest {
	r.excludeFloorPreferences = &excludeFloorPreferences
	return r
}

// Indicates to exclude Advance Checked In Reservations from search result.
func (r ReservationAPIGetHotelReservationsRequest) ExcludeAdvanceCheckedIn(excludeAdvanceCheckedIn bool) ReservationAPIGetHotelReservationsRequest {
	r.excludeAdvanceCheckedIn = &excludeAdvanceCheckedIn
	return r
}

// Exclude the reservation(s) with provided room features from the search result.
func (r ReservationAPIGetHotelReservationsRequest) ExcludeRoomFeatures(excludeRoomFeatures []string) ReservationAPIGetHotelReservationsRequest {
	r.excludeRoomFeatures = &excludeRoomFeatures
	return r
}

// Player ID associated to the reservation.
func (r ReservationAPIGetHotelReservationsRequest) PlayerId(playerId string) ReservationAPIGetHotelReservationsRequest {
	r.playerId = &playerId
	return r
}

// Balance from.
func (r ReservationAPIGetHotelReservationsRequest) GamingBalanceFrom(gamingBalanceFrom float32) ReservationAPIGetHotelReservationsRequest {
	r.gamingBalanceFrom = &gamingBalanceFrom
	return r
}

// Balance to.
func (r ReservationAPIGetHotelReservationsRequest) GamingBalanceTo(gamingBalanceTo float32) ReservationAPIGetHotelReservationsRequest {
	r.gamingBalanceTo = &gamingBalanceTo
	return r
}

// Comp Balance From
func (r ReservationAPIGetHotelReservationsRequest) CompAccountingBalanceFrom(compAccountingBalanceFrom float32) ReservationAPIGetHotelReservationsRequest {
	r.compAccountingBalanceFrom = &compAccountingBalanceFrom
	return r
}

// Comp Balance To
func (r ReservationAPIGetHotelReservationsRequest) CompAccountingBalanceTo(compAccountingBalanceTo float32) ReservationAPIGetHotelReservationsRequest {
	r.compAccountingBalanceTo = &compAccountingBalanceTo
	return r
}

// Represents Reservation search type Player Snapshot.
func (r ReservationAPIGetHotelReservationsRequest) SearchTypes(searchTypes []string) ReservationAPIGetHotelReservationsRequest {
	r.searchTypes = &searchTypes
	return r
}

// Reservation status type for reservations search.
func (r ReservationAPIGetHotelReservationsRequest) ReservationStatuses(reservationStatuses []string) ReservationAPIGetHotelReservationsRequest {
	r.reservationStatuses = &reservationStatuses
	return r
}

// Codes to be searched.
func (r ReservationAPIGetHotelReservationsRequest) TransportationCodes(transportationCodes []string) ReservationAPIGetHotelReservationsRequest {
	r.transportationCodes = &transportationCodes
	return r
}

// Enum to denote the Status of Readiness messages sent to Guest Devices.
func (r ReservationAPIGetHotelReservationsRequest) RoomReadyStatuses(roomReadyStatuses []string) ReservationAPIGetHotelReservationsRequest {
	r.roomReadyStatuses = &roomReadyStatuses
	return r
}

// Fetches the reservations for which Checkout Message is received.
func (r ReservationAPIGetHotelReservationsRequest) CheckoutMessageReceived(checkoutMessageReceived bool) ReservationAPIGetHotelReservationsRequest {
	r.checkoutMessageReceived = &checkoutMessageReceived
	return r
}

// Fetches the reservations for which reservation communication has been opted.
func (r ReservationAPIGetHotelReservationsRequest) OptedForCommunication(optedForCommunication bool) ReservationAPIGetHotelReservationsRequest {
	r.optedForCommunication = &optedForCommunication
	return r
}

// Fetches the reservations for which this reservation room can be shifted or swapped.
func (r ReservationAPIGetHotelReservationsRequest) SwapShiftRoomReservationId(swapShiftRoomReservationId string) ReservationAPIGetHotelReservationsRequest {
	r.swapShiftRoomReservationId = &swapShiftRoomReservationId
	return r
}

// The smoking preferences of rooms to be fetched.
func (r ReservationAPIGetHotelReservationsRequest) RoomSmokingPreferences(roomSmokingPreferences []string) ReservationAPIGetHotelReservationsRequest {
	r.roomSmokingPreferences = &roomSmokingPreferences
	return r
}

// The room features of the rooms. Fetches reservations with rooms that have same room features. It has to be used in conjunction with roomType, arrivalStartDate, and arrivalEndDate.
func (r ReservationAPIGetHotelReservationsRequest) RoomFeaturePreferences(roomFeaturePreferences []string) ReservationAPIGetHotelReservationsRequest {
	r.roomFeaturePreferences = &roomFeaturePreferences
	return r
}

// The floor of the rooms. Fetches reservations with rooms that are on the same floor. It has to be used in conjunction with roomType, arrivalStartDate, and arrivalEndDate.
func (r ReservationAPIGetHotelReservationsRequest) RoomsFloorPreferences(roomsFloorPreferences []string) ReservationAPIGetHotelReservationsRequest {
	r.roomsFloorPreferences = &roomsFloorPreferences
	return r
}

// Name of Contact Profile associated with Reservation.
func (r ReservationAPIGetHotelReservationsRequest) ContactNames(contactNames []string) ReservationAPIGetHotelReservationsRequest {
	r.contactNames = &contactNames
	return r
}

// External system code.
func (r ReservationAPIGetHotelReservationsRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetHotelReservationsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetHotelReservationsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetHotelReservationsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetHotelReservationsRequest) Execute() (*ReservationsDetails, *http.Response, error) {
	return r.ApiService.GetHotelReservationsExecute(r)
}

/*
GetHotelReservations Get and search for reservations in a hotel

Use this API to search reservations in a hotel, filtering by whether they are Day Use, Due In, Checked In, Due Out, Checked Out, Cancelled, No Show and Complimentary or any other of the large selection of search criteria. It also serves as an entry way for changing existing reservation information, canceling reservations, checking in guests, canceling check ins, etc. You can use further query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data.<p><strong>OperationId:</strong>getHotelReservations</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetHotelReservationsRequest
*/
func (a *ReservationAPIService) GetHotelReservations(ctx context.Context, hotelId string) ReservationAPIGetHotelReservationsRequest {
	return ReservationAPIGetHotelReservationsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationsDetails
func (a *ReservationAPIService) GetHotelReservationsExecute(r ReservationAPIGetHotelReservationsRequest) (*ReservationsDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationsDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetHotelReservations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.keyTrack2 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keyTrack2", r.keyTrack2, "")
  }
	if r.discrepancy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "discrepancy", r.discrepancy, "")
  }
	if r.recentlyAccessed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recentlyAccessed", r.recentlyAccessed, "")
  }
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.searchType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "searchType", r.searchType, "")
  }
	if r.text != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "text", r.text, "")
  }
	if r.reservationIdList != nil {
		t := *r.reservationIdList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIdList", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIdList", t, "multi")
		}
  }
	if r.confirmationNumberList != nil {
		t := *r.confirmationNumberList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "confirmationNumberList", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "confirmationNumberList", t, "multi")
		}
  }
	if r.cancellationNumberList != nil {
		t := *r.cancellationNumberList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cancellationNumberList", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cancellationNumberList", t, "multi")
		}
  }
	if r.externalReferenceIds != nil {
		t := *r.externalReferenceIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "externalReferenceIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "externalReferenceIds", t, "multi")
		}
  }
	if r.externalSystemCodes != nil {
		t := *r.externalSystemCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "externalSystemCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "externalSystemCodes", t, "multi")
		}
  }
	if r.arrivalEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalEndDate", r.arrivalEndDate, "")
  }
	if r.arrivalStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalStartDate", r.arrivalStartDate, "")
  }
	if r.departureEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "departureEndDate", r.departureEndDate, "")
  }
	if r.departureStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "departureStartDate", r.departureStartDate, "")
  }
	if r.stayOnStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stayOnStartDate", r.stayOnStartDate, "")
  }
	if r.createdOnStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdOnStartDate", r.createdOnStartDate, "")
  }
	if r.expectedArrivalEndTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expectedArrivalEndTime", r.expectedArrivalEndTime, "")
  }
	if r.expectedArrivalStartTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expectedArrivalStartTime", r.expectedArrivalStartTime, "")
  }
	if r.depositDueEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depositDueEndDate", r.depositDueEndDate, "")
  }
	if r.depositDueStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depositDueStartDate", r.depositDueStartDate, "")
  }
	if r.expectedReturnEndTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expectedReturnEndTime", r.expectedReturnEndTime, "")
  }
	if r.expectedReturnStartTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expectedReturnStartTime", r.expectedReturnStartTime, "")
  }
	if r.companyNames != nil {
		t := *r.companyNames
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "companyNames", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "companyNames", t, "multi")
		}
  }
	if r.sourceNames != nil {
		t := *r.sourceNames
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sourceNames", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sourceNames", t, "multi")
		}
  }
	if r.travelAgentNames != nil {
		t := *r.travelAgentNames
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "travelAgentNames", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "travelAgentNames", t, "multi")
		}
  }
	if r.groupNames != nil {
		t := *r.groupNames
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "groupNames", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "groupNames", t, "multi")
		}
  }
	if r.travelAgentIds != nil {
		t := *r.travelAgentIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "travelAgentIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "travelAgentIds", t, "multi")
		}
  }
	if r.companyIds != nil {
		t := *r.companyIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "companyIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "companyIds", t, "multi")
		}
  }
	if r.sourceIds != nil {
		t := *r.sourceIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sourceIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sourceIds", t, "multi")
		}
  }
	if r.contactIds != nil {
		t := *r.contactIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contactIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contactIds", t, "multi")
		}
  }
	if r.groupIds != nil {
		t := *r.groupIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "groupIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "groupIds", t, "multi")
		}
  }
	if r.billingContactIds != nil {
		t := *r.billingContactIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "billingContactIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "billingContactIds", t, "multi")
		}
  }
	if r.profileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileId", r.profileId, "")
  }
	if r.commissionPaid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commissionPaid", r.commissionPaid, "")
  }
	if r.membershipCardNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipCardNumber", r.membershipCardNumber, "")
  }
	if r.membershipLevels != nil {
		t := *r.membershipLevels
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "membershipLevels", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "membershipLevels", t, "multi")
		}
  }
	if r.membershipTypes != nil {
		t := *r.membershipTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "membershipTypes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "membershipTypes", t, "multi")
		}
  }
	if r.surname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "surname", r.surname, "")
  }
	if r.givenName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "givenName", r.givenName, "")
  }
	if r.fromName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromName", r.fromName, "")
  }
	if r.toName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toName", r.toName, "")
  }
	if r.anyVIPStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "anyVIPStatus", r.anyVIPStatus, "")
  }
	if r.vipCodes != nil {
		t := *r.vipCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vipCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vipCodes", t, "multi")
		}
  }
	if r.guaranteeCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "guaranteeCode", r.guaranteeCode, "")
  }
	if r.paymentMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paymentMethod", r.paymentMethod, "")
  }
	if r.discountApplied != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "discountApplied", r.discountApplied, "")
  }
	if r.user != nil {
		t := *r.user
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user", t, "multi")
		}
  }
	if r.createdBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdBy", r.createdBy, "")
  }
	if r.cancelledByList != nil {
		t := *r.cancelledByList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cancelledByList", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cancelledByList", t, "multi")
		}
  }
	if r.cancelledOn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cancelledOn", r.cancelledOn, "")
  }
	if r.ratePlanCodes != nil {
		t := *r.ratePlanCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCodes", t, "multi")
		}
  }
	if r.sourceCodes != nil {
		t := *r.sourceCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sourceCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sourceCodes", t, "multi")
		}
  }
	if r.marketCodes != nil {
		t := *r.marketCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "marketCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "marketCodes", t, "multi")
		}
  }
	if r.excludeBlockReservations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeBlockReservations", r.excludeBlockReservations, "")
  }
	if r.blockCriteriaHotelCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blockCriteriaHotelCode", r.blockCriteriaHotelCode, "")
  }
	if r.blockName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blockName", r.blockName, "")
  }
	if r.blockIds != nil {
		t := *r.blockIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "blockIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "blockIds", t, "multi")
		}
  }
	if r.blockCodes != nil {
		t := *r.blockCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "blockCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "blockCodes", t, "multi")
		}
  }
	if r.customReference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customReference", r.customReference, "")
  }
	if r.recordLocator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recordLocator", r.recordLocator, "")
  }
	if r.orderBy != nil {
		t := *r.orderBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", t, "multi")
		}
  }
	if r.sortOrder != nil {
		t := *r.sortOrder
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", t, "multi")
		}
  }
	if r.roomAssignedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomAssignedOnly", r.roomAssignedOnly, "")
  }
	if r.roomUnassignedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomUnassignedOnly", r.roomUnassignedOnly, "")
  }
	if r.roomId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomId", r.roomId, "")
  }
	if r.roomType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", r.roomType, "csv")
  }
	if r.roomFeatures != nil {
		t := *r.roomFeatures
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomFeatures", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomFeatures", t, "multi")
		}
  }
	if r.roomSpecials != nil {
		t := *r.roomSpecials
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomSpecials", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomSpecials", t, "multi")
		}
  }
	if r.roomSmokingPreference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomSmokingPreference", r.roomSmokingPreference, "")
  }
	if r.roomFloorPreferences != nil {
		t := *r.roomFloorPreferences
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomFloorPreferences", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomFloorPreferences", t, "multi")
		}
  }
	if r.housekeepingRoomStatuses != nil {
		t := *r.housekeepingRoomStatuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "housekeepingRoomStatuses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "housekeepingRoomStatuses", t, "multi")
		}
  }
	if r.roomClasses != nil {
		t := *r.roomClasses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", t, "multi")
		}
  }
	if r.roomRangeFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomRangeFrom", r.roomRangeFrom, "")
  }
	if r.roomRangeTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomRangeTo", r.roomRangeTo, "")
  }
	if r.communication != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "communication", r.communication, "")
  }
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
  }
	if r.allowedReservationActions != nil {
		t := *r.allowedReservationActions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allowedReservationActions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allowedReservationActions", t, "multi")
		}
  }
	if r.allowPreRegistration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowPreRegistration", r.allowPreRegistration, "")
  }
	if r.excludeNoPost != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeNoPost", r.excludeNoPost, "")
  }
	if r.excludePMRooms != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludePMRooms", r.excludePMRooms, "")
  }
	if r.hasDepositBalance != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hasDepositBalance", r.hasDepositBalance, "")
  }
	if r.hasOpenBalance != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hasOpenBalance", r.hasOpenBalance, "")
  }
	if r.hasOpenFolio != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hasOpenFolio", r.hasOpenFolio, "")
  }
	if r.includeScheduledCheckOut != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeScheduledCheckOut", r.includeScheduledCheckOut, "")
  }
	if r.linkedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "linkedOnly", r.linkedOnly, "")
  }
	if r.unlinkedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "unlinkedOnly", r.unlinkedOnly, "")
  }
	if r.actualArrivals != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "actualArrivals", r.actualArrivals, "")
  }
	if r.actualDepartures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "actualDepartures", r.actualDepartures, "")
  }
	if r.complimentaryReservations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "complimentaryReservations", r.complimentaryReservations, "")
  }
	if r.dayOfArrivalCancels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dayOfArrivalCancels", r.dayOfArrivalCancels, "")
  }
	if r.dayUse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dayUse", r.dayUse, "")
  }
	if r.earlyDepartures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "earlyDepartures", r.earlyDepartures, "")
  }
	if r.expectedArrivals != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expectedArrivals", r.expectedArrivals, "")
  }
	if r.expectedDepartures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expectedDepartures", r.expectedDepartures, "")
  }
	if r.extendedStays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "extendedStays", r.extendedStays, "")
  }
	if r.houseUseReservations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "houseUseReservations", r.houseUseReservations, "")
  }
	if r.stayovers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stayovers", r.stayovers, "")
  }
	if r.stayDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stayDate", r.stayDate, "")
  }
	if r.roomRoutingId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomRoutingId", r.roomRoutingId, "")
  }
	if r.periodicFolio != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "periodicFolio", r.periodicFolio, "")
  }
	if r.folioSettlementTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "folioSettlementTypes", r.folioSettlementTypes, "")
  }
	if r.defaultDays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultDays", r.defaultDays, "")
  }
	if r.excludePseudoRoomReservations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludePseudoRoomReservations", r.excludePseudoRoomReservations, "")
  }
	if r.excludeReservationIds != nil {
		t := *r.excludeReservationIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeReservationIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeReservationIds", t, "multi")
		}
  }
	if r.excludeVIPStatusCodes != nil {
		t := *r.excludeVIPStatusCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeVIPStatusCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeVIPStatusCodes", t, "multi")
		}
  }
	if r.excludeSpecials != nil {
		t := *r.excludeSpecials
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeSpecials", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeSpecials", t, "multi")
		}
  }
	if r.excludeFloorPreferences != nil {
		t := *r.excludeFloorPreferences
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeFloorPreferences", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeFloorPreferences", t, "multi")
		}
  }
	if r.excludeAdvanceCheckedIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeAdvanceCheckedIn", r.excludeAdvanceCheckedIn, "")
  }
	if r.excludeRoomFeatures != nil {
		t := *r.excludeRoomFeatures
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeRoomFeatures", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeRoomFeatures", t, "multi")
		}
  }
	if r.playerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playerId", r.playerId, "")
  }
	if r.gamingBalanceFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gamingBalanceFrom", r.gamingBalanceFrom, "")
  }
	if r.gamingBalanceTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gamingBalanceTo", r.gamingBalanceTo, "")
  }
	if r.compAccountingBalanceFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "compAccountingBalanceFrom", r.compAccountingBalanceFrom, "")
  }
	if r.compAccountingBalanceTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "compAccountingBalanceTo", r.compAccountingBalanceTo, "")
  }
	if r.searchTypes != nil {
		t := *r.searchTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "searchTypes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "searchTypes", t, "multi")
		}
  }
	if r.reservationStatuses != nil {
		t := *r.reservationStatuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reservationStatuses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reservationStatuses", t, "multi")
		}
  }
	if r.transportationCodes != nil {
		t := *r.transportationCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "transportationCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "transportationCodes", t, "multi")
		}
  }
	if r.roomReadyStatuses != nil {
		t := *r.roomReadyStatuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomReadyStatuses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomReadyStatuses", t, "multi")
		}
  }
	if r.checkoutMessageReceived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "checkoutMessageReceived", r.checkoutMessageReceived, "")
  }
	if r.optedForCommunication != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "optedForCommunication", r.optedForCommunication, "")
  }
	if r.swapShiftRoomReservationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "swapShiftRoomReservationId", r.swapShiftRoomReservationId, "")
  }
	if r.roomSmokingPreferences != nil {
		t := *r.roomSmokingPreferences
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomSmokingPreferences", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomSmokingPreferences", t, "multi")
		}
  }
	if r.roomFeaturePreferences != nil {
		t := *r.roomFeaturePreferences
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomFeaturePreferences", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomFeaturePreferences", t, "multi")
		}
  }
	if r.roomsFloorPreferences != nil {
		t := *r.roomsFloorPreferences
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomsFloorPreferences", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomsFloorPreferences", t, "multi")
		}
  }
	if r.contactNames != nil {
		t := *r.contactNames
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contactNames", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contactNames", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetLinkedReservationsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	additionalReservationId *[]string
	additionalReservationIdType *[]string
	fetchInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetLinkedReservationsRequest) Authorization(authorization string) ReservationAPIGetLinkedReservationsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetLinkedReservationsRequest) XAppKey(xAppKey string) ReservationAPIGetLinkedReservationsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetLinkedReservationsRequest) XHotelid(xHotelid string) ReservationAPIGetLinkedReservationsRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetLinkedReservationsRequest) AdditionalReservationId(additionalReservationId []string) ReservationAPIGetLinkedReservationsRequest {
	r.additionalReservationId = &additionalReservationId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIGetLinkedReservationsRequest) AdditionalReservationIdType(additionalReservationIdType []string) ReservationAPIGetLinkedReservationsRequest {
	r.additionalReservationIdType = &additionalReservationIdType
	return r
}

// Instruction to fetch whether the room was assigned/upgraded by AI. This will also include Reservation instruction.
func (r ReservationAPIGetLinkedReservationsRequest) FetchInstructions(fetchInstructions []string) ReservationAPIGetLinkedReservationsRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r ReservationAPIGetLinkedReservationsRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetLinkedReservationsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetLinkedReservationsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetLinkedReservationsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetLinkedReservationsRequest) Execute() (*LinkedHotelReservations, *http.Response, error) {
	return r.ApiService.GetLinkedReservationsExecute(r)
}

/*
GetLinkedReservations Get linked Reservations 

Get linked Reservations for given Reservation. <p><strong>OperationId:</strong>getLinkedReservations</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetLinkedReservationsRequest
*/
func (a *ReservationAPIService) GetLinkedReservations(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetLinkedReservationsRequest {
	return ReservationAPIGetLinkedReservationsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return LinkedHotelReservations
func (a *ReservationAPIService) GetLinkedReservationsExecute(r ReservationAPIGetLinkedReservationsRequest) (*LinkedHotelReservations, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LinkedHotelReservations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetLinkedReservations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/linked"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.additionalReservationId != nil {
		t := *r.additionalReservationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "additionalReservationId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "additionalReservationId", t, "multi")
		}
  }
	if r.additionalReservationIdType != nil {
		t := *r.additionalReservationIdType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "additionalReservationIdType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "additionalReservationIdType", t, "multi")
		}
  }
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetLinkedReservationsSummaryRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	additionalReservationId *[]string
	additionalReservationIdType *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetLinkedReservationsSummaryRequest) Authorization(authorization string) ReservationAPIGetLinkedReservationsSummaryRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetLinkedReservationsSummaryRequest) XAppKey(xAppKey string) ReservationAPIGetLinkedReservationsSummaryRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetLinkedReservationsSummaryRequest) XHotelid(xHotelid string) ReservationAPIGetLinkedReservationsSummaryRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetLinkedReservationsSummaryRequest) AdditionalReservationId(additionalReservationId []string) ReservationAPIGetLinkedReservationsSummaryRequest {
	r.additionalReservationId = &additionalReservationId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIGetLinkedReservationsSummaryRequest) AdditionalReservationIdType(additionalReservationIdType []string) ReservationAPIGetLinkedReservationsSummaryRequest {
	r.additionalReservationIdType = &additionalReservationIdType
	return r
}

// External system code.
func (r ReservationAPIGetLinkedReservationsSummaryRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetLinkedReservationsSummaryRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetLinkedReservationsSummaryRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetLinkedReservationsSummaryRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetLinkedReservationsSummaryRequest) Execute() (*LinkedReservationsInfo, *http.Response, error) {
	return r.ApiService.GetLinkedReservationsSummaryExecute(r)
}

/*
GetLinkedReservationsSummary Get Reservation summary for linked Reservation

Get Reservation summary for linked Reservation of given Reservation id. <p><strong>OperationId:</strong>getLinkedReservationsSummary</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetLinkedReservationsSummaryRequest
*/
func (a *ReservationAPIService) GetLinkedReservationsSummary(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetLinkedReservationsSummaryRequest {
	return ReservationAPIGetLinkedReservationsSummaryRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return LinkedReservationsInfo
func (a *ReservationAPIService) GetLinkedReservationsSummaryExecute(r ReservationAPIGetLinkedReservationsSummaryRequest) (*LinkedReservationsInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LinkedReservationsInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetLinkedReservationsSummary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/linkedSummary"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.additionalReservationId != nil {
		t := *r.additionalReservationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "additionalReservationId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "additionalReservationId", t, "multi")
		}
  }
	if r.additionalReservationIdType != nil {
		t := *r.additionalReservationIdType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "additionalReservationIdType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "additionalReservationIdType", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetPackageRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	postingRhythm *string
	productCode *string
	ratePlanCode *string
	reservationTimeSpanStartDate *string
	reservationTimeSpanEndDate *string
	packageTimeSpanStartDate *string
	packageTimeSpanEndDate *string
	packageQuantity *int32
	packageExcludedQuantity *int32
	reservationAdults *int32
	reservationChildren *int32
	fetchInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetPackageRequest) Authorization(authorization string) ReservationAPIGetPackageRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetPackageRequest) XAppKey(xAppKey string) ReservationAPIGetPackageRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetPackageRequest) XHotelid(xHotelid string) ReservationAPIGetPackageRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r ReservationAPIGetPackageRequest) PostingRhythm(postingRhythm string) ReservationAPIGetPackageRequest {
	r.postingRhythm = &postingRhythm
	return r
}

func (r ReservationAPIGetPackageRequest) ProductCode(productCode string) ReservationAPIGetPackageRequest {
	r.productCode = &productCode
	return r
}

func (r ReservationAPIGetPackageRequest) RatePlanCode(ratePlanCode string) ReservationAPIGetPackageRequest {
	r.ratePlanCode = &ratePlanCode
	return r
}

func (r ReservationAPIGetPackageRequest) ReservationTimeSpanStartDate(reservationTimeSpanStartDate string) ReservationAPIGetPackageRequest {
	r.reservationTimeSpanStartDate = &reservationTimeSpanStartDate
	return r
}

func (r ReservationAPIGetPackageRequest) ReservationTimeSpanEndDate(reservationTimeSpanEndDate string) ReservationAPIGetPackageRequest {
	r.reservationTimeSpanEndDate = &reservationTimeSpanEndDate
	return r
}

func (r ReservationAPIGetPackageRequest) PackageTimeSpanStartDate(packageTimeSpanStartDate string) ReservationAPIGetPackageRequest {
	r.packageTimeSpanStartDate = &packageTimeSpanStartDate
	return r
}

func (r ReservationAPIGetPackageRequest) PackageTimeSpanEndDate(packageTimeSpanEndDate string) ReservationAPIGetPackageRequest {
	r.packageTimeSpanEndDate = &packageTimeSpanEndDate
	return r
}

func (r ReservationAPIGetPackageRequest) PackageQuantity(packageQuantity int32) ReservationAPIGetPackageRequest {
	r.packageQuantity = &packageQuantity
	return r
}

func (r ReservationAPIGetPackageRequest) PackageExcludedQuantity(packageExcludedQuantity int32) ReservationAPIGetPackageRequest {
	r.packageExcludedQuantity = &packageExcludedQuantity
	return r
}

// Defines the number of Adults.
func (r ReservationAPIGetPackageRequest) ReservationAdults(reservationAdults int32) ReservationAPIGetPackageRequest {
	r.reservationAdults = &reservationAdults
	return r
}

// Defines the number of Children.
func (r ReservationAPIGetPackageRequest) ReservationChildren(reservationChildren int32) ReservationAPIGetPackageRequest {
	r.reservationChildren = &reservationChildren
	return r
}

// Simple type for package instructions that can be used in requests for partial operations.
func (r ReservationAPIGetPackageRequest) FetchInstructions(fetchInstructions []string) ReservationAPIGetPackageRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r ReservationAPIGetPackageRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetPackageRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetPackageRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetPackageRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetPackageRequest) Execute() (*Packages, *http.Response, error) {
	return r.ApiService.GetPackageExecute(r)
}

/*
GetPackage Get Package

Get the package availability for a hotel code and reservation id <p><strong>OperationId:</strong>getPackage</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetPackageRequest
*/
func (a *ReservationAPIService) GetPackage(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetPackageRequest {
	return ReservationAPIGetPackageRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Packages
func (a *ReservationAPIService) GetPackageExecute(r ReservationAPIGetPackageRequest) (*Packages, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Packages
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetPackage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/packages"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.postingRhythm != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "postingRhythm", r.postingRhythm, "")
  }
	if r.productCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productCode", r.productCode, "")
  }
	if r.ratePlanCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", r.ratePlanCode, "")
  }
	if r.reservationTimeSpanStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationTimeSpanStartDate", r.reservationTimeSpanStartDate, "")
  }
	if r.reservationTimeSpanEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationTimeSpanEndDate", r.reservationTimeSpanEndDate, "")
  }
	if r.packageTimeSpanStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "packageTimeSpanStartDate", r.packageTimeSpanStartDate, "")
  }
	if r.packageTimeSpanEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "packageTimeSpanEndDate", r.packageTimeSpanEndDate, "")
  }
	if r.packageQuantity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "packageQuantity", r.packageQuantity, "")
  }
	if r.packageExcludedQuantity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "packageExcludedQuantity", r.packageExcludedQuantity, "")
  }
	if r.reservationAdults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationAdults", r.reservationAdults, "")
  }
	if r.reservationChildren != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationChildren", r.reservationChildren, "")
  }
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetPaymentMethodsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	includeAmounts *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetPaymentMethodsRequest) Authorization(authorization string) ReservationAPIGetPaymentMethodsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetPaymentMethodsRequest) XAppKey(xAppKey string) ReservationAPIGetPaymentMethodsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetPaymentMethodsRequest) XHotelid(xHotelid string) ReservationAPIGetPaymentMethodsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Flag to notify the operation to also retrieve the outstanding balance, current authorized amount and amount needed to be approved for each folio.
func (r ReservationAPIGetPaymentMethodsRequest) IncludeAmounts(includeAmounts bool) ReservationAPIGetPaymentMethodsRequest {
	r.includeAmounts = &includeAmounts
	return r
}

// External system code.
func (r ReservationAPIGetPaymentMethodsRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetPaymentMethodsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetPaymentMethodsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetPaymentMethodsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetPaymentMethodsRequest) Execute() (*ReservationPaymentMethods, *http.Response, error) {
	return r.ApiService.GetPaymentMethodsExecute(r)
}

/*
GetPaymentMethods Get a payment method 

This API will return the payment method(s) that exist on a reservation. <p><strong>OperationId:</strong>getPaymentMethods</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetPaymentMethodsRequest
*/
func (a *ReservationAPIService) GetPaymentMethods(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetPaymentMethodsRequest {
	return ReservationAPIGetPaymentMethodsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationPaymentMethods
func (a *ReservationAPIService) GetPaymentMethodsExecute(r ReservationAPIGetPaymentMethodsRequest) (*ReservationPaymentMethods, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationPaymentMethods
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetPaymentMethods")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/paymentMethods"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.includeAmounts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeAmounts", r.includeAmounts, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetPreArrivalMemberReservationsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	end *string
	start *string
	membershipType *string
	externalReferenceType *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetPreArrivalMemberReservationsRequest) Authorization(authorization string) ReservationAPIGetPreArrivalMemberReservationsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetPreArrivalMemberReservationsRequest) XAppKey(xAppKey string) ReservationAPIGetPreArrivalMemberReservationsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetPreArrivalMemberReservationsRequest) XHotelid(xHotelid string) ReservationAPIGetPreArrivalMemberReservationsRequest {
	r.xHotelid = &xHotelid
	return r
}

// The ending value of the date range.
func (r ReservationAPIGetPreArrivalMemberReservationsRequest) End(end string) ReservationAPIGetPreArrivalMemberReservationsRequest {
	r.end = &end
	return r
}

// The starting value of the date range.
func (r ReservationAPIGetPreArrivalMemberReservationsRequest) Start(start string) ReservationAPIGetPreArrivalMemberReservationsRequest {
	r.start = &start
	return r
}

// Membership Type.
func (r ReservationAPIGetPreArrivalMemberReservationsRequest) MembershipType(membershipType string) ReservationAPIGetPreArrivalMemberReservationsRequest {
	r.membershipType = &membershipType
	return r
}

// Type of the desired reservation external confirmation number.
func (r ReservationAPIGetPreArrivalMemberReservationsRequest) ExternalReferenceType(externalReferenceType string) ReservationAPIGetPreArrivalMemberReservationsRequest {
	r.externalReferenceType = &externalReferenceType
	return r
}

// External system code.
func (r ReservationAPIGetPreArrivalMemberReservationsRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetPreArrivalMemberReservationsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetPreArrivalMemberReservationsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetPreArrivalMemberReservationsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetPreArrivalMemberReservationsRequest) Execute() (*PreArrivalMemberReservationsDetails, *http.Response, error) {
	return r.ApiService.GetPreArrivalMemberReservationsExecute(r)
}

/*
GetPreArrivalMemberReservations Get preArrival Member Reservations

Get preArrival Member Reservations. <p><strong>OperationId:</strong>getPreArrivalMemberReservations</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetPreArrivalMemberReservationsRequest
*/
func (a *ReservationAPIService) GetPreArrivalMemberReservations(ctx context.Context, hotelId string) ReservationAPIGetPreArrivalMemberReservationsRequest {
	return ReservationAPIGetPreArrivalMemberReservationsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return PreArrivalMemberReservationsDetails
func (a *ReservationAPIService) GetPreArrivalMemberReservationsExecute(r ReservationAPIGetPreArrivalMemberReservationsRequest) (*PreArrivalMemberReservationsDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PreArrivalMemberReservationsDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetPreArrivalMemberReservations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/preArrivalMembersReservations"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
  }
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
  }
	if r.membershipType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipType", r.membershipType, "")
  }
	if r.externalReferenceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "externalReferenceType", r.externalReferenceType, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetPreConfiguredRoutingInstructionsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	rateCode *string
	promotionCodes *[]string
	guestName *string
	guestIds *[]string
	companyName *string
	companyIds *[]string
	groupName *string
	groupIds *[]string
	travelAgentName *string
	travelAgentIds *[]string
	sourceName *string
	sourceIds *[]string
	contactName *string
	contactIds *[]string
	billingContactName *string
	billingContactIds *[]string
	addresseeName *string
	addresseeIds *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) Authorization(authorization string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) XAppKey(xAppKey string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) XHotelid(xHotelid string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) RateCode(rateCode string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.rateCode = &rateCode
	return r
}

// Promotion Code for ComplimentaryRouting
func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) PromotionCodes(promotionCodes []string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.promotionCodes = &promotionCodes
	return r
}

// Attached profile name
func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) GuestName(guestName string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.guestName = &guestName
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) GuestIds(guestIds []string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.guestIds = &guestIds
	return r
}

// Attached profile name
func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) CompanyName(companyName string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.companyName = &companyName
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) CompanyIds(companyIds []string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.companyIds = &companyIds
	return r
}

// Attached profile name
func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) GroupName(groupName string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.groupName = &groupName
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) GroupIds(groupIds []string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.groupIds = &groupIds
	return r
}

// Attached profile name
func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) TravelAgentName(travelAgentName string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.travelAgentName = &travelAgentName
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) TravelAgentIds(travelAgentIds []string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.travelAgentIds = &travelAgentIds
	return r
}

// Attached profile name
func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) SourceName(sourceName string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.sourceName = &sourceName
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) SourceIds(sourceIds []string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.sourceIds = &sourceIds
	return r
}

// Attached profile name
func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) ContactName(contactName string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.contactName = &contactName
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) ContactIds(contactIds []string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.contactIds = &contactIds
	return r
}

// Attached profile name
func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) BillingContactName(billingContactName string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.billingContactName = &billingContactName
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) BillingContactIds(billingContactIds []string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.billingContactIds = &billingContactIds
	return r
}

// Attached profile name
func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) AddresseeName(addresseeName string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.addresseeName = &addresseeName
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) AddresseeIds(addresseeIds []string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.addresseeIds = &addresseeIds
	return r
}

// External system code.
func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) Execute() (*PreConfiguredRoutingInstructions, *http.Response, error) {
	return r.ApiService.GetPreConfiguredRoutingInstructionsExecute(r)
}

/*
GetPreConfiguredRoutingInstructions Get pre-Configured Routing Instructions

Get preConfigured Routing Instructions. <p><strong>OperationId:</strong>getPreConfiguredRoutingInstructions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetPreConfiguredRoutingInstructionsRequest
*/
func (a *ReservationAPIService) GetPreConfiguredRoutingInstructions(ctx context.Context, hotelId string) ReservationAPIGetPreConfiguredRoutingInstructionsRequest {
	return ReservationAPIGetPreConfiguredRoutingInstructionsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return PreConfiguredRoutingInstructions
func (a *ReservationAPIService) GetPreConfiguredRoutingInstructionsExecute(r ReservationAPIGetPreConfiguredRoutingInstructionsRequest) (*PreConfiguredRoutingInstructions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PreConfiguredRoutingInstructions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetPreConfiguredRoutingInstructions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/preConfiguredRoutingInstructions"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.rateCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rateCode", r.rateCode, "")
  }
	if r.promotionCodes != nil {
		t := *r.promotionCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "promotionCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "promotionCodes", t, "multi")
		}
  }
	if r.guestName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "guestName", r.guestName, "")
  }
	if r.guestIds != nil {
		t := *r.guestIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "guestIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "guestIds", t, "multi")
		}
  }
	if r.companyName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "companyName", r.companyName, "")
  }
	if r.companyIds != nil {
		t := *r.companyIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "companyIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "companyIds", t, "multi")
		}
  }
	if r.groupName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupName", r.groupName, "")
  }
	if r.groupIds != nil {
		t := *r.groupIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "groupIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "groupIds", t, "multi")
		}
  }
	if r.travelAgentName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "travelAgentName", r.travelAgentName, "")
  }
	if r.travelAgentIds != nil {
		t := *r.travelAgentIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "travelAgentIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "travelAgentIds", t, "multi")
		}
  }
	if r.sourceName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sourceName", r.sourceName, "")
  }
	if r.sourceIds != nil {
		t := *r.sourceIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sourceIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sourceIds", t, "multi")
		}
  }
	if r.contactName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contactName", r.contactName, "")
  }
	if r.contactIds != nil {
		t := *r.contactIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contactIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contactIds", t, "multi")
		}
  }
	if r.billingContactName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "billingContactName", r.billingContactName, "")
  }
	if r.billingContactIds != nil {
		t := *r.billingContactIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "billingContactIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "billingContactIds", t, "multi")
		}
  }
	if r.addresseeName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "addresseeName", r.addresseeName, "")
  }
	if r.addresseeIds != nil {
		t := *r.addresseeIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "addresseeIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "addresseeIds", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetRateInfoRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	currencyCode *string
	summaryInfo *bool
	criteriaStartDate *string
	criteriaEndDate *string
	adults *int32
	children *int32
	childAge *[]int32
	bucket1Count *int32
	bucket2Count *int32
	bucket3Count *int32
	bucket4Count *int32
	bucket5Count *int32
	detailDate *string
	blockId *string
	blockIdType *string
	id *string
	idExtension *int32
	idContext *string
	type_ *string
	ratePlanCode *string
	effectiveRateEnd *[]string
	effectiveRateStart *[]string
	roomType *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetRateInfoRequest) Authorization(authorization string) ReservationAPIGetRateInfoRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetRateInfoRequest) XAppKey(xAppKey string) ReservationAPIGetRateInfoRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetRateInfoRequest) XHotelid(xHotelid string) ReservationAPIGetRateInfoRequest {
	r.xHotelid = &xHotelid
	return r
}

// The code specifying a monetary unit. Use ISO 4217, three alpha code.
func (r ReservationAPIGetRateInfoRequest) CurrencyCode(currencyCode string) ReservationAPIGetRateInfoRequest {
	r.currencyCode = &currencyCode
	return r
}

// Flag to indicate if summary information is required.
func (r ReservationAPIGetRateInfoRequest) SummaryInfo(summaryInfo bool) ReservationAPIGetRateInfoRequest {
	r.summaryInfo = &summaryInfo
	return r
}

func (r ReservationAPIGetRateInfoRequest) CriteriaStartDate(criteriaStartDate string) ReservationAPIGetRateInfoRequest {
	r.criteriaStartDate = &criteriaStartDate
	return r
}

func (r ReservationAPIGetRateInfoRequest) CriteriaEndDate(criteriaEndDate string) ReservationAPIGetRateInfoRequest {
	r.criteriaEndDate = &criteriaEndDate
	return r
}

// Defines the number of Adults.
func (r ReservationAPIGetRateInfoRequest) Adults(adults int32) ReservationAPIGetRateInfoRequest {
	r.adults = &adults
	return r
}

// Defines the number of Children.
func (r ReservationAPIGetRateInfoRequest) Children(children int32) ReservationAPIGetRateInfoRequest {
	r.children = &children
	return r
}

// Age of a child in years.
func (r ReservationAPIGetRateInfoRequest) ChildAge(childAge []int32) ReservationAPIGetRateInfoRequest {
	r.childAge = &childAge
	return r
}

// Number of children classified under the first Age Qualifying Group(Child Bucket#1).
func (r ReservationAPIGetRateInfoRequest) Bucket1Count(bucket1Count int32) ReservationAPIGetRateInfoRequest {
	r.bucket1Count = &bucket1Count
	return r
}

// Number of children classified under the second Age Qualifying Group(Child Bucket#2).
func (r ReservationAPIGetRateInfoRequest) Bucket2Count(bucket2Count int32) ReservationAPIGetRateInfoRequest {
	r.bucket2Count = &bucket2Count
	return r
}

// Number of children classified under the third Age Qualifying Group(Child Bucket#3).
func (r ReservationAPIGetRateInfoRequest) Bucket3Count(bucket3Count int32) ReservationAPIGetRateInfoRequest {
	r.bucket3Count = &bucket3Count
	return r
}

// Number of children classified under the fourth Age Qualifying Group(Child Bucket#4).
func (r ReservationAPIGetRateInfoRequest) Bucket4Count(bucket4Count int32) ReservationAPIGetRateInfoRequest {
	r.bucket4Count = &bucket4Count
	return r
}

// Number of children classified under the fifth Age Qualifying Group(Child Bucket#5).
func (r ReservationAPIGetRateInfoRequest) Bucket5Count(bucket5Count int32) ReservationAPIGetRateInfoRequest {
	r.bucket5Count = &bucket5Count
	return r
}

// This field is only required when the criteria is meant for a detailed results. The date for the rate detail is needed.
func (r ReservationAPIGetRateInfoRequest) DetailDate(detailDate string) ReservationAPIGetRateInfoRequest {
	r.detailDate = &detailDate
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetRateInfoRequest) BlockId(blockId string) ReservationAPIGetRateInfoRequest {
	r.blockId = &blockId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIGetRateInfoRequest) BlockIdType(blockIdType string) ReservationAPIGetRateInfoRequest {
	r.blockIdType = &blockIdType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetRateInfoRequest) Id(id string) ReservationAPIGetRateInfoRequest {
	r.id = &id
	return r
}

// Additional identifying value assigned by the creating system.
func (r ReservationAPIGetRateInfoRequest) IdExtension(idExtension int32) ReservationAPIGetRateInfoRequest {
	r.idExtension = &idExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ReservationAPIGetRateInfoRequest) IdContext(idContext string) ReservationAPIGetRateInfoRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIGetRateInfoRequest) Type_(type_ string) ReservationAPIGetRateInfoRequest {
	r.type_ = &type_
	return r
}

// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
func (r ReservationAPIGetRateInfoRequest) RatePlanCode(ratePlanCode string) ReservationAPIGetRateInfoRequest {
	r.ratePlanCode = &ratePlanCode
	return r
}

// The ending value of the date range.
func (r ReservationAPIGetRateInfoRequest) EffectiveRateEnd(effectiveRateEnd []string) ReservationAPIGetRateInfoRequest {
	r.effectiveRateEnd = &effectiveRateEnd
	return r
}

// The starting value of the date range.
func (r ReservationAPIGetRateInfoRequest) EffectiveRateStart(effectiveRateStart []string) ReservationAPIGetRateInfoRequest {
	r.effectiveRateStart = &effectiveRateStart
	return r
}

// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
func (r ReservationAPIGetRateInfoRequest) RoomType(roomType string) ReservationAPIGetRateInfoRequest {
	r.roomType = &roomType
	return r
}

// External system code.
func (r ReservationAPIGetRateInfoRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetRateInfoRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetRateInfoRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetRateInfoRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetRateInfoRequest) Execute() (*RateInfo, *http.Response, error) {
	return r.ApiService.GetRateInfoExecute(r)
}

/*
GetRateInfo Get rate information

Use this API to retrieve rate plan information including a breakdown of packages and taxes.<p><strong>OperationId:</strong>getRateInfo</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetRateInfoRequest
*/
func (a *ReservationAPIService) GetRateInfo(ctx context.Context, hotelId string) ReservationAPIGetRateInfoRequest {
	return ReservationAPIGetRateInfoRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return RateInfo
func (a *ReservationAPIService) GetRateInfoExecute(r ReservationAPIGetRateInfoRequest) (*RateInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RateInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetRateInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/rateInfo"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.currencyCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "currencyCode", r.currencyCode, "")
  }
	if r.summaryInfo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "summaryInfo", r.summaryInfo, "")
  }
	if r.criteriaStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "criteriaStartDate", r.criteriaStartDate, "")
  }
	if r.criteriaEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "criteriaEndDate", r.criteriaEndDate, "")
  }
	if r.adults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adults", r.adults, "")
  }
	if r.children != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "children", r.children, "")
  }
	if r.childAge != nil {
		t := *r.childAge
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "childAge", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "childAge", t, "multi")
		}
  }
	if r.bucket1Count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bucket1Count", r.bucket1Count, "")
  }
	if r.bucket2Count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bucket2Count", r.bucket2Count, "")
  }
	if r.bucket3Count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bucket3Count", r.bucket3Count, "")
  }
	if r.bucket4Count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bucket4Count", r.bucket4Count, "")
  }
	if r.bucket5Count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bucket5Count", r.bucket5Count, "")
  }
	if r.detailDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "detailDate", r.detailDate, "")
  }
	if r.blockId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blockId", r.blockId, "")
  }
	if r.blockIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blockIdType", r.blockIdType, "")
  }
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
  }
	if r.idExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idExtension", r.idExtension, "")
  }
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
  }
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
  }
	if r.ratePlanCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", r.ratePlanCode, "")
  }
	if r.effectiveRateEnd != nil {
		t := *r.effectiveRateEnd
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "effectiveRateEnd", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "effectiveRateEnd", t, "multi")
		}
  }
	if r.effectiveRateStart != nil {
		t := *r.effectiveRateStart
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "effectiveRateStart", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "effectiveRateStart", t, "multi")
		}
  }
	if r.roomType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", r.roomType, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetRecentlyAccessedReservationsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetRecentlyAccessedReservationsRequest) Authorization(authorization string) ReservationAPIGetRecentlyAccessedReservationsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetRecentlyAccessedReservationsRequest) XAppKey(xAppKey string) ReservationAPIGetRecentlyAccessedReservationsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetRecentlyAccessedReservationsRequest) XHotelid(xHotelid string) ReservationAPIGetRecentlyAccessedReservationsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIGetRecentlyAccessedReservationsRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetRecentlyAccessedReservationsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetRecentlyAccessedReservationsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetRecentlyAccessedReservationsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetRecentlyAccessedReservationsRequest) Execute() (*RecentlyAccessedReservations, *http.Response, error) {
	return r.ApiService.GetRecentlyAccessedReservationsExecute(r)
}

/*
GetRecentlyAccessedReservations Get recently accessed Reservations

This API will return all recently accessed Reservations. <p><strong>OperationId:</strong>getRecentlyAccessedReservations</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReservationAPIGetRecentlyAccessedReservationsRequest
*/
func (a *ReservationAPIService) GetRecentlyAccessedReservations(ctx context.Context) ReservationAPIGetRecentlyAccessedReservationsRequest {
	return ReservationAPIGetRecentlyAccessedReservationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RecentlyAccessedReservations
func (a *ReservationAPIService) GetRecentlyAccessedReservationsExecute(r ReservationAPIGetRecentlyAccessedReservationsRequest) (*RecentlyAccessedReservations, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RecentlyAccessedReservations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetRecentlyAccessedReservations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recentlyAccessedReservations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetReprintTicketsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	ticketId *string
	ticketIdType *string
	packageCode *[]string
	reservationProductId *string
	reservationProductIdType *string
	ticketNumberId *string
	ticketNumberIdType *string
	ticketIssueDate *[]string
	ticketConsumptionDate *[]string
	ticketRateCode *[]string
	ticketStatus *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetReprintTicketsRequest) Authorization(authorization string) ReservationAPIGetReprintTicketsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetReprintTicketsRequest) XAppKey(xAppKey string) ReservationAPIGetReprintTicketsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetReprintTicketsRequest) XHotelid(xHotelid string) ReservationAPIGetReprintTicketsRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetReprintTicketsRequest) TicketId(ticketId string) ReservationAPIGetReprintTicketsRequest {
	r.ticketId = &ticketId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIGetReprintTicketsRequest) TicketIdType(ticketIdType string) ReservationAPIGetReprintTicketsRequest {
	r.ticketIdType = &ticketIdType
	return r
}

// Package Code.
func (r ReservationAPIGetReprintTicketsRequest) PackageCode(packageCode []string) ReservationAPIGetReprintTicketsRequest {
	r.packageCode = &packageCode
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetReprintTicketsRequest) ReservationProductId(reservationProductId string) ReservationAPIGetReprintTicketsRequest {
	r.reservationProductId = &reservationProductId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIGetReprintTicketsRequest) ReservationProductIdType(reservationProductIdType string) ReservationAPIGetReprintTicketsRequest {
	r.reservationProductIdType = &reservationProductIdType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetReprintTicketsRequest) TicketNumberId(ticketNumberId string) ReservationAPIGetReprintTicketsRequest {
	r.ticketNumberId = &ticketNumberId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIGetReprintTicketsRequest) TicketNumberIdType(ticketNumberIdType string) ReservationAPIGetReprintTicketsRequest {
	r.ticketNumberIdType = &ticketNumberIdType
	return r
}

// Tickets issue date.
func (r ReservationAPIGetReprintTicketsRequest) TicketIssueDate(ticketIssueDate []string) ReservationAPIGetReprintTicketsRequest {
	r.ticketIssueDate = &ticketIssueDate
	return r
}

// Tickets comsumption date.
func (r ReservationAPIGetReprintTicketsRequest) TicketConsumptionDate(ticketConsumptionDate []string) ReservationAPIGetReprintTicketsRequest {
	r.ticketConsumptionDate = &ticketConsumptionDate
	return r
}

// The Rate Code to which tickets belong to.
func (r ReservationAPIGetReprintTicketsRequest) TicketRateCode(ticketRateCode []string) ReservationAPIGetReprintTicketsRequest {
	r.ticketRateCode = &ticketRateCode
	return r
}

// The Status Code for outbound WS call.
func (r ReservationAPIGetReprintTicketsRequest) TicketStatus(ticketStatus []string) ReservationAPIGetReprintTicketsRequest {
	r.ticketStatus = &ticketStatus
	return r
}

// External system code.
func (r ReservationAPIGetReprintTicketsRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetReprintTicketsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetReprintTicketsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetReprintTicketsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetReprintTicketsRequest) Execute() (*Tickets, *http.Response, error) {
	return r.ApiService.GetReprintTicketsExecute(r)
}

/*
GetReprintTickets Reprints Reservation tickets

You can use this API to reprint Reservation tickets. <p><strong>OperationId:</strong>getReprintTickets</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetReprintTicketsRequest
*/
func (a *ReservationAPIService) GetReprintTickets(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetReprintTicketsRequest {
	return ReservationAPIGetReprintTicketsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Tickets
func (a *ReservationAPIService) GetReprintTicketsExecute(r ReservationAPIGetReprintTicketsRequest) (*Tickets, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Tickets
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetReprintTickets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/tickets/reprint"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.ticketId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ticketId", r.ticketId, "")
  }
	if r.ticketIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ticketIdType", r.ticketIdType, "")
  }
	if r.packageCode != nil {
		t := *r.packageCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "packageCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "packageCode", t, "multi")
		}
  }
	if r.reservationProductId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationProductId", r.reservationProductId, "")
  }
	if r.reservationProductIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationProductIdType", r.reservationProductIdType, "")
  }
	if r.ticketNumberId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ticketNumberId", r.ticketNumberId, "")
  }
	if r.ticketNumberIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ticketNumberIdType", r.ticketNumberIdType, "")
  }
	if r.ticketIssueDate != nil {
		t := *r.ticketIssueDate
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ticketIssueDate", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ticketIssueDate", t, "multi")
		}
  }
	if r.ticketConsumptionDate != nil {
		t := *r.ticketConsumptionDate
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ticketConsumptionDate", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ticketConsumptionDate", t, "multi")
		}
  }
	if r.ticketRateCode != nil {
		t := *r.ticketRateCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ticketRateCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ticketRateCode", t, "multi")
		}
  }
	if r.ticketStatus != nil {
		t := *r.ticketStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ticketStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ticketStatus", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetReservationRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	fetchInstructions *[]string
	allowedActions *[]string
	markAsRecentlyAccessed *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetReservationRequest) Authorization(authorization string) ReservationAPIGetReservationRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetReservationRequest) XAppKey(xAppKey string) ReservationAPIGetReservationRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetReservationRequest) XHotelid(xHotelid string) ReservationAPIGetReservationRequest {
	r.xHotelid = &xHotelid
	return r
}

// Instruction to fetch whether the room was assigned/upgraded by AI. This will also include Reservation instruction.
func (r ReservationAPIGetReservationRequest) FetchInstructions(fetchInstructions []string) ReservationAPIGetReservationRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// Flag indicating whether the Enrollment is in progress or not for the Profile associated with this Reservation.
func (r ReservationAPIGetReservationRequest) AllowedActions(allowedActions []string) ReservationAPIGetReservationRequest {
	r.allowedActions = &allowedActions
	return r
}

// Marks the reservation as recently accessed.
func (r ReservationAPIGetReservationRequest) MarkAsRecentlyAccessed(markAsRecentlyAccessed bool) ReservationAPIGetReservationRequest {
	r.markAsRecentlyAccessed = &markAsRecentlyAccessed
	return r
}

// External system code.
func (r ReservationAPIGetReservationRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetReservationRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetReservationRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetReservationRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetReservationRequest) Execute() (*Reservation, *http.Response, error) {
	return r.ApiService.GetReservationExecute(r)
}

/*
GetReservation Get reservation by ID

Use this API to retrieve a reservation&apos;s detail such as guest&apos;s stay, arrival and departure dates, transportation, room and rate information, preferences, packages, and more using OPERA&apos;s reservationId.<p><strong>OperationId:</strong>getReservation</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetReservationRequest
*/
func (a *ReservationAPIService) GetReservation(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetReservationRequest {
	return ReservationAPIGetReservationRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Reservation
func (a *ReservationAPIService) GetReservationExecute(r ReservationAPIGetReservationRequest) (*Reservation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Reservation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetReservation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
  }
	if r.allowedActions != nil {
		t := *r.allowedActions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allowedActions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allowedActions", t, "multi")
		}
  }
	if r.markAsRecentlyAccessed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "markAsRecentlyAccessed", r.markAsRecentlyAccessed, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetReservationActivityLogRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	parameterName *[]string
	parameterValue *[]string
	activityGroup *string
	activityType *string
	fromDate *string
	toDate *string
	searchText *string
	userByIdsUserId *[]int32
	userForIdsUserId *[]int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetReservationActivityLogRequest) Authorization(authorization string) ReservationAPIGetReservationActivityLogRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetReservationActivityLogRequest) XAppKey(xAppKey string) ReservationAPIGetReservationActivityLogRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetReservationActivityLogRequest) XHotelid(xHotelid string) ReservationAPIGetReservationActivityLogRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ReservationAPIGetReservationActivityLogRequest) Limit(limit int32) ReservationAPIGetReservationActivityLogRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ReservationAPIGetReservationActivityLogRequest) Offset(offset int32) ReservationAPIGetReservationActivityLogRequest {
	r.offset = &offset
	return r
}

// Name of the parameter.
func (r ReservationAPIGetReservationActivityLogRequest) ParameterName(parameterName []string) ReservationAPIGetReservationActivityLogRequest {
	r.parameterName = &parameterName
	return r
}

// Value of the parameter.
func (r ReservationAPIGetReservationActivityLogRequest) ParameterValue(parameterValue []string) ReservationAPIGetReservationActivityLogRequest {
	r.parameterValue = &parameterValue
	return r
}

func (r ReservationAPIGetReservationActivityLogRequest) ActivityGroup(activityGroup string) ReservationAPIGetReservationActivityLogRequest {
	r.activityGroup = &activityGroup
	return r
}

func (r ReservationAPIGetReservationActivityLogRequest) ActivityType(activityType string) ReservationAPIGetReservationActivityLogRequest {
	r.activityType = &activityType
	return r
}

// Search from date for the user activity log.
func (r ReservationAPIGetReservationActivityLogRequest) FromDate(fromDate string) ReservationAPIGetReservationActivityLogRequest {
	r.fromDate = &fromDate
	return r
}

// Search to date for the user activity log.
func (r ReservationAPIGetReservationActivityLogRequest) ToDate(toDate string) ReservationAPIGetReservationActivityLogRequest {
	r.toDate = &toDate
	return r
}

// Search text for the user activity log.
func (r ReservationAPIGetReservationActivityLogRequest) SearchText(searchText string) ReservationAPIGetReservationActivityLogRequest {
	r.searchText = &searchText
	return r
}

func (r ReservationAPIGetReservationActivityLogRequest) UserByIdsUserId(userByIdsUserId []int32) ReservationAPIGetReservationActivityLogRequest {
	r.userByIdsUserId = &userByIdsUserId
	return r
}

func (r ReservationAPIGetReservationActivityLogRequest) UserForIdsUserId(userForIdsUserId []int32) ReservationAPIGetReservationActivityLogRequest {
	r.userForIdsUserId = &userForIdsUserId
	return r
}

// External system code.
func (r ReservationAPIGetReservationActivityLogRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetReservationActivityLogRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetReservationActivityLogRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetReservationActivityLogRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetReservationActivityLogRequest) Execute() (*ActivityLog, *http.Response, error) {
	return r.ApiService.GetReservationActivityLogExecute(r)
}

/*
GetReservationActivityLog Fetch reservation activity log

Use this API to get the activity log data of reservations being created and managed.<p><strong>OperationId:</strong>getReservationActivityLog</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetReservationActivityLogRequest
*/
func (a *ReservationAPIService) GetReservationActivityLog(ctx context.Context, hotelId string) ReservationAPIGetReservationActivityLogRequest {
	return ReservationAPIGetReservationActivityLogRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ActivityLog
func (a *ReservationAPIService) GetReservationActivityLogExecute(r ReservationAPIGetReservationActivityLogRequest) (*ActivityLog, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ActivityLog
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetReservationActivityLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/activityLog"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.parameterName != nil {
		t := *r.parameterName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parameterName", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parameterName", t, "multi")
		}
  }
	if r.parameterValue != nil {
		t := *r.parameterValue
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parameterValue", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parameterValue", t, "multi")
		}
  }
	if r.activityGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityGroup", r.activityGroup, "")
  }
	if r.activityType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "activityType", r.activityType, "")
  }
	if r.fromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromDate", r.fromDate, "")
  }
	if r.toDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toDate", r.toDate, "")
  }
	if r.searchText != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "searchText", r.searchText, "")
  }
	if r.userByIdsUserId != nil {
		t := *r.userByIdsUserId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "userByIdsUserId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "userByIdsUserId", t, "multi")
		}
  }
	if r.userForIdsUserId != nil {
		t := *r.userForIdsUserId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "userForIdsUserId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "userForIdsUserId", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetReservationAttachmentsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	webRegistrationCard *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetReservationAttachmentsRequest) Authorization(authorization string) ReservationAPIGetReservationAttachmentsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetReservationAttachmentsRequest) XAppKey(xAppKey string) ReservationAPIGetReservationAttachmentsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetReservationAttachmentsRequest) XHotelid(xHotelid string) ReservationAPIGetReservationAttachmentsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicator to retrieve e-Signed registration card attachments.
func (r ReservationAPIGetReservationAttachmentsRequest) WebRegistrationCard(webRegistrationCard bool) ReservationAPIGetReservationAttachmentsRequest {
	r.webRegistrationCard = &webRegistrationCard
	return r
}

// External system code.
func (r ReservationAPIGetReservationAttachmentsRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetReservationAttachmentsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetReservationAttachmentsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetReservationAttachmentsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetReservationAttachmentsRequest) Execute() (*ReservationAttachments, *http.Response, error) {
	return r.ApiService.GetReservationAttachmentsExecute(r)
}

/*
GetReservationAttachments Get Reservation attachments

Get Reservation attachments <p><strong>OperationId:</strong>getReservationAttachments</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetReservationAttachmentsRequest
*/
func (a *ReservationAPIService) GetReservationAttachments(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetReservationAttachmentsRequest {
	return ReservationAPIGetReservationAttachmentsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationAttachments
func (a *ReservationAPIService) GetReservationAttachmentsExecute(r ReservationAPIGetReservationAttachmentsRequest) (*ReservationAttachments, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationAttachments
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetReservationAttachments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/attachments"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.webRegistrationCard != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "webRegistrationCard", r.webRegistrationCard, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetReservationByExtIdRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationExternalId string
	externalSystemCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	fetchInstructions *[]string
	allowedActions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetReservationByExtIdRequest) Authorization(authorization string) ReservationAPIGetReservationByExtIdRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetReservationByExtIdRequest) XAppKey(xAppKey string) ReservationAPIGetReservationByExtIdRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetReservationByExtIdRequest) XHotelid(xHotelid string) ReservationAPIGetReservationByExtIdRequest {
	r.xHotelid = &xHotelid
	return r
}

// Instruction to fetch whether the room was assigned/upgraded by AI. This will also include Reservation instruction.
func (r ReservationAPIGetReservationByExtIdRequest) FetchInstructions(fetchInstructions []string) ReservationAPIGetReservationByExtIdRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// Flag indicating whether the Enrollment is in progress or not for the Profile associated with this Reservation.
func (r ReservationAPIGetReservationByExtIdRequest) AllowedActions(allowedActions []string) ReservationAPIGetReservationByExtIdRequest {
	r.allowedActions = &allowedActions
	return r
}

// External system code.
func (r ReservationAPIGetReservationByExtIdRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetReservationByExtIdRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetReservationByExtIdRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetReservationByExtIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetReservationByExtIdRequest) Execute() (*Reservation, *http.Response, error) {
	return r.ApiService.GetReservationByExtIdExecute(r)
}

/*
GetReservationByExtId Get reservation by external ID

Use this API to get a reservation using the external reference ID associated with the reservation such as a Central Reservation System confirmation number or booking engine confirmation number.<p><strong>OperationId:</strong>getReservationByExtId</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationExternalId External reservation Id.
 @param externalSystemCode Code to identify the external system from which the request is coming. This is the ExternalSystem ID used to exchange information between OPERA and the external system.
 @param hotelId Unique ID of the hotel where reservation is searched based on external reservation Id.
 @return ReservationAPIGetReservationByExtIdRequest
*/
func (a *ReservationAPIService) GetReservationByExtId(ctx context.Context, reservationExternalId string, externalSystemCode string, hotelId string) ReservationAPIGetReservationByExtIdRequest {
	return ReservationAPIGetReservationByExtIdRequest{
		ApiService: a,
		ctx: ctx,
		reservationExternalId: reservationExternalId,
		externalSystemCode: externalSystemCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Reservation
func (a *ReservationAPIService) GetReservationByExtIdExecute(r ReservationAPIGetReservationByExtIdRequest) (*Reservation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Reservation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetReservationByExtId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationExternalId"+"}", url.PathEscape(parameterValueToString(r.reservationExternalId, "reservationExternalId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalSystemCode"+"}", url.PathEscape(parameterValueToString(r.externalSystemCode, "externalSystemCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationExternalId) < 1 {
		return localVarReturnValue, nil, reportError("reservationExternalId must have at least 1 elements")
	}
	if strlen(r.reservationExternalId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationExternalId must have less than 2000 elements")
	}
	if strlen(r.externalSystemCode) < 1 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have at least 1 elements")
	}
	if strlen(r.externalSystemCode) > 2000 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
  }
	if r.allowedActions != nil {
		t := *r.allowedActions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allowedActions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allowedActions", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetReservationExcludedPreferencesRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	preferenceType *string
	preferenceCode *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetReservationExcludedPreferencesRequest) Authorization(authorization string) ReservationAPIGetReservationExcludedPreferencesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetReservationExcludedPreferencesRequest) XAppKey(xAppKey string) ReservationAPIGetReservationExcludedPreferencesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetReservationExcludedPreferencesRequest) XHotelid(xHotelid string) ReservationAPIGetReservationExcludedPreferencesRequest {
	r.xHotelid = &xHotelid
	return r
}

// The preference type for which the excluded preference search will be performed.
func (r ReservationAPIGetReservationExcludedPreferencesRequest) PreferenceType(preferenceType string) ReservationAPIGetReservationExcludedPreferencesRequest {
	r.preferenceType = &preferenceType
	return r
}

// The preference code for which the excluded preference search will be performed.
func (r ReservationAPIGetReservationExcludedPreferencesRequest) PreferenceCode(preferenceCode string) ReservationAPIGetReservationExcludedPreferencesRequest {
	r.preferenceCode = &preferenceCode
	return r
}

// External system code.
func (r ReservationAPIGetReservationExcludedPreferencesRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetReservationExcludedPreferencesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetReservationExcludedPreferencesRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetReservationExcludedPreferencesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetReservationExcludedPreferencesRequest) Execute() (*ReservationExcludedPreferences, *http.Response, error) {
	return r.ApiService.GetReservationExcludedPreferencesExecute(r)
}

/*
GetReservationExcludedPreferences Fetch Reservation excluded preferences

Get the Reservation excluded preferences. <p><strong>OperationId:</strong>getReservationExcludedPreferences</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetReservationExcludedPreferencesRequest
*/
func (a *ReservationAPIService) GetReservationExcludedPreferences(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetReservationExcludedPreferencesRequest {
	return ReservationAPIGetReservationExcludedPreferencesRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationExcludedPreferences
func (a *ReservationAPIService) GetReservationExcludedPreferencesExecute(r ReservationAPIGetReservationExcludedPreferencesRequest) (*ReservationExcludedPreferences, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationExcludedPreferences
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetReservationExcludedPreferences")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/excludedPreferences"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.preferenceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preferenceType", r.preferenceType, "")
  }
	if r.preferenceCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preferenceCode", r.preferenceCode, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetReservationIndicatorsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationId *[]string
	checkInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetReservationIndicatorsRequest) Authorization(authorization string) ReservationAPIGetReservationIndicatorsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetReservationIndicatorsRequest) XAppKey(xAppKey string) ReservationAPIGetReservationIndicatorsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetReservationIndicatorsRequest) XHotelid(xHotelid string) ReservationAPIGetReservationIndicatorsRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetReservationIndicatorsRequest) ReservationId(reservationId []string) ReservationAPIGetReservationIndicatorsRequest {
	r.reservationId = &reservationId
	return r
}

// Simple type that corresponds to check reservation instructions.
func (r ReservationAPIGetReservationIndicatorsRequest) CheckInstructions(checkInstructions []string) ReservationAPIGetReservationIndicatorsRequest {
	r.checkInstructions = &checkInstructions
	return r
}

// External system code.
func (r ReservationAPIGetReservationIndicatorsRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetReservationIndicatorsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetReservationIndicatorsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetReservationIndicatorsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetReservationIndicatorsRequest) Execute() (*CheckReservationsDetails, *http.Response, error) {
	return r.ApiService.GetReservationIndicatorsExecute(r)
}

/*
GetReservationIndicators Get Reservation indicators

Get Reservation indicators. <p><strong>OperationId:</strong>getReservationIndicators</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReservationAPIGetReservationIndicatorsRequest
*/
func (a *ReservationAPIService) GetReservationIndicators(ctx context.Context) ReservationAPIGetReservationIndicatorsRequest {
	return ReservationAPIGetReservationIndicatorsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CheckReservationsDetails
func (a *ReservationAPIService) GetReservationIndicatorsExecute(r ReservationAPIGetReservationIndicatorsRequest) (*CheckReservationsDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CheckReservationsDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetReservationIndicators")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reservations/indicators"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.reservationId != nil {
		t := *r.reservationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reservationId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reservationId", t, "multi")
		}
  }
	if r.checkInstructions != nil {
		t := *r.checkInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "checkInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "checkInstructions", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetReservationLocatorsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetReservationLocatorsRequest) Authorization(authorization string) ReservationAPIGetReservationLocatorsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetReservationLocatorsRequest) XAppKey(xAppKey string) ReservationAPIGetReservationLocatorsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetReservationLocatorsRequest) XHotelid(xHotelid string) ReservationAPIGetReservationLocatorsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIGetReservationLocatorsRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetReservationLocatorsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetReservationLocatorsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetReservationLocatorsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetReservationLocatorsRequest) Execute() (*ReservationLocators, *http.Response, error) {
	return r.ApiService.GetReservationLocatorsExecute(r)
}

/*
GetReservationLocators Fetch Reservation Guest Locator

Get the Guest locater for a Reservation. <p><strong>OperationId:</strong>getReservationLocators</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetReservationLocatorsRequest
*/
func (a *ReservationAPIService) GetReservationLocators(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetReservationLocatorsRequest {
	return ReservationAPIGetReservationLocatorsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationLocators
func (a *ReservationAPIService) GetReservationLocatorsExecute(r ReservationAPIGetReservationLocatorsRequest) (*ReservationLocators, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationLocators
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetReservationLocators")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/guestLocators"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetReservationPoliciesRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	fetchDepositPolicies *bool
	fetchCancellationPolicies *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetReservationPoliciesRequest) Authorization(authorization string) ReservationAPIGetReservationPoliciesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetReservationPoliciesRequest) XAppKey(xAppKey string) ReservationAPIGetReservationPoliciesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetReservationPoliciesRequest) XHotelid(xHotelid string) ReservationAPIGetReservationPoliciesRequest {
	r.xHotelid = &xHotelid
	return r
}

// A flag which instructs whether the deposit policies needs to be fetched.
func (r ReservationAPIGetReservationPoliciesRequest) FetchDepositPolicies(fetchDepositPolicies bool) ReservationAPIGetReservationPoliciesRequest {
	r.fetchDepositPolicies = &fetchDepositPolicies
	return r
}

// A flag which instructs whether the cancel policies needs to be fetched.
func (r ReservationAPIGetReservationPoliciesRequest) FetchCancellationPolicies(fetchCancellationPolicies bool) ReservationAPIGetReservationPoliciesRequest {
	r.fetchCancellationPolicies = &fetchCancellationPolicies
	return r
}

// External system code.
func (r ReservationAPIGetReservationPoliciesRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetReservationPoliciesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetReservationPoliciesRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetReservationPoliciesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetReservationPoliciesRequest) Execute() (*ReservationPolicies, *http.Response, error) {
	return r.ApiService.GetReservationPoliciesExecute(r)
}

/*
GetReservationPolicies Get reservation cancel and deposit policies

Use this API to get cancelation and deposit policies for a given reservation.<p><strong>OperationId:</strong>getReservationPolicies</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetReservationPoliciesRequest
*/
func (a *ReservationAPIService) GetReservationPolicies(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetReservationPoliciesRequest {
	return ReservationAPIGetReservationPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationPolicies
func (a *ReservationAPIService) GetReservationPoliciesExecute(r ReservationAPIGetReservationPoliciesRequest) (*ReservationPolicies, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationPolicies
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetReservationPolicies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/policies"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.fetchDepositPolicies != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fetchDepositPolicies", r.fetchDepositPolicies, "")
  }
	if r.fetchCancellationPolicies != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fetchCancellationPolicies", r.fetchCancellationPolicies, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetReservationPreferenceRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	preferenceTypeCode *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetReservationPreferenceRequest) Authorization(authorization string) ReservationAPIGetReservationPreferenceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetReservationPreferenceRequest) XAppKey(xAppKey string) ReservationAPIGetReservationPreferenceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetReservationPreferenceRequest) XHotelid(xHotelid string) ReservationAPIGetReservationPreferenceRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r ReservationAPIGetReservationPreferenceRequest) PreferenceTypeCode(preferenceTypeCode []string) ReservationAPIGetReservationPreferenceRequest {
	r.preferenceTypeCode = &preferenceTypeCode
	return r
}

// External system code.
func (r ReservationAPIGetReservationPreferenceRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetReservationPreferenceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetReservationPreferenceRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetReservationPreferenceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetReservationPreferenceRequest) Execute() (*ReservationPreference, *http.Response, error) {
	return r.ApiService.GetReservationPreferenceExecute(r)
}

/*
GetReservationPreference Get Reservation Preferences

You can use this API to retrieve the preferences that exist on a reservation. <p><strong>OperationId:</strong>getReservationPreference</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetReservationPreferenceRequest
*/
func (a *ReservationAPIService) GetReservationPreference(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetReservationPreferenceRequest {
	return ReservationAPIGetReservationPreferenceRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationPreference
func (a *ReservationAPIService) GetReservationPreferenceExecute(r ReservationAPIGetReservationPreferenceRequest) (*ReservationPreference, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationPreference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetReservationPreference")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/preferences"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.preferenceTypeCode != nil {
		t := *r.preferenceTypeCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "preferenceTypeCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "preferenceTypeCode", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetReservationUpsellInfoRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetReservationUpsellInfoRequest) Authorization(authorization string) ReservationAPIGetReservationUpsellInfoRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetReservationUpsellInfoRequest) XAppKey(xAppKey string) ReservationAPIGetReservationUpsellInfoRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetReservationUpsellInfoRequest) XHotelid(xHotelid string) ReservationAPIGetReservationUpsellInfoRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIGetReservationUpsellInfoRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetReservationUpsellInfoRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetReservationUpsellInfoRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetReservationUpsellInfoRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetReservationUpsellInfoRequest) Execute() (*ReservationUpsellInfo, *http.Response, error) {
	return r.ApiService.GetReservationUpsellInfoExecute(r)
}

/*
GetReservationUpsellInfo Get available Upsell offers

Use this API to retrieve the available upsell offers for a specific reservation. If no upsell options are configured for this hotel or available for this reservation, an appropriate error will be returned. <p><strong>OperationId:</strong>getReservationUpsellInfo</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetReservationUpsellInfoRequest
*/
func (a *ReservationAPIService) GetReservationUpsellInfo(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetReservationUpsellInfoRequest {
	return ReservationAPIGetReservationUpsellInfoRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationUpsellInfo
func (a *ReservationAPIService) GetReservationUpsellInfoExecute(r ReservationAPIGetReservationUpsellInfoRequest) (*ReservationUpsellInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationUpsellInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetReservationUpsellInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/upsell"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetReservationsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	recentlyAccessed *bool
	limit *int32
	offset *int32
	searchType *string
	hotelIds *[]string
	text *string
	reservationIdList *[]string
	confirmationNumberList *[]string
	cancellationNumberList *[]string
	externalReferenceIds *[]string
	externalSystemCodes *[]string
	arrivalEndDate *string
	arrivalStartDate *string
	departureEndDate *string
	departureStartDate *string
	expectedArrivalStartTime *string
	expectedArrivalEndTime *string
	expectedReturnEndTime *string
	expectedReturnStartTime *string
	companyNames *[]string
	sourceNames *[]string
	travelAgentNames *[]string
	groupNames *[]string
	travelAgentIds *[]string
	companyIds *[]string
	sourceIds *[]string
	contactIds *[]string
	groupIds *[]string
	billingContactIds *[]string
	profileIds *[]string
	membershipCardNumber *string
	membershipLevels *[]string
	membershipTypes *[]string
	surname *string
	givenName *string
	anyVIPStatus *bool
	vipCodes *[]string
	guaranteeCode *string
	paymentMethod *string
	discountApplied *bool
	user *[]string
	createdBy *string
	cancelledByList *[]string
	cancelledOn *string
	ratePlanCodes *[]string
	sourceCodes *[]string
	marketCodes *[]string
	excludeBlockReservations *bool
	blockName *string
	blockIds *[]string
	blockCodes *[]string
	customReference *string
	recordLocator *string
	orderBy *[]string
	sortOrder *[]string
	roomAssignedOnly *bool
	roomUnassignedOnly *bool
	roomId *string
	roomType *[]string
	roomFeatures *[]string
	roomSpecials *[]string
	roomSmokingPreference *string
	roomFloorPreferences *[]string
	housekeepingRoomStatuses *[]string
	roomClasses *[]string
	roomRangeFrom *string
	roomRangeTo *string
	communication *string
	fetchInstructions *[]string
	allowedReservationActions *[]string
	allowPreRegistration *bool
	hasDepositBalance *bool
	hasOpenBalance *bool
	hasOpenFolio *bool
	includeScheduledCheckOut *bool
	linkedOnly *bool
	unlinkedOnly *bool
	actualArrivals *bool
	actualDepartures *bool
	complimentaryReservations *bool
	dayOfArrivalCancels *bool
	dayUse *bool
	earlyDepartures *bool
	expectedArrivals *bool
	expectedDepartures *bool
	extendedStays *bool
	houseUseReservations *bool
	stayovers *bool
	stayDate *string
	roomRoutingId *string
	excludePseudoRoomReservations *bool
	excludeReservationIds *[]string
	excludeVIPStatusCodes *[]string
	excludeSpecials *[]string
	excludeFloorPreferences *[]string
	excludeAdvanceCheckedIn *bool
	excludeRoomFeatures *[]string
	playerId *string
	gamingBalanceFrom *float32
	gamingBalanceTo *float32
	compAccountingBalanceFrom *float32
	compAccountingBalanceTo *float32
	searchTypes *[]string
	reservationStatuses *[]string
	transportationCodes *[]string
	roomReadyStatuses *[]string
	checkoutMessageReceived *bool
	optedForCommunication *bool
	createdOn *string
	stayOn *string
	contactNames *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetReservationsRequest) Authorization(authorization string) ReservationAPIGetReservationsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetReservationsRequest) XAppKey(xAppKey string) ReservationAPIGetReservationsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetReservationsRequest) XHotelid(xHotelid string) ReservationAPIGetReservationsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Mark this reservation as recently accessed.
func (r ReservationAPIGetReservationsRequest) RecentlyAccessed(recentlyAccessed bool) ReservationAPIGetReservationsRequest {
	r.recentlyAccessed = &recentlyAccessed
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ReservationAPIGetReservationsRequest) Limit(limit int32) ReservationAPIGetReservationsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ReservationAPIGetReservationsRequest) Offset(offset int32) ReservationAPIGetReservationsRequest {
	r.offset = &offset
	return r
}

// Represents Reservation search type Player Snapshot.
func (r ReservationAPIGetReservationsRequest) SearchType(searchType string) ReservationAPIGetReservationsRequest {
	r.searchType = &searchType
	return r
}

// List of Hotels to support searches with multiple resorts for which traces are to be fetched.
func (r ReservationAPIGetReservationsRequest) HotelIds(hotelIds []string) ReservationAPIGetReservationsRequest {
	r.hotelIds = &hotelIds
	return r
}

// Free form text field for searching all reservation fields
func (r ReservationAPIGetReservationsRequest) Text(text string) ReservationAPIGetReservationsRequest {
	r.text = &text
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetReservationsRequest) ReservationIdList(reservationIdList []string) ReservationAPIGetReservationsRequest {
	r.reservationIdList = &reservationIdList
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetReservationsRequest) ConfirmationNumberList(confirmationNumberList []string) ReservationAPIGetReservationsRequest {
	r.confirmationNumberList = &confirmationNumberList
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetReservationsRequest) CancellationNumberList(cancellationNumberList []string) ReservationAPIGetReservationsRequest {
	r.cancellationNumberList = &cancellationNumberList
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetReservationsRequest) ExternalReferenceIds(externalReferenceIds []string) ReservationAPIGetReservationsRequest {
	r.externalReferenceIds = &externalReferenceIds
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ReservationAPIGetReservationsRequest) ExternalSystemCodes(externalSystemCodes []string) ReservationAPIGetReservationsRequest {
	r.externalSystemCodes = &externalSystemCodes
	return r
}

// The ending value of the date range.
func (r ReservationAPIGetReservationsRequest) ArrivalEndDate(arrivalEndDate string) ReservationAPIGetReservationsRequest {
	r.arrivalEndDate = &arrivalEndDate
	return r
}

// The starting value of the date range.
func (r ReservationAPIGetReservationsRequest) ArrivalStartDate(arrivalStartDate string) ReservationAPIGetReservationsRequest {
	r.arrivalStartDate = &arrivalStartDate
	return r
}

// The ending value of the date range.
func (r ReservationAPIGetReservationsRequest) DepartureEndDate(departureEndDate string) ReservationAPIGetReservationsRequest {
	r.departureEndDate = &departureEndDate
	return r
}

// The starting value of the date range.
func (r ReservationAPIGetReservationsRequest) DepartureStartDate(departureStartDate string) ReservationAPIGetReservationsRequest {
	r.departureStartDate = &departureStartDate
	return r
}

// The ending value of the time span.
func (r ReservationAPIGetReservationsRequest) ExpectedArrivalStartTime(expectedArrivalStartTime string) ReservationAPIGetReservationsRequest {
	r.expectedArrivalStartTime = &expectedArrivalStartTime
	return r
}

// The starting value of the time span.
func (r ReservationAPIGetReservationsRequest) ExpectedArrivalEndTime(expectedArrivalEndTime string) ReservationAPIGetReservationsRequest {
	r.expectedArrivalEndTime = &expectedArrivalEndTime
	return r
}

// The ending value of the time span.
func (r ReservationAPIGetReservationsRequest) ExpectedReturnEndTime(expectedReturnEndTime string) ReservationAPIGetReservationsRequest {
	r.expectedReturnEndTime = &expectedReturnEndTime
	return r
}

// The starting value of the time span.
func (r ReservationAPIGetReservationsRequest) ExpectedReturnStartTime(expectedReturnStartTime string) ReservationAPIGetReservationsRequest {
	r.expectedReturnStartTime = &expectedReturnStartTime
	return r
}

// Attached profile name
func (r ReservationAPIGetReservationsRequest) CompanyNames(companyNames []string) ReservationAPIGetReservationsRequest {
	r.companyNames = &companyNames
	return r
}

// Attached profile name
func (r ReservationAPIGetReservationsRequest) SourceNames(sourceNames []string) ReservationAPIGetReservationsRequest {
	r.sourceNames = &sourceNames
	return r
}

// Attached profile name
func (r ReservationAPIGetReservationsRequest) TravelAgentNames(travelAgentNames []string) ReservationAPIGetReservationsRequest {
	r.travelAgentNames = &travelAgentNames
	return r
}

// Attached profile name
func (r ReservationAPIGetReservationsRequest) GroupNames(groupNames []string) ReservationAPIGetReservationsRequest {
	r.groupNames = &groupNames
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetReservationsRequest) TravelAgentIds(travelAgentIds []string) ReservationAPIGetReservationsRequest {
	r.travelAgentIds = &travelAgentIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetReservationsRequest) CompanyIds(companyIds []string) ReservationAPIGetReservationsRequest {
	r.companyIds = &companyIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetReservationsRequest) SourceIds(sourceIds []string) ReservationAPIGetReservationsRequest {
	r.sourceIds = &sourceIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetReservationsRequest) ContactIds(contactIds []string) ReservationAPIGetReservationsRequest {
	r.contactIds = &contactIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetReservationsRequest) GroupIds(groupIds []string) ReservationAPIGetReservationsRequest {
	r.groupIds = &groupIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetReservationsRequest) BillingContactIds(billingContactIds []string) ReservationAPIGetReservationsRequest {
	r.billingContactIds = &billingContactIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetReservationsRequest) ProfileIds(profileIds []string) ReservationAPIGetReservationsRequest {
	r.profileIds = &profileIds
	return r
}

// Membership ID criteria.
func (r ReservationAPIGetReservationsRequest) MembershipCardNumber(membershipCardNumber string) ReservationAPIGetReservationsRequest {
	r.membershipCardNumber = &membershipCardNumber
	return r
}

func (r ReservationAPIGetReservationsRequest) MembershipLevels(membershipLevels []string) ReservationAPIGetReservationsRequest {
	r.membershipLevels = &membershipLevels
	return r
}

func (r ReservationAPIGetReservationsRequest) MembershipTypes(membershipTypes []string) ReservationAPIGetReservationsRequest {
	r.membershipTypes = &membershipTypes
	return r
}

// Family name, last name.
func (r ReservationAPIGetReservationsRequest) Surname(surname string) ReservationAPIGetReservationsRequest {
	r.surname = &surname
	return r
}

// Given name, first name or names
func (r ReservationAPIGetReservationsRequest) GivenName(givenName string) ReservationAPIGetReservationsRequest {
	r.givenName = &givenName
	return r
}

// VIP status of the customer.
func (r ReservationAPIGetReservationsRequest) AnyVIPStatus(anyVIPStatus bool) ReservationAPIGetReservationsRequest {
	r.anyVIPStatus = &anyVIPStatus
	return r
}

// VIP status of the customer.
func (r ReservationAPIGetReservationsRequest) VipCodes(vipCodes []string) ReservationAPIGetReservationsRequest {
	r.vipCodes = &vipCodes
	return r
}

// Fetches the reservation having Guarantee Code(Reservation Type) supplied here.
func (r ReservationAPIGetReservationsRequest) GuaranteeCode(guaranteeCode string) ReservationAPIGetReservationsRequest {
	r.guaranteeCode = &guaranteeCode
	return r
}

// Fetches the reservation having method of payment supplied here.
func (r ReservationAPIGetReservationsRequest) PaymentMethod(paymentMethod string) ReservationAPIGetReservationsRequest {
	r.paymentMethod = &paymentMethod
	return r
}

// Fetches the reservation for which discount is applied
func (r ReservationAPIGetReservationsRequest) DiscountApplied(discountApplied bool) ReservationAPIGetReservationsRequest {
	r.discountApplied = &discountApplied
	return r
}

func (r ReservationAPIGetReservationsRequest) User(user []string) ReservationAPIGetReservationsRequest {
	r.user = &user
	return r
}

// Fetches reservation created by specified user. If both CreatedByUsers and CreatedBy is specified, CreatedByUsers will take precedence.
func (r ReservationAPIGetReservationsRequest) CreatedBy(createdBy string) ReservationAPIGetReservationsRequest {
	r.createdBy = &createdBy
	return r
}

// Fetches reservations cancelled by list of users.
func (r ReservationAPIGetReservationsRequest) CancelledByList(cancelledByList []string) ReservationAPIGetReservationsRequest {
	r.cancelledByList = &cancelledByList
	return r
}

// Fetches the reservations which are cancelled on a specific date.
func (r ReservationAPIGetReservationsRequest) CancelledOn(cancelledOn string) ReservationAPIGetReservationsRequest {
	r.cancelledOn = &cancelledOn
	return r
}

func (r ReservationAPIGetReservationsRequest) RatePlanCodes(ratePlanCodes []string) ReservationAPIGetReservationsRequest {
	r.ratePlanCodes = &ratePlanCodes
	return r
}

func (r ReservationAPIGetReservationsRequest) SourceCodes(sourceCodes []string) ReservationAPIGetReservationsRequest {
	r.sourceCodes = &sourceCodes
	return r
}

func (r ReservationAPIGetReservationsRequest) MarketCodes(marketCodes []string) ReservationAPIGetReservationsRequest {
	r.marketCodes = &marketCodes
	return r
}

// If true the search result will exclude the blocks reservations.
func (r ReservationAPIGetReservationsRequest) ExcludeBlockReservations(excludeBlockReservations bool) ReservationAPIGetReservationsRequest {
	r.excludeBlockReservations = &excludeBlockReservations
	return r
}

// The Name of the block that is attached to the reservation.
func (r ReservationAPIGetReservationsRequest) BlockName(blockName string) ReservationAPIGetReservationsRequest {
	r.blockName = &blockName
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetReservationsRequest) BlockIds(blockIds []string) ReservationAPIGetReservationsRequest {
	r.blockIds = &blockIds
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetReservationsRequest) BlockCodes(blockCodes []string) ReservationAPIGetReservationsRequest {
	r.blockCodes = &blockCodes
	return r
}

// Custom reference
func (r ReservationAPIGetReservationsRequest) CustomReference(customReference string) ReservationAPIGetReservationsRequest {
	r.customReference = &customReference
	return r
}

// GDS Record Locator for reservation.
func (r ReservationAPIGetReservationsRequest) RecordLocator(recordLocator string) ReservationAPIGetReservationsRequest {
	r.recordLocator = &recordLocator
	return r
}

func (r ReservationAPIGetReservationsRequest) OrderBy(orderBy []string) ReservationAPIGetReservationsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ReservationAPIGetReservationsRequest) SortOrder(sortOrder []string) ReservationAPIGetReservationsRequest {
	r.sortOrder = &sortOrder
	return r
}

// Indicator to query reservations which have a room number assigned.
func (r ReservationAPIGetReservationsRequest) RoomAssignedOnly(roomAssignedOnly bool) ReservationAPIGetReservationsRequest {
	r.roomAssignedOnly = &roomAssignedOnly
	return r
}

// Indicator to query reservations which does not have a room number assigned.
func (r ReservationAPIGetReservationsRequest) RoomUnassignedOnly(roomUnassignedOnly bool) ReservationAPIGetReservationsRequest {
	r.roomUnassignedOnly = &roomUnassignedOnly
	return r
}

// Room number of the reservation to search by.
func (r ReservationAPIGetReservationsRequest) RoomId(roomId string) ReservationAPIGetReservationsRequest {
	r.roomId = &roomId
	return r
}

// Room Type.
func (r ReservationAPIGetReservationsRequest) RoomType(roomType []string) ReservationAPIGetReservationsRequest {
	r.roomType = &roomType
	return r
}

// A code representing a room feature.
func (r ReservationAPIGetReservationsRequest) RoomFeatures(roomFeatures []string) ReservationAPIGetReservationsRequest {
	r.roomFeatures = &roomFeatures
	return r
}

// Preference value for display purposes.
func (r ReservationAPIGetReservationsRequest) RoomSpecials(roomSpecials []string) ReservationAPIGetReservationsRequest {
	r.roomSpecials = &roomSpecials
	return r
}

// Preference value for display purposes.
func (r ReservationAPIGetReservationsRequest) RoomSmokingPreference(roomSmokingPreference string) ReservationAPIGetReservationsRequest {
	r.roomSmokingPreference = &roomSmokingPreference
	return r
}

// Preference value for display purposes.
func (r ReservationAPIGetReservationsRequest) RoomFloorPreferences(roomFloorPreferences []string) ReservationAPIGetReservationsRequest {
	r.roomFloorPreferences = &roomFloorPreferences
	return r
}

// Simple type for room status instructions to be used in requests for fetching housekeeping rooms. Valid status values are Clean, Dirty, Pickup, Inspected, OutOfOrder, OutOfService.
func (r ReservationAPIGetReservationsRequest) HousekeepingRoomStatuses(housekeepingRoomStatuses []string) ReservationAPIGetReservationsRequest {
	r.housekeepingRoomStatuses = &housekeepingRoomStatuses
	return r
}

func (r ReservationAPIGetReservationsRequest) RoomClasses(roomClasses []string) ReservationAPIGetReservationsRequest {
	r.roomClasses = &roomClasses
	return r
}

func (r ReservationAPIGetReservationsRequest) RoomRangeFrom(roomRangeFrom string) ReservationAPIGetReservationsRequest {
	r.roomRangeFrom = &roomRangeFrom
	return r
}

func (r ReservationAPIGetReservationsRequest) RoomRangeTo(roomRangeTo string) ReservationAPIGetReservationsRequest {
	r.roomRangeTo = &roomRangeTo
	return r
}

// Filter by the last digits of a reservation&#39;s phone number.
func (r ReservationAPIGetReservationsRequest) Communication(communication string) ReservationAPIGetReservationsRequest {
	r.communication = &communication
	return r
}

// Instruction to fetch whether the room was assigned/upgraded by AI. This will also include Reservation instruction.
func (r ReservationAPIGetReservationsRequest) FetchInstructions(fetchInstructions []string) ReservationAPIGetReservationsRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// Flag indicating whether the Enrollment is in progress or not for the Profile associated with this Reservation.
func (r ReservationAPIGetReservationsRequest) AllowedReservationActions(allowedReservationActions []string) ReservationAPIGetReservationsRequest {
	r.allowedReservationActions = &allowedReservationActions
	return r
}

// Flag containing true or false value for reservation to be eligible for prior check in by guest using mobile device. Pass the &#39;true&#39; or &#39;false&#39; values when creating / modifying reservation to indicate whether a reservation is eligible for mobile check in yes / no. Upon fetch, the current state of the flag will show true or false.
func (r ReservationAPIGetReservationsRequest) AllowPreRegistration(allowPreRegistration bool) ReservationAPIGetReservationsRequest {
	r.allowPreRegistration = &allowPreRegistration
	return r
}

// Indicates that only reservations with deposit balance should be expected from the result.
func (r ReservationAPIGetReservationsRequest) HasDepositBalance(hasDepositBalance bool) ReservationAPIGetReservationsRequest {
	r.hasDepositBalance = &hasDepositBalance
	return r
}

// Indicates that only reservations with open balance should be expected from the result.
func (r ReservationAPIGetReservationsRequest) HasOpenBalance(hasOpenBalance bool) ReservationAPIGetReservationsRequest {
	r.hasOpenBalance = &hasOpenBalance
	return r
}

// Indicates that only reservations with open folio should be expected from the result.
func (r ReservationAPIGetReservationsRequest) HasOpenFolio(hasOpenFolio bool) ReservationAPIGetReservationsRequest {
	r.hasOpenFolio = &hasOpenFolio
	return r
}

// Criteria that indicates whether to scheduled checkouts or not.
func (r ReservationAPIGetReservationsRequest) IncludeScheduledCheckOut(includeScheduledCheckOut bool) ReservationAPIGetReservationsRequest {
	r.includeScheduledCheckOut = &includeScheduledCheckOut
	return r
}

// Indicates that only linked reservations should be expected from the result.
func (r ReservationAPIGetReservationsRequest) LinkedOnly(linkedOnly bool) ReservationAPIGetReservationsRequest {
	r.linkedOnly = &linkedOnly
	return r
}

// Indicates that only unlinked reservations should be expected from the result.
func (r ReservationAPIGetReservationsRequest) UnlinkedOnly(unlinkedOnly bool) ReservationAPIGetReservationsRequest {
	r.unlinkedOnly = &unlinkedOnly
	return r
}

// Indicates if reservations which have already arrived on the Search Date is required.
func (r ReservationAPIGetReservationsRequest) ActualArrivals(actualArrivals bool) ReservationAPIGetReservationsRequest {
	r.actualArrivals = &actualArrivals
	return r
}

// Indicates if reservations which were expected to depart on the Search Date and have already checked, is required.
func (r ReservationAPIGetReservationsRequest) ActualDepartures(actualDepartures bool) ReservationAPIGetReservationsRequest {
	r.actualDepartures = &actualDepartures
	return r
}

// Indicates if reservations where rate codes are marked as Complimentary Rates , is required. This flag should be used in conjunction with the Arrivals, Departures or StayOvers criteria.
func (r ReservationAPIGetReservationsRequest) ComplimentaryReservations(complimentaryReservations bool) ReservationAPIGetReservationsRequest {
	r.complimentaryReservations = &complimentaryReservations
	return r
}

// Indicates if reservations which have cancelled on the Search Date which is also the day of arrival is required.
func (r ReservationAPIGetReservationsRequest) DayOfArrivalCancels(dayOfArrivalCancels bool) ReservationAPIGetReservationsRequest {
	r.dayOfArrivalCancels = &dayOfArrivalCancels
	return r
}

// Indicates if reservations which are day use reservation on the Search Date, is required.
func (r ReservationAPIGetReservationsRequest) DayUse(dayUse bool) ReservationAPIGetReservationsRequest {
	r.dayUse = &dayUse
	return r
}

// Indicates if reservations which checked out early on the Search Date, is required.
func (r ReservationAPIGetReservationsRequest) EarlyDepartures(earlyDepartures bool) ReservationAPIGetReservationsRequest {
	r.earlyDepartures = &earlyDepartures
	return r
}

// Indicates if reservations which are expected arrivals for the Search Date and who have not yet arrived, is required.
func (r ReservationAPIGetReservationsRequest) ExpectedArrivals(expectedArrivals bool) ReservationAPIGetReservationsRequest {
	r.expectedArrivals = &expectedArrivals
	return r
}

// Indicates if reservations which are expected departures for the Search Date and who have not yet departed, is required.
func (r ReservationAPIGetReservationsRequest) ExpectedDepartures(expectedDepartures bool) ReservationAPIGetReservationsRequest {
	r.expectedDepartures = &expectedDepartures
	return r
}

// Indicates if reservations which have extended their stays on the Search Date, is required.
func (r ReservationAPIGetReservationsRequest) ExtendedStays(extendedStays bool) ReservationAPIGetReservationsRequest {
	r.extendedStays = &extendedStays
	return r
}

// Indicates if reservations where rate codes are marked as House Use Rates , is required. This flag should be used in conjunction with the Arrivals, Departures or StayOvers criteria.
func (r ReservationAPIGetReservationsRequest) HouseUseReservations(houseUseReservations bool) ReservationAPIGetReservationsRequest {
	r.houseUseReservations = &houseUseReservations
	return r
}

// Indicates if reservations which are StayOvers on the Search Date, is required.
func (r ReservationAPIGetReservationsRequest) Stayovers(stayovers bool) ReservationAPIGetReservationsRequest {
	r.stayovers = &stayovers
	return r
}

// Date for searching the reservations. This is the date for which the search types are applicable. If date is not available, the business date will be used by default.
func (r ReservationAPIGetReservationsRequest) StayDate(stayDate string) ReservationAPIGetReservationsRequest {
	r.stayDate = &stayDate
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetReservationsRequest) RoomRoutingId(roomRoutingId string) ReservationAPIGetReservationsRequest {
	r.roomRoutingId = &roomRoutingId
	return r
}

// Indicates to exclude Pseudo room reservations.
func (r ReservationAPIGetReservationsRequest) ExcludePseudoRoomReservations(excludePseudoRoomReservations bool) ReservationAPIGetReservationsRequest {
	r.excludePseudoRoomReservations = &excludePseudoRoomReservations
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetReservationsRequest) ExcludeReservationIds(excludeReservationIds []string) ReservationAPIGetReservationsRequest {
	r.excludeReservationIds = &excludeReservationIds
	return r
}

// VIP status of the customer.
func (r ReservationAPIGetReservationsRequest) ExcludeVIPStatusCodes(excludeVIPStatusCodes []string) ReservationAPIGetReservationsRequest {
	r.excludeVIPStatusCodes = &excludeVIPStatusCodes
	return r
}

// Preference value for display purposes.
func (r ReservationAPIGetReservationsRequest) ExcludeSpecials(excludeSpecials []string) ReservationAPIGetReservationsRequest {
	r.excludeSpecials = &excludeSpecials
	return r
}

// Preference value for display purposes.
func (r ReservationAPIGetReservationsRequest) ExcludeFloorPreferences(excludeFloorPreferences []string) ReservationAPIGetReservationsRequest {
	r.excludeFloorPreferences = &excludeFloorPreferences
	return r
}

// Indicates to exclude Advance Checked In Reservations from search result.
func (r ReservationAPIGetReservationsRequest) ExcludeAdvanceCheckedIn(excludeAdvanceCheckedIn bool) ReservationAPIGetReservationsRequest {
	r.excludeAdvanceCheckedIn = &excludeAdvanceCheckedIn
	return r
}

// Exclude the reservation(s) with provided room features from the search result.
func (r ReservationAPIGetReservationsRequest) ExcludeRoomFeatures(excludeRoomFeatures []string) ReservationAPIGetReservationsRequest {
	r.excludeRoomFeatures = &excludeRoomFeatures
	return r
}

// Player ID associated to the reservation.
func (r ReservationAPIGetReservationsRequest) PlayerId(playerId string) ReservationAPIGetReservationsRequest {
	r.playerId = &playerId
	return r
}

// Balance from.
func (r ReservationAPIGetReservationsRequest) GamingBalanceFrom(gamingBalanceFrom float32) ReservationAPIGetReservationsRequest {
	r.gamingBalanceFrom = &gamingBalanceFrom
	return r
}

// Balance to.
func (r ReservationAPIGetReservationsRequest) GamingBalanceTo(gamingBalanceTo float32) ReservationAPIGetReservationsRequest {
	r.gamingBalanceTo = &gamingBalanceTo
	return r
}

// Comp Balance From
func (r ReservationAPIGetReservationsRequest) CompAccountingBalanceFrom(compAccountingBalanceFrom float32) ReservationAPIGetReservationsRequest {
	r.compAccountingBalanceFrom = &compAccountingBalanceFrom
	return r
}

// Comp Balance To
func (r ReservationAPIGetReservationsRequest) CompAccountingBalanceTo(compAccountingBalanceTo float32) ReservationAPIGetReservationsRequest {
	r.compAccountingBalanceTo = &compAccountingBalanceTo
	return r
}

// Represents Reservation search type Player Snapshot.
func (r ReservationAPIGetReservationsRequest) SearchTypes(searchTypes []string) ReservationAPIGetReservationsRequest {
	r.searchTypes = &searchTypes
	return r
}

// Reservation status type for reservations search.
func (r ReservationAPIGetReservationsRequest) ReservationStatuses(reservationStatuses []string) ReservationAPIGetReservationsRequest {
	r.reservationStatuses = &reservationStatuses
	return r
}

// Codes to be searched.
func (r ReservationAPIGetReservationsRequest) TransportationCodes(transportationCodes []string) ReservationAPIGetReservationsRequest {
	r.transportationCodes = &transportationCodes
	return r
}

// Enum to denote the Status of Readiness messages sent to Guest Devices.
func (r ReservationAPIGetReservationsRequest) RoomReadyStatuses(roomReadyStatuses []string) ReservationAPIGetReservationsRequest {
	r.roomReadyStatuses = &roomReadyStatuses
	return r
}

// Fetches the reservations for which Checkout Message is received.
func (r ReservationAPIGetReservationsRequest) CheckoutMessageReceived(checkoutMessageReceived bool) ReservationAPIGetReservationsRequest {
	r.checkoutMessageReceived = &checkoutMessageReceived
	return r
}

// Fetches the reservations for which reservation communication has been opted.
func (r ReservationAPIGetReservationsRequest) OptedForCommunication(optedForCommunication bool) ReservationAPIGetReservationsRequest {
	r.optedForCommunication = &optedForCommunication
	return r
}

// Fetches reservations which were created on the given property business date.
func (r ReservationAPIGetReservationsRequest) CreatedOn(createdOn string) ReservationAPIGetReservationsRequest {
	r.createdOn = &createdOn
	return r
}

// Fetches all reservations that are scheduled to stay over the selected date.
func (r ReservationAPIGetReservationsRequest) StayOn(stayOn string) ReservationAPIGetReservationsRequest {
	r.stayOn = &stayOn
	return r
}

// Name of Contact Profile associated with Reservation.
func (r ReservationAPIGetReservationsRequest) ContactNames(contactNames []string) ReservationAPIGetReservationsRequest {
	r.contactNames = &contactNames
	return r
}

// External system code.
func (r ReservationAPIGetReservationsRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetReservationsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetReservationsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetReservationsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetReservationsRequest) Execute() (*ReservationsDetails, *http.Response, error) {
	return r.ApiService.GetReservationsExecute(r)
}

/*
GetReservations Get Reservations for a hotel

This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getReservations</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReservationAPIGetReservationsRequest
*/
func (a *ReservationAPIService) GetReservations(ctx context.Context) ReservationAPIGetReservationsRequest {
	return ReservationAPIGetReservationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ReservationsDetails
func (a *ReservationAPIService) GetReservationsExecute(r ReservationAPIGetReservationsRequest) (*ReservationsDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationsDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetReservations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reservations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.recentlyAccessed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recentlyAccessed", r.recentlyAccessed, "")
  }
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.searchType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "searchType", r.searchType, "")
  }
	if r.hotelIds != nil {
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
  }
	if r.text != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "text", r.text, "")
  }
	if r.reservationIdList != nil {
		t := *r.reservationIdList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIdList", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIdList", t, "multi")
		}
  }
	if r.confirmationNumberList != nil {
		t := *r.confirmationNumberList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "confirmationNumberList", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "confirmationNumberList", t, "multi")
		}
  }
	if r.cancellationNumberList != nil {
		t := *r.cancellationNumberList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cancellationNumberList", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cancellationNumberList", t, "multi")
		}
  }
	if r.externalReferenceIds != nil {
		t := *r.externalReferenceIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "externalReferenceIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "externalReferenceIds", t, "multi")
		}
  }
	if r.externalSystemCodes != nil {
		t := *r.externalSystemCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "externalSystemCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "externalSystemCodes", t, "multi")
		}
  }
	if r.arrivalEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalEndDate", r.arrivalEndDate, "")
  }
	if r.arrivalStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalStartDate", r.arrivalStartDate, "")
  }
	if r.departureEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "departureEndDate", r.departureEndDate, "")
  }
	if r.departureStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "departureStartDate", r.departureStartDate, "")
  }
	if r.expectedArrivalStartTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expectedArrivalStartTime", r.expectedArrivalStartTime, "")
  }
	if r.expectedArrivalEndTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expectedArrivalEndTime", r.expectedArrivalEndTime, "")
  }
	if r.expectedReturnEndTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expectedReturnEndTime", r.expectedReturnEndTime, "")
  }
	if r.expectedReturnStartTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expectedReturnStartTime", r.expectedReturnStartTime, "")
  }
	if r.companyNames != nil {
		t := *r.companyNames
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "companyNames", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "companyNames", t, "multi")
		}
  }
	if r.sourceNames != nil {
		t := *r.sourceNames
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sourceNames", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sourceNames", t, "multi")
		}
  }
	if r.travelAgentNames != nil {
		t := *r.travelAgentNames
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "travelAgentNames", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "travelAgentNames", t, "multi")
		}
  }
	if r.groupNames != nil {
		t := *r.groupNames
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "groupNames", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "groupNames", t, "multi")
		}
  }
	if r.travelAgentIds != nil {
		t := *r.travelAgentIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "travelAgentIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "travelAgentIds", t, "multi")
		}
  }
	if r.companyIds != nil {
		t := *r.companyIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "companyIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "companyIds", t, "multi")
		}
  }
	if r.sourceIds != nil {
		t := *r.sourceIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sourceIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sourceIds", t, "multi")
		}
  }
	if r.contactIds != nil {
		t := *r.contactIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contactIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contactIds", t, "multi")
		}
  }
	if r.groupIds != nil {
		t := *r.groupIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "groupIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "groupIds", t, "multi")
		}
  }
	if r.billingContactIds != nil {
		t := *r.billingContactIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "billingContactIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "billingContactIds", t, "multi")
		}
  }
	if r.profileIds != nil {
		t := *r.profileIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "profileIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "profileIds", t, "multi")
		}
  }
	if r.membershipCardNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipCardNumber", r.membershipCardNumber, "")
  }
	if r.membershipLevels != nil {
		t := *r.membershipLevels
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "membershipLevels", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "membershipLevels", t, "multi")
		}
  }
	if r.membershipTypes != nil {
		t := *r.membershipTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "membershipTypes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "membershipTypes", t, "multi")
		}
  }
	if r.surname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "surname", r.surname, "")
  }
	if r.givenName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "givenName", r.givenName, "")
  }
	if r.anyVIPStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "anyVIPStatus", r.anyVIPStatus, "")
  }
	if r.vipCodes != nil {
		t := *r.vipCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vipCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vipCodes", t, "multi")
		}
  }
	if r.guaranteeCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "guaranteeCode", r.guaranteeCode, "")
  }
	if r.paymentMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paymentMethod", r.paymentMethod, "")
  }
	if r.discountApplied != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "discountApplied", r.discountApplied, "")
  }
	if r.user != nil {
		t := *r.user
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user", t, "multi")
		}
  }
	if r.createdBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdBy", r.createdBy, "")
  }
	if r.cancelledByList != nil {
		t := *r.cancelledByList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cancelledByList", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cancelledByList", t, "multi")
		}
  }
	if r.cancelledOn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cancelledOn", r.cancelledOn, "")
  }
	if r.ratePlanCodes != nil {
		t := *r.ratePlanCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCodes", t, "multi")
		}
  }
	if r.sourceCodes != nil {
		t := *r.sourceCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sourceCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sourceCodes", t, "multi")
		}
  }
	if r.marketCodes != nil {
		t := *r.marketCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "marketCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "marketCodes", t, "multi")
		}
  }
	if r.excludeBlockReservations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeBlockReservations", r.excludeBlockReservations, "")
  }
	if r.blockName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blockName", r.blockName, "")
  }
	if r.blockIds != nil {
		t := *r.blockIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "blockIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "blockIds", t, "multi")
		}
  }
	if r.blockCodes != nil {
		t := *r.blockCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "blockCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "blockCodes", t, "multi")
		}
  }
	if r.customReference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customReference", r.customReference, "")
  }
	if r.recordLocator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recordLocator", r.recordLocator, "")
  }
	if r.orderBy != nil {
		t := *r.orderBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", t, "multi")
		}
  }
	if r.sortOrder != nil {
		t := *r.sortOrder
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", t, "multi")
		}
  }
	if r.roomAssignedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomAssignedOnly", r.roomAssignedOnly, "")
  }
	if r.roomUnassignedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomUnassignedOnly", r.roomUnassignedOnly, "")
  }
	if r.roomId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomId", r.roomId, "")
  }
	if r.roomType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", r.roomType, "csv")
  }
	if r.roomFeatures != nil {
		t := *r.roomFeatures
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomFeatures", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomFeatures", t, "multi")
		}
  }
	if r.roomSpecials != nil {
		t := *r.roomSpecials
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomSpecials", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomSpecials", t, "multi")
		}
  }
	if r.roomSmokingPreference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomSmokingPreference", r.roomSmokingPreference, "")
  }
	if r.roomFloorPreferences != nil {
		t := *r.roomFloorPreferences
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomFloorPreferences", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomFloorPreferences", t, "multi")
		}
  }
	if r.housekeepingRoomStatuses != nil {
		t := *r.housekeepingRoomStatuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "housekeepingRoomStatuses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "housekeepingRoomStatuses", t, "multi")
		}
  }
	if r.roomClasses != nil {
		t := *r.roomClasses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", t, "multi")
		}
  }
	if r.roomRangeFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomRangeFrom", r.roomRangeFrom, "")
  }
	if r.roomRangeTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomRangeTo", r.roomRangeTo, "")
  }
	if r.communication != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "communication", r.communication, "")
  }
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
  }
	if r.allowedReservationActions != nil {
		t := *r.allowedReservationActions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allowedReservationActions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allowedReservationActions", t, "multi")
		}
  }
	if r.allowPreRegistration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allowPreRegistration", r.allowPreRegistration, "")
  }
	if r.hasDepositBalance != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hasDepositBalance", r.hasDepositBalance, "")
  }
	if r.hasOpenBalance != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hasOpenBalance", r.hasOpenBalance, "")
  }
	if r.hasOpenFolio != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hasOpenFolio", r.hasOpenFolio, "")
  }
	if r.includeScheduledCheckOut != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeScheduledCheckOut", r.includeScheduledCheckOut, "")
  }
	if r.linkedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "linkedOnly", r.linkedOnly, "")
  }
	if r.unlinkedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "unlinkedOnly", r.unlinkedOnly, "")
  }
	if r.actualArrivals != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "actualArrivals", r.actualArrivals, "")
  }
	if r.actualDepartures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "actualDepartures", r.actualDepartures, "")
  }
	if r.complimentaryReservations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "complimentaryReservations", r.complimentaryReservations, "")
  }
	if r.dayOfArrivalCancels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dayOfArrivalCancels", r.dayOfArrivalCancels, "")
  }
	if r.dayUse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dayUse", r.dayUse, "")
  }
	if r.earlyDepartures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "earlyDepartures", r.earlyDepartures, "")
  }
	if r.expectedArrivals != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expectedArrivals", r.expectedArrivals, "")
  }
	if r.expectedDepartures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expectedDepartures", r.expectedDepartures, "")
  }
	if r.extendedStays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "extendedStays", r.extendedStays, "")
  }
	if r.houseUseReservations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "houseUseReservations", r.houseUseReservations, "")
  }
	if r.stayovers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stayovers", r.stayovers, "")
  }
	if r.stayDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stayDate", r.stayDate, "")
  }
	if r.roomRoutingId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomRoutingId", r.roomRoutingId, "")
  }
	if r.excludePseudoRoomReservations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludePseudoRoomReservations", r.excludePseudoRoomReservations, "")
  }
	if r.excludeReservationIds != nil {
		t := *r.excludeReservationIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeReservationIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeReservationIds", t, "multi")
		}
  }
	if r.excludeVIPStatusCodes != nil {
		t := *r.excludeVIPStatusCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeVIPStatusCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeVIPStatusCodes", t, "multi")
		}
  }
	if r.excludeSpecials != nil {
		t := *r.excludeSpecials
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeSpecials", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeSpecials", t, "multi")
		}
  }
	if r.excludeFloorPreferences != nil {
		t := *r.excludeFloorPreferences
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeFloorPreferences", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeFloorPreferences", t, "multi")
		}
  }
	if r.excludeAdvanceCheckedIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeAdvanceCheckedIn", r.excludeAdvanceCheckedIn, "")
  }
	if r.excludeRoomFeatures != nil {
		t := *r.excludeRoomFeatures
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeRoomFeatures", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeRoomFeatures", t, "multi")
		}
  }
	if r.playerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "playerId", r.playerId, "")
  }
	if r.gamingBalanceFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gamingBalanceFrom", r.gamingBalanceFrom, "")
  }
	if r.gamingBalanceTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gamingBalanceTo", r.gamingBalanceTo, "")
  }
	if r.compAccountingBalanceFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "compAccountingBalanceFrom", r.compAccountingBalanceFrom, "")
  }
	if r.compAccountingBalanceTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "compAccountingBalanceTo", r.compAccountingBalanceTo, "")
  }
	if r.searchTypes != nil {
		t := *r.searchTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "searchTypes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "searchTypes", t, "multi")
		}
  }
	if r.reservationStatuses != nil {
		t := *r.reservationStatuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reservationStatuses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reservationStatuses", t, "multi")
		}
  }
	if r.transportationCodes != nil {
		t := *r.transportationCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "transportationCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "transportationCodes", t, "multi")
		}
  }
	if r.roomReadyStatuses != nil {
		t := *r.roomReadyStatuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomReadyStatuses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomReadyStatuses", t, "multi")
		}
  }
	if r.checkoutMessageReceived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "checkoutMessageReceived", r.checkoutMessageReceived, "")
  }
	if r.optedForCommunication != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "optedForCommunication", r.optedForCommunication, "")
  }
	if r.createdOn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdOn", r.createdOn, "")
  }
	if r.stayOn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stayOn", r.stayOn, "")
  }
	if r.contactNames != nil {
		t := *r.contactNames
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contactNames", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contactNames", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetReservationsSummaryRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	advancedCheckedIn *bool
	limit *int32
	offset *int32
	preRegistered *bool
	arrivalDate *string
	departureDate *string
	createDateTime *string
	cancelledOn *string
	folioClosedOn *string
	lastName *string
	companyId *float32
	guestNameId *float32
	reservationStatus *string
	confirmationNumber *string
	externalReferenceNumber *string
	cancellationNumber *string
	membershipNumber *string
	registeredCardNumber *string
	balance *float32
	roomId *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetReservationsSummaryRequest) Authorization(authorization string) ReservationAPIGetReservationsSummaryRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetReservationsSummaryRequest) XAppKey(xAppKey string) ReservationAPIGetReservationsSummaryRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetReservationsSummaryRequest) XHotelid(xHotelid string) ReservationAPIGetReservationsSummaryRequest {
	r.xHotelid = &xHotelid
	return r
}

// This filter indicates if the reservation(s) has performed an Advance Check-In or not. Data fetched is for 30 days ahead of business date.
func (r ReservationAPIGetReservationsSummaryRequest) AdvancedCheckedIn(advancedCheckedIn bool) ReservationAPIGetReservationsSummaryRequest {
	r.advancedCheckedIn = &advancedCheckedIn
	return r
}

// This filter indicates number of records the API has to fetch.
func (r ReservationAPIGetReservationsSummaryRequest) Limit(limit int32) ReservationAPIGetReservationsSummaryRequest {
	r.limit = &limit
	return r
}

// This filter is for the index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ReservationAPIGetReservationsSummaryRequest) Offset(offset int32) ReservationAPIGetReservationsSummaryRequest {
	r.offset = &offset
	return r
}

// This filter indicates whether the reservation is Pre-Registered for Internet Check-In or not. Data fetched is for 30 days ahead of business date.
func (r ReservationAPIGetReservationsSummaryRequest) PreRegistered(preRegistered bool) ReservationAPIGetReservationsSummaryRequest {
	r.preRegistered = &preRegistered
	return r
}

// This filter is for the date of arrival of reservation.
func (r ReservationAPIGetReservationsSummaryRequest) ArrivalDate(arrivalDate string) ReservationAPIGetReservationsSummaryRequest {
	r.arrivalDate = &arrivalDate
	return r
}

// This filter is for the date of departure of reservation.
func (r ReservationAPIGetReservationsSummaryRequest) DepartureDate(departureDate string) ReservationAPIGetReservationsSummaryRequest {
	r.departureDate = &departureDate
	return r
}

// This filter is for the business date when reservation(s) was created in the system.
func (r ReservationAPIGetReservationsSummaryRequest) CreateDateTime(createDateTime string) ReservationAPIGetReservationsSummaryRequest {
	r.createDateTime = &createDateTime
	return r
}

// This filter is for the date when reservation(s) was cancelled.
func (r ReservationAPIGetReservationsSummaryRequest) CancelledOn(cancelledOn string) ReservationAPIGetReservationsSummaryRequest {
	r.cancelledOn = &cancelledOn
	return r
}

// This filter is for the date when reservation(s) folio was closed.
func (r ReservationAPIGetReservationsSummaryRequest) FolioClosedOn(folioClosedOn string) ReservationAPIGetReservationsSummaryRequest {
	r.folioClosedOn = &folioClosedOn
	return r
}

// This filter looks up reservations with this last Name. Data fetched is for +-2 business date only when passed alone.
func (r ReservationAPIGetReservationsSummaryRequest) LastName(lastName string) ReservationAPIGetReservationsSummaryRequest {
	r.lastName = &lastName
	return r
}

// This filter is ID of the company used for the reservation. Data fetched is for +-2 business date only when passed alone.
func (r ReservationAPIGetReservationsSummaryRequest) CompanyId(companyId float32) ReservationAPIGetReservationsSummaryRequest {
	r.companyId = &companyId
	return r
}

// This filter is ID of the guest.
func (r ReservationAPIGetReservationsSummaryRequest) GuestNameId(guestNameId float32) ReservationAPIGetReservationsSummaryRequest {
	r.guestNameId = &guestNameId
	return r
}

// This filter is computed reservation status of the reservation(s).
func (r ReservationAPIGetReservationsSummaryRequest) ReservationStatus(reservationStatus string) ReservationAPIGetReservationsSummaryRequest {
	r.reservationStatus = &reservationStatus
	return r
}

// This filter is ID of confirmation for the reservation.
func (r ReservationAPIGetReservationsSummaryRequest) ConfirmationNumber(confirmationNumber string) ReservationAPIGetReservationsSummaryRequest {
	r.confirmationNumber = &confirmationNumber
	return r
}

// This filter is ID of external reference for the reservation.
func (r ReservationAPIGetReservationsSummaryRequest) ExternalReferenceNumber(externalReferenceNumber string) ReservationAPIGetReservationsSummaryRequest {
	r.externalReferenceNumber = &externalReferenceNumber
	return r
}

// This filter is ID of cancellation for the reservation.
func (r ReservationAPIGetReservationsSummaryRequest) CancellationNumber(cancellationNumber string) ReservationAPIGetReservationsSummaryRequest {
	r.cancellationNumber = &cancellationNumber
	return r
}

// This filter is used for looking up reservations with this membership number. Last Name is required along with membership number to filter the data.
func (r ReservationAPIGetReservationsSummaryRequest) MembershipNumber(membershipNumber string) ReservationAPIGetReservationsSummaryRequest {
	r.membershipNumber = &membershipNumber
	return r
}

// This filter is unique identifier of the registration card number. Last Name is required along with registration card number to filter the data.
func (r ReservationAPIGetReservationsSummaryRequest) RegisteredCardNumber(registeredCardNumber string) ReservationAPIGetReservationsSummaryRequest {
	r.registeredCardNumber = &registeredCardNumber
	return r
}

// This filter checks reservations with balance amount greater than or equal to this amount. Departure date is required along with balance to filter the data.
func (r ReservationAPIGetReservationsSummaryRequest) Balance(balance float32) ReservationAPIGetReservationsSummaryRequest {
	r.balance = &balance
	return r
}

// This filter is for room number.
func (r ReservationAPIGetReservationsSummaryRequest) RoomId(roomId string) ReservationAPIGetReservationsSummaryRequest {
	r.roomId = &roomId
	return r
}

// External system code.
func (r ReservationAPIGetReservationsSummaryRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetReservationsSummaryRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetReservationsSummaryRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetReservationsSummaryRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetReservationsSummaryRequest) Execute() (*ReservationsSummary, *http.Response, error) {
	return r.ApiService.GetReservationsSummaryExecute(r)
}

/*
GetReservationsSummary Get brief summary for Reservations

<p>This operation fetches brief summary for the reservations and also supports the Global Parameter <strong>MAX ROWS FETCH COUNT</strong>.<br>By default this parameter is configured to support an overall fetch of <strong>5000</strong> Records in total, with maximum number of records that can be fetched at a time being <strong>200</strong> (limit). However, this parameter can be updated to support an overall fetch value being a valid number between <strong>1</strong> and <strong>10000</strong> with maximum number of records that can be fetched at a time being same i.e. <strong>200</strong> (limit).</p><p>Requests with an <strong>offset</strong> and <strong>limit</strong> sum exceeding the <strong>MAX ROWS FETCH COUNT</strong> configured would fail the request.</p> <p><strong>OperationId:</strong>getReservationsSummary</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservations is being searched.
 @return ReservationAPIGetReservationsSummaryRequest
*/
func (a *ReservationAPIService) GetReservationsSummary(ctx context.Context, hotelId string) ReservationAPIGetReservationsSummaryRequest {
	return ReservationAPIGetReservationsSummaryRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationsSummary
func (a *ReservationAPIService) GetReservationsSummaryExecute(r ReservationAPIGetReservationsSummaryRequest) (*ReservationsSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationsSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetReservationsSummary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/summary"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.advancedCheckedIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "advancedCheckedIn", r.advancedCheckedIn, "")
  }
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.preRegistered != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preRegistered", r.preRegistered, "")
  }
	if r.arrivalDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalDate", r.arrivalDate, "")
  }
	if r.departureDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "departureDate", r.departureDate, "")
  }
	if r.createDateTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createDateTime", r.createDateTime, "")
  }
	if r.cancelledOn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cancelledOn", r.cancelledOn, "")
  }
	if r.folioClosedOn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "folioClosedOn", r.folioClosedOn, "")
  }
	if r.lastName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastName", r.lastName, "")
  }
	if r.companyId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "companyId", r.companyId, "")
  }
	if r.guestNameId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "guestNameId", r.guestNameId, "")
  }
	if r.reservationStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationStatus", r.reservationStatus, "")
  }
	if r.confirmationNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "confirmationNumber", r.confirmationNumber, "")
  }
	if r.externalReferenceNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "externalReferenceNumber", r.externalReferenceNumber, "")
  }
	if r.cancellationNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cancellationNumber", r.cancellationNumber, "")
  }
	if r.membershipNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipNumber", r.membershipNumber, "")
  }
	if r.registeredCardNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "registeredCardNumber", r.registeredCardNumber, "")
  }
	if r.balance != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "balance", r.balance, "")
  }
	if r.roomId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomId", r.roomId, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetReservationsToShareByProfileIdRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	profileIdtoShare string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	superSearch *string
	reservationGuestId *string
	reservationGuestIdType *string
	membershipId *string
	membershipLevel *[]string
	membershipType *[]string
	surname *string
	givenName *string
	roomId *string
	fetchInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetReservationsToShareByProfileIdRequest) Authorization(authorization string) ReservationAPIGetReservationsToShareByProfileIdRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetReservationsToShareByProfileIdRequest) XAppKey(xAppKey string) ReservationAPIGetReservationsToShareByProfileIdRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetReservationsToShareByProfileIdRequest) XHotelid(xHotelid string) ReservationAPIGetReservationsToShareByProfileIdRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ReservationAPIGetReservationsToShareByProfileIdRequest) Limit(limit int32) ReservationAPIGetReservationsToShareByProfileIdRequest {
	r.limit = &limit
	return r
}

// Free form text field for searching all reservation fields
func (r ReservationAPIGetReservationsToShareByProfileIdRequest) SuperSearch(superSearch string) ReservationAPIGetReservationsToShareByProfileIdRequest {
	r.superSearch = &superSearch
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetReservationsToShareByProfileIdRequest) ReservationGuestId(reservationGuestId string) ReservationAPIGetReservationsToShareByProfileIdRequest {
	r.reservationGuestId = &reservationGuestId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIGetReservationsToShareByProfileIdRequest) ReservationGuestIdType(reservationGuestIdType string) ReservationAPIGetReservationsToShareByProfileIdRequest {
	r.reservationGuestIdType = &reservationGuestIdType
	return r
}

// Membership ID criteria.
func (r ReservationAPIGetReservationsToShareByProfileIdRequest) MembershipId(membershipId string) ReservationAPIGetReservationsToShareByProfileIdRequest {
	r.membershipId = &membershipId
	return r
}

func (r ReservationAPIGetReservationsToShareByProfileIdRequest) MembershipLevel(membershipLevel []string) ReservationAPIGetReservationsToShareByProfileIdRequest {
	r.membershipLevel = &membershipLevel
	return r
}

func (r ReservationAPIGetReservationsToShareByProfileIdRequest) MembershipType(membershipType []string) ReservationAPIGetReservationsToShareByProfileIdRequest {
	r.membershipType = &membershipType
	return r
}

// Family name, last name.
func (r ReservationAPIGetReservationsToShareByProfileIdRequest) Surname(surname string) ReservationAPIGetReservationsToShareByProfileIdRequest {
	r.surname = &surname
	return r
}

// Given name, first name or names
func (r ReservationAPIGetReservationsToShareByProfileIdRequest) GivenName(givenName string) ReservationAPIGetReservationsToShareByProfileIdRequest {
	r.givenName = &givenName
	return r
}

// Room number
func (r ReservationAPIGetReservationsToShareByProfileIdRequest) RoomId(roomId string) ReservationAPIGetReservationsToShareByProfileIdRequest {
	r.roomId = &roomId
	return r
}

// Instruction to fetch whether the room was assigned/upgraded by AI. This will also include Reservation instruction.
func (r ReservationAPIGetReservationsToShareByProfileIdRequest) FetchInstructions(fetchInstructions []string) ReservationAPIGetReservationsToShareByProfileIdRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r ReservationAPIGetReservationsToShareByProfileIdRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetReservationsToShareByProfileIdRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetReservationsToShareByProfileIdRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetReservationsToShareByProfileIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetReservationsToShareByProfileIdRequest) Execute() (*FetchReservations, *http.Response, error) {
	return r.ApiService.GetReservationsToShareByProfileIdExecute(r)
}

/*
GetReservationsToShareByProfileId Get Reservations to share 

Get Reservations to share by profile id. <p><strong>OperationId:</strong>getReservationsToShareByProfileId</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileIdtoShare Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetReservationsToShareByProfileIdRequest
*/
func (a *ReservationAPIService) GetReservationsToShareByProfileId(ctx context.Context, profileIdtoShare string, hotelId string) ReservationAPIGetReservationsToShareByProfileIdRequest {
	return ReservationAPIGetReservationsToShareByProfileIdRequest{
		ApiService: a,
		ctx: ctx,
		profileIdtoShare: profileIdtoShare,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return FetchReservations
func (a *ReservationAPIService) GetReservationsToShareByProfileIdExecute(r ReservationAPIGetReservationsToShareByProfileIdRequest) (*FetchReservations, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchReservations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetReservationsToShareByProfileId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/profiles/{profileIdtoShare}/share"
	localVarPath = strings.Replace(localVarPath, "{"+"profileIdtoShare"+"}", url.PathEscape(parameterValueToString(r.profileIdtoShare, "profileIdtoShare")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileIdtoShare) < 1 {
		return localVarReturnValue, nil, reportError("profileIdtoShare must have at least 1 elements")
	}
	if strlen(r.profileIdtoShare) > 2000 {
		return localVarReturnValue, nil, reportError("profileIdtoShare must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.superSearch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "superSearch", r.superSearch, "")
  }
	if r.reservationGuestId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationGuestId", r.reservationGuestId, "")
  }
	if r.reservationGuestIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationGuestIdType", r.reservationGuestIdType, "")
  }
	if r.membershipId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipId", r.membershipId, "")
  }
	if r.membershipLevel != nil {
		t := *r.membershipLevel
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "membershipLevel", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "membershipLevel", t, "multi")
		}
  }
	if r.membershipType != nil {
		t := *r.membershipType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "membershipType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "membershipType", t, "multi")
		}
  }
	if r.surname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "surname", r.surname, "")
  }
	if r.givenName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "givenName", r.givenName, "")
  }
	if r.roomId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomId", r.roomId, "")
  }
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetReservationsToShareByReservationIdRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationIdtoShare string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	superSearch *string
	reservationGuestId *string
	reservationGuestIdType *string
	membershipId *string
	membershipLevel *[]string
	membershipType *[]string
	surname *string
	givenName *string
	roomId *string
	fetchInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetReservationsToShareByReservationIdRequest) Authorization(authorization string) ReservationAPIGetReservationsToShareByReservationIdRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetReservationsToShareByReservationIdRequest) XAppKey(xAppKey string) ReservationAPIGetReservationsToShareByReservationIdRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetReservationsToShareByReservationIdRequest) XHotelid(xHotelid string) ReservationAPIGetReservationsToShareByReservationIdRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ReservationAPIGetReservationsToShareByReservationIdRequest) Limit(limit int32) ReservationAPIGetReservationsToShareByReservationIdRequest {
	r.limit = &limit
	return r
}

// Free form text field for searching all reservation fields
func (r ReservationAPIGetReservationsToShareByReservationIdRequest) SuperSearch(superSearch string) ReservationAPIGetReservationsToShareByReservationIdRequest {
	r.superSearch = &superSearch
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetReservationsToShareByReservationIdRequest) ReservationGuestId(reservationGuestId string) ReservationAPIGetReservationsToShareByReservationIdRequest {
	r.reservationGuestId = &reservationGuestId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIGetReservationsToShareByReservationIdRequest) ReservationGuestIdType(reservationGuestIdType string) ReservationAPIGetReservationsToShareByReservationIdRequest {
	r.reservationGuestIdType = &reservationGuestIdType
	return r
}

// Membership ID criteria.
func (r ReservationAPIGetReservationsToShareByReservationIdRequest) MembershipId(membershipId string) ReservationAPIGetReservationsToShareByReservationIdRequest {
	r.membershipId = &membershipId
	return r
}

func (r ReservationAPIGetReservationsToShareByReservationIdRequest) MembershipLevel(membershipLevel []string) ReservationAPIGetReservationsToShareByReservationIdRequest {
	r.membershipLevel = &membershipLevel
	return r
}

func (r ReservationAPIGetReservationsToShareByReservationIdRequest) MembershipType(membershipType []string) ReservationAPIGetReservationsToShareByReservationIdRequest {
	r.membershipType = &membershipType
	return r
}

// Family name, last name.
func (r ReservationAPIGetReservationsToShareByReservationIdRequest) Surname(surname string) ReservationAPIGetReservationsToShareByReservationIdRequest {
	r.surname = &surname
	return r
}

// Given name, first name or names
func (r ReservationAPIGetReservationsToShareByReservationIdRequest) GivenName(givenName string) ReservationAPIGetReservationsToShareByReservationIdRequest {
	r.givenName = &givenName
	return r
}

// Room number
func (r ReservationAPIGetReservationsToShareByReservationIdRequest) RoomId(roomId string) ReservationAPIGetReservationsToShareByReservationIdRequest {
	r.roomId = &roomId
	return r
}

// Instruction to fetch whether the room was assigned/upgraded by AI. This will also include Reservation instruction.
func (r ReservationAPIGetReservationsToShareByReservationIdRequest) FetchInstructions(fetchInstructions []string) ReservationAPIGetReservationsToShareByReservationIdRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r ReservationAPIGetReservationsToShareByReservationIdRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetReservationsToShareByReservationIdRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetReservationsToShareByReservationIdRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetReservationsToShareByReservationIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetReservationsToShareByReservationIdRequest) Execute() (*FetchReservations, *http.Response, error) {
	return r.ApiService.GetReservationsToShareByReservationIdExecute(r)
}

/*
GetReservationsToShareByReservationId Get Reservations to share by Reservation id

Fetch the reservation that can be shared with an existing reservation. <p><strong>OperationId:</strong>getReservationsToShareByReservationId</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationIdtoShare Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetReservationsToShareByReservationIdRequest
*/
func (a *ReservationAPIService) GetReservationsToShareByReservationId(ctx context.Context, reservationIdtoShare string, hotelId string) ReservationAPIGetReservationsToShareByReservationIdRequest {
	return ReservationAPIGetReservationsToShareByReservationIdRequest{
		ApiService: a,
		ctx: ctx,
		reservationIdtoShare: reservationIdtoShare,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return FetchReservations
func (a *ReservationAPIService) GetReservationsToShareByReservationIdExecute(r ReservationAPIGetReservationsToShareByReservationIdRequest) (*FetchReservations, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchReservations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetReservationsToShareByReservationId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationIdtoShare}/share"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationIdtoShare"+"}", url.PathEscape(parameterValueToString(r.reservationIdtoShare, "reservationIdtoShare")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationIdtoShare) < 1 {
		return localVarReturnValue, nil, reportError("reservationIdtoShare must have at least 1 elements")
	}
	if strlen(r.reservationIdtoShare) > 2000 {
		return localVarReturnValue, nil, reportError("reservationIdtoShare must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.superSearch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "superSearch", r.superSearch, "")
  }
	if r.reservationGuestId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationGuestId", r.reservationGuestId, "")
  }
	if r.reservationGuestIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationGuestIdType", r.reservationGuestIdType, "")
  }
	if r.membershipId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipId", r.membershipId, "")
  }
	if r.membershipLevel != nil {
		t := *r.membershipLevel
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "membershipLevel", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "membershipLevel", t, "multi")
		}
  }
	if r.membershipType != nil {
		t := *r.membershipType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "membershipType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "membershipType", t, "multi")
		}
  }
	if r.surname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "surname", r.surname, "")
  }
	if r.givenName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "givenName", r.givenName, "")
  }
	if r.roomId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomId", r.roomId, "")
  }
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetReservedInventoryItemsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetReservedInventoryItemsRequest) Authorization(authorization string) ReservationAPIGetReservedInventoryItemsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetReservedInventoryItemsRequest) XAppKey(xAppKey string) ReservationAPIGetReservedInventoryItemsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetReservedInventoryItemsRequest) XHotelid(xHotelid string) ReservationAPIGetReservedInventoryItemsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIGetReservedInventoryItemsRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetReservedInventoryItemsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetReservedInventoryItemsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetReservedInventoryItemsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetReservedInventoryItemsRequest) Execute() (*InventoryItems, *http.Response, error) {
	return r.ApiService.GetReservedInventoryItemsExecute(r)
}

/*
GetReservedInventoryItems Get Reserved Inventory Items 

Get the Inventory Items reserved for the Reservation. <p><strong>OperationId:</strong>getReservedInventoryItems</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetReservedInventoryItemsRequest
*/
func (a *ReservationAPIService) GetReservedInventoryItems(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetReservedInventoryItemsRequest {
	return ReservationAPIGetReservedInventoryItemsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return InventoryItems
func (a *ReservationAPIService) GetReservedInventoryItemsExecute(r ReservationAPIGetReservedInventoryItemsRequest) (*InventoryItems, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InventoryItems
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetReservedInventoryItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/inventoryItems"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetRoomCalendarRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	advanceCheckedIn *bool
	assignedRooms *string
	componentRooms *string
	connectingRoomsOnly *string
	dueOut *string
	endDate *string
	isSortDescending *bool
	pageIndex *int32
	partiallyAssignedRooms *string
	recordsPerPage *int32
	roomConditions *string
	ownerRoomsOnly *string
	ownerExclusiveOnly *string
	sortingBy *string
	includeRoomMoveHistory *bool
	includeComponentRoomBlockOutDates *bool
	startDate *string
	unassignedRooms *string
	roomId *[]string
	roomType *[]string
	roomClass *[]string
	floor *[]string
	roomFeature *[]string
	roomStatus *[]string
	smokingPreference *[]string
	bedType *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetRoomCalendarRequest) Authorization(authorization string) ReservationAPIGetRoomCalendarRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetRoomCalendarRequest) XAppKey(xAppKey string) ReservationAPIGetRoomCalendarRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetRoomCalendarRequest) XHotelid(xHotelid string) ReservationAPIGetRoomCalendarRequest {
	r.xHotelid = &xHotelid
	return r
}

// If true, then filter room results to rooms with Advance Checked In Reservations.
func (r ReservationAPIGetRoomCalendarRequest) AdvanceCheckedIn(advanceCheckedIn bool) ReservationAPIGetRoomCalendarRequest {
	r.advanceCheckedIn = &advanceCheckedIn
	return r
}

// If &#39;Y&#39;, then filter room results to rooms that are assigned to guest.
func (r ReservationAPIGetRoomCalendarRequest) AssignedRooms(assignedRooms string) ReservationAPIGetRoomCalendarRequest {
	r.assignedRooms = &assignedRooms
	return r
}

// If &#39;Y&#39;, then filter room results to component rooms.
func (r ReservationAPIGetRoomCalendarRequest) ComponentRooms(componentRooms string) ReservationAPIGetRoomCalendarRequest {
	r.componentRooms = &componentRooms
	return r
}

// If &#39;Y&#39;, then filter room results to only connecting rooms.
func (r ReservationAPIGetRoomCalendarRequest) ConnectingRoomsOnly(connectingRoomsOnly string) ReservationAPIGetRoomCalendarRequest {
	r.connectingRoomsOnly = &connectingRoomsOnly
	return r
}

// If &#39;Y&#39;, then filter room results to rooms with Due Out Reservations.
func (r ReservationAPIGetRoomCalendarRequest) DueOut(dueOut string) ReservationAPIGetRoomCalendarRequest {
	r.dueOut = &dueOut
	return r
}

// The ending value of the date range.
func (r ReservationAPIGetRoomCalendarRequest) EndDate(endDate string) ReservationAPIGetRoomCalendarRequest {
	r.endDate = &endDate
	return r
}

// If true, then fetch result will be sorted in descending order.
func (r ReservationAPIGetRoomCalendarRequest) IsSortDescending(isSortDescending bool) ReservationAPIGetRoomCalendarRequest {
	r.isSortDescending = &isSortDescending
	return r
}

// Page index to be retrieved.
func (r ReservationAPIGetRoomCalendarRequest) PageIndex(pageIndex int32) ReservationAPIGetRoomCalendarRequest {
	r.pageIndex = &pageIndex
	return r
}

// If &#39;Y&#39;, then filter room results to component rooms that have at least one of its rooms assigned to guest.
func (r ReservationAPIGetRoomCalendarRequest) PartiallyAssignedRooms(partiallyAssignedRooms string) ReservationAPIGetRoomCalendarRequest {
	r.partiallyAssignedRooms = &partiallyAssignedRooms
	return r
}

// Number of records per page.
func (r ReservationAPIGetRoomCalendarRequest) RecordsPerPage(recordsPerPage int32) ReservationAPIGetRoomCalendarRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

// If &#39;Y&#39;, then filter room results to rooms with Room Conditions.
func (r ReservationAPIGetRoomCalendarRequest) RoomConditions(roomConditions string) ReservationAPIGetRoomCalendarRequest {
	r.roomConditions = &roomConditions
	return r
}

// If &#39;Y&#39;, then filter room results to rooms with rotation rooms only. It is supported only if OPERA Control Room Rotation is active.
func (r ReservationAPIGetRoomCalendarRequest) OwnerRoomsOnly(ownerRoomsOnly string) ReservationAPIGetRoomCalendarRequest {
	r.ownerRoomsOnly = &ownerRoomsOnly
	return r
}

// If &#39;Y&#39;, then filter room results to rooms that are exclusive to the owner. It is supported only if OPERA Control Room Rotation is active.
func (r ReservationAPIGetRoomCalendarRequest) OwnerExclusiveOnly(ownerExclusiveOnly string) ReservationAPIGetRoomCalendarRequest {
	r.ownerExclusiveOnly = &ownerExclusiveOnly
	return r
}

// A collection of supported sorting for room calendar.
func (r ReservationAPIGetRoomCalendarRequest) SortingBy(sortingBy string) ReservationAPIGetRoomCalendarRequest {
	r.sortingBy = &sortingBy
	return r
}

// Include Room Move History in result.
func (r ReservationAPIGetRoomCalendarRequest) IncludeRoomMoveHistory(includeRoomMoveHistory bool) ReservationAPIGetRoomCalendarRequest {
	r.includeRoomMoveHistory = &includeRoomMoveHistory
	return r
}

// Include information about Component Room Reservation dates when fetching a component suite.
func (r ReservationAPIGetRoomCalendarRequest) IncludeComponentRoomBlockOutDates(includeComponentRoomBlockOutDates bool) ReservationAPIGetRoomCalendarRequest {
	r.includeComponentRoomBlockOutDates = &includeComponentRoomBlockOutDates
	return r
}

// The starting value of the date range.
func (r ReservationAPIGetRoomCalendarRequest) StartDate(startDate string) ReservationAPIGetRoomCalendarRequest {
	r.startDate = &startDate
	return r
}

// If &#39;Y&#39;, then filter room results to rooms that are not yet assigned to guest.
func (r ReservationAPIGetRoomCalendarRequest) UnassignedRooms(unassignedRooms string) ReservationAPIGetRoomCalendarRequest {
	r.unassignedRooms = &unassignedRooms
	return r
}

// Room search filter.
func (r ReservationAPIGetRoomCalendarRequest) RoomId(roomId []string) ReservationAPIGetRoomCalendarRequest {
	r.roomId = &roomId
	return r
}

// Room Type search filter.
func (r ReservationAPIGetRoomCalendarRequest) RoomType(roomType []string) ReservationAPIGetRoomCalendarRequest {
	r.roomType = &roomType
	return r
}

// Room Class search filter.
func (r ReservationAPIGetRoomCalendarRequest) RoomClass(roomClass []string) ReservationAPIGetRoomCalendarRequest {
	r.roomClass = &roomClass
	return r
}

// Floor search filter.
func (r ReservationAPIGetRoomCalendarRequest) Floor(floor []string) ReservationAPIGetRoomCalendarRequest {
	r.floor = &floor
	return r
}

// A code representing a room feature.
func (r ReservationAPIGetRoomCalendarRequest) RoomFeature(roomFeature []string) ReservationAPIGetRoomCalendarRequest {
	r.roomFeature = &roomFeature
	return r
}

// Simple type for room status instructions to be used in requests for fetching housekeeping rooms. Valid status values are Clean, Dirty, Pickup, Inspected, OutOfOrder, OutOfService.
func (r ReservationAPIGetRoomCalendarRequest) RoomStatus(roomStatus []string) ReservationAPIGetRoomCalendarRequest {
	r.roomStatus = &roomStatus
	return r
}

// Smoking Preference filter.
func (r ReservationAPIGetRoomCalendarRequest) SmokingPreference(smokingPreference []string) ReservationAPIGetRoomCalendarRequest {
	r.smokingPreference = &smokingPreference
	return r
}

func (r ReservationAPIGetRoomCalendarRequest) BedType(bedType []string) ReservationAPIGetRoomCalendarRequest {
	r.bedType = &bedType
	return r
}

// External system code.
func (r ReservationAPIGetRoomCalendarRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetRoomCalendarRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetRoomCalendarRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetRoomCalendarRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetRoomCalendarRequest) Execute() (*RoomCalendar, *http.Response, error) {
	return r.ApiService.GetRoomCalendarExecute(r)
}

/*
GetRoomCalendar Get the room calendar

Use this API to get the room calendar for a hotel. It fetches inventory detail per rooms, the reservations assigned for a selected date range in the past or future, scheduled Out of Order or Out of Service status, room description, room attributes, room features, connecting room, etc.<p><strong>OperationId:</strong>getRoomCalendar</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetRoomCalendarRequest
*/
func (a *ReservationAPIService) GetRoomCalendar(ctx context.Context, hotelId string) ReservationAPIGetRoomCalendarRequest {
	return ReservationAPIGetRoomCalendarRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return RoomCalendar
func (a *ReservationAPIService) GetRoomCalendarExecute(r ReservationAPIGetRoomCalendarRequest) (*RoomCalendar, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RoomCalendar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetRoomCalendar")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/roomCalendar"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.advanceCheckedIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "advanceCheckedIn", r.advanceCheckedIn, "")
  }
	if r.assignedRooms != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assignedRooms", r.assignedRooms, "")
  }
	if r.componentRooms != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "componentRooms", r.componentRooms, "")
  }
	if r.connectingRoomsOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connectingRoomsOnly", r.connectingRoomsOnly, "")
  }
	if r.dueOut != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dueOut", r.dueOut, "")
  }
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
  }
	if r.isSortDescending != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isSortDescending", r.isSortDescending, "")
  }
	if r.pageIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageIndex", r.pageIndex, "")
  }
	if r.partiallyAssignedRooms != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "partiallyAssignedRooms", r.partiallyAssignedRooms, "")
  }
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recordsPerPage", r.recordsPerPage, "")
  }
	if r.roomConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomConditions", r.roomConditions, "")
  }
	if r.ownerRoomsOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ownerRoomsOnly", r.ownerRoomsOnly, "")
  }
	if r.ownerExclusiveOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ownerExclusiveOnly", r.ownerExclusiveOnly, "")
  }
	if r.sortingBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortingBy", r.sortingBy, "")
  }
	if r.includeRoomMoveHistory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeRoomMoveHistory", r.includeRoomMoveHistory, "")
  }
	if r.includeComponentRoomBlockOutDates != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeComponentRoomBlockOutDates", r.includeComponentRoomBlockOutDates, "")
  }
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
  }
	if r.unassignedRooms != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "unassignedRooms", r.unassignedRooms, "")
  }
	if r.roomId != nil {
		t := *r.roomId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomId", t, "multi")
		}
  }
	if r.roomType != nil {
		t := *r.roomType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", t, "multi")
		}
  }
	if r.roomClass != nil {
		t := *r.roomClass
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomClass", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomClass", t, "multi")
		}
  }
	if r.floor != nil {
		t := *r.floor
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "floor", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "floor", t, "multi")
		}
  }
	if r.roomFeature != nil {
		t := *r.roomFeature
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomFeature", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomFeature", t, "multi")
		}
  }
	if r.roomStatus != nil {
		t := *r.roomStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomStatus", t, "multi")
		}
  }
	if r.smokingPreference != nil {
		t := *r.smokingPreference
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "smokingPreference", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "smokingPreference", t, "multi")
		}
  }
	if r.bedType != nil {
		t := *r.bedType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "bedType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "bedType", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetRoutingInstructionsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	includeWindowRouting *bool
	includeRoomRouting *bool
	includeCompRouting *bool
	includeCompRoutingRequests *bool
	effectiveOn *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetRoutingInstructionsRequest) Authorization(authorization string) ReservationAPIGetRoutingInstructionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetRoutingInstructionsRequest) XAppKey(xAppKey string) ReservationAPIGetRoutingInstructionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetRoutingInstructionsRequest) XHotelid(xHotelid string) ReservationAPIGetRoutingInstructionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Include the window routing instructions to the response.
func (r ReservationAPIGetRoutingInstructionsRequest) IncludeWindowRouting(includeWindowRouting bool) ReservationAPIGetRoutingInstructionsRequest {
	r.includeWindowRouting = &includeWindowRouting
	return r
}

// Include the room routing instructions in the response.
func (r ReservationAPIGetRoutingInstructionsRequest) IncludeRoomRouting(includeRoomRouting bool) ReservationAPIGetRoutingInstructionsRequest {
	r.includeRoomRouting = &includeRoomRouting
	return r
}

// Include the comp routing instructions in the response.
func (r ReservationAPIGetRoutingInstructionsRequest) IncludeCompRouting(includeCompRouting bool) ReservationAPIGetRoutingInstructionsRequest {
	r.includeCompRouting = &includeCompRouting
	return r
}

// Include the comp routing requests in the response.
func (r ReservationAPIGetRoutingInstructionsRequest) IncludeCompRoutingRequests(includeCompRoutingRequests bool) ReservationAPIGetRoutingInstructionsRequest {
	r.includeCompRoutingRequests = &includeCompRoutingRequests
	return r
}

// If date is included then the search result should only be valid for dates which includes this date.
func (r ReservationAPIGetRoutingInstructionsRequest) EffectiveOn(effectiveOn string) ReservationAPIGetRoutingInstructionsRequest {
	r.effectiveOn = &effectiveOn
	return r
}

// External system code.
func (r ReservationAPIGetRoutingInstructionsRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetRoutingInstructionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetRoutingInstructionsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetRoutingInstructionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetRoutingInstructionsRequest) Execute() (*RoutingInstructions, *http.Response, error) {
	return r.ApiService.GetRoutingInstructionsExecute(r)
}

/*
GetRoutingInstructions Get routing instructions

Use this API to fetch a reservation's routing instructions. It requires a reservation ID, which can be fetched using getReservations. <p><strong>OperationId:</strong>getRoutingInstructions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetRoutingInstructionsRequest
*/
func (a *ReservationAPIService) GetRoutingInstructions(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetRoutingInstructionsRequest {
	return ReservationAPIGetRoutingInstructionsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return RoutingInstructions
func (a *ReservationAPIService) GetRoutingInstructionsExecute(r ReservationAPIGetRoutingInstructionsRequest) (*RoutingInstructions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RoutingInstructions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetRoutingInstructions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/routingInstructions"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.includeWindowRouting != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeWindowRouting", r.includeWindowRouting, "")
  }
	if r.includeRoomRouting != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeRoomRouting", r.includeRoomRouting, "")
  }
	if r.includeCompRouting != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeCompRouting", r.includeCompRouting, "")
  }
	if r.includeCompRoutingRequests != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeCompRoutingRequests", r.includeCompRoutingRequests, "")
  }
	if r.effectiveOn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "effectiveOn", r.effectiveOn, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetScriptRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	languageCode *string
	scriptType *string
	reservationId *[]string
	reservationIdType *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetScriptRequest) Authorization(authorization string) ReservationAPIGetScriptRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetScriptRequest) XAppKey(xAppKey string) ReservationAPIGetScriptRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetScriptRequest) XHotelid(xHotelid string) ReservationAPIGetScriptRequest {
	r.xHotelid = &xHotelid
	return r
}

// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
func (r ReservationAPIGetScriptRequest) LanguageCode(languageCode string) ReservationAPIGetScriptRequest {
	r.languageCode = &languageCode
	return r
}

// Used for Character Strings, length 0 to 40.
func (r ReservationAPIGetScriptRequest) ScriptType(scriptType string) ReservationAPIGetScriptRequest {
	r.scriptType = &scriptType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetScriptRequest) ReservationId(reservationId []string) ReservationAPIGetScriptRequest {
	r.reservationId = &reservationId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIGetScriptRequest) ReservationIdType(reservationIdType []string) ReservationAPIGetScriptRequest {
	r.reservationIdType = &reservationIdType
	return r
}

// External system code.
func (r ReservationAPIGetScriptRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetScriptRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetScriptRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetScriptRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetScriptRequest) Execute() (*Script, *http.Response, error) {
	return r.ApiService.GetScriptExecute(r)
}

/*
GetScript Get a script

This API will get the script for your property. <p><strong>OperationId:</strong>getScript</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetScriptRequest
*/
func (a *ReservationAPIService) GetScript(ctx context.Context, hotelId string) ReservationAPIGetScriptRequest {
	return ReservationAPIGetScriptRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Script
func (a *ReservationAPIService) GetScriptExecute(r ReservationAPIGetScriptRequest) (*Script, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Script
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetScript")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/script"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.languageCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "languageCode", r.languageCode, "")
  }
	if r.scriptType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scriptType", r.scriptType, "")
  }
	if r.reservationId != nil {
		t := *r.reservationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reservationId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reservationId", t, "multi")
		}
  }
	if r.reservationIdType != nil {
		t := *r.reservationIdType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIdType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIdType", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetSellMessageConfigRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	message *string
	roomType *[]string
	ratePlanCode *[]string
	blockId *[]string
	blockIdType *[]string
	blockCode *string
	languageCode *string
	croCode *string
	displayDate *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetSellMessageConfigRequest) Authorization(authorization string) ReservationAPIGetSellMessageConfigRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetSellMessageConfigRequest) XAppKey(xAppKey string) ReservationAPIGetSellMessageConfigRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetSellMessageConfigRequest) XHotelid(xHotelid string) ReservationAPIGetSellMessageConfigRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ReservationAPIGetSellMessageConfigRequest) Limit(limit int32) ReservationAPIGetSellMessageConfigRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ReservationAPIGetSellMessageConfigRequest) Offset(offset int32) ReservationAPIGetSellMessageConfigRequest {
	r.offset = &offset
	return r
}

// Sell Message text.
func (r ReservationAPIGetSellMessageConfigRequest) Message(message string) ReservationAPIGetSellMessageConfigRequest {
	r.message = &message
	return r
}

// Room Type.
func (r ReservationAPIGetSellMessageConfigRequest) RoomType(roomType []string) ReservationAPIGetSellMessageConfigRequest {
	r.roomType = &roomType
	return r
}

// Rate Plan code.
func (r ReservationAPIGetSellMessageConfigRequest) RatePlanCode(ratePlanCode []string) ReservationAPIGetSellMessageConfigRequest {
	r.ratePlanCode = &ratePlanCode
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetSellMessageConfigRequest) BlockId(blockId []string) ReservationAPIGetSellMessageConfigRequest {
	r.blockId = &blockId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIGetSellMessageConfigRequest) BlockIdType(blockIdType []string) ReservationAPIGetSellMessageConfigRequest {
	r.blockIdType = &blockIdType
	return r
}

// Block Code to query for.
func (r ReservationAPIGetSellMessageConfigRequest) BlockCode(blockCode string) ReservationAPIGetSellMessageConfigRequest {
	r.blockCode = &blockCode
	return r
}

// Language code for the sell message.
func (r ReservationAPIGetSellMessageConfigRequest) LanguageCode(languageCode string) ReservationAPIGetSellMessageConfigRequest {
	r.languageCode = &languageCode
	return r
}

// CRO code to query for.
func (r ReservationAPIGetSellMessageConfigRequest) CroCode(croCode string) ReservationAPIGetSellMessageConfigRequest {
	r.croCode = &croCode
	return r
}

// The date on which the fetched sell message should be active.
func (r ReservationAPIGetSellMessageConfigRequest) DisplayDate(displayDate string) ReservationAPIGetSellMessageConfigRequest {
	r.displayDate = &displayDate
	return r
}

// External system code.
func (r ReservationAPIGetSellMessageConfigRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetSellMessageConfigRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetSellMessageConfigRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetSellMessageConfigRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetSellMessageConfigRequest) Execute() (*FetchSellMessageConfig, *http.Response, error) {
	return r.ApiService.GetSellMessageConfigExecute(r)
}

/*
GetSellMessageConfig Get sell messages 

Fetch the existing sell message configuration for a property. <p><strong>OperationId:</strong>getSellMessageConfig</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetSellMessageConfigRequest
*/
func (a *ReservationAPIService) GetSellMessageConfig(ctx context.Context, hotelId string) ReservationAPIGetSellMessageConfigRequest {
	return ReservationAPIGetSellMessageConfigRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return FetchSellMessageConfig
func (a *ReservationAPIService) GetSellMessageConfigExecute(r ReservationAPIGetSellMessageConfigRequest) (*FetchSellMessageConfig, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchSellMessageConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetSellMessageConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/sellMessages/config"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.message != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "message", r.message, "")
  }
	if r.roomType != nil {
		t := *r.roomType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", t, "multi")
		}
  }
	if r.ratePlanCode != nil {
		t := *r.ratePlanCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", t, "multi")
		}
  }
	if r.blockId != nil {
		t := *r.blockId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "blockId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "blockId", t, "multi")
		}
  }
	if r.blockIdType != nil {
		t := *r.blockIdType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "blockIdType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "blockIdType", t, "multi")
		}
  }
	if r.blockCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blockCode", r.blockCode, "")
  }
	if r.languageCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "languageCode", r.languageCode, "")
  }
	if r.croCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "croCode", r.croCode, "")
  }
	if r.displayDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayDate", r.displayDate, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetSellMessageConfigByChainRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	message *string
	roomType *[]string
	ratePlanCode *[]string
	blockId *[]string
	blockIdType *[]string
	blockCode *string
	languageCode *string
	hotelIds *[]string
	chainId *string
	croCode *string
	displayDate *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetSellMessageConfigByChainRequest) Authorization(authorization string) ReservationAPIGetSellMessageConfigByChainRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetSellMessageConfigByChainRequest) XAppKey(xAppKey string) ReservationAPIGetSellMessageConfigByChainRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetSellMessageConfigByChainRequest) XHotelid(xHotelid string) ReservationAPIGetSellMessageConfigByChainRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ReservationAPIGetSellMessageConfigByChainRequest) Limit(limit int32) ReservationAPIGetSellMessageConfigByChainRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ReservationAPIGetSellMessageConfigByChainRequest) Offset(offset int32) ReservationAPIGetSellMessageConfigByChainRequest {
	r.offset = &offset
	return r
}

// Sell Message text.
func (r ReservationAPIGetSellMessageConfigByChainRequest) Message(message string) ReservationAPIGetSellMessageConfigByChainRequest {
	r.message = &message
	return r
}

// Room Type.
func (r ReservationAPIGetSellMessageConfigByChainRequest) RoomType(roomType []string) ReservationAPIGetSellMessageConfigByChainRequest {
	r.roomType = &roomType
	return r
}

// Rate Plan code.
func (r ReservationAPIGetSellMessageConfigByChainRequest) RatePlanCode(ratePlanCode []string) ReservationAPIGetSellMessageConfigByChainRequest {
	r.ratePlanCode = &ratePlanCode
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetSellMessageConfigByChainRequest) BlockId(blockId []string) ReservationAPIGetSellMessageConfigByChainRequest {
	r.blockId = &blockId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIGetSellMessageConfigByChainRequest) BlockIdType(blockIdType []string) ReservationAPIGetSellMessageConfigByChainRequest {
	r.blockIdType = &blockIdType
	return r
}

// Block Code to query for.
func (r ReservationAPIGetSellMessageConfigByChainRequest) BlockCode(blockCode string) ReservationAPIGetSellMessageConfigByChainRequest {
	r.blockCode = &blockCode
	return r
}

// Language code for the sell message.
func (r ReservationAPIGetSellMessageConfigByChainRequest) LanguageCode(languageCode string) ReservationAPIGetSellMessageConfigByChainRequest {
	r.languageCode = &languageCode
	return r
}

// Hotel code.
func (r ReservationAPIGetSellMessageConfigByChainRequest) HotelIds(hotelIds []string) ReservationAPIGetSellMessageConfigByChainRequest {
	r.hotelIds = &hotelIds
	return r
}

// Chain code to query for.
func (r ReservationAPIGetSellMessageConfigByChainRequest) ChainId(chainId string) ReservationAPIGetSellMessageConfigByChainRequest {
	r.chainId = &chainId
	return r
}

// CRO code to query for.
func (r ReservationAPIGetSellMessageConfigByChainRequest) CroCode(croCode string) ReservationAPIGetSellMessageConfigByChainRequest {
	r.croCode = &croCode
	return r
}

// The date on which the fetched sell message should be active.
func (r ReservationAPIGetSellMessageConfigByChainRequest) DisplayDate(displayDate string) ReservationAPIGetSellMessageConfigByChainRequest {
	r.displayDate = &displayDate
	return r
}

// External system code.
func (r ReservationAPIGetSellMessageConfigByChainRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetSellMessageConfigByChainRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetSellMessageConfigByChainRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetSellMessageConfigByChainRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetSellMessageConfigByChainRequest) Execute() (*FetchSellMessageConfig, *http.Response, error) {
	return r.ApiService.GetSellMessageConfigByChainExecute(r)
}

/*
GetSellMessageConfigByChain Get sell messages by chain

Fetch the existing sell message configuration. <p><strong>OperationId:</strong>getSellMessageConfigByChain</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReservationAPIGetSellMessageConfigByChainRequest
*/
func (a *ReservationAPIService) GetSellMessageConfigByChain(ctx context.Context) ReservationAPIGetSellMessageConfigByChainRequest {
	return ReservationAPIGetSellMessageConfigByChainRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FetchSellMessageConfig
func (a *ReservationAPIService) GetSellMessageConfigByChainExecute(r ReservationAPIGetSellMessageConfigByChainRequest) (*FetchSellMessageConfig, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchSellMessageConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetSellMessageConfigByChain")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sellMessages/config"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.message != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "message", r.message, "")
  }
	if r.roomType != nil {
		t := *r.roomType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", t, "multi")
		}
  }
	if r.ratePlanCode != nil {
		t := *r.ratePlanCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", t, "multi")
		}
  }
	if r.blockId != nil {
		t := *r.blockId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "blockId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "blockId", t, "multi")
		}
  }
	if r.blockIdType != nil {
		t := *r.blockIdType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "blockIdType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "blockIdType", t, "multi")
		}
  }
	if r.blockCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blockCode", r.blockCode, "")
  }
	if r.languageCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "languageCode", r.languageCode, "")
  }
	if r.hotelIds != nil {
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
  }
	if r.chainId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chainId", r.chainId, "")
  }
	if r.croCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "croCode", r.croCode, "")
  }
	if r.displayDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayDate", r.displayDate, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetSellMessagesRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	croCode *string
	hotelId *string
	criteriaId *string
	criteriaIdType *string
	limit *int32
	ratePlanCode *string
	roomType *string
	stickyFlagYn *string
	criteriaType *string
	startDate *string
	endDate *string
	duration *string
	fetchInstructions *[]string
	usedInModule *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetSellMessagesRequest) Authorization(authorization string) ReservationAPIGetSellMessagesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetSellMessagesRequest) XAppKey(xAppKey string) ReservationAPIGetSellMessagesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetSellMessagesRequest) XHotelid(xHotelid string) ReservationAPIGetSellMessagesRequest {
	r.xHotelid = &xHotelid
	return r
}

// This is the Central Reservation office code.
func (r ReservationAPIGetSellMessagesRequest) CroCode(croCode string) ReservationAPIGetSellMessagesRequest {
	r.croCode = &croCode
	return r
}

// This is the hotel code or resort.
func (r ReservationAPIGetSellMessagesRequest) HotelId(hotelId string) ReservationAPIGetSellMessagesRequest {
	r.hotelId = &hotelId
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetSellMessagesRequest) CriteriaId(criteriaId string) ReservationAPIGetSellMessagesRequest {
	r.criteriaId = &criteriaId
	return r
}

// This is the language code.
func (r ReservationAPIGetSellMessagesRequest) CriteriaIdType(criteriaIdType string) ReservationAPIGetSellMessagesRequest {
	r.criteriaIdType = &criteriaIdType
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ReservationAPIGetSellMessagesRequest) Limit(limit int32) ReservationAPIGetSellMessagesRequest {
	r.limit = &limit
	return r
}

// This represents the rate plan code of the room type.
func (r ReservationAPIGetSellMessagesRequest) RatePlanCode(ratePlanCode string) ReservationAPIGetSellMessagesRequest {
	r.ratePlanCode = &ratePlanCode
	return r
}

// This represents the room type code.
func (r ReservationAPIGetSellMessagesRequest) RoomType(roomType string) ReservationAPIGetSellMessagesRequest {
	r.roomType = &roomType
	return r
}

// Flag which tells if this message is Sticky (Y/N).
func (r ReservationAPIGetSellMessagesRequest) StickyFlagYn(stickyFlagYn string) ReservationAPIGetSellMessagesRequest {
	r.stickyFlagYn = &stickyFlagYn
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIGetSellMessagesRequest) CriteriaType(criteriaType string) ReservationAPIGetSellMessagesRequest {
	r.criteriaType = &criteriaType
	return r
}

func (r ReservationAPIGetSellMessagesRequest) StartDate(startDate string) ReservationAPIGetSellMessagesRequest {
	r.startDate = &startDate
	return r
}

func (r ReservationAPIGetSellMessagesRequest) EndDate(endDate string) ReservationAPIGetSellMessagesRequest {
	r.endDate = &endDate
	return r
}

func (r ReservationAPIGetSellMessagesRequest) Duration(duration string) ReservationAPIGetSellMessagesRequest {
	r.duration = &duration
	return r
}

// Instruction to fetch all Room Type sell messages configured.
func (r ReservationAPIGetSellMessagesRequest) FetchInstructions(fetchInstructions []string) ReservationAPIGetSellMessagesRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// This represents the moduleType of the SellMessages to be fetched.
func (r ReservationAPIGetSellMessagesRequest) UsedInModule(usedInModule string) ReservationAPIGetSellMessagesRequest {
	r.usedInModule = &usedInModule
	return r
}

// External system code.
func (r ReservationAPIGetSellMessagesRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetSellMessagesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetSellMessagesRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetSellMessagesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetSellMessagesRequest) Execute() (*SellMessages, *http.Response, error) {
	return r.ApiService.GetSellMessagesExecute(r)
}

/*
GetSellMessages Get sell messages

Fetch the configured sell messages for a property. <p><strong>OperationId:</strong>getSellMessages</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReservationAPIGetSellMessagesRequest
*/
func (a *ReservationAPIService) GetSellMessages(ctx context.Context) ReservationAPIGetSellMessagesRequest {
	return ReservationAPIGetSellMessagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SellMessages
func (a *ReservationAPIService) GetSellMessagesExecute(r ReservationAPIGetSellMessagesRequest) (*SellMessages, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SellMessages
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetSellMessages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sellMessages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.croCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "croCode", r.croCode, "")
  }
	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
  }
	if r.criteriaId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "criteriaId", r.criteriaId, "")
  }
	if r.criteriaIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "criteriaIdType", r.criteriaIdType, "")
  }
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.ratePlanCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ratePlanCode", r.ratePlanCode, "")
  }
	if r.roomType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", r.roomType, "")
  }
	if r.stickyFlagYn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stickyFlagYn", r.stickyFlagYn, "")
  }
	if r.criteriaType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "criteriaType", r.criteriaType, "")
  }
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
  }
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
  }
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
  }
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
  }
	if r.usedInModule != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "usedInModule", r.usedInModule, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetShareReservationsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetShareReservationsRequest) Authorization(authorization string) ReservationAPIGetShareReservationsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetShareReservationsRequest) XAppKey(xAppKey string) ReservationAPIGetShareReservationsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetShareReservationsRequest) XHotelid(xHotelid string) ReservationAPIGetShareReservationsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIGetShareReservationsRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetShareReservationsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetShareReservationsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetShareReservationsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetShareReservationsRequest) Execute() (*ShareReservations, *http.Response, error) {
	return r.ApiService.GetShareReservationsExecute(r)
}

/*
GetShareReservations Get share Reservations

This API can be used to retrieve the share reservations that exist on a reservation. <p><strong>OperationId:</strong>getShareReservations</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetShareReservationsRequest
*/
func (a *ReservationAPIService) GetShareReservations(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetShareReservationsRequest {
	return ReservationAPIGetShareReservationsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ShareReservations
func (a *ReservationAPIService) GetShareReservationsExecute(r ReservationAPIGetShareReservationsRequest) (*ShareReservations, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ShareReservations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetShareReservations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/shares"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetShareReservationsByExtIdRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationExternalId string
	externalSystemCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetShareReservationsByExtIdRequest) Authorization(authorization string) ReservationAPIGetShareReservationsByExtIdRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetShareReservationsByExtIdRequest) XAppKey(xAppKey string) ReservationAPIGetShareReservationsByExtIdRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetShareReservationsByExtIdRequest) XHotelid(xHotelid string) ReservationAPIGetShareReservationsByExtIdRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIGetShareReservationsByExtIdRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetShareReservationsByExtIdRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetShareReservationsByExtIdRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetShareReservationsByExtIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetShareReservationsByExtIdRequest) Execute() (*ShareReservations, *http.Response, error) {
	return r.ApiService.GetShareReservationsByExtIdExecute(r)
}

/*
GetShareReservationsByExtId Get share Reservations

This API can be used to retrieve the share reservations that exist on a reservation. <p><strong>OperationId:</strong>getShareReservationsByExtId</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationExternalId External reservation ID.
 @param externalSystemCode Code to identify the external system from which the request is coming. This is the ExternalSystem ID used to exchange information between OPERA and the external system.
 @param hotelId Unique ID of the hotel where reservation is searched based on external reservation ID.
 @return ReservationAPIGetShareReservationsByExtIdRequest
*/
func (a *ReservationAPIService) GetShareReservationsByExtId(ctx context.Context, reservationExternalId string, externalSystemCode string, hotelId string) ReservationAPIGetShareReservationsByExtIdRequest {
	return ReservationAPIGetShareReservationsByExtIdRequest{
		ApiService: a,
		ctx: ctx,
		reservationExternalId: reservationExternalId,
		externalSystemCode: externalSystemCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ShareReservations
func (a *ReservationAPIService) GetShareReservationsByExtIdExecute(r ReservationAPIGetShareReservationsByExtIdRequest) (*ShareReservations, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ShareReservations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetShareReservationsByExtId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/shares"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationExternalId"+"}", url.PathEscape(parameterValueToString(r.reservationExternalId, "reservationExternalId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalSystemCode"+"}", url.PathEscape(parameterValueToString(r.externalSystemCode, "externalSystemCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationExternalId) < 1 {
		return localVarReturnValue, nil, reportError("reservationExternalId must have at least 1 elements")
	}
	if strlen(r.reservationExternalId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationExternalId must have less than 2000 elements")
	}
	if strlen(r.externalSystemCode) < 1 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have at least 1 elements")
	}
	if strlen(r.externalSystemCode) > 2000 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetTicketsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	packageCode *string
	retrieveIssuedOnly *bool
	retrieveNotIssuedOnly *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetTicketsRequest) Authorization(authorization string) ReservationAPIGetTicketsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetTicketsRequest) XAppKey(xAppKey string) ReservationAPIGetTicketsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetTicketsRequest) XHotelid(xHotelid string) ReservationAPIGetTicketsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Property where the tickets messages belongs to.
func (r ReservationAPIGetTicketsRequest) PackageCode(packageCode string) ReservationAPIGetTicketsRequest {
	r.packageCode = &packageCode
	return r
}

// Flag that specified if only issued tickets will be retrieved.
func (r ReservationAPIGetTicketsRequest) RetrieveIssuedOnly(retrieveIssuedOnly bool) ReservationAPIGetTicketsRequest {
	r.retrieveIssuedOnly = &retrieveIssuedOnly
	return r
}

// Flag that specified if only not issued tickets will be retrieved.
func (r ReservationAPIGetTicketsRequest) RetrieveNotIssuedOnly(retrieveNotIssuedOnly bool) ReservationAPIGetTicketsRequest {
	r.retrieveNotIssuedOnly = &retrieveNotIssuedOnly
	return r
}

// External system code.
func (r ReservationAPIGetTicketsRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetTicketsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetTicketsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetTicketsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetTicketsRequest) Execute() (*Tickets, *http.Response, error) {
	return r.ApiService.GetTicketsExecute(r)
}

/*
GetTickets Get tickets

Get tickets for a reservation. <p><strong>OperationId:</strong>getTickets</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetTicketsRequest
*/
func (a *ReservationAPIService) GetTickets(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetTicketsRequest {
	return ReservationAPIGetTicketsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Tickets
func (a *ReservationAPIService) GetTicketsExecute(r ReservationAPIGetTicketsRequest) (*Tickets, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Tickets
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetTickets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/tickets"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.packageCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "packageCode", r.packageCode, "")
  }
	if r.retrieveIssuedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retrieveIssuedOnly", r.retrieveIssuedOnly, "")
  }
	if r.retrieveNotIssuedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "retrieveNotIssuedOnly", r.retrieveNotIssuedOnly, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetTicketsInquiryRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	ticketId *string
	ticketIdType *string
	packageCode *[]string
	reservationProductId *string
	reservationProductIdType *string
	ticketNumberId *string
	ticketNumberIdType *string
	ticketIssueDate *[]string
	ticketConsumptionDate *[]string
	ticketRateCode *[]string
	ticketStatus *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetTicketsInquiryRequest) Authorization(authorization string) ReservationAPIGetTicketsInquiryRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetTicketsInquiryRequest) XAppKey(xAppKey string) ReservationAPIGetTicketsInquiryRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetTicketsInquiryRequest) XHotelid(xHotelid string) ReservationAPIGetTicketsInquiryRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetTicketsInquiryRequest) TicketId(ticketId string) ReservationAPIGetTicketsInquiryRequest {
	r.ticketId = &ticketId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIGetTicketsInquiryRequest) TicketIdType(ticketIdType string) ReservationAPIGetTicketsInquiryRequest {
	r.ticketIdType = &ticketIdType
	return r
}

// Package Code.
func (r ReservationAPIGetTicketsInquiryRequest) PackageCode(packageCode []string) ReservationAPIGetTicketsInquiryRequest {
	r.packageCode = &packageCode
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetTicketsInquiryRequest) ReservationProductId(reservationProductId string) ReservationAPIGetTicketsInquiryRequest {
	r.reservationProductId = &reservationProductId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIGetTicketsInquiryRequest) ReservationProductIdType(reservationProductIdType string) ReservationAPIGetTicketsInquiryRequest {
	r.reservationProductIdType = &reservationProductIdType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ReservationAPIGetTicketsInquiryRequest) TicketNumberId(ticketNumberId string) ReservationAPIGetTicketsInquiryRequest {
	r.ticketNumberId = &ticketNumberId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ReservationAPIGetTicketsInquiryRequest) TicketNumberIdType(ticketNumberIdType string) ReservationAPIGetTicketsInquiryRequest {
	r.ticketNumberIdType = &ticketNumberIdType
	return r
}

// Tickets issue date.
func (r ReservationAPIGetTicketsInquiryRequest) TicketIssueDate(ticketIssueDate []string) ReservationAPIGetTicketsInquiryRequest {
	r.ticketIssueDate = &ticketIssueDate
	return r
}

// Tickets comsumption date.
func (r ReservationAPIGetTicketsInquiryRequest) TicketConsumptionDate(ticketConsumptionDate []string) ReservationAPIGetTicketsInquiryRequest {
	r.ticketConsumptionDate = &ticketConsumptionDate
	return r
}

// The Rate Code to which tickets belong to.
func (r ReservationAPIGetTicketsInquiryRequest) TicketRateCode(ticketRateCode []string) ReservationAPIGetTicketsInquiryRequest {
	r.ticketRateCode = &ticketRateCode
	return r
}

// The Status Code for outbound WS call.
func (r ReservationAPIGetTicketsInquiryRequest) TicketStatus(ticketStatus []string) ReservationAPIGetTicketsInquiryRequest {
	r.ticketStatus = &ticketStatus
	return r
}

// External system code.
func (r ReservationAPIGetTicketsInquiryRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetTicketsInquiryRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetTicketsInquiryRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetTicketsInquiryRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetTicketsInquiryRequest) Execute() (*Tickets, *http.Response, error) {
	return r.ApiService.GetTicketsInquiryExecute(r)
}

/*
GetTicketsInquiry Inquiry for Reservation tickets

You can use this API to perform a Inquiry for Reservation tickets. <p><strong>OperationId:</strong>getTicketsInquiry</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetTicketsInquiryRequest
*/
func (a *ReservationAPIService) GetTicketsInquiry(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetTicketsInquiryRequest {
	return ReservationAPIGetTicketsInquiryRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Tickets
func (a *ReservationAPIService) GetTicketsInquiryExecute(r ReservationAPIGetTicketsInquiryRequest) (*Tickets, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Tickets
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetTicketsInquiry")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/tickets/inquiry"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.ticketId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ticketId", r.ticketId, "")
  }
	if r.ticketIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ticketIdType", r.ticketIdType, "")
  }
	if r.packageCode != nil {
		t := *r.packageCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "packageCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "packageCode", t, "multi")
		}
  }
	if r.reservationProductId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationProductId", r.reservationProductId, "")
  }
	if r.reservationProductIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationProductIdType", r.reservationProductIdType, "")
  }
	if r.ticketNumberId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ticketNumberId", r.ticketNumberId, "")
  }
	if r.ticketNumberIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ticketNumberIdType", r.ticketNumberIdType, "")
  }
	if r.ticketIssueDate != nil {
		t := *r.ticketIssueDate
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ticketIssueDate", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ticketIssueDate", t, "multi")
		}
  }
	if r.ticketConsumptionDate != nil {
		t := *r.ticketConsumptionDate
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ticketConsumptionDate", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ticketConsumptionDate", t, "multi")
		}
  }
	if r.ticketRateCode != nil {
		t := *r.ticketRateCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ticketRateCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ticketRateCode", t, "multi")
		}
  }
	if r.ticketStatus != nil {
		t := *r.ticketStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ticketStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ticketStatus", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetTracesByReservationRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetTracesByReservationRequest) Authorization(authorization string) ReservationAPIGetTracesByReservationRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetTracesByReservationRequest) XAppKey(xAppKey string) ReservationAPIGetTracesByReservationRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetTracesByReservationRequest) XHotelid(xHotelid string) ReservationAPIGetTracesByReservationRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIGetTracesByReservationRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetTracesByReservationRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetTracesByReservationRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetTracesByReservationRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetTracesByReservationRequest) Execute() (*Traces, *http.Response, error) {
	return r.ApiService.GetTracesByReservationExecute(r)
}

/*
GetTracesByReservation Get traces for a Reservation

You can use this API to get traces for a Reservation. <p><strong>OperationId:</strong>getTracesByReservation</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetTracesByReservationRequest
*/
func (a *ReservationAPIService) GetTracesByReservation(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetTracesByReservationRequest {
	return ReservationAPIGetTracesByReservationRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Traces
func (a *ReservationAPIService) GetTracesByReservationExecute(r ReservationAPIGetTracesByReservationRequest) (*Traces, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Traces
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetTracesByReservation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/traces"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetTracesByRoomRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	roomId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetTracesByRoomRequest) Authorization(authorization string) ReservationAPIGetTracesByRoomRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetTracesByRoomRequest) XAppKey(xAppKey string) ReservationAPIGetTracesByRoomRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetTracesByRoomRequest) XHotelid(xHotelid string) ReservationAPIGetTracesByRoomRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ReservationAPIGetTracesByRoomRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetTracesByRoomRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetTracesByRoomRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetTracesByRoomRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetTracesByRoomRequest) Execute() (*Traces, *http.Response, error) {
	return r.ApiService.GetTracesByRoomExecute(r)
}

/*
GetTracesByRoom Get traces for a Room

This API will fetch the traces for a Room. <p><strong>OperationId:</strong>getTracesByRoom</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roomId Room Id
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetTracesByRoomRequest
*/
func (a *ReservationAPIService) GetTracesByRoom(ctx context.Context, roomId string, hotelId string) ReservationAPIGetTracesByRoomRequest {
	return ReservationAPIGetTracesByRoomRequest{
		ApiService: a,
		ctx: ctx,
		roomId: roomId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Traces
func (a *ReservationAPIService) GetTracesByRoomExecute(r ReservationAPIGetTracesByRoomRequest) (*Traces, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Traces
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetTracesByRoom")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rooms/{roomId}/traces"
	localVarPath = strings.Replace(localVarPath, "{"+"roomId"+"}", url.PathEscape(parameterValueToString(r.roomId, "roomId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.roomId) < 1 {
		return localVarReturnValue, nil, reportError("roomId must have at least 1 elements")
	}
	if strlen(r.roomId) > 2000 {
		return localVarReturnValue, nil, reportError("roomId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetTransactionDiversionsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	transactionDiversionCodes *[]string
	includeDailyDetails *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetTransactionDiversionsRequest) Authorization(authorization string) ReservationAPIGetTransactionDiversionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetTransactionDiversionsRequest) XAppKey(xAppKey string) ReservationAPIGetTransactionDiversionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetTransactionDiversionsRequest) XHotelid(xHotelid string) ReservationAPIGetTransactionDiversionsRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r ReservationAPIGetTransactionDiversionsRequest) TransactionDiversionCodes(transactionDiversionCodes []string) ReservationAPIGetTransactionDiversionsRequest {
	r.transactionDiversionCodes = &transactionDiversionCodes
	return r
}

// Flag to check if the the daily details are required to be fetched for a particular transaciton.
func (r ReservationAPIGetTransactionDiversionsRequest) IncludeDailyDetails(includeDailyDetails bool) ReservationAPIGetTransactionDiversionsRequest {
	r.includeDailyDetails = &includeDailyDetails
	return r
}

// External system code.
func (r ReservationAPIGetTransactionDiversionsRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetTransactionDiversionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetTransactionDiversionsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetTransactionDiversionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetTransactionDiversionsRequest) Execute() (*TransactionDiversions, *http.Response, error) {
	return r.ApiService.GetTransactionDiversionsExecute(r)
}

/*
GetTransactionDiversions Get Transaction Diversions 

You can use this API to get Transaction Diversions. <p><strong>OperationId:</strong>getTransactionDiversions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetTransactionDiversionsRequest
*/
func (a *ReservationAPIService) GetTransactionDiversions(ctx context.Context, reservationId string, hotelId string) ReservationAPIGetTransactionDiversionsRequest {
	return ReservationAPIGetTransactionDiversionsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return TransactionDiversions
func (a *ReservationAPIService) GetTransactionDiversionsExecute(r ReservationAPIGetTransactionDiversionsRequest) (*TransactionDiversions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionDiversions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetTransactionDiversions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/transactionDiversions"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.transactionDiversionCodes != nil {
		t := *r.transactionDiversionCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "transactionDiversionCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "transactionDiversionCodes", t, "multi")
		}
  }
	if r.includeDailyDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeDailyDetails", r.includeDailyDetails, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIGetUpgradeEligibilityReservationsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	arrivalEndDate *string
	arrivalStartDate *string
	membershipType *string
	externalReferenceType *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIGetUpgradeEligibilityReservationsRequest) Authorization(authorization string) ReservationAPIGetUpgradeEligibilityReservationsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIGetUpgradeEligibilityReservationsRequest) XAppKey(xAppKey string) ReservationAPIGetUpgradeEligibilityReservationsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIGetUpgradeEligibilityReservationsRequest) XHotelid(xHotelid string) ReservationAPIGetUpgradeEligibilityReservationsRequest {
	r.xHotelid = &xHotelid
	return r
}

// The ending value of the date range.
func (r ReservationAPIGetUpgradeEligibilityReservationsRequest) ArrivalEndDate(arrivalEndDate string) ReservationAPIGetUpgradeEligibilityReservationsRequest {
	r.arrivalEndDate = &arrivalEndDate
	return r
}

// The starting value of the date range.
func (r ReservationAPIGetUpgradeEligibilityReservationsRequest) ArrivalStartDate(arrivalStartDate string) ReservationAPIGetUpgradeEligibilityReservationsRequest {
	r.arrivalStartDate = &arrivalStartDate
	return r
}

// Membership Type.
func (r ReservationAPIGetUpgradeEligibilityReservationsRequest) MembershipType(membershipType string) ReservationAPIGetUpgradeEligibilityReservationsRequest {
	r.membershipType = &membershipType
	return r
}

// Type of the desired reservation external confirmation number.
func (r ReservationAPIGetUpgradeEligibilityReservationsRequest) ExternalReferenceType(externalReferenceType string) ReservationAPIGetUpgradeEligibilityReservationsRequest {
	r.externalReferenceType = &externalReferenceType
	return r
}

// External system code.
func (r ReservationAPIGetUpgradeEligibilityReservationsRequest) XExternalsystem(xExternalsystem string) ReservationAPIGetUpgradeEligibilityReservationsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIGetUpgradeEligibilityReservationsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIGetUpgradeEligibilityReservationsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIGetUpgradeEligibilityReservationsRequest) Execute() (*UpgradeEligibilityReservations, *http.Response, error) {
	return r.ApiService.GetUpgradeEligibilityReservationsExecute(r)
}

/*
GetUpgradeEligibilityReservations Fetch Reservations Eligible for an Upgrade

You can use this API to fetch Reservations Eligible for an Upgrade. <p><strong>OperationId:</strong>getUpgradeEligibilityReservations</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIGetUpgradeEligibilityReservationsRequest
*/
func (a *ReservationAPIService) GetUpgradeEligibilityReservations(ctx context.Context, hotelId string) ReservationAPIGetUpgradeEligibilityReservationsRequest {
	return ReservationAPIGetUpgradeEligibilityReservationsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return UpgradeEligibilityReservations
func (a *ReservationAPIService) GetUpgradeEligibilityReservationsExecute(r ReservationAPIGetUpgradeEligibilityReservationsRequest) (*UpgradeEligibilityReservations, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpgradeEligibilityReservations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.GetUpgradeEligibilityReservations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/upgradeEligibleReservations"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.arrivalEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalEndDate", r.arrivalEndDate, "")
  }
	if r.arrivalStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalStartDate", r.arrivalStartDate, "")
  }
	if r.membershipType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipType", r.membershipType, "")
  }
	if r.externalReferenceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "externalReferenceType", r.externalReferenceType, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIMergeReservationsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationsToMerge *ReservationsToMerge
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIMergeReservationsRequest) Authorization(authorization string) ReservationAPIMergeReservationsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIMergeReservationsRequest) XAppKey(xAppKey string) ReservationAPIMergeReservationsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIMergeReservationsRequest) XHotelid(xHotelid string) ReservationAPIMergeReservationsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request method to Merge reservations.
func (r ReservationAPIMergeReservationsRequest) ReservationsToMerge(reservationsToMerge ReservationsToMerge) ReservationAPIMergeReservationsRequest {
	r.reservationsToMerge = &reservationsToMerge
	return r
}

// External system code.
func (r ReservationAPIMergeReservationsRequest) XExternalsystem(xExternalsystem string) ReservationAPIMergeReservationsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIMergeReservationsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIMergeReservationsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIMergeReservationsRequest) Execute() (*MergeReservationsStatus, *http.Response, error) {
	return r.ApiService.MergeReservationsExecute(r)
}

/*
MergeReservations Merge multiple Reservations

Use this API to merge multiple reservations. <p><strong>OperationId:</strong>mergeReservations</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIMergeReservationsRequest
*/
func (a *ReservationAPIService) MergeReservations(ctx context.Context, reservationId string, hotelId string) ReservationAPIMergeReservationsRequest {
	return ReservationAPIMergeReservationsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return MergeReservationsStatus
func (a *ReservationAPIService) MergeReservationsExecute(r ReservationAPIMergeReservationsRequest) (*MergeReservationsStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MergeReservationsStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.MergeReservations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/mergeReservations"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationsToMerge
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostBreakReservationLockRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationLock *ReservationLock
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostBreakReservationLockRequest) Authorization(authorization string) ReservationAPIPostBreakReservationLockRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostBreakReservationLockRequest) XAppKey(xAppKey string) ReservationAPIPostBreakReservationLockRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostBreakReservationLockRequest) XHotelid(xHotelid string) ReservationAPIPostBreakReservationLockRequest {
	r.xHotelid = &xHotelid
	return r
}

// Operation for forcefully breaking a reservation lock This operation is subject to user permissions.
func (r ReservationAPIPostBreakReservationLockRequest) ReservationLock(reservationLock ReservationLock) ReservationAPIPostBreakReservationLockRequest {
	r.reservationLock = &reservationLock
	return r
}

// External system code.
func (r ReservationAPIPostBreakReservationLockRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostBreakReservationLockRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostBreakReservationLockRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostBreakReservationLockRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostBreakReservationLockRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostBreakReservationLockExecute(r)
}

/*
PostBreakReservationLock Break Reservation lock

Break Reservation lock on a reservation. <p><strong>OperationId:</strong>postBreakReservationLock</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostBreakReservationLockRequest
*/
func (a *ReservationAPIService) PostBreakReservationLock(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostBreakReservationLockRequest {
	return ReservationAPIPostBreakReservationLockRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostBreakReservationLockExecute(r ReservationAPIPostBreakReservationLockRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostBreakReservationLock")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/locks/break"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationLock
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostBulkReservationAlertsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationAlerts *ReservationAlerts
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostBulkReservationAlertsRequest) Authorization(authorization string) ReservationAPIPostBulkReservationAlertsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostBulkReservationAlertsRequest) XAppKey(xAppKey string) ReservationAPIPostBulkReservationAlertsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostBulkReservationAlertsRequest) XHotelid(xHotelid string) ReservationAPIPostBulkReservationAlertsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to create or update multiple alerts information for multiple reservations in bulk.
func (r ReservationAPIPostBulkReservationAlertsRequest) ReservationAlerts(reservationAlerts ReservationAlerts) ReservationAPIPostBulkReservationAlertsRequest {
	r.reservationAlerts = &reservationAlerts
	return r
}

// External system code.
func (r ReservationAPIPostBulkReservationAlertsRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostBulkReservationAlertsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostBulkReservationAlertsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostBulkReservationAlertsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostBulkReservationAlertsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostBulkReservationAlertsExecute(r)
}

/*
PostBulkReservationAlerts Create Bulk Reservation Alerts

Create or updates multiple alerts for multiple reservations in bulk. <p><strong>OperationId:</strong>postBulkReservationAlerts</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostBulkReservationAlertsRequest
*/
func (a *ReservationAPIService) PostBulkReservationAlerts(ctx context.Context, hotelId string) ReservationAPIPostBulkReservationAlertsRequest {
	return ReservationAPIPostBulkReservationAlertsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostBulkReservationAlertsExecute(r ReservationAPIPostBulkReservationAlertsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostBulkReservationAlerts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/alerts"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationAlerts
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostCallRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	registerCall *RegisterCall
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostCallRequest) Authorization(authorization string) ReservationAPIPostCallRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostCallRequest) XAppKey(xAppKey string) ReservationAPIPostCallRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostCallRequest) XHotelid(xHotelid string) ReservationAPIPostCallRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to register call. Either creates a new call or updates an existing call.
func (r ReservationAPIPostCallRequest) RegisterCall(registerCall RegisterCall) ReservationAPIPostCallRequest {
	r.registerCall = &registerCall
	return r
}

// External system code.
func (r ReservationAPIPostCallRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostCallRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostCallRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostCallRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostCallRequest) Execute() (*RegisterCall, *http.Response, error) {
	return r.ApiService.PostCallExecute(r)
}

/*
PostCall Register calls

Use this API to request a new call or make updates to an existing call.<p><strong>OperationId:</strong>postCall</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReservationAPIPostCallRequest
*/
func (a *ReservationAPIService) PostCall(ctx context.Context) ReservationAPIPostCallRequest {
	return ReservationAPIPostCallRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RegisterCall
func (a *ReservationAPIService) PostCallExecute(r ReservationAPIPostCallRequest) (*RegisterCall, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RegisterCall
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostCall")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/calls"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.registerCall
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostCancelReservationRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	cancelReservation *PostCancelReservationRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostCancelReservationRequest) Authorization(authorization string) ReservationAPIPostCancelReservationRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostCancelReservationRequest) XAppKey(xAppKey string) ReservationAPIPostCancelReservationRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostCancelReservationRequest) XHotelid(xHotelid string) ReservationAPIPostCancelReservationRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for canceling reservations.
func (r ReservationAPIPostCancelReservationRequest) CancelReservation(cancelReservation PostCancelReservationRequest) ReservationAPIPostCancelReservationRequest {
	r.cancelReservation = &cancelReservation
	return r
}

// External system code.
func (r ReservationAPIPostCancelReservationRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostCancelReservationRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostCancelReservationRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostCancelReservationRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostCancelReservationRequest) Execute() (*CancelReservationDetails, *http.Response, error) {
	return r.ApiService.PostCancelReservationExecute(r)
}

/*
PostCancelReservation Cancel Reservation by ID

Use this if a guest would like to cancel their reservation.  You will receive a cancellation number in the response. <p><strong>OperationId:</strong>postCancelReservation</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostCancelReservationRequest
*/
func (a *ReservationAPIService) PostCancelReservation(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostCancelReservationRequest {
	return ReservationAPIPostCancelReservationRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CancelReservationDetails
func (a *ReservationAPIService) PostCancelReservationExecute(r ReservationAPIPostCancelReservationRequest) (*CancelReservationDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CancelReservationDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostCancelReservation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/cancellations"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.cancelReservation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostCancelReservationByExtIdRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationExternalId string
	externalSystemCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	cancelReservation *CancelReservation
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostCancelReservationByExtIdRequest) Authorization(authorization string) ReservationAPIPostCancelReservationByExtIdRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostCancelReservationByExtIdRequest) XAppKey(xAppKey string) ReservationAPIPostCancelReservationByExtIdRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostCancelReservationByExtIdRequest) XHotelid(xHotelid string) ReservationAPIPostCancelReservationByExtIdRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for canceling reservations.
func (r ReservationAPIPostCancelReservationByExtIdRequest) CancelReservation(cancelReservation CancelReservation) ReservationAPIPostCancelReservationByExtIdRequest {
	r.cancelReservation = &cancelReservation
	return r
}

// External system code.
func (r ReservationAPIPostCancelReservationByExtIdRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostCancelReservationByExtIdRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostCancelReservationByExtIdRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostCancelReservationByExtIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostCancelReservationByExtIdRequest) Execute() (*CancelReservationDetails, *http.Response, error) {
	return r.ApiService.PostCancelReservationByExtIdExecute(r)
}

/*
PostCancelReservationByExtId Cancel Reservation by ID

Use this if a guest would like to cancel their reservation.  You will receive a cancellation number in the response. <p><strong>OperationId:</strong>postCancelReservationByExtId</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationExternalId External reservation ID.
 @param externalSystemCode Code to identify the external system from which the request is coming. This is the ExternalSystem ID used to exchange information between OPERA and the external system.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostCancelReservationByExtIdRequest
*/
func (a *ReservationAPIService) PostCancelReservationByExtId(ctx context.Context, reservationExternalId string, externalSystemCode string, hotelId string) ReservationAPIPostCancelReservationByExtIdRequest {
	return ReservationAPIPostCancelReservationByExtIdRequest{
		ApiService: a,
		ctx: ctx,
		reservationExternalId: reservationExternalId,
		externalSystemCode: externalSystemCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CancelReservationDetails
func (a *ReservationAPIService) PostCancelReservationByExtIdExecute(r ReservationAPIPostCancelReservationByExtIdRequest) (*CancelReservationDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CancelReservationDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostCancelReservationByExtId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/cancellations"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationExternalId"+"}", url.PathEscape(parameterValueToString(r.reservationExternalId, "reservationExternalId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalSystemCode"+"}", url.PathEscape(parameterValueToString(r.externalSystemCode, "externalSystemCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationExternalId) < 1 {
		return localVarReturnValue, nil, reportError("reservationExternalId must have at least 1 elements")
	}
	if strlen(r.reservationExternalId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationExternalId must have less than 2000 elements")
	}
	if strlen(r.externalSystemCode) < 1 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have at least 1 elements")
	}
	if strlen(r.externalSystemCode) > 2000 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.cancelReservation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostCancelReservationsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	cancelReservations *CancelReservations
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostCancelReservationsRequest) Authorization(authorization string) ReservationAPIPostCancelReservationsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostCancelReservationsRequest) XAppKey(xAppKey string) ReservationAPIPostCancelReservationsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostCancelReservationsRequest) XHotelid(xHotelid string) ReservationAPIPostCancelReservationsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to submit batch cancel reservations.
func (r ReservationAPIPostCancelReservationsRequest) CancelReservations(cancelReservations CancelReservations) ReservationAPIPostCancelReservationsRequest {
	r.cancelReservations = &cancelReservations
	return r
}

// External system code.
func (r ReservationAPIPostCancelReservationsRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostCancelReservationsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostCancelReservationsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostCancelReservationsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostCancelReservationsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostCancelReservationsExecute(r)
}

/*
PostCancelReservations Cancel Reservations 

This API can be used to  cancel multiple reservations. <p><strong>OperationId:</strong>postCancelReservations</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostCancelReservationsRequest
*/
func (a *ReservationAPIService) PostCancelReservations(ctx context.Context, hotelId string) ReservationAPIPostCancelReservationsRequest {
	return ReservationAPIPostCancelReservationsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostCancelReservationsExecute(r ReservationAPIPostCancelReservationsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostCancelReservations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/cancellations"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.cancelReservations
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostCancelShareReservationRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	cancelReservation *CancelReservation
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostCancelShareReservationRequest) Authorization(authorization string) ReservationAPIPostCancelShareReservationRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostCancelShareReservationRequest) XAppKey(xAppKey string) ReservationAPIPostCancelShareReservationRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostCancelShareReservationRequest) XHotelid(xHotelid string) ReservationAPIPostCancelShareReservationRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for canceling reservations.
func (r ReservationAPIPostCancelShareReservationRequest) CancelReservation(cancelReservation CancelReservation) ReservationAPIPostCancelShareReservationRequest {
	r.cancelReservation = &cancelReservation
	return r
}

// External system code.
func (r ReservationAPIPostCancelShareReservationRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostCancelShareReservationRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostCancelShareReservationRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostCancelShareReservationRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostCancelShareReservationRequest) Execute() (*CancelReservationDetails, *http.Response, error) {
	return r.ApiService.PostCancelShareReservationExecute(r)
}

/*
PostCancelShareReservation Cancel reservations

Use this API to cancel reservations including multiple share reservations with single request. You will receive cancellation numbers in the response. <p><strong>OperationId:</strong>postCancelShareReservation</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostCancelShareReservationRequest
*/
func (a *ReservationAPIService) PostCancelShareReservation(ctx context.Context, hotelId string) ReservationAPIPostCancelShareReservationRequest {
	return ReservationAPIPostCancelShareReservationRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CancelReservationDetails
func (a *ReservationAPIService) PostCancelShareReservationExecute(r ReservationAPIPostCancelShareReservationRequest) (*CancelReservationDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CancelReservationDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostCancelShareReservation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/reservationCancellations"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.cancelReservation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostCancellationPolicyRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationCancellationPolicyCriteria *ReservationCancellationPolicyCriteria
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostCancellationPolicyRequest) Authorization(authorization string) ReservationAPIPostCancellationPolicyRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostCancellationPolicyRequest) XAppKey(xAppKey string) ReservationAPIPostCancellationPolicyRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostCancellationPolicyRequest) XHotelid(xHotelid string) ReservationAPIPostCancellationPolicyRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object that holds the details of Cancellation Policy to be created.
func (r ReservationAPIPostCancellationPolicyRequest) ReservationCancellationPolicyCriteria(reservationCancellationPolicyCriteria ReservationCancellationPolicyCriteria) ReservationAPIPostCancellationPolicyRequest {
	r.reservationCancellationPolicyCriteria = &reservationCancellationPolicyCriteria
	return r
}

// External system code.
func (r ReservationAPIPostCancellationPolicyRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostCancellationPolicyRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostCancellationPolicyRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostCancellationPolicyRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostCancellationPolicyRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostCancellationPolicyExecute(r)
}

/*
PostCancellationPolicy Create a Cancellation policy

Create a new cancellation policy for a property. <p><strong>OperationId:</strong>postCancellationPolicy</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostCancellationPolicyRequest
*/
func (a *ReservationAPIService) PostCancellationPolicy(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostCancellationPolicyRequest {
	return ReservationAPIPostCancellationPolicyRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostCancellationPolicyExecute(r ReservationAPIPostCancellationPolicyRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostCancellationPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/cancellationPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationCancellationPolicyCriteria
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostCombineShareReservationsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	combineShareReservations *CombineShareReservations
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostCombineShareReservationsRequest) Authorization(authorization string) ReservationAPIPostCombineShareReservationsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostCombineShareReservationsRequest) XAppKey(xAppKey string) ReservationAPIPostCombineShareReservationsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostCombineShareReservationsRequest) XHotelid(xHotelid string) ReservationAPIPostCombineShareReservationsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to combine sharer reservations. This request requires a Reservation Name Id(Joining to) and a Joining Reservation Id
func (r ReservationAPIPostCombineShareReservationsRequest) CombineShareReservations(combineShareReservations CombineShareReservations) ReservationAPIPostCombineShareReservationsRequest {
	r.combineShareReservations = &combineShareReservations
	return r
}

// External system code.
func (r ReservationAPIPostCombineShareReservationsRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostCombineShareReservationsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostCombineShareReservationsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostCombineShareReservationsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostCombineShareReservationsRequest) Execute() (*CombineShareReservationsDetails, *http.Response, error) {
	return r.ApiService.PostCombineShareReservationsExecute(r)
}

/*
PostCombineShareReservations Combine Share Reservations

Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservations</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostCombineShareReservationsRequest
*/
func (a *ReservationAPIService) PostCombineShareReservations(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostCombineShareReservationsRequest {
	return ReservationAPIPostCombineShareReservationsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CombineShareReservationsDetails
func (a *ReservationAPIService) PostCombineShareReservationsExecute(r ReservationAPIPostCombineShareReservationsRequest) (*CombineShareReservationsDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CombineShareReservationsDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostCombineShareReservations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/shares"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.combineShareReservations
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostCombineShareReservationsByExtIdRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationExternalId string
	externalSystemCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	combineShareReservations *CombineShareReservations
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostCombineShareReservationsByExtIdRequest) Authorization(authorization string) ReservationAPIPostCombineShareReservationsByExtIdRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostCombineShareReservationsByExtIdRequest) XAppKey(xAppKey string) ReservationAPIPostCombineShareReservationsByExtIdRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostCombineShareReservationsByExtIdRequest) XHotelid(xHotelid string) ReservationAPIPostCombineShareReservationsByExtIdRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to combine sharer reservations. This request requires a Reservation Name Id(Joining to) and a Joining Reservation Id
func (r ReservationAPIPostCombineShareReservationsByExtIdRequest) CombineShareReservations(combineShareReservations CombineShareReservations) ReservationAPIPostCombineShareReservationsByExtIdRequest {
	r.combineShareReservations = &combineShareReservations
	return r
}

// External system code.
func (r ReservationAPIPostCombineShareReservationsByExtIdRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostCombineShareReservationsByExtIdRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostCombineShareReservationsByExtIdRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostCombineShareReservationsByExtIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostCombineShareReservationsByExtIdRequest) Execute() (*CombineShareReservationsDetails, *http.Response, error) {
	return r.ApiService.PostCombineShareReservationsByExtIdExecute(r)
}

/*
PostCombineShareReservationsByExtId Combine Share Reservations

Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservationsByExtId</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationExternalId External reservation ID.
 @param externalSystemCode Code to identify the external system from which the request is coming. This is the ExternalSystem ID used to exchange information between OPERA and the external system.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostCombineShareReservationsByExtIdRequest
*/
func (a *ReservationAPIService) PostCombineShareReservationsByExtId(ctx context.Context, reservationExternalId string, externalSystemCode string, hotelId string) ReservationAPIPostCombineShareReservationsByExtIdRequest {
	return ReservationAPIPostCombineShareReservationsByExtIdRequest{
		ApiService: a,
		ctx: ctx,
		reservationExternalId: reservationExternalId,
		externalSystemCode: externalSystemCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CombineShareReservationsDetails
func (a *ReservationAPIService) PostCombineShareReservationsByExtIdExecute(r ReservationAPIPostCombineShareReservationsByExtIdRequest) (*CombineShareReservationsDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CombineShareReservationsDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostCombineShareReservationsByExtId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/shares"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationExternalId"+"}", url.PathEscape(parameterValueToString(r.reservationExternalId, "reservationExternalId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalSystemCode"+"}", url.PathEscape(parameterValueToString(r.externalSystemCode, "externalSystemCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationExternalId) < 1 {
		return localVarReturnValue, nil, reportError("reservationExternalId must have at least 1 elements")
	}
	if strlen(r.reservationExternalId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationExternalId must have less than 2000 elements")
	}
	if strlen(r.externalSystemCode) < 1 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have at least 1 elements")
	}
	if strlen(r.externalSystemCode) > 2000 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.combineShareReservations
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostConfirmationLettersRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	confirmationLetters *ConfirmationLetters
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostConfirmationLettersRequest) Authorization(authorization string) ReservationAPIPostConfirmationLettersRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostConfirmationLettersRequest) XAppKey(xAppKey string) ReservationAPIPostConfirmationLettersRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostConfirmationLettersRequest) XHotelid(xHotelid string) ReservationAPIPostConfirmationLettersRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to create a confirmation letter.
func (r ReservationAPIPostConfirmationLettersRequest) ConfirmationLetters(confirmationLetters ConfirmationLetters) ReservationAPIPostConfirmationLettersRequest {
	r.confirmationLetters = &confirmationLetters
	return r
}

// External system code.
func (r ReservationAPIPostConfirmationLettersRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostConfirmationLettersRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostConfirmationLettersRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostConfirmationLettersRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostConfirmationLettersRequest) Execute() (*ConfirmationLettersDetails, *http.Response, error) {
	return r.ApiService.PostConfirmationLettersExecute(r)
}

/*
PostConfirmationLetters Create the confirmation letters

Create a confirmation letter for a property. <p><strong>OperationId:</strong>postConfirmationLetters</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostConfirmationLettersRequest
*/
func (a *ReservationAPIService) PostConfirmationLetters(ctx context.Context, hotelId string) ReservationAPIPostConfirmationLettersRequest {
	return ReservationAPIPostConfirmationLettersRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ConfirmationLettersDetails
func (a *ReservationAPIService) PostConfirmationLettersExecute(r ReservationAPIPostConfirmationLettersRequest) (*ConfirmationLettersDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfirmationLettersDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostConfirmationLetters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/confirmationLetters"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.confirmationLetters
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostDepositPolicyRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationDepositPolicyCriteria *ReservationDepositPolicyCriteria
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostDepositPolicyRequest) Authorization(authorization string) ReservationAPIPostDepositPolicyRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostDepositPolicyRequest) XAppKey(xAppKey string) ReservationAPIPostDepositPolicyRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostDepositPolicyRequest) XHotelid(xHotelid string) ReservationAPIPostDepositPolicyRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object that holds the details of hotel level Deposit Policy to be created.
func (r ReservationAPIPostDepositPolicyRequest) ReservationDepositPolicyCriteria(reservationDepositPolicyCriteria ReservationDepositPolicyCriteria) ReservationAPIPostDepositPolicyRequest {
	r.reservationDepositPolicyCriteria = &reservationDepositPolicyCriteria
	return r
}

// External system code.
func (r ReservationAPIPostDepositPolicyRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostDepositPolicyRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostDepositPolicyRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostDepositPolicyRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostDepositPolicyRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostDepositPolicyExecute(r)
}

/*
PostDepositPolicy Create deposit policy

Create deposit policy for a property. This policy can then be used for reservations. <p><strong>OperationId:</strong>postDepositPolicy</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostDepositPolicyRequest
*/
func (a *ReservationAPIService) PostDepositPolicy(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostDepositPolicyRequest {
	return ReservationAPIPostDepositPolicyRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostDepositPolicyExecute(r ReservationAPIPostDepositPolicyRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostDepositPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/depositPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationDepositPolicyCriteria
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostECouponsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	eCouponsInfo *ECouponsInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostECouponsRequest) Authorization(authorization string) ReservationAPIPostECouponsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostECouponsRequest) XAppKey(xAppKey string) ReservationAPIPostECouponsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostECouponsRequest) XHotelid(xHotelid string) ReservationAPIPostECouponsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating new eCoupons.
func (r ReservationAPIPostECouponsRequest) ECouponsInfo(eCouponsInfo ECouponsInfo) ReservationAPIPostECouponsRequest {
	r.eCouponsInfo = &eCouponsInfo
	return r
}

// External system code.
func (r ReservationAPIPostECouponsRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostECouponsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostECouponsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostECouponsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostECouponsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostECouponsExecute(r)
}

/*
PostECoupons Create Reservation ECoupon

Create the Reservation Ecoupons. <p><strong>OperationId:</strong>postECoupons</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostECouponsRequest
*/
func (a *ReservationAPIService) PostECoupons(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostECouponsRequest {
	return ReservationAPIPostECouponsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostECouponsExecute(r ReservationAPIPostECouponsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostECoupons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/eCoupons"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.eCouponsInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostGuestMessagesRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	createGuestMessages *CreateGuestMessages
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostGuestMessagesRequest) Authorization(authorization string) ReservationAPIPostGuestMessagesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostGuestMessagesRequest) XAppKey(xAppKey string) ReservationAPIPostGuestMessagesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostGuestMessagesRequest) XHotelid(xHotelid string) ReservationAPIPostGuestMessagesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating a new guest message.
func (r ReservationAPIPostGuestMessagesRequest) CreateGuestMessages(createGuestMessages CreateGuestMessages) ReservationAPIPostGuestMessagesRequest {
	r.createGuestMessages = &createGuestMessages
	return r
}

// External system code.
func (r ReservationAPIPostGuestMessagesRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostGuestMessagesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostGuestMessagesRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostGuestMessagesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostGuestMessagesRequest) Execute() (*GuestMessagesDetails, *http.Response, error) {
	return r.ApiService.PostGuestMessagesExecute(r)
}

/*
PostGuestMessages Create guest messages

Create guest message for a guest reservation. <p><strong>OperationId:</strong>postGuestMessages</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostGuestMessagesRequest
*/
func (a *ReservationAPIService) PostGuestMessages(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostGuestMessagesRequest {
	return ReservationAPIPostGuestMessagesRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return GuestMessagesDetails
func (a *ReservationAPIService) PostGuestMessagesExecute(r ReservationAPIPostGuestMessagesRequest) (*GuestMessagesDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GuestMessagesDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostGuestMessages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/guestMessages"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.createGuestMessages
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostIssueTicketsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	ticketsInfo *TicketsInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostIssueTicketsRequest) Authorization(authorization string) ReservationAPIPostIssueTicketsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostIssueTicketsRequest) XAppKey(xAppKey string) ReservationAPIPostIssueTicketsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostIssueTicketsRequest) XHotelid(xHotelid string) ReservationAPIPostIssueTicketsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Common tickets request base type.
func (r ReservationAPIPostIssueTicketsRequest) TicketsInfo(ticketsInfo TicketsInfo) ReservationAPIPostIssueTicketsRequest {
	r.ticketsInfo = &ticketsInfo
	return r
}

// External system code.
func (r ReservationAPIPostIssueTicketsRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostIssueTicketsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostIssueTicketsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostIssueTicketsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostIssueTicketsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostIssueTicketsExecute(r)
}

/*
PostIssueTickets Issue Reservation tickets

You can use this API to issue Reservation tickets. <p><strong>OperationId:</strong>postIssueTickets</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostIssueTicketsRequest
*/
func (a *ReservationAPIService) PostIssueTickets(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostIssueTicketsRequest {
	return ReservationAPIPostIssueTicketsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostIssueTicketsExecute(r ReservationAPIPostIssueTicketsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostIssueTickets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/tickets/issue"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.ticketsInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostMasterAccountRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	masterAccount *MasterAccount
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostMasterAccountRequest) Authorization(authorization string) ReservationAPIPostMasterAccountRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostMasterAccountRequest) XAppKey(xAppKey string) ReservationAPIPostMasterAccountRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostMasterAccountRequest) XHotelid(xHotelid string) ReservationAPIPostMasterAccountRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request for CreateMasterAccount operation.
func (r ReservationAPIPostMasterAccountRequest) MasterAccount(masterAccount MasterAccount) ReservationAPIPostMasterAccountRequest {
	r.masterAccount = &masterAccount
	return r
}

// External system code.
func (r ReservationAPIPostMasterAccountRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostMasterAccountRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostMasterAccountRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostMasterAccountRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostMasterAccountRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostMasterAccountExecute(r)
}

/*
PostMasterAccount Create a Master Account

Create a master account for a reservation. <p><strong>OperationId:</strong>postMasterAccount</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostMasterAccountRequest
*/
func (a *ReservationAPIService) PostMasterAccount(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostMasterAccountRequest {
	return ReservationAPIPostMasterAccountRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostMasterAccountExecute(r ReservationAPIPostMasterAccountRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostMasterAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/masterAccount"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.masterAccount
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostPaymentMethodsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationPaymentMethods *ReservationPaymentMethods
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostPaymentMethodsRequest) Authorization(authorization string) ReservationAPIPostPaymentMethodsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostPaymentMethodsRequest) XAppKey(xAppKey string) ReservationAPIPostPaymentMethodsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostPaymentMethodsRequest) XHotelid(xHotelid string) ReservationAPIPostPaymentMethodsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to create payment methods.
func (r ReservationAPIPostPaymentMethodsRequest) ReservationPaymentMethods(reservationPaymentMethods ReservationPaymentMethods) ReservationAPIPostPaymentMethodsRequest {
	r.reservationPaymentMethods = &reservationPaymentMethods
	return r
}

// External system code.
func (r ReservationAPIPostPaymentMethodsRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostPaymentMethodsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostPaymentMethodsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostPaymentMethodsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostPaymentMethodsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostPaymentMethodsExecute(r)
}

/*
PostPaymentMethods Create a payment method 

Use this API to add a payment method to a reservation. <p><strong>OperationId:</strong>postPaymentMethods</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostPaymentMethodsRequest
*/
func (a *ReservationAPIService) PostPaymentMethods(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostPaymentMethodsRequest {
	return ReservationAPIPostPaymentMethodsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostPaymentMethodsExecute(r ReservationAPIPostPaymentMethodsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostPaymentMethods")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/paymentMethods"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationPaymentMethods
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostPreCheckInReservationRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	preCheckInReservation *PostPreCheckInReservationRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostPreCheckInReservationRequest) Authorization(authorization string) ReservationAPIPostPreCheckInReservationRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostPreCheckInReservationRequest) XAppKey(xAppKey string) ReservationAPIPostPreCheckInReservationRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostPreCheckInReservationRequest) XHotelid(xHotelid string) ReservationAPIPostPreCheckInReservationRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to pre-register a reservation eligible for pre-registration and change arrival details.
func (r ReservationAPIPostPreCheckInReservationRequest) PreCheckInReservation(preCheckInReservation PostPreCheckInReservationRequest) ReservationAPIPostPreCheckInReservationRequest {
	r.preCheckInReservation = &preCheckInReservation
	return r
}

// External system code.
func (r ReservationAPIPostPreCheckInReservationRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostPreCheckInReservationRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostPreCheckInReservationRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostPreCheckInReservationRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostPreCheckInReservationRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostPreCheckInReservationExecute(r)
}

/*
PostPreCheckInReservation Pre-Checkin a Reservation

This will allow you to set a reservation as a pre-registered guest.  The API request requires the guests confirmation number and you can optionally include arrival time.  The behavior of the API will be dependent upon the Pre-registration rules configured for the hotel in OPERA Cloud administration. <p><strong>OperationId:</strong>postPreCheckInReservation</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostPreCheckInReservationRequest
*/
func (a *ReservationAPIService) PostPreCheckInReservation(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostPreCheckInReservationRequest {
	return ReservationAPIPostPreCheckInReservationRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostPreCheckInReservationExecute(r ReservationAPIPostPreCheckInReservationRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostPreCheckInReservation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/preCheckIn"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.preCheckInReservation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostReservationRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	createReservation *PostReservationRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostReservationRequest) Authorization(authorization string) ReservationAPIPostReservationRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostReservationRequest) XAppKey(xAppKey string) ReservationAPIPostReservationRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostReservationRequest) XHotelid(xHotelid string) ReservationAPIPostReservationRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to create reservations. Includes instructions for information which needs to be returned.
func (r ReservationAPIPostReservationRequest) CreateReservation(createReservation PostReservationRequest) ReservationAPIPostReservationRequest {
	r.createReservation = &createReservation
	return r
}

// External system code.
func (r ReservationAPIPostReservationRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostReservationRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostReservationRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostReservationRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostReservationRequest) Execute() (*CreateReservationType, *http.Response, error) {
	return r.ApiService.PostReservationExecute(r)
}

/*
PostReservation Create Reservation

Use this to create a new reservation for a hA12:F24otel.  Generally, you would search for a hotel's availability and rates before proceeding to use postReservation.  There are many fields in postReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postReservation. <p><strong>OperationId:</strong>postReservation</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostReservationRequest
*/
func (a *ReservationAPIService) PostReservation(ctx context.Context, hotelId string) ReservationAPIPostReservationRequest {
	return ReservationAPIPostReservationRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CreateReservationType
func (a *ReservationAPIService) PostReservationExecute(r ReservationAPIPostReservationRequest) (*CreateReservationType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateReservationType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostReservation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.createReservation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostReservationByBlockRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	blockId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	createReservation *PostReservationByBlockRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostReservationByBlockRequest) Authorization(authorization string) ReservationAPIPostReservationByBlockRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostReservationByBlockRequest) XAppKey(xAppKey string) ReservationAPIPostReservationByBlockRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostReservationByBlockRequest) XHotelid(xHotelid string) ReservationAPIPostReservationByBlockRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to create reservations. Includes instructions for information which needs to be returned.
func (r ReservationAPIPostReservationByBlockRequest) CreateReservation(createReservation PostReservationByBlockRequest) ReservationAPIPostReservationByBlockRequest {
	r.createReservation = &createReservation
	return r
}

// External system code.
func (r ReservationAPIPostReservationByBlockRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostReservationByBlockRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostReservationByBlockRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostReservationByBlockRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostReservationByBlockRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostReservationByBlockExecute(r)
}

/*
PostReservationByBlock Create Reservation for a Block

Use this to create a new reservation for a block, you must know the block Code to create this reservation.  In order to post a successful block reservation, please ensure you use the ListOfValues API's to know the hotel's codes; such as Address Type, Country Code,  Titles, preferenceCodes etc. <p><strong>OperationId:</strong>postReservationByBlock</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param blockId Unique OPERA internal ID for the block.
 @param hotelId Unique ID of the hotel where reservation is created.
 @return ReservationAPIPostReservationByBlockRequest
*/
func (a *ReservationAPIService) PostReservationByBlock(ctx context.Context, blockId string, hotelId string) ReservationAPIPostReservationByBlockRequest {
	return ReservationAPIPostReservationByBlockRequest{
		ApiService: a,
		ctx: ctx,
		blockId: blockId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostReservationByBlockExecute(r ReservationAPIPostReservationByBlockRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostReservationByBlock")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/blocks/{blockId}/reservations"
	localVarPath = strings.Replace(localVarPath, "{"+"blockId"+"}", url.PathEscape(parameterValueToString(r.blockId, "blockId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.blockId) < 1 {
		return localVarReturnValue, nil, reportError("blockId must have at least 1 elements")
	}
	if strlen(r.blockId) > 2000 {
		return localVarReturnValue, nil, reportError("blockId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.createReservation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostReservationCertificateRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	attachCertificate *AttachCertificate
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostReservationCertificateRequest) Authorization(authorization string) ReservationAPIPostReservationCertificateRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostReservationCertificateRequest) XAppKey(xAppKey string) ReservationAPIPostReservationCertificateRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostReservationCertificateRequest) XHotelid(xHotelid string) ReservationAPIPostReservationCertificateRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to attach certificate to the Reservation.
func (r ReservationAPIPostReservationCertificateRequest) AttachCertificate(attachCertificate AttachCertificate) ReservationAPIPostReservationCertificateRequest {
	r.attachCertificate = &attachCertificate
	return r
}

// External system code.
func (r ReservationAPIPostReservationCertificateRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostReservationCertificateRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostReservationCertificateRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostReservationCertificateRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostReservationCertificateRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostReservationCertificateExecute(r)
}

/*
PostReservationCertificate Attach Certificate

Attach a certificate to Reservation. <p><strong>OperationId:</strong>postReservationCertificate</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostReservationCertificateRequest
*/
func (a *ReservationAPIService) PostReservationCertificate(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostReservationCertificateRequest {
	return ReservationAPIPostReservationCertificateRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostReservationCertificateExecute(r ReservationAPIPostReservationCertificateRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostReservationCertificate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/certificates"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.attachCertificate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostReservationCopyRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	copyReservation *CopyReservation
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostReservationCopyRequest) Authorization(authorization string) ReservationAPIPostReservationCopyRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostReservationCopyRequest) XAppKey(xAppKey string) ReservationAPIPostReservationCopyRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostReservationCopyRequest) XHotelid(xHotelid string) ReservationAPIPostReservationCopyRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request for copying a reservation&#39;s information as a template for a new reservation.
func (r ReservationAPIPostReservationCopyRequest) CopyReservation(copyReservation CopyReservation) ReservationAPIPostReservationCopyRequest {
	r.copyReservation = &copyReservation
	return r
}

// External system code.
func (r ReservationAPIPostReservationCopyRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostReservationCopyRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostReservationCopyRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostReservationCopyRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostReservationCopyRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostReservationCopyExecute(r)
}

/*
PostReservationCopy Copy a Reservation

Copy a Reservation. <p><strong>OperationId:</strong>postReservationCopy</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostReservationCopyRequest
*/
func (a *ReservationAPIService) PostReservationCopy(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostReservationCopyRequest {
	return ReservationAPIPostReservationCopyRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostReservationCopyExecute(r ReservationAPIPostReservationCopyRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostReservationCopy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/copy"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.copyReservation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostReservationLinksRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	linkReservationsCriteria *PostReservationLinksRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostReservationLinksRequest) Authorization(authorization string) ReservationAPIPostReservationLinksRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostReservationLinksRequest) XAppKey(xAppKey string) ReservationAPIPostReservationLinksRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostReservationLinksRequest) XHotelid(xHotelid string) ReservationAPIPostReservationLinksRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to link a list of reservations with another existing reservation.
func (r ReservationAPIPostReservationLinksRequest) LinkReservationsCriteria(linkReservationsCriteria PostReservationLinksRequest) ReservationAPIPostReservationLinksRequest {
	r.linkReservationsCriteria = &linkReservationsCriteria
	return r
}

// External system code.
func (r ReservationAPIPostReservationLinksRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostReservationLinksRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostReservationLinksRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostReservationLinksRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostReservationLinksRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostReservationLinksExecute(r)
}

/*
PostReservationLinks Link Reservations

This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinks</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostReservationLinksRequest
*/
func (a *ReservationAPIService) PostReservationLinks(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostReservationLinksRequest {
	return ReservationAPIPostReservationLinksRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostReservationLinksExecute(r ReservationAPIPostReservationLinksRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostReservationLinks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/linkedReservations/{reservationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.linkReservationsCriteria
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostReservationLinksByChainRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	authorization *string
	xAppKey *string
	xHotelid *string
	linkReservationsCriteria *LinkReservationsCriteria
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostReservationLinksByChainRequest) Authorization(authorization string) ReservationAPIPostReservationLinksByChainRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostReservationLinksByChainRequest) XAppKey(xAppKey string) ReservationAPIPostReservationLinksByChainRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostReservationLinksByChainRequest) XHotelid(xHotelid string) ReservationAPIPostReservationLinksByChainRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to link a list of reservations with another existing reservation.
func (r ReservationAPIPostReservationLinksByChainRequest) LinkReservationsCriteria(linkReservationsCriteria LinkReservationsCriteria) ReservationAPIPostReservationLinksByChainRequest {
	r.linkReservationsCriteria = &linkReservationsCriteria
	return r
}

// External system code.
func (r ReservationAPIPostReservationLinksByChainRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostReservationLinksByChainRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostReservationLinksByChainRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostReservationLinksByChainRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostReservationLinksByChainRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostReservationLinksByChainExecute(r)
}

/*
PostReservationLinksByChain Link Reservations By Chain

This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinksByChain</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @return ReservationAPIPostReservationLinksByChainRequest
*/
func (a *ReservationAPIService) PostReservationLinksByChain(ctx context.Context, reservationId string) ReservationAPIPostReservationLinksByChainRequest {
	return ReservationAPIPostReservationLinksByChainRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostReservationLinksByChainExecute(r ReservationAPIPostReservationLinksByChainRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostReservationLinksByChain")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reservations/linkedReservations/{reservationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.linkReservationsCriteria
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostReservationLinksByExtIdRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationExternalId string
	externalSystemCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	linkReservationsCriteria *LinkReservationsCriteria
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostReservationLinksByExtIdRequest) Authorization(authorization string) ReservationAPIPostReservationLinksByExtIdRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostReservationLinksByExtIdRequest) XAppKey(xAppKey string) ReservationAPIPostReservationLinksByExtIdRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostReservationLinksByExtIdRequest) XHotelid(xHotelid string) ReservationAPIPostReservationLinksByExtIdRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to link a list of reservations with another existing reservation.
func (r ReservationAPIPostReservationLinksByExtIdRequest) LinkReservationsCriteria(linkReservationsCriteria LinkReservationsCriteria) ReservationAPIPostReservationLinksByExtIdRequest {
	r.linkReservationsCriteria = &linkReservationsCriteria
	return r
}

// External system code.
func (r ReservationAPIPostReservationLinksByExtIdRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostReservationLinksByExtIdRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostReservationLinksByExtIdRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostReservationLinksByExtIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostReservationLinksByExtIdRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostReservationLinksByExtIdExecute(r)
}

/*
PostReservationLinksByExtId Link Reservations

This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinksByExtId</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationExternalId External reservation ID.
 @param externalSystemCode Code to identify the external system from which the request is coming. This is the ExternalSystem ID used to exchange information between OPERA and the external system.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostReservationLinksByExtIdRequest
*/
func (a *ReservationAPIService) PostReservationLinksByExtId(ctx context.Context, reservationExternalId string, externalSystemCode string, hotelId string) ReservationAPIPostReservationLinksByExtIdRequest {
	return ReservationAPIPostReservationLinksByExtIdRequest{
		ApiService: a,
		ctx: ctx,
		reservationExternalId: reservationExternalId,
		externalSystemCode: externalSystemCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostReservationLinksByExtIdExecute(r ReservationAPIPostReservationLinksByExtIdRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostReservationLinksByExtId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/linkedReservations/{reservationExternalId}"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationExternalId"+"}", url.PathEscape(parameterValueToString(r.reservationExternalId, "reservationExternalId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalSystemCode"+"}", url.PathEscape(parameterValueToString(r.externalSystemCode, "externalSystemCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationExternalId) < 1 {
		return localVarReturnValue, nil, reportError("reservationExternalId must have at least 1 elements")
	}
	if strlen(r.reservationExternalId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationExternalId must have less than 2000 elements")
	}
	if strlen(r.externalSystemCode) < 1 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have at least 1 elements")
	}
	if strlen(r.externalSystemCode) > 2000 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.linkReservationsCriteria
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostReservationLocatorsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationLocatorsDetailsInfo *ReservationLocatorsDetailsInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostReservationLocatorsRequest) Authorization(authorization string) ReservationAPIPostReservationLocatorsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostReservationLocatorsRequest) XAppKey(xAppKey string) ReservationAPIPostReservationLocatorsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostReservationLocatorsRequest) XHotelid(xHotelid string) ReservationAPIPostReservationLocatorsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating new Notes for the hotels
func (r ReservationAPIPostReservationLocatorsRequest) ReservationLocatorsDetailsInfo(reservationLocatorsDetailsInfo ReservationLocatorsDetailsInfo) ReservationAPIPostReservationLocatorsRequest {
	r.reservationLocatorsDetailsInfo = &reservationLocatorsDetailsInfo
	return r
}

// External system code.
func (r ReservationAPIPostReservationLocatorsRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostReservationLocatorsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostReservationLocatorsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostReservationLocatorsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostReservationLocatorsRequest) Execute() (*ReservationLocatorsDetails, *http.Response, error) {
	return r.ApiService.PostReservationLocatorsExecute(r)
}

/*
PostReservationLocators Create Reservation Guest Locator

Create Guest Locater for a list of Reservations. <p><strong>OperationId:</strong>postReservationLocators</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostReservationLocatorsRequest
*/
func (a *ReservationAPIService) PostReservationLocators(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostReservationLocatorsRequest {
	return ReservationAPIPostReservationLocatorsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationLocatorsDetails
func (a *ReservationAPIService) PostReservationLocatorsExecute(r ReservationAPIPostReservationLocatorsRequest) (*ReservationLocatorsDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationLocatorsDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostReservationLocators")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/guestLocators"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationLocatorsDetailsInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostReservationMembershipRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationMembership *ReservationMembership
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostReservationMembershipRequest) Authorization(authorization string) ReservationAPIPostReservationMembershipRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostReservationMembershipRequest) XAppKey(xAppKey string) ReservationAPIPostReservationMembershipRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostReservationMembershipRequest) XHotelid(xHotelid string) ReservationAPIPostReservationMembershipRequest {
	r.xHotelid = &xHotelid
	return r
}

// Method to create a reservation membership on an existing reservation.
func (r ReservationAPIPostReservationMembershipRequest) ReservationMembership(reservationMembership ReservationMembership) ReservationAPIPostReservationMembershipRequest {
	r.reservationMembership = &reservationMembership
	return r
}

// External system code.
func (r ReservationAPIPostReservationMembershipRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostReservationMembershipRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostReservationMembershipRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostReservationMembershipRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostReservationMembershipRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostReservationMembershipExecute(r)
}

/*
PostReservationMembership Create a Reservation membership

Add a membership to an existing reservation. <p><strong>OperationId:</strong>postReservationMembership</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostReservationMembershipRequest
*/
func (a *ReservationAPIService) PostReservationMembership(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostReservationMembershipRequest {
	return ReservationAPIPostReservationMembershipRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostReservationMembershipExecute(r ReservationAPIPostReservationMembershipRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostReservationMembership")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/memberships"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationMembership
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostReservationPackageRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationPackagesInfo *ReservationPackagesInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostReservationPackageRequest) Authorization(authorization string) ReservationAPIPostReservationPackageRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostReservationPackageRequest) XAppKey(xAppKey string) ReservationAPIPostReservationPackageRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostReservationPackageRequest) XHotelid(xHotelid string) ReservationAPIPostReservationPackageRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request method to attach a package to an existing reservation.
func (r ReservationAPIPostReservationPackageRequest) ReservationPackagesInfo(reservationPackagesInfo ReservationPackagesInfo) ReservationAPIPostReservationPackageRequest {
	r.reservationPackagesInfo = &reservationPackagesInfo
	return r
}

// External system code.
func (r ReservationAPIPostReservationPackageRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostReservationPackageRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostReservationPackageRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostReservationPackageRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostReservationPackageRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostReservationPackageExecute(r)
}

/*
PostReservationPackage Add a package to a Reservation

This API will allow you to add packages to a reservation. <p><strong>OperationId:</strong>postReservationPackage</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostReservationPackageRequest
*/
func (a *ReservationAPIService) PostReservationPackage(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostReservationPackageRequest {
	return ReservationAPIPostReservationPackageRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostReservationPackageExecute(r ReservationAPIPostReservationPackageRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostReservationPackage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/packages"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationPackagesInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostReservationPreferenceRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationPreferenceInfo *ReservationPreferenceInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostReservationPreferenceRequest) Authorization(authorization string) ReservationAPIPostReservationPreferenceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostReservationPreferenceRequest) XAppKey(xAppKey string) ReservationAPIPostReservationPreferenceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostReservationPreferenceRequest) XHotelid(xHotelid string) ReservationAPIPostReservationPreferenceRequest {
	r.xHotelid = &xHotelid
	return r
}

// Method to create a reservation preference on an existing reservation.
func (r ReservationAPIPostReservationPreferenceRequest) ReservationPreferenceInfo(reservationPreferenceInfo ReservationPreferenceInfo) ReservationAPIPostReservationPreferenceRequest {
	r.reservationPreferenceInfo = &reservationPreferenceInfo
	return r
}

// External system code.
func (r ReservationAPIPostReservationPreferenceRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostReservationPreferenceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostReservationPreferenceRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostReservationPreferenceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostReservationPreferenceRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostReservationPreferenceExecute(r)
}

/*
PostReservationPreference Add a preference to a Reservation

This API will add a preference to a Reservation.  <p><strong>OperationId:</strong>postReservationPreference</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostReservationPreferenceRequest
*/
func (a *ReservationAPIService) PostReservationPreference(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostReservationPreferenceRequest {
	return ReservationAPIPostReservationPreferenceRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostReservationPreferenceExecute(r ReservationAPIPostReservationPreferenceRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostReservationPreference")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/preferences"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationPreferenceInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostReserveInventoryItemsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reserveInventoryItems *ReserveInventoryItems
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostReserveInventoryItemsRequest) Authorization(authorization string) ReservationAPIPostReserveInventoryItemsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostReserveInventoryItemsRequest) XAppKey(xAppKey string) ReservationAPIPostReserveInventoryItemsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostReserveInventoryItemsRequest) XHotelid(xHotelid string) ReservationAPIPostReserveInventoryItemsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to reserve inventory Items for a reservation.
func (r ReservationAPIPostReserveInventoryItemsRequest) ReserveInventoryItems(reserveInventoryItems ReserveInventoryItems) ReservationAPIPostReserveInventoryItemsRequest {
	r.reserveInventoryItems = &reserveInventoryItems
	return r
}

// External system code.
func (r ReservationAPIPostReserveInventoryItemsRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostReserveInventoryItemsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostReserveInventoryItemsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostReserveInventoryItemsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostReserveInventoryItemsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostReserveInventoryItemsExecute(r)
}

/*
PostReserveInventoryItems Reserve Reservation inventory items

Reserve Reservation inventory items. <p><strong>OperationId:</strong>postReserveInventoryItems</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostReserveInventoryItemsRequest
*/
func (a *ReservationAPIService) PostReserveInventoryItems(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostReserveInventoryItemsRequest {
	return ReservationAPIPostReserveInventoryItemsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostReserveInventoryItemsExecute(r ReservationAPIPostReserveInventoryItemsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostReserveInventoryItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/inventoryItems"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reserveInventoryItems
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostReverseDepositPolicyRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	policyId string
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reverseDepositPolicy *ReverseDepositPolicy
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostReverseDepositPolicyRequest) Authorization(authorization string) ReservationAPIPostReverseDepositPolicyRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostReverseDepositPolicyRequest) XAppKey(xAppKey string) ReservationAPIPostReverseDepositPolicyRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostReverseDepositPolicyRequest) XHotelid(xHotelid string) ReservationAPIPostReverseDepositPolicyRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request type to reverse deposit policy of a reservation.(This is applicable only when advance deposit handling is set to &#39;17&#39;) ReverseDepositPolicy operation will reverse the policy by creating a new request with same opposite amount.
func (r ReservationAPIPostReverseDepositPolicyRequest) ReverseDepositPolicy(reverseDepositPolicy ReverseDepositPolicy) ReservationAPIPostReverseDepositPolicyRequest {
	r.reverseDepositPolicy = &reverseDepositPolicy
	return r
}

// External system code.
func (r ReservationAPIPostReverseDepositPolicyRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostReverseDepositPolicyRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostReverseDepositPolicyRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostReverseDepositPolicyRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostReverseDepositPolicyRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostReverseDepositPolicyExecute(r)
}

/*
PostReverseDepositPolicy Reverse a deposit policy

You can use this API to reverse a deposit policy on a specified reservation. <p><strong>OperationId:</strong>postReverseDepositPolicy</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param policyId Policy ID
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostReverseDepositPolicyRequest
*/
func (a *ReservationAPIService) PostReverseDepositPolicy(ctx context.Context, policyId string, reservationId string, hotelId string) ReservationAPIPostReverseDepositPolicyRequest {
	return ReservationAPIPostReverseDepositPolicyRequest{
		ApiService: a,
		ctx: ctx,
		policyId: policyId,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostReverseDepositPolicyExecute(r ReservationAPIPostReverseDepositPolicyRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostReverseDepositPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/reverseDepositPolicy/{policyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", url.PathEscape(parameterValueToString(r.policyId, "policyId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.policyId) < 1 {
		return localVarReturnValue, nil, reportError("policyId must have at least 1 elements")
	}
	if strlen(r.policyId) > 2000 {
		return localVarReturnValue, nil, reportError("policyId must have less than 2000 elements")
	}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reverseDepositPolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostRoutingInstructionsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationRoutingCriteria *ReservationRoutingCriteria
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostRoutingInstructionsRequest) Authorization(authorization string) ReservationAPIPostRoutingInstructionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostRoutingInstructionsRequest) XAppKey(xAppKey string) ReservationAPIPostRoutingInstructionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostRoutingInstructionsRequest) XHotelid(xHotelid string) ReservationAPIPostRoutingInstructionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to create a routing instruction.
func (r ReservationAPIPostRoutingInstructionsRequest) ReservationRoutingCriteria(reservationRoutingCriteria ReservationRoutingCriteria) ReservationAPIPostRoutingInstructionsRequest {
	r.reservationRoutingCriteria = &reservationRoutingCriteria
	return r
}

// External system code.
func (r ReservationAPIPostRoutingInstructionsRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostRoutingInstructionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostRoutingInstructionsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostRoutingInstructionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostRoutingInstructionsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostRoutingInstructionsExecute(r)
}

/*
PostRoutingInstructions Create routing instructions for a reservation

You can use this API to create routing instructions on a reservation. It requires a reservation ID, which can be fetched using getReservations. <p><strong>OperationId:</strong>postRoutingInstructions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostRoutingInstructionsRequest
*/
func (a *ReservationAPIService) PostRoutingInstructions(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostRoutingInstructionsRequest {
	return ReservationAPIPostRoutingInstructionsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostRoutingInstructionsExecute(r ReservationAPIPostRoutingInstructionsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostRoutingInstructions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/routingInstructions"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationRoutingCriteria
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostRoutingInstructionsByExtIdRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationExternalId string
	externalSystemCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationRoutingCriteria *ReservationRoutingCriteria
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostRoutingInstructionsByExtIdRequest) Authorization(authorization string) ReservationAPIPostRoutingInstructionsByExtIdRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostRoutingInstructionsByExtIdRequest) XAppKey(xAppKey string) ReservationAPIPostRoutingInstructionsByExtIdRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostRoutingInstructionsByExtIdRequest) XHotelid(xHotelid string) ReservationAPIPostRoutingInstructionsByExtIdRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to create a routing instruction.
func (r ReservationAPIPostRoutingInstructionsByExtIdRequest) ReservationRoutingCriteria(reservationRoutingCriteria ReservationRoutingCriteria) ReservationAPIPostRoutingInstructionsByExtIdRequest {
	r.reservationRoutingCriteria = &reservationRoutingCriteria
	return r
}

// External system code.
func (r ReservationAPIPostRoutingInstructionsByExtIdRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostRoutingInstructionsByExtIdRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostRoutingInstructionsByExtIdRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostRoutingInstructionsByExtIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostRoutingInstructionsByExtIdRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostRoutingInstructionsByExtIdExecute(r)
}

/*
PostRoutingInstructionsByExtId Create routing instructions

You can use this API to create routing instructions on a reservation. <p><strong>OperationId:</strong>postRoutingInstructionsByExtId</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationExternalId External reservation ID.
 @param externalSystemCode Code to identify the external system from which the request is coming. This is the ExternalSystem ID used to exchange information between OPERA and the external system.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostRoutingInstructionsByExtIdRequest
*/
func (a *ReservationAPIService) PostRoutingInstructionsByExtId(ctx context.Context, reservationExternalId string, externalSystemCode string, hotelId string) ReservationAPIPostRoutingInstructionsByExtIdRequest {
	return ReservationAPIPostRoutingInstructionsByExtIdRequest{
		ApiService: a,
		ctx: ctx,
		reservationExternalId: reservationExternalId,
		externalSystemCode: externalSystemCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostRoutingInstructionsByExtIdExecute(r ReservationAPIPostRoutingInstructionsByExtIdRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostRoutingInstructionsByExtId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/routingInstructions"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationExternalId"+"}", url.PathEscape(parameterValueToString(r.reservationExternalId, "reservationExternalId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalSystemCode"+"}", url.PathEscape(parameterValueToString(r.externalSystemCode, "externalSystemCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationExternalId) < 1 {
		return localVarReturnValue, nil, reportError("reservationExternalId must have at least 1 elements")
	}
	if strlen(r.reservationExternalId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationExternalId must have less than 2000 elements")
	}
	if strlen(r.externalSystemCode) < 1 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have at least 1 elements")
	}
	if strlen(r.externalSystemCode) > 2000 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationRoutingCriteria
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostSellMessageConfigRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	sellMessageConfig *SellMessageConfig
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostSellMessageConfigRequest) Authorization(authorization string) ReservationAPIPostSellMessageConfigRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostSellMessageConfigRequest) XAppKey(xAppKey string) ReservationAPIPostSellMessageConfigRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostSellMessageConfigRequest) XHotelid(xHotelid string) ReservationAPIPostSellMessageConfigRequest {
	r.xHotelid = &xHotelid
	return r
}

// This is the request message type for creating sell messages.
func (r ReservationAPIPostSellMessageConfigRequest) SellMessageConfig(sellMessageConfig SellMessageConfig) ReservationAPIPostSellMessageConfigRequest {
	r.sellMessageConfig = &sellMessageConfig
	return r
}

// External system code.
func (r ReservationAPIPostSellMessageConfigRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostSellMessageConfigRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostSellMessageConfigRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostSellMessageConfigRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostSellMessageConfigRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostSellMessageConfigExecute(r)
}

/*
PostSellMessageConfig Create sell message

Create sell message configuration for a property. <p><strong>OperationId:</strong>postSellMessageConfig</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostSellMessageConfigRequest
*/
func (a *ReservationAPIService) PostSellMessageConfig(ctx context.Context, hotelId string) ReservationAPIPostSellMessageConfigRequest {
	return ReservationAPIPostSellMessageConfigRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostSellMessageConfigExecute(r ReservationAPIPostSellMessageConfigRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostSellMessageConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/sellMessages/config"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.sellMessageConfig
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostSellMessageConfigByChainRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	sellMessageConfig *SellMessageConfig
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostSellMessageConfigByChainRequest) Authorization(authorization string) ReservationAPIPostSellMessageConfigByChainRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostSellMessageConfigByChainRequest) XAppKey(xAppKey string) ReservationAPIPostSellMessageConfigByChainRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostSellMessageConfigByChainRequest) XHotelid(xHotelid string) ReservationAPIPostSellMessageConfigByChainRequest {
	r.xHotelid = &xHotelid
	return r
}

// This is the request message type for creating sell messages.
func (r ReservationAPIPostSellMessageConfigByChainRequest) SellMessageConfig(sellMessageConfig SellMessageConfig) ReservationAPIPostSellMessageConfigByChainRequest {
	r.sellMessageConfig = &sellMessageConfig
	return r
}

// External system code.
func (r ReservationAPIPostSellMessageConfigByChainRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostSellMessageConfigByChainRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostSellMessageConfigByChainRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostSellMessageConfigByChainRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostSellMessageConfigByChainRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostSellMessageConfigByChainExecute(r)
}

/*
PostSellMessageConfigByChain Create sell message by chain

Create sell message configuration. <p><strong>OperationId:</strong>postSellMessageConfigByChain</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReservationAPIPostSellMessageConfigByChainRequest
*/
func (a *ReservationAPIService) PostSellMessageConfigByChain(ctx context.Context) ReservationAPIPostSellMessageConfigByChainRequest {
	return ReservationAPIPostSellMessageConfigByChainRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostSellMessageConfigByChainExecute(r ReservationAPIPostSellMessageConfigByChainRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostSellMessageConfigByChain")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sellMessages/config"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.sellMessageConfig
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostTicketsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	ticketsInfo *TicketsInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostTicketsRequest) Authorization(authorization string) ReservationAPIPostTicketsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostTicketsRequest) XAppKey(xAppKey string) ReservationAPIPostTicketsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostTicketsRequest) XHotelid(xHotelid string) ReservationAPIPostTicketsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Common tickets request base type.
func (r ReservationAPIPostTicketsRequest) TicketsInfo(ticketsInfo TicketsInfo) ReservationAPIPostTicketsRequest {
	r.ticketsInfo = &ticketsInfo
	return r
}

// External system code.
func (r ReservationAPIPostTicketsRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostTicketsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostTicketsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostTicketsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostTicketsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostTicketsExecute(r)
}

/*
PostTickets Create tickets

Use this API to create tickets on a reservation. <p><strong>OperationId:</strong>postTickets</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostTicketsRequest
*/
func (a *ReservationAPIService) PostTickets(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostTicketsRequest {
	return ReservationAPIPostTicketsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostTicketsExecute(r ReservationAPIPostTicketsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostTickets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/tickets"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.ticketsInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostTransactionDiversionsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	transactionDiversionsInfo *TransactionDiversionsInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostTransactionDiversionsRequest) Authorization(authorization string) ReservationAPIPostTransactionDiversionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostTransactionDiversionsRequest) XAppKey(xAppKey string) ReservationAPIPostTransactionDiversionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostTransactionDiversionsRequest) XHotelid(xHotelid string) ReservationAPIPostTransactionDiversionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to create transaction diversion rules for a reservation.
func (r ReservationAPIPostTransactionDiversionsRequest) TransactionDiversionsInfo(transactionDiversionsInfo TransactionDiversionsInfo) ReservationAPIPostTransactionDiversionsRequest {
	r.transactionDiversionsInfo = &transactionDiversionsInfo
	return r
}

// External system code.
func (r ReservationAPIPostTransactionDiversionsRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostTransactionDiversionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostTransactionDiversionsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostTransactionDiversionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostTransactionDiversionsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostTransactionDiversionsExecute(r)
}

/*
PostTransactionDiversions Create Transaction Diversions 

You can use this API to create Transaction Diversions. <p><strong>OperationId:</strong>postTransactionDiversions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostTransactionDiversionsRequest
*/
func (a *ReservationAPIService) PostTransactionDiversions(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostTransactionDiversionsRequest {
	return ReservationAPIPostTransactionDiversionsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostTransactionDiversionsExecute(r ReservationAPIPostTransactionDiversionsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostTransactionDiversions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/transactionDiversions"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.transactionDiversionsInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostTurnawayReservationRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	registerTurnaway *RegisterTurnaway
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostTurnawayReservationRequest) Authorization(authorization string) ReservationAPIPostTurnawayReservationRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostTurnawayReservationRequest) XAppKey(xAppKey string) ReservationAPIPostTurnawayReservationRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostTurnawayReservationRequest) XHotelid(xHotelid string) ReservationAPIPostTurnawayReservationRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to register turn away reservation.
func (r ReservationAPIPostTurnawayReservationRequest) RegisterTurnaway(registerTurnaway RegisterTurnaway) ReservationAPIPostTurnawayReservationRequest {
	r.registerTurnaway = &registerTurnaway
	return r
}

// External system code.
func (r ReservationAPIPostTurnawayReservationRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostTurnawayReservationRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostTurnawayReservationRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostTurnawayReservationRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostTurnawayReservationRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostTurnawayReservationExecute(r)
}

/*
PostTurnawayReservation Register Turnaway

Register turnaways for a property. <p><strong>OperationId:</strong>postTurnawayReservation</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostTurnawayReservationRequest
*/
func (a *ReservationAPIService) PostTurnawayReservation(ctx context.Context, hotelId string) ReservationAPIPostTurnawayReservationRequest {
	return ReservationAPIPostTurnawayReservationRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostTurnawayReservationExecute(r ReservationAPIPostTurnawayReservationRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostTurnawayReservation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/turnaways"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.registerTurnaway
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPostUpsellReservationRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	upsellReservation *PostUpsellReservationRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPostUpsellReservationRequest) Authorization(authorization string) ReservationAPIPostUpsellReservationRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPostUpsellReservationRequest) XAppKey(xAppKey string) ReservationAPIPostUpsellReservationRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPostUpsellReservationRequest) XHotelid(xHotelid string) ReservationAPIPostUpsellReservationRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to upsell a reservation.
func (r ReservationAPIPostUpsellReservationRequest) UpsellReservation(upsellReservation PostUpsellReservationRequest) ReservationAPIPostUpsellReservationRequest {
	r.upsellReservation = &upsellReservation
	return r
}

// External system code.
func (r ReservationAPIPostUpsellReservationRequest) XExternalsystem(xExternalsystem string) ReservationAPIPostUpsellReservationRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPostUpsellReservationRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPostUpsellReservationRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPostUpsellReservationRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostUpsellReservationExecute(r)
}

/*
PostUpsellReservation Upsell a Reservation

This API will allow you to upsell a reservation in OPERA.  You would need to already know the upsell rules that are available for this reservation - you can do this by using the getUpsell API. <p><strong>OperationId:</strong>postUpsellReservation</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPostUpsellReservationRequest
*/
func (a *ReservationAPIService) PostUpsellReservation(ctx context.Context, reservationId string, hotelId string) ReservationAPIPostUpsellReservationRequest {
	return ReservationAPIPostUpsellReservationRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PostUpsellReservationExecute(r ReservationAPIPostUpsellReservationRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PostUpsellReservation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/upsell"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.upsellReservation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutAcquireReservationLockRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationLock *ReservationLock
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutAcquireReservationLockRequest) Authorization(authorization string) ReservationAPIPutAcquireReservationLockRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutAcquireReservationLockRequest) XAppKey(xAppKey string) ReservationAPIPutAcquireReservationLockRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutAcquireReservationLockRequest) XHotelid(xHotelid string) ReservationAPIPutAcquireReservationLockRequest {
	r.xHotelid = &xHotelid
	return r
}

// Operation for requesting a lock on a reservation.
func (r ReservationAPIPutAcquireReservationLockRequest) ReservationLock(reservationLock ReservationLock) ReservationAPIPutAcquireReservationLockRequest {
	r.reservationLock = &reservationLock
	return r
}

// External system code.
func (r ReservationAPIPutAcquireReservationLockRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutAcquireReservationLockRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutAcquireReservationLockRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutAcquireReservationLockRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutAcquireReservationLockRequest) Execute() (*ReservationLockDetails, *http.Response, error) {
	return r.ApiService.PutAcquireReservationLockExecute(r)
}

/*
PutAcquireReservationLock Acquire Reservation Lock

Acquire Reservation Lock. <p><strong>OperationId:</strong>putAcquireReservationLock</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutAcquireReservationLockRequest
*/
func (a *ReservationAPIService) PutAcquireReservationLock(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutAcquireReservationLockRequest {
	return ReservationAPIPutAcquireReservationLockRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationLockDetails
func (a *ReservationAPIService) PutAcquireReservationLockExecute(r ReservationAPIPutAcquireReservationLockRequest) (*ReservationLockDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationLockDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutAcquireReservationLock")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/locks"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationLock
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutBreakShareValidationsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	breakShareValidations *BreakShareValidations
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutBreakShareValidationsRequest) Authorization(authorization string) ReservationAPIPutBreakShareValidationsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutBreakShareValidationsRequest) XAppKey(xAppKey string) ReservationAPIPutBreakShareValidationsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutBreakShareValidationsRequest) XHotelid(xHotelid string) ReservationAPIPutBreakShareValidationsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request for Break Share operation validations. This request should be done prior to the actual Break Share operation request. Based on the validations returned from this request the appropriate parameters can be returned in the actual break share request.
func (r ReservationAPIPutBreakShareValidationsRequest) BreakShareValidations(breakShareValidations BreakShareValidations) ReservationAPIPutBreakShareValidationsRequest {
	r.breakShareValidations = &breakShareValidations
	return r
}

// External system code.
func (r ReservationAPIPutBreakShareValidationsRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutBreakShareValidationsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutBreakShareValidationsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutBreakShareValidationsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutBreakShareValidationsRequest) Execute() (*BreakShareValidationsDetails, *http.Response, error) {
	return r.ApiService.PutBreakShareValidationsExecute(r)
}

/*
PutBreakShareValidations Validate before breaking a share Reservation

This API performs a validation before separating share reservations. <p><strong>OperationId:</strong>putBreakShareValidations</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutBreakShareValidationsRequest
*/
func (a *ReservationAPIService) PutBreakShareValidations(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutBreakShareValidationsRequest {
	return ReservationAPIPutBreakShareValidationsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return BreakShareValidationsDetails
func (a *ReservationAPIService) PutBreakShareValidationsExecute(r ReservationAPIPutBreakShareValidationsRequest) (*BreakShareValidationsDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BreakShareValidationsDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutBreakShareValidations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/breakshares/action/validate"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.breakShareValidations
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutCancellationPolicyRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationCancellationPolicyCriteria *ReservationCancellationPolicyCriteria
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutCancellationPolicyRequest) Authorization(authorization string) ReservationAPIPutCancellationPolicyRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutCancellationPolicyRequest) XAppKey(xAppKey string) ReservationAPIPutCancellationPolicyRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutCancellationPolicyRequest) XHotelid(xHotelid string) ReservationAPIPutCancellationPolicyRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object that holds the details of Cancellation Policy to be changed.
func (r ReservationAPIPutCancellationPolicyRequest) ReservationCancellationPolicyCriteria(reservationCancellationPolicyCriteria ReservationCancellationPolicyCriteria) ReservationAPIPutCancellationPolicyRequest {
	r.reservationCancellationPolicyCriteria = &reservationCancellationPolicyCriteria
	return r
}

// External system code.
func (r ReservationAPIPutCancellationPolicyRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutCancellationPolicyRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutCancellationPolicyRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutCancellationPolicyRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutCancellationPolicyRequest) Execute() (*ReservationCancellationPolicyCriteria, *http.Response, error) {
	return r.ApiService.PutCancellationPolicyExecute(r)
}

/*
PutCancellationPolicy Change a Cancellation policy

Change cancellation policy that is configured for a property. <p><strong>OperationId:</strong>putCancellationPolicy</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutCancellationPolicyRequest
*/
func (a *ReservationAPIService) PutCancellationPolicy(ctx context.Context, hotelId string) ReservationAPIPutCancellationPolicyRequest {
	return ReservationAPIPutCancellationPolicyRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationCancellationPolicyCriteria
func (a *ReservationAPIService) PutCancellationPolicyExecute(r ReservationAPIPutCancellationPolicyRequest) (*ReservationCancellationPolicyCriteria, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationCancellationPolicyCriteria
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutCancellationPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/cancellationPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationCancellationPolicyCriteria
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutCombineShareValidationsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	combineShareValidations *CombineShareValidations
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutCombineShareValidationsRequest) Authorization(authorization string) ReservationAPIPutCombineShareValidationsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutCombineShareValidationsRequest) XAppKey(xAppKey string) ReservationAPIPutCombineShareValidationsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutCombineShareValidationsRequest) XHotelid(xHotelid string) ReservationAPIPutCombineShareValidationsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to validate a combine share operation. This would be done prior to the actual Combine Share operation. Based on the validations returned from this request, the appropriate values can be returned to the Combine Share operation request.
func (r ReservationAPIPutCombineShareValidationsRequest) CombineShareValidations(combineShareValidations CombineShareValidations) ReservationAPIPutCombineShareValidationsRequest {
	r.combineShareValidations = &combineShareValidations
	return r
}

// External system code.
func (r ReservationAPIPutCombineShareValidationsRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutCombineShareValidationsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutCombineShareValidationsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutCombineShareValidationsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutCombineShareValidationsRequest) Execute() (*CombineShareValidationsDetails, *http.Response, error) {
	return r.ApiService.PutCombineShareValidationsExecute(r)
}

/*
PutCombineShareValidations Combine Share Validations

Validate before combining Reservations for shares. <p><strong>OperationId:</strong>putCombineShareValidations</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutCombineShareValidationsRequest
*/
func (a *ReservationAPIService) PutCombineShareValidations(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutCombineShareValidationsRequest {
	return ReservationAPIPutCombineShareValidationsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CombineShareValidationsDetails
func (a *ReservationAPIService) PutCombineShareValidationsExecute(r ReservationAPIPutCombineShareValidationsRequest) (*CombineShareValidationsDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CombineShareValidationsDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutCombineShareValidations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/combineshares/action/validate"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.combineShareValidations
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutComputeCancellationPoliciesRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	computeCancellationPolicies *ComputeCancellationPolicies
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutComputeCancellationPoliciesRequest) Authorization(authorization string) ReservationAPIPutComputeCancellationPoliciesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutComputeCancellationPoliciesRequest) XAppKey(xAppKey string) ReservationAPIPutComputeCancellationPoliciesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutComputeCancellationPoliciesRequest) XHotelid(xHotelid string) ReservationAPIPutComputeCancellationPoliciesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Operation to fetch the details for cancellation rules, applicable to a reservation. Based on the criteria the rule information can be retrieved for all cancellation rules or for a particular rule.
func (r ReservationAPIPutComputeCancellationPoliciesRequest) ComputeCancellationPolicies(computeCancellationPolicies ComputeCancellationPolicies) ReservationAPIPutComputeCancellationPoliciesRequest {
	r.computeCancellationPolicies = &computeCancellationPolicies
	return r
}

// External system code.
func (r ReservationAPIPutComputeCancellationPoliciesRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutComputeCancellationPoliciesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutComputeCancellationPoliciesRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutComputeCancellationPoliciesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutComputeCancellationPoliciesRequest) Execute() (*ComputeCancellationPoliciesDetails, *http.Response, error) {
	return r.ApiService.PutComputeCancellationPoliciesExecute(r)
}

/*
PutComputeCancellationPolicies Compute the cancellation policies

Compute the cancellation policies for a reservation. <p><strong>OperationId:</strong>putComputeCancellationPolicies</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutComputeCancellationPoliciesRequest
*/
func (a *ReservationAPIService) PutComputeCancellationPolicies(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutComputeCancellationPoliciesRequest {
	return ReservationAPIPutComputeCancellationPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ComputeCancellationPoliciesDetails
func (a *ReservationAPIService) PutComputeCancellationPoliciesExecute(r ReservationAPIPutComputeCancellationPoliciesRequest) (*ComputeCancellationPoliciesDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComputeCancellationPoliciesDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutComputeCancellationPolicies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/cancellationPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.computeCancellationPolicies
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutComputeDepositPoliciesRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	computeDepositPolicies *ComputeDepositPolicies
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutComputeDepositPoliciesRequest) Authorization(authorization string) ReservationAPIPutComputeDepositPoliciesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutComputeDepositPoliciesRequest) XAppKey(xAppKey string) ReservationAPIPutComputeDepositPoliciesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutComputeDepositPoliciesRequest) XHotelid(xHotelid string) ReservationAPIPutComputeDepositPoliciesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Operation to fetch the details for deposit rules, applicable to a reservation. Based on the criteria the rule information can be retrieved for all deposit rules or for a particular rule.
func (r ReservationAPIPutComputeDepositPoliciesRequest) ComputeDepositPolicies(computeDepositPolicies ComputeDepositPolicies) ReservationAPIPutComputeDepositPoliciesRequest {
	r.computeDepositPolicies = &computeDepositPolicies
	return r
}

// External system code.
func (r ReservationAPIPutComputeDepositPoliciesRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutComputeDepositPoliciesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutComputeDepositPoliciesRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutComputeDepositPoliciesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutComputeDepositPoliciesRequest) Execute() (*ComputeDepositPoliciesDetails, *http.Response, error) {
	return r.ApiService.PutComputeDepositPoliciesExecute(r)
}

/*
PutComputeDepositPolicies Computes the deposit policies

Computes the deposit policies. <p><strong>OperationId:</strong>putComputeDepositPolicies</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutComputeDepositPoliciesRequest
*/
func (a *ReservationAPIService) PutComputeDepositPolicies(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutComputeDepositPoliciesRequest {
	return ReservationAPIPutComputeDepositPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ComputeDepositPoliciesDetails
func (a *ReservationAPIService) PutComputeDepositPoliciesExecute(r ReservationAPIPutComputeDepositPoliciesRequest) (*ComputeDepositPoliciesDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComputeDepositPoliciesDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutComputeDepositPolicies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/depositPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.computeDepositPolicies
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutDepositPolicyRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationDepositPolicyCriteria *ReservationDepositPolicyCriteria
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutDepositPolicyRequest) Authorization(authorization string) ReservationAPIPutDepositPolicyRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutDepositPolicyRequest) XAppKey(xAppKey string) ReservationAPIPutDepositPolicyRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutDepositPolicyRequest) XHotelid(xHotelid string) ReservationAPIPutDepositPolicyRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object that holds the details of hotel level Deposit Policy to be changed.
func (r ReservationAPIPutDepositPolicyRequest) ReservationDepositPolicyCriteria(reservationDepositPolicyCriteria ReservationDepositPolicyCriteria) ReservationAPIPutDepositPolicyRequest {
	r.reservationDepositPolicyCriteria = &reservationDepositPolicyCriteria
	return r
}

// External system code.
func (r ReservationAPIPutDepositPolicyRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutDepositPolicyRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutDepositPolicyRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutDepositPolicyRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutDepositPolicyRequest) Execute() (*ChangeDepositPolicyDetails, *http.Response, error) {
	return r.ApiService.PutDepositPolicyExecute(r)
}

/*
PutDepositPolicy Change deposit policy

Change deposit policy which already exists for a property. <p><strong>OperationId:</strong>putDepositPolicy</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutDepositPolicyRequest
*/
func (a *ReservationAPIService) PutDepositPolicy(ctx context.Context, hotelId string) ReservationAPIPutDepositPolicyRequest {
	return ReservationAPIPutDepositPolicyRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ChangeDepositPolicyDetails
func (a *ReservationAPIService) PutDepositPolicyExecute(r ReservationAPIPutDepositPolicyRequest) (*ChangeDepositPolicyDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangeDepositPolicyDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutDepositPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/depositPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationDepositPolicyCriteria
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutECouponsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	eCouponsInfo *ECouponsInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutECouponsRequest) Authorization(authorization string) ReservationAPIPutECouponsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutECouponsRequest) XAppKey(xAppKey string) ReservationAPIPutECouponsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutECouponsRequest) XHotelid(xHotelid string) ReservationAPIPutECouponsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for changing the existing eCoupons attached to Reservation.
func (r ReservationAPIPutECouponsRequest) ECouponsInfo(eCouponsInfo ECouponsInfo) ReservationAPIPutECouponsRequest {
	r.eCouponsInfo = &eCouponsInfo
	return r
}

// External system code.
func (r ReservationAPIPutECouponsRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutECouponsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutECouponsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutECouponsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutECouponsRequest) Execute() (*ECoupons, *http.Response, error) {
	return r.ApiService.PutECouponsExecute(r)
}

/*
PutECoupons Change Reservation Ecoupon

Change the Reservation Ecoupons. <p><strong>OperationId:</strong>putECoupons</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutECouponsRequest
*/
func (a *ReservationAPIService) PutECoupons(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutECouponsRequest {
	return ReservationAPIPutECouponsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ECoupons
func (a *ReservationAPIService) PutECouponsExecute(r ReservationAPIPutECouponsRequest) (*ECoupons, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ECoupons
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutECoupons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/eCoupons"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.eCouponsInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutGuestMessagesRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	guestMessageId string
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	changeGuestMessages *ChangeGuestMessages
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutGuestMessagesRequest) Authorization(authorization string) ReservationAPIPutGuestMessagesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutGuestMessagesRequest) XAppKey(xAppKey string) ReservationAPIPutGuestMessagesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutGuestMessagesRequest) XHotelid(xHotelid string) ReservationAPIPutGuestMessagesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for modifying an existing guest message.
func (r ReservationAPIPutGuestMessagesRequest) ChangeGuestMessages(changeGuestMessages ChangeGuestMessages) ReservationAPIPutGuestMessagesRequest {
	r.changeGuestMessages = &changeGuestMessages
	return r
}

// External system code.
func (r ReservationAPIPutGuestMessagesRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutGuestMessagesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutGuestMessagesRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutGuestMessagesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutGuestMessagesRequest) Execute() (*ChangeGuestMessages, *http.Response, error) {
	return r.ApiService.PutGuestMessagesExecute(r)
}

/*
PutGuestMessages Change guest Message  

Change guest Message on a reservation. <p><strong>OperationId:</strong>putGuestMessages</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guestMessageId Guest Message Id
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutGuestMessagesRequest
*/
func (a *ReservationAPIService) PutGuestMessages(ctx context.Context, guestMessageId string, reservationId string, hotelId string) ReservationAPIPutGuestMessagesRequest {
	return ReservationAPIPutGuestMessagesRequest{
		ApiService: a,
		ctx: ctx,
		guestMessageId: guestMessageId,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ChangeGuestMessages
func (a *ReservationAPIService) PutGuestMessagesExecute(r ReservationAPIPutGuestMessagesRequest) (*ChangeGuestMessages, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangeGuestMessages
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutGuestMessages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/guestMessages/{guestMessageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"guestMessageId"+"}", url.PathEscape(parameterValueToString(r.guestMessageId, "guestMessageId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.guestMessageId) < 1 {
		return localVarReturnValue, nil, reportError("guestMessageId must have at least 1 elements")
	}
	if strlen(r.guestMessageId) > 2000 {
		return localVarReturnValue, nil, reportError("guestMessageId must have less than 2000 elements")
	}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.changeGuestMessages
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutMasterAccountRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	masterAccount *MasterAccount
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutMasterAccountRequest) Authorization(authorization string) ReservationAPIPutMasterAccountRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutMasterAccountRequest) XAppKey(xAppKey string) ReservationAPIPutMasterAccountRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutMasterAccountRequest) XHotelid(xHotelid string) ReservationAPIPutMasterAccountRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request for ChangeMasterAccount operation.
func (r ReservationAPIPutMasterAccountRequest) MasterAccount(masterAccount MasterAccount) ReservationAPIPutMasterAccountRequest {
	r.masterAccount = &masterAccount
	return r
}

// External system code.
func (r ReservationAPIPutMasterAccountRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutMasterAccountRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutMasterAccountRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutMasterAccountRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutMasterAccountRequest) Execute() (*MasterAccountSummary, *http.Response, error) {
	return r.ApiService.PutMasterAccountExecute(r)
}

/*
PutMasterAccount Change a Master Account

Change a master account on a reservation. <p><strong>OperationId:</strong>putMasterAccount</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutMasterAccountRequest
*/
func (a *ReservationAPIService) PutMasterAccount(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutMasterAccountRequest {
	return ReservationAPIPutMasterAccountRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return MasterAccountSummary
func (a *ReservationAPIService) PutMasterAccountExecute(r ReservationAPIPutMasterAccountRequest) (*MasterAccountSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MasterAccountSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutMasterAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/masterAccount"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.masterAccount
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutPaymentMethodsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationPaymentMethods *ReservationPaymentMethods
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutPaymentMethodsRequest) Authorization(authorization string) ReservationAPIPutPaymentMethodsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutPaymentMethodsRequest) XAppKey(xAppKey string) ReservationAPIPutPaymentMethodsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutPaymentMethodsRequest) XHotelid(xHotelid string) ReservationAPIPutPaymentMethodsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Method to update a reservation&#39;s payment methods.
func (r ReservationAPIPutPaymentMethodsRequest) ReservationPaymentMethods(reservationPaymentMethods ReservationPaymentMethods) ReservationAPIPutPaymentMethodsRequest {
	r.reservationPaymentMethods = &reservationPaymentMethods
	return r
}

// External system code.
func (r ReservationAPIPutPaymentMethodsRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutPaymentMethodsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutPaymentMethodsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutPaymentMethodsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutPaymentMethodsRequest) Execute() (*ReservationPaymentMethods, *http.Response, error) {
	return r.ApiService.PutPaymentMethodsExecute(r)
}

/*
PutPaymentMethods Change a payment method 

This API will update an existing payment method on a reservation. <p><strong>OperationId:</strong>putPaymentMethods</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutPaymentMethodsRequest
*/
func (a *ReservationAPIService) PutPaymentMethods(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutPaymentMethodsRequest {
	return ReservationAPIPutPaymentMethodsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationPaymentMethods
func (a *ReservationAPIService) PutPaymentMethodsExecute(r ReservationAPIPutPaymentMethodsRequest) (*ReservationPaymentMethods, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationPaymentMethods
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutPaymentMethods")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/paymentMethods"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationPaymentMethods
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutReinstateReservationRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reinstateReservation *ReinstateReservation
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutReinstateReservationRequest) Authorization(authorization string) ReservationAPIPutReinstateReservationRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutReinstateReservationRequest) XAppKey(xAppKey string) ReservationAPIPutReinstateReservationRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutReinstateReservationRequest) XHotelid(xHotelid string) ReservationAPIPutReinstateReservationRequest {
	r.xHotelid = &xHotelid
	return r
}

// Overriding the validation check will log the supposed errors in the warnings log if they would fail.
func (r ReservationAPIPutReinstateReservationRequest) ReinstateReservation(reinstateReservation ReinstateReservation) ReservationAPIPutReinstateReservationRequest {
	r.reinstateReservation = &reinstateReservation
	return r
}

// External system code.
func (r ReservationAPIPutReinstateReservationRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutReinstateReservationRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutReinstateReservationRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutReinstateReservationRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutReinstateReservationRequest) Execute() (*ReinstateReservationDetails, *http.Response, error) {
	return r.ApiService.PutReinstateReservationExecute(r)
}

/*
PutReinstateReservation Reinstate a Reservation

Use this API to reinstate a cancelled reservation. <p><strong>OperationId:</strong>putReinstateReservation</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutReinstateReservationRequest
*/
func (a *ReservationAPIService) PutReinstateReservation(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutReinstateReservationRequest {
	return ReservationAPIPutReinstateReservationRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReinstateReservationDetails
func (a *ReservationAPIService) PutReinstateReservationExecute(r ReservationAPIPutReinstateReservationRequest) (*ReinstateReservationDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReinstateReservationDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutReinstateReservation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/cancellations"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reinstateReservation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutReinstateReservationByExtIdRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationExternalId string
	externalSystemCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reinstateReservation *ReinstateReservation
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutReinstateReservationByExtIdRequest) Authorization(authorization string) ReservationAPIPutReinstateReservationByExtIdRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutReinstateReservationByExtIdRequest) XAppKey(xAppKey string) ReservationAPIPutReinstateReservationByExtIdRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutReinstateReservationByExtIdRequest) XHotelid(xHotelid string) ReservationAPIPutReinstateReservationByExtIdRequest {
	r.xHotelid = &xHotelid
	return r
}

// Overriding the validation check will log the supposed errors in the warnings log if they would fail.
func (r ReservationAPIPutReinstateReservationByExtIdRequest) ReinstateReservation(reinstateReservation ReinstateReservation) ReservationAPIPutReinstateReservationByExtIdRequest {
	r.reinstateReservation = &reinstateReservation
	return r
}

// External system code.
func (r ReservationAPIPutReinstateReservationByExtIdRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutReinstateReservationByExtIdRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutReinstateReservationByExtIdRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutReinstateReservationByExtIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutReinstateReservationByExtIdRequest) Execute() (*ReinstateReservationDetails, *http.Response, error) {
	return r.ApiService.PutReinstateReservationByExtIdExecute(r)
}

/*
PutReinstateReservationByExtId Reinstate a Reservation

Use this API to reinstate a cancelled reservation. <p><strong>OperationId:</strong>putReinstateReservationByExtId</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationExternalId External reservation ID.
 @param externalSystemCode Code to identify the external system from which the request is coming. This is the ExternalSystem ID used to exchange information between OPERA and the external system.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutReinstateReservationByExtIdRequest
*/
func (a *ReservationAPIService) PutReinstateReservationByExtId(ctx context.Context, reservationExternalId string, externalSystemCode string, hotelId string) ReservationAPIPutReinstateReservationByExtIdRequest {
	return ReservationAPIPutReinstateReservationByExtIdRequest{
		ApiService: a,
		ctx: ctx,
		reservationExternalId: reservationExternalId,
		externalSystemCode: externalSystemCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReinstateReservationDetails
func (a *ReservationAPIService) PutReinstateReservationByExtIdExecute(r ReservationAPIPutReinstateReservationByExtIdRequest) (*ReinstateReservationDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReinstateReservationDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutReinstateReservationByExtId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/cancellations"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationExternalId"+"}", url.PathEscape(parameterValueToString(r.reservationExternalId, "reservationExternalId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalSystemCode"+"}", url.PathEscape(parameterValueToString(r.externalSystemCode, "externalSystemCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationExternalId) < 1 {
		return localVarReturnValue, nil, reportError("reservationExternalId must have at least 1 elements")
	}
	if strlen(r.reservationExternalId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationExternalId must have less than 2000 elements")
	}
	if strlen(r.externalSystemCode) < 1 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have at least 1 elements")
	}
	if strlen(r.externalSystemCode) > 2000 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reinstateReservation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutReservationRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	changeReservation *PutReservationRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutReservationRequest) Authorization(authorization string) ReservationAPIPutReservationRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutReservationRequest) XAppKey(xAppKey string) ReservationAPIPutReservationRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutReservationRequest) XHotelid(xHotelid string) ReservationAPIPutReservationRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request method to change a reservations information.
func (r ReservationAPIPutReservationRequest) ChangeReservation(changeReservation PutReservationRequest) ReservationAPIPutReservationRequest {
	r.changeReservation = &changeReservation
	return r
}

// External system code.
func (r ReservationAPIPutReservationRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutReservationRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutReservationRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutReservationRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutReservationRequest) Execute() (*ChangeReservationDetails, *http.Response, error) {
	return r.ApiService.PutReservationExecute(r)
}

/*
PutReservation Update Reservation by ID

Use this to update an existing reservation for a hotel, such as adding comments, changing the number of guests.   There are many fields in putReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use putReservation. <p><strong>OperationId:</strong>putReservation</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutReservationRequest
*/
func (a *ReservationAPIService) PutReservation(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutReservationRequest {
	return ReservationAPIPutReservationRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ChangeReservationDetails
func (a *ReservationAPIService) PutReservationExecute(r ReservationAPIPutReservationRequest) (*ChangeReservationDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangeReservationDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutReservation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.changeReservation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutReservationByExtIdRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationExternalId string
	externalSystemCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	changeReservation *ChangeReservation
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutReservationByExtIdRequest) Authorization(authorization string) ReservationAPIPutReservationByExtIdRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutReservationByExtIdRequest) XAppKey(xAppKey string) ReservationAPIPutReservationByExtIdRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutReservationByExtIdRequest) XHotelid(xHotelid string) ReservationAPIPutReservationByExtIdRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request method to change a reservations information.
func (r ReservationAPIPutReservationByExtIdRequest) ChangeReservation(changeReservation ChangeReservation) ReservationAPIPutReservationByExtIdRequest {
	r.changeReservation = &changeReservation
	return r
}

// External system code.
func (r ReservationAPIPutReservationByExtIdRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutReservationByExtIdRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutReservationByExtIdRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutReservationByExtIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutReservationByExtIdRequest) Execute() (*ChangeReservationDetails, *http.Response, error) {
	return r.ApiService.PutReservationByExtIdExecute(r)
}

/*
PutReservationByExtId Update Reservation by ID

Use this to update an existing reservation for a hotel, such as adding comments, changing the number of guests.   There are many fields in putReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use putReservation. <p><strong>OperationId:</strong>putReservationByExtId</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationExternalId External reservation ID.
 @param externalSystemCode Code to identify the external system from which the request is coming. This is the ExternalSystem ID used to exchange information between OPERA and the external system.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutReservationByExtIdRequest
*/
func (a *ReservationAPIService) PutReservationByExtId(ctx context.Context, reservationExternalId string, externalSystemCode string, hotelId string) ReservationAPIPutReservationByExtIdRequest {
	return ReservationAPIPutReservationByExtIdRequest{
		ApiService: a,
		ctx: ctx,
		reservationExternalId: reservationExternalId,
		externalSystemCode: externalSystemCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ChangeReservationDetails
func (a *ReservationAPIService) PutReservationByExtIdExecute(r ReservationAPIPutReservationByExtIdRequest) (*ChangeReservationDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangeReservationDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutReservationByExtId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationExternalId"+"}", url.PathEscape(parameterValueToString(r.reservationExternalId, "reservationExternalId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalSystemCode"+"}", url.PathEscape(parameterValueToString(r.externalSystemCode, "externalSystemCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationExternalId) < 1 {
		return localVarReturnValue, nil, reportError("reservationExternalId must have at least 1 elements")
	}
	if strlen(r.reservationExternalId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationExternalId must have less than 2000 elements")
	}
	if strlen(r.externalSystemCode) < 1 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have at least 1 elements")
	}
	if strlen(r.externalSystemCode) > 2000 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.changeReservation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutReservationDailyRateDetailValidationRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationDailyRateDetail *ReservationDailyRateDetail
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutReservationDailyRateDetailValidationRequest) Authorization(authorization string) ReservationAPIPutReservationDailyRateDetailValidationRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutReservationDailyRateDetailValidationRequest) XAppKey(xAppKey string) ReservationAPIPutReservationDailyRateDetailValidationRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutReservationDailyRateDetailValidationRequest) XHotelid(xHotelid string) ReservationAPIPutReservationDailyRateDetailValidationRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request for validating Daily Rate Details modifications.
func (r ReservationAPIPutReservationDailyRateDetailValidationRequest) ReservationDailyRateDetail(reservationDailyRateDetail ReservationDailyRateDetail) ReservationAPIPutReservationDailyRateDetailValidationRequest {
	r.reservationDailyRateDetail = &reservationDailyRateDetail
	return r
}

// External system code.
func (r ReservationAPIPutReservationDailyRateDetailValidationRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutReservationDailyRateDetailValidationRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutReservationDailyRateDetailValidationRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutReservationDailyRateDetailValidationRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutReservationDailyRateDetailValidationRequest) Execute() (*ReservationDailyRateDetailDetails, *http.Response, error) {
	return r.ApiService.PutReservationDailyRateDetailValidationExecute(r)
}

/*
PutReservationDailyRateDetailValidation Validate daily rate details change

Validate daily rate details change. <p><strong>OperationId:</strong>putReservationDailyRateDetailValidation</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutReservationDailyRateDetailValidationRequest
*/
func (a *ReservationAPIService) PutReservationDailyRateDetailValidation(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutReservationDailyRateDetailValidationRequest {
	return ReservationAPIPutReservationDailyRateDetailValidationRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationDailyRateDetailDetails
func (a *ReservationAPIService) PutReservationDailyRateDetailValidationExecute(r ReservationAPIPutReservationDailyRateDetailValidationRequest) (*ReservationDailyRateDetailDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationDailyRateDetailDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutReservationDailyRateDetailValidation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/dailyRates/action/validate"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationDailyRateDetail
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutReservationHeaderValidationRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationDailyRateDetail *ReservationDailyRateDetail
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutReservationHeaderValidationRequest) Authorization(authorization string) ReservationAPIPutReservationHeaderValidationRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutReservationHeaderValidationRequest) XAppKey(xAppKey string) ReservationAPIPutReservationHeaderValidationRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutReservationHeaderValidationRequest) XHotelid(xHotelid string) ReservationAPIPutReservationHeaderValidationRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request for validating Reservation Header modifications.
func (r ReservationAPIPutReservationHeaderValidationRequest) ReservationDailyRateDetail(reservationDailyRateDetail ReservationDailyRateDetail) ReservationAPIPutReservationHeaderValidationRequest {
	r.reservationDailyRateDetail = &reservationDailyRateDetail
	return r
}

// External system code.
func (r ReservationAPIPutReservationHeaderValidationRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutReservationHeaderValidationRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutReservationHeaderValidationRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutReservationHeaderValidationRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutReservationHeaderValidationRequest) Execute() (*ReservationDailyRateDetailDetails, *http.Response, error) {
	return r.ApiService.PutReservationHeaderValidationExecute(r)
}

/*
PutReservationHeaderValidation Validate Reservation header change

Validate Reservation header change. <p><strong>OperationId:</strong>putReservationHeaderValidation</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutReservationHeaderValidationRequest
*/
func (a *ReservationAPIService) PutReservationHeaderValidation(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutReservationHeaderValidationRequest {
	return ReservationAPIPutReservationHeaderValidationRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationDailyRateDetailDetails
func (a *ReservationAPIService) PutReservationHeaderValidationExecute(r ReservationAPIPutReservationHeaderValidationRequest) (*ReservationDailyRateDetailDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationDailyRateDetailDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutReservationHeaderValidation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/header/action/validate"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationDailyRateDetail
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutReservationHotelMoveRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	moveReservationHotel *MoveReservationHotel
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutReservationHotelMoveRequest) Authorization(authorization string) ReservationAPIPutReservationHotelMoveRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutReservationHotelMoveRequest) XAppKey(xAppKey string) ReservationAPIPutReservationHotelMoveRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutReservationHotelMoveRequest) XHotelid(xHotelid string) ReservationAPIPutReservationHotelMoveRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request for moving a reservation and its valid sharers to a different hotel.
func (r ReservationAPIPutReservationHotelMoveRequest) MoveReservationHotel(moveReservationHotel MoveReservationHotel) ReservationAPIPutReservationHotelMoveRequest {
	r.moveReservationHotel = &moveReservationHotel
	return r
}

// External system code.
func (r ReservationAPIPutReservationHotelMoveRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutReservationHotelMoveRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutReservationHotelMoveRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutReservationHotelMoveRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutReservationHotelMoveRequest) Execute() (*MoveReservationHotelDetails, *http.Response, error) {
	return r.ApiService.PutReservationHotelMoveExecute(r)
}

/*
PutReservationHotelMove Move the Reservation 

This API can be used to move a reservation to a different hotel. <p><strong>OperationId:</strong>putReservationHotelMove</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutReservationHotelMoveRequest
*/
func (a *ReservationAPIService) PutReservationHotelMove(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutReservationHotelMoveRequest {
	return ReservationAPIPutReservationHotelMoveRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return MoveReservationHotelDetails
func (a *ReservationAPIService) PutReservationHotelMoveExecute(r ReservationAPIPutReservationHotelMoveRequest) (*MoveReservationHotelDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MoveReservationHotelDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutReservationHotelMove")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/move"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.moveReservationHotel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutReservationLockRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	lockHandle string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	extendReservationLock *ExtendReservationLock
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutReservationLockRequest) Authorization(authorization string) ReservationAPIPutReservationLockRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutReservationLockRequest) XAppKey(xAppKey string) ReservationAPIPutReservationLockRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutReservationLockRequest) XHotelid(xHotelid string) ReservationAPIPutReservationLockRequest {
	r.xHotelid = &xHotelid
	return r
}

// Operation for extending the lifetime of a lock on a reservation.
func (r ReservationAPIPutReservationLockRequest) ExtendReservationLock(extendReservationLock ExtendReservationLock) ReservationAPIPutReservationLockRequest {
	r.extendReservationLock = &extendReservationLock
	return r
}

// External system code.
func (r ReservationAPIPutReservationLockRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutReservationLockRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutReservationLockRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutReservationLockRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutReservationLockRequest) Execute() (*ExtendReservationLockDetails, *http.Response, error) {
	return r.ApiService.PutReservationLockExecute(r)
}

/*
PutReservationLock Extend Reservation Lock

Extend Reservation Lock. <p><strong>OperationId:</strong>putReservationLock</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param lockHandle Lock handle of the lock to be extended.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutReservationLockRequest
*/
func (a *ReservationAPIService) PutReservationLock(ctx context.Context, lockHandle string, hotelId string) ReservationAPIPutReservationLockRequest {
	return ReservationAPIPutReservationLockRequest{
		ApiService: a,
		ctx: ctx,
		lockHandle: lockHandle,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ExtendReservationLockDetails
func (a *ReservationAPIService) PutReservationLockExecute(r ReservationAPIPutReservationLockRequest) (*ExtendReservationLockDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExtendReservationLockDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutReservationLock")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/locks/{lockHandle}"
	localVarPath = strings.Replace(localVarPath, "{"+"lockHandle"+"}", url.PathEscape(parameterValueToString(r.lockHandle, "lockHandle")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.lockHandle) < 1 {
		return localVarReturnValue, nil, reportError("lockHandle must have at least 1 elements")
	}
	if strlen(r.lockHandle) > 2000 {
		return localVarReturnValue, nil, reportError("lockHandle must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.extendReservationLock
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutReservationPackageRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationPackagesInfo *ReservationPackagesInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutReservationPackageRequest) Authorization(authorization string) ReservationAPIPutReservationPackageRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutReservationPackageRequest) XAppKey(xAppKey string) ReservationAPIPutReservationPackageRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutReservationPackageRequest) XHotelid(xHotelid string) ReservationAPIPutReservationPackageRequest {
	r.xHotelid = &xHotelid
	return r
}

// Method to change/modify a reservation package on an existing reservation. The main information required are the Package Code, Resort, RateCode(if applicable), Original Begin Date(if applicable) and Original End Date(if applicable). These are the criteria by which the package will be identified in order to be modified/changed. The elements that can be changed are the Quantity, Excluded Quantity, Unit Price and Unit Allowance if existing. For RateCode packages, the begin date and end date cannot be changed. For non-RateCode packages, the begin date or end date can be changed.
func (r ReservationAPIPutReservationPackageRequest) ReservationPackagesInfo(reservationPackagesInfo ReservationPackagesInfo) ReservationAPIPutReservationPackageRequest {
	r.reservationPackagesInfo = &reservationPackagesInfo
	return r
}

// External system code.
func (r ReservationAPIPutReservationPackageRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutReservationPackageRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutReservationPackageRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutReservationPackageRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutReservationPackageRequest) Execute() (*ReservationPackagesInfo, *http.Response, error) {
	return r.ApiService.PutReservationPackageExecute(r)
}

/*
PutReservationPackage Update a package on a Reservation

This API will allow you to update existing packages on a reservation. <p><strong>OperationId:</strong>putReservationPackage</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutReservationPackageRequest
*/
func (a *ReservationAPIService) PutReservationPackage(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutReservationPackageRequest {
	return ReservationAPIPutReservationPackageRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationPackagesInfo
func (a *ReservationAPIService) PutReservationPackageExecute(r ReservationAPIPutReservationPackageRequest) (*ReservationPackagesInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationPackagesInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutReservationPackage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/packages"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationPackagesInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutReservationPreferenceRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	preferenceCode string
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationPreferenceInfo *ReservationPreferenceInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutReservationPreferenceRequest) Authorization(authorization string) ReservationAPIPutReservationPreferenceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutReservationPreferenceRequest) XAppKey(xAppKey string) ReservationAPIPutReservationPreferenceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutReservationPreferenceRequest) XHotelid(xHotelid string) ReservationAPIPutReservationPreferenceRequest {
	r.xHotelid = &xHotelid
	return r
}

// Method to change a reservation preference on an existing reservation.
func (r ReservationAPIPutReservationPreferenceRequest) ReservationPreferenceInfo(reservationPreferenceInfo ReservationPreferenceInfo) ReservationAPIPutReservationPreferenceRequest {
	r.reservationPreferenceInfo = &reservationPreferenceInfo
	return r
}

// External system code.
func (r ReservationAPIPutReservationPreferenceRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutReservationPreferenceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutReservationPreferenceRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutReservationPreferenceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutReservationPreferenceRequest) Execute() (*ReservationPreferenceDetails, *http.Response, error) {
	return r.ApiService.PutReservationPreferenceExecute(r)
}

/*
PutReservationPreference Change a Reservation Preference

You can use this API to update the preferences that exist on a reservation. <p><strong>OperationId:</strong>putReservationPreference</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param preferenceCode Preference Code
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutReservationPreferenceRequest
*/
func (a *ReservationAPIService) PutReservationPreference(ctx context.Context, preferenceCode string, reservationId string, hotelId string) ReservationAPIPutReservationPreferenceRequest {
	return ReservationAPIPutReservationPreferenceRequest{
		ApiService: a,
		ctx: ctx,
		preferenceCode: preferenceCode,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationPreferenceDetails
func (a *ReservationAPIService) PutReservationPreferenceExecute(r ReservationAPIPutReservationPreferenceRequest) (*ReservationPreferenceDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationPreferenceDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutReservationPreference")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/preferences/{preferenceCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"preferenceCode"+"}", url.PathEscape(parameterValueToString(r.preferenceCode, "preferenceCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.preferenceCode) < 1 {
		return localVarReturnValue, nil, reportError("preferenceCode must have at least 1 elements")
	}
	if strlen(r.preferenceCode) > 2000 {
		return localVarReturnValue, nil, reportError("preferenceCode must have less than 2000 elements")
	}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationPreferenceInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutReservationsUpgradeEligibilityRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationsUpgradeEligibility *ReservationsUpgradeEligibility
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutReservationsUpgradeEligibilityRequest) Authorization(authorization string) ReservationAPIPutReservationsUpgradeEligibilityRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutReservationsUpgradeEligibilityRequest) XAppKey(xAppKey string) ReservationAPIPutReservationsUpgradeEligibilityRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutReservationsUpgradeEligibilityRequest) XHotelid(xHotelid string) ReservationAPIPutReservationsUpgradeEligibilityRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object containing a list of reservation name ids, hotel code and eligibility flag.
func (r ReservationAPIPutReservationsUpgradeEligibilityRequest) ReservationsUpgradeEligibility(reservationsUpgradeEligibility ReservationsUpgradeEligibility) ReservationAPIPutReservationsUpgradeEligibilityRequest {
	r.reservationsUpgradeEligibility = &reservationsUpgradeEligibility
	return r
}

// External system code.
func (r ReservationAPIPutReservationsUpgradeEligibilityRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutReservationsUpgradeEligibilityRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutReservationsUpgradeEligibilityRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutReservationsUpgradeEligibilityRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutReservationsUpgradeEligibilityRequest) Execute() (*ReservationsUpgradeEligibilityDetails, *http.Response, error) {
	return r.ApiService.PutReservationsUpgradeEligibilityExecute(r)
}

/*
PutReservationsUpgradeEligibility Set Upgrade Eligibility for Reservations

You can use this API to set Upgrade Eligibility for Reservations. <p><strong>OperationId:</strong>putReservationsUpgradeEligibility</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutReservationsUpgradeEligibilityRequest
*/
func (a *ReservationAPIService) PutReservationsUpgradeEligibility(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutReservationsUpgradeEligibilityRequest {
	return ReservationAPIPutReservationsUpgradeEligibilityRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservationsUpgradeEligibilityDetails
func (a *ReservationAPIService) PutReservationsUpgradeEligibilityExecute(r ReservationAPIPutReservationsUpgradeEligibilityRequest) (*ReservationsUpgradeEligibilityDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationsUpgradeEligibilityDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutReservationsUpgradeEligibility")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/upgradeEligibleReservations"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationsUpgradeEligibility
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutReservedInventoryItemsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservedInventoryItemsInfo *ReservedInventoryItemsInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutReservedInventoryItemsRequest) Authorization(authorization string) ReservationAPIPutReservedInventoryItemsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutReservedInventoryItemsRequest) XAppKey(xAppKey string) ReservationAPIPutReservedInventoryItemsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutReservedInventoryItemsRequest) XHotelid(xHotelid string) ReservationAPIPutReservedInventoryItemsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to change the reserved inventory Items for a reservation.
func (r ReservationAPIPutReservedInventoryItemsRequest) ReservedInventoryItemsInfo(reservedInventoryItemsInfo ReservedInventoryItemsInfo) ReservationAPIPutReservedInventoryItemsRequest {
	r.reservedInventoryItemsInfo = &reservedInventoryItemsInfo
	return r
}

// External system code.
func (r ReservationAPIPutReservedInventoryItemsRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutReservedInventoryItemsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutReservedInventoryItemsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutReservedInventoryItemsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutReservedInventoryItemsRequest) Execute() (*ReservedInventoryItemsInfo, *http.Response, error) {
	return r.ApiService.PutReservedInventoryItemsExecute(r)
}

/*
PutReservedInventoryItems Change reserved Inventory Items 

Change the Inventory Items reserved for the Reservation. <p><strong>OperationId:</strong>putReservedInventoryItems</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutReservedInventoryItemsRequest
*/
func (a *ReservationAPIService) PutReservedInventoryItems(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutReservedInventoryItemsRequest {
	return ReservationAPIPutReservedInventoryItemsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ReservedInventoryItemsInfo
func (a *ReservationAPIService) PutReservedInventoryItemsExecute(r ReservationAPIPutReservedInventoryItemsRequest) (*ReservedInventoryItemsInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservedInventoryItemsInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutReservedInventoryItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/inventoryItems"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservedInventoryItemsInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutResvGuestMessagesRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	changeResvGuestMessages *ChangeResvGuestMessages
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutResvGuestMessagesRequest) Authorization(authorization string) ReservationAPIPutResvGuestMessagesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutResvGuestMessagesRequest) XAppKey(xAppKey string) ReservationAPIPutResvGuestMessagesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutResvGuestMessagesRequest) XHotelid(xHotelid string) ReservationAPIPutResvGuestMessagesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for updating the Guest Messages for a Reservation Workspace.
func (r ReservationAPIPutResvGuestMessagesRequest) ChangeResvGuestMessages(changeResvGuestMessages ChangeResvGuestMessages) ReservationAPIPutResvGuestMessagesRequest {
	r.changeResvGuestMessages = &changeResvGuestMessages
	return r
}

// External system code.
func (r ReservationAPIPutResvGuestMessagesRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutResvGuestMessagesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutResvGuestMessagesRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutResvGuestMessagesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutResvGuestMessagesRequest) Execute() (*ChangeResvGuestMessages, *http.Response, error) {
	return r.ApiService.PutResvGuestMessagesExecute(r)
}

/*
PutResvGuestMessages Change Reservation Guest Messages

Change guest messages for Reservation. <p><strong>OperationId:</strong>putResvGuestMessages</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutResvGuestMessagesRequest
*/
func (a *ReservationAPIService) PutResvGuestMessages(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutResvGuestMessagesRequest {
	return ReservationAPIPutResvGuestMessagesRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ChangeResvGuestMessages
func (a *ReservationAPIService) PutResvGuestMessagesExecute(r ReservationAPIPutResvGuestMessagesRequest) (*ChangeResvGuestMessages, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangeResvGuestMessages
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutResvGuestMessages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/guestMessages"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.changeResvGuestMessages
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutRoutingInstructionsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	routingInstructionsInfo *RoutingInstructionsInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutRoutingInstructionsRequest) Authorization(authorization string) ReservationAPIPutRoutingInstructionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutRoutingInstructionsRequest) XAppKey(xAppKey string) ReservationAPIPutRoutingInstructionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutRoutingInstructionsRequest) XHotelid(xHotelid string) ReservationAPIPutRoutingInstructionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request when changing a routing instruction.
func (r ReservationAPIPutRoutingInstructionsRequest) RoutingInstructionsInfo(routingInstructionsInfo RoutingInstructionsInfo) ReservationAPIPutRoutingInstructionsRequest {
	r.routingInstructionsInfo = &routingInstructionsInfo
	return r
}

// External system code.
func (r ReservationAPIPutRoutingInstructionsRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutRoutingInstructionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutRoutingInstructionsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutRoutingInstructionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutRoutingInstructionsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutRoutingInstructionsExecute(r)
}

/*
PutRoutingInstructions Change routing instructions

Change routing instructions on an existing reservation. <p><strong>OperationId:</strong>putRoutingInstructions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutRoutingInstructionsRequest
*/
func (a *ReservationAPIService) PutRoutingInstructions(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutRoutingInstructionsRequest {
	return ReservationAPIPutRoutingInstructionsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PutRoutingInstructionsExecute(r ReservationAPIPutRoutingInstructionsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutRoutingInstructions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/routingInstructions"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.routingInstructionsInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutRoutingInstructionsByExtIdRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationExternalId string
	externalSystemCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	routingInstructionsInfo *RoutingInstructionsInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutRoutingInstructionsByExtIdRequest) Authorization(authorization string) ReservationAPIPutRoutingInstructionsByExtIdRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutRoutingInstructionsByExtIdRequest) XAppKey(xAppKey string) ReservationAPIPutRoutingInstructionsByExtIdRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutRoutingInstructionsByExtIdRequest) XHotelid(xHotelid string) ReservationAPIPutRoutingInstructionsByExtIdRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request when changing a routing instruction.
func (r ReservationAPIPutRoutingInstructionsByExtIdRequest) RoutingInstructionsInfo(routingInstructionsInfo RoutingInstructionsInfo) ReservationAPIPutRoutingInstructionsByExtIdRequest {
	r.routingInstructionsInfo = &routingInstructionsInfo
	return r
}

// External system code.
func (r ReservationAPIPutRoutingInstructionsByExtIdRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutRoutingInstructionsByExtIdRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutRoutingInstructionsByExtIdRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutRoutingInstructionsByExtIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutRoutingInstructionsByExtIdRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutRoutingInstructionsByExtIdExecute(r)
}

/*
PutRoutingInstructionsByExtId Change routing instructions

Change routing instructions on an existing reservation. <p><strong>OperationId:</strong>putRoutingInstructionsByExtId</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationExternalId External reservation ID.
 @param externalSystemCode Code to identify the external system from which the request is coming. This is the ExternalSystem ID used to exchange information between OPERA and the external system.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutRoutingInstructionsByExtIdRequest
*/
func (a *ReservationAPIService) PutRoutingInstructionsByExtId(ctx context.Context, reservationExternalId string, externalSystemCode string, hotelId string) ReservationAPIPutRoutingInstructionsByExtIdRequest {
	return ReservationAPIPutRoutingInstructionsByExtIdRequest{
		ApiService: a,
		ctx: ctx,
		reservationExternalId: reservationExternalId,
		externalSystemCode: externalSystemCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ReservationAPIService) PutRoutingInstructionsByExtIdExecute(r ReservationAPIPutRoutingInstructionsByExtIdRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutRoutingInstructionsByExtId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/routingInstructions"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationExternalId"+"}", url.PathEscape(parameterValueToString(r.reservationExternalId, "reservationExternalId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalSystemCode"+"}", url.PathEscape(parameterValueToString(r.externalSystemCode, "externalSystemCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationExternalId) < 1 {
		return localVarReturnValue, nil, reportError("reservationExternalId must have at least 1 elements")
	}
	if strlen(r.reservationExternalId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationExternalId must have less than 2000 elements")
	}
	if strlen(r.externalSystemCode) < 1 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have at least 1 elements")
	}
	if strlen(r.externalSystemCode) > 2000 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.routingInstructionsInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutSellMessageConfigRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	sellMessageConfig *SellMessageConfig
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutSellMessageConfigRequest) Authorization(authorization string) ReservationAPIPutSellMessageConfigRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutSellMessageConfigRequest) XAppKey(xAppKey string) ReservationAPIPutSellMessageConfigRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutSellMessageConfigRequest) XHotelid(xHotelid string) ReservationAPIPutSellMessageConfigRequest {
	r.xHotelid = &xHotelid
	return r
}

// This is the request message type for sell message update operation.
func (r ReservationAPIPutSellMessageConfigRequest) SellMessageConfig(sellMessageConfig SellMessageConfig) ReservationAPIPutSellMessageConfigRequest {
	r.sellMessageConfig = &sellMessageConfig
	return r
}

// External system code.
func (r ReservationAPIPutSellMessageConfigRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutSellMessageConfigRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutSellMessageConfigRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutSellMessageConfigRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutSellMessageConfigRequest) Execute() (*SellMessageConfig, *http.Response, error) {
	return r.ApiService.PutSellMessageConfigExecute(r)
}

/*
PutSellMessageConfig Change sell message

Update the existing sell message configuration for a property. <p><strong>OperationId:</strong>putSellMessageConfig</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutSellMessageConfigRequest
*/
func (a *ReservationAPIService) PutSellMessageConfig(ctx context.Context, hotelId string) ReservationAPIPutSellMessageConfigRequest {
	return ReservationAPIPutSellMessageConfigRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return SellMessageConfig
func (a *ReservationAPIService) PutSellMessageConfigExecute(r ReservationAPIPutSellMessageConfigRequest) (*SellMessageConfig, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SellMessageConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutSellMessageConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/sellMessages/config"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.sellMessageConfig
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutSellMessageConfigByChainRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	sellMessageConfig *SellMessageConfig
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutSellMessageConfigByChainRequest) Authorization(authorization string) ReservationAPIPutSellMessageConfigByChainRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutSellMessageConfigByChainRequest) XAppKey(xAppKey string) ReservationAPIPutSellMessageConfigByChainRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutSellMessageConfigByChainRequest) XHotelid(xHotelid string) ReservationAPIPutSellMessageConfigByChainRequest {
	r.xHotelid = &xHotelid
	return r
}

// This is the request message type for sell message update operation.
func (r ReservationAPIPutSellMessageConfigByChainRequest) SellMessageConfig(sellMessageConfig SellMessageConfig) ReservationAPIPutSellMessageConfigByChainRequest {
	r.sellMessageConfig = &sellMessageConfig
	return r
}

// External system code.
func (r ReservationAPIPutSellMessageConfigByChainRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutSellMessageConfigByChainRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutSellMessageConfigByChainRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutSellMessageConfigByChainRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutSellMessageConfigByChainRequest) Execute() (*SellMessageConfig, *http.Response, error) {
	return r.ApiService.PutSellMessageConfigByChainExecute(r)
}

/*
PutSellMessageConfigByChain Change sell message by chain

Update the existing sell message configuration. <p><strong>OperationId:</strong>putSellMessageConfigByChain</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReservationAPIPutSellMessageConfigByChainRequest
*/
func (a *ReservationAPIService) PutSellMessageConfigByChain(ctx context.Context) ReservationAPIPutSellMessageConfigByChainRequest {
	return ReservationAPIPutSellMessageConfigByChainRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SellMessageConfig
func (a *ReservationAPIService) PutSellMessageConfigByChainExecute(r ReservationAPIPutSellMessageConfigByChainRequest) (*SellMessageConfig, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SellMessageConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutSellMessageConfigByChain")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sellMessages/config"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.sellMessageConfig
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutShareRateAmountRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	changeShareRateAmount *ChangeShareRateAmount
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutShareRateAmountRequest) Authorization(authorization string) ReservationAPIPutShareRateAmountRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutShareRateAmountRequest) XAppKey(xAppKey string) ReservationAPIPutShareRateAmountRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutShareRateAmountRequest) XHotelid(xHotelid string) ReservationAPIPutShareRateAmountRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to change the share amount for a sharer reservation. The amount change type can be Full, Entire or Split
func (r ReservationAPIPutShareRateAmountRequest) ChangeShareRateAmount(changeShareRateAmount ChangeShareRateAmount) ReservationAPIPutShareRateAmountRequest {
	r.changeShareRateAmount = &changeShareRateAmount
	return r
}

// External system code.
func (r ReservationAPIPutShareRateAmountRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutShareRateAmountRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutShareRateAmountRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutShareRateAmountRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutShareRateAmountRequest) Execute() (*ShareReservations, *http.Response, error) {
	return r.ApiService.PutShareRateAmountExecute(r)
}

/*
PutShareRateAmount Change Share Rate Amount

Change the share amounts of a reservation <p><strong>OperationId:</strong>putShareRateAmount</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutShareRateAmountRequest
*/
func (a *ReservationAPIService) PutShareRateAmount(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutShareRateAmountRequest {
	return ReservationAPIPutShareRateAmountRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ShareReservations
func (a *ReservationAPIService) PutShareRateAmountExecute(r ReservationAPIPutShareRateAmountRequest) (*ShareReservations, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ShareReservations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutShareRateAmount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/shareRateAmount"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.changeShareRateAmount
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutSharingGuestsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	changeSharingGuests *ChangeSharingGuests
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutSharingGuestsRequest) Authorization(authorization string) ReservationAPIPutSharingGuestsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutSharingGuestsRequest) XAppKey(xAppKey string) ReservationAPIPutSharingGuestsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutSharingGuestsRequest) XHotelid(xHotelid string) ReservationAPIPutSharingGuestsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to change Sharing Reservations Guest Counts(adults or children) information.
func (r ReservationAPIPutSharingGuestsRequest) ChangeSharingGuests(changeSharingGuests ChangeSharingGuests) ReservationAPIPutSharingGuestsRequest {
	r.changeSharingGuests = &changeSharingGuests
	return r
}

// External system code.
func (r ReservationAPIPutSharingGuestsRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutSharingGuestsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutSharingGuestsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutSharingGuestsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutSharingGuestsRequest) Execute() (*ChangeSharingGuests, *http.Response, error) {
	return r.ApiService.PutSharingGuestsExecute(r)
}

/*
PutSharingGuests Change Sharing Guests

Change the guest counts(adults or children) for a Sharing Reservation <p><strong>OperationId:</strong>putSharingGuests</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutSharingGuestsRequest
*/
func (a *ReservationAPIService) PutSharingGuests(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutSharingGuestsRequest {
	return ReservationAPIPutSharingGuestsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ChangeSharingGuests
func (a *ReservationAPIService) PutSharingGuestsExecute(r ReservationAPIPutSharingGuestsRequest) (*ChangeSharingGuests, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangeSharingGuests
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutSharingGuests")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/sharedGuestCount"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.changeSharingGuests
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutSplitMultiRoomReservationRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	authorization *string
	xAppKey *string
	xHotelid *string
	splitMultiRoomReservation *SplitMultiRoomReservation
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutSplitMultiRoomReservationRequest) Authorization(authorization string) ReservationAPIPutSplitMultiRoomReservationRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutSplitMultiRoomReservationRequest) XAppKey(xAppKey string) ReservationAPIPutSplitMultiRoomReservationRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutSplitMultiRoomReservationRequest) XHotelid(xHotelid string) ReservationAPIPutSplitMultiRoomReservationRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to split multi-room reservation into separate reservations.
func (r ReservationAPIPutSplitMultiRoomReservationRequest) SplitMultiRoomReservation(splitMultiRoomReservation SplitMultiRoomReservation) ReservationAPIPutSplitMultiRoomReservationRequest {
	r.splitMultiRoomReservation = &splitMultiRoomReservation
	return r
}

// External system code.
func (r ReservationAPIPutSplitMultiRoomReservationRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutSplitMultiRoomReservationRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutSplitMultiRoomReservationRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutSplitMultiRoomReservationRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutSplitMultiRoomReservationRequest) Execute() (*SplitMultiRoomReservationDetails, *http.Response, error) {
	return r.ApiService.PutSplitMultiRoomReservationExecute(r)
}

/*
PutSplitMultiRoomReservation Split multi room Reservation

You can use this API to split a multi room reservation.  This will create a new confirmation number for the split reservation. <p><strong>OperationId:</strong>putSplitMultiRoomReservation</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @return ReservationAPIPutSplitMultiRoomReservationRequest
*/
func (a *ReservationAPIService) PutSplitMultiRoomReservation(ctx context.Context, reservationId string) ReservationAPIPutSplitMultiRoomReservationRequest {
	return ReservationAPIPutSplitMultiRoomReservationRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
	}
}

// Execute executes the request
//  @return SplitMultiRoomReservationDetails
func (a *ReservationAPIService) PutSplitMultiRoomReservationExecute(r ReservationAPIPutSplitMultiRoomReservationRequest) (*SplitMultiRoomReservationDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SplitMultiRoomReservationDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutSplitMultiRoomReservation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reservations/{reservationId}/split"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.splitMultiRoomReservation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutTicketsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	ticketsInfo *TicketsInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutTicketsRequest) Authorization(authorization string) ReservationAPIPutTicketsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutTicketsRequest) XAppKey(xAppKey string) ReservationAPIPutTicketsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutTicketsRequest) XHotelid(xHotelid string) ReservationAPIPutTicketsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Common tickets request base type.
func (r ReservationAPIPutTicketsRequest) TicketsInfo(ticketsInfo TicketsInfo) ReservationAPIPutTicketsRequest {
	r.ticketsInfo = &ticketsInfo
	return r
}

// External system code.
func (r ReservationAPIPutTicketsRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutTicketsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutTicketsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutTicketsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutTicketsRequest) Execute() (*Tickets, *http.Response, error) {
	return r.ApiService.PutTicketsExecute(r)
}

/*
PutTickets Change tickets

Use this API to change tickets on a reservation. <p><strong>OperationId:</strong>putTickets</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutTicketsRequest
*/
func (a *ReservationAPIService) PutTickets(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutTicketsRequest {
	return ReservationAPIPutTicketsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Tickets
func (a *ReservationAPIService) PutTicketsExecute(r ReservationAPIPutTicketsRequest) (*Tickets, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Tickets
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutTickets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/tickets"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.ticketsInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutTransactionDiversionsRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	transactionDiversionsInfo *TransactionDiversionsInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutTransactionDiversionsRequest) Authorization(authorization string) ReservationAPIPutTransactionDiversionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutTransactionDiversionsRequest) XAppKey(xAppKey string) ReservationAPIPutTransactionDiversionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutTransactionDiversionsRequest) XHotelid(xHotelid string) ReservationAPIPutTransactionDiversionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to modify transaction diversion rules attached to a reservation.
func (r ReservationAPIPutTransactionDiversionsRequest) TransactionDiversionsInfo(transactionDiversionsInfo TransactionDiversionsInfo) ReservationAPIPutTransactionDiversionsRequest {
	r.transactionDiversionsInfo = &transactionDiversionsInfo
	return r
}

// External system code.
func (r ReservationAPIPutTransactionDiversionsRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutTransactionDiversionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutTransactionDiversionsRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutTransactionDiversionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutTransactionDiversionsRequest) Execute() (*TransactionDiversionsDetails, *http.Response, error) {
	return r.ApiService.PutTransactionDiversionsExecute(r)
}

/*
PutTransactionDiversions Change Transaction Diversions 

You can use this API to change Transaction Diversions. <p><strong>OperationId:</strong>putTransactionDiversions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutTransactionDiversionsRequest
*/
func (a *ReservationAPIService) PutTransactionDiversions(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutTransactionDiversionsRequest {
	return ReservationAPIPutTransactionDiversionsRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return TransactionDiversionsDetails
func (a *ReservationAPIService) PutTransactionDiversionsExecute(r ReservationAPIPutTransactionDiversionsRequest) (*TransactionDiversionsDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionDiversionsDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutTransactionDiversions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/transactionDiversions"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.transactionDiversionsInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutValidateOverlappingStayRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	overlappingStay *OverlappingStay
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutValidateOverlappingStayRequest) Authorization(authorization string) ReservationAPIPutValidateOverlappingStayRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutValidateOverlappingStayRequest) XAppKey(xAppKey string) ReservationAPIPutValidateOverlappingStayRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutValidateOverlappingStayRequest) XHotelid(xHotelid string) ReservationAPIPutValidateOverlappingStayRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to check for overlapping stays of reservations.
func (r ReservationAPIPutValidateOverlappingStayRequest) OverlappingStay(overlappingStay OverlappingStay) ReservationAPIPutValidateOverlappingStayRequest {
	r.overlappingStay = &overlappingStay
	return r
}

// External system code.
func (r ReservationAPIPutValidateOverlappingStayRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutValidateOverlappingStayRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutValidateOverlappingStayRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutValidateOverlappingStayRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutValidateOverlappingStayRequest) Execute() (*OverlappingStayDetails, *http.Response, error) {
	return r.ApiService.PutValidateOverlappingStayExecute(r)
}

/*
PutValidateOverlappingStay Check overlapping stay

Validate overlapping stay for a reservation <p><strong>OperationId:</strong>putValidateOverlappingStay</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutValidateOverlappingStayRequest
*/
func (a *ReservationAPIService) PutValidateOverlappingStay(ctx context.Context, reservationId string, hotelId string) ReservationAPIPutValidateOverlappingStayRequest {
	return ReservationAPIPutValidateOverlappingStayRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return OverlappingStayDetails
func (a *ReservationAPIService) PutValidateOverlappingStayExecute(r ReservationAPIPutValidateOverlappingStayRequest) (*OverlappingStayDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OverlappingStayDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutValidateOverlappingStay")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/stay/action/validate"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.overlappingStay
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutValidateOverlappingStaysRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	overlappingStay *OverlappingStay
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutValidateOverlappingStaysRequest) Authorization(authorization string) ReservationAPIPutValidateOverlappingStaysRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutValidateOverlappingStaysRequest) XAppKey(xAppKey string) ReservationAPIPutValidateOverlappingStaysRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutValidateOverlappingStaysRequest) XHotelid(xHotelid string) ReservationAPIPutValidateOverlappingStaysRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to check for overlapping stays of reservations.
func (r ReservationAPIPutValidateOverlappingStaysRequest) OverlappingStay(overlappingStay OverlappingStay) ReservationAPIPutValidateOverlappingStaysRequest {
	r.overlappingStay = &overlappingStay
	return r
}

// External system code.
func (r ReservationAPIPutValidateOverlappingStaysRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutValidateOverlappingStaysRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutValidateOverlappingStaysRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutValidateOverlappingStaysRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutValidateOverlappingStaysRequest) Execute() (*OverlappingStayDetails, *http.Response, error) {
	return r.ApiService.PutValidateOverlappingStaysExecute(r)
}

/*
PutValidateOverlappingStays Check overlapping stay

Validate overlapping stays <p><strong>OperationId:</strong>putValidateOverlappingStays</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutValidateOverlappingStaysRequest
*/
func (a *ReservationAPIService) PutValidateOverlappingStays(ctx context.Context, hotelId string) ReservationAPIPutValidateOverlappingStaysRequest {
	return ReservationAPIPutValidateOverlappingStaysRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return OverlappingStayDetails
func (a *ReservationAPIService) PutValidateOverlappingStaysExecute(r ReservationAPIPutValidateOverlappingStaysRequest) (*OverlappingStayDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OverlappingStayDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutValidateOverlappingStays")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/stay/action/validate"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.overlappingStay
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIPutValidateReservationChangesRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	validateReservationChanges *PutValidateReservationChangesRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIPutValidateReservationChangesRequest) Authorization(authorization string) ReservationAPIPutValidateReservationChangesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIPutValidateReservationChangesRequest) XAppKey(xAppKey string) ReservationAPIPutValidateReservationChangesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIPutValidateReservationChangesRequest) XHotelid(xHotelid string) ReservationAPIPutValidateReservationChangesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to validate reservation changes.
func (r ReservationAPIPutValidateReservationChangesRequest) ValidateReservationChanges(validateReservationChanges PutValidateReservationChangesRequest) ReservationAPIPutValidateReservationChangesRequest {
	r.validateReservationChanges = &validateReservationChanges
	return r
}

// External system code.
func (r ReservationAPIPutValidateReservationChangesRequest) XExternalsystem(xExternalsystem string) ReservationAPIPutValidateReservationChangesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIPutValidateReservationChangesRequest) AcceptLanguage(acceptLanguage string) ReservationAPIPutValidateReservationChangesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIPutValidateReservationChangesRequest) Execute() (*ValidateReservationChangesDetails, *http.Response, error) {
	return r.ApiService.PutValidateReservationChangesExecute(r)
}

/*
PutValidateReservationChanges Validate Reservation Change

Use this API to validate either the guarantee type or stay details of a reservation you are about to create. <p><strong>OperationId:</strong>putValidateReservationChanges</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIPutValidateReservationChangesRequest
*/
func (a *ReservationAPIService) PutValidateReservationChanges(ctx context.Context, hotelId string) ReservationAPIPutValidateReservationChangesRequest {
	return ReservationAPIPutValidateReservationChangesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ValidateReservationChangesDetails
func (a *ReservationAPIService) PutValidateReservationChangesExecute(r ReservationAPIPutValidateReservationChangesRequest) (*ValidateReservationChangesDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ValidateReservationChangesDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.PutValidateReservationChanges")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/validations"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.validateReservationChanges
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReservationAPIValidateRateInfoRequest struct {
	ctx context.Context
	ApiService *ReservationAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	validateRateInfo *ValidateRateInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ReservationAPIValidateRateInfoRequest) Authorization(authorization string) ReservationAPIValidateRateInfoRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ReservationAPIValidateRateInfoRequest) XAppKey(xAppKey string) ReservationAPIValidateRateInfoRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ReservationAPIValidateRateInfoRequest) XHotelid(xHotelid string) ReservationAPIValidateRateInfoRequest {
	r.xHotelid = &xHotelid
	return r
}

// Retrieve either the reservation&#39;s rate information or make a quotation for a rate information. SummaryInfo attribute specifies if the item being requested is of detail or summary type.
func (r ReservationAPIValidateRateInfoRequest) ValidateRateInfo(validateRateInfo ValidateRateInfo) ReservationAPIValidateRateInfoRequest {
	r.validateRateInfo = &validateRateInfo
	return r
}

// External system code.
func (r ReservationAPIValidateRateInfoRequest) XExternalsystem(xExternalsystem string) ReservationAPIValidateRateInfoRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ReservationAPIValidateRateInfoRequest) AcceptLanguage(acceptLanguage string) ReservationAPIValidateRateInfoRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ReservationAPIValidateRateInfoRequest) Execute() (*RateInfo, *http.Response, error) {
	return r.ApiService.ValidateRateInfoExecute(r)
}

/*
ValidateRateInfo Validate rate information

Validate the rate plan information for a reservation. <p><strong>OperationId:</strong>validateRateInfo</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where reservation is searched based on reservation ID.
 @return ReservationAPIValidateRateInfoRequest
*/
func (a *ReservationAPIService) ValidateRateInfo(ctx context.Context, hotelId string) ReservationAPIValidateRateInfoRequest {
	return ReservationAPIValidateRateInfoRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return RateInfo
func (a *ReservationAPIService) ValidateRateInfoExecute(r ReservationAPIValidateRateInfoRequest) (*RateInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RateInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReservationAPIService.ValidateRateInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rateInfoValidation"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.validateRateInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
