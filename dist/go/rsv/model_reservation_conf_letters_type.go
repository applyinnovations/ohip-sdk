/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ReservationConfLettersType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReservationConfLettersType{}

// ReservationConfLettersType Reservation information and the confirmation letters type attached with it.
type ReservationConfLettersType struct {
	// List of confirmation letters.
	ConfLetters []ConfirmationType `json:"confLetters,omitempty"`
	Reservation *ReservationInfoType `json:"reservation,omitempty"`
}

// NewReservationConfLettersType instantiates a new ReservationConfLettersType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservationConfLettersType() *ReservationConfLettersType {
	this := ReservationConfLettersType{}
	return &this
}

// NewReservationConfLettersTypeWithDefaults instantiates a new ReservationConfLettersType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservationConfLettersTypeWithDefaults() *ReservationConfLettersType {
	this := ReservationConfLettersType{}
	return &this
}

// GetConfLetters returns the ConfLetters field value if set, zero value otherwise.
func (o *ReservationConfLettersType) GetConfLetters() []ConfirmationType {
	if o == nil || IsNil(o.ConfLetters) {
		var ret []ConfirmationType
		return ret
	}
	return o.ConfLetters
}

// GetConfLettersOk returns a tuple with the ConfLetters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationConfLettersType) GetConfLettersOk() ([]ConfirmationType, bool) {
	if o == nil || IsNil(o.ConfLetters) {
		return nil, false
	}
	return o.ConfLetters, true
}

// HasConfLetters returns a boolean if a field has been set.
func (o *ReservationConfLettersType) HasConfLetters() bool {
	if o != nil && !IsNil(o.ConfLetters) {
		return true
	}

	return false
}

// SetConfLetters gets a reference to the given []ConfirmationType and assigns it to the ConfLetters field.
func (o *ReservationConfLettersType) SetConfLetters(v []ConfirmationType) {
	o.ConfLetters = v
}

// GetReservation returns the Reservation field value if set, zero value otherwise.
func (o *ReservationConfLettersType) GetReservation() ReservationInfoType {
	if o == nil || IsNil(o.Reservation) {
		var ret ReservationInfoType
		return ret
	}
	return *o.Reservation
}

// GetReservationOk returns a tuple with the Reservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationConfLettersType) GetReservationOk() (*ReservationInfoType, bool) {
	if o == nil || IsNil(o.Reservation) {
		return nil, false
	}
	return o.Reservation, true
}

// HasReservation returns a boolean if a field has been set.
func (o *ReservationConfLettersType) HasReservation() bool {
	if o != nil && !IsNil(o.Reservation) {
		return true
	}

	return false
}

// SetReservation gets a reference to the given ReservationInfoType and assigns it to the Reservation field.
func (o *ReservationConfLettersType) SetReservation(v ReservationInfoType) {
	o.Reservation = &v
}

func (o ReservationConfLettersType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReservationConfLettersType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfLetters) {
		toSerialize["confLetters"] = o.ConfLetters
	}
	if !IsNil(o.Reservation) {
		toSerialize["reservation"] = o.Reservation
	}
	return toSerialize, nil
}

type NullableReservationConfLettersType struct {
	value *ReservationConfLettersType
	isSet bool
}

func (v NullableReservationConfLettersType) Get() *ReservationConfLettersType {
	return v.value
}

func (v *NullableReservationConfLettersType) Set(val *ReservationConfLettersType) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationConfLettersType) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationConfLettersType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationConfLettersType(val *ReservationConfLettersType) *NullableReservationConfLettersType {
	return &NullableReservationConfLettersType{value: val, isSet: true}
}

func (v NullableReservationConfLettersType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationConfLettersType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


