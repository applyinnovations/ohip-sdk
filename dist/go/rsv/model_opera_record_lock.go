/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the OperaRecordLock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OperaRecordLock{}

// OperaRecordLock This type contains information about a record lock.
type OperaRecordLock struct {
	// This is the identifier of the lock. This will be null when the requesting user does not own the lock.
	LockHandle *float32 `json:"lockHandle,omitempty"`
	RecordType *OperaLockRecordType `json:"recordType,omitempty"`
	// This is the id of the locked record.
	RecordId *string `json:"recordId,omitempty"`
	// This is the user name of the current owner of the locked record.
	CreatedBy *string `json:"createdBy,omitempty"`
	// This is the time when the record was locked.
	CreatedOn *string `json:"createdOn,omitempty"`
	// This is the validity of the lock in seconds.
	TimeToLive *float32 `json:"timeToLive,omitempty"`
	// This is the estimated expiry time of the lock.
	ExpiresOn *string `json:"expiresOn,omitempty"`
	// Notification flag to specify if the lock is based on an Internal Opera9 lock versus an External lock.
	Internal *bool `json:"internal,omitempty"`
}

// NewOperaRecordLock instantiates a new OperaRecordLock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperaRecordLock() *OperaRecordLock {
	this := OperaRecordLock{}
	return &this
}

// NewOperaRecordLockWithDefaults instantiates a new OperaRecordLock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperaRecordLockWithDefaults() *OperaRecordLock {
	this := OperaRecordLock{}
	return &this
}

// GetLockHandle returns the LockHandle field value if set, zero value otherwise.
func (o *OperaRecordLock) GetLockHandle() float32 {
	if o == nil || IsNil(o.LockHandle) {
		var ret float32
		return ret
	}
	return *o.LockHandle
}

// GetLockHandleOk returns a tuple with the LockHandle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaRecordLock) GetLockHandleOk() (*float32, bool) {
	if o == nil || IsNil(o.LockHandle) {
		return nil, false
	}
	return o.LockHandle, true
}

// HasLockHandle returns a boolean if a field has been set.
func (o *OperaRecordLock) HasLockHandle() bool {
	if o != nil && !IsNil(o.LockHandle) {
		return true
	}

	return false
}

// SetLockHandle gets a reference to the given float32 and assigns it to the LockHandle field.
func (o *OperaRecordLock) SetLockHandle(v float32) {
	o.LockHandle = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *OperaRecordLock) GetRecordType() OperaLockRecordType {
	if o == nil || IsNil(o.RecordType) {
		var ret OperaLockRecordType
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaRecordLock) GetRecordTypeOk() (*OperaLockRecordType, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *OperaRecordLock) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given OperaLockRecordType and assigns it to the RecordType field.
func (o *OperaRecordLock) SetRecordType(v OperaLockRecordType) {
	o.RecordType = &v
}

// GetRecordId returns the RecordId field value if set, zero value otherwise.
func (o *OperaRecordLock) GetRecordId() string {
	if o == nil || IsNil(o.RecordId) {
		var ret string
		return ret
	}
	return *o.RecordId
}

// GetRecordIdOk returns a tuple with the RecordId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaRecordLock) GetRecordIdOk() (*string, bool) {
	if o == nil || IsNil(o.RecordId) {
		return nil, false
	}
	return o.RecordId, true
}

// HasRecordId returns a boolean if a field has been set.
func (o *OperaRecordLock) HasRecordId() bool {
	if o != nil && !IsNil(o.RecordId) {
		return true
	}

	return false
}

// SetRecordId gets a reference to the given string and assigns it to the RecordId field.
func (o *OperaRecordLock) SetRecordId(v string) {
	o.RecordId = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *OperaRecordLock) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaRecordLock) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *OperaRecordLock) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *OperaRecordLock) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetCreatedOn returns the CreatedOn field value if set, zero value otherwise.
func (o *OperaRecordLock) GetCreatedOn() string {
	if o == nil || IsNil(o.CreatedOn) {
		var ret string
		return ret
	}
	return *o.CreatedOn
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaRecordLock) GetCreatedOnOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedOn) {
		return nil, false
	}
	return o.CreatedOn, true
}

// HasCreatedOn returns a boolean if a field has been set.
func (o *OperaRecordLock) HasCreatedOn() bool {
	if o != nil && !IsNil(o.CreatedOn) {
		return true
	}

	return false
}

// SetCreatedOn gets a reference to the given string and assigns it to the CreatedOn field.
func (o *OperaRecordLock) SetCreatedOn(v string) {
	o.CreatedOn = &v
}

// GetTimeToLive returns the TimeToLive field value if set, zero value otherwise.
func (o *OperaRecordLock) GetTimeToLive() float32 {
	if o == nil || IsNil(o.TimeToLive) {
		var ret float32
		return ret
	}
	return *o.TimeToLive
}

// GetTimeToLiveOk returns a tuple with the TimeToLive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaRecordLock) GetTimeToLiveOk() (*float32, bool) {
	if o == nil || IsNil(o.TimeToLive) {
		return nil, false
	}
	return o.TimeToLive, true
}

// HasTimeToLive returns a boolean if a field has been set.
func (o *OperaRecordLock) HasTimeToLive() bool {
	if o != nil && !IsNil(o.TimeToLive) {
		return true
	}

	return false
}

// SetTimeToLive gets a reference to the given float32 and assigns it to the TimeToLive field.
func (o *OperaRecordLock) SetTimeToLive(v float32) {
	o.TimeToLive = &v
}

// GetExpiresOn returns the ExpiresOn field value if set, zero value otherwise.
func (o *OperaRecordLock) GetExpiresOn() string {
	if o == nil || IsNil(o.ExpiresOn) {
		var ret string
		return ret
	}
	return *o.ExpiresOn
}

// GetExpiresOnOk returns a tuple with the ExpiresOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaRecordLock) GetExpiresOnOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiresOn) {
		return nil, false
	}
	return o.ExpiresOn, true
}

// HasExpiresOn returns a boolean if a field has been set.
func (o *OperaRecordLock) HasExpiresOn() bool {
	if o != nil && !IsNil(o.ExpiresOn) {
		return true
	}

	return false
}

// SetExpiresOn gets a reference to the given string and assigns it to the ExpiresOn field.
func (o *OperaRecordLock) SetExpiresOn(v string) {
	o.ExpiresOn = &v
}

// GetInternal returns the Internal field value if set, zero value otherwise.
func (o *OperaRecordLock) GetInternal() bool {
	if o == nil || IsNil(o.Internal) {
		var ret bool
		return ret
	}
	return *o.Internal
}

// GetInternalOk returns a tuple with the Internal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperaRecordLock) GetInternalOk() (*bool, bool) {
	if o == nil || IsNil(o.Internal) {
		return nil, false
	}
	return o.Internal, true
}

// HasInternal returns a boolean if a field has been set.
func (o *OperaRecordLock) HasInternal() bool {
	if o != nil && !IsNil(o.Internal) {
		return true
	}

	return false
}

// SetInternal gets a reference to the given bool and assigns it to the Internal field.
func (o *OperaRecordLock) SetInternal(v bool) {
	o.Internal = &v
}

func (o OperaRecordLock) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OperaRecordLock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LockHandle) {
		toSerialize["lockHandle"] = o.LockHandle
	}
	if !IsNil(o.RecordType) {
		toSerialize["recordType"] = o.RecordType
	}
	if !IsNil(o.RecordId) {
		toSerialize["recordId"] = o.RecordId
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.CreatedOn) {
		toSerialize["createdOn"] = o.CreatedOn
	}
	if !IsNil(o.TimeToLive) {
		toSerialize["timeToLive"] = o.TimeToLive
	}
	if !IsNil(o.ExpiresOn) {
		toSerialize["expiresOn"] = o.ExpiresOn
	}
	if !IsNil(o.Internal) {
		toSerialize["internal"] = o.Internal
	}
	return toSerialize, nil
}

type NullableOperaRecordLock struct {
	value *OperaRecordLock
	isSet bool
}

func (v NullableOperaRecordLock) Get() *OperaRecordLock {
	return v.value
}

func (v *NullableOperaRecordLock) Set(val *OperaRecordLock) {
	v.value = val
	v.isSet = true
}

func (v NullableOperaRecordLock) IsSet() bool {
	return v.isSet
}

func (v *NullableOperaRecordLock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperaRecordLock(val *OperaRecordLock) *NullableOperaRecordLock {
	return &NullableOperaRecordLock{value: val, isSet: true}
}

func (v NullableOperaRecordLock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperaRecordLock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


