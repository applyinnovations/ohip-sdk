/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
	"fmt"
)

// ReservationInstructionType Instruction to fetch whether the room was assigned/upgraded by AI. This will also include Reservation instruction.
type ReservationInstructionType string

// List of reservationInstructionType
const (
	RESERVATIONINSTRUCTIONTYPE_RESERVATION ReservationInstructionType = "Reservation"
	RESERVATIONINSTRUCTIONTYPE_COMMENTS ReservationInstructionType = "Comments"
	RESERVATIONINSTRUCTIONTYPE_GUEST_COMMENTS ReservationInstructionType = "GuestComments"
	RESERVATIONINSTRUCTIONTYPE_PACKAGES ReservationInstructionType = "Packages"
	RESERVATIONINSTRUCTIONTYPE_INVENTORY_ITEMS ReservationInstructionType = "InventoryItems"
	RESERVATIONINSTRUCTIONTYPE_RESERVATION_PAYMENT_METHODS ReservationInstructionType = "ReservationPaymentMethods"
	RESERVATIONINSTRUCTIONTYPE_ROUTING_INSTRUCTIONS ReservationInstructionType = "RoutingInstructions"
	RESERVATIONINSTRUCTIONTYPE_PREFERENCES ReservationInstructionType = "Preferences"
	RESERVATIONINSTRUCTIONTYPE_MEMBERSHIPS ReservationInstructionType = "Memberships"
	RESERVATIONINSTRUCTIONTYPE_ALERTS ReservationInstructionType = "Alerts"
	RESERVATIONINSTRUCTIONTYPE_TRACES ReservationInstructionType = "Traces"
	RESERVATIONINSTRUCTIONTYPE_CONFIRMATION_LETTERS ReservationInstructionType = "ConfirmationLetters"
	RESERVATIONINSTRUCTIONTYPE_CALL_HISTORY ReservationInstructionType = "CallHistory"
	RESERVATIONINSTRUCTIONTYPE_FIXED_CHARGES ReservationInstructionType = "FixedCharges"
	RESERVATIONINSTRUCTIONTYPE_GUEST_MESSAGES ReservationInstructionType = "GuestMessages"
	RESERVATIONINSTRUCTIONTYPE_RESERVATION_POLICIES ReservationInstructionType = "ReservationPolicies"
	RESERVATIONINSTRUCTIONTYPE_INDICATORS ReservationInstructionType = "Indicators"
	RESERVATIONINSTRUCTIONTYPE_LINKED_RESERVATIONS ReservationInstructionType = "LinkedReservations"
	RESERVATIONINSTRUCTIONTYPE_REVENUES_AND_BALANCES ReservationInstructionType = "RevenuesAndBalances"
	RESERVATIONINSTRUCTIONTYPE_GUEST_LAST_STAY ReservationInstructionType = "GuestLastStay"
	RESERVATIONINSTRUCTIONTYPE_E_COUPONS ReservationInstructionType = "ECoupons"
	RESERVATIONINSTRUCTIONTYPE_TRACK_IT_ITEMS ReservationInstructionType = "TrackItItems"
	RESERVATIONINSTRUCTIONTYPE_TOTAL_COST_OF_STAY ReservationInstructionType = "TotalCostOfStay"
	RESERVATIONINSTRUCTIONTYPE_RESERVATION_AWARDS ReservationInstructionType = "ReservationAwards"
	RESERVATIONINSTRUCTIONTYPE_WEB_REGISTRATION_CARDS ReservationInstructionType = "WebRegistrationCards"
	RESERVATIONINSTRUCTIONTYPE_SERVICE_REQUESTS ReservationInstructionType = "ServiceRequests"
	RESERVATIONINSTRUCTIONTYPE_RESERVATION_ACTIVITIES ReservationInstructionType = "ReservationActivities"
	RESERVATIONINSTRUCTIONTYPE_SCHEDULED_ACTIVITIES ReservationInstructionType = "ScheduledActivities"
	RESERVATIONINSTRUCTIONTYPE_PREPAID_CARDS ReservationInstructionType = "PrepaidCards"
	RESERVATIONINSTRUCTIONTYPE_SHARES ReservationInstructionType = "Shares"
	RESERVATIONINSTRUCTIONTYPE_ATTACHMENTS ReservationInstructionType = "Attachments"
	RESERVATIONINSTRUCTIONTYPE_LOCATORS ReservationInstructionType = "Locators"
	RESERVATIONINSTRUCTIONTYPE_PROFILE_AWARDS ReservationInstructionType = "ProfileAwards"
	RESERVATIONINSTRUCTIONTYPE_TRANSACTION_DIVERSIONS ReservationInstructionType = "TransactionDiversions"
	RESERVATIONINSTRUCTIONTYPE_TICKETS ReservationInstructionType = "Tickets"
	RESERVATIONINSTRUCTIONTYPE_GUEST_MEMBERSHIPS ReservationInstructionType = "GuestMemberships"
	RESERVATIONINSTRUCTIONTYPE_E_CERTIFICATES ReservationInstructionType = "ECertificates"
	RESERVATIONINSTRUCTIONTYPE_UPSELL_INFO ReservationInstructionType = "UpsellInfo"
	RESERVATIONINSTRUCTIONTYPE_ROOM_ASSIGNED_BY_AI ReservationInstructionType = "RoomAssignedByAI"
	RESERVATIONINSTRUCTIONTYPE_CUSTOM_NAME_VALUE ReservationInstructionType = "CustomNameValue"
	RESERVATIONINSTRUCTIONTYPE_CUSTOM_CHARGE_EXEMPTIONS ReservationInstructionType = "CustomChargeExemptions"
)

// All allowed values of ReservationInstructionType enum
var AllowedReservationInstructionTypeEnumValues = []ReservationInstructionType{
	"Reservation",
	"Comments",
	"GuestComments",
	"Packages",
	"InventoryItems",
	"ReservationPaymentMethods",
	"RoutingInstructions",
	"Preferences",
	"Memberships",
	"Alerts",
	"Traces",
	"ConfirmationLetters",
	"CallHistory",
	"FixedCharges",
	"GuestMessages",
	"ReservationPolicies",
	"Indicators",
	"LinkedReservations",
	"RevenuesAndBalances",
	"GuestLastStay",
	"ECoupons",
	"TrackItItems",
	"TotalCostOfStay",
	"ReservationAwards",
	"WebRegistrationCards",
	"ServiceRequests",
	"ReservationActivities",
	"ScheduledActivities",
	"PrepaidCards",
	"Shares",
	"Attachments",
	"Locators",
	"ProfileAwards",
	"TransactionDiversions",
	"Tickets",
	"GuestMemberships",
	"ECertificates",
	"UpsellInfo",
	"RoomAssignedByAI",
	"CustomNameValue",
	"CustomChargeExemptions",
}

func (v *ReservationInstructionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReservationInstructionType(value)
	for _, existing := range AllowedReservationInstructionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReservationInstructionType", value)
}

// NewReservationInstructionTypeFromValue returns a pointer to a valid ReservationInstructionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReservationInstructionTypeFromValue(v string) (*ReservationInstructionType, error) {
	ev := ReservationInstructionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReservationInstructionType: valid values are %v", v, AllowedReservationInstructionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReservationInstructionType) IsValid() bool {
	for _, existing := range AllowedReservationInstructionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to reservationInstructionType value
func (v ReservationInstructionType) Ptr() *ReservationInstructionType {
	return &v
}

type NullableReservationInstructionType struct {
	value *ReservationInstructionType
	isSet bool
}

func (v NullableReservationInstructionType) Get() *ReservationInstructionType {
	return v.value
}

func (v *NullableReservationInstructionType) Set(val *ReservationInstructionType) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationInstructionType) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationInstructionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationInstructionType(val *ReservationInstructionType) *NullableReservationInstructionType {
	return &NullableReservationInstructionType{value: val, isSet: true}
}

func (v NullableReservationInstructionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationInstructionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

