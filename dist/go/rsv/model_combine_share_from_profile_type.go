/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the CombineShareFromProfileType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CombineShareFromProfileType{}

// CombineShareFromProfileType Type for the profile information to create a new share reservation. This is used to create sharers from profiles.
type CombineShareFromProfileType struct {
	NewSharerId *UniqueIDType `json:"newSharerId,omitempty"`
	GuestCounts *GuestCountsType `json:"guestCounts,omitempty"`
	ReservationPaymentMethod *ReservationPaymentMethodType `json:"reservationPaymentMethod,omitempty"`
	ReservationPaymentMethods *CopyReservationPaymentMethodsType `json:"reservationPaymentMethods,omitempty"`
	Guarantee *ResGuaranteeType `json:"guarantee,omitempty"`
	// Defines room rate information on a daily basis.
	DailyRates []DailyRateType `json:"dailyRates,omitempty"`
	TimeSpan *TimeSpanType `json:"timeSpan,omitempty"`
}

// NewCombineShareFromProfileType instantiates a new CombineShareFromProfileType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCombineShareFromProfileType() *CombineShareFromProfileType {
	this := CombineShareFromProfileType{}
	return &this
}

// NewCombineShareFromProfileTypeWithDefaults instantiates a new CombineShareFromProfileType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCombineShareFromProfileTypeWithDefaults() *CombineShareFromProfileType {
	this := CombineShareFromProfileType{}
	return &this
}

// GetNewSharerId returns the NewSharerId field value if set, zero value otherwise.
func (o *CombineShareFromProfileType) GetNewSharerId() UniqueIDType {
	if o == nil || IsNil(o.NewSharerId) {
		var ret UniqueIDType
		return ret
	}
	return *o.NewSharerId
}

// GetNewSharerIdOk returns a tuple with the NewSharerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareFromProfileType) GetNewSharerIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.NewSharerId) {
		return nil, false
	}
	return o.NewSharerId, true
}

// HasNewSharerId returns a boolean if a field has been set.
func (o *CombineShareFromProfileType) HasNewSharerId() bool {
	if o != nil && !IsNil(o.NewSharerId) {
		return true
	}

	return false
}

// SetNewSharerId gets a reference to the given UniqueIDType and assigns it to the NewSharerId field.
func (o *CombineShareFromProfileType) SetNewSharerId(v UniqueIDType) {
	o.NewSharerId = &v
}

// GetGuestCounts returns the GuestCounts field value if set, zero value otherwise.
func (o *CombineShareFromProfileType) GetGuestCounts() GuestCountsType {
	if o == nil || IsNil(o.GuestCounts) {
		var ret GuestCountsType
		return ret
	}
	return *o.GuestCounts
}

// GetGuestCountsOk returns a tuple with the GuestCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareFromProfileType) GetGuestCountsOk() (*GuestCountsType, bool) {
	if o == nil || IsNil(o.GuestCounts) {
		return nil, false
	}
	return o.GuestCounts, true
}

// HasGuestCounts returns a boolean if a field has been set.
func (o *CombineShareFromProfileType) HasGuestCounts() bool {
	if o != nil && !IsNil(o.GuestCounts) {
		return true
	}

	return false
}

// SetGuestCounts gets a reference to the given GuestCountsType and assigns it to the GuestCounts field.
func (o *CombineShareFromProfileType) SetGuestCounts(v GuestCountsType) {
	o.GuestCounts = &v
}

// GetReservationPaymentMethod returns the ReservationPaymentMethod field value if set, zero value otherwise.
func (o *CombineShareFromProfileType) GetReservationPaymentMethod() ReservationPaymentMethodType {
	if o == nil || IsNil(o.ReservationPaymentMethod) {
		var ret ReservationPaymentMethodType
		return ret
	}
	return *o.ReservationPaymentMethod
}

// GetReservationPaymentMethodOk returns a tuple with the ReservationPaymentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareFromProfileType) GetReservationPaymentMethodOk() (*ReservationPaymentMethodType, bool) {
	if o == nil || IsNil(o.ReservationPaymentMethod) {
		return nil, false
	}
	return o.ReservationPaymentMethod, true
}

// HasReservationPaymentMethod returns a boolean if a field has been set.
func (o *CombineShareFromProfileType) HasReservationPaymentMethod() bool {
	if o != nil && !IsNil(o.ReservationPaymentMethod) {
		return true
	}

	return false
}

// SetReservationPaymentMethod gets a reference to the given ReservationPaymentMethodType and assigns it to the ReservationPaymentMethod field.
func (o *CombineShareFromProfileType) SetReservationPaymentMethod(v ReservationPaymentMethodType) {
	o.ReservationPaymentMethod = &v
}

// GetReservationPaymentMethods returns the ReservationPaymentMethods field value if set, zero value otherwise.
func (o *CombineShareFromProfileType) GetReservationPaymentMethods() CopyReservationPaymentMethodsType {
	if o == nil || IsNil(o.ReservationPaymentMethods) {
		var ret CopyReservationPaymentMethodsType
		return ret
	}
	return *o.ReservationPaymentMethods
}

// GetReservationPaymentMethodsOk returns a tuple with the ReservationPaymentMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareFromProfileType) GetReservationPaymentMethodsOk() (*CopyReservationPaymentMethodsType, bool) {
	if o == nil || IsNil(o.ReservationPaymentMethods) {
		return nil, false
	}
	return o.ReservationPaymentMethods, true
}

// HasReservationPaymentMethods returns a boolean if a field has been set.
func (o *CombineShareFromProfileType) HasReservationPaymentMethods() bool {
	if o != nil && !IsNil(o.ReservationPaymentMethods) {
		return true
	}

	return false
}

// SetReservationPaymentMethods gets a reference to the given CopyReservationPaymentMethodsType and assigns it to the ReservationPaymentMethods field.
func (o *CombineShareFromProfileType) SetReservationPaymentMethods(v CopyReservationPaymentMethodsType) {
	o.ReservationPaymentMethods = &v
}

// GetGuarantee returns the Guarantee field value if set, zero value otherwise.
func (o *CombineShareFromProfileType) GetGuarantee() ResGuaranteeType {
	if o == nil || IsNil(o.Guarantee) {
		var ret ResGuaranteeType
		return ret
	}
	return *o.Guarantee
}

// GetGuaranteeOk returns a tuple with the Guarantee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareFromProfileType) GetGuaranteeOk() (*ResGuaranteeType, bool) {
	if o == nil || IsNil(o.Guarantee) {
		return nil, false
	}
	return o.Guarantee, true
}

// HasGuarantee returns a boolean if a field has been set.
func (o *CombineShareFromProfileType) HasGuarantee() bool {
	if o != nil && !IsNil(o.Guarantee) {
		return true
	}

	return false
}

// SetGuarantee gets a reference to the given ResGuaranteeType and assigns it to the Guarantee field.
func (o *CombineShareFromProfileType) SetGuarantee(v ResGuaranteeType) {
	o.Guarantee = &v
}

// GetDailyRates returns the DailyRates field value if set, zero value otherwise.
func (o *CombineShareFromProfileType) GetDailyRates() []DailyRateType {
	if o == nil || IsNil(o.DailyRates) {
		var ret []DailyRateType
		return ret
	}
	return o.DailyRates
}

// GetDailyRatesOk returns a tuple with the DailyRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareFromProfileType) GetDailyRatesOk() ([]DailyRateType, bool) {
	if o == nil || IsNil(o.DailyRates) {
		return nil, false
	}
	return o.DailyRates, true
}

// HasDailyRates returns a boolean if a field has been set.
func (o *CombineShareFromProfileType) HasDailyRates() bool {
	if o != nil && !IsNil(o.DailyRates) {
		return true
	}

	return false
}

// SetDailyRates gets a reference to the given []DailyRateType and assigns it to the DailyRates field.
func (o *CombineShareFromProfileType) SetDailyRates(v []DailyRateType) {
	o.DailyRates = v
}

// GetTimeSpan returns the TimeSpan field value if set, zero value otherwise.
func (o *CombineShareFromProfileType) GetTimeSpan() TimeSpanType {
	if o == nil || IsNil(o.TimeSpan) {
		var ret TimeSpanType
		return ret
	}
	return *o.TimeSpan
}

// GetTimeSpanOk returns a tuple with the TimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareFromProfileType) GetTimeSpanOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.TimeSpan) {
		return nil, false
	}
	return o.TimeSpan, true
}

// HasTimeSpan returns a boolean if a field has been set.
func (o *CombineShareFromProfileType) HasTimeSpan() bool {
	if o != nil && !IsNil(o.TimeSpan) {
		return true
	}

	return false
}

// SetTimeSpan gets a reference to the given TimeSpanType and assigns it to the TimeSpan field.
func (o *CombineShareFromProfileType) SetTimeSpan(v TimeSpanType) {
	o.TimeSpan = &v
}

func (o CombineShareFromProfileType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CombineShareFromProfileType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NewSharerId) {
		toSerialize["newSharerId"] = o.NewSharerId
	}
	if !IsNil(o.GuestCounts) {
		toSerialize["guestCounts"] = o.GuestCounts
	}
	if !IsNil(o.ReservationPaymentMethod) {
		toSerialize["reservationPaymentMethod"] = o.ReservationPaymentMethod
	}
	if !IsNil(o.ReservationPaymentMethods) {
		toSerialize["reservationPaymentMethods"] = o.ReservationPaymentMethods
	}
	if !IsNil(o.Guarantee) {
		toSerialize["guarantee"] = o.Guarantee
	}
	if !IsNil(o.DailyRates) {
		toSerialize["dailyRates"] = o.DailyRates
	}
	if !IsNil(o.TimeSpan) {
		toSerialize["timeSpan"] = o.TimeSpan
	}
	return toSerialize, nil
}

type NullableCombineShareFromProfileType struct {
	value *CombineShareFromProfileType
	isSet bool
}

func (v NullableCombineShareFromProfileType) Get() *CombineShareFromProfileType {
	return v.value
}

func (v *NullableCombineShareFromProfileType) Set(val *CombineShareFromProfileType) {
	v.value = val
	v.isSet = true
}

func (v NullableCombineShareFromProfileType) IsSet() bool {
	return v.isSet
}

func (v *NullableCombineShareFromProfileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCombineShareFromProfileType(val *CombineShareFromProfileType) *NullableCombineShareFromProfileType {
	return &NullableCombineShareFromProfileType{value: val, isSet: true}
}

func (v NullableCombineShareFromProfileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCombineShareFromProfileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


