/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ReservationAddOnPackagesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReservationAddOnPackagesType{}

// ReservationAddOnPackagesType A Service object represents a non-room product provided to guests. Service products may have associated inventory and charges.
type ReservationAddOnPackagesType struct {
	// A Service object represents a package provided to guests. Service packages may have associated inventory and charges.
	ReservationPackages []AddOnReservationPackageType `json:"reservationPackages,omitempty"`
	// Indicates if scheduleList and calculationRule provided in this request should override package configuration. When overridePackageConfiguration is true the scheduleList is mandatory.
	OverridePackageConfiguration *bool `json:"overridePackageConfiguration,omitempty"`
	// Indicates if Availablity should be overriden when an Inventory Item based on a package is not available.
	OverrideInventoryItemAvailabilty *bool `json:"overrideInventoryItemAvailabilty,omitempty"`
}

// NewReservationAddOnPackagesType instantiates a new ReservationAddOnPackagesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservationAddOnPackagesType() *ReservationAddOnPackagesType {
	this := ReservationAddOnPackagesType{}
	var overridePackageConfiguration bool = true
	this.OverridePackageConfiguration = &overridePackageConfiguration
	var overrideInventoryItemAvailabilty bool = false
	this.OverrideInventoryItemAvailabilty = &overrideInventoryItemAvailabilty
	return &this
}

// NewReservationAddOnPackagesTypeWithDefaults instantiates a new ReservationAddOnPackagesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservationAddOnPackagesTypeWithDefaults() *ReservationAddOnPackagesType {
	this := ReservationAddOnPackagesType{}
	var overridePackageConfiguration bool = true
	this.OverridePackageConfiguration = &overridePackageConfiguration
	var overrideInventoryItemAvailabilty bool = false
	this.OverrideInventoryItemAvailabilty = &overrideInventoryItemAvailabilty
	return &this
}

// GetReservationPackages returns the ReservationPackages field value if set, zero value otherwise.
func (o *ReservationAddOnPackagesType) GetReservationPackages() []AddOnReservationPackageType {
	if o == nil || IsNil(o.ReservationPackages) {
		var ret []AddOnReservationPackageType
		return ret
	}
	return o.ReservationPackages
}

// GetReservationPackagesOk returns a tuple with the ReservationPackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationAddOnPackagesType) GetReservationPackagesOk() ([]AddOnReservationPackageType, bool) {
	if o == nil || IsNil(o.ReservationPackages) {
		return nil, false
	}
	return o.ReservationPackages, true
}

// HasReservationPackages returns a boolean if a field has been set.
func (o *ReservationAddOnPackagesType) HasReservationPackages() bool {
	if o != nil && !IsNil(o.ReservationPackages) {
		return true
	}

	return false
}

// SetReservationPackages gets a reference to the given []AddOnReservationPackageType and assigns it to the ReservationPackages field.
func (o *ReservationAddOnPackagesType) SetReservationPackages(v []AddOnReservationPackageType) {
	o.ReservationPackages = v
}

// GetOverridePackageConfiguration returns the OverridePackageConfiguration field value if set, zero value otherwise.
func (o *ReservationAddOnPackagesType) GetOverridePackageConfiguration() bool {
	if o == nil || IsNil(o.OverridePackageConfiguration) {
		var ret bool
		return ret
	}
	return *o.OverridePackageConfiguration
}

// GetOverridePackageConfigurationOk returns a tuple with the OverridePackageConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationAddOnPackagesType) GetOverridePackageConfigurationOk() (*bool, bool) {
	if o == nil || IsNil(o.OverridePackageConfiguration) {
		return nil, false
	}
	return o.OverridePackageConfiguration, true
}

// HasOverridePackageConfiguration returns a boolean if a field has been set.
func (o *ReservationAddOnPackagesType) HasOverridePackageConfiguration() bool {
	if o != nil && !IsNil(o.OverridePackageConfiguration) {
		return true
	}

	return false
}

// SetOverridePackageConfiguration gets a reference to the given bool and assigns it to the OverridePackageConfiguration field.
func (o *ReservationAddOnPackagesType) SetOverridePackageConfiguration(v bool) {
	o.OverridePackageConfiguration = &v
}

// GetOverrideInventoryItemAvailabilty returns the OverrideInventoryItemAvailabilty field value if set, zero value otherwise.
func (o *ReservationAddOnPackagesType) GetOverrideInventoryItemAvailabilty() bool {
	if o == nil || IsNil(o.OverrideInventoryItemAvailabilty) {
		var ret bool
		return ret
	}
	return *o.OverrideInventoryItemAvailabilty
}

// GetOverrideInventoryItemAvailabiltyOk returns a tuple with the OverrideInventoryItemAvailabilty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationAddOnPackagesType) GetOverrideInventoryItemAvailabiltyOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideInventoryItemAvailabilty) {
		return nil, false
	}
	return o.OverrideInventoryItemAvailabilty, true
}

// HasOverrideInventoryItemAvailabilty returns a boolean if a field has been set.
func (o *ReservationAddOnPackagesType) HasOverrideInventoryItemAvailabilty() bool {
	if o != nil && !IsNil(o.OverrideInventoryItemAvailabilty) {
		return true
	}

	return false
}

// SetOverrideInventoryItemAvailabilty gets a reference to the given bool and assigns it to the OverrideInventoryItemAvailabilty field.
func (o *ReservationAddOnPackagesType) SetOverrideInventoryItemAvailabilty(v bool) {
	o.OverrideInventoryItemAvailabilty = &v
}

func (o ReservationAddOnPackagesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReservationAddOnPackagesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReservationPackages) {
		toSerialize["reservationPackages"] = o.ReservationPackages
	}
	if !IsNil(o.OverridePackageConfiguration) {
		toSerialize["overridePackageConfiguration"] = o.OverridePackageConfiguration
	}
	if !IsNil(o.OverrideInventoryItemAvailabilty) {
		toSerialize["overrideInventoryItemAvailabilty"] = o.OverrideInventoryItemAvailabilty
	}
	return toSerialize, nil
}

type NullableReservationAddOnPackagesType struct {
	value *ReservationAddOnPackagesType
	isSet bool
}

func (v NullableReservationAddOnPackagesType) Get() *ReservationAddOnPackagesType {
	return v.value
}

func (v *NullableReservationAddOnPackagesType) Set(val *ReservationAddOnPackagesType) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationAddOnPackagesType) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationAddOnPackagesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationAddOnPackagesType(val *ReservationAddOnPackagesType) *NullableReservationAddOnPackagesType {
	return &NullableReservationAddOnPackagesType{value: val, isSet: true}
}

func (v NullableReservationAddOnPackagesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationAddOnPackagesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


