/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the NumericCategorySummaryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NumericCategorySummaryType{}

// NumericCategorySummaryType This element has count data for each count category such as number of guests, rooms occupied, etc.
type NumericCategorySummaryType struct {
	// The total count for the category in NumericCategoryCode.
	NumericSummary *float32 `json:"numericSummary,omitempty"`
	// The representation of a numeric category such as Guests : Number of guests, RoomsOcc : Rooms occupied.
	NumericCategoryCode *string `json:"numericCategoryCode,omitempty"`
}

// NewNumericCategorySummaryType instantiates a new NumericCategorySummaryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNumericCategorySummaryType() *NumericCategorySummaryType {
	this := NumericCategorySummaryType{}
	return &this
}

// NewNumericCategorySummaryTypeWithDefaults instantiates a new NumericCategorySummaryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNumericCategorySummaryTypeWithDefaults() *NumericCategorySummaryType {
	this := NumericCategorySummaryType{}
	return &this
}

// GetNumericSummary returns the NumericSummary field value if set, zero value otherwise.
func (o *NumericCategorySummaryType) GetNumericSummary() float32 {
	if o == nil || IsNil(o.NumericSummary) {
		var ret float32
		return ret
	}
	return *o.NumericSummary
}

// GetNumericSummaryOk returns a tuple with the NumericSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumericCategorySummaryType) GetNumericSummaryOk() (*float32, bool) {
	if o == nil || IsNil(o.NumericSummary) {
		return nil, false
	}
	return o.NumericSummary, true
}

// HasNumericSummary returns a boolean if a field has been set.
func (o *NumericCategorySummaryType) HasNumericSummary() bool {
	if o != nil && !IsNil(o.NumericSummary) {
		return true
	}

	return false
}

// SetNumericSummary gets a reference to the given float32 and assigns it to the NumericSummary field.
func (o *NumericCategorySummaryType) SetNumericSummary(v float32) {
	o.NumericSummary = &v
}

// GetNumericCategoryCode returns the NumericCategoryCode field value if set, zero value otherwise.
func (o *NumericCategorySummaryType) GetNumericCategoryCode() string {
	if o == nil || IsNil(o.NumericCategoryCode) {
		var ret string
		return ret
	}
	return *o.NumericCategoryCode
}

// GetNumericCategoryCodeOk returns a tuple with the NumericCategoryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumericCategorySummaryType) GetNumericCategoryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.NumericCategoryCode) {
		return nil, false
	}
	return o.NumericCategoryCode, true
}

// HasNumericCategoryCode returns a boolean if a field has been set.
func (o *NumericCategorySummaryType) HasNumericCategoryCode() bool {
	if o != nil && !IsNil(o.NumericCategoryCode) {
		return true
	}

	return false
}

// SetNumericCategoryCode gets a reference to the given string and assigns it to the NumericCategoryCode field.
func (o *NumericCategorySummaryType) SetNumericCategoryCode(v string) {
	o.NumericCategoryCode = &v
}

func (o NumericCategorySummaryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NumericCategorySummaryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NumericSummary) {
		toSerialize["numericSummary"] = o.NumericSummary
	}
	if !IsNil(o.NumericCategoryCode) {
		toSerialize["numericCategoryCode"] = o.NumericCategoryCode
	}
	return toSerialize, nil
}

type NullableNumericCategorySummaryType struct {
	value *NumericCategorySummaryType
	isSet bool
}

func (v NullableNumericCategorySummaryType) Get() *NumericCategorySummaryType {
	return v.value
}

func (v *NullableNumericCategorySummaryType) Set(val *NumericCategorySummaryType) {
	v.value = val
	v.isSet = true
}

func (v NullableNumericCategorySummaryType) IsSet() bool {
	return v.isSet
}

func (v *NullableNumericCategorySummaryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumericCategorySummaryType(val *NumericCategorySummaryType) *NullableNumericCategorySummaryType {
	return &NullableNumericCategorySummaryType{value: val, isSet: true}
}

func (v NullableNumericCategorySummaryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumericCategorySummaryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


