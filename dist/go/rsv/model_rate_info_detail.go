/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the RateInfoDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateInfoDetail{}

// RateInfoDetail The revenue information for the rate code.
type RateInfoDetail struct {
	Revenue *TotalType `json:"revenue,omitempty"`
	// Package information for the rate code.
	Packages []TotalType `json:"packages,omitempty"`
	// Indicates if the rate is to be hidden.
	RateSuppressed *bool `json:"rateSuppressed,omitempty"`
}

// NewRateInfoDetail instantiates a new RateInfoDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateInfoDetail() *RateInfoDetail {
	this := RateInfoDetail{}
	return &this
}

// NewRateInfoDetailWithDefaults instantiates a new RateInfoDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateInfoDetailWithDefaults() *RateInfoDetail {
	this := RateInfoDetail{}
	return &this
}

// GetRevenue returns the Revenue field value if set, zero value otherwise.
func (o *RateInfoDetail) GetRevenue() TotalType {
	if o == nil || IsNil(o.Revenue) {
		var ret TotalType
		return ret
	}
	return *o.Revenue
}

// GetRevenueOk returns a tuple with the Revenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateInfoDetail) GetRevenueOk() (*TotalType, bool) {
	if o == nil || IsNil(o.Revenue) {
		return nil, false
	}
	return o.Revenue, true
}

// HasRevenue returns a boolean if a field has been set.
func (o *RateInfoDetail) HasRevenue() bool {
	if o != nil && !IsNil(o.Revenue) {
		return true
	}

	return false
}

// SetRevenue gets a reference to the given TotalType and assigns it to the Revenue field.
func (o *RateInfoDetail) SetRevenue(v TotalType) {
	o.Revenue = &v
}

// GetPackages returns the Packages field value if set, zero value otherwise.
func (o *RateInfoDetail) GetPackages() []TotalType {
	if o == nil || IsNil(o.Packages) {
		var ret []TotalType
		return ret
	}
	return o.Packages
}

// GetPackagesOk returns a tuple with the Packages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateInfoDetail) GetPackagesOk() ([]TotalType, bool) {
	if o == nil || IsNil(o.Packages) {
		return nil, false
	}
	return o.Packages, true
}

// HasPackages returns a boolean if a field has been set.
func (o *RateInfoDetail) HasPackages() bool {
	if o != nil && !IsNil(o.Packages) {
		return true
	}

	return false
}

// SetPackages gets a reference to the given []TotalType and assigns it to the Packages field.
func (o *RateInfoDetail) SetPackages(v []TotalType) {
	o.Packages = v
}

// GetRateSuppressed returns the RateSuppressed field value if set, zero value otherwise.
func (o *RateInfoDetail) GetRateSuppressed() bool {
	if o == nil || IsNil(o.RateSuppressed) {
		var ret bool
		return ret
	}
	return *o.RateSuppressed
}

// GetRateSuppressedOk returns a tuple with the RateSuppressed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateInfoDetail) GetRateSuppressedOk() (*bool, bool) {
	if o == nil || IsNil(o.RateSuppressed) {
		return nil, false
	}
	return o.RateSuppressed, true
}

// HasRateSuppressed returns a boolean if a field has been set.
func (o *RateInfoDetail) HasRateSuppressed() bool {
	if o != nil && !IsNil(o.RateSuppressed) {
		return true
	}

	return false
}

// SetRateSuppressed gets a reference to the given bool and assigns it to the RateSuppressed field.
func (o *RateInfoDetail) SetRateSuppressed(v bool) {
	o.RateSuppressed = &v
}

func (o RateInfoDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateInfoDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Revenue) {
		toSerialize["revenue"] = o.Revenue
	}
	if !IsNil(o.Packages) {
		toSerialize["packages"] = o.Packages
	}
	if !IsNil(o.RateSuppressed) {
		toSerialize["rateSuppressed"] = o.RateSuppressed
	}
	return toSerialize, nil
}

type NullableRateInfoDetail struct {
	value *RateInfoDetail
	isSet bool
}

func (v NullableRateInfoDetail) Get() *RateInfoDetail {
	return v.value
}

func (v *NullableRateInfoDetail) Set(val *RateInfoDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableRateInfoDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableRateInfoDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateInfoDetail(val *RateInfoDetail) *NullableRateInfoDetail {
	return &NullableRateInfoDetail{value: val, isSet: true}
}

func (v NullableRateInfoDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateInfoDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


