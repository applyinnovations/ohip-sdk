/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the FolioShortInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FolioShortInfoType{}

// FolioShortInfoType This type contains information of generated bills.
type FolioShortInfoType struct {
	// Flag to indicate if the folio is auto generated or not.
	AutoGenerated *bool `json:"autoGenerated,omitempty"`
	// Folio No of the bill generated.
	FolioNo *float32 `json:"folioNo,omitempty"`
	// Folio type of the bill generated.
	FolioType *string `json:"folioType,omitempty"`
}

// NewFolioShortInfoType instantiates a new FolioShortInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFolioShortInfoType() *FolioShortInfoType {
	this := FolioShortInfoType{}
	return &this
}

// NewFolioShortInfoTypeWithDefaults instantiates a new FolioShortInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFolioShortInfoTypeWithDefaults() *FolioShortInfoType {
	this := FolioShortInfoType{}
	return &this
}

// GetAutoGenerated returns the AutoGenerated field value if set, zero value otherwise.
func (o *FolioShortInfoType) GetAutoGenerated() bool {
	if o == nil || IsNil(o.AutoGenerated) {
		var ret bool
		return ret
	}
	return *o.AutoGenerated
}

// GetAutoGeneratedOk returns a tuple with the AutoGenerated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolioShortInfoType) GetAutoGeneratedOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoGenerated) {
		return nil, false
	}
	return o.AutoGenerated, true
}

// HasAutoGenerated returns a boolean if a field has been set.
func (o *FolioShortInfoType) HasAutoGenerated() bool {
	if o != nil && !IsNil(o.AutoGenerated) {
		return true
	}

	return false
}

// SetAutoGenerated gets a reference to the given bool and assigns it to the AutoGenerated field.
func (o *FolioShortInfoType) SetAutoGenerated(v bool) {
	o.AutoGenerated = &v
}

// GetFolioNo returns the FolioNo field value if set, zero value otherwise.
func (o *FolioShortInfoType) GetFolioNo() float32 {
	if o == nil || IsNil(o.FolioNo) {
		var ret float32
		return ret
	}
	return *o.FolioNo
}

// GetFolioNoOk returns a tuple with the FolioNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolioShortInfoType) GetFolioNoOk() (*float32, bool) {
	if o == nil || IsNil(o.FolioNo) {
		return nil, false
	}
	return o.FolioNo, true
}

// HasFolioNo returns a boolean if a field has been set.
func (o *FolioShortInfoType) HasFolioNo() bool {
	if o != nil && !IsNil(o.FolioNo) {
		return true
	}

	return false
}

// SetFolioNo gets a reference to the given float32 and assigns it to the FolioNo field.
func (o *FolioShortInfoType) SetFolioNo(v float32) {
	o.FolioNo = &v
}

// GetFolioType returns the FolioType field value if set, zero value otherwise.
func (o *FolioShortInfoType) GetFolioType() string {
	if o == nil || IsNil(o.FolioType) {
		var ret string
		return ret
	}
	return *o.FolioType
}

// GetFolioTypeOk returns a tuple with the FolioType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolioShortInfoType) GetFolioTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FolioType) {
		return nil, false
	}
	return o.FolioType, true
}

// HasFolioType returns a boolean if a field has been set.
func (o *FolioShortInfoType) HasFolioType() bool {
	if o != nil && !IsNil(o.FolioType) {
		return true
	}

	return false
}

// SetFolioType gets a reference to the given string and assigns it to the FolioType field.
func (o *FolioShortInfoType) SetFolioType(v string) {
	o.FolioType = &v
}

func (o FolioShortInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FolioShortInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutoGenerated) {
		toSerialize["autoGenerated"] = o.AutoGenerated
	}
	if !IsNil(o.FolioNo) {
		toSerialize["folioNo"] = o.FolioNo
	}
	if !IsNil(o.FolioType) {
		toSerialize["folioType"] = o.FolioType
	}
	return toSerialize, nil
}

type NullableFolioShortInfoType struct {
	value *FolioShortInfoType
	isSet bool
}

func (v NullableFolioShortInfoType) Get() *FolioShortInfoType {
	return v.value
}

func (v *NullableFolioShortInfoType) Set(val *FolioShortInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableFolioShortInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableFolioShortInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolioShortInfoType(val *FolioShortInfoType) *NullableFolioShortInfoType {
	return &NullableFolioShortInfoType{value: val, isSet: true}
}

func (v NullableFolioShortInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolioShortInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


