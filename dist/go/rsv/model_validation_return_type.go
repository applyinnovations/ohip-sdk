/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ValidationReturnType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidationReturnType{}

// ValidationReturnType Validations type record returned after Validations are done.
type ValidationReturnType struct {
	// The type of Validation Record. Example would be OVERBOOK_INVENTORY, OVERRIDE_MAX_OCCUPANCY, CREDIT_CARD_REQUIRED In some cases this will match a permission.
	ValidationType *string `json:"validationType,omitempty"`
	// The message returned after validating.
	ValidationMessage *string `json:"validationMessage,omitempty"`
	ValidationAction *ValidationActionType `json:"validationAction,omitempty"`
	// The code returned after validation.
	ValidationCode *string `json:"validationCode,omitempty"`
	// List of Reservations.
	InvalidReservations []ReservationSummaryType `json:"invalidReservations,omitempty"`
}

// NewValidationReturnType instantiates a new ValidationReturnType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidationReturnType() *ValidationReturnType {
	this := ValidationReturnType{}
	return &this
}

// NewValidationReturnTypeWithDefaults instantiates a new ValidationReturnType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationReturnTypeWithDefaults() *ValidationReturnType {
	this := ValidationReturnType{}
	return &this
}

// GetValidationType returns the ValidationType field value if set, zero value otherwise.
func (o *ValidationReturnType) GetValidationType() string {
	if o == nil || IsNil(o.ValidationType) {
		var ret string
		return ret
	}
	return *o.ValidationType
}

// GetValidationTypeOk returns a tuple with the ValidationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationReturnType) GetValidationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ValidationType) {
		return nil, false
	}
	return o.ValidationType, true
}

// HasValidationType returns a boolean if a field has been set.
func (o *ValidationReturnType) HasValidationType() bool {
	if o != nil && !IsNil(o.ValidationType) {
		return true
	}

	return false
}

// SetValidationType gets a reference to the given string and assigns it to the ValidationType field.
func (o *ValidationReturnType) SetValidationType(v string) {
	o.ValidationType = &v
}

// GetValidationMessage returns the ValidationMessage field value if set, zero value otherwise.
func (o *ValidationReturnType) GetValidationMessage() string {
	if o == nil || IsNil(o.ValidationMessage) {
		var ret string
		return ret
	}
	return *o.ValidationMessage
}

// GetValidationMessageOk returns a tuple with the ValidationMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationReturnType) GetValidationMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ValidationMessage) {
		return nil, false
	}
	return o.ValidationMessage, true
}

// HasValidationMessage returns a boolean if a field has been set.
func (o *ValidationReturnType) HasValidationMessage() bool {
	if o != nil && !IsNil(o.ValidationMessage) {
		return true
	}

	return false
}

// SetValidationMessage gets a reference to the given string and assigns it to the ValidationMessage field.
func (o *ValidationReturnType) SetValidationMessage(v string) {
	o.ValidationMessage = &v
}

// GetValidationAction returns the ValidationAction field value if set, zero value otherwise.
func (o *ValidationReturnType) GetValidationAction() ValidationActionType {
	if o == nil || IsNil(o.ValidationAction) {
		var ret ValidationActionType
		return ret
	}
	return *o.ValidationAction
}

// GetValidationActionOk returns a tuple with the ValidationAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationReturnType) GetValidationActionOk() (*ValidationActionType, bool) {
	if o == nil || IsNil(o.ValidationAction) {
		return nil, false
	}
	return o.ValidationAction, true
}

// HasValidationAction returns a boolean if a field has been set.
func (o *ValidationReturnType) HasValidationAction() bool {
	if o != nil && !IsNil(o.ValidationAction) {
		return true
	}

	return false
}

// SetValidationAction gets a reference to the given ValidationActionType and assigns it to the ValidationAction field.
func (o *ValidationReturnType) SetValidationAction(v ValidationActionType) {
	o.ValidationAction = &v
}

// GetValidationCode returns the ValidationCode field value if set, zero value otherwise.
func (o *ValidationReturnType) GetValidationCode() string {
	if o == nil || IsNil(o.ValidationCode) {
		var ret string
		return ret
	}
	return *o.ValidationCode
}

// GetValidationCodeOk returns a tuple with the ValidationCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationReturnType) GetValidationCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ValidationCode) {
		return nil, false
	}
	return o.ValidationCode, true
}

// HasValidationCode returns a boolean if a field has been set.
func (o *ValidationReturnType) HasValidationCode() bool {
	if o != nil && !IsNil(o.ValidationCode) {
		return true
	}

	return false
}

// SetValidationCode gets a reference to the given string and assigns it to the ValidationCode field.
func (o *ValidationReturnType) SetValidationCode(v string) {
	o.ValidationCode = &v
}

// GetInvalidReservations returns the InvalidReservations field value if set, zero value otherwise.
func (o *ValidationReturnType) GetInvalidReservations() []ReservationSummaryType {
	if o == nil || IsNil(o.InvalidReservations) {
		var ret []ReservationSummaryType
		return ret
	}
	return o.InvalidReservations
}

// GetInvalidReservationsOk returns a tuple with the InvalidReservations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationReturnType) GetInvalidReservationsOk() ([]ReservationSummaryType, bool) {
	if o == nil || IsNil(o.InvalidReservations) {
		return nil, false
	}
	return o.InvalidReservations, true
}

// HasInvalidReservations returns a boolean if a field has been set.
func (o *ValidationReturnType) HasInvalidReservations() bool {
	if o != nil && !IsNil(o.InvalidReservations) {
		return true
	}

	return false
}

// SetInvalidReservations gets a reference to the given []ReservationSummaryType and assigns it to the InvalidReservations field.
func (o *ValidationReturnType) SetInvalidReservations(v []ReservationSummaryType) {
	o.InvalidReservations = v
}

func (o ValidationReturnType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidationReturnType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ValidationType) {
		toSerialize["validationType"] = o.ValidationType
	}
	if !IsNil(o.ValidationMessage) {
		toSerialize["validationMessage"] = o.ValidationMessage
	}
	if !IsNil(o.ValidationAction) {
		toSerialize["validationAction"] = o.ValidationAction
	}
	if !IsNil(o.ValidationCode) {
		toSerialize["validationCode"] = o.ValidationCode
	}
	if !IsNil(o.InvalidReservations) {
		toSerialize["invalidReservations"] = o.InvalidReservations
	}
	return toSerialize, nil
}

type NullableValidationReturnType struct {
	value *ValidationReturnType
	isSet bool
}

func (v NullableValidationReturnType) Get() *ValidationReturnType {
	return v.value
}

func (v *NullableValidationReturnType) Set(val *ValidationReturnType) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationReturnType) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationReturnType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationReturnType(val *ValidationReturnType) *NullableValidationReturnType {
	return &NullableValidationReturnType{value: val, isSet: true}
}

func (v NullableValidationReturnType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationReturnType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


