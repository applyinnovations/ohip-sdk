/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the RoomOccupancyType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomOccupancyType{}

// RoomOccupancyType Room Occupancy information.
type RoomOccupancyType struct {
	// Room Id.
	RoomId *string `json:"roomId,omitempty"`
	// Room Type.
	RoomType *string `json:"roomType,omitempty"`
	// Indicates if the Room is currently occupied.
	RoomIsOccupied *bool `json:"roomIsOccupied,omitempty"`
	// Estimated Time of Departure of reservation when room status is occupied.
	EstimatedDepartureTime *string `json:"estimatedDepartureTime,omitempty"`
	// Guest First/Given Name on reservation when room status is occupied.
	GuestFirstName *string `json:"guestFirstName,omitempty"`
	// Guest Last Name /Surname on reservation when room status is occupied.
	GuestLastName *string `json:"guestLastName,omitempty"`
	RoomStatus *HousekeepingRoomStatusType `json:"roomStatus,omitempty"`
	// Unique Id that references an object uniquely in the system.
	ReservationIdList []UniqueIDType `json:"reservationIdList,omitempty"`
}

// NewRoomOccupancyType instantiates a new RoomOccupancyType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomOccupancyType() *RoomOccupancyType {
	this := RoomOccupancyType{}
	return &this
}

// NewRoomOccupancyTypeWithDefaults instantiates a new RoomOccupancyType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomOccupancyTypeWithDefaults() *RoomOccupancyType {
	this := RoomOccupancyType{}
	return &this
}

// GetRoomId returns the RoomId field value if set, zero value otherwise.
func (o *RoomOccupancyType) GetRoomId() string {
	if o == nil || IsNil(o.RoomId) {
		var ret string
		return ret
	}
	return *o.RoomId
}

// GetRoomIdOk returns a tuple with the RoomId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomOccupancyType) GetRoomIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoomId) {
		return nil, false
	}
	return o.RoomId, true
}

// HasRoomId returns a boolean if a field has been set.
func (o *RoomOccupancyType) HasRoomId() bool {
	if o != nil && !IsNil(o.RoomId) {
		return true
	}

	return false
}

// SetRoomId gets a reference to the given string and assigns it to the RoomId field.
func (o *RoomOccupancyType) SetRoomId(v string) {
	o.RoomId = &v
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *RoomOccupancyType) GetRoomType() string {
	if o == nil || IsNil(o.RoomType) {
		var ret string
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomOccupancyType) GetRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *RoomOccupancyType) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given string and assigns it to the RoomType field.
func (o *RoomOccupancyType) SetRoomType(v string) {
	o.RoomType = &v
}

// GetRoomIsOccupied returns the RoomIsOccupied field value if set, zero value otherwise.
func (o *RoomOccupancyType) GetRoomIsOccupied() bool {
	if o == nil || IsNil(o.RoomIsOccupied) {
		var ret bool
		return ret
	}
	return *o.RoomIsOccupied
}

// GetRoomIsOccupiedOk returns a tuple with the RoomIsOccupied field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomOccupancyType) GetRoomIsOccupiedOk() (*bool, bool) {
	if o == nil || IsNil(o.RoomIsOccupied) {
		return nil, false
	}
	return o.RoomIsOccupied, true
}

// HasRoomIsOccupied returns a boolean if a field has been set.
func (o *RoomOccupancyType) HasRoomIsOccupied() bool {
	if o != nil && !IsNil(o.RoomIsOccupied) {
		return true
	}

	return false
}

// SetRoomIsOccupied gets a reference to the given bool and assigns it to the RoomIsOccupied field.
func (o *RoomOccupancyType) SetRoomIsOccupied(v bool) {
	o.RoomIsOccupied = &v
}

// GetEstimatedDepartureTime returns the EstimatedDepartureTime field value if set, zero value otherwise.
func (o *RoomOccupancyType) GetEstimatedDepartureTime() string {
	if o == nil || IsNil(o.EstimatedDepartureTime) {
		var ret string
		return ret
	}
	return *o.EstimatedDepartureTime
}

// GetEstimatedDepartureTimeOk returns a tuple with the EstimatedDepartureTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomOccupancyType) GetEstimatedDepartureTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EstimatedDepartureTime) {
		return nil, false
	}
	return o.EstimatedDepartureTime, true
}

// HasEstimatedDepartureTime returns a boolean if a field has been set.
func (o *RoomOccupancyType) HasEstimatedDepartureTime() bool {
	if o != nil && !IsNil(o.EstimatedDepartureTime) {
		return true
	}

	return false
}

// SetEstimatedDepartureTime gets a reference to the given string and assigns it to the EstimatedDepartureTime field.
func (o *RoomOccupancyType) SetEstimatedDepartureTime(v string) {
	o.EstimatedDepartureTime = &v
}

// GetGuestFirstName returns the GuestFirstName field value if set, zero value otherwise.
func (o *RoomOccupancyType) GetGuestFirstName() string {
	if o == nil || IsNil(o.GuestFirstName) {
		var ret string
		return ret
	}
	return *o.GuestFirstName
}

// GetGuestFirstNameOk returns a tuple with the GuestFirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomOccupancyType) GetGuestFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.GuestFirstName) {
		return nil, false
	}
	return o.GuestFirstName, true
}

// HasGuestFirstName returns a boolean if a field has been set.
func (o *RoomOccupancyType) HasGuestFirstName() bool {
	if o != nil && !IsNil(o.GuestFirstName) {
		return true
	}

	return false
}

// SetGuestFirstName gets a reference to the given string and assigns it to the GuestFirstName field.
func (o *RoomOccupancyType) SetGuestFirstName(v string) {
	o.GuestFirstName = &v
}

// GetGuestLastName returns the GuestLastName field value if set, zero value otherwise.
func (o *RoomOccupancyType) GetGuestLastName() string {
	if o == nil || IsNil(o.GuestLastName) {
		var ret string
		return ret
	}
	return *o.GuestLastName
}

// GetGuestLastNameOk returns a tuple with the GuestLastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomOccupancyType) GetGuestLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.GuestLastName) {
		return nil, false
	}
	return o.GuestLastName, true
}

// HasGuestLastName returns a boolean if a field has been set.
func (o *RoomOccupancyType) HasGuestLastName() bool {
	if o != nil && !IsNil(o.GuestLastName) {
		return true
	}

	return false
}

// SetGuestLastName gets a reference to the given string and assigns it to the GuestLastName field.
func (o *RoomOccupancyType) SetGuestLastName(v string) {
	o.GuestLastName = &v
}

// GetRoomStatus returns the RoomStatus field value if set, zero value otherwise.
func (o *RoomOccupancyType) GetRoomStatus() HousekeepingRoomStatusType {
	if o == nil || IsNil(o.RoomStatus) {
		var ret HousekeepingRoomStatusType
		return ret
	}
	return *o.RoomStatus
}

// GetRoomStatusOk returns a tuple with the RoomStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomOccupancyType) GetRoomStatusOk() (*HousekeepingRoomStatusType, bool) {
	if o == nil || IsNil(o.RoomStatus) {
		return nil, false
	}
	return o.RoomStatus, true
}

// HasRoomStatus returns a boolean if a field has been set.
func (o *RoomOccupancyType) HasRoomStatus() bool {
	if o != nil && !IsNil(o.RoomStatus) {
		return true
	}

	return false
}

// SetRoomStatus gets a reference to the given HousekeepingRoomStatusType and assigns it to the RoomStatus field.
func (o *RoomOccupancyType) SetRoomStatus(v HousekeepingRoomStatusType) {
	o.RoomStatus = &v
}

// GetReservationIdList returns the ReservationIdList field value if set, zero value otherwise.
func (o *RoomOccupancyType) GetReservationIdList() []UniqueIDType {
	if o == nil || IsNil(o.ReservationIdList) {
		var ret []UniqueIDType
		return ret
	}
	return o.ReservationIdList
}

// GetReservationIdListOk returns a tuple with the ReservationIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomOccupancyType) GetReservationIdListOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.ReservationIdList) {
		return nil, false
	}
	return o.ReservationIdList, true
}

// HasReservationIdList returns a boolean if a field has been set.
func (o *RoomOccupancyType) HasReservationIdList() bool {
	if o != nil && !IsNil(o.ReservationIdList) {
		return true
	}

	return false
}

// SetReservationIdList gets a reference to the given []UniqueIDType and assigns it to the ReservationIdList field.
func (o *RoomOccupancyType) SetReservationIdList(v []UniqueIDType) {
	o.ReservationIdList = v
}

func (o RoomOccupancyType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomOccupancyType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoomId) {
		toSerialize["roomId"] = o.RoomId
	}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	if !IsNil(o.RoomIsOccupied) {
		toSerialize["roomIsOccupied"] = o.RoomIsOccupied
	}
	if !IsNil(o.EstimatedDepartureTime) {
		toSerialize["estimatedDepartureTime"] = o.EstimatedDepartureTime
	}
	if !IsNil(o.GuestFirstName) {
		toSerialize["guestFirstName"] = o.GuestFirstName
	}
	if !IsNil(o.GuestLastName) {
		toSerialize["guestLastName"] = o.GuestLastName
	}
	if !IsNil(o.RoomStatus) {
		toSerialize["roomStatus"] = o.RoomStatus
	}
	if !IsNil(o.ReservationIdList) {
		toSerialize["reservationIdList"] = o.ReservationIdList
	}
	return toSerialize, nil
}

type NullableRoomOccupancyType struct {
	value *RoomOccupancyType
	isSet bool
}

func (v NullableRoomOccupancyType) Get() *RoomOccupancyType {
	return v.value
}

func (v *NullableRoomOccupancyType) Set(val *RoomOccupancyType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomOccupancyType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomOccupancyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomOccupancyType(val *RoomOccupancyType) *NullableRoomOccupancyType {
	return &NullableRoomOccupancyType{value: val, isSet: true}
}

func (v NullableRoomOccupancyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomOccupancyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


