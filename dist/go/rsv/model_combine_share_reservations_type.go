/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the CombineShareReservationsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CombineShareReservationsType{}

// CombineShareReservationsType Record Type for Combining Share Reservations.
type CombineShareReservationsType struct {
	CombineShareInstruction *CombineShareInstructionType `json:"combineShareInstruction,omitempty"`
	ExistingReservationId *UniqueIDType `json:"existingReservationId,omitempty"`
	FetchInstructions *CombineShareReservationsTypeFetchInstructions `json:"fetchInstructions,omitempty"`
	// Opera Hotel/Resort code for the Combine Share Reservations request.
	HotelId *string `json:"hotelId,omitempty"`
	// Type for the profile information to create a new share reservation. This is used to create sharers from profiles.
	NewReservations []CombineShareFromProfileType `json:"newReservations,omitempty"`
	ShareToReservation *CombineShareReservationsTypeShareToReservation `json:"shareToReservation,omitempty"`
}

// NewCombineShareReservationsType instantiates a new CombineShareReservationsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCombineShareReservationsType() *CombineShareReservationsType {
	this := CombineShareReservationsType{}
	return &this
}

// NewCombineShareReservationsTypeWithDefaults instantiates a new CombineShareReservationsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCombineShareReservationsTypeWithDefaults() *CombineShareReservationsType {
	this := CombineShareReservationsType{}
	return &this
}

// GetCombineShareInstruction returns the CombineShareInstruction field value if set, zero value otherwise.
func (o *CombineShareReservationsType) GetCombineShareInstruction() CombineShareInstructionType {
	if o == nil || IsNil(o.CombineShareInstruction) {
		var ret CombineShareInstructionType
		return ret
	}
	return *o.CombineShareInstruction
}

// GetCombineShareInstructionOk returns a tuple with the CombineShareInstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareReservationsType) GetCombineShareInstructionOk() (*CombineShareInstructionType, bool) {
	if o == nil || IsNil(o.CombineShareInstruction) {
		return nil, false
	}
	return o.CombineShareInstruction, true
}

// HasCombineShareInstruction returns a boolean if a field has been set.
func (o *CombineShareReservationsType) HasCombineShareInstruction() bool {
	if o != nil && !IsNil(o.CombineShareInstruction) {
		return true
	}

	return false
}

// SetCombineShareInstruction gets a reference to the given CombineShareInstructionType and assigns it to the CombineShareInstruction field.
func (o *CombineShareReservationsType) SetCombineShareInstruction(v CombineShareInstructionType) {
	o.CombineShareInstruction = &v
}

// GetExistingReservationId returns the ExistingReservationId field value if set, zero value otherwise.
func (o *CombineShareReservationsType) GetExistingReservationId() UniqueIDType {
	if o == nil || IsNil(o.ExistingReservationId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ExistingReservationId
}

// GetExistingReservationIdOk returns a tuple with the ExistingReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareReservationsType) GetExistingReservationIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ExistingReservationId) {
		return nil, false
	}
	return o.ExistingReservationId, true
}

// HasExistingReservationId returns a boolean if a field has been set.
func (o *CombineShareReservationsType) HasExistingReservationId() bool {
	if o != nil && !IsNil(o.ExistingReservationId) {
		return true
	}

	return false
}

// SetExistingReservationId gets a reference to the given UniqueIDType and assigns it to the ExistingReservationId field.
func (o *CombineShareReservationsType) SetExistingReservationId(v UniqueIDType) {
	o.ExistingReservationId = &v
}

// GetFetchInstructions returns the FetchInstructions field value if set, zero value otherwise.
func (o *CombineShareReservationsType) GetFetchInstructions() CombineShareReservationsTypeFetchInstructions {
	if o == nil || IsNil(o.FetchInstructions) {
		var ret CombineShareReservationsTypeFetchInstructions
		return ret
	}
	return *o.FetchInstructions
}

// GetFetchInstructionsOk returns a tuple with the FetchInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareReservationsType) GetFetchInstructionsOk() (*CombineShareReservationsTypeFetchInstructions, bool) {
	if o == nil || IsNil(o.FetchInstructions) {
		return nil, false
	}
	return o.FetchInstructions, true
}

// HasFetchInstructions returns a boolean if a field has been set.
func (o *CombineShareReservationsType) HasFetchInstructions() bool {
	if o != nil && !IsNil(o.FetchInstructions) {
		return true
	}

	return false
}

// SetFetchInstructions gets a reference to the given CombineShareReservationsTypeFetchInstructions and assigns it to the FetchInstructions field.
func (o *CombineShareReservationsType) SetFetchInstructions(v CombineShareReservationsTypeFetchInstructions) {
	o.FetchInstructions = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CombineShareReservationsType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareReservationsType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CombineShareReservationsType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CombineShareReservationsType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetNewReservations returns the NewReservations field value if set, zero value otherwise.
func (o *CombineShareReservationsType) GetNewReservations() []CombineShareFromProfileType {
	if o == nil || IsNil(o.NewReservations) {
		var ret []CombineShareFromProfileType
		return ret
	}
	return o.NewReservations
}

// GetNewReservationsOk returns a tuple with the NewReservations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareReservationsType) GetNewReservationsOk() ([]CombineShareFromProfileType, bool) {
	if o == nil || IsNil(o.NewReservations) {
		return nil, false
	}
	return o.NewReservations, true
}

// HasNewReservations returns a boolean if a field has been set.
func (o *CombineShareReservationsType) HasNewReservations() bool {
	if o != nil && !IsNil(o.NewReservations) {
		return true
	}

	return false
}

// SetNewReservations gets a reference to the given []CombineShareFromProfileType and assigns it to the NewReservations field.
func (o *CombineShareReservationsType) SetNewReservations(v []CombineShareFromProfileType) {
	o.NewReservations = v
}

// GetShareToReservation returns the ShareToReservation field value if set, zero value otherwise.
func (o *CombineShareReservationsType) GetShareToReservation() CombineShareReservationsTypeShareToReservation {
	if o == nil || IsNil(o.ShareToReservation) {
		var ret CombineShareReservationsTypeShareToReservation
		return ret
	}
	return *o.ShareToReservation
}

// GetShareToReservationOk returns a tuple with the ShareToReservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareReservationsType) GetShareToReservationOk() (*CombineShareReservationsTypeShareToReservation, bool) {
	if o == nil || IsNil(o.ShareToReservation) {
		return nil, false
	}
	return o.ShareToReservation, true
}

// HasShareToReservation returns a boolean if a field has been set.
func (o *CombineShareReservationsType) HasShareToReservation() bool {
	if o != nil && !IsNil(o.ShareToReservation) {
		return true
	}

	return false
}

// SetShareToReservation gets a reference to the given CombineShareReservationsTypeShareToReservation and assigns it to the ShareToReservation field.
func (o *CombineShareReservationsType) SetShareToReservation(v CombineShareReservationsTypeShareToReservation) {
	o.ShareToReservation = &v
}

func (o CombineShareReservationsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CombineShareReservationsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CombineShareInstruction) {
		toSerialize["combineShareInstruction"] = o.CombineShareInstruction
	}
	if !IsNil(o.ExistingReservationId) {
		toSerialize["existingReservationId"] = o.ExistingReservationId
	}
	if !IsNil(o.FetchInstructions) {
		toSerialize["fetchInstructions"] = o.FetchInstructions
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.NewReservations) {
		toSerialize["newReservations"] = o.NewReservations
	}
	if !IsNil(o.ShareToReservation) {
		toSerialize["shareToReservation"] = o.ShareToReservation
	}
	return toSerialize, nil
}

type NullableCombineShareReservationsType struct {
	value *CombineShareReservationsType
	isSet bool
}

func (v NullableCombineShareReservationsType) Get() *CombineShareReservationsType {
	return v.value
}

func (v *NullableCombineShareReservationsType) Set(val *CombineShareReservationsType) {
	v.value = val
	v.isSet = true
}

func (v NullableCombineShareReservationsType) IsSet() bool {
	return v.isSet
}

func (v *NullableCombineShareReservationsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCombineShareReservationsType(val *CombineShareReservationsType) *NullableCombineShareReservationsType {
	return &NullableCombineShareReservationsType{value: val, isSet: true}
}

func (v NullableCombineShareReservationsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCombineShareReservationsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


