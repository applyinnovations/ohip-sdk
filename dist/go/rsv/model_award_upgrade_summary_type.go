/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the AwardUpgradeSummaryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwardUpgradeSummaryType{}

// AwardUpgradeSummaryType struct for AwardUpgradeSummaryType
type AwardUpgradeSummaryType struct {
	// User configured award code.
	AwardCode *string `json:"awardCode,omitempty"`
	// Daily Details related to award upgrade.
	AwardUpgradeDetails []AwardUpgradeDetailType `json:"awardUpgradeDetails,omitempty"`
	// From Room type associated with the award.
	FromRoomType *string `json:"fromRoomType,omitempty"`
	// Number points deducted if award is cancelled.
	PenaltyCharge *int32 `json:"penaltyCharge,omitempty"`
	// Number days before arrival to apply penalty for cancellation.
	PenaltyDays *int32 `json:"penaltyDays,omitempty"`
	// Total Number of penalty points if cancelled.
	PenaltyPoints *int32 `json:"penaltyPoints,omitempty"`
	// Type of cancel penalty like Points, etc.
	PenaltyType *string `json:"penaltyType,omitempty"`
	// Total Number of points required for the award.
	PointsRequired *int32 `json:"pointsRequired,omitempty"`
	// To Room type associated with the award.
	ToRoomType *string `json:"toRoomType,omitempty"`
}

// NewAwardUpgradeSummaryType instantiates a new AwardUpgradeSummaryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwardUpgradeSummaryType() *AwardUpgradeSummaryType {
	this := AwardUpgradeSummaryType{}
	return &this
}

// NewAwardUpgradeSummaryTypeWithDefaults instantiates a new AwardUpgradeSummaryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwardUpgradeSummaryTypeWithDefaults() *AwardUpgradeSummaryType {
	this := AwardUpgradeSummaryType{}
	return &this
}

// GetAwardCode returns the AwardCode field value if set, zero value otherwise.
func (o *AwardUpgradeSummaryType) GetAwardCode() string {
	if o == nil || IsNil(o.AwardCode) {
		var ret string
		return ret
	}
	return *o.AwardCode
}

// GetAwardCodeOk returns a tuple with the AwardCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardUpgradeSummaryType) GetAwardCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AwardCode) {
		return nil, false
	}
	return o.AwardCode, true
}

// HasAwardCode returns a boolean if a field has been set.
func (o *AwardUpgradeSummaryType) HasAwardCode() bool {
	if o != nil && !IsNil(o.AwardCode) {
		return true
	}

	return false
}

// SetAwardCode gets a reference to the given string and assigns it to the AwardCode field.
func (o *AwardUpgradeSummaryType) SetAwardCode(v string) {
	o.AwardCode = &v
}

// GetAwardUpgradeDetails returns the AwardUpgradeDetails field value if set, zero value otherwise.
func (o *AwardUpgradeSummaryType) GetAwardUpgradeDetails() []AwardUpgradeDetailType {
	if o == nil || IsNil(o.AwardUpgradeDetails) {
		var ret []AwardUpgradeDetailType
		return ret
	}
	return o.AwardUpgradeDetails
}

// GetAwardUpgradeDetailsOk returns a tuple with the AwardUpgradeDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardUpgradeSummaryType) GetAwardUpgradeDetailsOk() ([]AwardUpgradeDetailType, bool) {
	if o == nil || IsNil(o.AwardUpgradeDetails) {
		return nil, false
	}
	return o.AwardUpgradeDetails, true
}

// HasAwardUpgradeDetails returns a boolean if a field has been set.
func (o *AwardUpgradeSummaryType) HasAwardUpgradeDetails() bool {
	if o != nil && !IsNil(o.AwardUpgradeDetails) {
		return true
	}

	return false
}

// SetAwardUpgradeDetails gets a reference to the given []AwardUpgradeDetailType and assigns it to the AwardUpgradeDetails field.
func (o *AwardUpgradeSummaryType) SetAwardUpgradeDetails(v []AwardUpgradeDetailType) {
	o.AwardUpgradeDetails = v
}

// GetFromRoomType returns the FromRoomType field value if set, zero value otherwise.
func (o *AwardUpgradeSummaryType) GetFromRoomType() string {
	if o == nil || IsNil(o.FromRoomType) {
		var ret string
		return ret
	}
	return *o.FromRoomType
}

// GetFromRoomTypeOk returns a tuple with the FromRoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardUpgradeSummaryType) GetFromRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FromRoomType) {
		return nil, false
	}
	return o.FromRoomType, true
}

// HasFromRoomType returns a boolean if a field has been set.
func (o *AwardUpgradeSummaryType) HasFromRoomType() bool {
	if o != nil && !IsNil(o.FromRoomType) {
		return true
	}

	return false
}

// SetFromRoomType gets a reference to the given string and assigns it to the FromRoomType field.
func (o *AwardUpgradeSummaryType) SetFromRoomType(v string) {
	o.FromRoomType = &v
}

// GetPenaltyCharge returns the PenaltyCharge field value if set, zero value otherwise.
func (o *AwardUpgradeSummaryType) GetPenaltyCharge() int32 {
	if o == nil || IsNil(o.PenaltyCharge) {
		var ret int32
		return ret
	}
	return *o.PenaltyCharge
}

// GetPenaltyChargeOk returns a tuple with the PenaltyCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardUpgradeSummaryType) GetPenaltyChargeOk() (*int32, bool) {
	if o == nil || IsNil(o.PenaltyCharge) {
		return nil, false
	}
	return o.PenaltyCharge, true
}

// HasPenaltyCharge returns a boolean if a field has been set.
func (o *AwardUpgradeSummaryType) HasPenaltyCharge() bool {
	if o != nil && !IsNil(o.PenaltyCharge) {
		return true
	}

	return false
}

// SetPenaltyCharge gets a reference to the given int32 and assigns it to the PenaltyCharge field.
func (o *AwardUpgradeSummaryType) SetPenaltyCharge(v int32) {
	o.PenaltyCharge = &v
}

// GetPenaltyDays returns the PenaltyDays field value if set, zero value otherwise.
func (o *AwardUpgradeSummaryType) GetPenaltyDays() int32 {
	if o == nil || IsNil(o.PenaltyDays) {
		var ret int32
		return ret
	}
	return *o.PenaltyDays
}

// GetPenaltyDaysOk returns a tuple with the PenaltyDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardUpgradeSummaryType) GetPenaltyDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.PenaltyDays) {
		return nil, false
	}
	return o.PenaltyDays, true
}

// HasPenaltyDays returns a boolean if a field has been set.
func (o *AwardUpgradeSummaryType) HasPenaltyDays() bool {
	if o != nil && !IsNil(o.PenaltyDays) {
		return true
	}

	return false
}

// SetPenaltyDays gets a reference to the given int32 and assigns it to the PenaltyDays field.
func (o *AwardUpgradeSummaryType) SetPenaltyDays(v int32) {
	o.PenaltyDays = &v
}

// GetPenaltyPoints returns the PenaltyPoints field value if set, zero value otherwise.
func (o *AwardUpgradeSummaryType) GetPenaltyPoints() int32 {
	if o == nil || IsNil(o.PenaltyPoints) {
		var ret int32
		return ret
	}
	return *o.PenaltyPoints
}

// GetPenaltyPointsOk returns a tuple with the PenaltyPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardUpgradeSummaryType) GetPenaltyPointsOk() (*int32, bool) {
	if o == nil || IsNil(o.PenaltyPoints) {
		return nil, false
	}
	return o.PenaltyPoints, true
}

// HasPenaltyPoints returns a boolean if a field has been set.
func (o *AwardUpgradeSummaryType) HasPenaltyPoints() bool {
	if o != nil && !IsNil(o.PenaltyPoints) {
		return true
	}

	return false
}

// SetPenaltyPoints gets a reference to the given int32 and assigns it to the PenaltyPoints field.
func (o *AwardUpgradeSummaryType) SetPenaltyPoints(v int32) {
	o.PenaltyPoints = &v
}

// GetPenaltyType returns the PenaltyType field value if set, zero value otherwise.
func (o *AwardUpgradeSummaryType) GetPenaltyType() string {
	if o == nil || IsNil(o.PenaltyType) {
		var ret string
		return ret
	}
	return *o.PenaltyType
}

// GetPenaltyTypeOk returns a tuple with the PenaltyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardUpgradeSummaryType) GetPenaltyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PenaltyType) {
		return nil, false
	}
	return o.PenaltyType, true
}

// HasPenaltyType returns a boolean if a field has been set.
func (o *AwardUpgradeSummaryType) HasPenaltyType() bool {
	if o != nil && !IsNil(o.PenaltyType) {
		return true
	}

	return false
}

// SetPenaltyType gets a reference to the given string and assigns it to the PenaltyType field.
func (o *AwardUpgradeSummaryType) SetPenaltyType(v string) {
	o.PenaltyType = &v
}

// GetPointsRequired returns the PointsRequired field value if set, zero value otherwise.
func (o *AwardUpgradeSummaryType) GetPointsRequired() int32 {
	if o == nil || IsNil(o.PointsRequired) {
		var ret int32
		return ret
	}
	return *o.PointsRequired
}

// GetPointsRequiredOk returns a tuple with the PointsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardUpgradeSummaryType) GetPointsRequiredOk() (*int32, bool) {
	if o == nil || IsNil(o.PointsRequired) {
		return nil, false
	}
	return o.PointsRequired, true
}

// HasPointsRequired returns a boolean if a field has been set.
func (o *AwardUpgradeSummaryType) HasPointsRequired() bool {
	if o != nil && !IsNil(o.PointsRequired) {
		return true
	}

	return false
}

// SetPointsRequired gets a reference to the given int32 and assigns it to the PointsRequired field.
func (o *AwardUpgradeSummaryType) SetPointsRequired(v int32) {
	o.PointsRequired = &v
}

// GetToRoomType returns the ToRoomType field value if set, zero value otherwise.
func (o *AwardUpgradeSummaryType) GetToRoomType() string {
	if o == nil || IsNil(o.ToRoomType) {
		var ret string
		return ret
	}
	return *o.ToRoomType
}

// GetToRoomTypeOk returns a tuple with the ToRoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardUpgradeSummaryType) GetToRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ToRoomType) {
		return nil, false
	}
	return o.ToRoomType, true
}

// HasToRoomType returns a boolean if a field has been set.
func (o *AwardUpgradeSummaryType) HasToRoomType() bool {
	if o != nil && !IsNil(o.ToRoomType) {
		return true
	}

	return false
}

// SetToRoomType gets a reference to the given string and assigns it to the ToRoomType field.
func (o *AwardUpgradeSummaryType) SetToRoomType(v string) {
	o.ToRoomType = &v
}

func (o AwardUpgradeSummaryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwardUpgradeSummaryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AwardCode) {
		toSerialize["awardCode"] = o.AwardCode
	}
	if !IsNil(o.AwardUpgradeDetails) {
		toSerialize["awardUpgradeDetails"] = o.AwardUpgradeDetails
	}
	if !IsNil(o.FromRoomType) {
		toSerialize["fromRoomType"] = o.FromRoomType
	}
	if !IsNil(o.PenaltyCharge) {
		toSerialize["penaltyCharge"] = o.PenaltyCharge
	}
	if !IsNil(o.PenaltyDays) {
		toSerialize["penaltyDays"] = o.PenaltyDays
	}
	if !IsNil(o.PenaltyPoints) {
		toSerialize["penaltyPoints"] = o.PenaltyPoints
	}
	if !IsNil(o.PenaltyType) {
		toSerialize["penaltyType"] = o.PenaltyType
	}
	if !IsNil(o.PointsRequired) {
		toSerialize["pointsRequired"] = o.PointsRequired
	}
	if !IsNil(o.ToRoomType) {
		toSerialize["toRoomType"] = o.ToRoomType
	}
	return toSerialize, nil
}

type NullableAwardUpgradeSummaryType struct {
	value *AwardUpgradeSummaryType
	isSet bool
}

func (v NullableAwardUpgradeSummaryType) Get() *AwardUpgradeSummaryType {
	return v.value
}

func (v *NullableAwardUpgradeSummaryType) Set(val *AwardUpgradeSummaryType) {
	v.value = val
	v.isSet = true
}

func (v NullableAwardUpgradeSummaryType) IsSet() bool {
	return v.isSet
}

func (v *NullableAwardUpgradeSummaryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwardUpgradeSummaryType(val *AwardUpgradeSummaryType) *NullableAwardUpgradeSummaryType {
	return &NullableAwardUpgradeSummaryType{value: val, isSet: true}
}

func (v NullableAwardUpgradeSummaryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwardUpgradeSummaryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


