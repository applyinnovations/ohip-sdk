/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the MoveReservationHotelCriteriaType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MoveReservationHotelCriteriaType{}

// MoveReservationHotelCriteriaType struct for MoveReservationHotelCriteriaType
type MoveReservationHotelCriteriaType struct {
	ConfiguredReservation *HotelReservationInstructionType `json:"configuredReservation,omitempty"`
	// Hotel code for the hotel which the reservation will be moved.
	DestinationHotelCode *string `json:"destinationHotelCode,omitempty"`
	// Valid share reservation identifier. This ID will be verified against the SourceHotel.
	IncludedSharers [][]UniqueIDType `json:"includedSharers,omitempty"`
	MoveReasonCode *string `json:"moveReasonCode,omitempty"`
	ReservationId *ReservationId `json:"reservationId,omitempty"`
	// Hotel code for the current reservation being moved.
	SourceHotelCode *string `json:"sourceHotelCode,omitempty"`
}

// NewMoveReservationHotelCriteriaType instantiates a new MoveReservationHotelCriteriaType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoveReservationHotelCriteriaType() *MoveReservationHotelCriteriaType {
	this := MoveReservationHotelCriteriaType{}
	return &this
}

// NewMoveReservationHotelCriteriaTypeWithDefaults instantiates a new MoveReservationHotelCriteriaType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoveReservationHotelCriteriaTypeWithDefaults() *MoveReservationHotelCriteriaType {
	this := MoveReservationHotelCriteriaType{}
	return &this
}

// GetConfiguredReservation returns the ConfiguredReservation field value if set, zero value otherwise.
func (o *MoveReservationHotelCriteriaType) GetConfiguredReservation() HotelReservationInstructionType {
	if o == nil || IsNil(o.ConfiguredReservation) {
		var ret HotelReservationInstructionType
		return ret
	}
	return *o.ConfiguredReservation
}

// GetConfiguredReservationOk returns a tuple with the ConfiguredReservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveReservationHotelCriteriaType) GetConfiguredReservationOk() (*HotelReservationInstructionType, bool) {
	if o == nil || IsNil(o.ConfiguredReservation) {
		return nil, false
	}
	return o.ConfiguredReservation, true
}

// HasConfiguredReservation returns a boolean if a field has been set.
func (o *MoveReservationHotelCriteriaType) HasConfiguredReservation() bool {
	if o != nil && !IsNil(o.ConfiguredReservation) {
		return true
	}

	return false
}

// SetConfiguredReservation gets a reference to the given HotelReservationInstructionType and assigns it to the ConfiguredReservation field.
func (o *MoveReservationHotelCriteriaType) SetConfiguredReservation(v HotelReservationInstructionType) {
	o.ConfiguredReservation = &v
}

// GetDestinationHotelCode returns the DestinationHotelCode field value if set, zero value otherwise.
func (o *MoveReservationHotelCriteriaType) GetDestinationHotelCode() string {
	if o == nil || IsNil(o.DestinationHotelCode) {
		var ret string
		return ret
	}
	return *o.DestinationHotelCode
}

// GetDestinationHotelCodeOk returns a tuple with the DestinationHotelCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveReservationHotelCriteriaType) GetDestinationHotelCodeOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationHotelCode) {
		return nil, false
	}
	return o.DestinationHotelCode, true
}

// HasDestinationHotelCode returns a boolean if a field has been set.
func (o *MoveReservationHotelCriteriaType) HasDestinationHotelCode() bool {
	if o != nil && !IsNil(o.DestinationHotelCode) {
		return true
	}

	return false
}

// SetDestinationHotelCode gets a reference to the given string and assigns it to the DestinationHotelCode field.
func (o *MoveReservationHotelCriteriaType) SetDestinationHotelCode(v string) {
	o.DestinationHotelCode = &v
}

// GetIncludedSharers returns the IncludedSharers field value if set, zero value otherwise.
func (o *MoveReservationHotelCriteriaType) GetIncludedSharers() [][]UniqueIDType {
	if o == nil || IsNil(o.IncludedSharers) {
		var ret [][]UniqueIDType
		return ret
	}
	return o.IncludedSharers
}

// GetIncludedSharersOk returns a tuple with the IncludedSharers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveReservationHotelCriteriaType) GetIncludedSharersOk() ([][]UniqueIDType, bool) {
	if o == nil || IsNil(o.IncludedSharers) {
		return nil, false
	}
	return o.IncludedSharers, true
}

// HasIncludedSharers returns a boolean if a field has been set.
func (o *MoveReservationHotelCriteriaType) HasIncludedSharers() bool {
	if o != nil && !IsNil(o.IncludedSharers) {
		return true
	}

	return false
}

// SetIncludedSharers gets a reference to the given [][]UniqueIDType and assigns it to the IncludedSharers field.
func (o *MoveReservationHotelCriteriaType) SetIncludedSharers(v [][]UniqueIDType) {
	o.IncludedSharers = v
}

// GetMoveReasonCode returns the MoveReasonCode field value if set, zero value otherwise.
func (o *MoveReservationHotelCriteriaType) GetMoveReasonCode() string {
	if o == nil || IsNil(o.MoveReasonCode) {
		var ret string
		return ret
	}
	return *o.MoveReasonCode
}

// GetMoveReasonCodeOk returns a tuple with the MoveReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveReservationHotelCriteriaType) GetMoveReasonCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MoveReasonCode) {
		return nil, false
	}
	return o.MoveReasonCode, true
}

// HasMoveReasonCode returns a boolean if a field has been set.
func (o *MoveReservationHotelCriteriaType) HasMoveReasonCode() bool {
	if o != nil && !IsNil(o.MoveReasonCode) {
		return true
	}

	return false
}

// SetMoveReasonCode gets a reference to the given string and assigns it to the MoveReasonCode field.
func (o *MoveReservationHotelCriteriaType) SetMoveReasonCode(v string) {
	o.MoveReasonCode = &v
}

// GetReservationId returns the ReservationId field value if set, zero value otherwise.
func (o *MoveReservationHotelCriteriaType) GetReservationId() ReservationId {
	if o == nil || IsNil(o.ReservationId) {
		var ret ReservationId
		return ret
	}
	return *o.ReservationId
}

// GetReservationIdOk returns a tuple with the ReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveReservationHotelCriteriaType) GetReservationIdOk() (*ReservationId, bool) {
	if o == nil || IsNil(o.ReservationId) {
		return nil, false
	}
	return o.ReservationId, true
}

// HasReservationId returns a boolean if a field has been set.
func (o *MoveReservationHotelCriteriaType) HasReservationId() bool {
	if o != nil && !IsNil(o.ReservationId) {
		return true
	}

	return false
}

// SetReservationId gets a reference to the given ReservationId and assigns it to the ReservationId field.
func (o *MoveReservationHotelCriteriaType) SetReservationId(v ReservationId) {
	o.ReservationId = &v
}

// GetSourceHotelCode returns the SourceHotelCode field value if set, zero value otherwise.
func (o *MoveReservationHotelCriteriaType) GetSourceHotelCode() string {
	if o == nil || IsNil(o.SourceHotelCode) {
		var ret string
		return ret
	}
	return *o.SourceHotelCode
}

// GetSourceHotelCodeOk returns a tuple with the SourceHotelCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveReservationHotelCriteriaType) GetSourceHotelCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SourceHotelCode) {
		return nil, false
	}
	return o.SourceHotelCode, true
}

// HasSourceHotelCode returns a boolean if a field has been set.
func (o *MoveReservationHotelCriteriaType) HasSourceHotelCode() bool {
	if o != nil && !IsNil(o.SourceHotelCode) {
		return true
	}

	return false
}

// SetSourceHotelCode gets a reference to the given string and assigns it to the SourceHotelCode field.
func (o *MoveReservationHotelCriteriaType) SetSourceHotelCode(v string) {
	o.SourceHotelCode = &v
}

func (o MoveReservationHotelCriteriaType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MoveReservationHotelCriteriaType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfiguredReservation) {
		toSerialize["configuredReservation"] = o.ConfiguredReservation
	}
	if !IsNil(o.DestinationHotelCode) {
		toSerialize["destinationHotelCode"] = o.DestinationHotelCode
	}
	if !IsNil(o.IncludedSharers) {
		toSerialize["includedSharers"] = o.IncludedSharers
	}
	if !IsNil(o.MoveReasonCode) {
		toSerialize["moveReasonCode"] = o.MoveReasonCode
	}
	if !IsNil(o.ReservationId) {
		toSerialize["reservationId"] = o.ReservationId
	}
	if !IsNil(o.SourceHotelCode) {
		toSerialize["sourceHotelCode"] = o.SourceHotelCode
	}
	return toSerialize, nil
}

type NullableMoveReservationHotelCriteriaType struct {
	value *MoveReservationHotelCriteriaType
	isSet bool
}

func (v NullableMoveReservationHotelCriteriaType) Get() *MoveReservationHotelCriteriaType {
	return v.value
}

func (v *NullableMoveReservationHotelCriteriaType) Set(val *MoveReservationHotelCriteriaType) {
	v.value = val
	v.isSet = true
}

func (v NullableMoveReservationHotelCriteriaType) IsSet() bool {
	return v.isSet
}

func (v *NullableMoveReservationHotelCriteriaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoveReservationHotelCriteriaType(val *MoveReservationHotelCriteriaType) *NullableMoveReservationHotelCriteriaType {
	return &NullableMoveReservationHotelCriteriaType{value: val, isSet: true}
}

func (v NullableMoveReservationHotelCriteriaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoveReservationHotelCriteriaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


