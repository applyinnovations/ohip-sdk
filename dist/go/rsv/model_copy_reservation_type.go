/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the CopyReservationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CopyReservationType{}

// CopyReservationType struct for CopyReservationType
type CopyReservationType struct {
	HotelId *string `json:"hotelId,omitempty"`
	Instructions *CopyReservationTypeInstructions `json:"instructions,omitempty"`
	NewReservation *HotelReservationInstructionType `json:"newReservation,omitempty"`
	// Unique Id that references an object uniquely in the system.
	SourceReservationId []UniqueIDType `json:"sourceReservationId,omitempty"`
}

// NewCopyReservationType instantiates a new CopyReservationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopyReservationType() *CopyReservationType {
	this := CopyReservationType{}
	return &this
}

// NewCopyReservationTypeWithDefaults instantiates a new CopyReservationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopyReservationTypeWithDefaults() *CopyReservationType {
	this := CopyReservationType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CopyReservationType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyReservationType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CopyReservationType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CopyReservationType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetInstructions returns the Instructions field value if set, zero value otherwise.
func (o *CopyReservationType) GetInstructions() CopyReservationTypeInstructions {
	if o == nil || IsNil(o.Instructions) {
		var ret CopyReservationTypeInstructions
		return ret
	}
	return *o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyReservationType) GetInstructionsOk() (*CopyReservationTypeInstructions, bool) {
	if o == nil || IsNil(o.Instructions) {
		return nil, false
	}
	return o.Instructions, true
}

// HasInstructions returns a boolean if a field has been set.
func (o *CopyReservationType) HasInstructions() bool {
	if o != nil && !IsNil(o.Instructions) {
		return true
	}

	return false
}

// SetInstructions gets a reference to the given CopyReservationTypeInstructions and assigns it to the Instructions field.
func (o *CopyReservationType) SetInstructions(v CopyReservationTypeInstructions) {
	o.Instructions = &v
}

// GetNewReservation returns the NewReservation field value if set, zero value otherwise.
func (o *CopyReservationType) GetNewReservation() HotelReservationInstructionType {
	if o == nil || IsNil(o.NewReservation) {
		var ret HotelReservationInstructionType
		return ret
	}
	return *o.NewReservation
}

// GetNewReservationOk returns a tuple with the NewReservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyReservationType) GetNewReservationOk() (*HotelReservationInstructionType, bool) {
	if o == nil || IsNil(o.NewReservation) {
		return nil, false
	}
	return o.NewReservation, true
}

// HasNewReservation returns a boolean if a field has been set.
func (o *CopyReservationType) HasNewReservation() bool {
	if o != nil && !IsNil(o.NewReservation) {
		return true
	}

	return false
}

// SetNewReservation gets a reference to the given HotelReservationInstructionType and assigns it to the NewReservation field.
func (o *CopyReservationType) SetNewReservation(v HotelReservationInstructionType) {
	o.NewReservation = &v
}

// GetSourceReservationId returns the SourceReservationId field value if set, zero value otherwise.
func (o *CopyReservationType) GetSourceReservationId() []UniqueIDType {
	if o == nil || IsNil(o.SourceReservationId) {
		var ret []UniqueIDType
		return ret
	}
	return o.SourceReservationId
}

// GetSourceReservationIdOk returns a tuple with the SourceReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyReservationType) GetSourceReservationIdOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.SourceReservationId) {
		return nil, false
	}
	return o.SourceReservationId, true
}

// HasSourceReservationId returns a boolean if a field has been set.
func (o *CopyReservationType) HasSourceReservationId() bool {
	if o != nil && !IsNil(o.SourceReservationId) {
		return true
	}

	return false
}

// SetSourceReservationId gets a reference to the given []UniqueIDType and assigns it to the SourceReservationId field.
func (o *CopyReservationType) SetSourceReservationId(v []UniqueIDType) {
	o.SourceReservationId = v
}

func (o CopyReservationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CopyReservationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Instructions) {
		toSerialize["instructions"] = o.Instructions
	}
	if !IsNil(o.NewReservation) {
		toSerialize["newReservation"] = o.NewReservation
	}
	if !IsNil(o.SourceReservationId) {
		toSerialize["sourceReservationId"] = o.SourceReservationId
	}
	return toSerialize, nil
}

type NullableCopyReservationType struct {
	value *CopyReservationType
	isSet bool
}

func (v NullableCopyReservationType) Get() *CopyReservationType {
	return v.value
}

func (v *NullableCopyReservationType) Set(val *CopyReservationType) {
	v.value = val
	v.isSet = true
}

func (v NullableCopyReservationType) IsSet() bool {
	return v.isSet
}

func (v *NullableCopyReservationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopyReservationType(val *CopyReservationType) *NullableCopyReservationType {
	return &NullableCopyReservationType{value: val, isSet: true}
}

func (v NullableCopyReservationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopyReservationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


