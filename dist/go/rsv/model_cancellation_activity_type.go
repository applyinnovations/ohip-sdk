/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the CancellationActivityType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancellationActivityType{}

// CancellationActivityType struct for CancellationActivityType
type CancellationActivityType struct {
	Reason *CancellationReasonType `json:"reason,omitempty"`
	CxlDate *string `json:"cxlDate,omitempty"`
	UserId *float32 `json:"userId,omitempty"`
	UserName *string `json:"userName,omitempty"`
	// Unique Id that references an object uniquely in the system.
	CancellationIdList []UniqueIDType `json:"cancellationIdList,omitempty"`
}

// NewCancellationActivityType instantiates a new CancellationActivityType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancellationActivityType() *CancellationActivityType {
	this := CancellationActivityType{}
	return &this
}

// NewCancellationActivityTypeWithDefaults instantiates a new CancellationActivityType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancellationActivityTypeWithDefaults() *CancellationActivityType {
	this := CancellationActivityType{}
	return &this
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *CancellationActivityType) GetReason() CancellationReasonType {
	if o == nil || IsNil(o.Reason) {
		var ret CancellationReasonType
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancellationActivityType) GetReasonOk() (*CancellationReasonType, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *CancellationActivityType) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given CancellationReasonType and assigns it to the Reason field.
func (o *CancellationActivityType) SetReason(v CancellationReasonType) {
	o.Reason = &v
}

// GetCxlDate returns the CxlDate field value if set, zero value otherwise.
func (o *CancellationActivityType) GetCxlDate() string {
	if o == nil || IsNil(o.CxlDate) {
		var ret string
		return ret
	}
	return *o.CxlDate
}

// GetCxlDateOk returns a tuple with the CxlDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancellationActivityType) GetCxlDateOk() (*string, bool) {
	if o == nil || IsNil(o.CxlDate) {
		return nil, false
	}
	return o.CxlDate, true
}

// HasCxlDate returns a boolean if a field has been set.
func (o *CancellationActivityType) HasCxlDate() bool {
	if o != nil && !IsNil(o.CxlDate) {
		return true
	}

	return false
}

// SetCxlDate gets a reference to the given string and assigns it to the CxlDate field.
func (o *CancellationActivityType) SetCxlDate(v string) {
	o.CxlDate = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *CancellationActivityType) GetUserId() float32 {
	if o == nil || IsNil(o.UserId) {
		var ret float32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancellationActivityType) GetUserIdOk() (*float32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *CancellationActivityType) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given float32 and assigns it to the UserId field.
func (o *CancellationActivityType) SetUserId(v float32) {
	o.UserId = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *CancellationActivityType) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancellationActivityType) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *CancellationActivityType) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *CancellationActivityType) SetUserName(v string) {
	o.UserName = &v
}

// GetCancellationIdList returns the CancellationIdList field value if set, zero value otherwise.
func (o *CancellationActivityType) GetCancellationIdList() []UniqueIDType {
	if o == nil || IsNil(o.CancellationIdList) {
		var ret []UniqueIDType
		return ret
	}
	return o.CancellationIdList
}

// GetCancellationIdListOk returns a tuple with the CancellationIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancellationActivityType) GetCancellationIdListOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.CancellationIdList) {
		return nil, false
	}
	return o.CancellationIdList, true
}

// HasCancellationIdList returns a boolean if a field has been set.
func (o *CancellationActivityType) HasCancellationIdList() bool {
	if o != nil && !IsNil(o.CancellationIdList) {
		return true
	}

	return false
}

// SetCancellationIdList gets a reference to the given []UniqueIDType and assigns it to the CancellationIdList field.
func (o *CancellationActivityType) SetCancellationIdList(v []UniqueIDType) {
	o.CancellationIdList = v
}

func (o CancellationActivityType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancellationActivityType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.CxlDate) {
		toSerialize["cxlDate"] = o.CxlDate
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.CancellationIdList) {
		toSerialize["cancellationIdList"] = o.CancellationIdList
	}
	return toSerialize, nil
}

type NullableCancellationActivityType struct {
	value *CancellationActivityType
	isSet bool
}

func (v NullableCancellationActivityType) Get() *CancellationActivityType {
	return v.value
}

func (v *NullableCancellationActivityType) Set(val *CancellationActivityType) {
	v.value = val
	v.isSet = true
}

func (v NullableCancellationActivityType) IsSet() bool {
	return v.isSet
}

func (v *NullableCancellationActivityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancellationActivityType(val *CancellationActivityType) *NullableCancellationActivityType {
	return &NullableCancellationActivityType{value: val, isSet: true}
}

func (v NullableCancellationActivityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancellationActivityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


