/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the RoomPoolStatType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomPoolStatType{}

// RoomPoolStatType Statistics of one room pool.
type RoomPoolStatType struct {
	// Room pool (room pool represents a group of room types).
	RoomPool *string `json:"roomPool,omitempty"`
	// Number of non-complementary rooms.
	PaidRooms *int32 `json:"paidRooms,omitempty"`
	// Number of complementary rooms.
	CompRooms *int32 `json:"compRooms,omitempty"`
	RoomRevenue *CurrencyAmountType `json:"roomRevenue,omitempty"`
}

// NewRoomPoolStatType instantiates a new RoomPoolStatType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomPoolStatType() *RoomPoolStatType {
	this := RoomPoolStatType{}
	return &this
}

// NewRoomPoolStatTypeWithDefaults instantiates a new RoomPoolStatType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomPoolStatTypeWithDefaults() *RoomPoolStatType {
	this := RoomPoolStatType{}
	return &this
}

// GetRoomPool returns the RoomPool field value if set, zero value otherwise.
func (o *RoomPoolStatType) GetRoomPool() string {
	if o == nil || IsNil(o.RoomPool) {
		var ret string
		return ret
	}
	return *o.RoomPool
}

// GetRoomPoolOk returns a tuple with the RoomPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPoolStatType) GetRoomPoolOk() (*string, bool) {
	if o == nil || IsNil(o.RoomPool) {
		return nil, false
	}
	return o.RoomPool, true
}

// HasRoomPool returns a boolean if a field has been set.
func (o *RoomPoolStatType) HasRoomPool() bool {
	if o != nil && !IsNil(o.RoomPool) {
		return true
	}

	return false
}

// SetRoomPool gets a reference to the given string and assigns it to the RoomPool field.
func (o *RoomPoolStatType) SetRoomPool(v string) {
	o.RoomPool = &v
}

// GetPaidRooms returns the PaidRooms field value if set, zero value otherwise.
func (o *RoomPoolStatType) GetPaidRooms() int32 {
	if o == nil || IsNil(o.PaidRooms) {
		var ret int32
		return ret
	}
	return *o.PaidRooms
}

// GetPaidRoomsOk returns a tuple with the PaidRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPoolStatType) GetPaidRoomsOk() (*int32, bool) {
	if o == nil || IsNil(o.PaidRooms) {
		return nil, false
	}
	return o.PaidRooms, true
}

// HasPaidRooms returns a boolean if a field has been set.
func (o *RoomPoolStatType) HasPaidRooms() bool {
	if o != nil && !IsNil(o.PaidRooms) {
		return true
	}

	return false
}

// SetPaidRooms gets a reference to the given int32 and assigns it to the PaidRooms field.
func (o *RoomPoolStatType) SetPaidRooms(v int32) {
	o.PaidRooms = &v
}

// GetCompRooms returns the CompRooms field value if set, zero value otherwise.
func (o *RoomPoolStatType) GetCompRooms() int32 {
	if o == nil || IsNil(o.CompRooms) {
		var ret int32
		return ret
	}
	return *o.CompRooms
}

// GetCompRoomsOk returns a tuple with the CompRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPoolStatType) GetCompRoomsOk() (*int32, bool) {
	if o == nil || IsNil(o.CompRooms) {
		return nil, false
	}
	return o.CompRooms, true
}

// HasCompRooms returns a boolean if a field has been set.
func (o *RoomPoolStatType) HasCompRooms() bool {
	if o != nil && !IsNil(o.CompRooms) {
		return true
	}

	return false
}

// SetCompRooms gets a reference to the given int32 and assigns it to the CompRooms field.
func (o *RoomPoolStatType) SetCompRooms(v int32) {
	o.CompRooms = &v
}

// GetRoomRevenue returns the RoomRevenue field value if set, zero value otherwise.
func (o *RoomPoolStatType) GetRoomRevenue() CurrencyAmountType {
	if o == nil || IsNil(o.RoomRevenue) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.RoomRevenue
}

// GetRoomRevenueOk returns a tuple with the RoomRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPoolStatType) GetRoomRevenueOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.RoomRevenue) {
		return nil, false
	}
	return o.RoomRevenue, true
}

// HasRoomRevenue returns a boolean if a field has been set.
func (o *RoomPoolStatType) HasRoomRevenue() bool {
	if o != nil && !IsNil(o.RoomRevenue) {
		return true
	}

	return false
}

// SetRoomRevenue gets a reference to the given CurrencyAmountType and assigns it to the RoomRevenue field.
func (o *RoomPoolStatType) SetRoomRevenue(v CurrencyAmountType) {
	o.RoomRevenue = &v
}

func (o RoomPoolStatType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomPoolStatType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoomPool) {
		toSerialize["roomPool"] = o.RoomPool
	}
	if !IsNil(o.PaidRooms) {
		toSerialize["paidRooms"] = o.PaidRooms
	}
	if !IsNil(o.CompRooms) {
		toSerialize["compRooms"] = o.CompRooms
	}
	if !IsNil(o.RoomRevenue) {
		toSerialize["roomRevenue"] = o.RoomRevenue
	}
	return toSerialize, nil
}

type NullableRoomPoolStatType struct {
	value *RoomPoolStatType
	isSet bool
}

func (v NullableRoomPoolStatType) Get() *RoomPoolStatType {
	return v.value
}

func (v *NullableRoomPoolStatType) Set(val *RoomPoolStatType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomPoolStatType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomPoolStatType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomPoolStatType(val *RoomPoolStatType) *NullableRoomPoolStatType {
	return &NullableRoomPoolStatType{value: val, isSet: true}
}

func (v NullableRoomPoolStatType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomPoolStatType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


