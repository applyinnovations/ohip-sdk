/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ThresholdDetailsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThresholdDetailsType{}

// ThresholdDetailsType Type for the threshold elements.
type ThresholdDetailsType struct {
	Entity *EntityType `json:"entity,omitempty"`
	Scope *ScopeType `json:"scope,omitempty"`
	// Minimum required number of quantities, counts or minutes that must be posted.
	MinRequired *int32 `json:"minRequired,omitempty"`
	// The number of quantities, counts or minutes for which transaction diversion is allowed .
	Complimentary *int32 `json:"complimentary,omitempty"`
	// Configuring this flag to be TRUE will make the thresholds editable.
	IsEditable *bool `json:"isEditable,omitempty"`
}

// NewThresholdDetailsType instantiates a new ThresholdDetailsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThresholdDetailsType() *ThresholdDetailsType {
	this := ThresholdDetailsType{}
	return &this
}

// NewThresholdDetailsTypeWithDefaults instantiates a new ThresholdDetailsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThresholdDetailsTypeWithDefaults() *ThresholdDetailsType {
	this := ThresholdDetailsType{}
	return &this
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *ThresholdDetailsType) GetEntity() EntityType {
	if o == nil || IsNil(o.Entity) {
		var ret EntityType
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThresholdDetailsType) GetEntityOk() (*EntityType, bool) {
	if o == nil || IsNil(o.Entity) {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *ThresholdDetailsType) HasEntity() bool {
	if o != nil && !IsNil(o.Entity) {
		return true
	}

	return false
}

// SetEntity gets a reference to the given EntityType and assigns it to the Entity field.
func (o *ThresholdDetailsType) SetEntity(v EntityType) {
	o.Entity = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *ThresholdDetailsType) GetScope() ScopeType {
	if o == nil || IsNil(o.Scope) {
		var ret ScopeType
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThresholdDetailsType) GetScopeOk() (*ScopeType, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *ThresholdDetailsType) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given ScopeType and assigns it to the Scope field.
func (o *ThresholdDetailsType) SetScope(v ScopeType) {
	o.Scope = &v
}

// GetMinRequired returns the MinRequired field value if set, zero value otherwise.
func (o *ThresholdDetailsType) GetMinRequired() int32 {
	if o == nil || IsNil(o.MinRequired) {
		var ret int32
		return ret
	}
	return *o.MinRequired
}

// GetMinRequiredOk returns a tuple with the MinRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThresholdDetailsType) GetMinRequiredOk() (*int32, bool) {
	if o == nil || IsNil(o.MinRequired) {
		return nil, false
	}
	return o.MinRequired, true
}

// HasMinRequired returns a boolean if a field has been set.
func (o *ThresholdDetailsType) HasMinRequired() bool {
	if o != nil && !IsNil(o.MinRequired) {
		return true
	}

	return false
}

// SetMinRequired gets a reference to the given int32 and assigns it to the MinRequired field.
func (o *ThresholdDetailsType) SetMinRequired(v int32) {
	o.MinRequired = &v
}

// GetComplimentary returns the Complimentary field value if set, zero value otherwise.
func (o *ThresholdDetailsType) GetComplimentary() int32 {
	if o == nil || IsNil(o.Complimentary) {
		var ret int32
		return ret
	}
	return *o.Complimentary
}

// GetComplimentaryOk returns a tuple with the Complimentary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThresholdDetailsType) GetComplimentaryOk() (*int32, bool) {
	if o == nil || IsNil(o.Complimentary) {
		return nil, false
	}
	return o.Complimentary, true
}

// HasComplimentary returns a boolean if a field has been set.
func (o *ThresholdDetailsType) HasComplimentary() bool {
	if o != nil && !IsNil(o.Complimentary) {
		return true
	}

	return false
}

// SetComplimentary gets a reference to the given int32 and assigns it to the Complimentary field.
func (o *ThresholdDetailsType) SetComplimentary(v int32) {
	o.Complimentary = &v
}

// GetIsEditable returns the IsEditable field value if set, zero value otherwise.
func (o *ThresholdDetailsType) GetIsEditable() bool {
	if o == nil || IsNil(o.IsEditable) {
		var ret bool
		return ret
	}
	return *o.IsEditable
}

// GetIsEditableOk returns a tuple with the IsEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThresholdDetailsType) GetIsEditableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEditable) {
		return nil, false
	}
	return o.IsEditable, true
}

// HasIsEditable returns a boolean if a field has been set.
func (o *ThresholdDetailsType) HasIsEditable() bool {
	if o != nil && !IsNil(o.IsEditable) {
		return true
	}

	return false
}

// SetIsEditable gets a reference to the given bool and assigns it to the IsEditable field.
func (o *ThresholdDetailsType) SetIsEditable(v bool) {
	o.IsEditable = &v
}

func (o ThresholdDetailsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThresholdDetailsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Entity) {
		toSerialize["entity"] = o.Entity
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.MinRequired) {
		toSerialize["minRequired"] = o.MinRequired
	}
	if !IsNil(o.Complimentary) {
		toSerialize["complimentary"] = o.Complimentary
	}
	if !IsNil(o.IsEditable) {
		toSerialize["isEditable"] = o.IsEditable
	}
	return toSerialize, nil
}

type NullableThresholdDetailsType struct {
	value *ThresholdDetailsType
	isSet bool
}

func (v NullableThresholdDetailsType) Get() *ThresholdDetailsType {
	return v.value
}

func (v *NullableThresholdDetailsType) Set(val *ThresholdDetailsType) {
	v.value = val
	v.isSet = true
}

func (v NullableThresholdDetailsType) IsSet() bool {
	return v.isSet
}

func (v *NullableThresholdDetailsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThresholdDetailsType(val *ThresholdDetailsType) *NullableThresholdDetailsType {
	return &NullableThresholdDetailsType{value: val, isSet: true}
}

func (v NullableThresholdDetailsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThresholdDetailsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


