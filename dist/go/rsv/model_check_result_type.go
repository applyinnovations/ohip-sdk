/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the CheckResultType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckResultType{}

// CheckResultType Status of allowed actions, attached records, and indicators of the reservation.
type CheckResultType struct {
	CheckInstruction *CheckInstructionType `json:"checkInstruction,omitempty"`
	// Indicates status of allowed actions, total number of attached records, or number of occurrences of indicator of a reservation.
	Exists *bool `json:"exists,omitempty"`
}

// NewCheckResultType instantiates a new CheckResultType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckResultType() *CheckResultType {
	this := CheckResultType{}
	return &this
}

// NewCheckResultTypeWithDefaults instantiates a new CheckResultType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckResultTypeWithDefaults() *CheckResultType {
	this := CheckResultType{}
	return &this
}

// GetCheckInstruction returns the CheckInstruction field value if set, zero value otherwise.
func (o *CheckResultType) GetCheckInstruction() CheckInstructionType {
	if o == nil || IsNil(o.CheckInstruction) {
		var ret CheckInstructionType
		return ret
	}
	return *o.CheckInstruction
}

// GetCheckInstructionOk returns a tuple with the CheckInstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckResultType) GetCheckInstructionOk() (*CheckInstructionType, bool) {
	if o == nil || IsNil(o.CheckInstruction) {
		return nil, false
	}
	return o.CheckInstruction, true
}

// HasCheckInstruction returns a boolean if a field has been set.
func (o *CheckResultType) HasCheckInstruction() bool {
	if o != nil && !IsNil(o.CheckInstruction) {
		return true
	}

	return false
}

// SetCheckInstruction gets a reference to the given CheckInstructionType and assigns it to the CheckInstruction field.
func (o *CheckResultType) SetCheckInstruction(v CheckInstructionType) {
	o.CheckInstruction = &v
}

// GetExists returns the Exists field value if set, zero value otherwise.
func (o *CheckResultType) GetExists() bool {
	if o == nil || IsNil(o.Exists) {
		var ret bool
		return ret
	}
	return *o.Exists
}

// GetExistsOk returns a tuple with the Exists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckResultType) GetExistsOk() (*bool, bool) {
	if o == nil || IsNil(o.Exists) {
		return nil, false
	}
	return o.Exists, true
}

// HasExists returns a boolean if a field has been set.
func (o *CheckResultType) HasExists() bool {
	if o != nil && !IsNil(o.Exists) {
		return true
	}

	return false
}

// SetExists gets a reference to the given bool and assigns it to the Exists field.
func (o *CheckResultType) SetExists(v bool) {
	o.Exists = &v
}

func (o CheckResultType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckResultType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CheckInstruction) {
		toSerialize["checkInstruction"] = o.CheckInstruction
	}
	if !IsNil(o.Exists) {
		toSerialize["exists"] = o.Exists
	}
	return toSerialize, nil
}

type NullableCheckResultType struct {
	value *CheckResultType
	isSet bool
}

func (v NullableCheckResultType) Get() *CheckResultType {
	return v.value
}

func (v *NullableCheckResultType) Set(val *CheckResultType) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckResultType) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckResultType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckResultType(val *CheckResultType) *NullableCheckResultType {
	return &NullableCheckResultType{value: val, isSet: true}
}

func (v NullableCheckResultType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckResultType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


