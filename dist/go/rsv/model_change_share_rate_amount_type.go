/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ChangeShareRateAmountType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeShareRateAmountType{}

// ChangeShareRateAmountType Type for changing the Rate Amount of a Sharer.
type ChangeShareRateAmountType struct {
	ChangeShareRateInstructions *ChangeShareRateAmountTypeChangeShareRateInstructions `json:"changeShareRateInstructions,omitempty"`
	// Opera Hotel/Resort code for the Change Share Amount request.
	HotelId *string `json:"hotelId,omitempty"`
	ShareDistributionCriteria *ShareDistributionCriteria `json:"shareDistributionCriteria,omitempty"`
}

// NewChangeShareRateAmountType instantiates a new ChangeShareRateAmountType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeShareRateAmountType() *ChangeShareRateAmountType {
	this := ChangeShareRateAmountType{}
	return &this
}

// NewChangeShareRateAmountTypeWithDefaults instantiates a new ChangeShareRateAmountType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeShareRateAmountTypeWithDefaults() *ChangeShareRateAmountType {
	this := ChangeShareRateAmountType{}
	return &this
}

// GetChangeShareRateInstructions returns the ChangeShareRateInstructions field value if set, zero value otherwise.
func (o *ChangeShareRateAmountType) GetChangeShareRateInstructions() ChangeShareRateAmountTypeChangeShareRateInstructions {
	if o == nil || IsNil(o.ChangeShareRateInstructions) {
		var ret ChangeShareRateAmountTypeChangeShareRateInstructions
		return ret
	}
	return *o.ChangeShareRateInstructions
}

// GetChangeShareRateInstructionsOk returns a tuple with the ChangeShareRateInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeShareRateAmountType) GetChangeShareRateInstructionsOk() (*ChangeShareRateAmountTypeChangeShareRateInstructions, bool) {
	if o == nil || IsNil(o.ChangeShareRateInstructions) {
		return nil, false
	}
	return o.ChangeShareRateInstructions, true
}

// HasChangeShareRateInstructions returns a boolean if a field has been set.
func (o *ChangeShareRateAmountType) HasChangeShareRateInstructions() bool {
	if o != nil && !IsNil(o.ChangeShareRateInstructions) {
		return true
	}

	return false
}

// SetChangeShareRateInstructions gets a reference to the given ChangeShareRateAmountTypeChangeShareRateInstructions and assigns it to the ChangeShareRateInstructions field.
func (o *ChangeShareRateAmountType) SetChangeShareRateInstructions(v ChangeShareRateAmountTypeChangeShareRateInstructions) {
	o.ChangeShareRateInstructions = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ChangeShareRateAmountType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeShareRateAmountType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ChangeShareRateAmountType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ChangeShareRateAmountType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetShareDistributionCriteria returns the ShareDistributionCriteria field value if set, zero value otherwise.
func (o *ChangeShareRateAmountType) GetShareDistributionCriteria() ShareDistributionCriteria {
	if o == nil || IsNil(o.ShareDistributionCriteria) {
		var ret ShareDistributionCriteria
		return ret
	}
	return *o.ShareDistributionCriteria
}

// GetShareDistributionCriteriaOk returns a tuple with the ShareDistributionCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeShareRateAmountType) GetShareDistributionCriteriaOk() (*ShareDistributionCriteria, bool) {
	if o == nil || IsNil(o.ShareDistributionCriteria) {
		return nil, false
	}
	return o.ShareDistributionCriteria, true
}

// HasShareDistributionCriteria returns a boolean if a field has been set.
func (o *ChangeShareRateAmountType) HasShareDistributionCriteria() bool {
	if o != nil && !IsNil(o.ShareDistributionCriteria) {
		return true
	}

	return false
}

// SetShareDistributionCriteria gets a reference to the given ShareDistributionCriteria and assigns it to the ShareDistributionCriteria field.
func (o *ChangeShareRateAmountType) SetShareDistributionCriteria(v ShareDistributionCriteria) {
	o.ShareDistributionCriteria = &v
}

func (o ChangeShareRateAmountType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeShareRateAmountType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChangeShareRateInstructions) {
		toSerialize["changeShareRateInstructions"] = o.ChangeShareRateInstructions
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ShareDistributionCriteria) {
		toSerialize["shareDistributionCriteria"] = o.ShareDistributionCriteria
	}
	return toSerialize, nil
}

type NullableChangeShareRateAmountType struct {
	value *ChangeShareRateAmountType
	isSet bool
}

func (v NullableChangeShareRateAmountType) Get() *ChangeShareRateAmountType {
	return v.value
}

func (v *NullableChangeShareRateAmountType) Set(val *ChangeShareRateAmountType) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeShareRateAmountType) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeShareRateAmountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeShareRateAmountType(val *ChangeShareRateAmountType) *NullableChangeShareRateAmountType {
	return &NullableChangeShareRateAmountType{value: val, isSet: true}
}

func (v NullableChangeShareRateAmountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeShareRateAmountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


