/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ChangeLinkedReservationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeLinkedReservationType{}

// ChangeLinkedReservationType Request object to change a linked reservation information.
type ChangeLinkedReservationType struct {
	LinkedReservationInfo *LinkedReservationInfoType `json:"linkedReservationInfo,omitempty"`
	BackToBackToReservationId *UniqueIDType `json:"backToBackToReservationId,omitempty"`
}

// NewChangeLinkedReservationType instantiates a new ChangeLinkedReservationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeLinkedReservationType() *ChangeLinkedReservationType {
	this := ChangeLinkedReservationType{}
	return &this
}

// NewChangeLinkedReservationTypeWithDefaults instantiates a new ChangeLinkedReservationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeLinkedReservationTypeWithDefaults() *ChangeLinkedReservationType {
	this := ChangeLinkedReservationType{}
	return &this
}

// GetLinkedReservationInfo returns the LinkedReservationInfo field value if set, zero value otherwise.
func (o *ChangeLinkedReservationType) GetLinkedReservationInfo() LinkedReservationInfoType {
	if o == nil || IsNil(o.LinkedReservationInfo) {
		var ret LinkedReservationInfoType
		return ret
	}
	return *o.LinkedReservationInfo
}

// GetLinkedReservationInfoOk returns a tuple with the LinkedReservationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeLinkedReservationType) GetLinkedReservationInfoOk() (*LinkedReservationInfoType, bool) {
	if o == nil || IsNil(o.LinkedReservationInfo) {
		return nil, false
	}
	return o.LinkedReservationInfo, true
}

// HasLinkedReservationInfo returns a boolean if a field has been set.
func (o *ChangeLinkedReservationType) HasLinkedReservationInfo() bool {
	if o != nil && !IsNil(o.LinkedReservationInfo) {
		return true
	}

	return false
}

// SetLinkedReservationInfo gets a reference to the given LinkedReservationInfoType and assigns it to the LinkedReservationInfo field.
func (o *ChangeLinkedReservationType) SetLinkedReservationInfo(v LinkedReservationInfoType) {
	o.LinkedReservationInfo = &v
}

// GetBackToBackToReservationId returns the BackToBackToReservationId field value if set, zero value otherwise.
func (o *ChangeLinkedReservationType) GetBackToBackToReservationId() UniqueIDType {
	if o == nil || IsNil(o.BackToBackToReservationId) {
		var ret UniqueIDType
		return ret
	}
	return *o.BackToBackToReservationId
}

// GetBackToBackToReservationIdOk returns a tuple with the BackToBackToReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeLinkedReservationType) GetBackToBackToReservationIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.BackToBackToReservationId) {
		return nil, false
	}
	return o.BackToBackToReservationId, true
}

// HasBackToBackToReservationId returns a boolean if a field has been set.
func (o *ChangeLinkedReservationType) HasBackToBackToReservationId() bool {
	if o != nil && !IsNil(o.BackToBackToReservationId) {
		return true
	}

	return false
}

// SetBackToBackToReservationId gets a reference to the given UniqueIDType and assigns it to the BackToBackToReservationId field.
func (o *ChangeLinkedReservationType) SetBackToBackToReservationId(v UniqueIDType) {
	o.BackToBackToReservationId = &v
}

func (o ChangeLinkedReservationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeLinkedReservationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LinkedReservationInfo) {
		toSerialize["linkedReservationInfo"] = o.LinkedReservationInfo
	}
	if !IsNil(o.BackToBackToReservationId) {
		toSerialize["backToBackToReservationId"] = o.BackToBackToReservationId
	}
	return toSerialize, nil
}

type NullableChangeLinkedReservationType struct {
	value *ChangeLinkedReservationType
	isSet bool
}

func (v NullableChangeLinkedReservationType) Get() *ChangeLinkedReservationType {
	return v.value
}

func (v *NullableChangeLinkedReservationType) Set(val *ChangeLinkedReservationType) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeLinkedReservationType) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeLinkedReservationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeLinkedReservationType(val *ChangeLinkedReservationType) *NullableChangeLinkedReservationType {
	return &NullableChangeLinkedReservationType{value: val, isSet: true}
}

func (v NullableChangeLinkedReservationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeLinkedReservationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


