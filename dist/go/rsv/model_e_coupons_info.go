/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ECouponsInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ECouponsInfo{}

// ECouponsInfo Request object for changing the existing eCoupons attached to Reservation.
type ECouponsInfo struct {
	ReservationId *ReservationId `json:"reservationId,omitempty"`
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	HotelId *string `json:"hotelId,omitempty"`
	// Collection of ECouponType object.
	ECoupons []ECouponType `json:"eCoupons,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewECouponsInfo instantiates a new ECouponsInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewECouponsInfo() *ECouponsInfo {
	this := ECouponsInfo{}
	return &this
}

// NewECouponsInfoWithDefaults instantiates a new ECouponsInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewECouponsInfoWithDefaults() *ECouponsInfo {
	this := ECouponsInfo{}
	return &this
}

// GetReservationId returns the ReservationId field value if set, zero value otherwise.
func (o *ECouponsInfo) GetReservationId() ReservationId {
	if o == nil || IsNil(o.ReservationId) {
		var ret ReservationId
		return ret
	}
	return *o.ReservationId
}

// GetReservationIdOk returns a tuple with the ReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECouponsInfo) GetReservationIdOk() (*ReservationId, bool) {
	if o == nil || IsNil(o.ReservationId) {
		return nil, false
	}
	return o.ReservationId, true
}

// HasReservationId returns a boolean if a field has been set.
func (o *ECouponsInfo) HasReservationId() bool {
	if o != nil && !IsNil(o.ReservationId) {
		return true
	}

	return false
}

// SetReservationId gets a reference to the given ReservationId and assigns it to the ReservationId field.
func (o *ECouponsInfo) SetReservationId(v ReservationId) {
	o.ReservationId = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ECouponsInfo) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECouponsInfo) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ECouponsInfo) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ECouponsInfo) SetHotelId(v string) {
	o.HotelId = &v
}

// GetECoupons returns the ECoupons field value if set, zero value otherwise.
func (o *ECouponsInfo) GetECoupons() []ECouponType {
	if o == nil || IsNil(o.ECoupons) {
		var ret []ECouponType
		return ret
	}
	return o.ECoupons
}

// GetECouponsOk returns a tuple with the ECoupons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECouponsInfo) GetECouponsOk() ([]ECouponType, bool) {
	if o == nil || IsNil(o.ECoupons) {
		return nil, false
	}
	return o.ECoupons, true
}

// HasECoupons returns a boolean if a field has been set.
func (o *ECouponsInfo) HasECoupons() bool {
	if o != nil && !IsNil(o.ECoupons) {
		return true
	}

	return false
}

// SetECoupons gets a reference to the given []ECouponType and assigns it to the ECoupons field.
func (o *ECouponsInfo) SetECoupons(v []ECouponType) {
	o.ECoupons = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ECouponsInfo) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECouponsInfo) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ECouponsInfo) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *ECouponsInfo) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ECouponsInfo) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECouponsInfo) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ECouponsInfo) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ECouponsInfo) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ECouponsInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ECouponsInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReservationId) {
		toSerialize["reservationId"] = o.ReservationId
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ECoupons) {
		toSerialize["eCoupons"] = o.ECoupons
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableECouponsInfo struct {
	value *ECouponsInfo
	isSet bool
}

func (v NullableECouponsInfo) Get() *ECouponsInfo {
	return v.value
}

func (v *NullableECouponsInfo) Set(val *ECouponsInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableECouponsInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableECouponsInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableECouponsInfo(val *ECouponsInfo) *NullableECouponsInfo {
	return &NullableECouponsInfo{value: val, isSet: true}
}

func (v NullableECouponsInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableECouponsInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


