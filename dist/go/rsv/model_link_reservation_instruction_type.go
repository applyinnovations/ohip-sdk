/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the LinkReservationInstructionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkReservationInstructionType{}

// LinkReservationInstructionType Instructions for a linked reservation.
type LinkReservationInstructionType struct {
	Link *bool `json:"link,omitempty"`
	LinkFromReservationId *UniqueIDType `json:"linkFromReservationId,omitempty"`
	LinkToReservationId *UniqueIDType `json:"linkToReservationId,omitempty"`
}

// NewLinkReservationInstructionType instantiates a new LinkReservationInstructionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkReservationInstructionType() *LinkReservationInstructionType {
	this := LinkReservationInstructionType{}
	return &this
}

// NewLinkReservationInstructionTypeWithDefaults instantiates a new LinkReservationInstructionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkReservationInstructionTypeWithDefaults() *LinkReservationInstructionType {
	this := LinkReservationInstructionType{}
	return &this
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *LinkReservationInstructionType) GetLink() bool {
	if o == nil || IsNil(o.Link) {
		var ret bool
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkReservationInstructionType) GetLinkOk() (*bool, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *LinkReservationInstructionType) HasLink() bool {
	if o != nil && !IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given bool and assigns it to the Link field.
func (o *LinkReservationInstructionType) SetLink(v bool) {
	o.Link = &v
}

// GetLinkFromReservationId returns the LinkFromReservationId field value if set, zero value otherwise.
func (o *LinkReservationInstructionType) GetLinkFromReservationId() UniqueIDType {
	if o == nil || IsNil(o.LinkFromReservationId) {
		var ret UniqueIDType
		return ret
	}
	return *o.LinkFromReservationId
}

// GetLinkFromReservationIdOk returns a tuple with the LinkFromReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkReservationInstructionType) GetLinkFromReservationIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.LinkFromReservationId) {
		return nil, false
	}
	return o.LinkFromReservationId, true
}

// HasLinkFromReservationId returns a boolean if a field has been set.
func (o *LinkReservationInstructionType) HasLinkFromReservationId() bool {
	if o != nil && !IsNil(o.LinkFromReservationId) {
		return true
	}

	return false
}

// SetLinkFromReservationId gets a reference to the given UniqueIDType and assigns it to the LinkFromReservationId field.
func (o *LinkReservationInstructionType) SetLinkFromReservationId(v UniqueIDType) {
	o.LinkFromReservationId = &v
}

// GetLinkToReservationId returns the LinkToReservationId field value if set, zero value otherwise.
func (o *LinkReservationInstructionType) GetLinkToReservationId() UniqueIDType {
	if o == nil || IsNil(o.LinkToReservationId) {
		var ret UniqueIDType
		return ret
	}
	return *o.LinkToReservationId
}

// GetLinkToReservationIdOk returns a tuple with the LinkToReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkReservationInstructionType) GetLinkToReservationIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.LinkToReservationId) {
		return nil, false
	}
	return o.LinkToReservationId, true
}

// HasLinkToReservationId returns a boolean if a field has been set.
func (o *LinkReservationInstructionType) HasLinkToReservationId() bool {
	if o != nil && !IsNil(o.LinkToReservationId) {
		return true
	}

	return false
}

// SetLinkToReservationId gets a reference to the given UniqueIDType and assigns it to the LinkToReservationId field.
func (o *LinkReservationInstructionType) SetLinkToReservationId(v UniqueIDType) {
	o.LinkToReservationId = &v
}

func (o LinkReservationInstructionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkReservationInstructionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	if !IsNil(o.LinkFromReservationId) {
		toSerialize["linkFromReservationId"] = o.LinkFromReservationId
	}
	if !IsNil(o.LinkToReservationId) {
		toSerialize["linkToReservationId"] = o.LinkToReservationId
	}
	return toSerialize, nil
}

type NullableLinkReservationInstructionType struct {
	value *LinkReservationInstructionType
	isSet bool
}

func (v NullableLinkReservationInstructionType) Get() *LinkReservationInstructionType {
	return v.value
}

func (v *NullableLinkReservationInstructionType) Set(val *LinkReservationInstructionType) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkReservationInstructionType) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkReservationInstructionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkReservationInstructionType(val *LinkReservationInstructionType) *NullableLinkReservationInstructionType {
	return &NullableLinkReservationInstructionType{value: val, isSet: true}
}

func (v NullableLinkReservationInstructionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkReservationInstructionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


