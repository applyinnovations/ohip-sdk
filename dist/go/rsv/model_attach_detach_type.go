/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the AttachDetachType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttachDetachType{}

// AttachDetachType This type contains attach and detach information for accompanying guest profile.
type AttachDetachType struct {
	// Time stamp the accompanying guest was last attached.
	AttachDateTime *string `json:"attachDateTime,omitempty"`
	// Time stamp the accompanying guest was last detached.
	DetachDateTime *string `json:"detachDateTime,omitempty"`
	// This attribute indicates if the accompanying guest is marked as detached or attached.
	Detached *bool `json:"detached,omitempty"`
}

// NewAttachDetachType instantiates a new AttachDetachType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachDetachType() *AttachDetachType {
	this := AttachDetachType{}
	return &this
}

// NewAttachDetachTypeWithDefaults instantiates a new AttachDetachType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachDetachTypeWithDefaults() *AttachDetachType {
	this := AttachDetachType{}
	return &this
}

// GetAttachDateTime returns the AttachDateTime field value if set, zero value otherwise.
func (o *AttachDetachType) GetAttachDateTime() string {
	if o == nil || IsNil(o.AttachDateTime) {
		var ret string
		return ret
	}
	return *o.AttachDateTime
}

// GetAttachDateTimeOk returns a tuple with the AttachDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachDetachType) GetAttachDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.AttachDateTime) {
		return nil, false
	}
	return o.AttachDateTime, true
}

// HasAttachDateTime returns a boolean if a field has been set.
func (o *AttachDetachType) HasAttachDateTime() bool {
	if o != nil && !IsNil(o.AttachDateTime) {
		return true
	}

	return false
}

// SetAttachDateTime gets a reference to the given string and assigns it to the AttachDateTime field.
func (o *AttachDetachType) SetAttachDateTime(v string) {
	o.AttachDateTime = &v
}

// GetDetachDateTime returns the DetachDateTime field value if set, zero value otherwise.
func (o *AttachDetachType) GetDetachDateTime() string {
	if o == nil || IsNil(o.DetachDateTime) {
		var ret string
		return ret
	}
	return *o.DetachDateTime
}

// GetDetachDateTimeOk returns a tuple with the DetachDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachDetachType) GetDetachDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.DetachDateTime) {
		return nil, false
	}
	return o.DetachDateTime, true
}

// HasDetachDateTime returns a boolean if a field has been set.
func (o *AttachDetachType) HasDetachDateTime() bool {
	if o != nil && !IsNil(o.DetachDateTime) {
		return true
	}

	return false
}

// SetDetachDateTime gets a reference to the given string and assigns it to the DetachDateTime field.
func (o *AttachDetachType) SetDetachDateTime(v string) {
	o.DetachDateTime = &v
}

// GetDetached returns the Detached field value if set, zero value otherwise.
func (o *AttachDetachType) GetDetached() bool {
	if o == nil || IsNil(o.Detached) {
		var ret bool
		return ret
	}
	return *o.Detached
}

// GetDetachedOk returns a tuple with the Detached field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachDetachType) GetDetachedOk() (*bool, bool) {
	if o == nil || IsNil(o.Detached) {
		return nil, false
	}
	return o.Detached, true
}

// HasDetached returns a boolean if a field has been set.
func (o *AttachDetachType) HasDetached() bool {
	if o != nil && !IsNil(o.Detached) {
		return true
	}

	return false
}

// SetDetached gets a reference to the given bool and assigns it to the Detached field.
func (o *AttachDetachType) SetDetached(v bool) {
	o.Detached = &v
}

func (o AttachDetachType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttachDetachType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttachDateTime) {
		toSerialize["attachDateTime"] = o.AttachDateTime
	}
	if !IsNil(o.DetachDateTime) {
		toSerialize["detachDateTime"] = o.DetachDateTime
	}
	if !IsNil(o.Detached) {
		toSerialize["detached"] = o.Detached
	}
	return toSerialize, nil
}

type NullableAttachDetachType struct {
	value *AttachDetachType
	isSet bool
}

func (v NullableAttachDetachType) Get() *AttachDetachType {
	return v.value
}

func (v *NullableAttachDetachType) Set(val *AttachDetachType) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachDetachType) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachDetachType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachDetachType(val *AttachDetachType) *NullableAttachDetachType {
	return &NullableAttachDetachType{value: val, isSet: true}
}

func (v NullableAttachDetachType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachDetachType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


