/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the RatesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatesType{}

// RatesType Individual rate amount.
type RatesType struct {
	// The Rate contains a collection of elements that define the amount of the rate, associated fees, additional occupant amounts. Taxes can be broken out or included within the various amounts. A currency can be associated to each amount.
	Rate []AmountType `json:"rate,omitempty"`
}

// NewRatesType instantiates a new RatesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatesType() *RatesType {
	this := RatesType{}
	return &this
}

// NewRatesTypeWithDefaults instantiates a new RatesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatesTypeWithDefaults() *RatesType {
	this := RatesType{}
	return &this
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *RatesType) GetRate() []AmountType {
	if o == nil || IsNil(o.Rate) {
		var ret []AmountType
		return ret
	}
	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatesType) GetRateOk() ([]AmountType, bool) {
	if o == nil || IsNil(o.Rate) {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *RatesType) HasRate() bool {
	if o != nil && !IsNil(o.Rate) {
		return true
	}

	return false
}

// SetRate gets a reference to the given []AmountType and assigns it to the Rate field.
func (o *RatesType) SetRate(v []AmountType) {
	o.Rate = v
}

func (o RatesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rate) {
		toSerialize["rate"] = o.Rate
	}
	return toSerialize, nil
}

type NullableRatesType struct {
	value *RatesType
	isSet bool
}

func (v NullableRatesType) Get() *RatesType {
	return v.value
}

func (v *NullableRatesType) Set(val *RatesType) {
	v.value = val
	v.isSet = true
}

func (v NullableRatesType) IsSet() bool {
	return v.isSet
}

func (v *NullableRatesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatesType(val *RatesType) *NullableRatesType {
	return &NullableRatesType{value: val, isSet: true}
}

func (v NullableRatesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


