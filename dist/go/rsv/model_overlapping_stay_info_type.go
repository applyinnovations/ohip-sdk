/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the OverlappingStayInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OverlappingStayInfoType{}

// OverlappingStayInfoType Possible overlapping stay information of a reservation.
type OverlappingStayInfoType struct {
	// The ending value of the date range.
	End *string `json:"end,omitempty"`
	// Unique Id that references an object uniquely in the system.
	ExcludedReservations []UniqueIDType `json:"excludedReservations,omitempty"`
	// Hotel Code of the reservation.
	HotelId *string `json:"hotelId,omitempty"`
	ProfileId *ProfileId `json:"profileId,omitempty"`
	ReservationId *ReservationId `json:"reservationId,omitempty"`
	// The starting value of the date range.
	Start *string `json:"start,omitempty"`
}

// NewOverlappingStayInfoType instantiates a new OverlappingStayInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOverlappingStayInfoType() *OverlappingStayInfoType {
	this := OverlappingStayInfoType{}
	return &this
}

// NewOverlappingStayInfoTypeWithDefaults instantiates a new OverlappingStayInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOverlappingStayInfoTypeWithDefaults() *OverlappingStayInfoType {
	this := OverlappingStayInfoType{}
	return &this
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *OverlappingStayInfoType) GetEnd() string {
	if o == nil || IsNil(o.End) {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverlappingStayInfoType) GetEndOk() (*string, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *OverlappingStayInfoType) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *OverlappingStayInfoType) SetEnd(v string) {
	o.End = &v
}

// GetExcludedReservations returns the ExcludedReservations field value if set, zero value otherwise.
func (o *OverlappingStayInfoType) GetExcludedReservations() []UniqueIDType {
	if o == nil || IsNil(o.ExcludedReservations) {
		var ret []UniqueIDType
		return ret
	}
	return o.ExcludedReservations
}

// GetExcludedReservationsOk returns a tuple with the ExcludedReservations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverlappingStayInfoType) GetExcludedReservationsOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.ExcludedReservations) {
		return nil, false
	}
	return o.ExcludedReservations, true
}

// HasExcludedReservations returns a boolean if a field has been set.
func (o *OverlappingStayInfoType) HasExcludedReservations() bool {
	if o != nil && !IsNil(o.ExcludedReservations) {
		return true
	}

	return false
}

// SetExcludedReservations gets a reference to the given []UniqueIDType and assigns it to the ExcludedReservations field.
func (o *OverlappingStayInfoType) SetExcludedReservations(v []UniqueIDType) {
	o.ExcludedReservations = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *OverlappingStayInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverlappingStayInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *OverlappingStayInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *OverlappingStayInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *OverlappingStayInfoType) GetProfileId() ProfileId {
	if o == nil || IsNil(o.ProfileId) {
		var ret ProfileId
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverlappingStayInfoType) GetProfileIdOk() (*ProfileId, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *OverlappingStayInfoType) HasProfileId() bool {
	if o != nil && !IsNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given ProfileId and assigns it to the ProfileId field.
func (o *OverlappingStayInfoType) SetProfileId(v ProfileId) {
	o.ProfileId = &v
}

// GetReservationId returns the ReservationId field value if set, zero value otherwise.
func (o *OverlappingStayInfoType) GetReservationId() ReservationId {
	if o == nil || IsNil(o.ReservationId) {
		var ret ReservationId
		return ret
	}
	return *o.ReservationId
}

// GetReservationIdOk returns a tuple with the ReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverlappingStayInfoType) GetReservationIdOk() (*ReservationId, bool) {
	if o == nil || IsNil(o.ReservationId) {
		return nil, false
	}
	return o.ReservationId, true
}

// HasReservationId returns a boolean if a field has been set.
func (o *OverlappingStayInfoType) HasReservationId() bool {
	if o != nil && !IsNil(o.ReservationId) {
		return true
	}

	return false
}

// SetReservationId gets a reference to the given ReservationId and assigns it to the ReservationId field.
func (o *OverlappingStayInfoType) SetReservationId(v ReservationId) {
	o.ReservationId = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *OverlappingStayInfoType) GetStart() string {
	if o == nil || IsNil(o.Start) {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverlappingStayInfoType) GetStartOk() (*string, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *OverlappingStayInfoType) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *OverlappingStayInfoType) SetStart(v string) {
	o.Start = &v
}

func (o OverlappingStayInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OverlappingStayInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.ExcludedReservations) {
		toSerialize["excludedReservations"] = o.ExcludedReservations
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ProfileId) {
		toSerialize["profileId"] = o.ProfileId
	}
	if !IsNil(o.ReservationId) {
		toSerialize["reservationId"] = o.ReservationId
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	return toSerialize, nil
}

type NullableOverlappingStayInfoType struct {
	value *OverlappingStayInfoType
	isSet bool
}

func (v NullableOverlappingStayInfoType) Get() *OverlappingStayInfoType {
	return v.value
}

func (v *NullableOverlappingStayInfoType) Set(val *OverlappingStayInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableOverlappingStayInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableOverlappingStayInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOverlappingStayInfoType(val *OverlappingStayInfoType) *NullableOverlappingStayInfoType {
	return &NullableOverlappingStayInfoType{value: val, isSet: true}
}

func (v NullableOverlappingStayInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOverlappingStayInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


