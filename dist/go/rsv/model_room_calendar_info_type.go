/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the RoomCalendarInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomCalendarInfoType{}

// RoomCalendarInfoType Holds hotel Room and Reservation Information.
type RoomCalendarInfoType struct {
	RoomInfo *RoomInfo `json:"roomInfo,omitempty"`
	// Holds the Schedule and Reservations.
	RoomSchedule []RoomScheduleType `json:"roomSchedule,omitempty"`
	// If room is a component suite , holds information about component room reservations
	ComponentRoomReservationsForSuite []ComponentBlockOutDates `json:"componentRoomReservationsForSuite,omitempty"`
	// Room Number.
	RoomId *string `json:"roomId,omitempty"`
	// Order the Room is displayed based on the Room Display Room settings.
	RoomOrder *int32 `json:"roomOrder,omitempty"`
	// Indicates if a room is a Component Suite or not.
	ComponentSuite *bool `json:"componentSuite,omitempty"`
	// Indicates if a room is a Pseudo room or not.
	Pseudo *bool `json:"pseudo,omitempty"`
	// Indicates true/false. When this flag is set to true indicates room type of the room is flagged as housekeeping.
	HouseKeeping *bool `json:"houseKeeping,omitempty"`
	RoomOwnerStatus *RoomOwnerStatusType `json:"roomOwnerStatus,omitempty"`
}

// NewRoomCalendarInfoType instantiates a new RoomCalendarInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomCalendarInfoType() *RoomCalendarInfoType {
	this := RoomCalendarInfoType{}
	return &this
}

// NewRoomCalendarInfoTypeWithDefaults instantiates a new RoomCalendarInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomCalendarInfoTypeWithDefaults() *RoomCalendarInfoType {
	this := RoomCalendarInfoType{}
	return &this
}

// GetRoomInfo returns the RoomInfo field value if set, zero value otherwise.
func (o *RoomCalendarInfoType) GetRoomInfo() RoomInfo {
	if o == nil || IsNil(o.RoomInfo) {
		var ret RoomInfo
		return ret
	}
	return *o.RoomInfo
}

// GetRoomInfoOk returns a tuple with the RoomInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCalendarInfoType) GetRoomInfoOk() (*RoomInfo, bool) {
	if o == nil || IsNil(o.RoomInfo) {
		return nil, false
	}
	return o.RoomInfo, true
}

// HasRoomInfo returns a boolean if a field has been set.
func (o *RoomCalendarInfoType) HasRoomInfo() bool {
	if o != nil && !IsNil(o.RoomInfo) {
		return true
	}

	return false
}

// SetRoomInfo gets a reference to the given RoomInfo and assigns it to the RoomInfo field.
func (o *RoomCalendarInfoType) SetRoomInfo(v RoomInfo) {
	o.RoomInfo = &v
}

// GetRoomSchedule returns the RoomSchedule field value if set, zero value otherwise.
func (o *RoomCalendarInfoType) GetRoomSchedule() []RoomScheduleType {
	if o == nil || IsNil(o.RoomSchedule) {
		var ret []RoomScheduleType
		return ret
	}
	return o.RoomSchedule
}

// GetRoomScheduleOk returns a tuple with the RoomSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCalendarInfoType) GetRoomScheduleOk() ([]RoomScheduleType, bool) {
	if o == nil || IsNil(o.RoomSchedule) {
		return nil, false
	}
	return o.RoomSchedule, true
}

// HasRoomSchedule returns a boolean if a field has been set.
func (o *RoomCalendarInfoType) HasRoomSchedule() bool {
	if o != nil && !IsNil(o.RoomSchedule) {
		return true
	}

	return false
}

// SetRoomSchedule gets a reference to the given []RoomScheduleType and assigns it to the RoomSchedule field.
func (o *RoomCalendarInfoType) SetRoomSchedule(v []RoomScheduleType) {
	o.RoomSchedule = v
}

// GetComponentRoomReservationsForSuite returns the ComponentRoomReservationsForSuite field value if set, zero value otherwise.
func (o *RoomCalendarInfoType) GetComponentRoomReservationsForSuite() []ComponentBlockOutDates {
	if o == nil || IsNil(o.ComponentRoomReservationsForSuite) {
		var ret []ComponentBlockOutDates
		return ret
	}
	return o.ComponentRoomReservationsForSuite
}

// GetComponentRoomReservationsForSuiteOk returns a tuple with the ComponentRoomReservationsForSuite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCalendarInfoType) GetComponentRoomReservationsForSuiteOk() ([]ComponentBlockOutDates, bool) {
	if o == nil || IsNil(o.ComponentRoomReservationsForSuite) {
		return nil, false
	}
	return o.ComponentRoomReservationsForSuite, true
}

// HasComponentRoomReservationsForSuite returns a boolean if a field has been set.
func (o *RoomCalendarInfoType) HasComponentRoomReservationsForSuite() bool {
	if o != nil && !IsNil(o.ComponentRoomReservationsForSuite) {
		return true
	}

	return false
}

// SetComponentRoomReservationsForSuite gets a reference to the given []ComponentBlockOutDates and assigns it to the ComponentRoomReservationsForSuite field.
func (o *RoomCalendarInfoType) SetComponentRoomReservationsForSuite(v []ComponentBlockOutDates) {
	o.ComponentRoomReservationsForSuite = v
}

// GetRoomId returns the RoomId field value if set, zero value otherwise.
func (o *RoomCalendarInfoType) GetRoomId() string {
	if o == nil || IsNil(o.RoomId) {
		var ret string
		return ret
	}
	return *o.RoomId
}

// GetRoomIdOk returns a tuple with the RoomId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCalendarInfoType) GetRoomIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoomId) {
		return nil, false
	}
	return o.RoomId, true
}

// HasRoomId returns a boolean if a field has been set.
func (o *RoomCalendarInfoType) HasRoomId() bool {
	if o != nil && !IsNil(o.RoomId) {
		return true
	}

	return false
}

// SetRoomId gets a reference to the given string and assigns it to the RoomId field.
func (o *RoomCalendarInfoType) SetRoomId(v string) {
	o.RoomId = &v
}

// GetRoomOrder returns the RoomOrder field value if set, zero value otherwise.
func (o *RoomCalendarInfoType) GetRoomOrder() int32 {
	if o == nil || IsNil(o.RoomOrder) {
		var ret int32
		return ret
	}
	return *o.RoomOrder
}

// GetRoomOrderOk returns a tuple with the RoomOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCalendarInfoType) GetRoomOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.RoomOrder) {
		return nil, false
	}
	return o.RoomOrder, true
}

// HasRoomOrder returns a boolean if a field has been set.
func (o *RoomCalendarInfoType) HasRoomOrder() bool {
	if o != nil && !IsNil(o.RoomOrder) {
		return true
	}

	return false
}

// SetRoomOrder gets a reference to the given int32 and assigns it to the RoomOrder field.
func (o *RoomCalendarInfoType) SetRoomOrder(v int32) {
	o.RoomOrder = &v
}

// GetComponentSuite returns the ComponentSuite field value if set, zero value otherwise.
func (o *RoomCalendarInfoType) GetComponentSuite() bool {
	if o == nil || IsNil(o.ComponentSuite) {
		var ret bool
		return ret
	}
	return *o.ComponentSuite
}

// GetComponentSuiteOk returns a tuple with the ComponentSuite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCalendarInfoType) GetComponentSuiteOk() (*bool, bool) {
	if o == nil || IsNil(o.ComponentSuite) {
		return nil, false
	}
	return o.ComponentSuite, true
}

// HasComponentSuite returns a boolean if a field has been set.
func (o *RoomCalendarInfoType) HasComponentSuite() bool {
	if o != nil && !IsNil(o.ComponentSuite) {
		return true
	}

	return false
}

// SetComponentSuite gets a reference to the given bool and assigns it to the ComponentSuite field.
func (o *RoomCalendarInfoType) SetComponentSuite(v bool) {
	o.ComponentSuite = &v
}

// GetPseudo returns the Pseudo field value if set, zero value otherwise.
func (o *RoomCalendarInfoType) GetPseudo() bool {
	if o == nil || IsNil(o.Pseudo) {
		var ret bool
		return ret
	}
	return *o.Pseudo
}

// GetPseudoOk returns a tuple with the Pseudo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCalendarInfoType) GetPseudoOk() (*bool, bool) {
	if o == nil || IsNil(o.Pseudo) {
		return nil, false
	}
	return o.Pseudo, true
}

// HasPseudo returns a boolean if a field has been set.
func (o *RoomCalendarInfoType) HasPseudo() bool {
	if o != nil && !IsNil(o.Pseudo) {
		return true
	}

	return false
}

// SetPseudo gets a reference to the given bool and assigns it to the Pseudo field.
func (o *RoomCalendarInfoType) SetPseudo(v bool) {
	o.Pseudo = &v
}

// GetHouseKeeping returns the HouseKeeping field value if set, zero value otherwise.
func (o *RoomCalendarInfoType) GetHouseKeeping() bool {
	if o == nil || IsNil(o.HouseKeeping) {
		var ret bool
		return ret
	}
	return *o.HouseKeeping
}

// GetHouseKeepingOk returns a tuple with the HouseKeeping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCalendarInfoType) GetHouseKeepingOk() (*bool, bool) {
	if o == nil || IsNil(o.HouseKeeping) {
		return nil, false
	}
	return o.HouseKeeping, true
}

// HasHouseKeeping returns a boolean if a field has been set.
func (o *RoomCalendarInfoType) HasHouseKeeping() bool {
	if o != nil && !IsNil(o.HouseKeeping) {
		return true
	}

	return false
}

// SetHouseKeeping gets a reference to the given bool and assigns it to the HouseKeeping field.
func (o *RoomCalendarInfoType) SetHouseKeeping(v bool) {
	o.HouseKeeping = &v
}

// GetRoomOwnerStatus returns the RoomOwnerStatus field value if set, zero value otherwise.
func (o *RoomCalendarInfoType) GetRoomOwnerStatus() RoomOwnerStatusType {
	if o == nil || IsNil(o.RoomOwnerStatus) {
		var ret RoomOwnerStatusType
		return ret
	}
	return *o.RoomOwnerStatus
}

// GetRoomOwnerStatusOk returns a tuple with the RoomOwnerStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCalendarInfoType) GetRoomOwnerStatusOk() (*RoomOwnerStatusType, bool) {
	if o == nil || IsNil(o.RoomOwnerStatus) {
		return nil, false
	}
	return o.RoomOwnerStatus, true
}

// HasRoomOwnerStatus returns a boolean if a field has been set.
func (o *RoomCalendarInfoType) HasRoomOwnerStatus() bool {
	if o != nil && !IsNil(o.RoomOwnerStatus) {
		return true
	}

	return false
}

// SetRoomOwnerStatus gets a reference to the given RoomOwnerStatusType and assigns it to the RoomOwnerStatus field.
func (o *RoomCalendarInfoType) SetRoomOwnerStatus(v RoomOwnerStatusType) {
	o.RoomOwnerStatus = &v
}

func (o RoomCalendarInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomCalendarInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoomInfo) {
		toSerialize["roomInfo"] = o.RoomInfo
	}
	if !IsNil(o.RoomSchedule) {
		toSerialize["roomSchedule"] = o.RoomSchedule
	}
	if !IsNil(o.ComponentRoomReservationsForSuite) {
		toSerialize["componentRoomReservationsForSuite"] = o.ComponentRoomReservationsForSuite
	}
	if !IsNil(o.RoomId) {
		toSerialize["roomId"] = o.RoomId
	}
	if !IsNil(o.RoomOrder) {
		toSerialize["roomOrder"] = o.RoomOrder
	}
	if !IsNil(o.ComponentSuite) {
		toSerialize["componentSuite"] = o.ComponentSuite
	}
	if !IsNil(o.Pseudo) {
		toSerialize["pseudo"] = o.Pseudo
	}
	if !IsNil(o.HouseKeeping) {
		toSerialize["houseKeeping"] = o.HouseKeeping
	}
	if !IsNil(o.RoomOwnerStatus) {
		toSerialize["roomOwnerStatus"] = o.RoomOwnerStatus
	}
	return toSerialize, nil
}

type NullableRoomCalendarInfoType struct {
	value *RoomCalendarInfoType
	isSet bool
}

func (v NullableRoomCalendarInfoType) Get() *RoomCalendarInfoType {
	return v.value
}

func (v *NullableRoomCalendarInfoType) Set(val *RoomCalendarInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomCalendarInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomCalendarInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomCalendarInfoType(val *RoomCalendarInfoType) *NullableRoomCalendarInfoType {
	return &NullableRoomCalendarInfoType{value: val, isSet: true}
}

func (v NullableRoomCalendarInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomCalendarInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


