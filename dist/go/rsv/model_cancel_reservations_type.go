/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the CancelReservationsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancelReservationsType{}

// CancelReservationsType Criteria for submitting batch cancel reservations.
type CancelReservationsType struct {
	CancelInstructions *CancelReservationsInstructionsType `json:"cancelInstructions,omitempty"`
	// The hotel code for the reservations that are being cancelled.
	HotelId *string `json:"hotelId,omitempty"`
	Reason *CancellationReasonType `json:"reason,omitempty"`
	// Unique identifier for a reservation.
	Reservations []ReservationId `json:"reservations,omitempty"`
}

// NewCancelReservationsType instantiates a new CancelReservationsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelReservationsType() *CancelReservationsType {
	this := CancelReservationsType{}
	return &this
}

// NewCancelReservationsTypeWithDefaults instantiates a new CancelReservationsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelReservationsTypeWithDefaults() *CancelReservationsType {
	this := CancelReservationsType{}
	return &this
}

// GetCancelInstructions returns the CancelInstructions field value if set, zero value otherwise.
func (o *CancelReservationsType) GetCancelInstructions() CancelReservationsInstructionsType {
	if o == nil || IsNil(o.CancelInstructions) {
		var ret CancelReservationsInstructionsType
		return ret
	}
	return *o.CancelInstructions
}

// GetCancelInstructionsOk returns a tuple with the CancelInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelReservationsType) GetCancelInstructionsOk() (*CancelReservationsInstructionsType, bool) {
	if o == nil || IsNil(o.CancelInstructions) {
		return nil, false
	}
	return o.CancelInstructions, true
}

// HasCancelInstructions returns a boolean if a field has been set.
func (o *CancelReservationsType) HasCancelInstructions() bool {
	if o != nil && !IsNil(o.CancelInstructions) {
		return true
	}

	return false
}

// SetCancelInstructions gets a reference to the given CancelReservationsInstructionsType and assigns it to the CancelInstructions field.
func (o *CancelReservationsType) SetCancelInstructions(v CancelReservationsInstructionsType) {
	o.CancelInstructions = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CancelReservationsType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelReservationsType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CancelReservationsType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CancelReservationsType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *CancelReservationsType) GetReason() CancellationReasonType {
	if o == nil || IsNil(o.Reason) {
		var ret CancellationReasonType
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelReservationsType) GetReasonOk() (*CancellationReasonType, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *CancelReservationsType) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given CancellationReasonType and assigns it to the Reason field.
func (o *CancelReservationsType) SetReason(v CancellationReasonType) {
	o.Reason = &v
}

// GetReservations returns the Reservations field value if set, zero value otherwise.
func (o *CancelReservationsType) GetReservations() []ReservationId {
	if o == nil || IsNil(o.Reservations) {
		var ret []ReservationId
		return ret
	}
	return o.Reservations
}

// GetReservationsOk returns a tuple with the Reservations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelReservationsType) GetReservationsOk() ([]ReservationId, bool) {
	if o == nil || IsNil(o.Reservations) {
		return nil, false
	}
	return o.Reservations, true
}

// HasReservations returns a boolean if a field has been set.
func (o *CancelReservationsType) HasReservations() bool {
	if o != nil && !IsNil(o.Reservations) {
		return true
	}

	return false
}

// SetReservations gets a reference to the given []ReservationId and assigns it to the Reservations field.
func (o *CancelReservationsType) SetReservations(v []ReservationId) {
	o.Reservations = v
}

func (o CancelReservationsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancelReservationsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CancelInstructions) {
		toSerialize["cancelInstructions"] = o.CancelInstructions
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Reservations) {
		toSerialize["reservations"] = o.Reservations
	}
	return toSerialize, nil
}

type NullableCancelReservationsType struct {
	value *CancelReservationsType
	isSet bool
}

func (v NullableCancelReservationsType) Get() *CancelReservationsType {
	return v.value
}

func (v *NullableCancelReservationsType) Set(val *CancelReservationsType) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelReservationsType) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelReservationsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelReservationsType(val *CancelReservationsType) *NullableCancelReservationsType {
	return &NullableCancelReservationsType{value: val, isSet: true}
}

func (v NullableCancelReservationsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelReservationsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


