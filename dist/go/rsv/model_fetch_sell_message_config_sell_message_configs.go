/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the FetchSellMessageConfigSellMessageConfigs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FetchSellMessageConfigSellMessageConfigs{}

// FetchSellMessageConfigSellMessageConfigs Sell Messages which are retrieved as per the criteria in the request message. Refer to the generic common types document for the SellMessagesType.
type FetchSellMessageConfigSellMessageConfigs struct {
	SellMessageConfigs *SellMessageConfigsType `json:"sellMessageConfigs,omitempty"`
	// Evaluated total page count based on the requested max fetch count.
	TotalPages *int32 `json:"totalPages,omitempty"`
}

// NewFetchSellMessageConfigSellMessageConfigs instantiates a new FetchSellMessageConfigSellMessageConfigs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchSellMessageConfigSellMessageConfigs() *FetchSellMessageConfigSellMessageConfigs {
	this := FetchSellMessageConfigSellMessageConfigs{}
	return &this
}

// NewFetchSellMessageConfigSellMessageConfigsWithDefaults instantiates a new FetchSellMessageConfigSellMessageConfigs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchSellMessageConfigSellMessageConfigsWithDefaults() *FetchSellMessageConfigSellMessageConfigs {
	this := FetchSellMessageConfigSellMessageConfigs{}
	return &this
}

// GetSellMessageConfigs returns the SellMessageConfigs field value if set, zero value otherwise.
func (o *FetchSellMessageConfigSellMessageConfigs) GetSellMessageConfigs() SellMessageConfigsType {
	if o == nil || IsNil(o.SellMessageConfigs) {
		var ret SellMessageConfigsType
		return ret
	}
	return *o.SellMessageConfigs
}

// GetSellMessageConfigsOk returns a tuple with the SellMessageConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchSellMessageConfigSellMessageConfigs) GetSellMessageConfigsOk() (*SellMessageConfigsType, bool) {
	if o == nil || IsNil(o.SellMessageConfigs) {
		return nil, false
	}
	return o.SellMessageConfigs, true
}

// HasSellMessageConfigs returns a boolean if a field has been set.
func (o *FetchSellMessageConfigSellMessageConfigs) HasSellMessageConfigs() bool {
	if o != nil && !IsNil(o.SellMessageConfigs) {
		return true
	}

	return false
}

// SetSellMessageConfigs gets a reference to the given SellMessageConfigsType and assigns it to the SellMessageConfigs field.
func (o *FetchSellMessageConfigSellMessageConfigs) SetSellMessageConfigs(v SellMessageConfigsType) {
	o.SellMessageConfigs = &v
}

// GetTotalPages returns the TotalPages field value if set, zero value otherwise.
func (o *FetchSellMessageConfigSellMessageConfigs) GetTotalPages() int32 {
	if o == nil || IsNil(o.TotalPages) {
		var ret int32
		return ret
	}
	return *o.TotalPages
}

// GetTotalPagesOk returns a tuple with the TotalPages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchSellMessageConfigSellMessageConfigs) GetTotalPagesOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalPages) {
		return nil, false
	}
	return o.TotalPages, true
}

// HasTotalPages returns a boolean if a field has been set.
func (o *FetchSellMessageConfigSellMessageConfigs) HasTotalPages() bool {
	if o != nil && !IsNil(o.TotalPages) {
		return true
	}

	return false
}

// SetTotalPages gets a reference to the given int32 and assigns it to the TotalPages field.
func (o *FetchSellMessageConfigSellMessageConfigs) SetTotalPages(v int32) {
	o.TotalPages = &v
}

func (o FetchSellMessageConfigSellMessageConfigs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FetchSellMessageConfigSellMessageConfigs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SellMessageConfigs) {
		toSerialize["sellMessageConfigs"] = o.SellMessageConfigs
	}
	if !IsNil(o.TotalPages) {
		toSerialize["totalPages"] = o.TotalPages
	}
	return toSerialize, nil
}

type NullableFetchSellMessageConfigSellMessageConfigs struct {
	value *FetchSellMessageConfigSellMessageConfigs
	isSet bool
}

func (v NullableFetchSellMessageConfigSellMessageConfigs) Get() *FetchSellMessageConfigSellMessageConfigs {
	return v.value
}

func (v *NullableFetchSellMessageConfigSellMessageConfigs) Set(val *FetchSellMessageConfigSellMessageConfigs) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchSellMessageConfigSellMessageConfigs) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchSellMessageConfigSellMessageConfigs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchSellMessageConfigSellMessageConfigs(val *FetchSellMessageConfigSellMessageConfigs) *NullableFetchSellMessageConfigSellMessageConfigs {
	return &NullableFetchSellMessageConfigSellMessageConfigs{value: val, isSet: true}
}

func (v NullableFetchSellMessageConfigSellMessageConfigs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchSellMessageConfigSellMessageConfigs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


