/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ResInventoryItemSourceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResInventoryItemSourceType{}

// ResInventoryItemSourceType Defines whether the item is setup due to a Rate Plan, Package or a Block.
type ResInventoryItemSourceType struct {
	BlockId *BlockId `json:"blockId,omitempty"`
	// Package Code, If populated specifies that the item is setup due to a Package.
	PackageCode *string `json:"packageCode,omitempty"`
	// Source Reservation Package Opera Internal Unique Id. This is the unique Id used for the reservation package associated with this item.
	PackageInternalId *float32 `json:"packageInternalId,omitempty"`
	// Rate Plan Code, If populated specifies that the item is setup due to a Rate Plan.
	RatePlanCode *string `json:"ratePlanCode,omitempty"`
	// If true, it implies that the item has been attached to the reservation as part of a Welcome Offer
	WelcomeOffer *bool `json:"welcomeOffer,omitempty"`
}

// NewResInventoryItemSourceType instantiates a new ResInventoryItemSourceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResInventoryItemSourceType() *ResInventoryItemSourceType {
	this := ResInventoryItemSourceType{}
	return &this
}

// NewResInventoryItemSourceTypeWithDefaults instantiates a new ResInventoryItemSourceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResInventoryItemSourceTypeWithDefaults() *ResInventoryItemSourceType {
	this := ResInventoryItemSourceType{}
	return &this
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *ResInventoryItemSourceType) GetBlockId() BlockId {
	if o == nil || IsNil(o.BlockId) {
		var ret BlockId
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResInventoryItemSourceType) GetBlockIdOk() (*BlockId, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *ResInventoryItemSourceType) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given BlockId and assigns it to the BlockId field.
func (o *ResInventoryItemSourceType) SetBlockId(v BlockId) {
	o.BlockId = &v
}

// GetPackageCode returns the PackageCode field value if set, zero value otherwise.
func (o *ResInventoryItemSourceType) GetPackageCode() string {
	if o == nil || IsNil(o.PackageCode) {
		var ret string
		return ret
	}
	return *o.PackageCode
}

// GetPackageCodeOk returns a tuple with the PackageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResInventoryItemSourceType) GetPackageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PackageCode) {
		return nil, false
	}
	return o.PackageCode, true
}

// HasPackageCode returns a boolean if a field has been set.
func (o *ResInventoryItemSourceType) HasPackageCode() bool {
	if o != nil && !IsNil(o.PackageCode) {
		return true
	}

	return false
}

// SetPackageCode gets a reference to the given string and assigns it to the PackageCode field.
func (o *ResInventoryItemSourceType) SetPackageCode(v string) {
	o.PackageCode = &v
}

// GetPackageInternalId returns the PackageInternalId field value if set, zero value otherwise.
func (o *ResInventoryItemSourceType) GetPackageInternalId() float32 {
	if o == nil || IsNil(o.PackageInternalId) {
		var ret float32
		return ret
	}
	return *o.PackageInternalId
}

// GetPackageInternalIdOk returns a tuple with the PackageInternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResInventoryItemSourceType) GetPackageInternalIdOk() (*float32, bool) {
	if o == nil || IsNil(o.PackageInternalId) {
		return nil, false
	}
	return o.PackageInternalId, true
}

// HasPackageInternalId returns a boolean if a field has been set.
func (o *ResInventoryItemSourceType) HasPackageInternalId() bool {
	if o != nil && !IsNil(o.PackageInternalId) {
		return true
	}

	return false
}

// SetPackageInternalId gets a reference to the given float32 and assigns it to the PackageInternalId field.
func (o *ResInventoryItemSourceType) SetPackageInternalId(v float32) {
	o.PackageInternalId = &v
}

// GetRatePlanCode returns the RatePlanCode field value if set, zero value otherwise.
func (o *ResInventoryItemSourceType) GetRatePlanCode() string {
	if o == nil || IsNil(o.RatePlanCode) {
		var ret string
		return ret
	}
	return *o.RatePlanCode
}

// GetRatePlanCodeOk returns a tuple with the RatePlanCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResInventoryItemSourceType) GetRatePlanCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RatePlanCode) {
		return nil, false
	}
	return o.RatePlanCode, true
}

// HasRatePlanCode returns a boolean if a field has been set.
func (o *ResInventoryItemSourceType) HasRatePlanCode() bool {
	if o != nil && !IsNil(o.RatePlanCode) {
		return true
	}

	return false
}

// SetRatePlanCode gets a reference to the given string and assigns it to the RatePlanCode field.
func (o *ResInventoryItemSourceType) SetRatePlanCode(v string) {
	o.RatePlanCode = &v
}

// GetWelcomeOffer returns the WelcomeOffer field value if set, zero value otherwise.
func (o *ResInventoryItemSourceType) GetWelcomeOffer() bool {
	if o == nil || IsNil(o.WelcomeOffer) {
		var ret bool
		return ret
	}
	return *o.WelcomeOffer
}

// GetWelcomeOfferOk returns a tuple with the WelcomeOffer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResInventoryItemSourceType) GetWelcomeOfferOk() (*bool, bool) {
	if o == nil || IsNil(o.WelcomeOffer) {
		return nil, false
	}
	return o.WelcomeOffer, true
}

// HasWelcomeOffer returns a boolean if a field has been set.
func (o *ResInventoryItemSourceType) HasWelcomeOffer() bool {
	if o != nil && !IsNil(o.WelcomeOffer) {
		return true
	}

	return false
}

// SetWelcomeOffer gets a reference to the given bool and assigns it to the WelcomeOffer field.
func (o *ResInventoryItemSourceType) SetWelcomeOffer(v bool) {
	o.WelcomeOffer = &v
}

func (o ResInventoryItemSourceType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResInventoryItemSourceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	if !IsNil(o.PackageCode) {
		toSerialize["packageCode"] = o.PackageCode
	}
	if !IsNil(o.PackageInternalId) {
		toSerialize["packageInternalId"] = o.PackageInternalId
	}
	if !IsNil(o.RatePlanCode) {
		toSerialize["ratePlanCode"] = o.RatePlanCode
	}
	if !IsNil(o.WelcomeOffer) {
		toSerialize["welcomeOffer"] = o.WelcomeOffer
	}
	return toSerialize, nil
}

type NullableResInventoryItemSourceType struct {
	value *ResInventoryItemSourceType
	isSet bool
}

func (v NullableResInventoryItemSourceType) Get() *ResInventoryItemSourceType {
	return v.value
}

func (v *NullableResInventoryItemSourceType) Set(val *ResInventoryItemSourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableResInventoryItemSourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableResInventoryItemSourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResInventoryItemSourceType(val *ResInventoryItemSourceType) *NullableResInventoryItemSourceType {
	return &NullableResInventoryItemSourceType{value: val, isSet: true}
}

func (v NullableResInventoryItemSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResInventoryItemSourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


