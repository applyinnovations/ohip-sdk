/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ReservationsSummaryInformationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReservationsSummaryInformationType{}

// ReservationsSummaryInformationType Reservations Summary.
type ReservationsSummaryInformationType struct {
	// Indicates number of records the API has returned actually as per the API request criteria.
	Count *int32 `json:"count,omitempty"`
	// Indicates whether there are more records available to be returned as per the API request criteria or not.
	HasMore *bool `json:"hasMore,omitempty"`
	// Indicates number of records the API can return as per the API request limit sent. A maximum of 200 records can be only returned at a time.
	Limit *int32 `json:"limit,omitempty"`
	// Indicates the index of the next applicable set(page).
	Offset *int32 `json:"offset,omitempty"`
	ReservationsInformation []ReservationsInformationType `json:"reservationsInformation,omitempty"`
	// Indicates total number of records available that can be returned as per the API request criteria.
	TotalResults *int32 `json:"totalResults,omitempty"`
}

// NewReservationsSummaryInformationType instantiates a new ReservationsSummaryInformationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservationsSummaryInformationType() *ReservationsSummaryInformationType {
	this := ReservationsSummaryInformationType{}
	return &this
}

// NewReservationsSummaryInformationTypeWithDefaults instantiates a new ReservationsSummaryInformationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservationsSummaryInformationTypeWithDefaults() *ReservationsSummaryInformationType {
	this := ReservationsSummaryInformationType{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *ReservationsSummaryInformationType) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationsSummaryInformationType) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *ReservationsSummaryInformationType) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *ReservationsSummaryInformationType) SetCount(v int32) {
	o.Count = &v
}

// GetHasMore returns the HasMore field value if set, zero value otherwise.
func (o *ReservationsSummaryInformationType) GetHasMore() bool {
	if o == nil || IsNil(o.HasMore) {
		var ret bool
		return ret
	}
	return *o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationsSummaryInformationType) GetHasMoreOk() (*bool, bool) {
	if o == nil || IsNil(o.HasMore) {
		return nil, false
	}
	return o.HasMore, true
}

// HasHasMore returns a boolean if a field has been set.
func (o *ReservationsSummaryInformationType) HasHasMore() bool {
	if o != nil && !IsNil(o.HasMore) {
		return true
	}

	return false
}

// SetHasMore gets a reference to the given bool and assigns it to the HasMore field.
func (o *ReservationsSummaryInformationType) SetHasMore(v bool) {
	o.HasMore = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *ReservationsSummaryInformationType) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationsSummaryInformationType) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *ReservationsSummaryInformationType) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *ReservationsSummaryInformationType) SetLimit(v int32) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *ReservationsSummaryInformationType) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationsSummaryInformationType) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *ReservationsSummaryInformationType) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *ReservationsSummaryInformationType) SetOffset(v int32) {
	o.Offset = &v
}

// GetReservationsInformation returns the ReservationsInformation field value if set, zero value otherwise.
func (o *ReservationsSummaryInformationType) GetReservationsInformation() []ReservationsInformationType {
	if o == nil || IsNil(o.ReservationsInformation) {
		var ret []ReservationsInformationType
		return ret
	}
	return o.ReservationsInformation
}

// GetReservationsInformationOk returns a tuple with the ReservationsInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationsSummaryInformationType) GetReservationsInformationOk() ([]ReservationsInformationType, bool) {
	if o == nil || IsNil(o.ReservationsInformation) {
		return nil, false
	}
	return o.ReservationsInformation, true
}

// HasReservationsInformation returns a boolean if a field has been set.
func (o *ReservationsSummaryInformationType) HasReservationsInformation() bool {
	if o != nil && !IsNil(o.ReservationsInformation) {
		return true
	}

	return false
}

// SetReservationsInformation gets a reference to the given []ReservationsInformationType and assigns it to the ReservationsInformation field.
func (o *ReservationsSummaryInformationType) SetReservationsInformation(v []ReservationsInformationType) {
	o.ReservationsInformation = v
}

// GetTotalResults returns the TotalResults field value if set, zero value otherwise.
func (o *ReservationsSummaryInformationType) GetTotalResults() int32 {
	if o == nil || IsNil(o.TotalResults) {
		var ret int32
		return ret
	}
	return *o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationsSummaryInformationType) GetTotalResultsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalResults) {
		return nil, false
	}
	return o.TotalResults, true
}

// HasTotalResults returns a boolean if a field has been set.
func (o *ReservationsSummaryInformationType) HasTotalResults() bool {
	if o != nil && !IsNil(o.TotalResults) {
		return true
	}

	return false
}

// SetTotalResults gets a reference to the given int32 and assigns it to the TotalResults field.
func (o *ReservationsSummaryInformationType) SetTotalResults(v int32) {
	o.TotalResults = &v
}

func (o ReservationsSummaryInformationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReservationsSummaryInformationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.HasMore) {
		toSerialize["hasMore"] = o.HasMore
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.ReservationsInformation) {
		toSerialize["reservationsInformation"] = o.ReservationsInformation
	}
	if !IsNil(o.TotalResults) {
		toSerialize["totalResults"] = o.TotalResults
	}
	return toSerialize, nil
}

type NullableReservationsSummaryInformationType struct {
	value *ReservationsSummaryInformationType
	isSet bool
}

func (v NullableReservationsSummaryInformationType) Get() *ReservationsSummaryInformationType {
	return v.value
}

func (v *NullableReservationsSummaryInformationType) Set(val *ReservationsSummaryInformationType) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationsSummaryInformationType) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationsSummaryInformationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationsSummaryInformationType(val *ReservationsSummaryInformationType) *NullableReservationsSummaryInformationType {
	return &NullableReservationsSummaryInformationType{value: val, isSet: true}
}

func (v NullableReservationsSummaryInformationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationsSummaryInformationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


