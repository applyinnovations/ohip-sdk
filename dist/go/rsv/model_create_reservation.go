/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the CreateReservation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateReservation{}

// CreateReservation Request object to create reservations. Includes instructions for information which needs to be returned.
type CreateReservation struct {
	Reservations *HotelReservationsType `json:"reservations,omitempty"`
	// Instruction on what has to be fetched. Refer to Generic common types document.
	FetchInstructions []ReservationInstructionType `json:"fetchInstructions,omitempty"`
	ReservationsInstructionsType *ReservationsInstructionsType `json:"reservationsInstructionsType,omitempty"`
	ChannelInformation *ChannelResvRQInfoType `json:"channelInformation,omitempty"`
	// Boolean flag that forces reservation to updates in OPERA. By default, this value is false.
	ReservationNotification *bool `json:"reservationNotification,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewCreateReservation instantiates a new CreateReservation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateReservation() *CreateReservation {
	this := CreateReservation{}
	var reservationNotification bool = false
	this.ReservationNotification = &reservationNotification
	return &this
}

// NewCreateReservationWithDefaults instantiates a new CreateReservation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateReservationWithDefaults() *CreateReservation {
	this := CreateReservation{}
	var reservationNotification bool = false
	this.ReservationNotification = &reservationNotification
	return &this
}

// GetReservations returns the Reservations field value if set, zero value otherwise.
func (o *CreateReservation) GetReservations() HotelReservationsType {
	if o == nil || IsNil(o.Reservations) {
		var ret HotelReservationsType
		return ret
	}
	return *o.Reservations
}

// GetReservationsOk returns a tuple with the Reservations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReservation) GetReservationsOk() (*HotelReservationsType, bool) {
	if o == nil || IsNil(o.Reservations) {
		return nil, false
	}
	return o.Reservations, true
}

// HasReservations returns a boolean if a field has been set.
func (o *CreateReservation) HasReservations() bool {
	if o != nil && !IsNil(o.Reservations) {
		return true
	}

	return false
}

// SetReservations gets a reference to the given HotelReservationsType and assigns it to the Reservations field.
func (o *CreateReservation) SetReservations(v HotelReservationsType) {
	o.Reservations = &v
}

// GetFetchInstructions returns the FetchInstructions field value if set, zero value otherwise.
func (o *CreateReservation) GetFetchInstructions() []ReservationInstructionType {
	if o == nil || IsNil(o.FetchInstructions) {
		var ret []ReservationInstructionType
		return ret
	}
	return o.FetchInstructions
}

// GetFetchInstructionsOk returns a tuple with the FetchInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReservation) GetFetchInstructionsOk() ([]ReservationInstructionType, bool) {
	if o == nil || IsNil(o.FetchInstructions) {
		return nil, false
	}
	return o.FetchInstructions, true
}

// HasFetchInstructions returns a boolean if a field has been set.
func (o *CreateReservation) HasFetchInstructions() bool {
	if o != nil && !IsNil(o.FetchInstructions) {
		return true
	}

	return false
}

// SetFetchInstructions gets a reference to the given []ReservationInstructionType and assigns it to the FetchInstructions field.
func (o *CreateReservation) SetFetchInstructions(v []ReservationInstructionType) {
	o.FetchInstructions = v
}

// GetReservationsInstructionsType returns the ReservationsInstructionsType field value if set, zero value otherwise.
func (o *CreateReservation) GetReservationsInstructionsType() ReservationsInstructionsType {
	if o == nil || IsNil(o.ReservationsInstructionsType) {
		var ret ReservationsInstructionsType
		return ret
	}
	return *o.ReservationsInstructionsType
}

// GetReservationsInstructionsTypeOk returns a tuple with the ReservationsInstructionsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReservation) GetReservationsInstructionsTypeOk() (*ReservationsInstructionsType, bool) {
	if o == nil || IsNil(o.ReservationsInstructionsType) {
		return nil, false
	}
	return o.ReservationsInstructionsType, true
}

// HasReservationsInstructionsType returns a boolean if a field has been set.
func (o *CreateReservation) HasReservationsInstructionsType() bool {
	if o != nil && !IsNil(o.ReservationsInstructionsType) {
		return true
	}

	return false
}

// SetReservationsInstructionsType gets a reference to the given ReservationsInstructionsType and assigns it to the ReservationsInstructionsType field.
func (o *CreateReservation) SetReservationsInstructionsType(v ReservationsInstructionsType) {
	o.ReservationsInstructionsType = &v
}

// GetChannelInformation returns the ChannelInformation field value if set, zero value otherwise.
func (o *CreateReservation) GetChannelInformation() ChannelResvRQInfoType {
	if o == nil || IsNil(o.ChannelInformation) {
		var ret ChannelResvRQInfoType
		return ret
	}
	return *o.ChannelInformation
}

// GetChannelInformationOk returns a tuple with the ChannelInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReservation) GetChannelInformationOk() (*ChannelResvRQInfoType, bool) {
	if o == nil || IsNil(o.ChannelInformation) {
		return nil, false
	}
	return o.ChannelInformation, true
}

// HasChannelInformation returns a boolean if a field has been set.
func (o *CreateReservation) HasChannelInformation() bool {
	if o != nil && !IsNil(o.ChannelInformation) {
		return true
	}

	return false
}

// SetChannelInformation gets a reference to the given ChannelResvRQInfoType and assigns it to the ChannelInformation field.
func (o *CreateReservation) SetChannelInformation(v ChannelResvRQInfoType) {
	o.ChannelInformation = &v
}

// GetReservationNotification returns the ReservationNotification field value if set, zero value otherwise.
func (o *CreateReservation) GetReservationNotification() bool {
	if o == nil || IsNil(o.ReservationNotification) {
		var ret bool
		return ret
	}
	return *o.ReservationNotification
}

// GetReservationNotificationOk returns a tuple with the ReservationNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReservation) GetReservationNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.ReservationNotification) {
		return nil, false
	}
	return o.ReservationNotification, true
}

// HasReservationNotification returns a boolean if a field has been set.
func (o *CreateReservation) HasReservationNotification() bool {
	if o != nil && !IsNil(o.ReservationNotification) {
		return true
	}

	return false
}

// SetReservationNotification gets a reference to the given bool and assigns it to the ReservationNotification field.
func (o *CreateReservation) SetReservationNotification(v bool) {
	o.ReservationNotification = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *CreateReservation) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReservation) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *CreateReservation) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *CreateReservation) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *CreateReservation) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReservation) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *CreateReservation) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *CreateReservation) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o CreateReservation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateReservation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reservations) {
		toSerialize["reservations"] = o.Reservations
	}
	if !IsNil(o.FetchInstructions) {
		toSerialize["fetchInstructions"] = o.FetchInstructions
	}
	if !IsNil(o.ReservationsInstructionsType) {
		toSerialize["reservationsInstructionsType"] = o.ReservationsInstructionsType
	}
	if !IsNil(o.ChannelInformation) {
		toSerialize["channelInformation"] = o.ChannelInformation
	}
	if !IsNil(o.ReservationNotification) {
		toSerialize["reservationNotification"] = o.ReservationNotification
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableCreateReservation struct {
	value *CreateReservation
	isSet bool
}

func (v NullableCreateReservation) Get() *CreateReservation {
	return v.value
}

func (v *NullableCreateReservation) Set(val *CreateReservation) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateReservation) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateReservation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateReservation(val *CreateReservation) *NullableCreateReservation {
	return &NullableCreateReservation{value: val, isSet: true}
}

func (v NullableCreateReservation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateReservation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


