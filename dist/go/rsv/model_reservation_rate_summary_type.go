/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ReservationRateSummaryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReservationRateSummaryType{}

// ReservationRateSummaryType struct for ReservationRateSummaryType
type ReservationRateSummaryType struct {
	// Currency revenue calculation is based on.
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// Amount paid prior to the stay.
	Deposit *float32 `json:"deposit,omitempty"`
	Details []ReservationRateSummaryDetailType `json:"details,omitempty"`
	// The ending value of the date range.
	End *string `json:"end,omitempty"`
	// Amount of automatically posted charges along with room and taxes.
	FixedCharges *float32 `json:"fixedCharges,omitempty"`
	// Amount of revenue and package excluding tax.
	Gross *float32 `json:"gross,omitempty"`
	// Amount to be paid by Guest.
	GuestPay *float32 `json:"guestPay,omitempty"`
	// Whether suppressed rate is present or not.
	HasSuppressedRate *bool `json:"hasSuppressedRate,omitempty"`
	// Amount of revenue and package including tax.
	Net *float32 `json:"net,omitempty"`
	// Remaining amount to be paid.
	OutStandingCostOfStay *float32 `json:"outStandingCostOfStay,omitempty"`
	// Amount of automatically forwarded charges for specific transaction codes.
	Routing *float32 `json:"routing,omitempty"`
	// The starting value of the date range.
	Start *string `json:"start,omitempty"`
	// Amount of total cost of stay.
	TotalCostOfStay *float32 `json:"totalCostOfStay,omitempty"`
}

// NewReservationRateSummaryType instantiates a new ReservationRateSummaryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservationRateSummaryType() *ReservationRateSummaryType {
	this := ReservationRateSummaryType{}
	return &this
}

// NewReservationRateSummaryTypeWithDefaults instantiates a new ReservationRateSummaryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservationRateSummaryTypeWithDefaults() *ReservationRateSummaryType {
	this := ReservationRateSummaryType{}
	return &this
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *ReservationRateSummaryType) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRateSummaryType) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *ReservationRateSummaryType) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *ReservationRateSummaryType) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetDeposit returns the Deposit field value if set, zero value otherwise.
func (o *ReservationRateSummaryType) GetDeposit() float32 {
	if o == nil || IsNil(o.Deposit) {
		var ret float32
		return ret
	}
	return *o.Deposit
}

// GetDepositOk returns a tuple with the Deposit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRateSummaryType) GetDepositOk() (*float32, bool) {
	if o == nil || IsNil(o.Deposit) {
		return nil, false
	}
	return o.Deposit, true
}

// HasDeposit returns a boolean if a field has been set.
func (o *ReservationRateSummaryType) HasDeposit() bool {
	if o != nil && !IsNil(o.Deposit) {
		return true
	}

	return false
}

// SetDeposit gets a reference to the given float32 and assigns it to the Deposit field.
func (o *ReservationRateSummaryType) SetDeposit(v float32) {
	o.Deposit = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *ReservationRateSummaryType) GetDetails() []ReservationRateSummaryDetailType {
	if o == nil || IsNil(o.Details) {
		var ret []ReservationRateSummaryDetailType
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRateSummaryType) GetDetailsOk() ([]ReservationRateSummaryDetailType, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *ReservationRateSummaryType) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given []ReservationRateSummaryDetailType and assigns it to the Details field.
func (o *ReservationRateSummaryType) SetDetails(v []ReservationRateSummaryDetailType) {
	o.Details = v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *ReservationRateSummaryType) GetEnd() string {
	if o == nil || IsNil(o.End) {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRateSummaryType) GetEndOk() (*string, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *ReservationRateSummaryType) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *ReservationRateSummaryType) SetEnd(v string) {
	o.End = &v
}

// GetFixedCharges returns the FixedCharges field value if set, zero value otherwise.
func (o *ReservationRateSummaryType) GetFixedCharges() float32 {
	if o == nil || IsNil(o.FixedCharges) {
		var ret float32
		return ret
	}
	return *o.FixedCharges
}

// GetFixedChargesOk returns a tuple with the FixedCharges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRateSummaryType) GetFixedChargesOk() (*float32, bool) {
	if o == nil || IsNil(o.FixedCharges) {
		return nil, false
	}
	return o.FixedCharges, true
}

// HasFixedCharges returns a boolean if a field has been set.
func (o *ReservationRateSummaryType) HasFixedCharges() bool {
	if o != nil && !IsNil(o.FixedCharges) {
		return true
	}

	return false
}

// SetFixedCharges gets a reference to the given float32 and assigns it to the FixedCharges field.
func (o *ReservationRateSummaryType) SetFixedCharges(v float32) {
	o.FixedCharges = &v
}

// GetGross returns the Gross field value if set, zero value otherwise.
func (o *ReservationRateSummaryType) GetGross() float32 {
	if o == nil || IsNil(o.Gross) {
		var ret float32
		return ret
	}
	return *o.Gross
}

// GetGrossOk returns a tuple with the Gross field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRateSummaryType) GetGrossOk() (*float32, bool) {
	if o == nil || IsNil(o.Gross) {
		return nil, false
	}
	return o.Gross, true
}

// HasGross returns a boolean if a field has been set.
func (o *ReservationRateSummaryType) HasGross() bool {
	if o != nil && !IsNil(o.Gross) {
		return true
	}

	return false
}

// SetGross gets a reference to the given float32 and assigns it to the Gross field.
func (o *ReservationRateSummaryType) SetGross(v float32) {
	o.Gross = &v
}

// GetGuestPay returns the GuestPay field value if set, zero value otherwise.
func (o *ReservationRateSummaryType) GetGuestPay() float32 {
	if o == nil || IsNil(o.GuestPay) {
		var ret float32
		return ret
	}
	return *o.GuestPay
}

// GetGuestPayOk returns a tuple with the GuestPay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRateSummaryType) GetGuestPayOk() (*float32, bool) {
	if o == nil || IsNil(o.GuestPay) {
		return nil, false
	}
	return o.GuestPay, true
}

// HasGuestPay returns a boolean if a field has been set.
func (o *ReservationRateSummaryType) HasGuestPay() bool {
	if o != nil && !IsNil(o.GuestPay) {
		return true
	}

	return false
}

// SetGuestPay gets a reference to the given float32 and assigns it to the GuestPay field.
func (o *ReservationRateSummaryType) SetGuestPay(v float32) {
	o.GuestPay = &v
}

// GetHasSuppressedRate returns the HasSuppressedRate field value if set, zero value otherwise.
func (o *ReservationRateSummaryType) GetHasSuppressedRate() bool {
	if o == nil || IsNil(o.HasSuppressedRate) {
		var ret bool
		return ret
	}
	return *o.HasSuppressedRate
}

// GetHasSuppressedRateOk returns a tuple with the HasSuppressedRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRateSummaryType) GetHasSuppressedRateOk() (*bool, bool) {
	if o == nil || IsNil(o.HasSuppressedRate) {
		return nil, false
	}
	return o.HasSuppressedRate, true
}

// HasHasSuppressedRate returns a boolean if a field has been set.
func (o *ReservationRateSummaryType) HasHasSuppressedRate() bool {
	if o != nil && !IsNil(o.HasSuppressedRate) {
		return true
	}

	return false
}

// SetHasSuppressedRate gets a reference to the given bool and assigns it to the HasSuppressedRate field.
func (o *ReservationRateSummaryType) SetHasSuppressedRate(v bool) {
	o.HasSuppressedRate = &v
}

// GetNet returns the Net field value if set, zero value otherwise.
func (o *ReservationRateSummaryType) GetNet() float32 {
	if o == nil || IsNil(o.Net) {
		var ret float32
		return ret
	}
	return *o.Net
}

// GetNetOk returns a tuple with the Net field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRateSummaryType) GetNetOk() (*float32, bool) {
	if o == nil || IsNil(o.Net) {
		return nil, false
	}
	return o.Net, true
}

// HasNet returns a boolean if a field has been set.
func (o *ReservationRateSummaryType) HasNet() bool {
	if o != nil && !IsNil(o.Net) {
		return true
	}

	return false
}

// SetNet gets a reference to the given float32 and assigns it to the Net field.
func (o *ReservationRateSummaryType) SetNet(v float32) {
	o.Net = &v
}

// GetOutStandingCostOfStay returns the OutStandingCostOfStay field value if set, zero value otherwise.
func (o *ReservationRateSummaryType) GetOutStandingCostOfStay() float32 {
	if o == nil || IsNil(o.OutStandingCostOfStay) {
		var ret float32
		return ret
	}
	return *o.OutStandingCostOfStay
}

// GetOutStandingCostOfStayOk returns a tuple with the OutStandingCostOfStay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRateSummaryType) GetOutStandingCostOfStayOk() (*float32, bool) {
	if o == nil || IsNil(o.OutStandingCostOfStay) {
		return nil, false
	}
	return o.OutStandingCostOfStay, true
}

// HasOutStandingCostOfStay returns a boolean if a field has been set.
func (o *ReservationRateSummaryType) HasOutStandingCostOfStay() bool {
	if o != nil && !IsNil(o.OutStandingCostOfStay) {
		return true
	}

	return false
}

// SetOutStandingCostOfStay gets a reference to the given float32 and assigns it to the OutStandingCostOfStay field.
func (o *ReservationRateSummaryType) SetOutStandingCostOfStay(v float32) {
	o.OutStandingCostOfStay = &v
}

// GetRouting returns the Routing field value if set, zero value otherwise.
func (o *ReservationRateSummaryType) GetRouting() float32 {
	if o == nil || IsNil(o.Routing) {
		var ret float32
		return ret
	}
	return *o.Routing
}

// GetRoutingOk returns a tuple with the Routing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRateSummaryType) GetRoutingOk() (*float32, bool) {
	if o == nil || IsNil(o.Routing) {
		return nil, false
	}
	return o.Routing, true
}

// HasRouting returns a boolean if a field has been set.
func (o *ReservationRateSummaryType) HasRouting() bool {
	if o != nil && !IsNil(o.Routing) {
		return true
	}

	return false
}

// SetRouting gets a reference to the given float32 and assigns it to the Routing field.
func (o *ReservationRateSummaryType) SetRouting(v float32) {
	o.Routing = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *ReservationRateSummaryType) GetStart() string {
	if o == nil || IsNil(o.Start) {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRateSummaryType) GetStartOk() (*string, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *ReservationRateSummaryType) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *ReservationRateSummaryType) SetStart(v string) {
	o.Start = &v
}

// GetTotalCostOfStay returns the TotalCostOfStay field value if set, zero value otherwise.
func (o *ReservationRateSummaryType) GetTotalCostOfStay() float32 {
	if o == nil || IsNil(o.TotalCostOfStay) {
		var ret float32
		return ret
	}
	return *o.TotalCostOfStay
}

// GetTotalCostOfStayOk returns a tuple with the TotalCostOfStay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRateSummaryType) GetTotalCostOfStayOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalCostOfStay) {
		return nil, false
	}
	return o.TotalCostOfStay, true
}

// HasTotalCostOfStay returns a boolean if a field has been set.
func (o *ReservationRateSummaryType) HasTotalCostOfStay() bool {
	if o != nil && !IsNil(o.TotalCostOfStay) {
		return true
	}

	return false
}

// SetTotalCostOfStay gets a reference to the given float32 and assigns it to the TotalCostOfStay field.
func (o *ReservationRateSummaryType) SetTotalCostOfStay(v float32) {
	o.TotalCostOfStay = &v
}

func (o ReservationRateSummaryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReservationRateSummaryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.Deposit) {
		toSerialize["deposit"] = o.Deposit
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.FixedCharges) {
		toSerialize["fixedCharges"] = o.FixedCharges
	}
	if !IsNil(o.Gross) {
		toSerialize["gross"] = o.Gross
	}
	if !IsNil(o.GuestPay) {
		toSerialize["guestPay"] = o.GuestPay
	}
	if !IsNil(o.HasSuppressedRate) {
		toSerialize["hasSuppressedRate"] = o.HasSuppressedRate
	}
	if !IsNil(o.Net) {
		toSerialize["net"] = o.Net
	}
	if !IsNil(o.OutStandingCostOfStay) {
		toSerialize["outStandingCostOfStay"] = o.OutStandingCostOfStay
	}
	if !IsNil(o.Routing) {
		toSerialize["routing"] = o.Routing
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.TotalCostOfStay) {
		toSerialize["totalCostOfStay"] = o.TotalCostOfStay
	}
	return toSerialize, nil
}

type NullableReservationRateSummaryType struct {
	value *ReservationRateSummaryType
	isSet bool
}

func (v NullableReservationRateSummaryType) Get() *ReservationRateSummaryType {
	return v.value
}

func (v *NullableReservationRateSummaryType) Set(val *ReservationRateSummaryType) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationRateSummaryType) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationRateSummaryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationRateSummaryType(val *ReservationRateSummaryType) *NullableReservationRateSummaryType {
	return &NullableReservationRateSummaryType{value: val, isSet: true}
}

func (v NullableReservationRateSummaryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationRateSummaryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


