/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ReservationCommissionInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReservationCommissionInfoType{}

// ReservationCommissionInfoType struct for ReservationCommissionInfoType
type ReservationCommissionInfoType struct {
	CommissionsPaid *bool `json:"commissionsPaid,omitempty"`
	CommissionNotesAvailable *bool `json:"commissionNotesAvailable,omitempty"`
}

// NewReservationCommissionInfoType instantiates a new ReservationCommissionInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservationCommissionInfoType() *ReservationCommissionInfoType {
	this := ReservationCommissionInfoType{}
	return &this
}

// NewReservationCommissionInfoTypeWithDefaults instantiates a new ReservationCommissionInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservationCommissionInfoTypeWithDefaults() *ReservationCommissionInfoType {
	this := ReservationCommissionInfoType{}
	return &this
}

// GetCommissionsPaid returns the CommissionsPaid field value if set, zero value otherwise.
func (o *ReservationCommissionInfoType) GetCommissionsPaid() bool {
	if o == nil || IsNil(o.CommissionsPaid) {
		var ret bool
		return ret
	}
	return *o.CommissionsPaid
}

// GetCommissionsPaidOk returns a tuple with the CommissionsPaid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationCommissionInfoType) GetCommissionsPaidOk() (*bool, bool) {
	if o == nil || IsNil(o.CommissionsPaid) {
		return nil, false
	}
	return o.CommissionsPaid, true
}

// HasCommissionsPaid returns a boolean if a field has been set.
func (o *ReservationCommissionInfoType) HasCommissionsPaid() bool {
	if o != nil && !IsNil(o.CommissionsPaid) {
		return true
	}

	return false
}

// SetCommissionsPaid gets a reference to the given bool and assigns it to the CommissionsPaid field.
func (o *ReservationCommissionInfoType) SetCommissionsPaid(v bool) {
	o.CommissionsPaid = &v
}

// GetCommissionNotesAvailable returns the CommissionNotesAvailable field value if set, zero value otherwise.
func (o *ReservationCommissionInfoType) GetCommissionNotesAvailable() bool {
	if o == nil || IsNil(o.CommissionNotesAvailable) {
		var ret bool
		return ret
	}
	return *o.CommissionNotesAvailable
}

// GetCommissionNotesAvailableOk returns a tuple with the CommissionNotesAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationCommissionInfoType) GetCommissionNotesAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.CommissionNotesAvailable) {
		return nil, false
	}
	return o.CommissionNotesAvailable, true
}

// HasCommissionNotesAvailable returns a boolean if a field has been set.
func (o *ReservationCommissionInfoType) HasCommissionNotesAvailable() bool {
	if o != nil && !IsNil(o.CommissionNotesAvailable) {
		return true
	}

	return false
}

// SetCommissionNotesAvailable gets a reference to the given bool and assigns it to the CommissionNotesAvailable field.
func (o *ReservationCommissionInfoType) SetCommissionNotesAvailable(v bool) {
	o.CommissionNotesAvailable = &v
}

func (o ReservationCommissionInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReservationCommissionInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommissionsPaid) {
		toSerialize["commissionsPaid"] = o.CommissionsPaid
	}
	if !IsNil(o.CommissionNotesAvailable) {
		toSerialize["commissionNotesAvailable"] = o.CommissionNotesAvailable
	}
	return toSerialize, nil
}

type NullableReservationCommissionInfoType struct {
	value *ReservationCommissionInfoType
	isSet bool
}

func (v NullableReservationCommissionInfoType) Get() *ReservationCommissionInfoType {
	return v.value
}

func (v *NullableReservationCommissionInfoType) Set(val *ReservationCommissionInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationCommissionInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationCommissionInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationCommissionInfoType(val *ReservationCommissionInfoType) *NullableReservationCommissionInfoType {
	return &NullableReservationCommissionInfoType{value: val, isSet: true}
}

func (v NullableReservationCommissionInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationCommissionInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


