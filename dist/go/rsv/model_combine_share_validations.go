/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the CombineShareValidations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CombineShareValidations{}

// CombineShareValidations Request to validate a combine share operation. This would be done prior to the actual Combine Share operation. Based on the validations returned from this request, the appropriate values can be returned to the Combine Share operation request.
type CombineShareValidations struct {
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	HotelId *string `json:"hotelId,omitempty"`
	ShareToReservationId *UniqueIDType `json:"shareToReservationId,omitempty"`
	ExistingReservationId *UniqueIDType `json:"existingReservationId,omitempty"`
	NewReservation *CombineShareFromProfileType `json:"newReservation,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewCombineShareValidations instantiates a new CombineShareValidations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCombineShareValidations() *CombineShareValidations {
	this := CombineShareValidations{}
	return &this
}

// NewCombineShareValidationsWithDefaults instantiates a new CombineShareValidations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCombineShareValidationsWithDefaults() *CombineShareValidations {
	this := CombineShareValidations{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CombineShareValidations) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareValidations) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CombineShareValidations) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CombineShareValidations) SetHotelId(v string) {
	o.HotelId = &v
}

// GetShareToReservationId returns the ShareToReservationId field value if set, zero value otherwise.
func (o *CombineShareValidations) GetShareToReservationId() UniqueIDType {
	if o == nil || IsNil(o.ShareToReservationId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ShareToReservationId
}

// GetShareToReservationIdOk returns a tuple with the ShareToReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareValidations) GetShareToReservationIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ShareToReservationId) {
		return nil, false
	}
	return o.ShareToReservationId, true
}

// HasShareToReservationId returns a boolean if a field has been set.
func (o *CombineShareValidations) HasShareToReservationId() bool {
	if o != nil && !IsNil(o.ShareToReservationId) {
		return true
	}

	return false
}

// SetShareToReservationId gets a reference to the given UniqueIDType and assigns it to the ShareToReservationId field.
func (o *CombineShareValidations) SetShareToReservationId(v UniqueIDType) {
	o.ShareToReservationId = &v
}

// GetExistingReservationId returns the ExistingReservationId field value if set, zero value otherwise.
func (o *CombineShareValidations) GetExistingReservationId() UniqueIDType {
	if o == nil || IsNil(o.ExistingReservationId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ExistingReservationId
}

// GetExistingReservationIdOk returns a tuple with the ExistingReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareValidations) GetExistingReservationIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ExistingReservationId) {
		return nil, false
	}
	return o.ExistingReservationId, true
}

// HasExistingReservationId returns a boolean if a field has been set.
func (o *CombineShareValidations) HasExistingReservationId() bool {
	if o != nil && !IsNil(o.ExistingReservationId) {
		return true
	}

	return false
}

// SetExistingReservationId gets a reference to the given UniqueIDType and assigns it to the ExistingReservationId field.
func (o *CombineShareValidations) SetExistingReservationId(v UniqueIDType) {
	o.ExistingReservationId = &v
}

// GetNewReservation returns the NewReservation field value if set, zero value otherwise.
func (o *CombineShareValidations) GetNewReservation() CombineShareFromProfileType {
	if o == nil || IsNil(o.NewReservation) {
		var ret CombineShareFromProfileType
		return ret
	}
	return *o.NewReservation
}

// GetNewReservationOk returns a tuple with the NewReservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareValidations) GetNewReservationOk() (*CombineShareFromProfileType, bool) {
	if o == nil || IsNil(o.NewReservation) {
		return nil, false
	}
	return o.NewReservation, true
}

// HasNewReservation returns a boolean if a field has been set.
func (o *CombineShareValidations) HasNewReservation() bool {
	if o != nil && !IsNil(o.NewReservation) {
		return true
	}

	return false
}

// SetNewReservation gets a reference to the given CombineShareFromProfileType and assigns it to the NewReservation field.
func (o *CombineShareValidations) SetNewReservation(v CombineShareFromProfileType) {
	o.NewReservation = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *CombineShareValidations) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareValidations) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *CombineShareValidations) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *CombineShareValidations) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *CombineShareValidations) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareValidations) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *CombineShareValidations) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *CombineShareValidations) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o CombineShareValidations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CombineShareValidations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ShareToReservationId) {
		toSerialize["shareToReservationId"] = o.ShareToReservationId
	}
	if !IsNil(o.ExistingReservationId) {
		toSerialize["existingReservationId"] = o.ExistingReservationId
	}
	if !IsNil(o.NewReservation) {
		toSerialize["newReservation"] = o.NewReservation
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableCombineShareValidations struct {
	value *CombineShareValidations
	isSet bool
}

func (v NullableCombineShareValidations) Get() *CombineShareValidations {
	return v.value
}

func (v *NullableCombineShareValidations) Set(val *CombineShareValidations) {
	v.value = val
	v.isSet = true
}

func (v NullableCombineShareValidations) IsSet() bool {
	return v.isSet
}

func (v *NullableCombineShareValidations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCombineShareValidations(val *CombineShareValidations) *NullableCombineShareValidations {
	return &NullableCombineShareValidations{value: val, isSet: true}
}

func (v NullableCombineShareValidations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCombineShareValidations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


