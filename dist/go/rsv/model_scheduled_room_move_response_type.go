/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ScheduledRoomMoveResponseType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduledRoomMoveResponseType{}

// ScheduledRoomMoveResponseType Scheduled Room Move information.
type ScheduledRoomMoveResponseType struct {
	// Comments about scheduled move.
	MoveComments *string `json:"moveComments,omitempty"`
	MoveInRoomOccupancyInfo *RoomOccupancyType `json:"moveInRoomOccupancyInfo,omitempty"`
	// Estimated Move Time in 24Hour Format
	EstimatedMoveTime *string `json:"estimatedMoveTime,omitempty"`
}

// NewScheduledRoomMoveResponseType instantiates a new ScheduledRoomMoveResponseType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduledRoomMoveResponseType() *ScheduledRoomMoveResponseType {
	this := ScheduledRoomMoveResponseType{}
	return &this
}

// NewScheduledRoomMoveResponseTypeWithDefaults instantiates a new ScheduledRoomMoveResponseType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduledRoomMoveResponseTypeWithDefaults() *ScheduledRoomMoveResponseType {
	this := ScheduledRoomMoveResponseType{}
	return &this
}

// GetMoveComments returns the MoveComments field value if set, zero value otherwise.
func (o *ScheduledRoomMoveResponseType) GetMoveComments() string {
	if o == nil || IsNil(o.MoveComments) {
		var ret string
		return ret
	}
	return *o.MoveComments
}

// GetMoveCommentsOk returns a tuple with the MoveComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledRoomMoveResponseType) GetMoveCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.MoveComments) {
		return nil, false
	}
	return o.MoveComments, true
}

// HasMoveComments returns a boolean if a field has been set.
func (o *ScheduledRoomMoveResponseType) HasMoveComments() bool {
	if o != nil && !IsNil(o.MoveComments) {
		return true
	}

	return false
}

// SetMoveComments gets a reference to the given string and assigns it to the MoveComments field.
func (o *ScheduledRoomMoveResponseType) SetMoveComments(v string) {
	o.MoveComments = &v
}

// GetMoveInRoomOccupancyInfo returns the MoveInRoomOccupancyInfo field value if set, zero value otherwise.
func (o *ScheduledRoomMoveResponseType) GetMoveInRoomOccupancyInfo() RoomOccupancyType {
	if o == nil || IsNil(o.MoveInRoomOccupancyInfo) {
		var ret RoomOccupancyType
		return ret
	}
	return *o.MoveInRoomOccupancyInfo
}

// GetMoveInRoomOccupancyInfoOk returns a tuple with the MoveInRoomOccupancyInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledRoomMoveResponseType) GetMoveInRoomOccupancyInfoOk() (*RoomOccupancyType, bool) {
	if o == nil || IsNil(o.MoveInRoomOccupancyInfo) {
		return nil, false
	}
	return o.MoveInRoomOccupancyInfo, true
}

// HasMoveInRoomOccupancyInfo returns a boolean if a field has been set.
func (o *ScheduledRoomMoveResponseType) HasMoveInRoomOccupancyInfo() bool {
	if o != nil && !IsNil(o.MoveInRoomOccupancyInfo) {
		return true
	}

	return false
}

// SetMoveInRoomOccupancyInfo gets a reference to the given RoomOccupancyType and assigns it to the MoveInRoomOccupancyInfo field.
func (o *ScheduledRoomMoveResponseType) SetMoveInRoomOccupancyInfo(v RoomOccupancyType) {
	o.MoveInRoomOccupancyInfo = &v
}

// GetEstimatedMoveTime returns the EstimatedMoveTime field value if set, zero value otherwise.
func (o *ScheduledRoomMoveResponseType) GetEstimatedMoveTime() string {
	if o == nil || IsNil(o.EstimatedMoveTime) {
		var ret string
		return ret
	}
	return *o.EstimatedMoveTime
}

// GetEstimatedMoveTimeOk returns a tuple with the EstimatedMoveTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledRoomMoveResponseType) GetEstimatedMoveTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EstimatedMoveTime) {
		return nil, false
	}
	return o.EstimatedMoveTime, true
}

// HasEstimatedMoveTime returns a boolean if a field has been set.
func (o *ScheduledRoomMoveResponseType) HasEstimatedMoveTime() bool {
	if o != nil && !IsNil(o.EstimatedMoveTime) {
		return true
	}

	return false
}

// SetEstimatedMoveTime gets a reference to the given string and assigns it to the EstimatedMoveTime field.
func (o *ScheduledRoomMoveResponseType) SetEstimatedMoveTime(v string) {
	o.EstimatedMoveTime = &v
}

func (o ScheduledRoomMoveResponseType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduledRoomMoveResponseType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MoveComments) {
		toSerialize["moveComments"] = o.MoveComments
	}
	if !IsNil(o.MoveInRoomOccupancyInfo) {
		toSerialize["moveInRoomOccupancyInfo"] = o.MoveInRoomOccupancyInfo
	}
	if !IsNil(o.EstimatedMoveTime) {
		toSerialize["estimatedMoveTime"] = o.EstimatedMoveTime
	}
	return toSerialize, nil
}

type NullableScheduledRoomMoveResponseType struct {
	value *ScheduledRoomMoveResponseType
	isSet bool
}

func (v NullableScheduledRoomMoveResponseType) Get() *ScheduledRoomMoveResponseType {
	return v.value
}

func (v *NullableScheduledRoomMoveResponseType) Set(val *ScheduledRoomMoveResponseType) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduledRoomMoveResponseType) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduledRoomMoveResponseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduledRoomMoveResponseType(val *ScheduledRoomMoveResponseType) *NullableScheduledRoomMoveResponseType {
	return &NullableScheduledRoomMoveResponseType{value: val, isSet: true}
}

func (v NullableScheduledRoomMoveResponseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduledRoomMoveResponseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


