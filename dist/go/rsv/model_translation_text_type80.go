/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the TranslationTextType80 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TranslationTextType80{}

// TranslationTextType80 Contains Multiple translated texts and language codes.
type TranslationTextType80 struct {
	// Default text with Character length from 0 to 80.
	DefaultText *string `json:"defaultText,omitempty"`
	// Language code for the translation.
	TranslatedTexts []TranslationsTextTypeInner `json:"translatedTexts,omitempty"`
}

// NewTranslationTextType80 instantiates a new TranslationTextType80 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranslationTextType80() *TranslationTextType80 {
	this := TranslationTextType80{}
	return &this
}

// NewTranslationTextType80WithDefaults instantiates a new TranslationTextType80 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranslationTextType80WithDefaults() *TranslationTextType80 {
	this := TranslationTextType80{}
	return &this
}

// GetDefaultText returns the DefaultText field value if set, zero value otherwise.
func (o *TranslationTextType80) GetDefaultText() string {
	if o == nil || IsNil(o.DefaultText) {
		var ret string
		return ret
	}
	return *o.DefaultText
}

// GetDefaultTextOk returns a tuple with the DefaultText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslationTextType80) GetDefaultTextOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultText) {
		return nil, false
	}
	return o.DefaultText, true
}

// HasDefaultText returns a boolean if a field has been set.
func (o *TranslationTextType80) HasDefaultText() bool {
	if o != nil && !IsNil(o.DefaultText) {
		return true
	}

	return false
}

// SetDefaultText gets a reference to the given string and assigns it to the DefaultText field.
func (o *TranslationTextType80) SetDefaultText(v string) {
	o.DefaultText = &v
}

// GetTranslatedTexts returns the TranslatedTexts field value if set, zero value otherwise.
func (o *TranslationTextType80) GetTranslatedTexts() []TranslationsTextTypeInner {
	if o == nil || IsNil(o.TranslatedTexts) {
		var ret []TranslationsTextTypeInner
		return ret
	}
	return o.TranslatedTexts
}

// GetTranslatedTextsOk returns a tuple with the TranslatedTexts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslationTextType80) GetTranslatedTextsOk() ([]TranslationsTextTypeInner, bool) {
	if o == nil || IsNil(o.TranslatedTexts) {
		return nil, false
	}
	return o.TranslatedTexts, true
}

// HasTranslatedTexts returns a boolean if a field has been set.
func (o *TranslationTextType80) HasTranslatedTexts() bool {
	if o != nil && !IsNil(o.TranslatedTexts) {
		return true
	}

	return false
}

// SetTranslatedTexts gets a reference to the given []TranslationsTextTypeInner and assigns it to the TranslatedTexts field.
func (o *TranslationTextType80) SetTranslatedTexts(v []TranslationsTextTypeInner) {
	o.TranslatedTexts = v
}

func (o TranslationTextType80) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TranslationTextType80) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultText) {
		toSerialize["defaultText"] = o.DefaultText
	}
	if !IsNil(o.TranslatedTexts) {
		toSerialize["translatedTexts"] = o.TranslatedTexts
	}
	return toSerialize, nil
}

type NullableTranslationTextType80 struct {
	value *TranslationTextType80
	isSet bool
}

func (v NullableTranslationTextType80) Get() *TranslationTextType80 {
	return v.value
}

func (v *NullableTranslationTextType80) Set(val *TranslationTextType80) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslationTextType80) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslationTextType80) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslationTextType80(val *TranslationTextType80) *NullableTranslationTextType80 {
	return &NullableTranslationTextType80{value: val, isSet: true}
}

func (v NullableTranslationTextType80) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslationTextType80) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


