/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ExtendReservationLockDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtendReservationLockDetails{}

// ExtendReservationLockDetails This response will indicate whether or not the extension was successful. This operation may return errors when the lock being requested to be extended no longer exists. This can happen when the lock has already expired and cleaned up.
type ExtendReservationLockDetails struct {
	ReservationLock *OperaRecordLock `json:"reservationLock,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewExtendReservationLockDetails instantiates a new ExtendReservationLockDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtendReservationLockDetails() *ExtendReservationLockDetails {
	this := ExtendReservationLockDetails{}
	return &this
}

// NewExtendReservationLockDetailsWithDefaults instantiates a new ExtendReservationLockDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtendReservationLockDetailsWithDefaults() *ExtendReservationLockDetails {
	this := ExtendReservationLockDetails{}
	return &this
}

// GetReservationLock returns the ReservationLock field value if set, zero value otherwise.
func (o *ExtendReservationLockDetails) GetReservationLock() OperaRecordLock {
	if o == nil || IsNil(o.ReservationLock) {
		var ret OperaRecordLock
		return ret
	}
	return *o.ReservationLock
}

// GetReservationLockOk returns a tuple with the ReservationLock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendReservationLockDetails) GetReservationLockOk() (*OperaRecordLock, bool) {
	if o == nil || IsNil(o.ReservationLock) {
		return nil, false
	}
	return o.ReservationLock, true
}

// HasReservationLock returns a boolean if a field has been set.
func (o *ExtendReservationLockDetails) HasReservationLock() bool {
	if o != nil && !IsNil(o.ReservationLock) {
		return true
	}

	return false
}

// SetReservationLock gets a reference to the given OperaRecordLock and assigns it to the ReservationLock field.
func (o *ExtendReservationLockDetails) SetReservationLock(v OperaRecordLock) {
	o.ReservationLock = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ExtendReservationLockDetails) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendReservationLockDetails) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ExtendReservationLockDetails) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *ExtendReservationLockDetails) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ExtendReservationLockDetails) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendReservationLockDetails) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ExtendReservationLockDetails) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ExtendReservationLockDetails) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ExtendReservationLockDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtendReservationLockDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReservationLock) {
		toSerialize["reservationLock"] = o.ReservationLock
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableExtendReservationLockDetails struct {
	value *ExtendReservationLockDetails
	isSet bool
}

func (v NullableExtendReservationLockDetails) Get() *ExtendReservationLockDetails {
	return v.value
}

func (v *NullableExtendReservationLockDetails) Set(val *ExtendReservationLockDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableExtendReservationLockDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableExtendReservationLockDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtendReservationLockDetails(val *ExtendReservationLockDetails) *NullableExtendReservationLockDetails {
	return &NullableExtendReservationLockDetails{value: val, isSet: true}
}

func (v NullableExtendReservationLockDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtendReservationLockDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


