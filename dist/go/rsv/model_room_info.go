/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the RoomInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomInfo{}

// RoomInfo Room details
type RoomInfo struct {
	// Component Room Number.
	ComponentRoomNumber *string `json:"componentRoomNumber,omitempty"`
	// Component Suite Room Numbers.
	ComponentSuiteRoomNumbers []string `json:"componentSuiteRoomNumbers,omitempty"`
	// Room number.
	ConnectingRooms []string `json:"connectingRooms,omitempty"`
	// Room Condition information if the room has an associated Room Condition.
	RoomCondition *string `json:"roomCondition,omitempty"`
	RoomStatus *HousekeepingRoomStatusType `json:"roomStatus,omitempty"`
	// Room Type of the Room.
	RoomType *string `json:"roomType,omitempty"`
}

// NewRoomInfo instantiates a new RoomInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomInfo() *RoomInfo {
	this := RoomInfo{}
	return &this
}

// NewRoomInfoWithDefaults instantiates a new RoomInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomInfoWithDefaults() *RoomInfo {
	this := RoomInfo{}
	return &this
}

// GetComponentRoomNumber returns the ComponentRoomNumber field value if set, zero value otherwise.
func (o *RoomInfo) GetComponentRoomNumber() string {
	if o == nil || IsNil(o.ComponentRoomNumber) {
		var ret string
		return ret
	}
	return *o.ComponentRoomNumber
}

// GetComponentRoomNumberOk returns a tuple with the ComponentRoomNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomInfo) GetComponentRoomNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentRoomNumber) {
		return nil, false
	}
	return o.ComponentRoomNumber, true
}

// HasComponentRoomNumber returns a boolean if a field has been set.
func (o *RoomInfo) HasComponentRoomNumber() bool {
	if o != nil && !IsNil(o.ComponentRoomNumber) {
		return true
	}

	return false
}

// SetComponentRoomNumber gets a reference to the given string and assigns it to the ComponentRoomNumber field.
func (o *RoomInfo) SetComponentRoomNumber(v string) {
	o.ComponentRoomNumber = &v
}

// GetComponentSuiteRoomNumbers returns the ComponentSuiteRoomNumbers field value if set, zero value otherwise.
func (o *RoomInfo) GetComponentSuiteRoomNumbers() []string {
	if o == nil || IsNil(o.ComponentSuiteRoomNumbers) {
		var ret []string
		return ret
	}
	return o.ComponentSuiteRoomNumbers
}

// GetComponentSuiteRoomNumbersOk returns a tuple with the ComponentSuiteRoomNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomInfo) GetComponentSuiteRoomNumbersOk() ([]string, bool) {
	if o == nil || IsNil(o.ComponentSuiteRoomNumbers) {
		return nil, false
	}
	return o.ComponentSuiteRoomNumbers, true
}

// HasComponentSuiteRoomNumbers returns a boolean if a field has been set.
func (o *RoomInfo) HasComponentSuiteRoomNumbers() bool {
	if o != nil && !IsNil(o.ComponentSuiteRoomNumbers) {
		return true
	}

	return false
}

// SetComponentSuiteRoomNumbers gets a reference to the given []string and assigns it to the ComponentSuiteRoomNumbers field.
func (o *RoomInfo) SetComponentSuiteRoomNumbers(v []string) {
	o.ComponentSuiteRoomNumbers = v
}

// GetConnectingRooms returns the ConnectingRooms field value if set, zero value otherwise.
func (o *RoomInfo) GetConnectingRooms() []string {
	if o == nil || IsNil(o.ConnectingRooms) {
		var ret []string
		return ret
	}
	return o.ConnectingRooms
}

// GetConnectingRoomsOk returns a tuple with the ConnectingRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomInfo) GetConnectingRoomsOk() ([]string, bool) {
	if o == nil || IsNil(o.ConnectingRooms) {
		return nil, false
	}
	return o.ConnectingRooms, true
}

// HasConnectingRooms returns a boolean if a field has been set.
func (o *RoomInfo) HasConnectingRooms() bool {
	if o != nil && !IsNil(o.ConnectingRooms) {
		return true
	}

	return false
}

// SetConnectingRooms gets a reference to the given []string and assigns it to the ConnectingRooms field.
func (o *RoomInfo) SetConnectingRooms(v []string) {
	o.ConnectingRooms = v
}

// GetRoomCondition returns the RoomCondition field value if set, zero value otherwise.
func (o *RoomInfo) GetRoomCondition() string {
	if o == nil || IsNil(o.RoomCondition) {
		var ret string
		return ret
	}
	return *o.RoomCondition
}

// GetRoomConditionOk returns a tuple with the RoomCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomInfo) GetRoomConditionOk() (*string, bool) {
	if o == nil || IsNil(o.RoomCondition) {
		return nil, false
	}
	return o.RoomCondition, true
}

// HasRoomCondition returns a boolean if a field has been set.
func (o *RoomInfo) HasRoomCondition() bool {
	if o != nil && !IsNil(o.RoomCondition) {
		return true
	}

	return false
}

// SetRoomCondition gets a reference to the given string and assigns it to the RoomCondition field.
func (o *RoomInfo) SetRoomCondition(v string) {
	o.RoomCondition = &v
}

// GetRoomStatus returns the RoomStatus field value if set, zero value otherwise.
func (o *RoomInfo) GetRoomStatus() HousekeepingRoomStatusType {
	if o == nil || IsNil(o.RoomStatus) {
		var ret HousekeepingRoomStatusType
		return ret
	}
	return *o.RoomStatus
}

// GetRoomStatusOk returns a tuple with the RoomStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomInfo) GetRoomStatusOk() (*HousekeepingRoomStatusType, bool) {
	if o == nil || IsNil(o.RoomStatus) {
		return nil, false
	}
	return o.RoomStatus, true
}

// HasRoomStatus returns a boolean if a field has been set.
func (o *RoomInfo) HasRoomStatus() bool {
	if o != nil && !IsNil(o.RoomStatus) {
		return true
	}

	return false
}

// SetRoomStatus gets a reference to the given HousekeepingRoomStatusType and assigns it to the RoomStatus field.
func (o *RoomInfo) SetRoomStatus(v HousekeepingRoomStatusType) {
	o.RoomStatus = &v
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *RoomInfo) GetRoomType() string {
	if o == nil || IsNil(o.RoomType) {
		var ret string
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomInfo) GetRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *RoomInfo) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given string and assigns it to the RoomType field.
func (o *RoomInfo) SetRoomType(v string) {
	o.RoomType = &v
}

func (o RoomInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ComponentRoomNumber) {
		toSerialize["componentRoomNumber"] = o.ComponentRoomNumber
	}
	if !IsNil(o.ComponentSuiteRoomNumbers) {
		toSerialize["componentSuiteRoomNumbers"] = o.ComponentSuiteRoomNumbers
	}
	if !IsNil(o.ConnectingRooms) {
		toSerialize["connectingRooms"] = o.ConnectingRooms
	}
	if !IsNil(o.RoomCondition) {
		toSerialize["roomCondition"] = o.RoomCondition
	}
	if !IsNil(o.RoomStatus) {
		toSerialize["roomStatus"] = o.RoomStatus
	}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	return toSerialize, nil
}

type NullableRoomInfo struct {
	value *RoomInfo
	isSet bool
}

func (v NullableRoomInfo) Get() *RoomInfo {
	return v.value
}

func (v *NullableRoomInfo) Set(val *RoomInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomInfo(val *RoomInfo) *NullableRoomInfo {
	return &NullableRoomInfo{value: val, isSet: true}
}

func (v NullableRoomInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


