/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the DeliveryHistoryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeliveryHistoryType{}

// DeliveryHistoryType struct for DeliveryHistoryType
type DeliveryHistoryType struct {
	// Time stamp of the creation.
	CreateDateTime *string `json:"createDateTime,omitempty"`
	// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
	CreatorId *string `json:"creatorId,omitempty"`
	// Delivery Date.
	DeliveryDate *string `json:"deliveryDate,omitempty"`
	DeliveryId *UniqueIDType `json:"deliveryId,omitempty"`
	DeliveryMethod *DeliveryMethodType `json:"deliveryMethod,omitempty"`
	DeliveryStatus *StatusType `json:"deliveryStatus,omitempty"`
	// The error Description Of Reservation Delivery status
	ErrorDescription *string `json:"errorDescription,omitempty"`
	// Hotel Code.
	HotelId *string `json:"hotelId,omitempty"`
	// Interface Id.
	InterfaceId *string `json:"interfaceId,omitempty"`
	// Identifies the last software system or person to modify a record.
	LastModifierId *string `json:"lastModifierId,omitempty"`
	// Time stamp of last modification.
	LastModifyDateTime *string `json:"lastModifyDateTime,omitempty"`
	// Date an item will be purged from a database (e.g., from a live database to an archive).
	PurgeDate *string `json:"purgeDate,omitempty"`
	ResvNameId *UniqueIDType `json:"resvNameId,omitempty"`
	// Retry Count
	RetryCount *int32 `json:"retryCount,omitempty"`
}

// NewDeliveryHistoryType instantiates a new DeliveryHistoryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeliveryHistoryType() *DeliveryHistoryType {
	this := DeliveryHistoryType{}
	return &this
}

// NewDeliveryHistoryTypeWithDefaults instantiates a new DeliveryHistoryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeliveryHistoryTypeWithDefaults() *DeliveryHistoryType {
	this := DeliveryHistoryType{}
	return &this
}

// GetCreateDateTime returns the CreateDateTime field value if set, zero value otherwise.
func (o *DeliveryHistoryType) GetCreateDateTime() string {
	if o == nil || IsNil(o.CreateDateTime) {
		var ret string
		return ret
	}
	return *o.CreateDateTime
}

// GetCreateDateTimeOk returns a tuple with the CreateDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryHistoryType) GetCreateDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreateDateTime) {
		return nil, false
	}
	return o.CreateDateTime, true
}

// HasCreateDateTime returns a boolean if a field has been set.
func (o *DeliveryHistoryType) HasCreateDateTime() bool {
	if o != nil && !IsNil(o.CreateDateTime) {
		return true
	}

	return false
}

// SetCreateDateTime gets a reference to the given string and assigns it to the CreateDateTime field.
func (o *DeliveryHistoryType) SetCreateDateTime(v string) {
	o.CreateDateTime = &v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise.
func (o *DeliveryHistoryType) GetCreatorId() string {
	if o == nil || IsNil(o.CreatorId) {
		var ret string
		return ret
	}
	return *o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryHistoryType) GetCreatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorId) {
		return nil, false
	}
	return o.CreatorId, true
}

// HasCreatorId returns a boolean if a field has been set.
func (o *DeliveryHistoryType) HasCreatorId() bool {
	if o != nil && !IsNil(o.CreatorId) {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given string and assigns it to the CreatorId field.
func (o *DeliveryHistoryType) SetCreatorId(v string) {
	o.CreatorId = &v
}

// GetDeliveryDate returns the DeliveryDate field value if set, zero value otherwise.
func (o *DeliveryHistoryType) GetDeliveryDate() string {
	if o == nil || IsNil(o.DeliveryDate) {
		var ret string
		return ret
	}
	return *o.DeliveryDate
}

// GetDeliveryDateOk returns a tuple with the DeliveryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryHistoryType) GetDeliveryDateOk() (*string, bool) {
	if o == nil || IsNil(o.DeliveryDate) {
		return nil, false
	}
	return o.DeliveryDate, true
}

// HasDeliveryDate returns a boolean if a field has been set.
func (o *DeliveryHistoryType) HasDeliveryDate() bool {
	if o != nil && !IsNil(o.DeliveryDate) {
		return true
	}

	return false
}

// SetDeliveryDate gets a reference to the given string and assigns it to the DeliveryDate field.
func (o *DeliveryHistoryType) SetDeliveryDate(v string) {
	o.DeliveryDate = &v
}

// GetDeliveryId returns the DeliveryId field value if set, zero value otherwise.
func (o *DeliveryHistoryType) GetDeliveryId() UniqueIDType {
	if o == nil || IsNil(o.DeliveryId) {
		var ret UniqueIDType
		return ret
	}
	return *o.DeliveryId
}

// GetDeliveryIdOk returns a tuple with the DeliveryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryHistoryType) GetDeliveryIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.DeliveryId) {
		return nil, false
	}
	return o.DeliveryId, true
}

// HasDeliveryId returns a boolean if a field has been set.
func (o *DeliveryHistoryType) HasDeliveryId() bool {
	if o != nil && !IsNil(o.DeliveryId) {
		return true
	}

	return false
}

// SetDeliveryId gets a reference to the given UniqueIDType and assigns it to the DeliveryId field.
func (o *DeliveryHistoryType) SetDeliveryId(v UniqueIDType) {
	o.DeliveryId = &v
}

// GetDeliveryMethod returns the DeliveryMethod field value if set, zero value otherwise.
func (o *DeliveryHistoryType) GetDeliveryMethod() DeliveryMethodType {
	if o == nil || IsNil(o.DeliveryMethod) {
		var ret DeliveryMethodType
		return ret
	}
	return *o.DeliveryMethod
}

// GetDeliveryMethodOk returns a tuple with the DeliveryMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryHistoryType) GetDeliveryMethodOk() (*DeliveryMethodType, bool) {
	if o == nil || IsNil(o.DeliveryMethod) {
		return nil, false
	}
	return o.DeliveryMethod, true
}

// HasDeliveryMethod returns a boolean if a field has been set.
func (o *DeliveryHistoryType) HasDeliveryMethod() bool {
	if o != nil && !IsNil(o.DeliveryMethod) {
		return true
	}

	return false
}

// SetDeliveryMethod gets a reference to the given DeliveryMethodType and assigns it to the DeliveryMethod field.
func (o *DeliveryHistoryType) SetDeliveryMethod(v DeliveryMethodType) {
	o.DeliveryMethod = &v
}

// GetDeliveryStatus returns the DeliveryStatus field value if set, zero value otherwise.
func (o *DeliveryHistoryType) GetDeliveryStatus() StatusType {
	if o == nil || IsNil(o.DeliveryStatus) {
		var ret StatusType
		return ret
	}
	return *o.DeliveryStatus
}

// GetDeliveryStatusOk returns a tuple with the DeliveryStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryHistoryType) GetDeliveryStatusOk() (*StatusType, bool) {
	if o == nil || IsNil(o.DeliveryStatus) {
		return nil, false
	}
	return o.DeliveryStatus, true
}

// HasDeliveryStatus returns a boolean if a field has been set.
func (o *DeliveryHistoryType) HasDeliveryStatus() bool {
	if o != nil && !IsNil(o.DeliveryStatus) {
		return true
	}

	return false
}

// SetDeliveryStatus gets a reference to the given StatusType and assigns it to the DeliveryStatus field.
func (o *DeliveryHistoryType) SetDeliveryStatus(v StatusType) {
	o.DeliveryStatus = &v
}

// GetErrorDescription returns the ErrorDescription field value if set, zero value otherwise.
func (o *DeliveryHistoryType) GetErrorDescription() string {
	if o == nil || IsNil(o.ErrorDescription) {
		var ret string
		return ret
	}
	return *o.ErrorDescription
}

// GetErrorDescriptionOk returns a tuple with the ErrorDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryHistoryType) GetErrorDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorDescription) {
		return nil, false
	}
	return o.ErrorDescription, true
}

// HasErrorDescription returns a boolean if a field has been set.
func (o *DeliveryHistoryType) HasErrorDescription() bool {
	if o != nil && !IsNil(o.ErrorDescription) {
		return true
	}

	return false
}

// SetErrorDescription gets a reference to the given string and assigns it to the ErrorDescription field.
func (o *DeliveryHistoryType) SetErrorDescription(v string) {
	o.ErrorDescription = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *DeliveryHistoryType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryHistoryType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *DeliveryHistoryType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *DeliveryHistoryType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetInterfaceId returns the InterfaceId field value if set, zero value otherwise.
func (o *DeliveryHistoryType) GetInterfaceId() string {
	if o == nil || IsNil(o.InterfaceId) {
		var ret string
		return ret
	}
	return *o.InterfaceId
}

// GetInterfaceIdOk returns a tuple with the InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryHistoryType) GetInterfaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceId) {
		return nil, false
	}
	return o.InterfaceId, true
}

// HasInterfaceId returns a boolean if a field has been set.
func (o *DeliveryHistoryType) HasInterfaceId() bool {
	if o != nil && !IsNil(o.InterfaceId) {
		return true
	}

	return false
}

// SetInterfaceId gets a reference to the given string and assigns it to the InterfaceId field.
func (o *DeliveryHistoryType) SetInterfaceId(v string) {
	o.InterfaceId = &v
}

// GetLastModifierId returns the LastModifierId field value if set, zero value otherwise.
func (o *DeliveryHistoryType) GetLastModifierId() string {
	if o == nil || IsNil(o.LastModifierId) {
		var ret string
		return ret
	}
	return *o.LastModifierId
}

// GetLastModifierIdOk returns a tuple with the LastModifierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryHistoryType) GetLastModifierIdOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifierId) {
		return nil, false
	}
	return o.LastModifierId, true
}

// HasLastModifierId returns a boolean if a field has been set.
func (o *DeliveryHistoryType) HasLastModifierId() bool {
	if o != nil && !IsNil(o.LastModifierId) {
		return true
	}

	return false
}

// SetLastModifierId gets a reference to the given string and assigns it to the LastModifierId field.
func (o *DeliveryHistoryType) SetLastModifierId(v string) {
	o.LastModifierId = &v
}

// GetLastModifyDateTime returns the LastModifyDateTime field value if set, zero value otherwise.
func (o *DeliveryHistoryType) GetLastModifyDateTime() string {
	if o == nil || IsNil(o.LastModifyDateTime) {
		var ret string
		return ret
	}
	return *o.LastModifyDateTime
}

// GetLastModifyDateTimeOk returns a tuple with the LastModifyDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryHistoryType) GetLastModifyDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifyDateTime) {
		return nil, false
	}
	return o.LastModifyDateTime, true
}

// HasLastModifyDateTime returns a boolean if a field has been set.
func (o *DeliveryHistoryType) HasLastModifyDateTime() bool {
	if o != nil && !IsNil(o.LastModifyDateTime) {
		return true
	}

	return false
}

// SetLastModifyDateTime gets a reference to the given string and assigns it to the LastModifyDateTime field.
func (o *DeliveryHistoryType) SetLastModifyDateTime(v string) {
	o.LastModifyDateTime = &v
}

// GetPurgeDate returns the PurgeDate field value if set, zero value otherwise.
func (o *DeliveryHistoryType) GetPurgeDate() string {
	if o == nil || IsNil(o.PurgeDate) {
		var ret string
		return ret
	}
	return *o.PurgeDate
}

// GetPurgeDateOk returns a tuple with the PurgeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryHistoryType) GetPurgeDateOk() (*string, bool) {
	if o == nil || IsNil(o.PurgeDate) {
		return nil, false
	}
	return o.PurgeDate, true
}

// HasPurgeDate returns a boolean if a field has been set.
func (o *DeliveryHistoryType) HasPurgeDate() bool {
	if o != nil && !IsNil(o.PurgeDate) {
		return true
	}

	return false
}

// SetPurgeDate gets a reference to the given string and assigns it to the PurgeDate field.
func (o *DeliveryHistoryType) SetPurgeDate(v string) {
	o.PurgeDate = &v
}

// GetResvNameId returns the ResvNameId field value if set, zero value otherwise.
func (o *DeliveryHistoryType) GetResvNameId() UniqueIDType {
	if o == nil || IsNil(o.ResvNameId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ResvNameId
}

// GetResvNameIdOk returns a tuple with the ResvNameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryHistoryType) GetResvNameIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ResvNameId) {
		return nil, false
	}
	return o.ResvNameId, true
}

// HasResvNameId returns a boolean if a field has been set.
func (o *DeliveryHistoryType) HasResvNameId() bool {
	if o != nil && !IsNil(o.ResvNameId) {
		return true
	}

	return false
}

// SetResvNameId gets a reference to the given UniqueIDType and assigns it to the ResvNameId field.
func (o *DeliveryHistoryType) SetResvNameId(v UniqueIDType) {
	o.ResvNameId = &v
}

// GetRetryCount returns the RetryCount field value if set, zero value otherwise.
func (o *DeliveryHistoryType) GetRetryCount() int32 {
	if o == nil || IsNil(o.RetryCount) {
		var ret int32
		return ret
	}
	return *o.RetryCount
}

// GetRetryCountOk returns a tuple with the RetryCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryHistoryType) GetRetryCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RetryCount) {
		return nil, false
	}
	return o.RetryCount, true
}

// HasRetryCount returns a boolean if a field has been set.
func (o *DeliveryHistoryType) HasRetryCount() bool {
	if o != nil && !IsNil(o.RetryCount) {
		return true
	}

	return false
}

// SetRetryCount gets a reference to the given int32 and assigns it to the RetryCount field.
func (o *DeliveryHistoryType) SetRetryCount(v int32) {
	o.RetryCount = &v
}

func (o DeliveryHistoryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeliveryHistoryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreateDateTime) {
		toSerialize["createDateTime"] = o.CreateDateTime
	}
	if !IsNil(o.CreatorId) {
		toSerialize["creatorId"] = o.CreatorId
	}
	if !IsNil(o.DeliveryDate) {
		toSerialize["deliveryDate"] = o.DeliveryDate
	}
	if !IsNil(o.DeliveryId) {
		toSerialize["deliveryId"] = o.DeliveryId
	}
	if !IsNil(o.DeliveryMethod) {
		toSerialize["deliveryMethod"] = o.DeliveryMethod
	}
	if !IsNil(o.DeliveryStatus) {
		toSerialize["deliveryStatus"] = o.DeliveryStatus
	}
	if !IsNil(o.ErrorDescription) {
		toSerialize["errorDescription"] = o.ErrorDescription
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.InterfaceId) {
		toSerialize["interfaceId"] = o.InterfaceId
	}
	if !IsNil(o.LastModifierId) {
		toSerialize["lastModifierId"] = o.LastModifierId
	}
	if !IsNil(o.LastModifyDateTime) {
		toSerialize["lastModifyDateTime"] = o.LastModifyDateTime
	}
	if !IsNil(o.PurgeDate) {
		toSerialize["purgeDate"] = o.PurgeDate
	}
	if !IsNil(o.ResvNameId) {
		toSerialize["resvNameId"] = o.ResvNameId
	}
	if !IsNil(o.RetryCount) {
		toSerialize["retryCount"] = o.RetryCount
	}
	return toSerialize, nil
}

type NullableDeliveryHistoryType struct {
	value *DeliveryHistoryType
	isSet bool
}

func (v NullableDeliveryHistoryType) Get() *DeliveryHistoryType {
	return v.value
}

func (v *NullableDeliveryHistoryType) Set(val *DeliveryHistoryType) {
	v.value = val
	v.isSet = true
}

func (v NullableDeliveryHistoryType) IsSet() bool {
	return v.isSet
}

func (v *NullableDeliveryHistoryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeliveryHistoryType(val *DeliveryHistoryType) *NullableDeliveryHistoryType {
	return &NullableDeliveryHistoryType{value: val, isSet: true}
}

func (v NullableDeliveryHistoryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeliveryHistoryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


