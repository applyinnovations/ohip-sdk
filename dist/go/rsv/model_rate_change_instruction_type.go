/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the RateChangeInstructionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateChangeInstructionType{}

// RateChangeInstructionType Defines override rate type.
type RateChangeInstructionType struct {
	Discount *DiscountType `json:"discount,omitempty"`
	RateChange *RateChangeType `json:"rateChange,omitempty"`
}

// NewRateChangeInstructionType instantiates a new RateChangeInstructionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateChangeInstructionType() *RateChangeInstructionType {
	this := RateChangeInstructionType{}
	return &this
}

// NewRateChangeInstructionTypeWithDefaults instantiates a new RateChangeInstructionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateChangeInstructionTypeWithDefaults() *RateChangeInstructionType {
	this := RateChangeInstructionType{}
	return &this
}

// GetDiscount returns the Discount field value if set, zero value otherwise.
func (o *RateChangeInstructionType) GetDiscount() DiscountType {
	if o == nil || IsNil(o.Discount) {
		var ret DiscountType
		return ret
	}
	return *o.Discount
}

// GetDiscountOk returns a tuple with the Discount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateChangeInstructionType) GetDiscountOk() (*DiscountType, bool) {
	if o == nil || IsNil(o.Discount) {
		return nil, false
	}
	return o.Discount, true
}

// HasDiscount returns a boolean if a field has been set.
func (o *RateChangeInstructionType) HasDiscount() bool {
	if o != nil && !IsNil(o.Discount) {
		return true
	}

	return false
}

// SetDiscount gets a reference to the given DiscountType and assigns it to the Discount field.
func (o *RateChangeInstructionType) SetDiscount(v DiscountType) {
	o.Discount = &v
}

// GetRateChange returns the RateChange field value if set, zero value otherwise.
func (o *RateChangeInstructionType) GetRateChange() RateChangeType {
	if o == nil || IsNil(o.RateChange) {
		var ret RateChangeType
		return ret
	}
	return *o.RateChange
}

// GetRateChangeOk returns a tuple with the RateChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateChangeInstructionType) GetRateChangeOk() (*RateChangeType, bool) {
	if o == nil || IsNil(o.RateChange) {
		return nil, false
	}
	return o.RateChange, true
}

// HasRateChange returns a boolean if a field has been set.
func (o *RateChangeInstructionType) HasRateChange() bool {
	if o != nil && !IsNil(o.RateChange) {
		return true
	}

	return false
}

// SetRateChange gets a reference to the given RateChangeType and assigns it to the RateChange field.
func (o *RateChangeInstructionType) SetRateChange(v RateChangeType) {
	o.RateChange = &v
}

func (o RateChangeInstructionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateChangeInstructionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Discount) {
		toSerialize["discount"] = o.Discount
	}
	if !IsNil(o.RateChange) {
		toSerialize["rateChange"] = o.RateChange
	}
	return toSerialize, nil
}

type NullableRateChangeInstructionType struct {
	value *RateChangeInstructionType
	isSet bool
}

func (v NullableRateChangeInstructionType) Get() *RateChangeInstructionType {
	return v.value
}

func (v *NullableRateChangeInstructionType) Set(val *RateChangeInstructionType) {
	v.value = val
	v.isSet = true
}

func (v NullableRateChangeInstructionType) IsSet() bool {
	return v.isSet
}

func (v *NullableRateChangeInstructionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateChangeInstructionType(val *RateChangeInstructionType) *NullableRateChangeInstructionType {
	return &NullableRateChangeInstructionType{value: val, isSet: true}
}

func (v NullableRateChangeInstructionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateChangeInstructionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


