/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the MembershipDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipDetails{}

// MembershipDetails Membership Details
type MembershipDetails struct {
	// Membership Internal ID.
	MembershipId *string `json:"membershipId,omitempty"`
	// Membership number.
	MembershipNumber *string `json:"membershipNumber,omitempty"`
	// Membership Type.
	MembershipType *string `json:"membershipType,omitempty"`
	// Membership Level.
	MembershipLevel *string `json:"membershipLevel,omitempty"`
	// Multiple Memberships.
	MultipleMemberships *bool `json:"multipleMemberships,omitempty"`
}

// NewMembershipDetails instantiates a new MembershipDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipDetails() *MembershipDetails {
	this := MembershipDetails{}
	return &this
}

// NewMembershipDetailsWithDefaults instantiates a new MembershipDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipDetailsWithDefaults() *MembershipDetails {
	this := MembershipDetails{}
	return &this
}

// GetMembershipId returns the MembershipId field value if set, zero value otherwise.
func (o *MembershipDetails) GetMembershipId() string {
	if o == nil || IsNil(o.MembershipId) {
		var ret string
		return ret
	}
	return *o.MembershipId
}

// GetMembershipIdOk returns a tuple with the MembershipId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipDetails) GetMembershipIdOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipId) {
		return nil, false
	}
	return o.MembershipId, true
}

// HasMembershipId returns a boolean if a field has been set.
func (o *MembershipDetails) HasMembershipId() bool {
	if o != nil && !IsNil(o.MembershipId) {
		return true
	}

	return false
}

// SetMembershipId gets a reference to the given string and assigns it to the MembershipId field.
func (o *MembershipDetails) SetMembershipId(v string) {
	o.MembershipId = &v
}

// GetMembershipNumber returns the MembershipNumber field value if set, zero value otherwise.
func (o *MembershipDetails) GetMembershipNumber() string {
	if o == nil || IsNil(o.MembershipNumber) {
		var ret string
		return ret
	}
	return *o.MembershipNumber
}

// GetMembershipNumberOk returns a tuple with the MembershipNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipDetails) GetMembershipNumberOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipNumber) {
		return nil, false
	}
	return o.MembershipNumber, true
}

// HasMembershipNumber returns a boolean if a field has been set.
func (o *MembershipDetails) HasMembershipNumber() bool {
	if o != nil && !IsNil(o.MembershipNumber) {
		return true
	}

	return false
}

// SetMembershipNumber gets a reference to the given string and assigns it to the MembershipNumber field.
func (o *MembershipDetails) SetMembershipNumber(v string) {
	o.MembershipNumber = &v
}

// GetMembershipType returns the MembershipType field value if set, zero value otherwise.
func (o *MembershipDetails) GetMembershipType() string {
	if o == nil || IsNil(o.MembershipType) {
		var ret string
		return ret
	}
	return *o.MembershipType
}

// GetMembershipTypeOk returns a tuple with the MembershipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipDetails) GetMembershipTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipType) {
		return nil, false
	}
	return o.MembershipType, true
}

// HasMembershipType returns a boolean if a field has been set.
func (o *MembershipDetails) HasMembershipType() bool {
	if o != nil && !IsNil(o.MembershipType) {
		return true
	}

	return false
}

// SetMembershipType gets a reference to the given string and assigns it to the MembershipType field.
func (o *MembershipDetails) SetMembershipType(v string) {
	o.MembershipType = &v
}

// GetMembershipLevel returns the MembershipLevel field value if set, zero value otherwise.
func (o *MembershipDetails) GetMembershipLevel() string {
	if o == nil || IsNil(o.MembershipLevel) {
		var ret string
		return ret
	}
	return *o.MembershipLevel
}

// GetMembershipLevelOk returns a tuple with the MembershipLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipDetails) GetMembershipLevelOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipLevel) {
		return nil, false
	}
	return o.MembershipLevel, true
}

// HasMembershipLevel returns a boolean if a field has been set.
func (o *MembershipDetails) HasMembershipLevel() bool {
	if o != nil && !IsNil(o.MembershipLevel) {
		return true
	}

	return false
}

// SetMembershipLevel gets a reference to the given string and assigns it to the MembershipLevel field.
func (o *MembershipDetails) SetMembershipLevel(v string) {
	o.MembershipLevel = &v
}

// GetMultipleMemberships returns the MultipleMemberships field value if set, zero value otherwise.
func (o *MembershipDetails) GetMultipleMemberships() bool {
	if o == nil || IsNil(o.MultipleMemberships) {
		var ret bool
		return ret
	}
	return *o.MultipleMemberships
}

// GetMultipleMembershipsOk returns a tuple with the MultipleMemberships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipDetails) GetMultipleMembershipsOk() (*bool, bool) {
	if o == nil || IsNil(o.MultipleMemberships) {
		return nil, false
	}
	return o.MultipleMemberships, true
}

// HasMultipleMemberships returns a boolean if a field has been set.
func (o *MembershipDetails) HasMultipleMemberships() bool {
	if o != nil && !IsNil(o.MultipleMemberships) {
		return true
	}

	return false
}

// SetMultipleMemberships gets a reference to the given bool and assigns it to the MultipleMemberships field.
func (o *MembershipDetails) SetMultipleMemberships(v bool) {
	o.MultipleMemberships = &v
}

func (o MembershipDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MembershipId) {
		toSerialize["membershipId"] = o.MembershipId
	}
	if !IsNil(o.MembershipNumber) {
		toSerialize["membershipNumber"] = o.MembershipNumber
	}
	if !IsNil(o.MembershipType) {
		toSerialize["membershipType"] = o.MembershipType
	}
	if !IsNil(o.MembershipLevel) {
		toSerialize["membershipLevel"] = o.MembershipLevel
	}
	if !IsNil(o.MultipleMemberships) {
		toSerialize["multipleMemberships"] = o.MultipleMemberships
	}
	return toSerialize, nil
}

type NullableMembershipDetails struct {
	value *MembershipDetails
	isSet bool
}

func (v NullableMembershipDetails) Get() *MembershipDetails {
	return v.value
}

func (v *NullableMembershipDetails) Set(val *MembershipDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipDetails(val *MembershipDetails) *NullableMembershipDetails {
	return &NullableMembershipDetails{value: val, isSet: true}
}

func (v NullableMembershipDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


