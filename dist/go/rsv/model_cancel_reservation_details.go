/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the CancelReservationDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancelReservationDetails{}

// CancelReservationDetails Response object for the request to cancel reservations. Response contains the reservations which were successfully canceled.
type CancelReservationDetails struct {
	// Cancellation information includes information regarding Reason, Date of Cancellation etc..
	CxlActivityLog []CancellationActivityType `json:"cxlActivityLog,omitempty"`
	// Defines room rate information on a daily basis.
	OldRates []DailyRateType `json:"oldRates,omitempty"`
	// Defines room rate information on a daily basis.
	NewRates []DailyRateType `json:"newRates,omitempty"`
	// Information regarding the reservation which was canceled.
	Reservations []CancelReservationType `json:"reservations,omitempty"`
	ChannelInformation *ChannelResvRSInfoType `json:"channelInformation,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewCancelReservationDetails instantiates a new CancelReservationDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelReservationDetails() *CancelReservationDetails {
	this := CancelReservationDetails{}
	return &this
}

// NewCancelReservationDetailsWithDefaults instantiates a new CancelReservationDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelReservationDetailsWithDefaults() *CancelReservationDetails {
	this := CancelReservationDetails{}
	return &this
}

// GetCxlActivityLog returns the CxlActivityLog field value if set, zero value otherwise.
func (o *CancelReservationDetails) GetCxlActivityLog() []CancellationActivityType {
	if o == nil || IsNil(o.CxlActivityLog) {
		var ret []CancellationActivityType
		return ret
	}
	return o.CxlActivityLog
}

// GetCxlActivityLogOk returns a tuple with the CxlActivityLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelReservationDetails) GetCxlActivityLogOk() ([]CancellationActivityType, bool) {
	if o == nil || IsNil(o.CxlActivityLog) {
		return nil, false
	}
	return o.CxlActivityLog, true
}

// HasCxlActivityLog returns a boolean if a field has been set.
func (o *CancelReservationDetails) HasCxlActivityLog() bool {
	if o != nil && !IsNil(o.CxlActivityLog) {
		return true
	}

	return false
}

// SetCxlActivityLog gets a reference to the given []CancellationActivityType and assigns it to the CxlActivityLog field.
func (o *CancelReservationDetails) SetCxlActivityLog(v []CancellationActivityType) {
	o.CxlActivityLog = v
}

// GetOldRates returns the OldRates field value if set, zero value otherwise.
func (o *CancelReservationDetails) GetOldRates() []DailyRateType {
	if o == nil || IsNil(o.OldRates) {
		var ret []DailyRateType
		return ret
	}
	return o.OldRates
}

// GetOldRatesOk returns a tuple with the OldRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelReservationDetails) GetOldRatesOk() ([]DailyRateType, bool) {
	if o == nil || IsNil(o.OldRates) {
		return nil, false
	}
	return o.OldRates, true
}

// HasOldRates returns a boolean if a field has been set.
func (o *CancelReservationDetails) HasOldRates() bool {
	if o != nil && !IsNil(o.OldRates) {
		return true
	}

	return false
}

// SetOldRates gets a reference to the given []DailyRateType and assigns it to the OldRates field.
func (o *CancelReservationDetails) SetOldRates(v []DailyRateType) {
	o.OldRates = v
}

// GetNewRates returns the NewRates field value if set, zero value otherwise.
func (o *CancelReservationDetails) GetNewRates() []DailyRateType {
	if o == nil || IsNil(o.NewRates) {
		var ret []DailyRateType
		return ret
	}
	return o.NewRates
}

// GetNewRatesOk returns a tuple with the NewRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelReservationDetails) GetNewRatesOk() ([]DailyRateType, bool) {
	if o == nil || IsNil(o.NewRates) {
		return nil, false
	}
	return o.NewRates, true
}

// HasNewRates returns a boolean if a field has been set.
func (o *CancelReservationDetails) HasNewRates() bool {
	if o != nil && !IsNil(o.NewRates) {
		return true
	}

	return false
}

// SetNewRates gets a reference to the given []DailyRateType and assigns it to the NewRates field.
func (o *CancelReservationDetails) SetNewRates(v []DailyRateType) {
	o.NewRates = v
}

// GetReservations returns the Reservations field value if set, zero value otherwise.
func (o *CancelReservationDetails) GetReservations() []CancelReservationType {
	if o == nil || IsNil(o.Reservations) {
		var ret []CancelReservationType
		return ret
	}
	return o.Reservations
}

// GetReservationsOk returns a tuple with the Reservations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelReservationDetails) GetReservationsOk() ([]CancelReservationType, bool) {
	if o == nil || IsNil(o.Reservations) {
		return nil, false
	}
	return o.Reservations, true
}

// HasReservations returns a boolean if a field has been set.
func (o *CancelReservationDetails) HasReservations() bool {
	if o != nil && !IsNil(o.Reservations) {
		return true
	}

	return false
}

// SetReservations gets a reference to the given []CancelReservationType and assigns it to the Reservations field.
func (o *CancelReservationDetails) SetReservations(v []CancelReservationType) {
	o.Reservations = v
}

// GetChannelInformation returns the ChannelInformation field value if set, zero value otherwise.
func (o *CancelReservationDetails) GetChannelInformation() ChannelResvRSInfoType {
	if o == nil || IsNil(o.ChannelInformation) {
		var ret ChannelResvRSInfoType
		return ret
	}
	return *o.ChannelInformation
}

// GetChannelInformationOk returns a tuple with the ChannelInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelReservationDetails) GetChannelInformationOk() (*ChannelResvRSInfoType, bool) {
	if o == nil || IsNil(o.ChannelInformation) {
		return nil, false
	}
	return o.ChannelInformation, true
}

// HasChannelInformation returns a boolean if a field has been set.
func (o *CancelReservationDetails) HasChannelInformation() bool {
	if o != nil && !IsNil(o.ChannelInformation) {
		return true
	}

	return false
}

// SetChannelInformation gets a reference to the given ChannelResvRSInfoType and assigns it to the ChannelInformation field.
func (o *CancelReservationDetails) SetChannelInformation(v ChannelResvRSInfoType) {
	o.ChannelInformation = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *CancelReservationDetails) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelReservationDetails) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *CancelReservationDetails) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *CancelReservationDetails) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *CancelReservationDetails) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelReservationDetails) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *CancelReservationDetails) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *CancelReservationDetails) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o CancelReservationDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancelReservationDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CxlActivityLog) {
		toSerialize["cxlActivityLog"] = o.CxlActivityLog
	}
	if !IsNil(o.OldRates) {
		toSerialize["oldRates"] = o.OldRates
	}
	if !IsNil(o.NewRates) {
		toSerialize["newRates"] = o.NewRates
	}
	if !IsNil(o.Reservations) {
		toSerialize["reservations"] = o.Reservations
	}
	if !IsNil(o.ChannelInformation) {
		toSerialize["channelInformation"] = o.ChannelInformation
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableCancelReservationDetails struct {
	value *CancelReservationDetails
	isSet bool
}

func (v NullableCancelReservationDetails) Get() *CancelReservationDetails {
	return v.value
}

func (v *NullableCancelReservationDetails) Set(val *CancelReservationDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelReservationDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelReservationDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelReservationDetails(val *CancelReservationDetails) *NullableCancelReservationDetails {
	return &NullableCancelReservationDetails{value: val, isSet: true}
}

func (v NullableCancelReservationDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelReservationDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


