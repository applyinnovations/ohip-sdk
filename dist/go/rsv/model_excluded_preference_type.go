/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ExcludedPreferenceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExcludedPreferenceType{}

// ExcludedPreferenceType List of excluded preferences for a particular preference.
type ExcludedPreferenceType struct {
	// Priority of the source system.
	Priority *int32 `json:"priority,omitempty"`
	Preference *CodeDescriptionType `json:"preference,omitempty"`
	// Source name of the preference.
	Source *string `json:"source,omitempty"`
}

// NewExcludedPreferenceType instantiates a new ExcludedPreferenceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExcludedPreferenceType() *ExcludedPreferenceType {
	this := ExcludedPreferenceType{}
	return &this
}

// NewExcludedPreferenceTypeWithDefaults instantiates a new ExcludedPreferenceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExcludedPreferenceTypeWithDefaults() *ExcludedPreferenceType {
	this := ExcludedPreferenceType{}
	return &this
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *ExcludedPreferenceType) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExcludedPreferenceType) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *ExcludedPreferenceType) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *ExcludedPreferenceType) SetPriority(v int32) {
	o.Priority = &v
}

// GetPreference returns the Preference field value if set, zero value otherwise.
func (o *ExcludedPreferenceType) GetPreference() CodeDescriptionType {
	if o == nil || IsNil(o.Preference) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.Preference
}

// GetPreferenceOk returns a tuple with the Preference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExcludedPreferenceType) GetPreferenceOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.Preference) {
		return nil, false
	}
	return o.Preference, true
}

// HasPreference returns a boolean if a field has been set.
func (o *ExcludedPreferenceType) HasPreference() bool {
	if o != nil && !IsNil(o.Preference) {
		return true
	}

	return false
}

// SetPreference gets a reference to the given CodeDescriptionType and assigns it to the Preference field.
func (o *ExcludedPreferenceType) SetPreference(v CodeDescriptionType) {
	o.Preference = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ExcludedPreferenceType) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExcludedPreferenceType) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ExcludedPreferenceType) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *ExcludedPreferenceType) SetSource(v string) {
	o.Source = &v
}

func (o ExcludedPreferenceType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExcludedPreferenceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Preference) {
		toSerialize["preference"] = o.Preference
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	return toSerialize, nil
}

type NullableExcludedPreferenceType struct {
	value *ExcludedPreferenceType
	isSet bool
}

func (v NullableExcludedPreferenceType) Get() *ExcludedPreferenceType {
	return v.value
}

func (v *NullableExcludedPreferenceType) Set(val *ExcludedPreferenceType) {
	v.value = val
	v.isSet = true
}

func (v NullableExcludedPreferenceType) IsSet() bool {
	return v.isSet
}

func (v *NullableExcludedPreferenceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExcludedPreferenceType(val *ExcludedPreferenceType) *NullableExcludedPreferenceType {
	return &NullableExcludedPreferenceType{value: val, isSet: true}
}

func (v NullableExcludedPreferenceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExcludedPreferenceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


