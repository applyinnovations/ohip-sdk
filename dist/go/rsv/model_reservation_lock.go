/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ReservationLock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReservationLock{}

// ReservationLock Operation for requesting a lock on a reservation.
type ReservationLock struct {
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	HotelId *string `json:"hotelId,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// An identifier representing the record lock for the reservation under process.When passed,then it will verify that if the lock is still valid and return same lock handle.Else it will create new lock.
	LockHandle *float32 `json:"lockHandle,omitempty"`
	// If true, the operation will try to break the existing lock if the requesting user is the same as the owner of the lock.
	OverrideIfLockedByRequestingUser *bool `json:"overrideIfLockedByRequestingUser,omitempty"`
	ReservationId *ReservationId `json:"reservationId,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewReservationLock instantiates a new ReservationLock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservationLock() *ReservationLock {
	this := ReservationLock{}
	return &this
}

// NewReservationLockWithDefaults instantiates a new ReservationLock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservationLockWithDefaults() *ReservationLock {
	this := ReservationLock{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ReservationLock) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationLock) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ReservationLock) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ReservationLock) SetHotelId(v string) {
	o.HotelId = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ReservationLock) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationLock) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ReservationLock) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *ReservationLock) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetLockHandle returns the LockHandle field value if set, zero value otherwise.
func (o *ReservationLock) GetLockHandle() float32 {
	if o == nil || IsNil(o.LockHandle) {
		var ret float32
		return ret
	}
	return *o.LockHandle
}

// GetLockHandleOk returns a tuple with the LockHandle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationLock) GetLockHandleOk() (*float32, bool) {
	if o == nil || IsNil(o.LockHandle) {
		return nil, false
	}
	return o.LockHandle, true
}

// HasLockHandle returns a boolean if a field has been set.
func (o *ReservationLock) HasLockHandle() bool {
	if o != nil && !IsNil(o.LockHandle) {
		return true
	}

	return false
}

// SetLockHandle gets a reference to the given float32 and assigns it to the LockHandle field.
func (o *ReservationLock) SetLockHandle(v float32) {
	o.LockHandle = &v
}

// GetOverrideIfLockedByRequestingUser returns the OverrideIfLockedByRequestingUser field value if set, zero value otherwise.
func (o *ReservationLock) GetOverrideIfLockedByRequestingUser() bool {
	if o == nil || IsNil(o.OverrideIfLockedByRequestingUser) {
		var ret bool
		return ret
	}
	return *o.OverrideIfLockedByRequestingUser
}

// GetOverrideIfLockedByRequestingUserOk returns a tuple with the OverrideIfLockedByRequestingUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationLock) GetOverrideIfLockedByRequestingUserOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideIfLockedByRequestingUser) {
		return nil, false
	}
	return o.OverrideIfLockedByRequestingUser, true
}

// HasOverrideIfLockedByRequestingUser returns a boolean if a field has been set.
func (o *ReservationLock) HasOverrideIfLockedByRequestingUser() bool {
	if o != nil && !IsNil(o.OverrideIfLockedByRequestingUser) {
		return true
	}

	return false
}

// SetOverrideIfLockedByRequestingUser gets a reference to the given bool and assigns it to the OverrideIfLockedByRequestingUser field.
func (o *ReservationLock) SetOverrideIfLockedByRequestingUser(v bool) {
	o.OverrideIfLockedByRequestingUser = &v
}

// GetReservationId returns the ReservationId field value if set, zero value otherwise.
func (o *ReservationLock) GetReservationId() ReservationId {
	if o == nil || IsNil(o.ReservationId) {
		var ret ReservationId
		return ret
	}
	return *o.ReservationId
}

// GetReservationIdOk returns a tuple with the ReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationLock) GetReservationIdOk() (*ReservationId, bool) {
	if o == nil || IsNil(o.ReservationId) {
		return nil, false
	}
	return o.ReservationId, true
}

// HasReservationId returns a boolean if a field has been set.
func (o *ReservationLock) HasReservationId() bool {
	if o != nil && !IsNil(o.ReservationId) {
		return true
	}

	return false
}

// SetReservationId gets a reference to the given ReservationId and assigns it to the ReservationId field.
func (o *ReservationLock) SetReservationId(v ReservationId) {
	o.ReservationId = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ReservationLock) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationLock) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ReservationLock) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ReservationLock) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ReservationLock) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReservationLock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.LockHandle) {
		toSerialize["lockHandle"] = o.LockHandle
	}
	if !IsNil(o.OverrideIfLockedByRequestingUser) {
		toSerialize["overrideIfLockedByRequestingUser"] = o.OverrideIfLockedByRequestingUser
	}
	if !IsNil(o.ReservationId) {
		toSerialize["reservationId"] = o.ReservationId
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableReservationLock struct {
	value *ReservationLock
	isSet bool
}

func (v NullableReservationLock) Get() *ReservationLock {
	return v.value
}

func (v *NullableReservationLock) Set(val *ReservationLock) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationLock) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationLock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationLock(val *ReservationLock) *NullableReservationLock {
	return &NullableReservationLock{value: val, isSet: true}
}

func (v NullableReservationLock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationLock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


