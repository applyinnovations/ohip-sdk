/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the AddOnReservationPackageType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddOnReservationPackageType{}

// AddOnReservationPackageType AddOn ReservationPackageType class.
type AddOnReservationPackageType struct {
	// A HotelPackageSchedule type.
	ScheduleList []ReservationPackageScheduleType `json:"scheduleList,omitempty"`
	ConsumptionDetails *PackageConsumptionType `json:"consumptionDetails,omitempty"`
	// Package code. This is the unique code used for the package and is a required element.
	PackageCode *string `json:"packageCode,omitempty"`
	// Reservation Package Opera Internal Unique Id. This is the unique Id used for this reservation package.
	InternalId *float32 `json:"internalId,omitempty"`
	// Package begin date.
	StartDate *string `json:"startDate,omitempty"`
	// Package End Date.
	EndDate *string `json:"endDate,omitempty"`
	// Package group code. Package group code is used to link multiple packages that are members of a group.
	PackageGroup *string `json:"packageGroup,omitempty"`
	Source *ProductSourceType `json:"source,omitempty"`
	// This is the Award code used to redeem the package if the package is a redemption package.
	AwardCode *string `json:"awardCode,omitempty"`
	// Indicates the points used to redeem the redemption package.
	Points *int32 `json:"points,omitempty"`
	CalculationRule *PackageCalculationRuleType `json:"calculationRule,omitempty"`
}

// NewAddOnReservationPackageType instantiates a new AddOnReservationPackageType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddOnReservationPackageType() *AddOnReservationPackageType {
	this := AddOnReservationPackageType{}
	return &this
}

// NewAddOnReservationPackageTypeWithDefaults instantiates a new AddOnReservationPackageType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddOnReservationPackageTypeWithDefaults() *AddOnReservationPackageType {
	this := AddOnReservationPackageType{}
	return &this
}

// GetScheduleList returns the ScheduleList field value if set, zero value otherwise.
func (o *AddOnReservationPackageType) GetScheduleList() []ReservationPackageScheduleType {
	if o == nil || IsNil(o.ScheduleList) {
		var ret []ReservationPackageScheduleType
		return ret
	}
	return o.ScheduleList
}

// GetScheduleListOk returns a tuple with the ScheduleList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOnReservationPackageType) GetScheduleListOk() ([]ReservationPackageScheduleType, bool) {
	if o == nil || IsNil(o.ScheduleList) {
		return nil, false
	}
	return o.ScheduleList, true
}

// HasScheduleList returns a boolean if a field has been set.
func (o *AddOnReservationPackageType) HasScheduleList() bool {
	if o != nil && !IsNil(o.ScheduleList) {
		return true
	}

	return false
}

// SetScheduleList gets a reference to the given []ReservationPackageScheduleType and assigns it to the ScheduleList field.
func (o *AddOnReservationPackageType) SetScheduleList(v []ReservationPackageScheduleType) {
	o.ScheduleList = v
}

// GetConsumptionDetails returns the ConsumptionDetails field value if set, zero value otherwise.
func (o *AddOnReservationPackageType) GetConsumptionDetails() PackageConsumptionType {
	if o == nil || IsNil(o.ConsumptionDetails) {
		var ret PackageConsumptionType
		return ret
	}
	return *o.ConsumptionDetails
}

// GetConsumptionDetailsOk returns a tuple with the ConsumptionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOnReservationPackageType) GetConsumptionDetailsOk() (*PackageConsumptionType, bool) {
	if o == nil || IsNil(o.ConsumptionDetails) {
		return nil, false
	}
	return o.ConsumptionDetails, true
}

// HasConsumptionDetails returns a boolean if a field has been set.
func (o *AddOnReservationPackageType) HasConsumptionDetails() bool {
	if o != nil && !IsNil(o.ConsumptionDetails) {
		return true
	}

	return false
}

// SetConsumptionDetails gets a reference to the given PackageConsumptionType and assigns it to the ConsumptionDetails field.
func (o *AddOnReservationPackageType) SetConsumptionDetails(v PackageConsumptionType) {
	o.ConsumptionDetails = &v
}

// GetPackageCode returns the PackageCode field value if set, zero value otherwise.
func (o *AddOnReservationPackageType) GetPackageCode() string {
	if o == nil || IsNil(o.PackageCode) {
		var ret string
		return ret
	}
	return *o.PackageCode
}

// GetPackageCodeOk returns a tuple with the PackageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOnReservationPackageType) GetPackageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PackageCode) {
		return nil, false
	}
	return o.PackageCode, true
}

// HasPackageCode returns a boolean if a field has been set.
func (o *AddOnReservationPackageType) HasPackageCode() bool {
	if o != nil && !IsNil(o.PackageCode) {
		return true
	}

	return false
}

// SetPackageCode gets a reference to the given string and assigns it to the PackageCode field.
func (o *AddOnReservationPackageType) SetPackageCode(v string) {
	o.PackageCode = &v
}

// GetInternalId returns the InternalId field value if set, zero value otherwise.
func (o *AddOnReservationPackageType) GetInternalId() float32 {
	if o == nil || IsNil(o.InternalId) {
		var ret float32
		return ret
	}
	return *o.InternalId
}

// GetInternalIdOk returns a tuple with the InternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOnReservationPackageType) GetInternalIdOk() (*float32, bool) {
	if o == nil || IsNil(o.InternalId) {
		return nil, false
	}
	return o.InternalId, true
}

// HasInternalId returns a boolean if a field has been set.
func (o *AddOnReservationPackageType) HasInternalId() bool {
	if o != nil && !IsNil(o.InternalId) {
		return true
	}

	return false
}

// SetInternalId gets a reference to the given float32 and assigns it to the InternalId field.
func (o *AddOnReservationPackageType) SetInternalId(v float32) {
	o.InternalId = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *AddOnReservationPackageType) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOnReservationPackageType) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *AddOnReservationPackageType) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *AddOnReservationPackageType) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *AddOnReservationPackageType) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOnReservationPackageType) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *AddOnReservationPackageType) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *AddOnReservationPackageType) SetEndDate(v string) {
	o.EndDate = &v
}

// GetPackageGroup returns the PackageGroup field value if set, zero value otherwise.
func (o *AddOnReservationPackageType) GetPackageGroup() string {
	if o == nil || IsNil(o.PackageGroup) {
		var ret string
		return ret
	}
	return *o.PackageGroup
}

// GetPackageGroupOk returns a tuple with the PackageGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOnReservationPackageType) GetPackageGroupOk() (*string, bool) {
	if o == nil || IsNil(o.PackageGroup) {
		return nil, false
	}
	return o.PackageGroup, true
}

// HasPackageGroup returns a boolean if a field has been set.
func (o *AddOnReservationPackageType) HasPackageGroup() bool {
	if o != nil && !IsNil(o.PackageGroup) {
		return true
	}

	return false
}

// SetPackageGroup gets a reference to the given string and assigns it to the PackageGroup field.
func (o *AddOnReservationPackageType) SetPackageGroup(v string) {
	o.PackageGroup = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *AddOnReservationPackageType) GetSource() ProductSourceType {
	if o == nil || IsNil(o.Source) {
		var ret ProductSourceType
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOnReservationPackageType) GetSourceOk() (*ProductSourceType, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *AddOnReservationPackageType) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given ProductSourceType and assigns it to the Source field.
func (o *AddOnReservationPackageType) SetSource(v ProductSourceType) {
	o.Source = &v
}

// GetAwardCode returns the AwardCode field value if set, zero value otherwise.
func (o *AddOnReservationPackageType) GetAwardCode() string {
	if o == nil || IsNil(o.AwardCode) {
		var ret string
		return ret
	}
	return *o.AwardCode
}

// GetAwardCodeOk returns a tuple with the AwardCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOnReservationPackageType) GetAwardCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AwardCode) {
		return nil, false
	}
	return o.AwardCode, true
}

// HasAwardCode returns a boolean if a field has been set.
func (o *AddOnReservationPackageType) HasAwardCode() bool {
	if o != nil && !IsNil(o.AwardCode) {
		return true
	}

	return false
}

// SetAwardCode gets a reference to the given string and assigns it to the AwardCode field.
func (o *AddOnReservationPackageType) SetAwardCode(v string) {
	o.AwardCode = &v
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *AddOnReservationPackageType) GetPoints() int32 {
	if o == nil || IsNil(o.Points) {
		var ret int32
		return ret
	}
	return *o.Points
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOnReservationPackageType) GetPointsOk() (*int32, bool) {
	if o == nil || IsNil(o.Points) {
		return nil, false
	}
	return o.Points, true
}

// HasPoints returns a boolean if a field has been set.
func (o *AddOnReservationPackageType) HasPoints() bool {
	if o != nil && !IsNil(o.Points) {
		return true
	}

	return false
}

// SetPoints gets a reference to the given int32 and assigns it to the Points field.
func (o *AddOnReservationPackageType) SetPoints(v int32) {
	o.Points = &v
}

// GetCalculationRule returns the CalculationRule field value if set, zero value otherwise.
func (o *AddOnReservationPackageType) GetCalculationRule() PackageCalculationRuleType {
	if o == nil || IsNil(o.CalculationRule) {
		var ret PackageCalculationRuleType
		return ret
	}
	return *o.CalculationRule
}

// GetCalculationRuleOk returns a tuple with the CalculationRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOnReservationPackageType) GetCalculationRuleOk() (*PackageCalculationRuleType, bool) {
	if o == nil || IsNil(o.CalculationRule) {
		return nil, false
	}
	return o.CalculationRule, true
}

// HasCalculationRule returns a boolean if a field has been set.
func (o *AddOnReservationPackageType) HasCalculationRule() bool {
	if o != nil && !IsNil(o.CalculationRule) {
		return true
	}

	return false
}

// SetCalculationRule gets a reference to the given PackageCalculationRuleType and assigns it to the CalculationRule field.
func (o *AddOnReservationPackageType) SetCalculationRule(v PackageCalculationRuleType) {
	o.CalculationRule = &v
}

func (o AddOnReservationPackageType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddOnReservationPackageType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ScheduleList) {
		toSerialize["scheduleList"] = o.ScheduleList
	}
	if !IsNil(o.ConsumptionDetails) {
		toSerialize["consumptionDetails"] = o.ConsumptionDetails
	}
	if !IsNil(o.PackageCode) {
		toSerialize["packageCode"] = o.PackageCode
	}
	if !IsNil(o.InternalId) {
		toSerialize["internalId"] = o.InternalId
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.PackageGroup) {
		toSerialize["packageGroup"] = o.PackageGroup
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.AwardCode) {
		toSerialize["awardCode"] = o.AwardCode
	}
	if !IsNil(o.Points) {
		toSerialize["points"] = o.Points
	}
	if !IsNil(o.CalculationRule) {
		toSerialize["calculationRule"] = o.CalculationRule
	}
	return toSerialize, nil
}

type NullableAddOnReservationPackageType struct {
	value *AddOnReservationPackageType
	isSet bool
}

func (v NullableAddOnReservationPackageType) Get() *AddOnReservationPackageType {
	return v.value
}

func (v *NullableAddOnReservationPackageType) Set(val *AddOnReservationPackageType) {
	v.value = val
	v.isSet = true
}

func (v NullableAddOnReservationPackageType) IsSet() bool {
	return v.isSet
}

func (v *NullableAddOnReservationPackageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddOnReservationPackageType(val *AddOnReservationPackageType) *NullableAddOnReservationPackageType {
	return &NullableAddOnReservationPackageType{value: val, isSet: true}
}

func (v NullableAddOnReservationPackageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddOnReservationPackageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


