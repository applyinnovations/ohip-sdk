/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ChangeInstructionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeInstructionType{}

// ChangeInstructionType Instructions for Changing a Reservation.
type ChangeInstructionType struct {
	// Unique Id that references an object uniquely in the system.
	ShareReservations []UniqueIDType `json:"shareReservations,omitempty"`
	// Indicates whether package prices will be updated with the latest configurations.
	UpdatePackagePrice *bool `json:"updatePackagePrice,omitempty"`
	ChangeAllShares *bool `json:"changeAllShares,omitempty"`
	OverrideInventory *bool `json:"overrideInventory,omitempty"`
	FacilitySchedulerOption *FacilitySchedulerOptionType `json:"facilitySchedulerOption,omitempty"`
	// Indicates whether the chosen changes will be made not only to overlapping dates of share reservations but also to non-overlapping dates after the departure date of the edited reservation. When false or omitted the chosen changes are applied only to overlapping dates of share reservations.
	ApplyUntilLastShareDepartureDate *bool `json:"applyUntilLastShareDepartureDate,omitempty"`
}

// NewChangeInstructionType instantiates a new ChangeInstructionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeInstructionType() *ChangeInstructionType {
	this := ChangeInstructionType{}
	return &this
}

// NewChangeInstructionTypeWithDefaults instantiates a new ChangeInstructionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeInstructionTypeWithDefaults() *ChangeInstructionType {
	this := ChangeInstructionType{}
	return &this
}

// GetShareReservations returns the ShareReservations field value if set, zero value otherwise.
func (o *ChangeInstructionType) GetShareReservations() []UniqueIDType {
	if o == nil || IsNil(o.ShareReservations) {
		var ret []UniqueIDType
		return ret
	}
	return o.ShareReservations
}

// GetShareReservationsOk returns a tuple with the ShareReservations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeInstructionType) GetShareReservationsOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.ShareReservations) {
		return nil, false
	}
	return o.ShareReservations, true
}

// HasShareReservations returns a boolean if a field has been set.
func (o *ChangeInstructionType) HasShareReservations() bool {
	if o != nil && !IsNil(o.ShareReservations) {
		return true
	}

	return false
}

// SetShareReservations gets a reference to the given []UniqueIDType and assigns it to the ShareReservations field.
func (o *ChangeInstructionType) SetShareReservations(v []UniqueIDType) {
	o.ShareReservations = v
}

// GetUpdatePackagePrice returns the UpdatePackagePrice field value if set, zero value otherwise.
func (o *ChangeInstructionType) GetUpdatePackagePrice() bool {
	if o == nil || IsNil(o.UpdatePackagePrice) {
		var ret bool
		return ret
	}
	return *o.UpdatePackagePrice
}

// GetUpdatePackagePriceOk returns a tuple with the UpdatePackagePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeInstructionType) GetUpdatePackagePriceOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdatePackagePrice) {
		return nil, false
	}
	return o.UpdatePackagePrice, true
}

// HasUpdatePackagePrice returns a boolean if a field has been set.
func (o *ChangeInstructionType) HasUpdatePackagePrice() bool {
	if o != nil && !IsNil(o.UpdatePackagePrice) {
		return true
	}

	return false
}

// SetUpdatePackagePrice gets a reference to the given bool and assigns it to the UpdatePackagePrice field.
func (o *ChangeInstructionType) SetUpdatePackagePrice(v bool) {
	o.UpdatePackagePrice = &v
}

// GetChangeAllShares returns the ChangeAllShares field value if set, zero value otherwise.
func (o *ChangeInstructionType) GetChangeAllShares() bool {
	if o == nil || IsNil(o.ChangeAllShares) {
		var ret bool
		return ret
	}
	return *o.ChangeAllShares
}

// GetChangeAllSharesOk returns a tuple with the ChangeAllShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeInstructionType) GetChangeAllSharesOk() (*bool, bool) {
	if o == nil || IsNil(o.ChangeAllShares) {
		return nil, false
	}
	return o.ChangeAllShares, true
}

// HasChangeAllShares returns a boolean if a field has been set.
func (o *ChangeInstructionType) HasChangeAllShares() bool {
	if o != nil && !IsNil(o.ChangeAllShares) {
		return true
	}

	return false
}

// SetChangeAllShares gets a reference to the given bool and assigns it to the ChangeAllShares field.
func (o *ChangeInstructionType) SetChangeAllShares(v bool) {
	o.ChangeAllShares = &v
}

// GetOverrideInventory returns the OverrideInventory field value if set, zero value otherwise.
func (o *ChangeInstructionType) GetOverrideInventory() bool {
	if o == nil || IsNil(o.OverrideInventory) {
		var ret bool
		return ret
	}
	return *o.OverrideInventory
}

// GetOverrideInventoryOk returns a tuple with the OverrideInventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeInstructionType) GetOverrideInventoryOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideInventory) {
		return nil, false
	}
	return o.OverrideInventory, true
}

// HasOverrideInventory returns a boolean if a field has been set.
func (o *ChangeInstructionType) HasOverrideInventory() bool {
	if o != nil && !IsNil(o.OverrideInventory) {
		return true
	}

	return false
}

// SetOverrideInventory gets a reference to the given bool and assigns it to the OverrideInventory field.
func (o *ChangeInstructionType) SetOverrideInventory(v bool) {
	o.OverrideInventory = &v
}

// GetFacilitySchedulerOption returns the FacilitySchedulerOption field value if set, zero value otherwise.
func (o *ChangeInstructionType) GetFacilitySchedulerOption() FacilitySchedulerOptionType {
	if o == nil || IsNil(o.FacilitySchedulerOption) {
		var ret FacilitySchedulerOptionType
		return ret
	}
	return *o.FacilitySchedulerOption
}

// GetFacilitySchedulerOptionOk returns a tuple with the FacilitySchedulerOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeInstructionType) GetFacilitySchedulerOptionOk() (*FacilitySchedulerOptionType, bool) {
	if o == nil || IsNil(o.FacilitySchedulerOption) {
		return nil, false
	}
	return o.FacilitySchedulerOption, true
}

// HasFacilitySchedulerOption returns a boolean if a field has been set.
func (o *ChangeInstructionType) HasFacilitySchedulerOption() bool {
	if o != nil && !IsNil(o.FacilitySchedulerOption) {
		return true
	}

	return false
}

// SetFacilitySchedulerOption gets a reference to the given FacilitySchedulerOptionType and assigns it to the FacilitySchedulerOption field.
func (o *ChangeInstructionType) SetFacilitySchedulerOption(v FacilitySchedulerOptionType) {
	o.FacilitySchedulerOption = &v
}

// GetApplyUntilLastShareDepartureDate returns the ApplyUntilLastShareDepartureDate field value if set, zero value otherwise.
func (o *ChangeInstructionType) GetApplyUntilLastShareDepartureDate() bool {
	if o == nil || IsNil(o.ApplyUntilLastShareDepartureDate) {
		var ret bool
		return ret
	}
	return *o.ApplyUntilLastShareDepartureDate
}

// GetApplyUntilLastShareDepartureDateOk returns a tuple with the ApplyUntilLastShareDepartureDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeInstructionType) GetApplyUntilLastShareDepartureDateOk() (*bool, bool) {
	if o == nil || IsNil(o.ApplyUntilLastShareDepartureDate) {
		return nil, false
	}
	return o.ApplyUntilLastShareDepartureDate, true
}

// HasApplyUntilLastShareDepartureDate returns a boolean if a field has been set.
func (o *ChangeInstructionType) HasApplyUntilLastShareDepartureDate() bool {
	if o != nil && !IsNil(o.ApplyUntilLastShareDepartureDate) {
		return true
	}

	return false
}

// SetApplyUntilLastShareDepartureDate gets a reference to the given bool and assigns it to the ApplyUntilLastShareDepartureDate field.
func (o *ChangeInstructionType) SetApplyUntilLastShareDepartureDate(v bool) {
	o.ApplyUntilLastShareDepartureDate = &v
}

func (o ChangeInstructionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeInstructionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ShareReservations) {
		toSerialize["shareReservations"] = o.ShareReservations
	}
	if !IsNil(o.UpdatePackagePrice) {
		toSerialize["updatePackagePrice"] = o.UpdatePackagePrice
	}
	if !IsNil(o.ChangeAllShares) {
		toSerialize["changeAllShares"] = o.ChangeAllShares
	}
	if !IsNil(o.OverrideInventory) {
		toSerialize["overrideInventory"] = o.OverrideInventory
	}
	if !IsNil(o.FacilitySchedulerOption) {
		toSerialize["facilitySchedulerOption"] = o.FacilitySchedulerOption
	}
	if !IsNil(o.ApplyUntilLastShareDepartureDate) {
		toSerialize["applyUntilLastShareDepartureDate"] = o.ApplyUntilLastShareDepartureDate
	}
	return toSerialize, nil
}

type NullableChangeInstructionType struct {
	value *ChangeInstructionType
	isSet bool
}

func (v NullableChangeInstructionType) Get() *ChangeInstructionType {
	return v.value
}

func (v *NullableChangeInstructionType) Set(val *ChangeInstructionType) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeInstructionType) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeInstructionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeInstructionType(val *ChangeInstructionType) *NullableChangeInstructionType {
	return &NullableChangeInstructionType{value: val, isSet: true}
}

func (v NullableChangeInstructionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeInstructionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


