/*
OPI Token Exchange Service API

Oracle Token Exchange Service Specification<br /><br /> Compatible with OPERA Cloud release 1.0.1.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 1.0.1
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokenexchange

import (
	"encoding/json"
	"fmt"
)

// checks if the TokenInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenInfo{}

// TokenInfo TokenInfo object
type TokenInfo struct {
	// OPERA Card Type
	CardType string `json:"cardType"`
	// Expiration Date, YYMM format
	ExpiryDate string `json:"expiryDate"`
	// Masked Primary Account Number (PAN)
	Pan string `json:"pan"`
	// Record number
	RecordNumber int32 `json:"recordNumber"`
	// Card Token
	Token string `json:"token"`
}

type _TokenInfo TokenInfo

// NewTokenInfo instantiates a new TokenInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenInfo(cardType string, expiryDate string, pan string, recordNumber int32, token string) *TokenInfo {
	this := TokenInfo{}
	this.CardType = cardType
	this.ExpiryDate = expiryDate
	this.Pan = pan
	this.RecordNumber = recordNumber
	this.Token = token
	return &this
}

// NewTokenInfoWithDefaults instantiates a new TokenInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenInfoWithDefaults() *TokenInfo {
	this := TokenInfo{}
	return &this
}

// GetCardType returns the CardType field value
func (o *TokenInfo) GetCardType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CardType
}

// GetCardTypeOk returns a tuple with the CardType field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetCardTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CardType, true
}

// SetCardType sets field value
func (o *TokenInfo) SetCardType(v string) {
	o.CardType = v
}

// GetExpiryDate returns the ExpiryDate field value
func (o *TokenInfo) GetExpiryDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetExpiryDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiryDate, true
}

// SetExpiryDate sets field value
func (o *TokenInfo) SetExpiryDate(v string) {
	o.ExpiryDate = v
}

// GetPan returns the Pan field value
func (o *TokenInfo) GetPan() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pan
}

// GetPanOk returns a tuple with the Pan field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetPanOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pan, true
}

// SetPan sets field value
func (o *TokenInfo) SetPan(v string) {
	o.Pan = v
}

// GetRecordNumber returns the RecordNumber field value
func (o *TokenInfo) GetRecordNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RecordNumber
}

// GetRecordNumberOk returns a tuple with the RecordNumber field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetRecordNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordNumber, true
}

// SetRecordNumber sets field value
func (o *TokenInfo) SetRecordNumber(v int32) {
	o.RecordNumber = v
}

// GetToken returns the Token field value
func (o *TokenInfo) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *TokenInfo) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *TokenInfo) SetToken(v string) {
	o.Token = v
}

func (o TokenInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cardType"] = o.CardType
	toSerialize["expiryDate"] = o.ExpiryDate
	toSerialize["pan"] = o.Pan
	toSerialize["recordNumber"] = o.RecordNumber
	toSerialize["token"] = o.Token
	return toSerialize, nil
}

func (o *TokenInfo) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cardType",
		"expiryDate",
		"pan",
		"recordNumber",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenInfo := _TokenInfo{}

	err = json.Unmarshal(bytes, &varTokenInfo)

	if err != nil {
		return err
	}

	*o = TokenInfo(varTokenInfo)

	return err
}

type NullableTokenInfo struct {
	value *TokenInfo
	isSet bool
}

func (v NullableTokenInfo) Get() *TokenInfo {
	return v.value
}

func (v *NullableTokenInfo) Set(val *TokenInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenInfo(val *TokenInfo) *NullableTokenInfo {
	return &NullableTokenInfo{value: val, isSet: true}
}

func (v NullableTokenInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


