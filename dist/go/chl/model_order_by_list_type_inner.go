/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the OrderByListTypeInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderByListTypeInner{}

// OrderByListTypeInner struct for OrderByListTypeInner
type OrderByListTypeInner struct {
	AttributeName *string `json:"attributeName,omitempty"`
	OrderType *OrderByAscDescType `json:"orderType,omitempty"`
}

// NewOrderByListTypeInner instantiates a new OrderByListTypeInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderByListTypeInner() *OrderByListTypeInner {
	this := OrderByListTypeInner{}
	return &this
}

// NewOrderByListTypeInnerWithDefaults instantiates a new OrderByListTypeInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderByListTypeInnerWithDefaults() *OrderByListTypeInner {
	this := OrderByListTypeInner{}
	return &this
}

// GetAttributeName returns the AttributeName field value if set, zero value otherwise.
func (o *OrderByListTypeInner) GetAttributeName() string {
	if o == nil || IsNil(o.AttributeName) {
		var ret string
		return ret
	}
	return *o.AttributeName
}

// GetAttributeNameOk returns a tuple with the AttributeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderByListTypeInner) GetAttributeNameOk() (*string, bool) {
	if o == nil || IsNil(o.AttributeName) {
		return nil, false
	}
	return o.AttributeName, true
}

// HasAttributeName returns a boolean if a field has been set.
func (o *OrderByListTypeInner) HasAttributeName() bool {
	if o != nil && !IsNil(o.AttributeName) {
		return true
	}

	return false
}

// SetAttributeName gets a reference to the given string and assigns it to the AttributeName field.
func (o *OrderByListTypeInner) SetAttributeName(v string) {
	o.AttributeName = &v
}

// GetOrderType returns the OrderType field value if set, zero value otherwise.
func (o *OrderByListTypeInner) GetOrderType() OrderByAscDescType {
	if o == nil || IsNil(o.OrderType) {
		var ret OrderByAscDescType
		return ret
	}
	return *o.OrderType
}

// GetOrderTypeOk returns a tuple with the OrderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderByListTypeInner) GetOrderTypeOk() (*OrderByAscDescType, bool) {
	if o == nil || IsNil(o.OrderType) {
		return nil, false
	}
	return o.OrderType, true
}

// HasOrderType returns a boolean if a field has been set.
func (o *OrderByListTypeInner) HasOrderType() bool {
	if o != nil && !IsNil(o.OrderType) {
		return true
	}

	return false
}

// SetOrderType gets a reference to the given OrderByAscDescType and assigns it to the OrderType field.
func (o *OrderByListTypeInner) SetOrderType(v OrderByAscDescType) {
	o.OrderType = &v
}

func (o OrderByListTypeInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderByListTypeInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttributeName) {
		toSerialize["attributeName"] = o.AttributeName
	}
	if !IsNil(o.OrderType) {
		toSerialize["orderType"] = o.OrderType
	}
	return toSerialize, nil
}

type NullableOrderByListTypeInner struct {
	value *OrderByListTypeInner
	isSet bool
}

func (v NullableOrderByListTypeInner) Get() *OrderByListTypeInner {
	return v.value
}

func (v *NullableOrderByListTypeInner) Set(val *OrderByListTypeInner) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderByListTypeInner) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderByListTypeInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderByListTypeInner(val *OrderByListTypeInner) *NullableOrderByListTypeInner {
	return &NullableOrderByListTypeInner{value: val, isSet: true}
}

func (v NullableOrderByListTypeInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderByListTypeInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


