/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the DeleteNegotiatedRates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteNegotiatedRates{}

// DeleteNegotiatedRates struct for DeleteNegotiatedRates
type DeleteNegotiatedRates struct {
	Items []HotelIdChannelRatesAccess `json:"items,omitempty"`
}

// NewDeleteNegotiatedRates instantiates a new DeleteNegotiatedRates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteNegotiatedRates() *DeleteNegotiatedRates {
	this := DeleteNegotiatedRates{}
	return &this
}

// NewDeleteNegotiatedRatesWithDefaults instantiates a new DeleteNegotiatedRates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteNegotiatedRatesWithDefaults() *DeleteNegotiatedRates {
	this := DeleteNegotiatedRates{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *DeleteNegotiatedRates) GetItems() []HotelIdChannelRatesAccess {
	if o == nil || IsNil(o.Items) {
		var ret []HotelIdChannelRatesAccess
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteNegotiatedRates) GetItemsOk() ([]HotelIdChannelRatesAccess, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *DeleteNegotiatedRates) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []HotelIdChannelRatesAccess and assigns it to the Items field.
func (o *DeleteNegotiatedRates) SetItems(v []HotelIdChannelRatesAccess) {
	o.Items = v
}

func (o DeleteNegotiatedRates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteNegotiatedRates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return toSerialize, nil
}

type NullableDeleteNegotiatedRates struct {
	value *DeleteNegotiatedRates
	isSet bool
}

func (v NullableDeleteNegotiatedRates) Get() *DeleteNegotiatedRates {
	return v.value
}

func (v *NullableDeleteNegotiatedRates) Set(val *DeleteNegotiatedRates) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteNegotiatedRates) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteNegotiatedRates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteNegotiatedRates(val *DeleteNegotiatedRates) *NullableDeleteNegotiatedRates {
	return &NullableDeleteNegotiatedRates{value: val, isSet: true}
}

func (v NullableDeleteNegotiatedRates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteNegotiatedRates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


