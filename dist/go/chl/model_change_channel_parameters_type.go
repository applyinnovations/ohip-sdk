/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ChangeChannelParametersType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeChannelParametersType{}

// ChangeChannelParametersType struct for ChangeChannelParametersType
type ChangeChannelParametersType struct {
	// Collection of channel parameters simple information.
	ChannelParameters []ChannelParameterSimpleType `json:"channelParameters,omitempty"`
	// External system code.
	SystemCode *string `json:"systemCode,omitempty"`
}

// NewChangeChannelParametersType instantiates a new ChangeChannelParametersType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeChannelParametersType() *ChangeChannelParametersType {
	this := ChangeChannelParametersType{}
	return &this
}

// NewChangeChannelParametersTypeWithDefaults instantiates a new ChangeChannelParametersType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeChannelParametersTypeWithDefaults() *ChangeChannelParametersType {
	this := ChangeChannelParametersType{}
	return &this
}

// GetChannelParameters returns the ChannelParameters field value if set, zero value otherwise.
func (o *ChangeChannelParametersType) GetChannelParameters() []ChannelParameterSimpleType {
	if o == nil || IsNil(o.ChannelParameters) {
		var ret []ChannelParameterSimpleType
		return ret
	}
	return o.ChannelParameters
}

// GetChannelParametersOk returns a tuple with the ChannelParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeChannelParametersType) GetChannelParametersOk() ([]ChannelParameterSimpleType, bool) {
	if o == nil || IsNil(o.ChannelParameters) {
		return nil, false
	}
	return o.ChannelParameters, true
}

// HasChannelParameters returns a boolean if a field has been set.
func (o *ChangeChannelParametersType) HasChannelParameters() bool {
	if o != nil && !IsNil(o.ChannelParameters) {
		return true
	}

	return false
}

// SetChannelParameters gets a reference to the given []ChannelParameterSimpleType and assigns it to the ChannelParameters field.
func (o *ChangeChannelParametersType) SetChannelParameters(v []ChannelParameterSimpleType) {
	o.ChannelParameters = v
}

// GetSystemCode returns the SystemCode field value if set, zero value otherwise.
func (o *ChangeChannelParametersType) GetSystemCode() string {
	if o == nil || IsNil(o.SystemCode) {
		var ret string
		return ret
	}
	return *o.SystemCode
}

// GetSystemCodeOk returns a tuple with the SystemCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeChannelParametersType) GetSystemCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SystemCode) {
		return nil, false
	}
	return o.SystemCode, true
}

// HasSystemCode returns a boolean if a field has been set.
func (o *ChangeChannelParametersType) HasSystemCode() bool {
	if o != nil && !IsNil(o.SystemCode) {
		return true
	}

	return false
}

// SetSystemCode gets a reference to the given string and assigns it to the SystemCode field.
func (o *ChangeChannelParametersType) SetSystemCode(v string) {
	o.SystemCode = &v
}

func (o ChangeChannelParametersType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeChannelParametersType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChannelParameters) {
		toSerialize["channelParameters"] = o.ChannelParameters
	}
	if !IsNil(o.SystemCode) {
		toSerialize["systemCode"] = o.SystemCode
	}
	return toSerialize, nil
}

type NullableChangeChannelParametersType struct {
	value *ChangeChannelParametersType
	isSet bool
}

func (v NullableChangeChannelParametersType) Get() *ChangeChannelParametersType {
	return v.value
}

func (v *NullableChangeChannelParametersType) Set(val *ChangeChannelParametersType) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeChannelParametersType) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeChannelParametersType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeChannelParametersType(val *ChangeChannelParametersType) *NullableChangeChannelParametersType {
	return &NullableChangeChannelParametersType{value: val, isSet: true}
}

func (v NullableChangeChannelParametersType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeChannelParametersType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


