/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ChannelType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelType{}

// ChannelType Identify details of an external system.
type ChannelType struct {
	SystemInfo *SystemInfoType `json:"systemInfo,omitempty"`
	// External system Sell By.
	SellBy *string `json:"sellBy,omitempty"`
	// External system Add-on license. Available for ADS only.
	AddOnLicense *string `json:"addOnLicense,omitempty"`
	// External system rate levels details.
	RateLevels []SystemRateLevelType `json:"rateLevels,omitempty"`
	// External system rate categories details.
	RateCategories []SystemRateCategoryType `json:"rateCategories,omitempty"`
	// External system room type details.
	RoomTypes []SystemRoomTypeType `json:"roomTypes,omitempty"`
	// External system carrier details.
	Carriers []SystemCarrierType `json:"carriers,omitempty"`
	// External system error details.
	ErrorCodes []SystemErrorType `json:"errorCodes,omitempty"`
	// Collection of generic Name-Value-Pair parameters.
	Parameters []ParameterType `json:"parameters,omitempty"`
}

// NewChannelType instantiates a new ChannelType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelType() *ChannelType {
	this := ChannelType{}
	return &this
}

// NewChannelTypeWithDefaults instantiates a new ChannelType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelTypeWithDefaults() *ChannelType {
	this := ChannelType{}
	return &this
}

// GetSystemInfo returns the SystemInfo field value if set, zero value otherwise.
func (o *ChannelType) GetSystemInfo() SystemInfoType {
	if o == nil || IsNil(o.SystemInfo) {
		var ret SystemInfoType
		return ret
	}
	return *o.SystemInfo
}

// GetSystemInfoOk returns a tuple with the SystemInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelType) GetSystemInfoOk() (*SystemInfoType, bool) {
	if o == nil || IsNil(o.SystemInfo) {
		return nil, false
	}
	return o.SystemInfo, true
}

// HasSystemInfo returns a boolean if a field has been set.
func (o *ChannelType) HasSystemInfo() bool {
	if o != nil && !IsNil(o.SystemInfo) {
		return true
	}

	return false
}

// SetSystemInfo gets a reference to the given SystemInfoType and assigns it to the SystemInfo field.
func (o *ChannelType) SetSystemInfo(v SystemInfoType) {
	o.SystemInfo = &v
}

// GetSellBy returns the SellBy field value if set, zero value otherwise.
func (o *ChannelType) GetSellBy() string {
	if o == nil || IsNil(o.SellBy) {
		var ret string
		return ret
	}
	return *o.SellBy
}

// GetSellByOk returns a tuple with the SellBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelType) GetSellByOk() (*string, bool) {
	if o == nil || IsNil(o.SellBy) {
		return nil, false
	}
	return o.SellBy, true
}

// HasSellBy returns a boolean if a field has been set.
func (o *ChannelType) HasSellBy() bool {
	if o != nil && !IsNil(o.SellBy) {
		return true
	}

	return false
}

// SetSellBy gets a reference to the given string and assigns it to the SellBy field.
func (o *ChannelType) SetSellBy(v string) {
	o.SellBy = &v
}

// GetAddOnLicense returns the AddOnLicense field value if set, zero value otherwise.
func (o *ChannelType) GetAddOnLicense() string {
	if o == nil || IsNil(o.AddOnLicense) {
		var ret string
		return ret
	}
	return *o.AddOnLicense
}

// GetAddOnLicenseOk returns a tuple with the AddOnLicense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelType) GetAddOnLicenseOk() (*string, bool) {
	if o == nil || IsNil(o.AddOnLicense) {
		return nil, false
	}
	return o.AddOnLicense, true
}

// HasAddOnLicense returns a boolean if a field has been set.
func (o *ChannelType) HasAddOnLicense() bool {
	if o != nil && !IsNil(o.AddOnLicense) {
		return true
	}

	return false
}

// SetAddOnLicense gets a reference to the given string and assigns it to the AddOnLicense field.
func (o *ChannelType) SetAddOnLicense(v string) {
	o.AddOnLicense = &v
}

// GetRateLevels returns the RateLevels field value if set, zero value otherwise.
func (o *ChannelType) GetRateLevels() []SystemRateLevelType {
	if o == nil || IsNil(o.RateLevels) {
		var ret []SystemRateLevelType
		return ret
	}
	return o.RateLevels
}

// GetRateLevelsOk returns a tuple with the RateLevels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelType) GetRateLevelsOk() ([]SystemRateLevelType, bool) {
	if o == nil || IsNil(o.RateLevels) {
		return nil, false
	}
	return o.RateLevels, true
}

// HasRateLevels returns a boolean if a field has been set.
func (o *ChannelType) HasRateLevels() bool {
	if o != nil && !IsNil(o.RateLevels) {
		return true
	}

	return false
}

// SetRateLevels gets a reference to the given []SystemRateLevelType and assigns it to the RateLevels field.
func (o *ChannelType) SetRateLevels(v []SystemRateLevelType) {
	o.RateLevels = v
}

// GetRateCategories returns the RateCategories field value if set, zero value otherwise.
func (o *ChannelType) GetRateCategories() []SystemRateCategoryType {
	if o == nil || IsNil(o.RateCategories) {
		var ret []SystemRateCategoryType
		return ret
	}
	return o.RateCategories
}

// GetRateCategoriesOk returns a tuple with the RateCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelType) GetRateCategoriesOk() ([]SystemRateCategoryType, bool) {
	if o == nil || IsNil(o.RateCategories) {
		return nil, false
	}
	return o.RateCategories, true
}

// HasRateCategories returns a boolean if a field has been set.
func (o *ChannelType) HasRateCategories() bool {
	if o != nil && !IsNil(o.RateCategories) {
		return true
	}

	return false
}

// SetRateCategories gets a reference to the given []SystemRateCategoryType and assigns it to the RateCategories field.
func (o *ChannelType) SetRateCategories(v []SystemRateCategoryType) {
	o.RateCategories = v
}

// GetRoomTypes returns the RoomTypes field value if set, zero value otherwise.
func (o *ChannelType) GetRoomTypes() []SystemRoomTypeType {
	if o == nil || IsNil(o.RoomTypes) {
		var ret []SystemRoomTypeType
		return ret
	}
	return o.RoomTypes
}

// GetRoomTypesOk returns a tuple with the RoomTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelType) GetRoomTypesOk() ([]SystemRoomTypeType, bool) {
	if o == nil || IsNil(o.RoomTypes) {
		return nil, false
	}
	return o.RoomTypes, true
}

// HasRoomTypes returns a boolean if a field has been set.
func (o *ChannelType) HasRoomTypes() bool {
	if o != nil && !IsNil(o.RoomTypes) {
		return true
	}

	return false
}

// SetRoomTypes gets a reference to the given []SystemRoomTypeType and assigns it to the RoomTypes field.
func (o *ChannelType) SetRoomTypes(v []SystemRoomTypeType) {
	o.RoomTypes = v
}

// GetCarriers returns the Carriers field value if set, zero value otherwise.
func (o *ChannelType) GetCarriers() []SystemCarrierType {
	if o == nil || IsNil(o.Carriers) {
		var ret []SystemCarrierType
		return ret
	}
	return o.Carriers
}

// GetCarriersOk returns a tuple with the Carriers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelType) GetCarriersOk() ([]SystemCarrierType, bool) {
	if o == nil || IsNil(o.Carriers) {
		return nil, false
	}
	return o.Carriers, true
}

// HasCarriers returns a boolean if a field has been set.
func (o *ChannelType) HasCarriers() bool {
	if o != nil && !IsNil(o.Carriers) {
		return true
	}

	return false
}

// SetCarriers gets a reference to the given []SystemCarrierType and assigns it to the Carriers field.
func (o *ChannelType) SetCarriers(v []SystemCarrierType) {
	o.Carriers = v
}

// GetErrorCodes returns the ErrorCodes field value if set, zero value otherwise.
func (o *ChannelType) GetErrorCodes() []SystemErrorType {
	if o == nil || IsNil(o.ErrorCodes) {
		var ret []SystemErrorType
		return ret
	}
	return o.ErrorCodes
}

// GetErrorCodesOk returns a tuple with the ErrorCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelType) GetErrorCodesOk() ([]SystemErrorType, bool) {
	if o == nil || IsNil(o.ErrorCodes) {
		return nil, false
	}
	return o.ErrorCodes, true
}

// HasErrorCodes returns a boolean if a field has been set.
func (o *ChannelType) HasErrorCodes() bool {
	if o != nil && !IsNil(o.ErrorCodes) {
		return true
	}

	return false
}

// SetErrorCodes gets a reference to the given []SystemErrorType and assigns it to the ErrorCodes field.
func (o *ChannelType) SetErrorCodes(v []SystemErrorType) {
	o.ErrorCodes = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *ChannelType) GetParameters() []ParameterType {
	if o == nil || IsNil(o.Parameters) {
		var ret []ParameterType
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelType) GetParametersOk() ([]ParameterType, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *ChannelType) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []ParameterType and assigns it to the Parameters field.
func (o *ChannelType) SetParameters(v []ParameterType) {
	o.Parameters = v
}

func (o ChannelType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SystemInfo) {
		toSerialize["systemInfo"] = o.SystemInfo
	}
	if !IsNil(o.SellBy) {
		toSerialize["sellBy"] = o.SellBy
	}
	if !IsNil(o.AddOnLicense) {
		toSerialize["addOnLicense"] = o.AddOnLicense
	}
	if !IsNil(o.RateLevels) {
		toSerialize["rateLevels"] = o.RateLevels
	}
	if !IsNil(o.RateCategories) {
		toSerialize["rateCategories"] = o.RateCategories
	}
	if !IsNil(o.RoomTypes) {
		toSerialize["roomTypes"] = o.RoomTypes
	}
	if !IsNil(o.Carriers) {
		toSerialize["carriers"] = o.Carriers
	}
	if !IsNil(o.ErrorCodes) {
		toSerialize["errorCodes"] = o.ErrorCodes
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	return toSerialize, nil
}

type NullableChannelType struct {
	value *ChannelType
	isSet bool
}

func (v NullableChannelType) Get() *ChannelType {
	return v.value
}

func (v *NullableChannelType) Set(val *ChannelType) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelType) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelType(val *ChannelType) *NullableChannelType {
	return &NullableChannelType{value: val, isSet: true}
}

func (v NullableChannelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


