/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the PublishRatePlanTypeHotelCodes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublishRatePlanTypeHotelCodes{}

// PublishRatePlanTypeHotelCodes The selected property Rate Codes for update.
type PublishRatePlanTypeHotelCodes struct {
	RatePlanCodes []string `json:"ratePlanCodes,omitempty"`
	RoomTypes []string `json:"roomTypes,omitempty"`
}

// NewPublishRatePlanTypeHotelCodes instantiates a new PublishRatePlanTypeHotelCodes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublishRatePlanTypeHotelCodes() *PublishRatePlanTypeHotelCodes {
	this := PublishRatePlanTypeHotelCodes{}
	return &this
}

// NewPublishRatePlanTypeHotelCodesWithDefaults instantiates a new PublishRatePlanTypeHotelCodes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublishRatePlanTypeHotelCodesWithDefaults() *PublishRatePlanTypeHotelCodes {
	this := PublishRatePlanTypeHotelCodes{}
	return &this
}

// GetRatePlanCodes returns the RatePlanCodes field value if set, zero value otherwise.
func (o *PublishRatePlanTypeHotelCodes) GetRatePlanCodes() []string {
	if o == nil || IsNil(o.RatePlanCodes) {
		var ret []string
		return ret
	}
	return o.RatePlanCodes
}

// GetRatePlanCodesOk returns a tuple with the RatePlanCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishRatePlanTypeHotelCodes) GetRatePlanCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.RatePlanCodes) {
		return nil, false
	}
	return o.RatePlanCodes, true
}

// HasRatePlanCodes returns a boolean if a field has been set.
func (o *PublishRatePlanTypeHotelCodes) HasRatePlanCodes() bool {
	if o != nil && !IsNil(o.RatePlanCodes) {
		return true
	}

	return false
}

// SetRatePlanCodes gets a reference to the given []string and assigns it to the RatePlanCodes field.
func (o *PublishRatePlanTypeHotelCodes) SetRatePlanCodes(v []string) {
	o.RatePlanCodes = v
}

// GetRoomTypes returns the RoomTypes field value if set, zero value otherwise.
func (o *PublishRatePlanTypeHotelCodes) GetRoomTypes() []string {
	if o == nil || IsNil(o.RoomTypes) {
		var ret []string
		return ret
	}
	return o.RoomTypes
}

// GetRoomTypesOk returns a tuple with the RoomTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishRatePlanTypeHotelCodes) GetRoomTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.RoomTypes) {
		return nil, false
	}
	return o.RoomTypes, true
}

// HasRoomTypes returns a boolean if a field has been set.
func (o *PublishRatePlanTypeHotelCodes) HasRoomTypes() bool {
	if o != nil && !IsNil(o.RoomTypes) {
		return true
	}

	return false
}

// SetRoomTypes gets a reference to the given []string and assigns it to the RoomTypes field.
func (o *PublishRatePlanTypeHotelCodes) SetRoomTypes(v []string) {
	o.RoomTypes = v
}

func (o PublishRatePlanTypeHotelCodes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublishRatePlanTypeHotelCodes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RatePlanCodes) {
		toSerialize["ratePlanCodes"] = o.RatePlanCodes
	}
	if !IsNil(o.RoomTypes) {
		toSerialize["roomTypes"] = o.RoomTypes
	}
	return toSerialize, nil
}

type NullablePublishRatePlanTypeHotelCodes struct {
	value *PublishRatePlanTypeHotelCodes
	isSet bool
}

func (v NullablePublishRatePlanTypeHotelCodes) Get() *PublishRatePlanTypeHotelCodes {
	return v.value
}

func (v *NullablePublishRatePlanTypeHotelCodes) Set(val *PublishRatePlanTypeHotelCodes) {
	v.value = val
	v.isSet = true
}

func (v NullablePublishRatePlanTypeHotelCodes) IsSet() bool {
	return v.isSet
}

func (v *NullablePublishRatePlanTypeHotelCodes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublishRatePlanTypeHotelCodes(val *PublishRatePlanTypeHotelCodes) *NullablePublishRatePlanTypeHotelCodes {
	return &NullablePublishRatePlanTypeHotelCodes{value: val, isSet: true}
}

func (v NullablePublishRatePlanTypeHotelCodes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublishRatePlanTypeHotelCodes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


