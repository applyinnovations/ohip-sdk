/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the TotalPricingElementType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TotalPricingElementType{}

// TotalPricingElementType Total Pricing Element ID type used to identify the record
type TotalPricingElementType struct {
	// Hotel Code that associated with Transaction Code and Total Pricing Element
	HotelId *string `json:"hotelId,omitempty"`
	Transaction *CodeDescriptionType `json:"transaction,omitempty"`
	ElementCode *CodeDescriptionType `json:"elementCode,omitempty"`
	ChargeType *ChargeTypeType `json:"chargeType,omitempty"`
	EditPricingElementId *TotalPricingElementIDType `json:"editPricingElementId,omitempty"`
}

// NewTotalPricingElementType instantiates a new TotalPricingElementType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTotalPricingElementType() *TotalPricingElementType {
	this := TotalPricingElementType{}
	return &this
}

// NewTotalPricingElementTypeWithDefaults instantiates a new TotalPricingElementType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTotalPricingElementTypeWithDefaults() *TotalPricingElementType {
	this := TotalPricingElementType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *TotalPricingElementType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotalPricingElementType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *TotalPricingElementType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *TotalPricingElementType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetTransaction returns the Transaction field value if set, zero value otherwise.
func (o *TotalPricingElementType) GetTransaction() CodeDescriptionType {
	if o == nil || IsNil(o.Transaction) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotalPricingElementType) GetTransactionOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.Transaction) {
		return nil, false
	}
	return o.Transaction, true
}

// HasTransaction returns a boolean if a field has been set.
func (o *TotalPricingElementType) HasTransaction() bool {
	if o != nil && !IsNil(o.Transaction) {
		return true
	}

	return false
}

// SetTransaction gets a reference to the given CodeDescriptionType and assigns it to the Transaction field.
func (o *TotalPricingElementType) SetTransaction(v CodeDescriptionType) {
	o.Transaction = &v
}

// GetElementCode returns the ElementCode field value if set, zero value otherwise.
func (o *TotalPricingElementType) GetElementCode() CodeDescriptionType {
	if o == nil || IsNil(o.ElementCode) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.ElementCode
}

// GetElementCodeOk returns a tuple with the ElementCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotalPricingElementType) GetElementCodeOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.ElementCode) {
		return nil, false
	}
	return o.ElementCode, true
}

// HasElementCode returns a boolean if a field has been set.
func (o *TotalPricingElementType) HasElementCode() bool {
	if o != nil && !IsNil(o.ElementCode) {
		return true
	}

	return false
}

// SetElementCode gets a reference to the given CodeDescriptionType and assigns it to the ElementCode field.
func (o *TotalPricingElementType) SetElementCode(v CodeDescriptionType) {
	o.ElementCode = &v
}

// GetChargeType returns the ChargeType field value if set, zero value otherwise.
func (o *TotalPricingElementType) GetChargeType() ChargeTypeType {
	if o == nil || IsNil(o.ChargeType) {
		var ret ChargeTypeType
		return ret
	}
	return *o.ChargeType
}

// GetChargeTypeOk returns a tuple with the ChargeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotalPricingElementType) GetChargeTypeOk() (*ChargeTypeType, bool) {
	if o == nil || IsNil(o.ChargeType) {
		return nil, false
	}
	return o.ChargeType, true
}

// HasChargeType returns a boolean if a field has been set.
func (o *TotalPricingElementType) HasChargeType() bool {
	if o != nil && !IsNil(o.ChargeType) {
		return true
	}

	return false
}

// SetChargeType gets a reference to the given ChargeTypeType and assigns it to the ChargeType field.
func (o *TotalPricingElementType) SetChargeType(v ChargeTypeType) {
	o.ChargeType = &v
}

// GetEditPricingElementId returns the EditPricingElementId field value if set, zero value otherwise.
func (o *TotalPricingElementType) GetEditPricingElementId() TotalPricingElementIDType {
	if o == nil || IsNil(o.EditPricingElementId) {
		var ret TotalPricingElementIDType
		return ret
	}
	return *o.EditPricingElementId
}

// GetEditPricingElementIdOk returns a tuple with the EditPricingElementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotalPricingElementType) GetEditPricingElementIdOk() (*TotalPricingElementIDType, bool) {
	if o == nil || IsNil(o.EditPricingElementId) {
		return nil, false
	}
	return o.EditPricingElementId, true
}

// HasEditPricingElementId returns a boolean if a field has been set.
func (o *TotalPricingElementType) HasEditPricingElementId() bool {
	if o != nil && !IsNil(o.EditPricingElementId) {
		return true
	}

	return false
}

// SetEditPricingElementId gets a reference to the given TotalPricingElementIDType and assigns it to the EditPricingElementId field.
func (o *TotalPricingElementType) SetEditPricingElementId(v TotalPricingElementIDType) {
	o.EditPricingElementId = &v
}

func (o TotalPricingElementType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TotalPricingElementType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Transaction) {
		toSerialize["transaction"] = o.Transaction
	}
	if !IsNil(o.ElementCode) {
		toSerialize["elementCode"] = o.ElementCode
	}
	if !IsNil(o.ChargeType) {
		toSerialize["chargeType"] = o.ChargeType
	}
	if !IsNil(o.EditPricingElementId) {
		toSerialize["editPricingElementId"] = o.EditPricingElementId
	}
	return toSerialize, nil
}

type NullableTotalPricingElementType struct {
	value *TotalPricingElementType
	isSet bool
}

func (v NullableTotalPricingElementType) Get() *TotalPricingElementType {
	return v.value
}

func (v *NullableTotalPricingElementType) Set(val *TotalPricingElementType) {
	v.value = val
	v.isSet = true
}

func (v NullableTotalPricingElementType) IsSet() bool {
	return v.isSet
}

func (v *NullableTotalPricingElementType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTotalPricingElementType(val *TotalPricingElementType) *NullableTotalPricingElementType {
	return &NullableTotalPricingElementType{value: val, isSet: true}
}

func (v NullableTotalPricingElementType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTotalPricingElementType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


