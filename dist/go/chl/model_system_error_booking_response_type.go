/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
	"fmt"
)

// SystemErrorBookingResponseType Simple type for external system booking response.
type SystemErrorBookingResponseType string

// List of systemErrorBookingResponseType
const (
	SYSTEMERRORBOOKINGRESPONSETYPE_PENDING_NEEDED SystemErrorBookingResponseType = "PendingNeeded"
	SYSTEMERRORBOOKINGRESPONSETYPE_UNCONFIRMED SystemErrorBookingResponseType = "Unconfirmed"
	SYSTEMERRORBOOKINGRESPONSETYPE_CANCELLED SystemErrorBookingResponseType = "Cancelled"
)

// All allowed values of SystemErrorBookingResponseType enum
var AllowedSystemErrorBookingResponseTypeEnumValues = []SystemErrorBookingResponseType{
	"PendingNeeded",
	"Unconfirmed",
	"Cancelled",
}

func (v *SystemErrorBookingResponseType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SystemErrorBookingResponseType(value)
	for _, existing := range AllowedSystemErrorBookingResponseTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SystemErrorBookingResponseType", value)
}

// NewSystemErrorBookingResponseTypeFromValue returns a pointer to a valid SystemErrorBookingResponseType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSystemErrorBookingResponseTypeFromValue(v string) (*SystemErrorBookingResponseType, error) {
	ev := SystemErrorBookingResponseType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SystemErrorBookingResponseType: valid values are %v", v, AllowedSystemErrorBookingResponseTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SystemErrorBookingResponseType) IsValid() bool {
	for _, existing := range AllowedSystemErrorBookingResponseTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to systemErrorBookingResponseType value
func (v SystemErrorBookingResponseType) Ptr() *SystemErrorBookingResponseType {
	return &v
}

type NullableSystemErrorBookingResponseType struct {
	value *SystemErrorBookingResponseType
	isSet bool
}

func (v NullableSystemErrorBookingResponseType) Get() *SystemErrorBookingResponseType {
	return v.value
}

func (v *NullableSystemErrorBookingResponseType) Set(val *SystemErrorBookingResponseType) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemErrorBookingResponseType) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemErrorBookingResponseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemErrorBookingResponseType(val *SystemErrorBookingResponseType) *NullableSystemErrorBookingResponseType {
	return &NullableSystemErrorBookingResponseType{value: val, isSet: true}
}

func (v NullableSystemErrorBookingResponseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemErrorBookingResponseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

