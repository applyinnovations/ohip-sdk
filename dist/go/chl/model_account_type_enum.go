/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
	"fmt"
)

// AccountTypeEnum Type of the profile account
type AccountTypeEnum string

// List of accountTypeEnum
const (
	ACCOUNTTYPEENUM_SOURCE AccountTypeEnum = "Source"
	ACCOUNTTYPEENUM_TRAVEL_AGENT AccountTypeEnum = "TravelAgent"
	ACCOUNTTYPEENUM_COMPANY AccountTypeEnum = "Company"
)

// All allowed values of AccountTypeEnum enum
var AllowedAccountTypeEnumEnumValues = []AccountTypeEnum{
	"Source",
	"TravelAgent",
	"Company",
}

func (v *AccountTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountTypeEnum(value)
	for _, existing := range AllowedAccountTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountTypeEnum", value)
}

// NewAccountTypeEnumFromValue returns a pointer to a valid AccountTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountTypeEnumFromValue(v string) (*AccountTypeEnum, error) {
	ev := AccountTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountTypeEnum: valid values are %v", v, AllowedAccountTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountTypeEnum) IsValid() bool {
	for _, existing := range AllowedAccountTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to accountTypeEnum value
func (v AccountTypeEnum) Ptr() *AccountTypeEnum {
	return &v
}

type NullableAccountTypeEnum struct {
	value *AccountTypeEnum
	isSet bool
}

func (v NullableAccountTypeEnum) Get() *AccountTypeEnum {
	return v.value
}

func (v *NullableAccountTypeEnum) Set(val *AccountTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountTypeEnum(val *AccountTypeEnum) *NullableAccountTypeEnum {
	return &NullableAccountTypeEnum{value: val, isSet: true}
}

func (v NullableAccountTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

