/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ChannelNegRateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelNegRateType{}

// ChannelNegRateType struct for ChannelNegRateType
type ChannelNegRateType struct {
	NegProfile []ChannelNegProfileType `json:"negProfile,omitempty"`
	// Booking Channel Code.
	BookingChannelCode *string `json:"bookingChannelCode,omitempty"`
	// Hotel Code.
	HotelId *string `json:"hotelId,omitempty"`
	// Channel Room Type.
	ChannelRatePlanCode *string `json:"channelRatePlanCode,omitempty"`
}

// NewChannelNegRateType instantiates a new ChannelNegRateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelNegRateType() *ChannelNegRateType {
	this := ChannelNegRateType{}
	return &this
}

// NewChannelNegRateTypeWithDefaults instantiates a new ChannelNegRateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelNegRateTypeWithDefaults() *ChannelNegRateType {
	this := ChannelNegRateType{}
	return &this
}

// GetNegProfile returns the NegProfile field value if set, zero value otherwise.
func (o *ChannelNegRateType) GetNegProfile() []ChannelNegProfileType {
	if o == nil || IsNil(o.NegProfile) {
		var ret []ChannelNegProfileType
		return ret
	}
	return o.NegProfile
}

// GetNegProfileOk returns a tuple with the NegProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelNegRateType) GetNegProfileOk() ([]ChannelNegProfileType, bool) {
	if o == nil || IsNil(o.NegProfile) {
		return nil, false
	}
	return o.NegProfile, true
}

// HasNegProfile returns a boolean if a field has been set.
func (o *ChannelNegRateType) HasNegProfile() bool {
	if o != nil && !IsNil(o.NegProfile) {
		return true
	}

	return false
}

// SetNegProfile gets a reference to the given []ChannelNegProfileType and assigns it to the NegProfile field.
func (o *ChannelNegRateType) SetNegProfile(v []ChannelNegProfileType) {
	o.NegProfile = v
}

// GetBookingChannelCode returns the BookingChannelCode field value if set, zero value otherwise.
func (o *ChannelNegRateType) GetBookingChannelCode() string {
	if o == nil || IsNil(o.BookingChannelCode) {
		var ret string
		return ret
	}
	return *o.BookingChannelCode
}

// GetBookingChannelCodeOk returns a tuple with the BookingChannelCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelNegRateType) GetBookingChannelCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BookingChannelCode) {
		return nil, false
	}
	return o.BookingChannelCode, true
}

// HasBookingChannelCode returns a boolean if a field has been set.
func (o *ChannelNegRateType) HasBookingChannelCode() bool {
	if o != nil && !IsNil(o.BookingChannelCode) {
		return true
	}

	return false
}

// SetBookingChannelCode gets a reference to the given string and assigns it to the BookingChannelCode field.
func (o *ChannelNegRateType) SetBookingChannelCode(v string) {
	o.BookingChannelCode = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ChannelNegRateType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelNegRateType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ChannelNegRateType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ChannelNegRateType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetChannelRatePlanCode returns the ChannelRatePlanCode field value if set, zero value otherwise.
func (o *ChannelNegRateType) GetChannelRatePlanCode() string {
	if o == nil || IsNil(o.ChannelRatePlanCode) {
		var ret string
		return ret
	}
	return *o.ChannelRatePlanCode
}

// GetChannelRatePlanCodeOk returns a tuple with the ChannelRatePlanCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelNegRateType) GetChannelRatePlanCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ChannelRatePlanCode) {
		return nil, false
	}
	return o.ChannelRatePlanCode, true
}

// HasChannelRatePlanCode returns a boolean if a field has been set.
func (o *ChannelNegRateType) HasChannelRatePlanCode() bool {
	if o != nil && !IsNil(o.ChannelRatePlanCode) {
		return true
	}

	return false
}

// SetChannelRatePlanCode gets a reference to the given string and assigns it to the ChannelRatePlanCode field.
func (o *ChannelNegRateType) SetChannelRatePlanCode(v string) {
	o.ChannelRatePlanCode = &v
}

func (o ChannelNegRateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelNegRateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NegProfile) {
		toSerialize["negProfile"] = o.NegProfile
	}
	if !IsNil(o.BookingChannelCode) {
		toSerialize["bookingChannelCode"] = o.BookingChannelCode
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ChannelRatePlanCode) {
		toSerialize["channelRatePlanCode"] = o.ChannelRatePlanCode
	}
	return toSerialize, nil
}

type NullableChannelNegRateType struct {
	value *ChannelNegRateType
	isSet bool
}

func (v NullableChannelNegRateType) Get() *ChannelNegRateType {
	return v.value
}

func (v *NullableChannelNegRateType) Set(val *ChannelNegRateType) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelNegRateType) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelNegRateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelNegRateType(val *ChannelNegRateType) *NullableChannelNegRateType {
	return &NullableChannelNegRateType{value: val, isSet: true}
}

func (v NullableChannelNegRateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelNegRateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


