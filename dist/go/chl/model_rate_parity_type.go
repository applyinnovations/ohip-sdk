/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the RateParityType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateParityType{}

// RateParityType Information on Room Rate Parity among Channels/Property
type RateParityType struct {
	// Channels and Property combination.
	ParityGroups []ParityGroupType `json:"parityGroups,omitempty"`
	HotelsInfo []HotelChannelInfoType `json:"hotelsInfo,omitempty"`
	BookingChannelsInfo []BookingChannelInfoType `json:"bookingChannelsInfo,omitempty"`
	// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
	HasMore *bool `json:"hasMore,omitempty"`
	// Total number of rows queried
	TotalResults *int32 `json:"totalResults,omitempty"`
	// Total number of rows returned
	Count *int32 `json:"count,omitempty"`
}

// NewRateParityType instantiates a new RateParityType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateParityType() *RateParityType {
	this := RateParityType{}
	return &this
}

// NewRateParityTypeWithDefaults instantiates a new RateParityType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateParityTypeWithDefaults() *RateParityType {
	this := RateParityType{}
	return &this
}

// GetParityGroups returns the ParityGroups field value if set, zero value otherwise.
func (o *RateParityType) GetParityGroups() []ParityGroupType {
	if o == nil || IsNil(o.ParityGroups) {
		var ret []ParityGroupType
		return ret
	}
	return o.ParityGroups
}

// GetParityGroupsOk returns a tuple with the ParityGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateParityType) GetParityGroupsOk() ([]ParityGroupType, bool) {
	if o == nil || IsNil(o.ParityGroups) {
		return nil, false
	}
	return o.ParityGroups, true
}

// HasParityGroups returns a boolean if a field has been set.
func (o *RateParityType) HasParityGroups() bool {
	if o != nil && !IsNil(o.ParityGroups) {
		return true
	}

	return false
}

// SetParityGroups gets a reference to the given []ParityGroupType and assigns it to the ParityGroups field.
func (o *RateParityType) SetParityGroups(v []ParityGroupType) {
	o.ParityGroups = v
}

// GetHotelsInfo returns the HotelsInfo field value if set, zero value otherwise.
func (o *RateParityType) GetHotelsInfo() []HotelChannelInfoType {
	if o == nil || IsNil(o.HotelsInfo) {
		var ret []HotelChannelInfoType
		return ret
	}
	return o.HotelsInfo
}

// GetHotelsInfoOk returns a tuple with the HotelsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateParityType) GetHotelsInfoOk() ([]HotelChannelInfoType, bool) {
	if o == nil || IsNil(o.HotelsInfo) {
		return nil, false
	}
	return o.HotelsInfo, true
}

// HasHotelsInfo returns a boolean if a field has been set.
func (o *RateParityType) HasHotelsInfo() bool {
	if o != nil && !IsNil(o.HotelsInfo) {
		return true
	}

	return false
}

// SetHotelsInfo gets a reference to the given []HotelChannelInfoType and assigns it to the HotelsInfo field.
func (o *RateParityType) SetHotelsInfo(v []HotelChannelInfoType) {
	o.HotelsInfo = v
}

// GetBookingChannelsInfo returns the BookingChannelsInfo field value if set, zero value otherwise.
func (o *RateParityType) GetBookingChannelsInfo() []BookingChannelInfoType {
	if o == nil || IsNil(o.BookingChannelsInfo) {
		var ret []BookingChannelInfoType
		return ret
	}
	return o.BookingChannelsInfo
}

// GetBookingChannelsInfoOk returns a tuple with the BookingChannelsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateParityType) GetBookingChannelsInfoOk() ([]BookingChannelInfoType, bool) {
	if o == nil || IsNil(o.BookingChannelsInfo) {
		return nil, false
	}
	return o.BookingChannelsInfo, true
}

// HasBookingChannelsInfo returns a boolean if a field has been set.
func (o *RateParityType) HasBookingChannelsInfo() bool {
	if o != nil && !IsNil(o.BookingChannelsInfo) {
		return true
	}

	return false
}

// SetBookingChannelsInfo gets a reference to the given []BookingChannelInfoType and assigns it to the BookingChannelsInfo field.
func (o *RateParityType) SetBookingChannelsInfo(v []BookingChannelInfoType) {
	o.BookingChannelsInfo = v
}

// GetHasMore returns the HasMore field value if set, zero value otherwise.
func (o *RateParityType) GetHasMore() bool {
	if o == nil || IsNil(o.HasMore) {
		var ret bool
		return ret
	}
	return *o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateParityType) GetHasMoreOk() (*bool, bool) {
	if o == nil || IsNil(o.HasMore) {
		return nil, false
	}
	return o.HasMore, true
}

// HasHasMore returns a boolean if a field has been set.
func (o *RateParityType) HasHasMore() bool {
	if o != nil && !IsNil(o.HasMore) {
		return true
	}

	return false
}

// SetHasMore gets a reference to the given bool and assigns it to the HasMore field.
func (o *RateParityType) SetHasMore(v bool) {
	o.HasMore = &v
}

// GetTotalResults returns the TotalResults field value if set, zero value otherwise.
func (o *RateParityType) GetTotalResults() int32 {
	if o == nil || IsNil(o.TotalResults) {
		var ret int32
		return ret
	}
	return *o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateParityType) GetTotalResultsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalResults) {
		return nil, false
	}
	return o.TotalResults, true
}

// HasTotalResults returns a boolean if a field has been set.
func (o *RateParityType) HasTotalResults() bool {
	if o != nil && !IsNil(o.TotalResults) {
		return true
	}

	return false
}

// SetTotalResults gets a reference to the given int32 and assigns it to the TotalResults field.
func (o *RateParityType) SetTotalResults(v int32) {
	o.TotalResults = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *RateParityType) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateParityType) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *RateParityType) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *RateParityType) SetCount(v int32) {
	o.Count = &v
}

func (o RateParityType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateParityType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ParityGroups) {
		toSerialize["parityGroups"] = o.ParityGroups
	}
	if !IsNil(o.HotelsInfo) {
		toSerialize["hotelsInfo"] = o.HotelsInfo
	}
	if !IsNil(o.BookingChannelsInfo) {
		toSerialize["bookingChannelsInfo"] = o.BookingChannelsInfo
	}
	if !IsNil(o.HasMore) {
		toSerialize["hasMore"] = o.HasMore
	}
	if !IsNil(o.TotalResults) {
		toSerialize["totalResults"] = o.TotalResults
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	return toSerialize, nil
}

type NullableRateParityType struct {
	value *RateParityType
	isSet bool
}

func (v NullableRateParityType) Get() *RateParityType {
	return v.value
}

func (v *NullableRateParityType) Set(val *RateParityType) {
	v.value = val
	v.isSet = true
}

func (v NullableRateParityType) IsSet() bool {
	return v.isSet
}

func (v *NullableRateParityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateParityType(val *RateParityType) *NullableRateParityType {
	return &NullableRateParityType{value: val, isSet: true}
}

func (v NullableRateParityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateParityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


