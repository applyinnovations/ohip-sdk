/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ChannelAccountContactType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelAccountContactType{}

// ChannelAccountContactType Holds channel account contact information.
type ChannelAccountContactType struct {
	Telephones *ChannelAccountContactTypeTelephones `json:"telephones,omitempty"`
	Emails *ChannelAccountContactTypeEmails `json:"emails,omitempty"`
}

// NewChannelAccountContactType instantiates a new ChannelAccountContactType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelAccountContactType() *ChannelAccountContactType {
	this := ChannelAccountContactType{}
	return &this
}

// NewChannelAccountContactTypeWithDefaults instantiates a new ChannelAccountContactType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelAccountContactTypeWithDefaults() *ChannelAccountContactType {
	this := ChannelAccountContactType{}
	return &this
}

// GetTelephones returns the Telephones field value if set, zero value otherwise.
func (o *ChannelAccountContactType) GetTelephones() ChannelAccountContactTypeTelephones {
	if o == nil || IsNil(o.Telephones) {
		var ret ChannelAccountContactTypeTelephones
		return ret
	}
	return *o.Telephones
}

// GetTelephonesOk returns a tuple with the Telephones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelAccountContactType) GetTelephonesOk() (*ChannelAccountContactTypeTelephones, bool) {
	if o == nil || IsNil(o.Telephones) {
		return nil, false
	}
	return o.Telephones, true
}

// HasTelephones returns a boolean if a field has been set.
func (o *ChannelAccountContactType) HasTelephones() bool {
	if o != nil && !IsNil(o.Telephones) {
		return true
	}

	return false
}

// SetTelephones gets a reference to the given ChannelAccountContactTypeTelephones and assigns it to the Telephones field.
func (o *ChannelAccountContactType) SetTelephones(v ChannelAccountContactTypeTelephones) {
	o.Telephones = &v
}

// GetEmails returns the Emails field value if set, zero value otherwise.
func (o *ChannelAccountContactType) GetEmails() ChannelAccountContactTypeEmails {
	if o == nil || IsNil(o.Emails) {
		var ret ChannelAccountContactTypeEmails
		return ret
	}
	return *o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelAccountContactType) GetEmailsOk() (*ChannelAccountContactTypeEmails, bool) {
	if o == nil || IsNil(o.Emails) {
		return nil, false
	}
	return o.Emails, true
}

// HasEmails returns a boolean if a field has been set.
func (o *ChannelAccountContactType) HasEmails() bool {
	if o != nil && !IsNil(o.Emails) {
		return true
	}

	return false
}

// SetEmails gets a reference to the given ChannelAccountContactTypeEmails and assigns it to the Emails field.
func (o *ChannelAccountContactType) SetEmails(v ChannelAccountContactTypeEmails) {
	o.Emails = &v
}

func (o ChannelAccountContactType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelAccountContactType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Telephones) {
		toSerialize["telephones"] = o.Telephones
	}
	if !IsNil(o.Emails) {
		toSerialize["emails"] = o.Emails
	}
	return toSerialize, nil
}

type NullableChannelAccountContactType struct {
	value *ChannelAccountContactType
	isSet bool
}

func (v NullableChannelAccountContactType) Get() *ChannelAccountContactType {
	return v.value
}

func (v *NullableChannelAccountContactType) Set(val *ChannelAccountContactType) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelAccountContactType) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelAccountContactType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelAccountContactType(val *ChannelAccountContactType) *NullableChannelAccountContactType {
	return &NullableChannelAccountContactType{value: val, isSet: true}
}

func (v NullableChannelAccountContactType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelAccountContactType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


