/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ChannelAccountType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelAccountType{}

// ChannelAccountType A collection of Channel Account Profile Id and account details information.
type ChannelAccountType struct {
	ProfileId *ProfileId `json:"profileId,omitempty"`
	ChannelAccountInformation *ChannelAccountInformationType `json:"channelAccountInformation,omitempty"`
}

// NewChannelAccountType instantiates a new ChannelAccountType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelAccountType() *ChannelAccountType {
	this := ChannelAccountType{}
	return &this
}

// NewChannelAccountTypeWithDefaults instantiates a new ChannelAccountType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelAccountTypeWithDefaults() *ChannelAccountType {
	this := ChannelAccountType{}
	return &this
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *ChannelAccountType) GetProfileId() ProfileId {
	if o == nil || IsNil(o.ProfileId) {
		var ret ProfileId
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelAccountType) GetProfileIdOk() (*ProfileId, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *ChannelAccountType) HasProfileId() bool {
	if o != nil && !IsNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given ProfileId and assigns it to the ProfileId field.
func (o *ChannelAccountType) SetProfileId(v ProfileId) {
	o.ProfileId = &v
}

// GetChannelAccountInformation returns the ChannelAccountInformation field value if set, zero value otherwise.
func (o *ChannelAccountType) GetChannelAccountInformation() ChannelAccountInformationType {
	if o == nil || IsNil(o.ChannelAccountInformation) {
		var ret ChannelAccountInformationType
		return ret
	}
	return *o.ChannelAccountInformation
}

// GetChannelAccountInformationOk returns a tuple with the ChannelAccountInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelAccountType) GetChannelAccountInformationOk() (*ChannelAccountInformationType, bool) {
	if o == nil || IsNil(o.ChannelAccountInformation) {
		return nil, false
	}
	return o.ChannelAccountInformation, true
}

// HasChannelAccountInformation returns a boolean if a field has been set.
func (o *ChannelAccountType) HasChannelAccountInformation() bool {
	if o != nil && !IsNil(o.ChannelAccountInformation) {
		return true
	}

	return false
}

// SetChannelAccountInformation gets a reference to the given ChannelAccountInformationType and assigns it to the ChannelAccountInformation field.
func (o *ChannelAccountType) SetChannelAccountInformation(v ChannelAccountInformationType) {
	o.ChannelAccountInformation = &v
}

func (o ChannelAccountType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelAccountType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProfileId) {
		toSerialize["profileId"] = o.ProfileId
	}
	if !IsNil(o.ChannelAccountInformation) {
		toSerialize["channelAccountInformation"] = o.ChannelAccountInformation
	}
	return toSerialize, nil
}

type NullableChannelAccountType struct {
	value *ChannelAccountType
	isSet bool
}

func (v NullableChannelAccountType) Get() *ChannelAccountType {
	return v.value
}

func (v *NullableChannelAccountType) Set(val *ChannelAccountType) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelAccountType) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelAccountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelAccountType(val *ChannelAccountType) *NullableChannelAccountType {
	return &NullableChannelAccountType{value: val, isSet: true}
}

func (v NullableChannelAccountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelAccountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


