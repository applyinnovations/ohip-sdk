/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ChannelRateMappings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelRateMappings{}

// ChannelRateMappings Response object for fetching hotel-channel rate code mappings given search criteria including hotel codes, booking channel codes, rate codes, channel rate codes, etc.
type ChannelRateMappings struct {
	ChannelRateMappings *ChannelRateMappingsType `json:"channelRateMappings,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	MasterInfo *ChannelRateMappingMasterInfoType `json:"masterInfo,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewChannelRateMappings instantiates a new ChannelRateMappings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelRateMappings() *ChannelRateMappings {
	this := ChannelRateMappings{}
	return &this
}

// NewChannelRateMappingsWithDefaults instantiates a new ChannelRateMappings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelRateMappingsWithDefaults() *ChannelRateMappings {
	this := ChannelRateMappings{}
	return &this
}

// GetChannelRateMappings returns the ChannelRateMappings field value if set, zero value otherwise.
func (o *ChannelRateMappings) GetChannelRateMappings() ChannelRateMappingsType {
	if o == nil || IsNil(o.ChannelRateMappings) {
		var ret ChannelRateMappingsType
		return ret
	}
	return *o.ChannelRateMappings
}

// GetChannelRateMappingsOk returns a tuple with the ChannelRateMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelRateMappings) GetChannelRateMappingsOk() (*ChannelRateMappingsType, bool) {
	if o == nil || IsNil(o.ChannelRateMappings) {
		return nil, false
	}
	return o.ChannelRateMappings, true
}

// HasChannelRateMappings returns a boolean if a field has been set.
func (o *ChannelRateMappings) HasChannelRateMappings() bool {
	if o != nil && !IsNil(o.ChannelRateMappings) {
		return true
	}

	return false
}

// SetChannelRateMappings gets a reference to the given ChannelRateMappingsType and assigns it to the ChannelRateMappings field.
func (o *ChannelRateMappings) SetChannelRateMappings(v ChannelRateMappingsType) {
	o.ChannelRateMappings = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ChannelRateMappings) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelRateMappings) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ChannelRateMappings) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *ChannelRateMappings) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetMasterInfo returns the MasterInfo field value if set, zero value otherwise.
func (o *ChannelRateMappings) GetMasterInfo() ChannelRateMappingMasterInfoType {
	if o == nil || IsNil(o.MasterInfo) {
		var ret ChannelRateMappingMasterInfoType
		return ret
	}
	return *o.MasterInfo
}

// GetMasterInfoOk returns a tuple with the MasterInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelRateMappings) GetMasterInfoOk() (*ChannelRateMappingMasterInfoType, bool) {
	if o == nil || IsNil(o.MasterInfo) {
		return nil, false
	}
	return o.MasterInfo, true
}

// HasMasterInfo returns a boolean if a field has been set.
func (o *ChannelRateMappings) HasMasterInfo() bool {
	if o != nil && !IsNil(o.MasterInfo) {
		return true
	}

	return false
}

// SetMasterInfo gets a reference to the given ChannelRateMappingMasterInfoType and assigns it to the MasterInfo field.
func (o *ChannelRateMappings) SetMasterInfo(v ChannelRateMappingMasterInfoType) {
	o.MasterInfo = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ChannelRateMappings) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelRateMappings) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ChannelRateMappings) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ChannelRateMappings) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ChannelRateMappings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelRateMappings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChannelRateMappings) {
		toSerialize["channelRateMappings"] = o.ChannelRateMappings
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.MasterInfo) {
		toSerialize["masterInfo"] = o.MasterInfo
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableChannelRateMappings struct {
	value *ChannelRateMappings
	isSet bool
}

func (v NullableChannelRateMappings) Get() *ChannelRateMappings {
	return v.value
}

func (v *NullableChannelRateMappings) Set(val *ChannelRateMappings) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelRateMappings) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelRateMappings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelRateMappings(val *ChannelRateMappings) *NullableChannelRateMappings {
	return &NullableChannelRateMappings{value: val, isSet: true}
}

func (v NullableChannelRateMappings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelRateMappings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


