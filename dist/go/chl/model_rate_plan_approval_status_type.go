/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
	"fmt"
)

// RatePlanApprovalStatusType Indicates that the Rate Plan is approved for selling.
type RatePlanApprovalStatusType string

// List of ratePlanApprovalStatusType
const (
	RATEPLANAPPROVALSTATUSTYPE_NEW_UNAPPROVED RatePlanApprovalStatusType = "NewUnapproved"
	RATEPLANAPPROVALSTATUSTYPE_CHANGED_UNAPPROVED RatePlanApprovalStatusType = "ChangedUnapproved"
	RATEPLANAPPROVALSTATUSTYPE_REJECTED RatePlanApprovalStatusType = "Rejected"
	RATEPLANAPPROVALSTATUSTYPE_APPROVED RatePlanApprovalStatusType = "Approved"
)

// All allowed values of RatePlanApprovalStatusType enum
var AllowedRatePlanApprovalStatusTypeEnumValues = []RatePlanApprovalStatusType{
	"NewUnapproved",
	"ChangedUnapproved",
	"Rejected",
	"Approved",
}

func (v *RatePlanApprovalStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RatePlanApprovalStatusType(value)
	for _, existing := range AllowedRatePlanApprovalStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RatePlanApprovalStatusType", value)
}

// NewRatePlanApprovalStatusTypeFromValue returns a pointer to a valid RatePlanApprovalStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRatePlanApprovalStatusTypeFromValue(v string) (*RatePlanApprovalStatusType, error) {
	ev := RatePlanApprovalStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RatePlanApprovalStatusType: valid values are %v", v, AllowedRatePlanApprovalStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RatePlanApprovalStatusType) IsValid() bool {
	for _, existing := range AllowedRatePlanApprovalStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ratePlanApprovalStatusType value
func (v RatePlanApprovalStatusType) Ptr() *RatePlanApprovalStatusType {
	return &v
}

type NullableRatePlanApprovalStatusType struct {
	value *RatePlanApprovalStatusType
	isSet bool
}

func (v NullableRatePlanApprovalStatusType) Get() *RatePlanApprovalStatusType {
	return v.value
}

func (v *NullableRatePlanApprovalStatusType) Set(val *RatePlanApprovalStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableRatePlanApprovalStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableRatePlanApprovalStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatePlanApprovalStatusType(val *RatePlanApprovalStatusType) *NullableRatePlanApprovalStatusType {
	return &NullableRatePlanApprovalStatusType{value: val, isSet: true}
}

func (v NullableRatePlanApprovalStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatePlanApprovalStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

