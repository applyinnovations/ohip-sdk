/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ChannelInventoryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelInventoryType{}

// ChannelInventoryType Inventory statistics and restrictions. This can have no code (House level), BookingChannelCode, or ChannelRoomType to represent the different levels.
type ChannelInventoryType struct {
	// Inventory statistics and restriction details.
	Snapshot []ChannelSnapshotType `json:"snapshot,omitempty"`
	// Booking channel code that the snapshot belongs to.
	BookingChannelCode *string `json:"bookingChannelCode,omitempty"`
	// Booking channel room type that the snapshot belongs to.
	ChannelRoomType *string `json:"channelRoomType,omitempty"`
}

// NewChannelInventoryType instantiates a new ChannelInventoryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelInventoryType() *ChannelInventoryType {
	this := ChannelInventoryType{}
	return &this
}

// NewChannelInventoryTypeWithDefaults instantiates a new ChannelInventoryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelInventoryTypeWithDefaults() *ChannelInventoryType {
	this := ChannelInventoryType{}
	return &this
}

// GetSnapshot returns the Snapshot field value if set, zero value otherwise.
func (o *ChannelInventoryType) GetSnapshot() []ChannelSnapshotType {
	if o == nil || IsNil(o.Snapshot) {
		var ret []ChannelSnapshotType
		return ret
	}
	return o.Snapshot
}

// GetSnapshotOk returns a tuple with the Snapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelInventoryType) GetSnapshotOk() ([]ChannelSnapshotType, bool) {
	if o == nil || IsNil(o.Snapshot) {
		return nil, false
	}
	return o.Snapshot, true
}

// HasSnapshot returns a boolean if a field has been set.
func (o *ChannelInventoryType) HasSnapshot() bool {
	if o != nil && !IsNil(o.Snapshot) {
		return true
	}

	return false
}

// SetSnapshot gets a reference to the given []ChannelSnapshotType and assigns it to the Snapshot field.
func (o *ChannelInventoryType) SetSnapshot(v []ChannelSnapshotType) {
	o.Snapshot = v
}

// GetBookingChannelCode returns the BookingChannelCode field value if set, zero value otherwise.
func (o *ChannelInventoryType) GetBookingChannelCode() string {
	if o == nil || IsNil(o.BookingChannelCode) {
		var ret string
		return ret
	}
	return *o.BookingChannelCode
}

// GetBookingChannelCodeOk returns a tuple with the BookingChannelCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelInventoryType) GetBookingChannelCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BookingChannelCode) {
		return nil, false
	}
	return o.BookingChannelCode, true
}

// HasBookingChannelCode returns a boolean if a field has been set.
func (o *ChannelInventoryType) HasBookingChannelCode() bool {
	if o != nil && !IsNil(o.BookingChannelCode) {
		return true
	}

	return false
}

// SetBookingChannelCode gets a reference to the given string and assigns it to the BookingChannelCode field.
func (o *ChannelInventoryType) SetBookingChannelCode(v string) {
	o.BookingChannelCode = &v
}

// GetChannelRoomType returns the ChannelRoomType field value if set, zero value otherwise.
func (o *ChannelInventoryType) GetChannelRoomType() string {
	if o == nil || IsNil(o.ChannelRoomType) {
		var ret string
		return ret
	}
	return *o.ChannelRoomType
}

// GetChannelRoomTypeOk returns a tuple with the ChannelRoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelInventoryType) GetChannelRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ChannelRoomType) {
		return nil, false
	}
	return o.ChannelRoomType, true
}

// HasChannelRoomType returns a boolean if a field has been set.
func (o *ChannelInventoryType) HasChannelRoomType() bool {
	if o != nil && !IsNil(o.ChannelRoomType) {
		return true
	}

	return false
}

// SetChannelRoomType gets a reference to the given string and assigns it to the ChannelRoomType field.
func (o *ChannelInventoryType) SetChannelRoomType(v string) {
	o.ChannelRoomType = &v
}

func (o ChannelInventoryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelInventoryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Snapshot) {
		toSerialize["snapshot"] = o.Snapshot
	}
	if !IsNil(o.BookingChannelCode) {
		toSerialize["bookingChannelCode"] = o.BookingChannelCode
	}
	if !IsNil(o.ChannelRoomType) {
		toSerialize["channelRoomType"] = o.ChannelRoomType
	}
	return toSerialize, nil
}

type NullableChannelInventoryType struct {
	value *ChannelInventoryType
	isSet bool
}

func (v NullableChannelInventoryType) Get() *ChannelInventoryType {
	return v.value
}

func (v *NullableChannelInventoryType) Set(val *ChannelInventoryType) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelInventoryType) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelInventoryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelInventoryType(val *ChannelInventoryType) *NullableChannelInventoryType {
	return &NullableChannelInventoryType{value: val, isSet: true}
}

func (v NullableChannelInventoryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelInventoryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


