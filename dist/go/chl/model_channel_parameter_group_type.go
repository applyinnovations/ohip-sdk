/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ChannelParameterGroupType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelParameterGroupType{}

// ChannelParameterGroupType struct for ChannelParameterGroupType
type ChannelParameterGroupType struct {
	// parameters details.
	ChannelParameters []ChannelParameterType `json:"channelParameters,omitempty"`
	GroupDisplayName *string `json:"groupDisplayName,omitempty"`
	GroupName *string `json:"groupName,omitempty"`
}

// NewChannelParameterGroupType instantiates a new ChannelParameterGroupType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelParameterGroupType() *ChannelParameterGroupType {
	this := ChannelParameterGroupType{}
	return &this
}

// NewChannelParameterGroupTypeWithDefaults instantiates a new ChannelParameterGroupType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelParameterGroupTypeWithDefaults() *ChannelParameterGroupType {
	this := ChannelParameterGroupType{}
	return &this
}

// GetChannelParameters returns the ChannelParameters field value if set, zero value otherwise.
func (o *ChannelParameterGroupType) GetChannelParameters() []ChannelParameterType {
	if o == nil || IsNil(o.ChannelParameters) {
		var ret []ChannelParameterType
		return ret
	}
	return o.ChannelParameters
}

// GetChannelParametersOk returns a tuple with the ChannelParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelParameterGroupType) GetChannelParametersOk() ([]ChannelParameterType, bool) {
	if o == nil || IsNil(o.ChannelParameters) {
		return nil, false
	}
	return o.ChannelParameters, true
}

// HasChannelParameters returns a boolean if a field has been set.
func (o *ChannelParameterGroupType) HasChannelParameters() bool {
	if o != nil && !IsNil(o.ChannelParameters) {
		return true
	}

	return false
}

// SetChannelParameters gets a reference to the given []ChannelParameterType and assigns it to the ChannelParameters field.
func (o *ChannelParameterGroupType) SetChannelParameters(v []ChannelParameterType) {
	o.ChannelParameters = v
}

// GetGroupDisplayName returns the GroupDisplayName field value if set, zero value otherwise.
func (o *ChannelParameterGroupType) GetGroupDisplayName() string {
	if o == nil || IsNil(o.GroupDisplayName) {
		var ret string
		return ret
	}
	return *o.GroupDisplayName
}

// GetGroupDisplayNameOk returns a tuple with the GroupDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelParameterGroupType) GetGroupDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.GroupDisplayName) {
		return nil, false
	}
	return o.GroupDisplayName, true
}

// HasGroupDisplayName returns a boolean if a field has been set.
func (o *ChannelParameterGroupType) HasGroupDisplayName() bool {
	if o != nil && !IsNil(o.GroupDisplayName) {
		return true
	}

	return false
}

// SetGroupDisplayName gets a reference to the given string and assigns it to the GroupDisplayName field.
func (o *ChannelParameterGroupType) SetGroupDisplayName(v string) {
	o.GroupDisplayName = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *ChannelParameterGroupType) GetGroupName() string {
	if o == nil || IsNil(o.GroupName) {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelParameterGroupType) GetGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.GroupName) {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *ChannelParameterGroupType) HasGroupName() bool {
	if o != nil && !IsNil(o.GroupName) {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *ChannelParameterGroupType) SetGroupName(v string) {
	o.GroupName = &v
}

func (o ChannelParameterGroupType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelParameterGroupType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChannelParameters) {
		toSerialize["channelParameters"] = o.ChannelParameters
	}
	if !IsNil(o.GroupDisplayName) {
		toSerialize["groupDisplayName"] = o.GroupDisplayName
	}
	if !IsNil(o.GroupName) {
		toSerialize["groupName"] = o.GroupName
	}
	return toSerialize, nil
}

type NullableChannelParameterGroupType struct {
	value *ChannelParameterGroupType
	isSet bool
}

func (v NullableChannelParameterGroupType) Get() *ChannelParameterGroupType {
	return v.value
}

func (v *NullableChannelParameterGroupType) Set(val *ChannelParameterGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelParameterGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelParameterGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelParameterGroupType(val *ChannelParameterGroupType) *NullableChannelParameterGroupType {
	return &NullableChannelParameterGroupType{value: val, isSet: true}
}

func (v NullableChannelParameterGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelParameterGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


