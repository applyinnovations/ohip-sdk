/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the HotelChannelInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelChannelInfoType{}

// HotelChannelInfoType struct for HotelChannelInfoType
type HotelChannelInfoType struct {
	// Booking Channels mapping for the Hotel Code.
	BookingChannelMappings []BookingChannelMappingType `json:"bookingChannelMappings,omitempty"`
	HotelId *string `json:"hotelId,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewHotelChannelInfoType instantiates a new HotelChannelInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelChannelInfoType() *HotelChannelInfoType {
	this := HotelChannelInfoType{}
	return &this
}

// NewHotelChannelInfoTypeWithDefaults instantiates a new HotelChannelInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelChannelInfoTypeWithDefaults() *HotelChannelInfoType {
	this := HotelChannelInfoType{}
	return &this
}

// GetBookingChannelMappings returns the BookingChannelMappings field value if set, zero value otherwise.
func (o *HotelChannelInfoType) GetBookingChannelMappings() []BookingChannelMappingType {
	if o == nil || IsNil(o.BookingChannelMappings) {
		var ret []BookingChannelMappingType
		return ret
	}
	return o.BookingChannelMappings
}

// GetBookingChannelMappingsOk returns a tuple with the BookingChannelMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelChannelInfoType) GetBookingChannelMappingsOk() ([]BookingChannelMappingType, bool) {
	if o == nil || IsNil(o.BookingChannelMappings) {
		return nil, false
	}
	return o.BookingChannelMappings, true
}

// HasBookingChannelMappings returns a boolean if a field has been set.
func (o *HotelChannelInfoType) HasBookingChannelMappings() bool {
	if o != nil && !IsNil(o.BookingChannelMappings) {
		return true
	}

	return false
}

// SetBookingChannelMappings gets a reference to the given []BookingChannelMappingType and assigns it to the BookingChannelMappings field.
func (o *HotelChannelInfoType) SetBookingChannelMappings(v []BookingChannelMappingType) {
	o.BookingChannelMappings = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *HotelChannelInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelChannelInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *HotelChannelInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *HotelChannelInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HotelChannelInfoType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelChannelInfoType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HotelChannelInfoType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HotelChannelInfoType) SetName(v string) {
	o.Name = &v
}

func (o HotelChannelInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelChannelInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BookingChannelMappings) {
		toSerialize["bookingChannelMappings"] = o.BookingChannelMappings
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableHotelChannelInfoType struct {
	value *HotelChannelInfoType
	isSet bool
}

func (v NullableHotelChannelInfoType) Get() *HotelChannelInfoType {
	return v.value
}

func (v *NullableHotelChannelInfoType) Set(val *HotelChannelInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelChannelInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelChannelInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelChannelInfoType(val *HotelChannelInfoType) *NullableHotelChannelInfoType {
	return &NullableHotelChannelInfoType{value: val, isSet: true}
}

func (v NullableHotelChannelInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelChannelInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


