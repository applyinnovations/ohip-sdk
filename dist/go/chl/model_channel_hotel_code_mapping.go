/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ChannelHotelCodeMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelHotelCodeMapping{}

// ChannelHotelCodeMapping Response giving OPERA hotel code mapped to channel hotel code for a booking channel and vice versa.
type ChannelHotelCodeMapping struct {
	// Channel code for which the hotel code mapping information is needed.
	ChannelCode *string `json:"channelCode,omitempty"`
	HotelInfo *HotelCodeMappingInfoType `json:"hotelInfo,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewChannelHotelCodeMapping instantiates a new ChannelHotelCodeMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelHotelCodeMapping() *ChannelHotelCodeMapping {
	this := ChannelHotelCodeMapping{}
	return &this
}

// NewChannelHotelCodeMappingWithDefaults instantiates a new ChannelHotelCodeMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelHotelCodeMappingWithDefaults() *ChannelHotelCodeMapping {
	this := ChannelHotelCodeMapping{}
	return &this
}

// GetChannelCode returns the ChannelCode field value if set, zero value otherwise.
func (o *ChannelHotelCodeMapping) GetChannelCode() string {
	if o == nil || IsNil(o.ChannelCode) {
		var ret string
		return ret
	}
	return *o.ChannelCode
}

// GetChannelCodeOk returns a tuple with the ChannelCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelHotelCodeMapping) GetChannelCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ChannelCode) {
		return nil, false
	}
	return o.ChannelCode, true
}

// HasChannelCode returns a boolean if a field has been set.
func (o *ChannelHotelCodeMapping) HasChannelCode() bool {
	if o != nil && !IsNil(o.ChannelCode) {
		return true
	}

	return false
}

// SetChannelCode gets a reference to the given string and assigns it to the ChannelCode field.
func (o *ChannelHotelCodeMapping) SetChannelCode(v string) {
	o.ChannelCode = &v
}

// GetHotelInfo returns the HotelInfo field value if set, zero value otherwise.
func (o *ChannelHotelCodeMapping) GetHotelInfo() HotelCodeMappingInfoType {
	if o == nil || IsNil(o.HotelInfo) {
		var ret HotelCodeMappingInfoType
		return ret
	}
	return *o.HotelInfo
}

// GetHotelInfoOk returns a tuple with the HotelInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelHotelCodeMapping) GetHotelInfoOk() (*HotelCodeMappingInfoType, bool) {
	if o == nil || IsNil(o.HotelInfo) {
		return nil, false
	}
	return o.HotelInfo, true
}

// HasHotelInfo returns a boolean if a field has been set.
func (o *ChannelHotelCodeMapping) HasHotelInfo() bool {
	if o != nil && !IsNil(o.HotelInfo) {
		return true
	}

	return false
}

// SetHotelInfo gets a reference to the given HotelCodeMappingInfoType and assigns it to the HotelInfo field.
func (o *ChannelHotelCodeMapping) SetHotelInfo(v HotelCodeMappingInfoType) {
	o.HotelInfo = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ChannelHotelCodeMapping) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelHotelCodeMapping) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ChannelHotelCodeMapping) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *ChannelHotelCodeMapping) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ChannelHotelCodeMapping) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelHotelCodeMapping) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ChannelHotelCodeMapping) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ChannelHotelCodeMapping) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ChannelHotelCodeMapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelHotelCodeMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChannelCode) {
		toSerialize["channelCode"] = o.ChannelCode
	}
	if !IsNil(o.HotelInfo) {
		toSerialize["hotelInfo"] = o.HotelInfo
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableChannelHotelCodeMapping struct {
	value *ChannelHotelCodeMapping
	isSet bool
}

func (v NullableChannelHotelCodeMapping) Get() *ChannelHotelCodeMapping {
	return v.value
}

func (v *NullableChannelHotelCodeMapping) Set(val *ChannelHotelCodeMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelHotelCodeMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelHotelCodeMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelHotelCodeMapping(val *ChannelHotelCodeMapping) *NullableChannelHotelCodeMapping {
	return &NullableChannelHotelCodeMapping{value: val, isSet: true}
}

func (v NullableChannelHotelCodeMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelHotelCodeMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


