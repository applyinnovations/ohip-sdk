/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ParityRateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParityRateType{}

// ParityRateType Minimum and Maximum Rate on specific arrival date.
type ParityRateType struct {
	AdditionalAmounts []AdditionalAmountType `json:"additionalAmounts,omitempty"`
	AdditionalDetailList []AdditionalDetailType `json:"additionalDetailList,omitempty"`
	// A monetary amount.
	Amount *float32 `json:"amount,omitempty"`
	// Arrival Date.
	ArrivalDate *string `json:"arrivalDate,omitempty"`
	AvailableRooms *int32 `json:"availableRooms,omitempty"`
	ChannelRatePlanCategory *string `json:"channelRatePlanCategory,omitempty"`
	Closed *bool `json:"closed,omitempty"`
	// Provides a currency code to reflect the currency in which an amount may be expressed.
	CurrencyCode *string `json:"currencyCode,omitempty"`
	RateAmounts *ParityRateTypeRateAmounts `json:"rateAmounts,omitempty"`
	RateChangesOverDays *bool `json:"rateChangesOverDays,omitempty"`
	RateDescription *EnhancedDescriptionType `json:"rateDescription,omitempty"`
	RateFrequency *string `json:"rateFrequency,omitempty"`
	RatePlanDescription *string `json:"ratePlanDescription,omitempty"`
	RoomTypeDescription *EnhancedDescriptionType `json:"roomTypeDescription,omitempty"`
	// Status Code related to functionality.
	StatusCode *string `json:"statusCode,omitempty"`
	// Description of Status Code.
	StatusDescription *string `json:"statusDescription,omitempty"`
	TotalPricingAmounts *ParityRateTypeTotalPricingAmounts `json:"totalPricingAmounts,omitempty"`
	WeekendDay *bool `json:"weekendDay,omitempty"`
}

// NewParityRateType instantiates a new ParityRateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParityRateType() *ParityRateType {
	this := ParityRateType{}
	return &this
}

// NewParityRateTypeWithDefaults instantiates a new ParityRateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParityRateTypeWithDefaults() *ParityRateType {
	this := ParityRateType{}
	return &this
}

// GetAdditionalAmounts returns the AdditionalAmounts field value if set, zero value otherwise.
func (o *ParityRateType) GetAdditionalAmounts() []AdditionalAmountType {
	if o == nil || IsNil(o.AdditionalAmounts) {
		var ret []AdditionalAmountType
		return ret
	}
	return o.AdditionalAmounts
}

// GetAdditionalAmountsOk returns a tuple with the AdditionalAmounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRateType) GetAdditionalAmountsOk() ([]AdditionalAmountType, bool) {
	if o == nil || IsNil(o.AdditionalAmounts) {
		return nil, false
	}
	return o.AdditionalAmounts, true
}

// HasAdditionalAmounts returns a boolean if a field has been set.
func (o *ParityRateType) HasAdditionalAmounts() bool {
	if o != nil && !IsNil(o.AdditionalAmounts) {
		return true
	}

	return false
}

// SetAdditionalAmounts gets a reference to the given []AdditionalAmountType and assigns it to the AdditionalAmounts field.
func (o *ParityRateType) SetAdditionalAmounts(v []AdditionalAmountType) {
	o.AdditionalAmounts = v
}

// GetAdditionalDetailList returns the AdditionalDetailList field value if set, zero value otherwise.
func (o *ParityRateType) GetAdditionalDetailList() []AdditionalDetailType {
	if o == nil || IsNil(o.AdditionalDetailList) {
		var ret []AdditionalDetailType
		return ret
	}
	return o.AdditionalDetailList
}

// GetAdditionalDetailListOk returns a tuple with the AdditionalDetailList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRateType) GetAdditionalDetailListOk() ([]AdditionalDetailType, bool) {
	if o == nil || IsNil(o.AdditionalDetailList) {
		return nil, false
	}
	return o.AdditionalDetailList, true
}

// HasAdditionalDetailList returns a boolean if a field has been set.
func (o *ParityRateType) HasAdditionalDetailList() bool {
	if o != nil && !IsNil(o.AdditionalDetailList) {
		return true
	}

	return false
}

// SetAdditionalDetailList gets a reference to the given []AdditionalDetailType and assigns it to the AdditionalDetailList field.
func (o *ParityRateType) SetAdditionalDetailList(v []AdditionalDetailType) {
	o.AdditionalDetailList = v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *ParityRateType) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRateType) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *ParityRateType) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *ParityRateType) SetAmount(v float32) {
	o.Amount = &v
}

// GetArrivalDate returns the ArrivalDate field value if set, zero value otherwise.
func (o *ParityRateType) GetArrivalDate() string {
	if o == nil || IsNil(o.ArrivalDate) {
		var ret string
		return ret
	}
	return *o.ArrivalDate
}

// GetArrivalDateOk returns a tuple with the ArrivalDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRateType) GetArrivalDateOk() (*string, bool) {
	if o == nil || IsNil(o.ArrivalDate) {
		return nil, false
	}
	return o.ArrivalDate, true
}

// HasArrivalDate returns a boolean if a field has been set.
func (o *ParityRateType) HasArrivalDate() bool {
	if o != nil && !IsNil(o.ArrivalDate) {
		return true
	}

	return false
}

// SetArrivalDate gets a reference to the given string and assigns it to the ArrivalDate field.
func (o *ParityRateType) SetArrivalDate(v string) {
	o.ArrivalDate = &v
}

// GetAvailableRooms returns the AvailableRooms field value if set, zero value otherwise.
func (o *ParityRateType) GetAvailableRooms() int32 {
	if o == nil || IsNil(o.AvailableRooms) {
		var ret int32
		return ret
	}
	return *o.AvailableRooms
}

// GetAvailableRoomsOk returns a tuple with the AvailableRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRateType) GetAvailableRoomsOk() (*int32, bool) {
	if o == nil || IsNil(o.AvailableRooms) {
		return nil, false
	}
	return o.AvailableRooms, true
}

// HasAvailableRooms returns a boolean if a field has been set.
func (o *ParityRateType) HasAvailableRooms() bool {
	if o != nil && !IsNil(o.AvailableRooms) {
		return true
	}

	return false
}

// SetAvailableRooms gets a reference to the given int32 and assigns it to the AvailableRooms field.
func (o *ParityRateType) SetAvailableRooms(v int32) {
	o.AvailableRooms = &v
}

// GetChannelRatePlanCategory returns the ChannelRatePlanCategory field value if set, zero value otherwise.
func (o *ParityRateType) GetChannelRatePlanCategory() string {
	if o == nil || IsNil(o.ChannelRatePlanCategory) {
		var ret string
		return ret
	}
	return *o.ChannelRatePlanCategory
}

// GetChannelRatePlanCategoryOk returns a tuple with the ChannelRatePlanCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRateType) GetChannelRatePlanCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.ChannelRatePlanCategory) {
		return nil, false
	}
	return o.ChannelRatePlanCategory, true
}

// HasChannelRatePlanCategory returns a boolean if a field has been set.
func (o *ParityRateType) HasChannelRatePlanCategory() bool {
	if o != nil && !IsNil(o.ChannelRatePlanCategory) {
		return true
	}

	return false
}

// SetChannelRatePlanCategory gets a reference to the given string and assigns it to the ChannelRatePlanCategory field.
func (o *ParityRateType) SetChannelRatePlanCategory(v string) {
	o.ChannelRatePlanCategory = &v
}

// GetClosed returns the Closed field value if set, zero value otherwise.
func (o *ParityRateType) GetClosed() bool {
	if o == nil || IsNil(o.Closed) {
		var ret bool
		return ret
	}
	return *o.Closed
}

// GetClosedOk returns a tuple with the Closed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRateType) GetClosedOk() (*bool, bool) {
	if o == nil || IsNil(o.Closed) {
		return nil, false
	}
	return o.Closed, true
}

// HasClosed returns a boolean if a field has been set.
func (o *ParityRateType) HasClosed() bool {
	if o != nil && !IsNil(o.Closed) {
		return true
	}

	return false
}

// SetClosed gets a reference to the given bool and assigns it to the Closed field.
func (o *ParityRateType) SetClosed(v bool) {
	o.Closed = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *ParityRateType) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRateType) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *ParityRateType) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *ParityRateType) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetRateAmounts returns the RateAmounts field value if set, zero value otherwise.
func (o *ParityRateType) GetRateAmounts() ParityRateTypeRateAmounts {
	if o == nil || IsNil(o.RateAmounts) {
		var ret ParityRateTypeRateAmounts
		return ret
	}
	return *o.RateAmounts
}

// GetRateAmountsOk returns a tuple with the RateAmounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRateType) GetRateAmountsOk() (*ParityRateTypeRateAmounts, bool) {
	if o == nil || IsNil(o.RateAmounts) {
		return nil, false
	}
	return o.RateAmounts, true
}

// HasRateAmounts returns a boolean if a field has been set.
func (o *ParityRateType) HasRateAmounts() bool {
	if o != nil && !IsNil(o.RateAmounts) {
		return true
	}

	return false
}

// SetRateAmounts gets a reference to the given ParityRateTypeRateAmounts and assigns it to the RateAmounts field.
func (o *ParityRateType) SetRateAmounts(v ParityRateTypeRateAmounts) {
	o.RateAmounts = &v
}

// GetRateChangesOverDays returns the RateChangesOverDays field value if set, zero value otherwise.
func (o *ParityRateType) GetRateChangesOverDays() bool {
	if o == nil || IsNil(o.RateChangesOverDays) {
		var ret bool
		return ret
	}
	return *o.RateChangesOverDays
}

// GetRateChangesOverDaysOk returns a tuple with the RateChangesOverDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRateType) GetRateChangesOverDaysOk() (*bool, bool) {
	if o == nil || IsNil(o.RateChangesOverDays) {
		return nil, false
	}
	return o.RateChangesOverDays, true
}

// HasRateChangesOverDays returns a boolean if a field has been set.
func (o *ParityRateType) HasRateChangesOverDays() bool {
	if o != nil && !IsNil(o.RateChangesOverDays) {
		return true
	}

	return false
}

// SetRateChangesOverDays gets a reference to the given bool and assigns it to the RateChangesOverDays field.
func (o *ParityRateType) SetRateChangesOverDays(v bool) {
	o.RateChangesOverDays = &v
}

// GetRateDescription returns the RateDescription field value if set, zero value otherwise.
func (o *ParityRateType) GetRateDescription() EnhancedDescriptionType {
	if o == nil || IsNil(o.RateDescription) {
		var ret EnhancedDescriptionType
		return ret
	}
	return *o.RateDescription
}

// GetRateDescriptionOk returns a tuple with the RateDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRateType) GetRateDescriptionOk() (*EnhancedDescriptionType, bool) {
	if o == nil || IsNil(o.RateDescription) {
		return nil, false
	}
	return o.RateDescription, true
}

// HasRateDescription returns a boolean if a field has been set.
func (o *ParityRateType) HasRateDescription() bool {
	if o != nil && !IsNil(o.RateDescription) {
		return true
	}

	return false
}

// SetRateDescription gets a reference to the given EnhancedDescriptionType and assigns it to the RateDescription field.
func (o *ParityRateType) SetRateDescription(v EnhancedDescriptionType) {
	o.RateDescription = &v
}

// GetRateFrequency returns the RateFrequency field value if set, zero value otherwise.
func (o *ParityRateType) GetRateFrequency() string {
	if o == nil || IsNil(o.RateFrequency) {
		var ret string
		return ret
	}
	return *o.RateFrequency
}

// GetRateFrequencyOk returns a tuple with the RateFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRateType) GetRateFrequencyOk() (*string, bool) {
	if o == nil || IsNil(o.RateFrequency) {
		return nil, false
	}
	return o.RateFrequency, true
}

// HasRateFrequency returns a boolean if a field has been set.
func (o *ParityRateType) HasRateFrequency() bool {
	if o != nil && !IsNil(o.RateFrequency) {
		return true
	}

	return false
}

// SetRateFrequency gets a reference to the given string and assigns it to the RateFrequency field.
func (o *ParityRateType) SetRateFrequency(v string) {
	o.RateFrequency = &v
}

// GetRatePlanDescription returns the RatePlanDescription field value if set, zero value otherwise.
func (o *ParityRateType) GetRatePlanDescription() string {
	if o == nil || IsNil(o.RatePlanDescription) {
		var ret string
		return ret
	}
	return *o.RatePlanDescription
}

// GetRatePlanDescriptionOk returns a tuple with the RatePlanDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRateType) GetRatePlanDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.RatePlanDescription) {
		return nil, false
	}
	return o.RatePlanDescription, true
}

// HasRatePlanDescription returns a boolean if a field has been set.
func (o *ParityRateType) HasRatePlanDescription() bool {
	if o != nil && !IsNil(o.RatePlanDescription) {
		return true
	}

	return false
}

// SetRatePlanDescription gets a reference to the given string and assigns it to the RatePlanDescription field.
func (o *ParityRateType) SetRatePlanDescription(v string) {
	o.RatePlanDescription = &v
}

// GetRoomTypeDescription returns the RoomTypeDescription field value if set, zero value otherwise.
func (o *ParityRateType) GetRoomTypeDescription() EnhancedDescriptionType {
	if o == nil || IsNil(o.RoomTypeDescription) {
		var ret EnhancedDescriptionType
		return ret
	}
	return *o.RoomTypeDescription
}

// GetRoomTypeDescriptionOk returns a tuple with the RoomTypeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRateType) GetRoomTypeDescriptionOk() (*EnhancedDescriptionType, bool) {
	if o == nil || IsNil(o.RoomTypeDescription) {
		return nil, false
	}
	return o.RoomTypeDescription, true
}

// HasRoomTypeDescription returns a boolean if a field has been set.
func (o *ParityRateType) HasRoomTypeDescription() bool {
	if o != nil && !IsNil(o.RoomTypeDescription) {
		return true
	}

	return false
}

// SetRoomTypeDescription gets a reference to the given EnhancedDescriptionType and assigns it to the RoomTypeDescription field.
func (o *ParityRateType) SetRoomTypeDescription(v EnhancedDescriptionType) {
	o.RoomTypeDescription = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *ParityRateType) GetStatusCode() string {
	if o == nil || IsNil(o.StatusCode) {
		var ret string
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRateType) GetStatusCodeOk() (*string, bool) {
	if o == nil || IsNil(o.StatusCode) {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *ParityRateType) HasStatusCode() bool {
	if o != nil && !IsNil(o.StatusCode) {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given string and assigns it to the StatusCode field.
func (o *ParityRateType) SetStatusCode(v string) {
	o.StatusCode = &v
}

// GetStatusDescription returns the StatusDescription field value if set, zero value otherwise.
func (o *ParityRateType) GetStatusDescription() string {
	if o == nil || IsNil(o.StatusDescription) {
		var ret string
		return ret
	}
	return *o.StatusDescription
}

// GetStatusDescriptionOk returns a tuple with the StatusDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRateType) GetStatusDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.StatusDescription) {
		return nil, false
	}
	return o.StatusDescription, true
}

// HasStatusDescription returns a boolean if a field has been set.
func (o *ParityRateType) HasStatusDescription() bool {
	if o != nil && !IsNil(o.StatusDescription) {
		return true
	}

	return false
}

// SetStatusDescription gets a reference to the given string and assigns it to the StatusDescription field.
func (o *ParityRateType) SetStatusDescription(v string) {
	o.StatusDescription = &v
}

// GetTotalPricingAmounts returns the TotalPricingAmounts field value if set, zero value otherwise.
func (o *ParityRateType) GetTotalPricingAmounts() ParityRateTypeTotalPricingAmounts {
	if o == nil || IsNil(o.TotalPricingAmounts) {
		var ret ParityRateTypeTotalPricingAmounts
		return ret
	}
	return *o.TotalPricingAmounts
}

// GetTotalPricingAmountsOk returns a tuple with the TotalPricingAmounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRateType) GetTotalPricingAmountsOk() (*ParityRateTypeTotalPricingAmounts, bool) {
	if o == nil || IsNil(o.TotalPricingAmounts) {
		return nil, false
	}
	return o.TotalPricingAmounts, true
}

// HasTotalPricingAmounts returns a boolean if a field has been set.
func (o *ParityRateType) HasTotalPricingAmounts() bool {
	if o != nil && !IsNil(o.TotalPricingAmounts) {
		return true
	}

	return false
}

// SetTotalPricingAmounts gets a reference to the given ParityRateTypeTotalPricingAmounts and assigns it to the TotalPricingAmounts field.
func (o *ParityRateType) SetTotalPricingAmounts(v ParityRateTypeTotalPricingAmounts) {
	o.TotalPricingAmounts = &v
}

// GetWeekendDay returns the WeekendDay field value if set, zero value otherwise.
func (o *ParityRateType) GetWeekendDay() bool {
	if o == nil || IsNil(o.WeekendDay) {
		var ret bool
		return ret
	}
	return *o.WeekendDay
}

// GetWeekendDayOk returns a tuple with the WeekendDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRateType) GetWeekendDayOk() (*bool, bool) {
	if o == nil || IsNil(o.WeekendDay) {
		return nil, false
	}
	return o.WeekendDay, true
}

// HasWeekendDay returns a boolean if a field has been set.
func (o *ParityRateType) HasWeekendDay() bool {
	if o != nil && !IsNil(o.WeekendDay) {
		return true
	}

	return false
}

// SetWeekendDay gets a reference to the given bool and assigns it to the WeekendDay field.
func (o *ParityRateType) SetWeekendDay(v bool) {
	o.WeekendDay = &v
}

func (o ParityRateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParityRateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalAmounts) {
		toSerialize["additionalAmounts"] = o.AdditionalAmounts
	}
	if !IsNil(o.AdditionalDetailList) {
		toSerialize["additionalDetailList"] = o.AdditionalDetailList
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.ArrivalDate) {
		toSerialize["arrivalDate"] = o.ArrivalDate
	}
	if !IsNil(o.AvailableRooms) {
		toSerialize["availableRooms"] = o.AvailableRooms
	}
	if !IsNil(o.ChannelRatePlanCategory) {
		toSerialize["channelRatePlanCategory"] = o.ChannelRatePlanCategory
	}
	if !IsNil(o.Closed) {
		toSerialize["closed"] = o.Closed
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.RateAmounts) {
		toSerialize["rateAmounts"] = o.RateAmounts
	}
	if !IsNil(o.RateChangesOverDays) {
		toSerialize["rateChangesOverDays"] = o.RateChangesOverDays
	}
	if !IsNil(o.RateDescription) {
		toSerialize["rateDescription"] = o.RateDescription
	}
	if !IsNil(o.RateFrequency) {
		toSerialize["rateFrequency"] = o.RateFrequency
	}
	if !IsNil(o.RatePlanDescription) {
		toSerialize["ratePlanDescription"] = o.RatePlanDescription
	}
	if !IsNil(o.RoomTypeDescription) {
		toSerialize["roomTypeDescription"] = o.RoomTypeDescription
	}
	if !IsNil(o.StatusCode) {
		toSerialize["statusCode"] = o.StatusCode
	}
	if !IsNil(o.StatusDescription) {
		toSerialize["statusDescription"] = o.StatusDescription
	}
	if !IsNil(o.TotalPricingAmounts) {
		toSerialize["totalPricingAmounts"] = o.TotalPricingAmounts
	}
	if !IsNil(o.WeekendDay) {
		toSerialize["weekendDay"] = o.WeekendDay
	}
	return toSerialize, nil
}

type NullableParityRateType struct {
	value *ParityRateType
	isSet bool
}

func (v NullableParityRateType) Get() *ParityRateType {
	return v.value
}

func (v *NullableParityRateType) Set(val *ParityRateType) {
	v.value = val
	v.isSet = true
}

func (v NullableParityRateType) IsSet() bool {
	return v.isSet
}

func (v *NullableParityRateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParityRateType(val *ParityRateType) *NullableParityRateType {
	return &NullableParityRateType{value: val, isSet: true}
}

func (v NullableParityRateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParityRateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


