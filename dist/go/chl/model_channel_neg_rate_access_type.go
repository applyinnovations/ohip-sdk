/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ChannelNegRateAccessType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelNegRateAccessType{}

// ChannelNegRateAccessType struct for ChannelNegRateAccessType
type ChannelNegRateAccessType struct {
	AccessInfoDetail *ChannelNegRateAccessDetailType `json:"accessInfoDetail,omitempty"`
	AccessCode *string `json:"accessCode,omitempty"`
	// The starting value of the date range.
	Start *string `json:"start,omitempty"`
	// The ending value of the date range.
	End *string `json:"end,omitempty"`
}

// NewChannelNegRateAccessType instantiates a new ChannelNegRateAccessType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelNegRateAccessType() *ChannelNegRateAccessType {
	this := ChannelNegRateAccessType{}
	return &this
}

// NewChannelNegRateAccessTypeWithDefaults instantiates a new ChannelNegRateAccessType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelNegRateAccessTypeWithDefaults() *ChannelNegRateAccessType {
	this := ChannelNegRateAccessType{}
	return &this
}

// GetAccessInfoDetail returns the AccessInfoDetail field value if set, zero value otherwise.
func (o *ChannelNegRateAccessType) GetAccessInfoDetail() ChannelNegRateAccessDetailType {
	if o == nil || IsNil(o.AccessInfoDetail) {
		var ret ChannelNegRateAccessDetailType
		return ret
	}
	return *o.AccessInfoDetail
}

// GetAccessInfoDetailOk returns a tuple with the AccessInfoDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelNegRateAccessType) GetAccessInfoDetailOk() (*ChannelNegRateAccessDetailType, bool) {
	if o == nil || IsNil(o.AccessInfoDetail) {
		return nil, false
	}
	return o.AccessInfoDetail, true
}

// HasAccessInfoDetail returns a boolean if a field has been set.
func (o *ChannelNegRateAccessType) HasAccessInfoDetail() bool {
	if o != nil && !IsNil(o.AccessInfoDetail) {
		return true
	}

	return false
}

// SetAccessInfoDetail gets a reference to the given ChannelNegRateAccessDetailType and assigns it to the AccessInfoDetail field.
func (o *ChannelNegRateAccessType) SetAccessInfoDetail(v ChannelNegRateAccessDetailType) {
	o.AccessInfoDetail = &v
}

// GetAccessCode returns the AccessCode field value if set, zero value otherwise.
func (o *ChannelNegRateAccessType) GetAccessCode() string {
	if o == nil || IsNil(o.AccessCode) {
		var ret string
		return ret
	}
	return *o.AccessCode
}

// GetAccessCodeOk returns a tuple with the AccessCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelNegRateAccessType) GetAccessCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AccessCode) {
		return nil, false
	}
	return o.AccessCode, true
}

// HasAccessCode returns a boolean if a field has been set.
func (o *ChannelNegRateAccessType) HasAccessCode() bool {
	if o != nil && !IsNil(o.AccessCode) {
		return true
	}

	return false
}

// SetAccessCode gets a reference to the given string and assigns it to the AccessCode field.
func (o *ChannelNegRateAccessType) SetAccessCode(v string) {
	o.AccessCode = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *ChannelNegRateAccessType) GetStart() string {
	if o == nil || IsNil(o.Start) {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelNegRateAccessType) GetStartOk() (*string, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *ChannelNegRateAccessType) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *ChannelNegRateAccessType) SetStart(v string) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *ChannelNegRateAccessType) GetEnd() string {
	if o == nil || IsNil(o.End) {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelNegRateAccessType) GetEndOk() (*string, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *ChannelNegRateAccessType) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *ChannelNegRateAccessType) SetEnd(v string) {
	o.End = &v
}

func (o ChannelNegRateAccessType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelNegRateAccessType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessInfoDetail) {
		toSerialize["accessInfoDetail"] = o.AccessInfoDetail
	}
	if !IsNil(o.AccessCode) {
		toSerialize["accessCode"] = o.AccessCode
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	return toSerialize, nil
}

type NullableChannelNegRateAccessType struct {
	value *ChannelNegRateAccessType
	isSet bool
}

func (v NullableChannelNegRateAccessType) Get() *ChannelNegRateAccessType {
	return v.value
}

func (v *NullableChannelNegRateAccessType) Set(val *ChannelNegRateAccessType) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelNegRateAccessType) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelNegRateAccessType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelNegRateAccessType(val *ChannelNegRateAccessType) *NullableChannelNegRateAccessType {
	return &NullableChannelNegRateAccessType{value: val, isSet: true}
}

func (v NullableChannelNegRateAccessType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelNegRateAccessType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


