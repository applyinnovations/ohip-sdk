/*
OPERA Cloud Channel Configuration API

Testing ChannelAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package chl

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/chl"
)

func Test_chl_ChannelAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ChannelAPIService CopyChannelAccountContracts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.CopyChannelAccountContracts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService CopyChannelMarketingText", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.CopyChannelMarketingText(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService CopyTotalPricingElements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.CopyTotalPricingElements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteAmenitiesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.DeleteAmenitiesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteChannelAccountContracts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.DeleteChannelAccountContracts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteChannelBillingStatements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.DeleteChannelBillingStatements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteChannelCardTypeMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cardTypeCode string
		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelAPI.DeleteChannelCardTypeMapping(context.Background(), cardTypeCode, channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteChannelCarriers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.DeleteChannelCarriers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteChannelErrors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.DeleteChannelErrors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteChannelGuaranteeCodeMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guaranteeCode string
		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelAPI.DeleteChannelGuaranteeCodeMapping(context.Background(), guaranteeCode, channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteChannelHotelLetters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.DeleteChannelHotelLetters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteChannelMarketingText", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.DeleteChannelMarketingText(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteChannelNegotiatedRate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.DeleteChannelNegotiatedRate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteChannelOrgMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantCode string
		var channelCode string

		resp, httpRes, err := apiClient.ChannelAPI.DeleteChannelOrgMapping(context.Background(), tenantCode, channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteChannelRateCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.DeleteChannelRateCategories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteChannelRateLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.DeleteChannelRateLevels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteChannelRateMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.DeleteChannelRateMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteChannelRatesGlobalDescriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.DeleteChannelRatesGlobalDescriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteChannelRoomMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomTypeCode string
		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelAPI.DeleteChannelRoomMapping(context.Background(), roomTypeCode, channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteChannelRoomTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.DeleteChannelRoomTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteChannelRoomsGlobalDescriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.DeleteChannelRoomsGlobalDescriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteCreditCardsMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.DeleteCreditCardsMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteCurrenciesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.DeleteCurrenciesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteDistributionTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.DeleteDistributionTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteGuaranteesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.DeleteGuaranteesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteHotelsMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.DeleteHotelsMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteProfileNegRateAccessCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string

		resp, httpRes, err := apiClient.ChannelAPI.DeleteProfileNegRateAccessCodes(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService DeleteTotalPricingElements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.DeleteTotalPricingElements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GenerateChannelBillingStatements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.GenerateChannelBillingStatements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetAmenitiesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.GetAmenitiesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelAPI.GetChannel(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountProfileId string

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelAccount(context.Background(), accountProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelAccountContractElements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contractId string
		var accountProfileId string

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelAccountContractElements(context.Background(), contractId, accountProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelAccounts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelBillingStatement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var statementId string

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelBillingStatement(context.Background(), statementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelBillingStatementDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var statementId string

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelBillingStatementDetails(context.Background(), statementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelBillingStatements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelBillingStatements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelCardTypeMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelCardTypeMappings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelGuaranteeCodeMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelGuaranteeCodeMappings(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelHotelCodeMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelHotelCodeMapping(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelHotelLetters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelHotelLetters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelMarketingText", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelMarketingText(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelNegotiatedRate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelNegotiatedRate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelNegotiatedRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelNegotiatedRates(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelOrgMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantCode string
		var channelCode string

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelOrgMapping(context.Background(), tenantCode, channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelParameters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelParameters(context.Background(), channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelPolicies(context.Background(), channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelRateCodeGlobalDesc", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelRateCodeGlobalDesc(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelRateMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelRateMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelRateRoomSeq", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelRateRoomSeq(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelRatesGlobalDescriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelRatesGlobalDescriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelRoomMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelRoomMapping(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelRoomMappingById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomTypeCode string
		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelRoomMappingById(context.Background(), roomTypeCode, channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelRoomTypeGlobalDesc", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomType string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelRoomTypeGlobalDesc(context.Background(), roomType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannelRoomsGlobalDescriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.GetChannelRoomsGlobalDescriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetChannels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.GetChannels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetCreditCardsMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.GetCreditCardsMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetCurrenciesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.GetCurrenciesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetDistributionTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.GetDistributionTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetGuaranteesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.GetGuaranteesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetHotelsMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.GetHotelsMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetStatementDetailsStatistics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var statementId string

		resp, httpRes, err := apiClient.ChannelAPI.GetStatementDetailsStatistics(context.Background(), statementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService GetTotalPricingElements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ChannelAPI.GetTotalPricingElements(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService ManageChannelRoomMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.ManageChannelRoomMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostAmenitiesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PostAmenitiesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostChannelAccountContracts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountProfileId string

		resp, httpRes, err := apiClient.ChannelAPI.PostChannelAccountContracts(context.Background(), accountProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostChannelAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PostChannelAccounts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostChannelBillingStatements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PostChannelBillingStatements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostChannelCardTypeMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cardTypeCode string
		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelAPI.PostChannelCardTypeMapping(context.Background(), cardTypeCode, channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostChannelCarriers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelAPI.PostChannelCarriers(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostChannelErrors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelAPI.PostChannelErrors(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostChannelGuaranteeCodeMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guaranteeCode string
		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelAPI.PostChannelGuaranteeCodeMapping(context.Background(), guaranteeCode, channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostChannelHotelLetters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PostChannelHotelLetters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostChannelMarketingText", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PostChannelMarketingText(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostChannelNegotiatedRate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PostChannelNegotiatedRate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostChannelOrgMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelAPI.PostChannelOrgMapping(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostChannelRateCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelAPI.PostChannelRateCategories(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostChannelRateLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelAPI.PostChannelRateLevels(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostChannelRateMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PostChannelRateMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostChannelRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ChannelAPI.PostChannelRates(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostChannelRatesGlobalDescriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PostChannelRatesGlobalDescriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostChannelRoomMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PostChannelRoomMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostChannelRoomTypeRate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelRoomType string
		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelAPI.PostChannelRoomTypeRate(context.Background(), channelRoomType, channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostChannelRoomTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelAPI.PostChannelRoomTypes(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostChannelRoomsGlobalDescriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PostChannelRoomsGlobalDescriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostChannels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PostChannels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostCreditCardsMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PostCreditCardsMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostCurrenciesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PostCurrenciesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostDistributionTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PostDistributionTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostGuaranteesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PostGuaranteesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostHotelsMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PostHotelsMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PostTotalPricingElements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PostTotalPricingElements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PublishChannelAvailability", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PublishChannelAvailability(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PublishChannelRatePlans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelAPI.PublishChannelRatePlans(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PublishChannelRestrictions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PublishChannelRestrictions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PublishHotelChannelRatePlans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ChannelAPI.PublishHotelChannelRatePlans(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutAmenitiesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PutAmenitiesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutChannelAccountContracts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountProfileId string

		resp, httpRes, err := apiClient.ChannelAPI.PutChannelAccountContracts(context.Background(), accountProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutChannelAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PutChannelAccounts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutChannelBillingStatements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PutChannelBillingStatements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutChannelCardTypeMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cardTypeCode string
		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelAPI.PutChannelCardTypeMapping(context.Background(), cardTypeCode, channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutChannelCarriers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelAPI.PutChannelCarriers(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutChannelErrors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelAPI.PutChannelErrors(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutChannelGuaranteeCodeMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guaranteeCode string
		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelAPI.PutChannelGuaranteeCodeMapping(context.Background(), guaranteeCode, channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutChannelHotelLetters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PutChannelHotelLetters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutChannelMarketingText", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PutChannelMarketingText(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutChannelNegotiatedRate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PutChannelNegotiatedRate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutChannelOrgMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantCode string
		var channelCode string

		resp, httpRes, err := apiClient.ChannelAPI.PutChannelOrgMapping(context.Background(), tenantCode, channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutChannelParameters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelAPI.PutChannelParameters(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutChannelRateCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelAPI.PutChannelRateCategories(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutChannelRateLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelAPI.PutChannelRateLevels(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutChannelRateMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PutChannelRateMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutChannelRateRoomSeq", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PutChannelRateRoomSeq(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutChannelRatesGlobalDescriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PutChannelRatesGlobalDescriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutChannelRoomMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomTypeCode string
		var channelCode string
		var hotelId string

		resp, httpRes, err := apiClient.ChannelAPI.PutChannelRoomMapping(context.Background(), roomTypeCode, channelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutChannelRoomTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string

		resp, httpRes, err := apiClient.ChannelAPI.PutChannelRoomTypes(context.Background(), channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutChannelRoomsGlobalDescriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PutChannelRoomsGlobalDescriptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutChannels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PutChannels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutCreditCardsMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PutCreditCardsMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutCurrenciesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PutCurrenciesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutDistributionTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PutDistributionTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutGuaranteesMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PutGuaranteesMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutHotelsMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PutHotelsMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutProfileNegRateAccessCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string

		resp, httpRes, err := apiClient.ChannelAPI.PutProfileNegRateAccessCodes(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutRateGlobalDescription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelRateCode string
		var channelCode string

		resp, httpRes, err := apiClient.ChannelAPI.PutRateGlobalDescription(context.Background(), channelRateCode, channelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutRoomDescription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PutRoomDescription(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService PutTotalPricingElements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelAPI.PutTotalPricingElements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelAPIService SyncProfileNegRateAccessCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string

		resp, httpRes, err := apiClient.ChannelAPI.SyncProfileNegRateAccessCodes(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
