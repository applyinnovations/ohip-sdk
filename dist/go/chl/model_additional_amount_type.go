/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the AdditionalAmountType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdditionalAmountType{}

// AdditionalAmountType struct for AdditionalAmountType
type AdditionalAmountType struct {
	// A monetary amount.
	Amount *float32 `json:"amount,omitempty"`
	AmountType *string `json:"amountType,omitempty"`
	// Provides a currency code to reflect the currency in which an amount may be expressed.
	CurrencyCode *string `json:"currencyCode,omitempty"`
}

// NewAdditionalAmountType instantiates a new AdditionalAmountType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdditionalAmountType() *AdditionalAmountType {
	this := AdditionalAmountType{}
	return &this
}

// NewAdditionalAmountTypeWithDefaults instantiates a new AdditionalAmountType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdditionalAmountTypeWithDefaults() *AdditionalAmountType {
	this := AdditionalAmountType{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *AdditionalAmountType) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalAmountType) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *AdditionalAmountType) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *AdditionalAmountType) SetAmount(v float32) {
	o.Amount = &v
}

// GetAmountType returns the AmountType field value if set, zero value otherwise.
func (o *AdditionalAmountType) GetAmountType() string {
	if o == nil || IsNil(o.AmountType) {
		var ret string
		return ret
	}
	return *o.AmountType
}

// GetAmountTypeOk returns a tuple with the AmountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalAmountType) GetAmountTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AmountType) {
		return nil, false
	}
	return o.AmountType, true
}

// HasAmountType returns a boolean if a field has been set.
func (o *AdditionalAmountType) HasAmountType() bool {
	if o != nil && !IsNil(o.AmountType) {
		return true
	}

	return false
}

// SetAmountType gets a reference to the given string and assigns it to the AmountType field.
func (o *AdditionalAmountType) SetAmountType(v string) {
	o.AmountType = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *AdditionalAmountType) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalAmountType) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *AdditionalAmountType) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *AdditionalAmountType) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

func (o AdditionalAmountType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdditionalAmountType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.AmountType) {
		toSerialize["amountType"] = o.AmountType
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	return toSerialize, nil
}

type NullableAdditionalAmountType struct {
	value *AdditionalAmountType
	isSet bool
}

func (v NullableAdditionalAmountType) Get() *AdditionalAmountType {
	return v.value
}

func (v *NullableAdditionalAmountType) Set(val *AdditionalAmountType) {
	v.value = val
	v.isSet = true
}

func (v NullableAdditionalAmountType) IsSet() bool {
	return v.isSet
}

func (v *NullableAdditionalAmountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdditionalAmountType(val *AdditionalAmountType) *NullableAdditionalAmountType {
	return &NullableAdditionalAmountType{value: val, isSet: true}
}

func (v NullableAdditionalAmountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdditionalAmountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


