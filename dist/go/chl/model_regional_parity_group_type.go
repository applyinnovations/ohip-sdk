/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the RegionalParityGroupType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegionalParityGroupType{}

// RegionalParityGroupType Channels and Property Group wise Rates for Room Type and Rate Plan combination.
type RegionalParityGroupType struct {
	// Minimum and Maximum Rate on specific arrival date.
	RegionalParityRates []RegionalParityRateType `json:"regionalParityRates,omitempty"`
	// The code that identifies a Hotel.
	HotelId *string `json:"hotelId,omitempty"`
	// The code that identifies a Booking Channel.
	BookingChannelCode *string `json:"bookingChannelCode,omitempty"`
	BookingChannelURL *string `json:"bookingChannelURL,omitempty"`
	BookingChannelIconURL *string `json:"bookingChannelIconURL,omitempty"`
}

// NewRegionalParityGroupType instantiates a new RegionalParityGroupType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionalParityGroupType() *RegionalParityGroupType {
	this := RegionalParityGroupType{}
	return &this
}

// NewRegionalParityGroupTypeWithDefaults instantiates a new RegionalParityGroupType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionalParityGroupTypeWithDefaults() *RegionalParityGroupType {
	this := RegionalParityGroupType{}
	return &this
}

// GetRegionalParityRates returns the RegionalParityRates field value if set, zero value otherwise.
func (o *RegionalParityGroupType) GetRegionalParityRates() []RegionalParityRateType {
	if o == nil || IsNil(o.RegionalParityRates) {
		var ret []RegionalParityRateType
		return ret
	}
	return o.RegionalParityRates
}

// GetRegionalParityRatesOk returns a tuple with the RegionalParityRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionalParityGroupType) GetRegionalParityRatesOk() ([]RegionalParityRateType, bool) {
	if o == nil || IsNil(o.RegionalParityRates) {
		return nil, false
	}
	return o.RegionalParityRates, true
}

// HasRegionalParityRates returns a boolean if a field has been set.
func (o *RegionalParityGroupType) HasRegionalParityRates() bool {
	if o != nil && !IsNil(o.RegionalParityRates) {
		return true
	}

	return false
}

// SetRegionalParityRates gets a reference to the given []RegionalParityRateType and assigns it to the RegionalParityRates field.
func (o *RegionalParityGroupType) SetRegionalParityRates(v []RegionalParityRateType) {
	o.RegionalParityRates = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RegionalParityGroupType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionalParityGroupType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RegionalParityGroupType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RegionalParityGroupType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetBookingChannelCode returns the BookingChannelCode field value if set, zero value otherwise.
func (o *RegionalParityGroupType) GetBookingChannelCode() string {
	if o == nil || IsNil(o.BookingChannelCode) {
		var ret string
		return ret
	}
	return *o.BookingChannelCode
}

// GetBookingChannelCodeOk returns a tuple with the BookingChannelCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionalParityGroupType) GetBookingChannelCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BookingChannelCode) {
		return nil, false
	}
	return o.BookingChannelCode, true
}

// HasBookingChannelCode returns a boolean if a field has been set.
func (o *RegionalParityGroupType) HasBookingChannelCode() bool {
	if o != nil && !IsNil(o.BookingChannelCode) {
		return true
	}

	return false
}

// SetBookingChannelCode gets a reference to the given string and assigns it to the BookingChannelCode field.
func (o *RegionalParityGroupType) SetBookingChannelCode(v string) {
	o.BookingChannelCode = &v
}

// GetBookingChannelURL returns the BookingChannelURL field value if set, zero value otherwise.
func (o *RegionalParityGroupType) GetBookingChannelURL() string {
	if o == nil || IsNil(o.BookingChannelURL) {
		var ret string
		return ret
	}
	return *o.BookingChannelURL
}

// GetBookingChannelURLOk returns a tuple with the BookingChannelURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionalParityGroupType) GetBookingChannelURLOk() (*string, bool) {
	if o == nil || IsNil(o.BookingChannelURL) {
		return nil, false
	}
	return o.BookingChannelURL, true
}

// HasBookingChannelURL returns a boolean if a field has been set.
func (o *RegionalParityGroupType) HasBookingChannelURL() bool {
	if o != nil && !IsNil(o.BookingChannelURL) {
		return true
	}

	return false
}

// SetBookingChannelURL gets a reference to the given string and assigns it to the BookingChannelURL field.
func (o *RegionalParityGroupType) SetBookingChannelURL(v string) {
	o.BookingChannelURL = &v
}

// GetBookingChannelIconURL returns the BookingChannelIconURL field value if set, zero value otherwise.
func (o *RegionalParityGroupType) GetBookingChannelIconURL() string {
	if o == nil || IsNil(o.BookingChannelIconURL) {
		var ret string
		return ret
	}
	return *o.BookingChannelIconURL
}

// GetBookingChannelIconURLOk returns a tuple with the BookingChannelIconURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionalParityGroupType) GetBookingChannelIconURLOk() (*string, bool) {
	if o == nil || IsNil(o.BookingChannelIconURL) {
		return nil, false
	}
	return o.BookingChannelIconURL, true
}

// HasBookingChannelIconURL returns a boolean if a field has been set.
func (o *RegionalParityGroupType) HasBookingChannelIconURL() bool {
	if o != nil && !IsNil(o.BookingChannelIconURL) {
		return true
	}

	return false
}

// SetBookingChannelIconURL gets a reference to the given string and assigns it to the BookingChannelIconURL field.
func (o *RegionalParityGroupType) SetBookingChannelIconURL(v string) {
	o.BookingChannelIconURL = &v
}

func (o RegionalParityGroupType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegionalParityGroupType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RegionalParityRates) {
		toSerialize["regionalParityRates"] = o.RegionalParityRates
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.BookingChannelCode) {
		toSerialize["bookingChannelCode"] = o.BookingChannelCode
	}
	if !IsNil(o.BookingChannelURL) {
		toSerialize["bookingChannelURL"] = o.BookingChannelURL
	}
	if !IsNil(o.BookingChannelIconURL) {
		toSerialize["bookingChannelIconURL"] = o.BookingChannelIconURL
	}
	return toSerialize, nil
}

type NullableRegionalParityGroupType struct {
	value *RegionalParityGroupType
	isSet bool
}

func (v NullableRegionalParityGroupType) Get() *RegionalParityGroupType {
	return v.value
}

func (v *NullableRegionalParityGroupType) Set(val *RegionalParityGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionalParityGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionalParityGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionalParityGroupType(val *RegionalParityGroupType) *NullableRegionalParityGroupType {
	return &NullableRegionalParityGroupType{value: val, isSet: true}
}

func (v NullableRegionalParityGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionalParityGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


