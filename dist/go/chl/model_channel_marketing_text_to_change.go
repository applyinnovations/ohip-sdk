/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ChannelMarketingTextToChange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelMarketingTextToChange{}

// ChannelMarketingTextToChange Request object for changing channel marketing texts.
type ChannelMarketingTextToChange struct {
	// List of channel marketing texts to be changed.
	ChangeChannelMarketingTexts []MarketingTextType `json:"changeChannelMarketingTexts,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewChannelMarketingTextToChange instantiates a new ChannelMarketingTextToChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelMarketingTextToChange() *ChannelMarketingTextToChange {
	this := ChannelMarketingTextToChange{}
	return &this
}

// NewChannelMarketingTextToChangeWithDefaults instantiates a new ChannelMarketingTextToChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelMarketingTextToChangeWithDefaults() *ChannelMarketingTextToChange {
	this := ChannelMarketingTextToChange{}
	return &this
}

// GetChangeChannelMarketingTexts returns the ChangeChannelMarketingTexts field value if set, zero value otherwise.
func (o *ChannelMarketingTextToChange) GetChangeChannelMarketingTexts() []MarketingTextType {
	if o == nil || IsNil(o.ChangeChannelMarketingTexts) {
		var ret []MarketingTextType
		return ret
	}
	return o.ChangeChannelMarketingTexts
}

// GetChangeChannelMarketingTextsOk returns a tuple with the ChangeChannelMarketingTexts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelMarketingTextToChange) GetChangeChannelMarketingTextsOk() ([]MarketingTextType, bool) {
	if o == nil || IsNil(o.ChangeChannelMarketingTexts) {
		return nil, false
	}
	return o.ChangeChannelMarketingTexts, true
}

// HasChangeChannelMarketingTexts returns a boolean if a field has been set.
func (o *ChannelMarketingTextToChange) HasChangeChannelMarketingTexts() bool {
	if o != nil && !IsNil(o.ChangeChannelMarketingTexts) {
		return true
	}

	return false
}

// SetChangeChannelMarketingTexts gets a reference to the given []MarketingTextType and assigns it to the ChangeChannelMarketingTexts field.
func (o *ChannelMarketingTextToChange) SetChangeChannelMarketingTexts(v []MarketingTextType) {
	o.ChangeChannelMarketingTexts = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ChannelMarketingTextToChange) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelMarketingTextToChange) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ChannelMarketingTextToChange) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *ChannelMarketingTextToChange) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ChannelMarketingTextToChange) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelMarketingTextToChange) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ChannelMarketingTextToChange) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ChannelMarketingTextToChange) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ChannelMarketingTextToChange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelMarketingTextToChange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChangeChannelMarketingTexts) {
		toSerialize["changeChannelMarketingTexts"] = o.ChangeChannelMarketingTexts
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableChannelMarketingTextToChange struct {
	value *ChannelMarketingTextToChange
	isSet bool
}

func (v NullableChannelMarketingTextToChange) Get() *ChannelMarketingTextToChange {
	return v.value
}

func (v *NullableChannelMarketingTextToChange) Set(val *ChannelMarketingTextToChange) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelMarketingTextToChange) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelMarketingTextToChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelMarketingTextToChange(val *ChannelMarketingTextToChange) *NullableChannelMarketingTextToChange {
	return &NullableChannelMarketingTextToChange{value: val, isSet: true}
}

func (v NullableChannelMarketingTextToChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelMarketingTextToChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


