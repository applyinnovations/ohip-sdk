/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
	"fmt"
)

// ContractTransactionType To specify range information is considered per number of Rooms. This is allowed only if Fee type is Maintenance.
type ContractTransactionType string

// List of contractTransactionType
const (
	CONTRACTTRANSACTIONTYPE_PROPERTIES ContractTransactionType = "Properties"
	CONTRACTTRANSACTIONTYPE_ROOMS ContractTransactionType = "Rooms"
)

// All allowed values of ContractTransactionType enum
var AllowedContractTransactionTypeEnumValues = []ContractTransactionType{
	"Properties",
	"Rooms",
}

func (v *ContractTransactionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContractTransactionType(value)
	for _, existing := range AllowedContractTransactionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContractTransactionType", value)
}

// NewContractTransactionTypeFromValue returns a pointer to a valid ContractTransactionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContractTransactionTypeFromValue(v string) (*ContractTransactionType, error) {
	ev := ContractTransactionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContractTransactionType: valid values are %v", v, AllowedContractTransactionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContractTransactionType) IsValid() bool {
	for _, existing := range AllowedContractTransactionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to contractTransactionType value
func (v ContractTransactionType) Ptr() *ContractTransactionType {
	return &v
}

type NullableContractTransactionType struct {
	value *ContractTransactionType
	isSet bool
}

func (v NullableContractTransactionType) Get() *ContractTransactionType {
	return v.value
}

func (v *NullableContractTransactionType) Set(val *ContractTransactionType) {
	v.value = val
	v.isSet = true
}

func (v NullableContractTransactionType) IsSet() bool {
	return v.isSet
}

func (v *NullableContractTransactionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractTransactionType(val *ContractTransactionType) *NullableContractTransactionType {
	return &NullableContractTransactionType{value: val, isSet: true}
}

func (v NullableContractTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractTransactionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

