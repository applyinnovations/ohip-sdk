/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ChannelSellLimitsByDateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelSellLimitsByDateType{}

// ChannelSellLimitsByDateType Collection of sell limits for a channel or channel room type structured by day.
type ChannelSellLimitsByDateType struct {
	// Details about the sell limit for this particular resort, channel, and date.
	ChannelSellLimits []ChannelSellLimitType `json:"channelSellLimits,omitempty"`
	// Details about the sell limit for this particular resort, channel, channel room type, and date.
	ChannelRoomTypeSellLimits []ChannelSellLimitsByDateTypeChannelRoomTypeSellLimitsInner `json:"channelRoomTypeSellLimits,omitempty"`
	// Hotel under which the channel sell limits are applicable.
	HotelId *string `json:"hotelId,omitempty"`
}

// NewChannelSellLimitsByDateType instantiates a new ChannelSellLimitsByDateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelSellLimitsByDateType() *ChannelSellLimitsByDateType {
	this := ChannelSellLimitsByDateType{}
	return &this
}

// NewChannelSellLimitsByDateTypeWithDefaults instantiates a new ChannelSellLimitsByDateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelSellLimitsByDateTypeWithDefaults() *ChannelSellLimitsByDateType {
	this := ChannelSellLimitsByDateType{}
	return &this
}

// GetChannelSellLimits returns the ChannelSellLimits field value if set, zero value otherwise.
func (o *ChannelSellLimitsByDateType) GetChannelSellLimits() []ChannelSellLimitType {
	if o == nil || IsNil(o.ChannelSellLimits) {
		var ret []ChannelSellLimitType
		return ret
	}
	return o.ChannelSellLimits
}

// GetChannelSellLimitsOk returns a tuple with the ChannelSellLimits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelSellLimitsByDateType) GetChannelSellLimitsOk() ([]ChannelSellLimitType, bool) {
	if o == nil || IsNil(o.ChannelSellLimits) {
		return nil, false
	}
	return o.ChannelSellLimits, true
}

// HasChannelSellLimits returns a boolean if a field has been set.
func (o *ChannelSellLimitsByDateType) HasChannelSellLimits() bool {
	if o != nil && !IsNil(o.ChannelSellLimits) {
		return true
	}

	return false
}

// SetChannelSellLimits gets a reference to the given []ChannelSellLimitType and assigns it to the ChannelSellLimits field.
func (o *ChannelSellLimitsByDateType) SetChannelSellLimits(v []ChannelSellLimitType) {
	o.ChannelSellLimits = v
}

// GetChannelRoomTypeSellLimits returns the ChannelRoomTypeSellLimits field value if set, zero value otherwise.
func (o *ChannelSellLimitsByDateType) GetChannelRoomTypeSellLimits() []ChannelSellLimitsByDateTypeChannelRoomTypeSellLimitsInner {
	if o == nil || IsNil(o.ChannelRoomTypeSellLimits) {
		var ret []ChannelSellLimitsByDateTypeChannelRoomTypeSellLimitsInner
		return ret
	}
	return o.ChannelRoomTypeSellLimits
}

// GetChannelRoomTypeSellLimitsOk returns a tuple with the ChannelRoomTypeSellLimits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelSellLimitsByDateType) GetChannelRoomTypeSellLimitsOk() ([]ChannelSellLimitsByDateTypeChannelRoomTypeSellLimitsInner, bool) {
	if o == nil || IsNil(o.ChannelRoomTypeSellLimits) {
		return nil, false
	}
	return o.ChannelRoomTypeSellLimits, true
}

// HasChannelRoomTypeSellLimits returns a boolean if a field has been set.
func (o *ChannelSellLimitsByDateType) HasChannelRoomTypeSellLimits() bool {
	if o != nil && !IsNil(o.ChannelRoomTypeSellLimits) {
		return true
	}

	return false
}

// SetChannelRoomTypeSellLimits gets a reference to the given []ChannelSellLimitsByDateTypeChannelRoomTypeSellLimitsInner and assigns it to the ChannelRoomTypeSellLimits field.
func (o *ChannelSellLimitsByDateType) SetChannelRoomTypeSellLimits(v []ChannelSellLimitsByDateTypeChannelRoomTypeSellLimitsInner) {
	o.ChannelRoomTypeSellLimits = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ChannelSellLimitsByDateType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelSellLimitsByDateType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ChannelSellLimitsByDateType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ChannelSellLimitsByDateType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o ChannelSellLimitsByDateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelSellLimitsByDateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChannelSellLimits) {
		toSerialize["channelSellLimits"] = o.ChannelSellLimits
	}
	if !IsNil(o.ChannelRoomTypeSellLimits) {
		toSerialize["channelRoomTypeSellLimits"] = o.ChannelRoomTypeSellLimits
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableChannelSellLimitsByDateType struct {
	value *ChannelSellLimitsByDateType
	isSet bool
}

func (v NullableChannelSellLimitsByDateType) Get() *ChannelSellLimitsByDateType {
	return v.value
}

func (v *NullableChannelSellLimitsByDateType) Set(val *ChannelSellLimitsByDateType) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelSellLimitsByDateType) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelSellLimitsByDateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelSellLimitsByDateType(val *ChannelSellLimitsByDateType) *NullableChannelSellLimitsByDateType {
	return &NullableChannelSellLimitsByDateType{value: val, isSet: true}
}

func (v NullableChannelSellLimitsByDateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelSellLimitsByDateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


