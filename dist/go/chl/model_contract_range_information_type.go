/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ContractRangeInformationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractRangeInformationType{}

// ContractRangeInformationType Holds Contract Range per number of Properties, Rooms or reservations information.
type ContractRangeInformationType struct {
	ContractTransaction *ContractTransactionType `json:"contractTransaction,omitempty"`
	// Holds No of reservations range for Transaction Fee type.
	Range *int32 `json:"range,omitempty"`
	// Holds No of months calculated while generating statements for Maintenance Fee type.
	Months *float32 `json:"months,omitempty"`
	ContractRange *NumberRangeType `json:"contractRange,omitempty"`
}

// NewContractRangeInformationType instantiates a new ContractRangeInformationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractRangeInformationType() *ContractRangeInformationType {
	this := ContractRangeInformationType{}
	return &this
}

// NewContractRangeInformationTypeWithDefaults instantiates a new ContractRangeInformationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractRangeInformationTypeWithDefaults() *ContractRangeInformationType {
	this := ContractRangeInformationType{}
	return &this
}

// GetContractTransaction returns the ContractTransaction field value if set, zero value otherwise.
func (o *ContractRangeInformationType) GetContractTransaction() ContractTransactionType {
	if o == nil || IsNil(o.ContractTransaction) {
		var ret ContractTransactionType
		return ret
	}
	return *o.ContractTransaction
}

// GetContractTransactionOk returns a tuple with the ContractTransaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractRangeInformationType) GetContractTransactionOk() (*ContractTransactionType, bool) {
	if o == nil || IsNil(o.ContractTransaction) {
		return nil, false
	}
	return o.ContractTransaction, true
}

// HasContractTransaction returns a boolean if a field has been set.
func (o *ContractRangeInformationType) HasContractTransaction() bool {
	if o != nil && !IsNil(o.ContractTransaction) {
		return true
	}

	return false
}

// SetContractTransaction gets a reference to the given ContractTransactionType and assigns it to the ContractTransaction field.
func (o *ContractRangeInformationType) SetContractTransaction(v ContractTransactionType) {
	o.ContractTransaction = &v
}

// GetRange returns the Range field value if set, zero value otherwise.
func (o *ContractRangeInformationType) GetRange() int32 {
	if o == nil || IsNil(o.Range) {
		var ret int32
		return ret
	}
	return *o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractRangeInformationType) GetRangeOk() (*int32, bool) {
	if o == nil || IsNil(o.Range) {
		return nil, false
	}
	return o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *ContractRangeInformationType) HasRange() bool {
	if o != nil && !IsNil(o.Range) {
		return true
	}

	return false
}

// SetRange gets a reference to the given int32 and assigns it to the Range field.
func (o *ContractRangeInformationType) SetRange(v int32) {
	o.Range = &v
}

// GetMonths returns the Months field value if set, zero value otherwise.
func (o *ContractRangeInformationType) GetMonths() float32 {
	if o == nil || IsNil(o.Months) {
		var ret float32
		return ret
	}
	return *o.Months
}

// GetMonthsOk returns a tuple with the Months field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractRangeInformationType) GetMonthsOk() (*float32, bool) {
	if o == nil || IsNil(o.Months) {
		return nil, false
	}
	return o.Months, true
}

// HasMonths returns a boolean if a field has been set.
func (o *ContractRangeInformationType) HasMonths() bool {
	if o != nil && !IsNil(o.Months) {
		return true
	}

	return false
}

// SetMonths gets a reference to the given float32 and assigns it to the Months field.
func (o *ContractRangeInformationType) SetMonths(v float32) {
	o.Months = &v
}

// GetContractRange returns the ContractRange field value if set, zero value otherwise.
func (o *ContractRangeInformationType) GetContractRange() NumberRangeType {
	if o == nil || IsNil(o.ContractRange) {
		var ret NumberRangeType
		return ret
	}
	return *o.ContractRange
}

// GetContractRangeOk returns a tuple with the ContractRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractRangeInformationType) GetContractRangeOk() (*NumberRangeType, bool) {
	if o == nil || IsNil(o.ContractRange) {
		return nil, false
	}
	return o.ContractRange, true
}

// HasContractRange returns a boolean if a field has been set.
func (o *ContractRangeInformationType) HasContractRange() bool {
	if o != nil && !IsNil(o.ContractRange) {
		return true
	}

	return false
}

// SetContractRange gets a reference to the given NumberRangeType and assigns it to the ContractRange field.
func (o *ContractRangeInformationType) SetContractRange(v NumberRangeType) {
	o.ContractRange = &v
}

func (o ContractRangeInformationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractRangeInformationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContractTransaction) {
		toSerialize["contractTransaction"] = o.ContractTransaction
	}
	if !IsNil(o.Range) {
		toSerialize["range"] = o.Range
	}
	if !IsNil(o.Months) {
		toSerialize["months"] = o.Months
	}
	if !IsNil(o.ContractRange) {
		toSerialize["contractRange"] = o.ContractRange
	}
	return toSerialize, nil
}

type NullableContractRangeInformationType struct {
	value *ContractRangeInformationType
	isSet bool
}

func (v NullableContractRangeInformationType) Get() *ContractRangeInformationType {
	return v.value
}

func (v *NullableContractRangeInformationType) Set(val *ContractRangeInformationType) {
	v.value = val
	v.isSet = true
}

func (v NullableContractRangeInformationType) IsSet() bool {
	return v.isSet
}

func (v *NullableContractRangeInformationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractRangeInformationType(val *ContractRangeInformationType) *NullableContractRangeInformationType {
	return &NullableContractRangeInformationType{value: val, isSet: true}
}

func (v NullableContractRangeInformationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractRangeInformationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


