/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the SystemInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SystemInfoType{}

// SystemInfoType External system attributes.
type SystemInfoType struct {
	// External system name.
	SystemName *string `json:"systemName,omitempty"`
	// Cannel Website URL
	WebsiteURL *string `json:"websiteURL,omitempty"`
	// Channel Icon URL
	IconURL *string `json:"iconURL,omitempty"`
	// External system code such as TRAVELOCITY, EXPEDIA, etc.
	SystemCode *string `json:"systemCode,omitempty"`
	// External system type such as CHANNEL, OXI, etc.
	SystemType *string `json:"systemType,omitempty"`
	// External system subtype such as GDS, WEB, etc.
	SystemSubType *string `json:"systemSubType,omitempty"`
	// Indicates whether code is inactive or not.
	Inactive *bool `json:"inactive,omitempty"`
}

// NewSystemInfoType instantiates a new SystemInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemInfoType() *SystemInfoType {
	this := SystemInfoType{}
	return &this
}

// NewSystemInfoTypeWithDefaults instantiates a new SystemInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemInfoTypeWithDefaults() *SystemInfoType {
	this := SystemInfoType{}
	return &this
}

// GetSystemName returns the SystemName field value if set, zero value otherwise.
func (o *SystemInfoType) GetSystemName() string {
	if o == nil || IsNil(o.SystemName) {
		var ret string
		return ret
	}
	return *o.SystemName
}

// GetSystemNameOk returns a tuple with the SystemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemInfoType) GetSystemNameOk() (*string, bool) {
	if o == nil || IsNil(o.SystemName) {
		return nil, false
	}
	return o.SystemName, true
}

// HasSystemName returns a boolean if a field has been set.
func (o *SystemInfoType) HasSystemName() bool {
	if o != nil && !IsNil(o.SystemName) {
		return true
	}

	return false
}

// SetSystemName gets a reference to the given string and assigns it to the SystemName field.
func (o *SystemInfoType) SetSystemName(v string) {
	o.SystemName = &v
}

// GetWebsiteURL returns the WebsiteURL field value if set, zero value otherwise.
func (o *SystemInfoType) GetWebsiteURL() string {
	if o == nil || IsNil(o.WebsiteURL) {
		var ret string
		return ret
	}
	return *o.WebsiteURL
}

// GetWebsiteURLOk returns a tuple with the WebsiteURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemInfoType) GetWebsiteURLOk() (*string, bool) {
	if o == nil || IsNil(o.WebsiteURL) {
		return nil, false
	}
	return o.WebsiteURL, true
}

// HasWebsiteURL returns a boolean if a field has been set.
func (o *SystemInfoType) HasWebsiteURL() bool {
	if o != nil && !IsNil(o.WebsiteURL) {
		return true
	}

	return false
}

// SetWebsiteURL gets a reference to the given string and assigns it to the WebsiteURL field.
func (o *SystemInfoType) SetWebsiteURL(v string) {
	o.WebsiteURL = &v
}

// GetIconURL returns the IconURL field value if set, zero value otherwise.
func (o *SystemInfoType) GetIconURL() string {
	if o == nil || IsNil(o.IconURL) {
		var ret string
		return ret
	}
	return *o.IconURL
}

// GetIconURLOk returns a tuple with the IconURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemInfoType) GetIconURLOk() (*string, bool) {
	if o == nil || IsNil(o.IconURL) {
		return nil, false
	}
	return o.IconURL, true
}

// HasIconURL returns a boolean if a field has been set.
func (o *SystemInfoType) HasIconURL() bool {
	if o != nil && !IsNil(o.IconURL) {
		return true
	}

	return false
}

// SetIconURL gets a reference to the given string and assigns it to the IconURL field.
func (o *SystemInfoType) SetIconURL(v string) {
	o.IconURL = &v
}

// GetSystemCode returns the SystemCode field value if set, zero value otherwise.
func (o *SystemInfoType) GetSystemCode() string {
	if o == nil || IsNil(o.SystemCode) {
		var ret string
		return ret
	}
	return *o.SystemCode
}

// GetSystemCodeOk returns a tuple with the SystemCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemInfoType) GetSystemCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SystemCode) {
		return nil, false
	}
	return o.SystemCode, true
}

// HasSystemCode returns a boolean if a field has been set.
func (o *SystemInfoType) HasSystemCode() bool {
	if o != nil && !IsNil(o.SystemCode) {
		return true
	}

	return false
}

// SetSystemCode gets a reference to the given string and assigns it to the SystemCode field.
func (o *SystemInfoType) SetSystemCode(v string) {
	o.SystemCode = &v
}

// GetSystemType returns the SystemType field value if set, zero value otherwise.
func (o *SystemInfoType) GetSystemType() string {
	if o == nil || IsNil(o.SystemType) {
		var ret string
		return ret
	}
	return *o.SystemType
}

// GetSystemTypeOk returns a tuple with the SystemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemInfoType) GetSystemTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SystemType) {
		return nil, false
	}
	return o.SystemType, true
}

// HasSystemType returns a boolean if a field has been set.
func (o *SystemInfoType) HasSystemType() bool {
	if o != nil && !IsNil(o.SystemType) {
		return true
	}

	return false
}

// SetSystemType gets a reference to the given string and assigns it to the SystemType field.
func (o *SystemInfoType) SetSystemType(v string) {
	o.SystemType = &v
}

// GetSystemSubType returns the SystemSubType field value if set, zero value otherwise.
func (o *SystemInfoType) GetSystemSubType() string {
	if o == nil || IsNil(o.SystemSubType) {
		var ret string
		return ret
	}
	return *o.SystemSubType
}

// GetSystemSubTypeOk returns a tuple with the SystemSubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemInfoType) GetSystemSubTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SystemSubType) {
		return nil, false
	}
	return o.SystemSubType, true
}

// HasSystemSubType returns a boolean if a field has been set.
func (o *SystemInfoType) HasSystemSubType() bool {
	if o != nil && !IsNil(o.SystemSubType) {
		return true
	}

	return false
}

// SetSystemSubType gets a reference to the given string and assigns it to the SystemSubType field.
func (o *SystemInfoType) SetSystemSubType(v string) {
	o.SystemSubType = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *SystemInfoType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemInfoType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *SystemInfoType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *SystemInfoType) SetInactive(v bool) {
	o.Inactive = &v
}

func (o SystemInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SystemInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SystemName) {
		toSerialize["systemName"] = o.SystemName
	}
	if !IsNil(o.WebsiteURL) {
		toSerialize["websiteURL"] = o.WebsiteURL
	}
	if !IsNil(o.IconURL) {
		toSerialize["iconURL"] = o.IconURL
	}
	if !IsNil(o.SystemCode) {
		toSerialize["systemCode"] = o.SystemCode
	}
	if !IsNil(o.SystemType) {
		toSerialize["systemType"] = o.SystemType
	}
	if !IsNil(o.SystemSubType) {
		toSerialize["systemSubType"] = o.SystemSubType
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	return toSerialize, nil
}

type NullableSystemInfoType struct {
	value *SystemInfoType
	isSet bool
}

func (v NullableSystemInfoType) Get() *SystemInfoType {
	return v.value
}

func (v *NullableSystemInfoType) Set(val *SystemInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemInfoType(val *SystemInfoType) *NullableSystemInfoType {
	return &NullableSystemInfoType{value: val, isSet: true}
}

func (v NullableSystemInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


