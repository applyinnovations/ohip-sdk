/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ChannelHotelLetterType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelHotelLetterType{}

// ChannelHotelLetterType Provide unique identification of Hotel Letter associated with a Booking Channel.
type ChannelHotelLetterType struct {
	BookingChannel *CodeDescriptionType `json:"bookingChannel,omitempty"`
	// Hotel code which the hotel letters belong to.
	HotelId *string `json:"hotelId,omitempty"`
	LanguageCode *CodeDescriptionType `json:"languageCode,omitempty"`
	// Name of the letter that associated to Hotel Letter.
	LetterName *string `json:"letterName,omitempty"`
	LetterType *LetterTypeType `json:"letterType,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewChannelHotelLetterType instantiates a new ChannelHotelLetterType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelHotelLetterType() *ChannelHotelLetterType {
	this := ChannelHotelLetterType{}
	return &this
}

// NewChannelHotelLetterTypeWithDefaults instantiates a new ChannelHotelLetterType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelHotelLetterTypeWithDefaults() *ChannelHotelLetterType {
	this := ChannelHotelLetterType{}
	return &this
}

// GetBookingChannel returns the BookingChannel field value if set, zero value otherwise.
func (o *ChannelHotelLetterType) GetBookingChannel() CodeDescriptionType {
	if o == nil || IsNil(o.BookingChannel) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.BookingChannel
}

// GetBookingChannelOk returns a tuple with the BookingChannel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelHotelLetterType) GetBookingChannelOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.BookingChannel) {
		return nil, false
	}
	return o.BookingChannel, true
}

// HasBookingChannel returns a boolean if a field has been set.
func (o *ChannelHotelLetterType) HasBookingChannel() bool {
	if o != nil && !IsNil(o.BookingChannel) {
		return true
	}

	return false
}

// SetBookingChannel gets a reference to the given CodeDescriptionType and assigns it to the BookingChannel field.
func (o *ChannelHotelLetterType) SetBookingChannel(v CodeDescriptionType) {
	o.BookingChannel = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ChannelHotelLetterType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelHotelLetterType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ChannelHotelLetterType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ChannelHotelLetterType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetLanguageCode returns the LanguageCode field value if set, zero value otherwise.
func (o *ChannelHotelLetterType) GetLanguageCode() CodeDescriptionType {
	if o == nil || IsNil(o.LanguageCode) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.LanguageCode
}

// GetLanguageCodeOk returns a tuple with the LanguageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelHotelLetterType) GetLanguageCodeOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.LanguageCode) {
		return nil, false
	}
	return o.LanguageCode, true
}

// HasLanguageCode returns a boolean if a field has been set.
func (o *ChannelHotelLetterType) HasLanguageCode() bool {
	if o != nil && !IsNil(o.LanguageCode) {
		return true
	}

	return false
}

// SetLanguageCode gets a reference to the given CodeDescriptionType and assigns it to the LanguageCode field.
func (o *ChannelHotelLetterType) SetLanguageCode(v CodeDescriptionType) {
	o.LanguageCode = &v
}

// GetLetterName returns the LetterName field value if set, zero value otherwise.
func (o *ChannelHotelLetterType) GetLetterName() string {
	if o == nil || IsNil(o.LetterName) {
		var ret string
		return ret
	}
	return *o.LetterName
}

// GetLetterNameOk returns a tuple with the LetterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelHotelLetterType) GetLetterNameOk() (*string, bool) {
	if o == nil || IsNil(o.LetterName) {
		return nil, false
	}
	return o.LetterName, true
}

// HasLetterName returns a boolean if a field has been set.
func (o *ChannelHotelLetterType) HasLetterName() bool {
	if o != nil && !IsNil(o.LetterName) {
		return true
	}

	return false
}

// SetLetterName gets a reference to the given string and assigns it to the LetterName field.
func (o *ChannelHotelLetterType) SetLetterName(v string) {
	o.LetterName = &v
}

// GetLetterType returns the LetterType field value if set, zero value otherwise.
func (o *ChannelHotelLetterType) GetLetterType() LetterTypeType {
	if o == nil || IsNil(o.LetterType) {
		var ret LetterTypeType
		return ret
	}
	return *o.LetterType
}

// GetLetterTypeOk returns a tuple with the LetterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelHotelLetterType) GetLetterTypeOk() (*LetterTypeType, bool) {
	if o == nil || IsNil(o.LetterType) {
		return nil, false
	}
	return o.LetterType, true
}

// HasLetterType returns a boolean if a field has been set.
func (o *ChannelHotelLetterType) HasLetterType() bool {
	if o != nil && !IsNil(o.LetterType) {
		return true
	}

	return false
}

// SetLetterType gets a reference to the given LetterTypeType and assigns it to the LetterType field.
func (o *ChannelHotelLetterType) SetLetterType(v LetterTypeType) {
	o.LetterType = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ChannelHotelLetterType) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelHotelLetterType) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ChannelHotelLetterType) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ChannelHotelLetterType) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ChannelHotelLetterType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelHotelLetterType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BookingChannel) {
		toSerialize["bookingChannel"] = o.BookingChannel
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.LanguageCode) {
		toSerialize["languageCode"] = o.LanguageCode
	}
	if !IsNil(o.LetterName) {
		toSerialize["letterName"] = o.LetterName
	}
	if !IsNil(o.LetterType) {
		toSerialize["letterType"] = o.LetterType
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableChannelHotelLetterType struct {
	value *ChannelHotelLetterType
	isSet bool
}

func (v NullableChannelHotelLetterType) Get() *ChannelHotelLetterType {
	return v.value
}

func (v *NullableChannelHotelLetterType) Set(val *ChannelHotelLetterType) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelHotelLetterType) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelHotelLetterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelHotelLetterType(val *ChannelHotelLetterType) *NullableChannelHotelLetterType {
	return &NullableChannelHotelLetterType{value: val, isSet: true}
}

func (v NullableChannelHotelLetterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelHotelLetterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


