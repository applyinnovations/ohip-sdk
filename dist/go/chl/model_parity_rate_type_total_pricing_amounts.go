/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ParityRateTypeTotalPricingAmounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParityRateTypeTotalPricingAmounts{}

// ParityRateTypeTotalPricingAmounts struct for ParityRateTypeTotalPricingAmounts
type ParityRateTypeTotalPricingAmounts struct {
	TotalRateIncl *CurrencyAmountType `json:"totalRateIncl,omitempty"`
	TotalSurcharge *CurrencyAmountType `json:"totalSurcharge,omitempty"`
	TotalTax *CurrencyAmountType `json:"totalTax,omitempty"`
}

// NewParityRateTypeTotalPricingAmounts instantiates a new ParityRateTypeTotalPricingAmounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParityRateTypeTotalPricingAmounts() *ParityRateTypeTotalPricingAmounts {
	this := ParityRateTypeTotalPricingAmounts{}
	return &this
}

// NewParityRateTypeTotalPricingAmountsWithDefaults instantiates a new ParityRateTypeTotalPricingAmounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParityRateTypeTotalPricingAmountsWithDefaults() *ParityRateTypeTotalPricingAmounts {
	this := ParityRateTypeTotalPricingAmounts{}
	return &this
}

// GetTotalRateIncl returns the TotalRateIncl field value if set, zero value otherwise.
func (o *ParityRateTypeTotalPricingAmounts) GetTotalRateIncl() CurrencyAmountType {
	if o == nil || IsNil(o.TotalRateIncl) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.TotalRateIncl
}

// GetTotalRateInclOk returns a tuple with the TotalRateIncl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRateTypeTotalPricingAmounts) GetTotalRateInclOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.TotalRateIncl) {
		return nil, false
	}
	return o.TotalRateIncl, true
}

// HasTotalRateIncl returns a boolean if a field has been set.
func (o *ParityRateTypeTotalPricingAmounts) HasTotalRateIncl() bool {
	if o != nil && !IsNil(o.TotalRateIncl) {
		return true
	}

	return false
}

// SetTotalRateIncl gets a reference to the given CurrencyAmountType and assigns it to the TotalRateIncl field.
func (o *ParityRateTypeTotalPricingAmounts) SetTotalRateIncl(v CurrencyAmountType) {
	o.TotalRateIncl = &v
}

// GetTotalSurcharge returns the TotalSurcharge field value if set, zero value otherwise.
func (o *ParityRateTypeTotalPricingAmounts) GetTotalSurcharge() CurrencyAmountType {
	if o == nil || IsNil(o.TotalSurcharge) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.TotalSurcharge
}

// GetTotalSurchargeOk returns a tuple with the TotalSurcharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRateTypeTotalPricingAmounts) GetTotalSurchargeOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.TotalSurcharge) {
		return nil, false
	}
	return o.TotalSurcharge, true
}

// HasTotalSurcharge returns a boolean if a field has been set.
func (o *ParityRateTypeTotalPricingAmounts) HasTotalSurcharge() bool {
	if o != nil && !IsNil(o.TotalSurcharge) {
		return true
	}

	return false
}

// SetTotalSurcharge gets a reference to the given CurrencyAmountType and assigns it to the TotalSurcharge field.
func (o *ParityRateTypeTotalPricingAmounts) SetTotalSurcharge(v CurrencyAmountType) {
	o.TotalSurcharge = &v
}

// GetTotalTax returns the TotalTax field value if set, zero value otherwise.
func (o *ParityRateTypeTotalPricingAmounts) GetTotalTax() CurrencyAmountType {
	if o == nil || IsNil(o.TotalTax) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.TotalTax
}

// GetTotalTaxOk returns a tuple with the TotalTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRateTypeTotalPricingAmounts) GetTotalTaxOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.TotalTax) {
		return nil, false
	}
	return o.TotalTax, true
}

// HasTotalTax returns a boolean if a field has been set.
func (o *ParityRateTypeTotalPricingAmounts) HasTotalTax() bool {
	if o != nil && !IsNil(o.TotalTax) {
		return true
	}

	return false
}

// SetTotalTax gets a reference to the given CurrencyAmountType and assigns it to the TotalTax field.
func (o *ParityRateTypeTotalPricingAmounts) SetTotalTax(v CurrencyAmountType) {
	o.TotalTax = &v
}

func (o ParityRateTypeTotalPricingAmounts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParityRateTypeTotalPricingAmounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TotalRateIncl) {
		toSerialize["totalRateIncl"] = o.TotalRateIncl
	}
	if !IsNil(o.TotalSurcharge) {
		toSerialize["totalSurcharge"] = o.TotalSurcharge
	}
	if !IsNil(o.TotalTax) {
		toSerialize["totalTax"] = o.TotalTax
	}
	return toSerialize, nil
}

type NullableParityRateTypeTotalPricingAmounts struct {
	value *ParityRateTypeTotalPricingAmounts
	isSet bool
}

func (v NullableParityRateTypeTotalPricingAmounts) Get() *ParityRateTypeTotalPricingAmounts {
	return v.value
}

func (v *NullableParityRateTypeTotalPricingAmounts) Set(val *ParityRateTypeTotalPricingAmounts) {
	v.value = val
	v.isSet = true
}

func (v NullableParityRateTypeTotalPricingAmounts) IsSet() bool {
	return v.isSet
}

func (v *NullableParityRateTypeTotalPricingAmounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParityRateTypeTotalPricingAmounts(val *ParityRateTypeTotalPricingAmounts) *NullableParityRateTypeTotalPricingAmounts {
	return &NullableParityRateTypeTotalPricingAmounts{value: val, isSet: true}
}

func (v NullableParityRateTypeTotalPricingAmounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParityRateTypeTotalPricingAmounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


