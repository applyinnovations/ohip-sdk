/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ChannelAccountContractInformationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelAccountContractInformationType{}

// ChannelAccountContractInformationType To hold channel account contract detailed information.
type ChannelAccountContractInformationType struct {
	// Holds begin date of the contract.
	BeginDate *string `json:"beginDate,omitempty"`
	// Channel account contract elements information object to hold details of contract elements.
	ChannelAccountContractElements []ContractElementInformationType `json:"channelAccountContractElements,omitempty"`
	ContractId *UniqueIDType `json:"contractId,omitempty"`
	// Holds contract No of the contract.
	ContractNo *string `json:"contractNo,omitempty"`
	// Holds end date of the contract.
	EndDate *string `json:"endDate,omitempty"`
	// Flag to mark respective statements which were generated on these contracts to be regenerated.
	MarkStatementsToRegenerate *bool `json:"markStatementsToRegenerate,omitempty"`
	// Holds Note for the account contract.
	Note *string `json:"note,omitempty"`
}

// NewChannelAccountContractInformationType instantiates a new ChannelAccountContractInformationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelAccountContractInformationType() *ChannelAccountContractInformationType {
	this := ChannelAccountContractInformationType{}
	return &this
}

// NewChannelAccountContractInformationTypeWithDefaults instantiates a new ChannelAccountContractInformationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelAccountContractInformationTypeWithDefaults() *ChannelAccountContractInformationType {
	this := ChannelAccountContractInformationType{}
	return &this
}

// GetBeginDate returns the BeginDate field value if set, zero value otherwise.
func (o *ChannelAccountContractInformationType) GetBeginDate() string {
	if o == nil || IsNil(o.BeginDate) {
		var ret string
		return ret
	}
	return *o.BeginDate
}

// GetBeginDateOk returns a tuple with the BeginDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelAccountContractInformationType) GetBeginDateOk() (*string, bool) {
	if o == nil || IsNil(o.BeginDate) {
		return nil, false
	}
	return o.BeginDate, true
}

// HasBeginDate returns a boolean if a field has been set.
func (o *ChannelAccountContractInformationType) HasBeginDate() bool {
	if o != nil && !IsNil(o.BeginDate) {
		return true
	}

	return false
}

// SetBeginDate gets a reference to the given string and assigns it to the BeginDate field.
func (o *ChannelAccountContractInformationType) SetBeginDate(v string) {
	o.BeginDate = &v
}

// GetChannelAccountContractElements returns the ChannelAccountContractElements field value if set, zero value otherwise.
func (o *ChannelAccountContractInformationType) GetChannelAccountContractElements() []ContractElementInformationType {
	if o == nil || IsNil(o.ChannelAccountContractElements) {
		var ret []ContractElementInformationType
		return ret
	}
	return o.ChannelAccountContractElements
}

// GetChannelAccountContractElementsOk returns a tuple with the ChannelAccountContractElements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelAccountContractInformationType) GetChannelAccountContractElementsOk() ([]ContractElementInformationType, bool) {
	if o == nil || IsNil(o.ChannelAccountContractElements) {
		return nil, false
	}
	return o.ChannelAccountContractElements, true
}

// HasChannelAccountContractElements returns a boolean if a field has been set.
func (o *ChannelAccountContractInformationType) HasChannelAccountContractElements() bool {
	if o != nil && !IsNil(o.ChannelAccountContractElements) {
		return true
	}

	return false
}

// SetChannelAccountContractElements gets a reference to the given []ContractElementInformationType and assigns it to the ChannelAccountContractElements field.
func (o *ChannelAccountContractInformationType) SetChannelAccountContractElements(v []ContractElementInformationType) {
	o.ChannelAccountContractElements = v
}

// GetContractId returns the ContractId field value if set, zero value otherwise.
func (o *ChannelAccountContractInformationType) GetContractId() UniqueIDType {
	if o == nil || IsNil(o.ContractId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ContractId
}

// GetContractIdOk returns a tuple with the ContractId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelAccountContractInformationType) GetContractIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ContractId) {
		return nil, false
	}
	return o.ContractId, true
}

// HasContractId returns a boolean if a field has been set.
func (o *ChannelAccountContractInformationType) HasContractId() bool {
	if o != nil && !IsNil(o.ContractId) {
		return true
	}

	return false
}

// SetContractId gets a reference to the given UniqueIDType and assigns it to the ContractId field.
func (o *ChannelAccountContractInformationType) SetContractId(v UniqueIDType) {
	o.ContractId = &v
}

// GetContractNo returns the ContractNo field value if set, zero value otherwise.
func (o *ChannelAccountContractInformationType) GetContractNo() string {
	if o == nil || IsNil(o.ContractNo) {
		var ret string
		return ret
	}
	return *o.ContractNo
}

// GetContractNoOk returns a tuple with the ContractNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelAccountContractInformationType) GetContractNoOk() (*string, bool) {
	if o == nil || IsNil(o.ContractNo) {
		return nil, false
	}
	return o.ContractNo, true
}

// HasContractNo returns a boolean if a field has been set.
func (o *ChannelAccountContractInformationType) HasContractNo() bool {
	if o != nil && !IsNil(o.ContractNo) {
		return true
	}

	return false
}

// SetContractNo gets a reference to the given string and assigns it to the ContractNo field.
func (o *ChannelAccountContractInformationType) SetContractNo(v string) {
	o.ContractNo = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ChannelAccountContractInformationType) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelAccountContractInformationType) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ChannelAccountContractInformationType) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *ChannelAccountContractInformationType) SetEndDate(v string) {
	o.EndDate = &v
}

// GetMarkStatementsToRegenerate returns the MarkStatementsToRegenerate field value if set, zero value otherwise.
func (o *ChannelAccountContractInformationType) GetMarkStatementsToRegenerate() bool {
	if o == nil || IsNil(o.MarkStatementsToRegenerate) {
		var ret bool
		return ret
	}
	return *o.MarkStatementsToRegenerate
}

// GetMarkStatementsToRegenerateOk returns a tuple with the MarkStatementsToRegenerate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelAccountContractInformationType) GetMarkStatementsToRegenerateOk() (*bool, bool) {
	if o == nil || IsNil(o.MarkStatementsToRegenerate) {
		return nil, false
	}
	return o.MarkStatementsToRegenerate, true
}

// HasMarkStatementsToRegenerate returns a boolean if a field has been set.
func (o *ChannelAccountContractInformationType) HasMarkStatementsToRegenerate() bool {
	if o != nil && !IsNil(o.MarkStatementsToRegenerate) {
		return true
	}

	return false
}

// SetMarkStatementsToRegenerate gets a reference to the given bool and assigns it to the MarkStatementsToRegenerate field.
func (o *ChannelAccountContractInformationType) SetMarkStatementsToRegenerate(v bool) {
	o.MarkStatementsToRegenerate = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *ChannelAccountContractInformationType) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelAccountContractInformationType) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *ChannelAccountContractInformationType) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *ChannelAccountContractInformationType) SetNote(v string) {
	o.Note = &v
}

func (o ChannelAccountContractInformationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelAccountContractInformationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BeginDate) {
		toSerialize["beginDate"] = o.BeginDate
	}
	if !IsNil(o.ChannelAccountContractElements) {
		toSerialize["channelAccountContractElements"] = o.ChannelAccountContractElements
	}
	if !IsNil(o.ContractId) {
		toSerialize["contractId"] = o.ContractId
	}
	if !IsNil(o.ContractNo) {
		toSerialize["contractNo"] = o.ContractNo
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.MarkStatementsToRegenerate) {
		toSerialize["markStatementsToRegenerate"] = o.MarkStatementsToRegenerate
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	return toSerialize, nil
}

type NullableChannelAccountContractInformationType struct {
	value *ChannelAccountContractInformationType
	isSet bool
}

func (v NullableChannelAccountContractInformationType) Get() *ChannelAccountContractInformationType {
	return v.value
}

func (v *NullableChannelAccountContractInformationType) Set(val *ChannelAccountContractInformationType) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelAccountContractInformationType) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelAccountContractInformationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelAccountContractInformationType(val *ChannelAccountContractInformationType) *NullableChannelAccountContractInformationType {
	return &NullableChannelAccountContractInformationType{value: val, isSet: true}
}

func (v NullableChannelAccountContractInformationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelAccountContractInformationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


