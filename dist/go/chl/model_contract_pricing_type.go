/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ContractPricingType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractPricingType{}

// ContractPricingType Price information applied as part of contract.
type ContractPricingType struct {
	Price *CurrencyAmountType `json:"price,omitempty"`
	PricePer *ContractPriceType `json:"pricePer,omitempty"`
}

// NewContractPricingType instantiates a new ContractPricingType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractPricingType() *ContractPricingType {
	this := ContractPricingType{}
	return &this
}

// NewContractPricingTypeWithDefaults instantiates a new ContractPricingType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractPricingTypeWithDefaults() *ContractPricingType {
	this := ContractPricingType{}
	return &this
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *ContractPricingType) GetPrice() CurrencyAmountType {
	if o == nil || IsNil(o.Price) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractPricingType) GetPriceOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *ContractPricingType) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given CurrencyAmountType and assigns it to the Price field.
func (o *ContractPricingType) SetPrice(v CurrencyAmountType) {
	o.Price = &v
}

// GetPricePer returns the PricePer field value if set, zero value otherwise.
func (o *ContractPricingType) GetPricePer() ContractPriceType {
	if o == nil || IsNil(o.PricePer) {
		var ret ContractPriceType
		return ret
	}
	return *o.PricePer
}

// GetPricePerOk returns a tuple with the PricePer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractPricingType) GetPricePerOk() (*ContractPriceType, bool) {
	if o == nil || IsNil(o.PricePer) {
		return nil, false
	}
	return o.PricePer, true
}

// HasPricePer returns a boolean if a field has been set.
func (o *ContractPricingType) HasPricePer() bool {
	if o != nil && !IsNil(o.PricePer) {
		return true
	}

	return false
}

// SetPricePer gets a reference to the given ContractPriceType and assigns it to the PricePer field.
func (o *ContractPricingType) SetPricePer(v ContractPriceType) {
	o.PricePer = &v
}

func (o ContractPricingType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractPricingType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.PricePer) {
		toSerialize["pricePer"] = o.PricePer
	}
	return toSerialize, nil
}

type NullableContractPricingType struct {
	value *ContractPricingType
	isSet bool
}

func (v NullableContractPricingType) Get() *ContractPricingType {
	return v.value
}

func (v *NullableContractPricingType) Set(val *ContractPricingType) {
	v.value = val
	v.isSet = true
}

func (v NullableContractPricingType) IsSet() bool {
	return v.isSet
}

func (v *NullableContractPricingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractPricingType(val *ContractPricingType) *NullableContractPricingType {
	return &NullableContractPricingType{value: val, isSet: true}
}

func (v NullableContractPricingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractPricingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


