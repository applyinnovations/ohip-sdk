/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ChannelInventorySnapshotMasterInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelInventorySnapshotMasterInfoType{}

// ChannelInventorySnapshotMasterInfoType Details about the booking channels and room types contained in the channel inventory snapshot.
type ChannelInventorySnapshotMasterInfoType struct {
	// Collection of booking channels returned in the channel inventory snapshot and the details about those channels.
	BookingChannel []ChannelInventorySnapshotMasterInfoTypeBookingChannelInner `json:"bookingChannel,omitempty"`
	// The internal hotel code that the given booking channel info is mapped under.
	HotelId *string `json:"hotelId,omitempty"`
}

// NewChannelInventorySnapshotMasterInfoType instantiates a new ChannelInventorySnapshotMasterInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelInventorySnapshotMasterInfoType() *ChannelInventorySnapshotMasterInfoType {
	this := ChannelInventorySnapshotMasterInfoType{}
	return &this
}

// NewChannelInventorySnapshotMasterInfoTypeWithDefaults instantiates a new ChannelInventorySnapshotMasterInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelInventorySnapshotMasterInfoTypeWithDefaults() *ChannelInventorySnapshotMasterInfoType {
	this := ChannelInventorySnapshotMasterInfoType{}
	return &this
}

// GetBookingChannel returns the BookingChannel field value if set, zero value otherwise.
func (o *ChannelInventorySnapshotMasterInfoType) GetBookingChannel() []ChannelInventorySnapshotMasterInfoTypeBookingChannelInner {
	if o == nil || IsNil(o.BookingChannel) {
		var ret []ChannelInventorySnapshotMasterInfoTypeBookingChannelInner
		return ret
	}
	return o.BookingChannel
}

// GetBookingChannelOk returns a tuple with the BookingChannel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelInventorySnapshotMasterInfoType) GetBookingChannelOk() ([]ChannelInventorySnapshotMasterInfoTypeBookingChannelInner, bool) {
	if o == nil || IsNil(o.BookingChannel) {
		return nil, false
	}
	return o.BookingChannel, true
}

// HasBookingChannel returns a boolean if a field has been set.
func (o *ChannelInventorySnapshotMasterInfoType) HasBookingChannel() bool {
	if o != nil && !IsNil(o.BookingChannel) {
		return true
	}

	return false
}

// SetBookingChannel gets a reference to the given []ChannelInventorySnapshotMasterInfoTypeBookingChannelInner and assigns it to the BookingChannel field.
func (o *ChannelInventorySnapshotMasterInfoType) SetBookingChannel(v []ChannelInventorySnapshotMasterInfoTypeBookingChannelInner) {
	o.BookingChannel = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ChannelInventorySnapshotMasterInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelInventorySnapshotMasterInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ChannelInventorySnapshotMasterInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ChannelInventorySnapshotMasterInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o ChannelInventorySnapshotMasterInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelInventorySnapshotMasterInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BookingChannel) {
		toSerialize["bookingChannel"] = o.BookingChannel
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableChannelInventorySnapshotMasterInfoType struct {
	value *ChannelInventorySnapshotMasterInfoType
	isSet bool
}

func (v NullableChannelInventorySnapshotMasterInfoType) Get() *ChannelInventorySnapshotMasterInfoType {
	return v.value
}

func (v *NullableChannelInventorySnapshotMasterInfoType) Set(val *ChannelInventorySnapshotMasterInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelInventorySnapshotMasterInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelInventorySnapshotMasterInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelInventorySnapshotMasterInfoType(val *ChannelInventorySnapshotMasterInfoType) *NullableChannelInventorySnapshotMasterInfoType {
	return &NullableChannelInventorySnapshotMasterInfoType{value: val, isSet: true}
}

func (v NullableChannelInventorySnapshotMasterInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelInventorySnapshotMasterInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


