/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the AvailableRoomType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvailableRoomType{}

// AvailableRoomType Room Type and Room Rate combination.
type AvailableRoomType struct {
	// A monetary amount.
	Amount *float32 `json:"amount,omitempty"`
	ChannelRoomType *string `json:"channelRoomType,omitempty"`
	// Provides a currency code to reflect the currency in which an amount may be expressed.
	CurrencyCode *string `json:"currencyCode,omitempty"`
	Description *string `json:"description,omitempty"`
	RateChangedYN *string `json:"rateChangedYN,omitempty"`
	RoomType *string `json:"roomType,omitempty"`
}

// NewAvailableRoomType instantiates a new AvailableRoomType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailableRoomType() *AvailableRoomType {
	this := AvailableRoomType{}
	return &this
}

// NewAvailableRoomTypeWithDefaults instantiates a new AvailableRoomType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailableRoomTypeWithDefaults() *AvailableRoomType {
	this := AvailableRoomType{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *AvailableRoomType) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableRoomType) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *AvailableRoomType) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *AvailableRoomType) SetAmount(v float32) {
	o.Amount = &v
}

// GetChannelRoomType returns the ChannelRoomType field value if set, zero value otherwise.
func (o *AvailableRoomType) GetChannelRoomType() string {
	if o == nil || IsNil(o.ChannelRoomType) {
		var ret string
		return ret
	}
	return *o.ChannelRoomType
}

// GetChannelRoomTypeOk returns a tuple with the ChannelRoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableRoomType) GetChannelRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ChannelRoomType) {
		return nil, false
	}
	return o.ChannelRoomType, true
}

// HasChannelRoomType returns a boolean if a field has been set.
func (o *AvailableRoomType) HasChannelRoomType() bool {
	if o != nil && !IsNil(o.ChannelRoomType) {
		return true
	}

	return false
}

// SetChannelRoomType gets a reference to the given string and assigns it to the ChannelRoomType field.
func (o *AvailableRoomType) SetChannelRoomType(v string) {
	o.ChannelRoomType = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *AvailableRoomType) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableRoomType) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *AvailableRoomType) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *AvailableRoomType) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AvailableRoomType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableRoomType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AvailableRoomType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AvailableRoomType) SetDescription(v string) {
	o.Description = &v
}

// GetRateChangedYN returns the RateChangedYN field value if set, zero value otherwise.
func (o *AvailableRoomType) GetRateChangedYN() string {
	if o == nil || IsNil(o.RateChangedYN) {
		var ret string
		return ret
	}
	return *o.RateChangedYN
}

// GetRateChangedYNOk returns a tuple with the RateChangedYN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableRoomType) GetRateChangedYNOk() (*string, bool) {
	if o == nil || IsNil(o.RateChangedYN) {
		return nil, false
	}
	return o.RateChangedYN, true
}

// HasRateChangedYN returns a boolean if a field has been set.
func (o *AvailableRoomType) HasRateChangedYN() bool {
	if o != nil && !IsNil(o.RateChangedYN) {
		return true
	}

	return false
}

// SetRateChangedYN gets a reference to the given string and assigns it to the RateChangedYN field.
func (o *AvailableRoomType) SetRateChangedYN(v string) {
	o.RateChangedYN = &v
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *AvailableRoomType) GetRoomType() string {
	if o == nil || IsNil(o.RoomType) {
		var ret string
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableRoomType) GetRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *AvailableRoomType) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given string and assigns it to the RoomType field.
func (o *AvailableRoomType) SetRoomType(v string) {
	o.RoomType = &v
}

func (o AvailableRoomType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvailableRoomType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.ChannelRoomType) {
		toSerialize["channelRoomType"] = o.ChannelRoomType
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.RateChangedYN) {
		toSerialize["rateChangedYN"] = o.RateChangedYN
	}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	return toSerialize, nil
}

type NullableAvailableRoomType struct {
	value *AvailableRoomType
	isSet bool
}

func (v NullableAvailableRoomType) Get() *AvailableRoomType {
	return v.value
}

func (v *NullableAvailableRoomType) Set(val *AvailableRoomType) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailableRoomType) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailableRoomType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailableRoomType(val *AvailableRoomType) *NullableAvailableRoomType {
	return &NullableAvailableRoomType{value: val, isSet: true}
}

func (v NullableAvailableRoomType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailableRoomType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


