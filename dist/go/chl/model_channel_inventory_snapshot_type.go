/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ChannelInventorySnapshotType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelInventorySnapshotType{}

// ChannelInventorySnapshotType The evaluated channel inventory snapshot statistics based on the search criteria given.
type ChannelInventorySnapshotType struct {
	Inventories *ChannelInventorySnapshotInventoriesType `json:"inventories,omitempty"`
	MasterInfo *ChannelInventorySnapshotMasterInfoType `json:"masterInfo,omitempty"`
}

// NewChannelInventorySnapshotType instantiates a new ChannelInventorySnapshotType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelInventorySnapshotType() *ChannelInventorySnapshotType {
	this := ChannelInventorySnapshotType{}
	return &this
}

// NewChannelInventorySnapshotTypeWithDefaults instantiates a new ChannelInventorySnapshotType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelInventorySnapshotTypeWithDefaults() *ChannelInventorySnapshotType {
	this := ChannelInventorySnapshotType{}
	return &this
}

// GetInventories returns the Inventories field value if set, zero value otherwise.
func (o *ChannelInventorySnapshotType) GetInventories() ChannelInventorySnapshotInventoriesType {
	if o == nil || IsNil(o.Inventories) {
		var ret ChannelInventorySnapshotInventoriesType
		return ret
	}
	return *o.Inventories
}

// GetInventoriesOk returns a tuple with the Inventories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelInventorySnapshotType) GetInventoriesOk() (*ChannelInventorySnapshotInventoriesType, bool) {
	if o == nil || IsNil(o.Inventories) {
		return nil, false
	}
	return o.Inventories, true
}

// HasInventories returns a boolean if a field has been set.
func (o *ChannelInventorySnapshotType) HasInventories() bool {
	if o != nil && !IsNil(o.Inventories) {
		return true
	}

	return false
}

// SetInventories gets a reference to the given ChannelInventorySnapshotInventoriesType and assigns it to the Inventories field.
func (o *ChannelInventorySnapshotType) SetInventories(v ChannelInventorySnapshotInventoriesType) {
	o.Inventories = &v
}

// GetMasterInfo returns the MasterInfo field value if set, zero value otherwise.
func (o *ChannelInventorySnapshotType) GetMasterInfo() ChannelInventorySnapshotMasterInfoType {
	if o == nil || IsNil(o.MasterInfo) {
		var ret ChannelInventorySnapshotMasterInfoType
		return ret
	}
	return *o.MasterInfo
}

// GetMasterInfoOk returns a tuple with the MasterInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelInventorySnapshotType) GetMasterInfoOk() (*ChannelInventorySnapshotMasterInfoType, bool) {
	if o == nil || IsNil(o.MasterInfo) {
		return nil, false
	}
	return o.MasterInfo, true
}

// HasMasterInfo returns a boolean if a field has been set.
func (o *ChannelInventorySnapshotType) HasMasterInfo() bool {
	if o != nil && !IsNil(o.MasterInfo) {
		return true
	}

	return false
}

// SetMasterInfo gets a reference to the given ChannelInventorySnapshotMasterInfoType and assigns it to the MasterInfo field.
func (o *ChannelInventorySnapshotType) SetMasterInfo(v ChannelInventorySnapshotMasterInfoType) {
	o.MasterInfo = &v
}

func (o ChannelInventorySnapshotType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelInventorySnapshotType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Inventories) {
		toSerialize["inventories"] = o.Inventories
	}
	if !IsNil(o.MasterInfo) {
		toSerialize["masterInfo"] = o.MasterInfo
	}
	return toSerialize, nil
}

type NullableChannelInventorySnapshotType struct {
	value *ChannelInventorySnapshotType
	isSet bool
}

func (v NullableChannelInventorySnapshotType) Get() *ChannelInventorySnapshotType {
	return v.value
}

func (v *NullableChannelInventorySnapshotType) Set(val *ChannelInventorySnapshotType) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelInventorySnapshotType) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelInventorySnapshotType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelInventorySnapshotType(val *ChannelInventorySnapshotType) *NullableChannelInventorySnapshotType {
	return &NullableChannelInventorySnapshotType{value: val, isSet: true}
}

func (v NullableChannelInventorySnapshotType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelInventorySnapshotType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


