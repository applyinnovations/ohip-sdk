/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
	"fmt"
)

// AmenityGroupType User defined logical group name for the amenities.
type AmenityGroupType string

// List of amenityGroupType
const (
	AMENITYGROUPTYPE_PROPERTY_FEATURES AmenityGroupType = "PropertyFeatures"
	AMENITYGROUPTYPE_ROOM_FEATURES AmenityGroupType = "RoomFeatures"
	AMENITYGROUPTYPE_PRODUCTS_FEATURES AmenityGroupType = "ProductsFeatures"
	AMENITYGROUPTYPE_BED_CODES AmenityGroupType = "BedCodes"
)

// All allowed values of AmenityGroupType enum
var AllowedAmenityGroupTypeEnumValues = []AmenityGroupType{
	"PropertyFeatures",
	"RoomFeatures",
	"ProductsFeatures",
	"BedCodes",
}

func (v *AmenityGroupType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AmenityGroupType(value)
	for _, existing := range AllowedAmenityGroupTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AmenityGroupType", value)
}

// NewAmenityGroupTypeFromValue returns a pointer to a valid AmenityGroupType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAmenityGroupTypeFromValue(v string) (*AmenityGroupType, error) {
	ev := AmenityGroupType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AmenityGroupType: valid values are %v", v, AllowedAmenityGroupTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AmenityGroupType) IsValid() bool {
	for _, existing := range AllowedAmenityGroupTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to amenityGroupType value
func (v AmenityGroupType) Ptr() *AmenityGroupType {
	return &v
}

type NullableAmenityGroupType struct {
	value *AmenityGroupType
	isSet bool
}

func (v NullableAmenityGroupType) Get() *AmenityGroupType {
	return v.value
}

func (v *NullableAmenityGroupType) Set(val *AmenityGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableAmenityGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableAmenityGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmenityGroupType(val *AmenityGroupType) *NullableAmenityGroupType {
	return &NullableAmenityGroupType{value: val, isSet: true}
}

func (v NullableAmenityGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmenityGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

