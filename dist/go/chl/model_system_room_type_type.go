/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the SystemRoomTypeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SystemRoomTypeType{}

// SystemRoomTypeType Identify room type details of external system.
type SystemRoomTypeType struct {
	RoomTypeCode *CodeDescriptionType `json:"roomTypeCode,omitempty"`
	// Inactive date of room type external system.
	InactiveDate *string `json:"inactiveDate,omitempty"`
}

// NewSystemRoomTypeType instantiates a new SystemRoomTypeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemRoomTypeType() *SystemRoomTypeType {
	this := SystemRoomTypeType{}
	return &this
}

// NewSystemRoomTypeTypeWithDefaults instantiates a new SystemRoomTypeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemRoomTypeTypeWithDefaults() *SystemRoomTypeType {
	this := SystemRoomTypeType{}
	return &this
}

// GetRoomTypeCode returns the RoomTypeCode field value if set, zero value otherwise.
func (o *SystemRoomTypeType) GetRoomTypeCode() CodeDescriptionType {
	if o == nil || IsNil(o.RoomTypeCode) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.RoomTypeCode
}

// GetRoomTypeCodeOk returns a tuple with the RoomTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemRoomTypeType) GetRoomTypeCodeOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.RoomTypeCode) {
		return nil, false
	}
	return o.RoomTypeCode, true
}

// HasRoomTypeCode returns a boolean if a field has been set.
func (o *SystemRoomTypeType) HasRoomTypeCode() bool {
	if o != nil && !IsNil(o.RoomTypeCode) {
		return true
	}

	return false
}

// SetRoomTypeCode gets a reference to the given CodeDescriptionType and assigns it to the RoomTypeCode field.
func (o *SystemRoomTypeType) SetRoomTypeCode(v CodeDescriptionType) {
	o.RoomTypeCode = &v
}

// GetInactiveDate returns the InactiveDate field value if set, zero value otherwise.
func (o *SystemRoomTypeType) GetInactiveDate() string {
	if o == nil || IsNil(o.InactiveDate) {
		var ret string
		return ret
	}
	return *o.InactiveDate
}

// GetInactiveDateOk returns a tuple with the InactiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemRoomTypeType) GetInactiveDateOk() (*string, bool) {
	if o == nil || IsNil(o.InactiveDate) {
		return nil, false
	}
	return o.InactiveDate, true
}

// HasInactiveDate returns a boolean if a field has been set.
func (o *SystemRoomTypeType) HasInactiveDate() bool {
	if o != nil && !IsNil(o.InactiveDate) {
		return true
	}

	return false
}

// SetInactiveDate gets a reference to the given string and assigns it to the InactiveDate field.
func (o *SystemRoomTypeType) SetInactiveDate(v string) {
	o.InactiveDate = &v
}

func (o SystemRoomTypeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SystemRoomTypeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoomTypeCode) {
		toSerialize["roomTypeCode"] = o.RoomTypeCode
	}
	if !IsNil(o.InactiveDate) {
		toSerialize["inactiveDate"] = o.InactiveDate
	}
	return toSerialize, nil
}

type NullableSystemRoomTypeType struct {
	value *SystemRoomTypeType
	isSet bool
}

func (v NullableSystemRoomTypeType) Get() *SystemRoomTypeType {
	return v.value
}

func (v *NullableSystemRoomTypeType) Set(val *SystemRoomTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemRoomTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemRoomTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemRoomTypeType(val *SystemRoomTypeType) *NullableSystemRoomTypeType {
	return &NullableSystemRoomTypeType{value: val, isSet: true}
}

func (v NullableSystemRoomTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemRoomTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


