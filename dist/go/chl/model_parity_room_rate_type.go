/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ParityRoomRateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParityRoomRateType{}

// ParityRoomRateType Rate for Room Type and Rate Plan combination.
type ParityRoomRateType struct {
	// The code that identifies a Booking Channel Rate Plan Code.
	ChannelRatePlanCode *string `json:"channelRatePlanCode,omitempty"`
	// The code that identifies a Booking Channel Room Type.
	ChannelRoomType *string `json:"channelRoomType,omitempty"`
	// Rate on specific arrival date.
	ParityRates []ParityRateType `json:"parityRates,omitempty"`
	// The code that identifies a Rate Plan Code.
	RatePlanCode *string `json:"ratePlanCode,omitempty"`
	// The code that identifies a Room Type.
	RoomType *string `json:"roomType,omitempty"`
}

// NewParityRoomRateType instantiates a new ParityRoomRateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParityRoomRateType() *ParityRoomRateType {
	this := ParityRoomRateType{}
	return &this
}

// NewParityRoomRateTypeWithDefaults instantiates a new ParityRoomRateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParityRoomRateTypeWithDefaults() *ParityRoomRateType {
	this := ParityRoomRateType{}
	return &this
}

// GetChannelRatePlanCode returns the ChannelRatePlanCode field value if set, zero value otherwise.
func (o *ParityRoomRateType) GetChannelRatePlanCode() string {
	if o == nil || IsNil(o.ChannelRatePlanCode) {
		var ret string
		return ret
	}
	return *o.ChannelRatePlanCode
}

// GetChannelRatePlanCodeOk returns a tuple with the ChannelRatePlanCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRoomRateType) GetChannelRatePlanCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ChannelRatePlanCode) {
		return nil, false
	}
	return o.ChannelRatePlanCode, true
}

// HasChannelRatePlanCode returns a boolean if a field has been set.
func (o *ParityRoomRateType) HasChannelRatePlanCode() bool {
	if o != nil && !IsNil(o.ChannelRatePlanCode) {
		return true
	}

	return false
}

// SetChannelRatePlanCode gets a reference to the given string and assigns it to the ChannelRatePlanCode field.
func (o *ParityRoomRateType) SetChannelRatePlanCode(v string) {
	o.ChannelRatePlanCode = &v
}

// GetChannelRoomType returns the ChannelRoomType field value if set, zero value otherwise.
func (o *ParityRoomRateType) GetChannelRoomType() string {
	if o == nil || IsNil(o.ChannelRoomType) {
		var ret string
		return ret
	}
	return *o.ChannelRoomType
}

// GetChannelRoomTypeOk returns a tuple with the ChannelRoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRoomRateType) GetChannelRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ChannelRoomType) {
		return nil, false
	}
	return o.ChannelRoomType, true
}

// HasChannelRoomType returns a boolean if a field has been set.
func (o *ParityRoomRateType) HasChannelRoomType() bool {
	if o != nil && !IsNil(o.ChannelRoomType) {
		return true
	}

	return false
}

// SetChannelRoomType gets a reference to the given string and assigns it to the ChannelRoomType field.
func (o *ParityRoomRateType) SetChannelRoomType(v string) {
	o.ChannelRoomType = &v
}

// GetParityRates returns the ParityRates field value if set, zero value otherwise.
func (o *ParityRoomRateType) GetParityRates() []ParityRateType {
	if o == nil || IsNil(o.ParityRates) {
		var ret []ParityRateType
		return ret
	}
	return o.ParityRates
}

// GetParityRatesOk returns a tuple with the ParityRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRoomRateType) GetParityRatesOk() ([]ParityRateType, bool) {
	if o == nil || IsNil(o.ParityRates) {
		return nil, false
	}
	return o.ParityRates, true
}

// HasParityRates returns a boolean if a field has been set.
func (o *ParityRoomRateType) HasParityRates() bool {
	if o != nil && !IsNil(o.ParityRates) {
		return true
	}

	return false
}

// SetParityRates gets a reference to the given []ParityRateType and assigns it to the ParityRates field.
func (o *ParityRoomRateType) SetParityRates(v []ParityRateType) {
	o.ParityRates = v
}

// GetRatePlanCode returns the RatePlanCode field value if set, zero value otherwise.
func (o *ParityRoomRateType) GetRatePlanCode() string {
	if o == nil || IsNil(o.RatePlanCode) {
		var ret string
		return ret
	}
	return *o.RatePlanCode
}

// GetRatePlanCodeOk returns a tuple with the RatePlanCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRoomRateType) GetRatePlanCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RatePlanCode) {
		return nil, false
	}
	return o.RatePlanCode, true
}

// HasRatePlanCode returns a boolean if a field has been set.
func (o *ParityRoomRateType) HasRatePlanCode() bool {
	if o != nil && !IsNil(o.RatePlanCode) {
		return true
	}

	return false
}

// SetRatePlanCode gets a reference to the given string and assigns it to the RatePlanCode field.
func (o *ParityRoomRateType) SetRatePlanCode(v string) {
	o.RatePlanCode = &v
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *ParityRoomRateType) GetRoomType() string {
	if o == nil || IsNil(o.RoomType) {
		var ret string
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParityRoomRateType) GetRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *ParityRoomRateType) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given string and assigns it to the RoomType field.
func (o *ParityRoomRateType) SetRoomType(v string) {
	o.RoomType = &v
}

func (o ParityRoomRateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParityRoomRateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChannelRatePlanCode) {
		toSerialize["channelRatePlanCode"] = o.ChannelRatePlanCode
	}
	if !IsNil(o.ChannelRoomType) {
		toSerialize["channelRoomType"] = o.ChannelRoomType
	}
	if !IsNil(o.ParityRates) {
		toSerialize["parityRates"] = o.ParityRates
	}
	if !IsNil(o.RatePlanCode) {
		toSerialize["ratePlanCode"] = o.RatePlanCode
	}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	return toSerialize, nil
}

type NullableParityRoomRateType struct {
	value *ParityRoomRateType
	isSet bool
}

func (v NullableParityRoomRateType) Get() *ParityRoomRateType {
	return v.value
}

func (v *NullableParityRoomRateType) Set(val *ParityRoomRateType) {
	v.value = val
	v.isSet = true
}

func (v NullableParityRoomRateType) IsSet() bool {
	return v.isSet
}

func (v *NullableParityRoomRateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParityRoomRateType(val *ParityRoomRateType) *NullableParityRoomRateType {
	return &NullableParityRoomRateType{value: val, isSet: true}
}

func (v NullableParityRoomRateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParityRoomRateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


