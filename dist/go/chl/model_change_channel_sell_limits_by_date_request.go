/*
OPERA Cloud Channel Configuration API

APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package chl

import (
	"encoding/json"
)

// checks if the ChangeChannelSellLimitsByDateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeChannelSellLimitsByDateRequest{}

// ChangeChannelSellLimitsByDateRequest struct for ChangeChannelSellLimitsByDateRequest
type ChangeChannelSellLimitsByDateRequest struct {
	// Flag to indicate whether any overlapping schedules should be automatically adjusted (split, truncated, etc.) as needed.
	AdjustOverlappingSchedules *bool `json:"adjustOverlappingSchedules,omitempty"`
	SellLimits *ChannelSellLimitsByDateType `json:"sellLimits,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewChangeChannelSellLimitsByDateRequest instantiates a new ChangeChannelSellLimitsByDateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeChannelSellLimitsByDateRequest() *ChangeChannelSellLimitsByDateRequest {
	this := ChangeChannelSellLimitsByDateRequest{}
	return &this
}

// NewChangeChannelSellLimitsByDateRequestWithDefaults instantiates a new ChangeChannelSellLimitsByDateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeChannelSellLimitsByDateRequestWithDefaults() *ChangeChannelSellLimitsByDateRequest {
	this := ChangeChannelSellLimitsByDateRequest{}
	return &this
}

// GetAdjustOverlappingSchedules returns the AdjustOverlappingSchedules field value if set, zero value otherwise.
func (o *ChangeChannelSellLimitsByDateRequest) GetAdjustOverlappingSchedules() bool {
	if o == nil || IsNil(o.AdjustOverlappingSchedules) {
		var ret bool
		return ret
	}
	return *o.AdjustOverlappingSchedules
}

// GetAdjustOverlappingSchedulesOk returns a tuple with the AdjustOverlappingSchedules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeChannelSellLimitsByDateRequest) GetAdjustOverlappingSchedulesOk() (*bool, bool) {
	if o == nil || IsNil(o.AdjustOverlappingSchedules) {
		return nil, false
	}
	return o.AdjustOverlappingSchedules, true
}

// HasAdjustOverlappingSchedules returns a boolean if a field has been set.
func (o *ChangeChannelSellLimitsByDateRequest) HasAdjustOverlappingSchedules() bool {
	if o != nil && !IsNil(o.AdjustOverlappingSchedules) {
		return true
	}

	return false
}

// SetAdjustOverlappingSchedules gets a reference to the given bool and assigns it to the AdjustOverlappingSchedules field.
func (o *ChangeChannelSellLimitsByDateRequest) SetAdjustOverlappingSchedules(v bool) {
	o.AdjustOverlappingSchedules = &v
}

// GetSellLimits returns the SellLimits field value if set, zero value otherwise.
func (o *ChangeChannelSellLimitsByDateRequest) GetSellLimits() ChannelSellLimitsByDateType {
	if o == nil || IsNil(o.SellLimits) {
		var ret ChannelSellLimitsByDateType
		return ret
	}
	return *o.SellLimits
}

// GetSellLimitsOk returns a tuple with the SellLimits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeChannelSellLimitsByDateRequest) GetSellLimitsOk() (*ChannelSellLimitsByDateType, bool) {
	if o == nil || IsNil(o.SellLimits) {
		return nil, false
	}
	return o.SellLimits, true
}

// HasSellLimits returns a boolean if a field has been set.
func (o *ChangeChannelSellLimitsByDateRequest) HasSellLimits() bool {
	if o != nil && !IsNil(o.SellLimits) {
		return true
	}

	return false
}

// SetSellLimits gets a reference to the given ChannelSellLimitsByDateType and assigns it to the SellLimits field.
func (o *ChangeChannelSellLimitsByDateRequest) SetSellLimits(v ChannelSellLimitsByDateType) {
	o.SellLimits = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ChangeChannelSellLimitsByDateRequest) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeChannelSellLimitsByDateRequest) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ChangeChannelSellLimitsByDateRequest) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ChangeChannelSellLimitsByDateRequest) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ChangeChannelSellLimitsByDateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeChannelSellLimitsByDateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdjustOverlappingSchedules) {
		toSerialize["adjustOverlappingSchedules"] = o.AdjustOverlappingSchedules
	}
	if !IsNil(o.SellLimits) {
		toSerialize["sellLimits"] = o.SellLimits
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableChangeChannelSellLimitsByDateRequest struct {
	value *ChangeChannelSellLimitsByDateRequest
	isSet bool
}

func (v NullableChangeChannelSellLimitsByDateRequest) Get() *ChangeChannelSellLimitsByDateRequest {
	return v.value
}

func (v *NullableChangeChannelSellLimitsByDateRequest) Set(val *ChangeChannelSellLimitsByDateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeChannelSellLimitsByDateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeChannelSellLimitsByDateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeChannelSellLimitsByDateRequest(val *ChangeChannelSellLimitsByDateRequest) *NullableChangeChannelSellLimitsByDateRequest {
	return &NullableChangeChannelSellLimitsByDateRequest{value: val, isSet: true}
}

func (v NullableChangeChannelSellLimitsByDateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeChannelSellLimitsByDateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


