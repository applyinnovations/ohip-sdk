/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the PolicyApplyCriteriaType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyApplyCriteriaType{}

// PolicyApplyCriteriaType Criteria for Attaching or Detaching a Deposit Policy towards a Deposit payment.
type PolicyApplyCriteriaType struct {
	// Property where the deposit exists.
	HotelId *string `json:"hotelId,omitempty"`
	PolicyId *UniqueIDType `json:"policyId,omitempty"`
	// The transaction number of the payment to which the Deposit policy is being attached or detached.
	TransactionNo *float32 `json:"transactionNo,omitempty"`
}

// NewPolicyApplyCriteriaType instantiates a new PolicyApplyCriteriaType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyApplyCriteriaType() *PolicyApplyCriteriaType {
	this := PolicyApplyCriteriaType{}
	return &this
}

// NewPolicyApplyCriteriaTypeWithDefaults instantiates a new PolicyApplyCriteriaType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyApplyCriteriaTypeWithDefaults() *PolicyApplyCriteriaType {
	this := PolicyApplyCriteriaType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *PolicyApplyCriteriaType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyApplyCriteriaType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *PolicyApplyCriteriaType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *PolicyApplyCriteriaType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetPolicyId returns the PolicyId field value if set, zero value otherwise.
func (o *PolicyApplyCriteriaType) GetPolicyId() UniqueIDType {
	if o == nil || IsNil(o.PolicyId) {
		var ret UniqueIDType
		return ret
	}
	return *o.PolicyId
}

// GetPolicyIdOk returns a tuple with the PolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyApplyCriteriaType) GetPolicyIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.PolicyId) {
		return nil, false
	}
	return o.PolicyId, true
}

// HasPolicyId returns a boolean if a field has been set.
func (o *PolicyApplyCriteriaType) HasPolicyId() bool {
	if o != nil && !IsNil(o.PolicyId) {
		return true
	}

	return false
}

// SetPolicyId gets a reference to the given UniqueIDType and assigns it to the PolicyId field.
func (o *PolicyApplyCriteriaType) SetPolicyId(v UniqueIDType) {
	o.PolicyId = &v
}

// GetTransactionNo returns the TransactionNo field value if set, zero value otherwise.
func (o *PolicyApplyCriteriaType) GetTransactionNo() float32 {
	if o == nil || IsNil(o.TransactionNo) {
		var ret float32
		return ret
	}
	return *o.TransactionNo
}

// GetTransactionNoOk returns a tuple with the TransactionNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyApplyCriteriaType) GetTransactionNoOk() (*float32, bool) {
	if o == nil || IsNil(o.TransactionNo) {
		return nil, false
	}
	return o.TransactionNo, true
}

// HasTransactionNo returns a boolean if a field has been set.
func (o *PolicyApplyCriteriaType) HasTransactionNo() bool {
	if o != nil && !IsNil(o.TransactionNo) {
		return true
	}

	return false
}

// SetTransactionNo gets a reference to the given float32 and assigns it to the TransactionNo field.
func (o *PolicyApplyCriteriaType) SetTransactionNo(v float32) {
	o.TransactionNo = &v
}

func (o PolicyApplyCriteriaType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyApplyCriteriaType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.PolicyId) {
		toSerialize["policyId"] = o.PolicyId
	}
	if !IsNil(o.TransactionNo) {
		toSerialize["transactionNo"] = o.TransactionNo
	}
	return toSerialize, nil
}

type NullablePolicyApplyCriteriaType struct {
	value *PolicyApplyCriteriaType
	isSet bool
}

func (v NullablePolicyApplyCriteriaType) Get() *PolicyApplyCriteriaType {
	return v.value
}

func (v *NullablePolicyApplyCriteriaType) Set(val *PolicyApplyCriteriaType) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyApplyCriteriaType) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyApplyCriteriaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyApplyCriteriaType(val *PolicyApplyCriteriaType) *NullablePolicyApplyCriteriaType {
	return &NullablePolicyApplyCriteriaType{value: val, isSet: true}
}

func (v NullablePolicyApplyCriteriaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyApplyCriteriaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


