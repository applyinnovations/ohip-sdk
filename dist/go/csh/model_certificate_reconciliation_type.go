/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the CertificateReconciliationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateReconciliationType{}

// CertificateReconciliationType FBA ( Flexible Benefits Awards ) related fields.
type CertificateReconciliationType struct {
	// Award's FBA amount.
	Amount *float32 `json:"amount,omitempty"`
	// The number for the given certificate.
	CertificateNumber *string `json:"certificateNumber,omitempty"`
	// The code specifying a monetary unit. Use ISO 4217, three alpha code.
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// The symbol for the currency, e.g, for currencyCode USD the symbol is $.
	CurrencySymbol *string `json:"currencySymbol,omitempty"`
	// Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard \"minor unit\". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces=\"2\" to represent $85).
	DecimalPlaces *int32 `json:"decimalPlaces,omitempty"`
	FBAStatus *FBAStatusType `json:"fBAStatus,omitempty"`
	// Business date of the FBA bill generation.
	FbaBillGenDate *string `json:"fbaBillGenDate,omitempty"`
	// Indicates if this certificate is a Flexible Benefit Award certificate.
	FlexibleBenefitAward *bool `json:"flexibleBenefitAward,omitempty"`
	// Hotel context for the selected certificate.
	HotelId *string `json:"hotelId,omitempty"`
	// Award's FBA monetary values.
	MonetaryValue *float32 `json:"monetaryValue,omitempty"`
	// Indicates whether the certificate is Orphan or not.
	OrphanCertificate *bool `json:"orphanCertificate,omitempty"`
	// Indicates whether FBA has been posted.
	Posted *bool `json:"posted,omitempty"`
	// Award's FBA posted amount.
	PostedAmount *float32 `json:"postedAmount,omitempty"`
	// Business date of the FBA posting.
	PostingBusinessDate *string `json:"postingBusinessDate,omitempty"`
	// Date and time of the FBA posting.
	PostingDateTime *string `json:"postingDateTime,omitempty"`
	// Marks if the certificate is eligible for reimbursement.
	ReimburseAllowed *bool `json:"reimburseAllowed,omitempty"`
	// Indicates whether FBA has been reimbursed.
	Reimbursed *bool `json:"reimbursed,omitempty"`
	// Award's FBA reimbursed amount.
	ReimbursedAmount *float32 `json:"reimbursedAmount,omitempty"`
	// Business date of the FBA reimbursement.
	ReimbursementBusinessDate *string `json:"reimbursementBusinessDate,omitempty"`
	// Date and time of the FBA reimbursement.
	ReimbursementDateTime *string `json:"reimbursementDateTime,omitempty"`
	ReservationId *ReservationId `json:"reservationId,omitempty"`
	// Marks if the certificate is eligible for resettlement
	ResettleAllowed *bool `json:"resettleAllowed,omitempty"`
	// Indicates whether FBA has been settled.
	Settled *bool `json:"settled,omitempty"`
	// Business date of the FBA settlement.
	SettlementBusinessDate *string `json:"settlementBusinessDate,omitempty"`
	// Date and time of the FBA settlement.
	SettlementDateTime *string `json:"settlementDateTime,omitempty"`
	Status *FBAStatusType `json:"status,omitempty"`
}

// NewCertificateReconciliationType instantiates a new CertificateReconciliationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateReconciliationType() *CertificateReconciliationType {
	this := CertificateReconciliationType{}
	return &this
}

// NewCertificateReconciliationTypeWithDefaults instantiates a new CertificateReconciliationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateReconciliationTypeWithDefaults() *CertificateReconciliationType {
	this := CertificateReconciliationType{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *CertificateReconciliationType) SetAmount(v float32) {
	o.Amount = &v
}

// GetCertificateNumber returns the CertificateNumber field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetCertificateNumber() string {
	if o == nil || IsNil(o.CertificateNumber) {
		var ret string
		return ret
	}
	return *o.CertificateNumber
}

// GetCertificateNumberOk returns a tuple with the CertificateNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetCertificateNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateNumber) {
		return nil, false
	}
	return o.CertificateNumber, true
}

// HasCertificateNumber returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasCertificateNumber() bool {
	if o != nil && !IsNil(o.CertificateNumber) {
		return true
	}

	return false
}

// SetCertificateNumber gets a reference to the given string and assigns it to the CertificateNumber field.
func (o *CertificateReconciliationType) SetCertificateNumber(v string) {
	o.CertificateNumber = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *CertificateReconciliationType) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetCurrencySymbol returns the CurrencySymbol field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetCurrencySymbol() string {
	if o == nil || IsNil(o.CurrencySymbol) {
		var ret string
		return ret
	}
	return *o.CurrencySymbol
}

// GetCurrencySymbolOk returns a tuple with the CurrencySymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetCurrencySymbolOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencySymbol) {
		return nil, false
	}
	return o.CurrencySymbol, true
}

// HasCurrencySymbol returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasCurrencySymbol() bool {
	if o != nil && !IsNil(o.CurrencySymbol) {
		return true
	}

	return false
}

// SetCurrencySymbol gets a reference to the given string and assigns it to the CurrencySymbol field.
func (o *CertificateReconciliationType) SetCurrencySymbol(v string) {
	o.CurrencySymbol = &v
}

// GetDecimalPlaces returns the DecimalPlaces field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetDecimalPlaces() int32 {
	if o == nil || IsNil(o.DecimalPlaces) {
		var ret int32
		return ret
	}
	return *o.DecimalPlaces
}

// GetDecimalPlacesOk returns a tuple with the DecimalPlaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetDecimalPlacesOk() (*int32, bool) {
	if o == nil || IsNil(o.DecimalPlaces) {
		return nil, false
	}
	return o.DecimalPlaces, true
}

// HasDecimalPlaces returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasDecimalPlaces() bool {
	if o != nil && !IsNil(o.DecimalPlaces) {
		return true
	}

	return false
}

// SetDecimalPlaces gets a reference to the given int32 and assigns it to the DecimalPlaces field.
func (o *CertificateReconciliationType) SetDecimalPlaces(v int32) {
	o.DecimalPlaces = &v
}

// GetFBAStatus returns the FBAStatus field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetFBAStatus() FBAStatusType {
	if o == nil || IsNil(o.FBAStatus) {
		var ret FBAStatusType
		return ret
	}
	return *o.FBAStatus
}

// GetFBAStatusOk returns a tuple with the FBAStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetFBAStatusOk() (*FBAStatusType, bool) {
	if o == nil || IsNil(o.FBAStatus) {
		return nil, false
	}
	return o.FBAStatus, true
}

// HasFBAStatus returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasFBAStatus() bool {
	if o != nil && !IsNil(o.FBAStatus) {
		return true
	}

	return false
}

// SetFBAStatus gets a reference to the given FBAStatusType and assigns it to the FBAStatus field.
func (o *CertificateReconciliationType) SetFBAStatus(v FBAStatusType) {
	o.FBAStatus = &v
}

// GetFbaBillGenDate returns the FbaBillGenDate field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetFbaBillGenDate() string {
	if o == nil || IsNil(o.FbaBillGenDate) {
		var ret string
		return ret
	}
	return *o.FbaBillGenDate
}

// GetFbaBillGenDateOk returns a tuple with the FbaBillGenDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetFbaBillGenDateOk() (*string, bool) {
	if o == nil || IsNil(o.FbaBillGenDate) {
		return nil, false
	}
	return o.FbaBillGenDate, true
}

// HasFbaBillGenDate returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasFbaBillGenDate() bool {
	if o != nil && !IsNil(o.FbaBillGenDate) {
		return true
	}

	return false
}

// SetFbaBillGenDate gets a reference to the given string and assigns it to the FbaBillGenDate field.
func (o *CertificateReconciliationType) SetFbaBillGenDate(v string) {
	o.FbaBillGenDate = &v
}

// GetFlexibleBenefitAward returns the FlexibleBenefitAward field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetFlexibleBenefitAward() bool {
	if o == nil || IsNil(o.FlexibleBenefitAward) {
		var ret bool
		return ret
	}
	return *o.FlexibleBenefitAward
}

// GetFlexibleBenefitAwardOk returns a tuple with the FlexibleBenefitAward field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetFlexibleBenefitAwardOk() (*bool, bool) {
	if o == nil || IsNil(o.FlexibleBenefitAward) {
		return nil, false
	}
	return o.FlexibleBenefitAward, true
}

// HasFlexibleBenefitAward returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasFlexibleBenefitAward() bool {
	if o != nil && !IsNil(o.FlexibleBenefitAward) {
		return true
	}

	return false
}

// SetFlexibleBenefitAward gets a reference to the given bool and assigns it to the FlexibleBenefitAward field.
func (o *CertificateReconciliationType) SetFlexibleBenefitAward(v bool) {
	o.FlexibleBenefitAward = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CertificateReconciliationType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetMonetaryValue returns the MonetaryValue field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetMonetaryValue() float32 {
	if o == nil || IsNil(o.MonetaryValue) {
		var ret float32
		return ret
	}
	return *o.MonetaryValue
}

// GetMonetaryValueOk returns a tuple with the MonetaryValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetMonetaryValueOk() (*float32, bool) {
	if o == nil || IsNil(o.MonetaryValue) {
		return nil, false
	}
	return o.MonetaryValue, true
}

// HasMonetaryValue returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasMonetaryValue() bool {
	if o != nil && !IsNil(o.MonetaryValue) {
		return true
	}

	return false
}

// SetMonetaryValue gets a reference to the given float32 and assigns it to the MonetaryValue field.
func (o *CertificateReconciliationType) SetMonetaryValue(v float32) {
	o.MonetaryValue = &v
}

// GetOrphanCertificate returns the OrphanCertificate field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetOrphanCertificate() bool {
	if o == nil || IsNil(o.OrphanCertificate) {
		var ret bool
		return ret
	}
	return *o.OrphanCertificate
}

// GetOrphanCertificateOk returns a tuple with the OrphanCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetOrphanCertificateOk() (*bool, bool) {
	if o == nil || IsNil(o.OrphanCertificate) {
		return nil, false
	}
	return o.OrphanCertificate, true
}

// HasOrphanCertificate returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasOrphanCertificate() bool {
	if o != nil && !IsNil(o.OrphanCertificate) {
		return true
	}

	return false
}

// SetOrphanCertificate gets a reference to the given bool and assigns it to the OrphanCertificate field.
func (o *CertificateReconciliationType) SetOrphanCertificate(v bool) {
	o.OrphanCertificate = &v
}

// GetPosted returns the Posted field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetPosted() bool {
	if o == nil || IsNil(o.Posted) {
		var ret bool
		return ret
	}
	return *o.Posted
}

// GetPostedOk returns a tuple with the Posted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetPostedOk() (*bool, bool) {
	if o == nil || IsNil(o.Posted) {
		return nil, false
	}
	return o.Posted, true
}

// HasPosted returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasPosted() bool {
	if o != nil && !IsNil(o.Posted) {
		return true
	}

	return false
}

// SetPosted gets a reference to the given bool and assigns it to the Posted field.
func (o *CertificateReconciliationType) SetPosted(v bool) {
	o.Posted = &v
}

// GetPostedAmount returns the PostedAmount field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetPostedAmount() float32 {
	if o == nil || IsNil(o.PostedAmount) {
		var ret float32
		return ret
	}
	return *o.PostedAmount
}

// GetPostedAmountOk returns a tuple with the PostedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetPostedAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.PostedAmount) {
		return nil, false
	}
	return o.PostedAmount, true
}

// HasPostedAmount returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasPostedAmount() bool {
	if o != nil && !IsNil(o.PostedAmount) {
		return true
	}

	return false
}

// SetPostedAmount gets a reference to the given float32 and assigns it to the PostedAmount field.
func (o *CertificateReconciliationType) SetPostedAmount(v float32) {
	o.PostedAmount = &v
}

// GetPostingBusinessDate returns the PostingBusinessDate field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetPostingBusinessDate() string {
	if o == nil || IsNil(o.PostingBusinessDate) {
		var ret string
		return ret
	}
	return *o.PostingBusinessDate
}

// GetPostingBusinessDateOk returns a tuple with the PostingBusinessDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetPostingBusinessDateOk() (*string, bool) {
	if o == nil || IsNil(o.PostingBusinessDate) {
		return nil, false
	}
	return o.PostingBusinessDate, true
}

// HasPostingBusinessDate returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasPostingBusinessDate() bool {
	if o != nil && !IsNil(o.PostingBusinessDate) {
		return true
	}

	return false
}

// SetPostingBusinessDate gets a reference to the given string and assigns it to the PostingBusinessDate field.
func (o *CertificateReconciliationType) SetPostingBusinessDate(v string) {
	o.PostingBusinessDate = &v
}

// GetPostingDateTime returns the PostingDateTime field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetPostingDateTime() string {
	if o == nil || IsNil(o.PostingDateTime) {
		var ret string
		return ret
	}
	return *o.PostingDateTime
}

// GetPostingDateTimeOk returns a tuple with the PostingDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetPostingDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.PostingDateTime) {
		return nil, false
	}
	return o.PostingDateTime, true
}

// HasPostingDateTime returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasPostingDateTime() bool {
	if o != nil && !IsNil(o.PostingDateTime) {
		return true
	}

	return false
}

// SetPostingDateTime gets a reference to the given string and assigns it to the PostingDateTime field.
func (o *CertificateReconciliationType) SetPostingDateTime(v string) {
	o.PostingDateTime = &v
}

// GetReimburseAllowed returns the ReimburseAllowed field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetReimburseAllowed() bool {
	if o == nil || IsNil(o.ReimburseAllowed) {
		var ret bool
		return ret
	}
	return *o.ReimburseAllowed
}

// GetReimburseAllowedOk returns a tuple with the ReimburseAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetReimburseAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.ReimburseAllowed) {
		return nil, false
	}
	return o.ReimburseAllowed, true
}

// HasReimburseAllowed returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasReimburseAllowed() bool {
	if o != nil && !IsNil(o.ReimburseAllowed) {
		return true
	}

	return false
}

// SetReimburseAllowed gets a reference to the given bool and assigns it to the ReimburseAllowed field.
func (o *CertificateReconciliationType) SetReimburseAllowed(v bool) {
	o.ReimburseAllowed = &v
}

// GetReimbursed returns the Reimbursed field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetReimbursed() bool {
	if o == nil || IsNil(o.Reimbursed) {
		var ret bool
		return ret
	}
	return *o.Reimbursed
}

// GetReimbursedOk returns a tuple with the Reimbursed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetReimbursedOk() (*bool, bool) {
	if o == nil || IsNil(o.Reimbursed) {
		return nil, false
	}
	return o.Reimbursed, true
}

// HasReimbursed returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasReimbursed() bool {
	if o != nil && !IsNil(o.Reimbursed) {
		return true
	}

	return false
}

// SetReimbursed gets a reference to the given bool and assigns it to the Reimbursed field.
func (o *CertificateReconciliationType) SetReimbursed(v bool) {
	o.Reimbursed = &v
}

// GetReimbursedAmount returns the ReimbursedAmount field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetReimbursedAmount() float32 {
	if o == nil || IsNil(o.ReimbursedAmount) {
		var ret float32
		return ret
	}
	return *o.ReimbursedAmount
}

// GetReimbursedAmountOk returns a tuple with the ReimbursedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetReimbursedAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.ReimbursedAmount) {
		return nil, false
	}
	return o.ReimbursedAmount, true
}

// HasReimbursedAmount returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasReimbursedAmount() bool {
	if o != nil && !IsNil(o.ReimbursedAmount) {
		return true
	}

	return false
}

// SetReimbursedAmount gets a reference to the given float32 and assigns it to the ReimbursedAmount field.
func (o *CertificateReconciliationType) SetReimbursedAmount(v float32) {
	o.ReimbursedAmount = &v
}

// GetReimbursementBusinessDate returns the ReimbursementBusinessDate field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetReimbursementBusinessDate() string {
	if o == nil || IsNil(o.ReimbursementBusinessDate) {
		var ret string
		return ret
	}
	return *o.ReimbursementBusinessDate
}

// GetReimbursementBusinessDateOk returns a tuple with the ReimbursementBusinessDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetReimbursementBusinessDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReimbursementBusinessDate) {
		return nil, false
	}
	return o.ReimbursementBusinessDate, true
}

// HasReimbursementBusinessDate returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasReimbursementBusinessDate() bool {
	if o != nil && !IsNil(o.ReimbursementBusinessDate) {
		return true
	}

	return false
}

// SetReimbursementBusinessDate gets a reference to the given string and assigns it to the ReimbursementBusinessDate field.
func (o *CertificateReconciliationType) SetReimbursementBusinessDate(v string) {
	o.ReimbursementBusinessDate = &v
}

// GetReimbursementDateTime returns the ReimbursementDateTime field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetReimbursementDateTime() string {
	if o == nil || IsNil(o.ReimbursementDateTime) {
		var ret string
		return ret
	}
	return *o.ReimbursementDateTime
}

// GetReimbursementDateTimeOk returns a tuple with the ReimbursementDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetReimbursementDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ReimbursementDateTime) {
		return nil, false
	}
	return o.ReimbursementDateTime, true
}

// HasReimbursementDateTime returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasReimbursementDateTime() bool {
	if o != nil && !IsNil(o.ReimbursementDateTime) {
		return true
	}

	return false
}

// SetReimbursementDateTime gets a reference to the given string and assigns it to the ReimbursementDateTime field.
func (o *CertificateReconciliationType) SetReimbursementDateTime(v string) {
	o.ReimbursementDateTime = &v
}

// GetReservationId returns the ReservationId field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetReservationId() ReservationId {
	if o == nil || IsNil(o.ReservationId) {
		var ret ReservationId
		return ret
	}
	return *o.ReservationId
}

// GetReservationIdOk returns a tuple with the ReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetReservationIdOk() (*ReservationId, bool) {
	if o == nil || IsNil(o.ReservationId) {
		return nil, false
	}
	return o.ReservationId, true
}

// HasReservationId returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasReservationId() bool {
	if o != nil && !IsNil(o.ReservationId) {
		return true
	}

	return false
}

// SetReservationId gets a reference to the given ReservationId and assigns it to the ReservationId field.
func (o *CertificateReconciliationType) SetReservationId(v ReservationId) {
	o.ReservationId = &v
}

// GetResettleAllowed returns the ResettleAllowed field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetResettleAllowed() bool {
	if o == nil || IsNil(o.ResettleAllowed) {
		var ret bool
		return ret
	}
	return *o.ResettleAllowed
}

// GetResettleAllowedOk returns a tuple with the ResettleAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetResettleAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.ResettleAllowed) {
		return nil, false
	}
	return o.ResettleAllowed, true
}

// HasResettleAllowed returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasResettleAllowed() bool {
	if o != nil && !IsNil(o.ResettleAllowed) {
		return true
	}

	return false
}

// SetResettleAllowed gets a reference to the given bool and assigns it to the ResettleAllowed field.
func (o *CertificateReconciliationType) SetResettleAllowed(v bool) {
	o.ResettleAllowed = &v
}

// GetSettled returns the Settled field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetSettled() bool {
	if o == nil || IsNil(o.Settled) {
		var ret bool
		return ret
	}
	return *o.Settled
}

// GetSettledOk returns a tuple with the Settled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetSettledOk() (*bool, bool) {
	if o == nil || IsNil(o.Settled) {
		return nil, false
	}
	return o.Settled, true
}

// HasSettled returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasSettled() bool {
	if o != nil && !IsNil(o.Settled) {
		return true
	}

	return false
}

// SetSettled gets a reference to the given bool and assigns it to the Settled field.
func (o *CertificateReconciliationType) SetSettled(v bool) {
	o.Settled = &v
}

// GetSettlementBusinessDate returns the SettlementBusinessDate field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetSettlementBusinessDate() string {
	if o == nil || IsNil(o.SettlementBusinessDate) {
		var ret string
		return ret
	}
	return *o.SettlementBusinessDate
}

// GetSettlementBusinessDateOk returns a tuple with the SettlementBusinessDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetSettlementBusinessDateOk() (*string, bool) {
	if o == nil || IsNil(o.SettlementBusinessDate) {
		return nil, false
	}
	return o.SettlementBusinessDate, true
}

// HasSettlementBusinessDate returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasSettlementBusinessDate() bool {
	if o != nil && !IsNil(o.SettlementBusinessDate) {
		return true
	}

	return false
}

// SetSettlementBusinessDate gets a reference to the given string and assigns it to the SettlementBusinessDate field.
func (o *CertificateReconciliationType) SetSettlementBusinessDate(v string) {
	o.SettlementBusinessDate = &v
}

// GetSettlementDateTime returns the SettlementDateTime field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetSettlementDateTime() string {
	if o == nil || IsNil(o.SettlementDateTime) {
		var ret string
		return ret
	}
	return *o.SettlementDateTime
}

// GetSettlementDateTimeOk returns a tuple with the SettlementDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetSettlementDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.SettlementDateTime) {
		return nil, false
	}
	return o.SettlementDateTime, true
}

// HasSettlementDateTime returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasSettlementDateTime() bool {
	if o != nil && !IsNil(o.SettlementDateTime) {
		return true
	}

	return false
}

// SetSettlementDateTime gets a reference to the given string and assigns it to the SettlementDateTime field.
func (o *CertificateReconciliationType) SetSettlementDateTime(v string) {
	o.SettlementDateTime = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CertificateReconciliationType) GetStatus() FBAStatusType {
	if o == nil || IsNil(o.Status) {
		var ret FBAStatusType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateReconciliationType) GetStatusOk() (*FBAStatusType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CertificateReconciliationType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given FBAStatusType and assigns it to the Status field.
func (o *CertificateReconciliationType) SetStatus(v FBAStatusType) {
	o.Status = &v
}

func (o CertificateReconciliationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateReconciliationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.CertificateNumber) {
		toSerialize["certificateNumber"] = o.CertificateNumber
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.CurrencySymbol) {
		toSerialize["currencySymbol"] = o.CurrencySymbol
	}
	if !IsNil(o.DecimalPlaces) {
		toSerialize["decimalPlaces"] = o.DecimalPlaces
	}
	if !IsNil(o.FBAStatus) {
		toSerialize["fBAStatus"] = o.FBAStatus
	}
	if !IsNil(o.FbaBillGenDate) {
		toSerialize["fbaBillGenDate"] = o.FbaBillGenDate
	}
	if !IsNil(o.FlexibleBenefitAward) {
		toSerialize["flexibleBenefitAward"] = o.FlexibleBenefitAward
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.MonetaryValue) {
		toSerialize["monetaryValue"] = o.MonetaryValue
	}
	if !IsNil(o.OrphanCertificate) {
		toSerialize["orphanCertificate"] = o.OrphanCertificate
	}
	if !IsNil(o.Posted) {
		toSerialize["posted"] = o.Posted
	}
	if !IsNil(o.PostedAmount) {
		toSerialize["postedAmount"] = o.PostedAmount
	}
	if !IsNil(o.PostingBusinessDate) {
		toSerialize["postingBusinessDate"] = o.PostingBusinessDate
	}
	if !IsNil(o.PostingDateTime) {
		toSerialize["postingDateTime"] = o.PostingDateTime
	}
	if !IsNil(o.ReimburseAllowed) {
		toSerialize["reimburseAllowed"] = o.ReimburseAllowed
	}
	if !IsNil(o.Reimbursed) {
		toSerialize["reimbursed"] = o.Reimbursed
	}
	if !IsNil(o.ReimbursedAmount) {
		toSerialize["reimbursedAmount"] = o.ReimbursedAmount
	}
	if !IsNil(o.ReimbursementBusinessDate) {
		toSerialize["reimbursementBusinessDate"] = o.ReimbursementBusinessDate
	}
	if !IsNil(o.ReimbursementDateTime) {
		toSerialize["reimbursementDateTime"] = o.ReimbursementDateTime
	}
	if !IsNil(o.ReservationId) {
		toSerialize["reservationId"] = o.ReservationId
	}
	if !IsNil(o.ResettleAllowed) {
		toSerialize["resettleAllowed"] = o.ResettleAllowed
	}
	if !IsNil(o.Settled) {
		toSerialize["settled"] = o.Settled
	}
	if !IsNil(o.SettlementBusinessDate) {
		toSerialize["settlementBusinessDate"] = o.SettlementBusinessDate
	}
	if !IsNil(o.SettlementDateTime) {
		toSerialize["settlementDateTime"] = o.SettlementDateTime
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableCertificateReconciliationType struct {
	value *CertificateReconciliationType
	isSet bool
}

func (v NullableCertificateReconciliationType) Get() *CertificateReconciliationType {
	return v.value
}

func (v *NullableCertificateReconciliationType) Set(val *CertificateReconciliationType) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateReconciliationType) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateReconciliationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateReconciliationType(val *CertificateReconciliationType) *NullableCertificateReconciliationType {
	return &NullableCertificateReconciliationType{value: val, isSet: true}
}

func (v NullableCertificateReconciliationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateReconciliationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


