/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the CheckoutReservationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckoutReservationType{}

// CheckoutReservationType struct for CheckoutReservationType
type CheckoutReservationType struct {
	// This flag will be set to true if the reservation is checked out via mobility service. When the reservation is checked out through UI, this would be false.
	AutoCheckout *bool `json:"autoCheckout,omitempty"`
	// The Cashier ID of the Cashier who is currently processing the transaction(s).
	CashierId *float32 `json:"cashierId,omitempty"`
	CheckoutInstr *CheckoutInstructionsType `json:"checkoutInstr,omitempty"`
	// If the Property works with Open Folios and the reservation has the privileges for Post Stay Charging, this flag could be set to True which would checkout the guest without requiring the guest to settle his balances.
	CheckoutWithOpenFolio *bool `json:"checkoutWithOpenFolio,omitempty"`
	EventType *CashieringEventType `json:"eventType,omitempty"`
	// Property code.
	HotelId *string `json:"hotelId,omitempty"`
	// This flag will be set to true if the reservation is checked out via mobility service. When the reservation is checked out through UI, this would be false.
	MobileCheckout *bool `json:"mobileCheckout,omitempty"`
	// Email address
	MobileCheckoutFolioEmail *string `json:"mobileCheckoutFolioEmail,omitempty"`
	// Unique Id that references an object uniquely in the system.
	ReservationIdList []UniqueIDType `json:"reservationIdList,omitempty"`
	// Indicates Stop Checkout reservation Global Alert flag.
	StopCheckout *bool `json:"stopCheckout,omitempty"`
}

// NewCheckoutReservationType instantiates a new CheckoutReservationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckoutReservationType() *CheckoutReservationType {
	this := CheckoutReservationType{}
	return &this
}

// NewCheckoutReservationTypeWithDefaults instantiates a new CheckoutReservationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckoutReservationTypeWithDefaults() *CheckoutReservationType {
	this := CheckoutReservationType{}
	return &this
}

// GetAutoCheckout returns the AutoCheckout field value if set, zero value otherwise.
func (o *CheckoutReservationType) GetAutoCheckout() bool {
	if o == nil || IsNil(o.AutoCheckout) {
		var ret bool
		return ret
	}
	return *o.AutoCheckout
}

// GetAutoCheckoutOk returns a tuple with the AutoCheckout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutReservationType) GetAutoCheckoutOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoCheckout) {
		return nil, false
	}
	return o.AutoCheckout, true
}

// HasAutoCheckout returns a boolean if a field has been set.
func (o *CheckoutReservationType) HasAutoCheckout() bool {
	if o != nil && !IsNil(o.AutoCheckout) {
		return true
	}

	return false
}

// SetAutoCheckout gets a reference to the given bool and assigns it to the AutoCheckout field.
func (o *CheckoutReservationType) SetAutoCheckout(v bool) {
	o.AutoCheckout = &v
}

// GetCashierId returns the CashierId field value if set, zero value otherwise.
func (o *CheckoutReservationType) GetCashierId() float32 {
	if o == nil || IsNil(o.CashierId) {
		var ret float32
		return ret
	}
	return *o.CashierId
}

// GetCashierIdOk returns a tuple with the CashierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutReservationType) GetCashierIdOk() (*float32, bool) {
	if o == nil || IsNil(o.CashierId) {
		return nil, false
	}
	return o.CashierId, true
}

// HasCashierId returns a boolean if a field has been set.
func (o *CheckoutReservationType) HasCashierId() bool {
	if o != nil && !IsNil(o.CashierId) {
		return true
	}

	return false
}

// SetCashierId gets a reference to the given float32 and assigns it to the CashierId field.
func (o *CheckoutReservationType) SetCashierId(v float32) {
	o.CashierId = &v
}

// GetCheckoutInstr returns the CheckoutInstr field value if set, zero value otherwise.
func (o *CheckoutReservationType) GetCheckoutInstr() CheckoutInstructionsType {
	if o == nil || IsNil(o.CheckoutInstr) {
		var ret CheckoutInstructionsType
		return ret
	}
	return *o.CheckoutInstr
}

// GetCheckoutInstrOk returns a tuple with the CheckoutInstr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutReservationType) GetCheckoutInstrOk() (*CheckoutInstructionsType, bool) {
	if o == nil || IsNil(o.CheckoutInstr) {
		return nil, false
	}
	return o.CheckoutInstr, true
}

// HasCheckoutInstr returns a boolean if a field has been set.
func (o *CheckoutReservationType) HasCheckoutInstr() bool {
	if o != nil && !IsNil(o.CheckoutInstr) {
		return true
	}

	return false
}

// SetCheckoutInstr gets a reference to the given CheckoutInstructionsType and assigns it to the CheckoutInstr field.
func (o *CheckoutReservationType) SetCheckoutInstr(v CheckoutInstructionsType) {
	o.CheckoutInstr = &v
}

// GetCheckoutWithOpenFolio returns the CheckoutWithOpenFolio field value if set, zero value otherwise.
func (o *CheckoutReservationType) GetCheckoutWithOpenFolio() bool {
	if o == nil || IsNil(o.CheckoutWithOpenFolio) {
		var ret bool
		return ret
	}
	return *o.CheckoutWithOpenFolio
}

// GetCheckoutWithOpenFolioOk returns a tuple with the CheckoutWithOpenFolio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutReservationType) GetCheckoutWithOpenFolioOk() (*bool, bool) {
	if o == nil || IsNil(o.CheckoutWithOpenFolio) {
		return nil, false
	}
	return o.CheckoutWithOpenFolio, true
}

// HasCheckoutWithOpenFolio returns a boolean if a field has been set.
func (o *CheckoutReservationType) HasCheckoutWithOpenFolio() bool {
	if o != nil && !IsNil(o.CheckoutWithOpenFolio) {
		return true
	}

	return false
}

// SetCheckoutWithOpenFolio gets a reference to the given bool and assigns it to the CheckoutWithOpenFolio field.
func (o *CheckoutReservationType) SetCheckoutWithOpenFolio(v bool) {
	o.CheckoutWithOpenFolio = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *CheckoutReservationType) GetEventType() CashieringEventType {
	if o == nil || IsNil(o.EventType) {
		var ret CashieringEventType
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutReservationType) GetEventTypeOk() (*CashieringEventType, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *CheckoutReservationType) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given CashieringEventType and assigns it to the EventType field.
func (o *CheckoutReservationType) SetEventType(v CashieringEventType) {
	o.EventType = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CheckoutReservationType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutReservationType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CheckoutReservationType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CheckoutReservationType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetMobileCheckout returns the MobileCheckout field value if set, zero value otherwise.
func (o *CheckoutReservationType) GetMobileCheckout() bool {
	if o == nil || IsNil(o.MobileCheckout) {
		var ret bool
		return ret
	}
	return *o.MobileCheckout
}

// GetMobileCheckoutOk returns a tuple with the MobileCheckout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutReservationType) GetMobileCheckoutOk() (*bool, bool) {
	if o == nil || IsNil(o.MobileCheckout) {
		return nil, false
	}
	return o.MobileCheckout, true
}

// HasMobileCheckout returns a boolean if a field has been set.
func (o *CheckoutReservationType) HasMobileCheckout() bool {
	if o != nil && !IsNil(o.MobileCheckout) {
		return true
	}

	return false
}

// SetMobileCheckout gets a reference to the given bool and assigns it to the MobileCheckout field.
func (o *CheckoutReservationType) SetMobileCheckout(v bool) {
	o.MobileCheckout = &v
}

// GetMobileCheckoutFolioEmail returns the MobileCheckoutFolioEmail field value if set, zero value otherwise.
func (o *CheckoutReservationType) GetMobileCheckoutFolioEmail() string {
	if o == nil || IsNil(o.MobileCheckoutFolioEmail) {
		var ret string
		return ret
	}
	return *o.MobileCheckoutFolioEmail
}

// GetMobileCheckoutFolioEmailOk returns a tuple with the MobileCheckoutFolioEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutReservationType) GetMobileCheckoutFolioEmailOk() (*string, bool) {
	if o == nil || IsNil(o.MobileCheckoutFolioEmail) {
		return nil, false
	}
	return o.MobileCheckoutFolioEmail, true
}

// HasMobileCheckoutFolioEmail returns a boolean if a field has been set.
func (o *CheckoutReservationType) HasMobileCheckoutFolioEmail() bool {
	if o != nil && !IsNil(o.MobileCheckoutFolioEmail) {
		return true
	}

	return false
}

// SetMobileCheckoutFolioEmail gets a reference to the given string and assigns it to the MobileCheckoutFolioEmail field.
func (o *CheckoutReservationType) SetMobileCheckoutFolioEmail(v string) {
	o.MobileCheckoutFolioEmail = &v
}

// GetReservationIdList returns the ReservationIdList field value if set, zero value otherwise.
func (o *CheckoutReservationType) GetReservationIdList() []UniqueIDType {
	if o == nil || IsNil(o.ReservationIdList) {
		var ret []UniqueIDType
		return ret
	}
	return o.ReservationIdList
}

// GetReservationIdListOk returns a tuple with the ReservationIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutReservationType) GetReservationIdListOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.ReservationIdList) {
		return nil, false
	}
	return o.ReservationIdList, true
}

// HasReservationIdList returns a boolean if a field has been set.
func (o *CheckoutReservationType) HasReservationIdList() bool {
	if o != nil && !IsNil(o.ReservationIdList) {
		return true
	}

	return false
}

// SetReservationIdList gets a reference to the given []UniqueIDType and assigns it to the ReservationIdList field.
func (o *CheckoutReservationType) SetReservationIdList(v []UniqueIDType) {
	o.ReservationIdList = v
}

// GetStopCheckout returns the StopCheckout field value if set, zero value otherwise.
func (o *CheckoutReservationType) GetStopCheckout() bool {
	if o == nil || IsNil(o.StopCheckout) {
		var ret bool
		return ret
	}
	return *o.StopCheckout
}

// GetStopCheckoutOk returns a tuple with the StopCheckout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutReservationType) GetStopCheckoutOk() (*bool, bool) {
	if o == nil || IsNil(o.StopCheckout) {
		return nil, false
	}
	return o.StopCheckout, true
}

// HasStopCheckout returns a boolean if a field has been set.
func (o *CheckoutReservationType) HasStopCheckout() bool {
	if o != nil && !IsNil(o.StopCheckout) {
		return true
	}

	return false
}

// SetStopCheckout gets a reference to the given bool and assigns it to the StopCheckout field.
func (o *CheckoutReservationType) SetStopCheckout(v bool) {
	o.StopCheckout = &v
}

func (o CheckoutReservationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckoutReservationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutoCheckout) {
		toSerialize["autoCheckout"] = o.AutoCheckout
	}
	if !IsNil(o.CashierId) {
		toSerialize["cashierId"] = o.CashierId
	}
	if !IsNil(o.CheckoutInstr) {
		toSerialize["checkoutInstr"] = o.CheckoutInstr
	}
	if !IsNil(o.CheckoutWithOpenFolio) {
		toSerialize["checkoutWithOpenFolio"] = o.CheckoutWithOpenFolio
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.MobileCheckout) {
		toSerialize["mobileCheckout"] = o.MobileCheckout
	}
	if !IsNil(o.MobileCheckoutFolioEmail) {
		toSerialize["mobileCheckoutFolioEmail"] = o.MobileCheckoutFolioEmail
	}
	if !IsNil(o.ReservationIdList) {
		toSerialize["reservationIdList"] = o.ReservationIdList
	}
	if !IsNil(o.StopCheckout) {
		toSerialize["stopCheckout"] = o.StopCheckout
	}
	return toSerialize, nil
}

type NullableCheckoutReservationType struct {
	value *CheckoutReservationType
	isSet bool
}

func (v NullableCheckoutReservationType) Get() *CheckoutReservationType {
	return v.value
}

func (v *NullableCheckoutReservationType) Set(val *CheckoutReservationType) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckoutReservationType) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckoutReservationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckoutReservationType(val *CheckoutReservationType) *NullableCheckoutReservationType {
	return &NullableCheckoutReservationType{value: val, isSet: true}
}

func (v NullableCheckoutReservationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckoutReservationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


