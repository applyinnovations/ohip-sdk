/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the ValidatedTransactionCode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidatedTransactionCode{}

// ValidatedTransactionCode Response notifying if transaction code is valid.
type ValidatedTransactionCode struct {
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	HotelId *string `json:"hotelId,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	TrxCode *string `json:"trxCode,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewValidatedTransactionCode instantiates a new ValidatedTransactionCode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidatedTransactionCode() *ValidatedTransactionCode {
	this := ValidatedTransactionCode{}
	return &this
}

// NewValidatedTransactionCodeWithDefaults instantiates a new ValidatedTransactionCode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidatedTransactionCodeWithDefaults() *ValidatedTransactionCode {
	this := ValidatedTransactionCode{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ValidatedTransactionCode) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidatedTransactionCode) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ValidatedTransactionCode) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ValidatedTransactionCode) SetHotelId(v string) {
	o.HotelId = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ValidatedTransactionCode) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidatedTransactionCode) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ValidatedTransactionCode) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *ValidatedTransactionCode) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetTrxCode returns the TrxCode field value if set, zero value otherwise.
func (o *ValidatedTransactionCode) GetTrxCode() string {
	if o == nil || IsNil(o.TrxCode) {
		var ret string
		return ret
	}
	return *o.TrxCode
}

// GetTrxCodeOk returns a tuple with the TrxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidatedTransactionCode) GetTrxCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TrxCode) {
		return nil, false
	}
	return o.TrxCode, true
}

// HasTrxCode returns a boolean if a field has been set.
func (o *ValidatedTransactionCode) HasTrxCode() bool {
	if o != nil && !IsNil(o.TrxCode) {
		return true
	}

	return false
}

// SetTrxCode gets a reference to the given string and assigns it to the TrxCode field.
func (o *ValidatedTransactionCode) SetTrxCode(v string) {
	o.TrxCode = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ValidatedTransactionCode) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidatedTransactionCode) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ValidatedTransactionCode) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ValidatedTransactionCode) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ValidatedTransactionCode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidatedTransactionCode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.TrxCode) {
		toSerialize["trxCode"] = o.TrxCode
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableValidatedTransactionCode struct {
	value *ValidatedTransactionCode
	isSet bool
}

func (v NullableValidatedTransactionCode) Get() *ValidatedTransactionCode {
	return v.value
}

func (v *NullableValidatedTransactionCode) Set(val *ValidatedTransactionCode) {
	v.value = val
	v.isSet = true
}

func (v NullableValidatedTransactionCode) IsSet() bool {
	return v.isSet
}

func (v *NullableValidatedTransactionCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidatedTransactionCode(val *ValidatedTransactionCode) *NullableValidatedTransactionCode {
	return &NullableValidatedTransactionCode{value: val, isSet: true}
}

func (v NullableValidatedTransactionCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidatedTransactionCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


