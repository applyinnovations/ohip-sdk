/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the BillingChargesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillingChargesType{}

// BillingChargesType Criteria for the charge information list to be edited.
type BillingChargesType struct {
	// Request to edit a billing charge information
	BillingCharges []BillingChargeType `json:"billingCharges,omitempty"`
	HotelId *string `json:"hotelId,omitempty"`
}

// NewBillingChargesType instantiates a new BillingChargesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingChargesType() *BillingChargesType {
	this := BillingChargesType{}
	return &this
}

// NewBillingChargesTypeWithDefaults instantiates a new BillingChargesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingChargesTypeWithDefaults() *BillingChargesType {
	this := BillingChargesType{}
	return &this
}

// GetBillingCharges returns the BillingCharges field value if set, zero value otherwise.
func (o *BillingChargesType) GetBillingCharges() []BillingChargeType {
	if o == nil || IsNil(o.BillingCharges) {
		var ret []BillingChargeType
		return ret
	}
	return o.BillingCharges
}

// GetBillingChargesOk returns a tuple with the BillingCharges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingChargesType) GetBillingChargesOk() ([]BillingChargeType, bool) {
	if o == nil || IsNil(o.BillingCharges) {
		return nil, false
	}
	return o.BillingCharges, true
}

// HasBillingCharges returns a boolean if a field has been set.
func (o *BillingChargesType) HasBillingCharges() bool {
	if o != nil && !IsNil(o.BillingCharges) {
		return true
	}

	return false
}

// SetBillingCharges gets a reference to the given []BillingChargeType and assigns it to the BillingCharges field.
func (o *BillingChargesType) SetBillingCharges(v []BillingChargeType) {
	o.BillingCharges = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *BillingChargesType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingChargesType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *BillingChargesType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *BillingChargesType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o BillingChargesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillingChargesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BillingCharges) {
		toSerialize["billingCharges"] = o.BillingCharges
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableBillingChargesType struct {
	value *BillingChargesType
	isSet bool
}

func (v NullableBillingChargesType) Get() *BillingChargesType {
	return v.value
}

func (v *NullableBillingChargesType) Set(val *BillingChargesType) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingChargesType) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingChargesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingChargesType(val *BillingChargesType) *NullableBillingChargesType {
	return &NullableBillingChargesType{value: val, isSet: true}
}

func (v NullableBillingChargesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingChargesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


