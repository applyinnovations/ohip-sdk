/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the ReservationVoucherType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReservationVoucherType{}

// ReservationVoucherType Reservation voucher detail.
type ReservationVoucherType struct {
	Amount *CurrencyAmountType `json:"amount,omitempty"`
	// Reflect the current status of the voucher.
	Status *string `json:"status,omitempty"`
	// Voucher no of the voucher
	VoucherNo *float32 `json:"voucherNo,omitempty"`
	// Date of the voucher
	VoucherDate *string `json:"voucherDate,omitempty"`
	ReservationId *ReservationId `json:"reservationId,omitempty"`
}

// NewReservationVoucherType instantiates a new ReservationVoucherType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservationVoucherType() *ReservationVoucherType {
	this := ReservationVoucherType{}
	return &this
}

// NewReservationVoucherTypeWithDefaults instantiates a new ReservationVoucherType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservationVoucherTypeWithDefaults() *ReservationVoucherType {
	this := ReservationVoucherType{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *ReservationVoucherType) GetAmount() CurrencyAmountType {
	if o == nil || IsNil(o.Amount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationVoucherType) GetAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *ReservationVoucherType) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given CurrencyAmountType and assigns it to the Amount field.
func (o *ReservationVoucherType) SetAmount(v CurrencyAmountType) {
	o.Amount = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ReservationVoucherType) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationVoucherType) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ReservationVoucherType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ReservationVoucherType) SetStatus(v string) {
	o.Status = &v
}

// GetVoucherNo returns the VoucherNo field value if set, zero value otherwise.
func (o *ReservationVoucherType) GetVoucherNo() float32 {
	if o == nil || IsNil(o.VoucherNo) {
		var ret float32
		return ret
	}
	return *o.VoucherNo
}

// GetVoucherNoOk returns a tuple with the VoucherNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationVoucherType) GetVoucherNoOk() (*float32, bool) {
	if o == nil || IsNil(o.VoucherNo) {
		return nil, false
	}
	return o.VoucherNo, true
}

// HasVoucherNo returns a boolean if a field has been set.
func (o *ReservationVoucherType) HasVoucherNo() bool {
	if o != nil && !IsNil(o.VoucherNo) {
		return true
	}

	return false
}

// SetVoucherNo gets a reference to the given float32 and assigns it to the VoucherNo field.
func (o *ReservationVoucherType) SetVoucherNo(v float32) {
	o.VoucherNo = &v
}

// GetVoucherDate returns the VoucherDate field value if set, zero value otherwise.
func (o *ReservationVoucherType) GetVoucherDate() string {
	if o == nil || IsNil(o.VoucherDate) {
		var ret string
		return ret
	}
	return *o.VoucherDate
}

// GetVoucherDateOk returns a tuple with the VoucherDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationVoucherType) GetVoucherDateOk() (*string, bool) {
	if o == nil || IsNil(o.VoucherDate) {
		return nil, false
	}
	return o.VoucherDate, true
}

// HasVoucherDate returns a boolean if a field has been set.
func (o *ReservationVoucherType) HasVoucherDate() bool {
	if o != nil && !IsNil(o.VoucherDate) {
		return true
	}

	return false
}

// SetVoucherDate gets a reference to the given string and assigns it to the VoucherDate field.
func (o *ReservationVoucherType) SetVoucherDate(v string) {
	o.VoucherDate = &v
}

// GetReservationId returns the ReservationId field value if set, zero value otherwise.
func (o *ReservationVoucherType) GetReservationId() ReservationId {
	if o == nil || IsNil(o.ReservationId) {
		var ret ReservationId
		return ret
	}
	return *o.ReservationId
}

// GetReservationIdOk returns a tuple with the ReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationVoucherType) GetReservationIdOk() (*ReservationId, bool) {
	if o == nil || IsNil(o.ReservationId) {
		return nil, false
	}
	return o.ReservationId, true
}

// HasReservationId returns a boolean if a field has been set.
func (o *ReservationVoucherType) HasReservationId() bool {
	if o != nil && !IsNil(o.ReservationId) {
		return true
	}

	return false
}

// SetReservationId gets a reference to the given ReservationId and assigns it to the ReservationId field.
func (o *ReservationVoucherType) SetReservationId(v ReservationId) {
	o.ReservationId = &v
}

func (o ReservationVoucherType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReservationVoucherType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.VoucherNo) {
		toSerialize["voucherNo"] = o.VoucherNo
	}
	if !IsNil(o.VoucherDate) {
		toSerialize["voucherDate"] = o.VoucherDate
	}
	if !IsNil(o.ReservationId) {
		toSerialize["reservationId"] = o.ReservationId
	}
	return toSerialize, nil
}

type NullableReservationVoucherType struct {
	value *ReservationVoucherType
	isSet bool
}

func (v NullableReservationVoucherType) Get() *ReservationVoucherType {
	return v.value
}

func (v *NullableReservationVoucherType) Set(val *ReservationVoucherType) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationVoucherType) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationVoucherType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationVoucherType(val *ReservationVoucherType) *NullableReservationVoucherType {
	return &NullableReservationVoucherType{value: val, isSet: true}
}

func (v NullableReservationVoucherType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationVoucherType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


