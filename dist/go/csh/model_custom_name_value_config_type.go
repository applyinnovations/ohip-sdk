/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
	"fmt"
)

// CustomNameValueConfigType Italian Lottery Number.
type CustomNameValueConfigType string

// List of customNameValueConfigType
const (
	CUSTOMNAMEVALUECONFIGTYPE_ITALIAN_FATTURA CustomNameValueConfigType = "ItalianFattura"
	CUSTOMNAMEVALUECONFIGTYPE_FOLIO CustomNameValueConfigType = "Folio"
	CUSTOMNAMEVALUECONFIGTYPE_FINANCIAL_TRANSACTION CustomNameValueConfigType = "FinancialTransaction"
	CUSTOMNAMEVALUECONFIGTYPE_TAIWAN_INVOICE CustomNameValueConfigType = "TaiwanInvoice"
	CUSTOMNAMEVALUECONFIGTYPE_SAUDI_CUSTOMER_TYPE CustomNameValueConfigType = "SaudiCustomerType"
	CUSTOMNAMEVALUECONFIGTYPE_ITALIAN_LOTTERY_NUMBER CustomNameValueConfigType = "ItalianLotteryNumber"
)

// All allowed values of CustomNameValueConfigType enum
var AllowedCustomNameValueConfigTypeEnumValues = []CustomNameValueConfigType{
	"ItalianFattura",
	"Folio",
	"FinancialTransaction",
	"TaiwanInvoice",
	"SaudiCustomerType",
	"ItalianLotteryNumber",
}

func (v *CustomNameValueConfigType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CustomNameValueConfigType(value)
	for _, existing := range AllowedCustomNameValueConfigTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CustomNameValueConfigType", value)
}

// NewCustomNameValueConfigTypeFromValue returns a pointer to a valid CustomNameValueConfigType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCustomNameValueConfigTypeFromValue(v string) (*CustomNameValueConfigType, error) {
	ev := CustomNameValueConfigType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CustomNameValueConfigType: valid values are %v", v, AllowedCustomNameValueConfigTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CustomNameValueConfigType) IsValid() bool {
	for _, existing := range AllowedCustomNameValueConfigTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to customNameValueConfigType value
func (v CustomNameValueConfigType) Ptr() *CustomNameValueConfigType {
	return &v
}

type NullableCustomNameValueConfigType struct {
	value *CustomNameValueConfigType
	isSet bool
}

func (v NullableCustomNameValueConfigType) Get() *CustomNameValueConfigType {
	return v.value
}

func (v *NullableCustomNameValueConfigType) Set(val *CustomNameValueConfigType) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomNameValueConfigType) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomNameValueConfigType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomNameValueConfigType(val *CustomNameValueConfigType) *NullableCustomNameValueConfigType {
	return &NullableCustomNameValueConfigType{value: val, isSet: true}
}

func (v NullableCustomNameValueConfigType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomNameValueConfigType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

