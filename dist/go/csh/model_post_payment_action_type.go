/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
	"fmt"
)

// PostPaymentActionType Advance Payment Action.
type PostPaymentActionType string

// List of postPaymentActionType
const (
	POSTPAYMENTACTIONTYPE_BILLING PostPaymentActionType = "Billing"
	POSTPAYMENTACTIONTYPE_SETTLEFOLIO PostPaymentActionType = "Settlefolio"
	POSTPAYMENTACTIONTYPE_DEPOSIT PostPaymentActionType = "Deposit"
	POSTPAYMENTACTIONTYPE_COMPREDEMPTION PostPaymentActionType = "Compredemption"
	POSTPAYMENTACTIONTYPE_PREPAIDCARDREDEMPTION PostPaymentActionType = "Prepaidcardredemption"
	POSTPAYMENTACTIONTYPE_ADVANCEPAYMENT PostPaymentActionType = "Advancepayment"
)

// All allowed values of PostPaymentActionType enum
var AllowedPostPaymentActionTypeEnumValues = []PostPaymentActionType{
	"Billing",
	"Settlefolio",
	"Deposit",
	"Compredemption",
	"Prepaidcardredemption",
	"Advancepayment",
}

func (v *PostPaymentActionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PostPaymentActionType(value)
	for _, existing := range AllowedPostPaymentActionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PostPaymentActionType", value)
}

// NewPostPaymentActionTypeFromValue returns a pointer to a valid PostPaymentActionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPostPaymentActionTypeFromValue(v string) (*PostPaymentActionType, error) {
	ev := PostPaymentActionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PostPaymentActionType: valid values are %v", v, AllowedPostPaymentActionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PostPaymentActionType) IsValid() bool {
	for _, existing := range AllowedPostPaymentActionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to postPaymentActionType value
func (v PostPaymentActionType) Ptr() *PostPaymentActionType {
	return &v
}

type NullablePostPaymentActionType struct {
	value *PostPaymentActionType
	isSet bool
}

func (v NullablePostPaymentActionType) Get() *PostPaymentActionType {
	return v.value
}

func (v *NullablePostPaymentActionType) Set(val *PostPaymentActionType) {
	v.value = val
	v.isSet = true
}

func (v NullablePostPaymentActionType) IsSet() bool {
	return v.isSet
}

func (v *NullablePostPaymentActionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostPaymentActionType(val *PostPaymentActionType) *NullablePostPaymentActionType {
	return &NullablePostPaymentActionType{value: val, isSet: true}
}

func (v NullablePostPaymentActionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostPaymentActionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

