/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
	"fmt"
)

// CashierReportType Shift drop report created when cashier closure is completed. It is an integral part of closure report and is not to be printed or accessed by itself.
type CashierReportType string

// List of cashierReportType
const (
	CASHIERREPORTTYPE_CASH CashierReportType = "Cash"
	CASHIERREPORTTYPE_CHECK CashierReportType = "Check"
	CASHIERREPORTTYPE_FOREIGN_CURRENCY CashierReportType = "ForeignCurrency"
	CASHIERREPORTTYPE_CREDIT_CARD CashierReportType = "CreditCard"
	CASHIERREPORTTYPE_MISCELLANEOUS CashierReportType = "Miscellaneous"
	CASHIERREPORTTYPE_AR_SETTLEMENTS CashierReportType = "ArSettlements"
	CASHIERREPORTTYPE_DEPOSIT_TRANSFERS CashierReportType = "DepositTransfers"
	CASHIERREPORTTYPE_SHIFTDROP CashierReportType = "Shiftdrop"
)

// All allowed values of CashierReportType enum
var AllowedCashierReportTypeEnumValues = []CashierReportType{
	"Cash",
	"Check",
	"ForeignCurrency",
	"CreditCard",
	"Miscellaneous",
	"ArSettlements",
	"DepositTransfers",
	"Shiftdrop",
}

func (v *CashierReportType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CashierReportType(value)
	for _, existing := range AllowedCashierReportTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CashierReportType", value)
}

// NewCashierReportTypeFromValue returns a pointer to a valid CashierReportType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCashierReportTypeFromValue(v string) (*CashierReportType, error) {
	ev := CashierReportType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CashierReportType: valid values are %v", v, AllowedCashierReportTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CashierReportType) IsValid() bool {
	for _, existing := range AllowedCashierReportTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cashierReportType value
func (v CashierReportType) Ptr() *CashierReportType {
	return &v
}

type NullableCashierReportType struct {
	value *CashierReportType
	isSet bool
}

func (v NullableCashierReportType) Get() *CashierReportType {
	return v.value
}

func (v *NullableCashierReportType) Set(val *CashierReportType) {
	v.value = val
	v.isSet = true
}

func (v NullableCashierReportType) IsSet() bool {
	return v.isSet
}

func (v *NullableCashierReportType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashierReportType(val *CashierReportType) *NullableCashierReportType {
	return &NullableCashierReportType{value: val, isSet: true}
}

func (v NullableCashierReportType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashierReportType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

