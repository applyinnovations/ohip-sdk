/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the NameValueHeaderDetailType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NameValueHeaderDetailType{}

// NameValueHeaderDetailType Name value details collected before Folio Settlement
type NameValueHeaderDetailType struct {
	NameValueHeader *NameValueBaseSearchType `json:"nameValueHeader,omitempty"`
	NameValueDetails *NameValueDetailType `json:"nameValueDetails,omitempty"`
}

// NewNameValueHeaderDetailType instantiates a new NameValueHeaderDetailType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNameValueHeaderDetailType() *NameValueHeaderDetailType {
	this := NameValueHeaderDetailType{}
	return &this
}

// NewNameValueHeaderDetailTypeWithDefaults instantiates a new NameValueHeaderDetailType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNameValueHeaderDetailTypeWithDefaults() *NameValueHeaderDetailType {
	this := NameValueHeaderDetailType{}
	return &this
}

// GetNameValueHeader returns the NameValueHeader field value if set, zero value otherwise.
func (o *NameValueHeaderDetailType) GetNameValueHeader() NameValueBaseSearchType {
	if o == nil || IsNil(o.NameValueHeader) {
		var ret NameValueBaseSearchType
		return ret
	}
	return *o.NameValueHeader
}

// GetNameValueHeaderOk returns a tuple with the NameValueHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameValueHeaderDetailType) GetNameValueHeaderOk() (*NameValueBaseSearchType, bool) {
	if o == nil || IsNil(o.NameValueHeader) {
		return nil, false
	}
	return o.NameValueHeader, true
}

// HasNameValueHeader returns a boolean if a field has been set.
func (o *NameValueHeaderDetailType) HasNameValueHeader() bool {
	if o != nil && !IsNil(o.NameValueHeader) {
		return true
	}

	return false
}

// SetNameValueHeader gets a reference to the given NameValueBaseSearchType and assigns it to the NameValueHeader field.
func (o *NameValueHeaderDetailType) SetNameValueHeader(v NameValueBaseSearchType) {
	o.NameValueHeader = &v
}

// GetNameValueDetails returns the NameValueDetails field value if set, zero value otherwise.
func (o *NameValueHeaderDetailType) GetNameValueDetails() NameValueDetailType {
	if o == nil || IsNil(o.NameValueDetails) {
		var ret NameValueDetailType
		return ret
	}
	return *o.NameValueDetails
}

// GetNameValueDetailsOk returns a tuple with the NameValueDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameValueHeaderDetailType) GetNameValueDetailsOk() (*NameValueDetailType, bool) {
	if o == nil || IsNil(o.NameValueDetails) {
		return nil, false
	}
	return o.NameValueDetails, true
}

// HasNameValueDetails returns a boolean if a field has been set.
func (o *NameValueHeaderDetailType) HasNameValueDetails() bool {
	if o != nil && !IsNil(o.NameValueDetails) {
		return true
	}

	return false
}

// SetNameValueDetails gets a reference to the given NameValueDetailType and assigns it to the NameValueDetails field.
func (o *NameValueHeaderDetailType) SetNameValueDetails(v NameValueDetailType) {
	o.NameValueDetails = &v
}

func (o NameValueHeaderDetailType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NameValueHeaderDetailType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NameValueHeader) {
		toSerialize["nameValueHeader"] = o.NameValueHeader
	}
	if !IsNil(o.NameValueDetails) {
		toSerialize["nameValueDetails"] = o.NameValueDetails
	}
	return toSerialize, nil
}

type NullableNameValueHeaderDetailType struct {
	value *NameValueHeaderDetailType
	isSet bool
}

func (v NullableNameValueHeaderDetailType) Get() *NameValueHeaderDetailType {
	return v.value
}

func (v *NullableNameValueHeaderDetailType) Set(val *NameValueHeaderDetailType) {
	v.value = val
	v.isSet = true
}

func (v NullableNameValueHeaderDetailType) IsSet() bool {
	return v.isSet
}

func (v *NullableNameValueHeaderDetailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNameValueHeaderDetailType(val *NameValueHeaderDetailType) *NullableNameValueHeaderDetailType {
	return &NullableNameValueHeaderDetailType{value: val, isSet: true}
}

func (v NullableNameValueHeaderDetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNameValueHeaderDetailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


