/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the CashierClosureCurrencyAmountType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CashierClosureCurrencyAmountType{}

// CashierClosureCurrencyAmountType Cashier Shift Currency Amount type - cash ,check ,credit and others elements.
type CashierClosureCurrencyAmountType struct {
	Cash *CashierClosureAmountType `json:"cash,omitempty"`
	Check *CashierClosureAmountType `json:"check,omitempty"`
	CreditCard *CashierClosureAmountType `json:"creditCard,omitempty"`
	Others *CashierClosureAmountType `json:"others,omitempty"`
	// The Currency Code.
	CurrencyCode *string `json:"currencyCode,omitempty"`
}

// NewCashierClosureCurrencyAmountType instantiates a new CashierClosureCurrencyAmountType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCashierClosureCurrencyAmountType() *CashierClosureCurrencyAmountType {
	this := CashierClosureCurrencyAmountType{}
	return &this
}

// NewCashierClosureCurrencyAmountTypeWithDefaults instantiates a new CashierClosureCurrencyAmountType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCashierClosureCurrencyAmountTypeWithDefaults() *CashierClosureCurrencyAmountType {
	this := CashierClosureCurrencyAmountType{}
	return &this
}

// GetCash returns the Cash field value if set, zero value otherwise.
func (o *CashierClosureCurrencyAmountType) GetCash() CashierClosureAmountType {
	if o == nil || IsNil(o.Cash) {
		var ret CashierClosureAmountType
		return ret
	}
	return *o.Cash
}

// GetCashOk returns a tuple with the Cash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierClosureCurrencyAmountType) GetCashOk() (*CashierClosureAmountType, bool) {
	if o == nil || IsNil(o.Cash) {
		return nil, false
	}
	return o.Cash, true
}

// HasCash returns a boolean if a field has been set.
func (o *CashierClosureCurrencyAmountType) HasCash() bool {
	if o != nil && !IsNil(o.Cash) {
		return true
	}

	return false
}

// SetCash gets a reference to the given CashierClosureAmountType and assigns it to the Cash field.
func (o *CashierClosureCurrencyAmountType) SetCash(v CashierClosureAmountType) {
	o.Cash = &v
}

// GetCheck returns the Check field value if set, zero value otherwise.
func (o *CashierClosureCurrencyAmountType) GetCheck() CashierClosureAmountType {
	if o == nil || IsNil(o.Check) {
		var ret CashierClosureAmountType
		return ret
	}
	return *o.Check
}

// GetCheckOk returns a tuple with the Check field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierClosureCurrencyAmountType) GetCheckOk() (*CashierClosureAmountType, bool) {
	if o == nil || IsNil(o.Check) {
		return nil, false
	}
	return o.Check, true
}

// HasCheck returns a boolean if a field has been set.
func (o *CashierClosureCurrencyAmountType) HasCheck() bool {
	if o != nil && !IsNil(o.Check) {
		return true
	}

	return false
}

// SetCheck gets a reference to the given CashierClosureAmountType and assigns it to the Check field.
func (o *CashierClosureCurrencyAmountType) SetCheck(v CashierClosureAmountType) {
	o.Check = &v
}

// GetCreditCard returns the CreditCard field value if set, zero value otherwise.
func (o *CashierClosureCurrencyAmountType) GetCreditCard() CashierClosureAmountType {
	if o == nil || IsNil(o.CreditCard) {
		var ret CashierClosureAmountType
		return ret
	}
	return *o.CreditCard
}

// GetCreditCardOk returns a tuple with the CreditCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierClosureCurrencyAmountType) GetCreditCardOk() (*CashierClosureAmountType, bool) {
	if o == nil || IsNil(o.CreditCard) {
		return nil, false
	}
	return o.CreditCard, true
}

// HasCreditCard returns a boolean if a field has been set.
func (o *CashierClosureCurrencyAmountType) HasCreditCard() bool {
	if o != nil && !IsNil(o.CreditCard) {
		return true
	}

	return false
}

// SetCreditCard gets a reference to the given CashierClosureAmountType and assigns it to the CreditCard field.
func (o *CashierClosureCurrencyAmountType) SetCreditCard(v CashierClosureAmountType) {
	o.CreditCard = &v
}

// GetOthers returns the Others field value if set, zero value otherwise.
func (o *CashierClosureCurrencyAmountType) GetOthers() CashierClosureAmountType {
	if o == nil || IsNil(o.Others) {
		var ret CashierClosureAmountType
		return ret
	}
	return *o.Others
}

// GetOthersOk returns a tuple with the Others field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierClosureCurrencyAmountType) GetOthersOk() (*CashierClosureAmountType, bool) {
	if o == nil || IsNil(o.Others) {
		return nil, false
	}
	return o.Others, true
}

// HasOthers returns a boolean if a field has been set.
func (o *CashierClosureCurrencyAmountType) HasOthers() bool {
	if o != nil && !IsNil(o.Others) {
		return true
	}

	return false
}

// SetOthers gets a reference to the given CashierClosureAmountType and assigns it to the Others field.
func (o *CashierClosureCurrencyAmountType) SetOthers(v CashierClosureAmountType) {
	o.Others = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *CashierClosureCurrencyAmountType) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierClosureCurrencyAmountType) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *CashierClosureCurrencyAmountType) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *CashierClosureCurrencyAmountType) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

func (o CashierClosureCurrencyAmountType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CashierClosureCurrencyAmountType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cash) {
		toSerialize["cash"] = o.Cash
	}
	if !IsNil(o.Check) {
		toSerialize["check"] = o.Check
	}
	if !IsNil(o.CreditCard) {
		toSerialize["creditCard"] = o.CreditCard
	}
	if !IsNil(o.Others) {
		toSerialize["others"] = o.Others
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	return toSerialize, nil
}

type NullableCashierClosureCurrencyAmountType struct {
	value *CashierClosureCurrencyAmountType
	isSet bool
}

func (v NullableCashierClosureCurrencyAmountType) Get() *CashierClosureCurrencyAmountType {
	return v.value
}

func (v *NullableCashierClosureCurrencyAmountType) Set(val *CashierClosureCurrencyAmountType) {
	v.value = val
	v.isSet = true
}

func (v NullableCashierClosureCurrencyAmountType) IsSet() bool {
	return v.isSet
}

func (v *NullableCashierClosureCurrencyAmountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashierClosureCurrencyAmountType(val *CashierClosureCurrencyAmountType) *NullableCashierClosureCurrencyAmountType {
	return &NullableCashierClosureCurrencyAmountType{value: val, isSet: true}
}

func (v NullableCashierClosureCurrencyAmountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashierClosureCurrencyAmountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


