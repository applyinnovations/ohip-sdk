/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the AdjustmentDetailsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdjustmentDetailsType{}

// AdjustmentDetailsType Details regarding adjustments of transactions. Adjustment of transactions requires a amount/percentage and the adjustment reason.
type AdjustmentDetailsType struct {
	Amount *CurrencyAmountType `json:"amount,omitempty"`
	// The percentage by which the transaction has to be adjusted.
	Percentage *float32 `json:"percentage,omitempty"`
	// The reason code for the adjustment.
	ReasonCode *string `json:"reasonCode,omitempty"`
	// The reason text for the adjustment.
	ReasonDescription *string `json:"reasonDescription,omitempty"`
	// The department name or ID with which the adjustment is associated.
	Department *string `json:"department,omitempty"`
}

// NewAdjustmentDetailsType instantiates a new AdjustmentDetailsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdjustmentDetailsType() *AdjustmentDetailsType {
	this := AdjustmentDetailsType{}
	return &this
}

// NewAdjustmentDetailsTypeWithDefaults instantiates a new AdjustmentDetailsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdjustmentDetailsTypeWithDefaults() *AdjustmentDetailsType {
	this := AdjustmentDetailsType{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *AdjustmentDetailsType) GetAmount() CurrencyAmountType {
	if o == nil || IsNil(o.Amount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdjustmentDetailsType) GetAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *AdjustmentDetailsType) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given CurrencyAmountType and assigns it to the Amount field.
func (o *AdjustmentDetailsType) SetAmount(v CurrencyAmountType) {
	o.Amount = &v
}

// GetPercentage returns the Percentage field value if set, zero value otherwise.
func (o *AdjustmentDetailsType) GetPercentage() float32 {
	if o == nil || IsNil(o.Percentage) {
		var ret float32
		return ret
	}
	return *o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdjustmentDetailsType) GetPercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.Percentage) {
		return nil, false
	}
	return o.Percentage, true
}

// HasPercentage returns a boolean if a field has been set.
func (o *AdjustmentDetailsType) HasPercentage() bool {
	if o != nil && !IsNil(o.Percentage) {
		return true
	}

	return false
}

// SetPercentage gets a reference to the given float32 and assigns it to the Percentage field.
func (o *AdjustmentDetailsType) SetPercentage(v float32) {
	o.Percentage = &v
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *AdjustmentDetailsType) GetReasonCode() string {
	if o == nil || IsNil(o.ReasonCode) {
		var ret string
		return ret
	}
	return *o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdjustmentDetailsType) GetReasonCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *AdjustmentDetailsType) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given string and assigns it to the ReasonCode field.
func (o *AdjustmentDetailsType) SetReasonCode(v string) {
	o.ReasonCode = &v
}

// GetReasonDescription returns the ReasonDescription field value if set, zero value otherwise.
func (o *AdjustmentDetailsType) GetReasonDescription() string {
	if o == nil || IsNil(o.ReasonDescription) {
		var ret string
		return ret
	}
	return *o.ReasonDescription
}

// GetReasonDescriptionOk returns a tuple with the ReasonDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdjustmentDetailsType) GetReasonDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ReasonDescription) {
		return nil, false
	}
	return o.ReasonDescription, true
}

// HasReasonDescription returns a boolean if a field has been set.
func (o *AdjustmentDetailsType) HasReasonDescription() bool {
	if o != nil && !IsNil(o.ReasonDescription) {
		return true
	}

	return false
}

// SetReasonDescription gets a reference to the given string and assigns it to the ReasonDescription field.
func (o *AdjustmentDetailsType) SetReasonDescription(v string) {
	o.ReasonDescription = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *AdjustmentDetailsType) GetDepartment() string {
	if o == nil || IsNil(o.Department) {
		var ret string
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdjustmentDetailsType) GetDepartmentOk() (*string, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *AdjustmentDetailsType) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given string and assigns it to the Department field.
func (o *AdjustmentDetailsType) SetDepartment(v string) {
	o.Department = &v
}

func (o AdjustmentDetailsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdjustmentDetailsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Percentage) {
		toSerialize["percentage"] = o.Percentage
	}
	if !IsNil(o.ReasonCode) {
		toSerialize["reasonCode"] = o.ReasonCode
	}
	if !IsNil(o.ReasonDescription) {
		toSerialize["reasonDescription"] = o.ReasonDescription
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	return toSerialize, nil
}

type NullableAdjustmentDetailsType struct {
	value *AdjustmentDetailsType
	isSet bool
}

func (v NullableAdjustmentDetailsType) Get() *AdjustmentDetailsType {
	return v.value
}

func (v *NullableAdjustmentDetailsType) Set(val *AdjustmentDetailsType) {
	v.value = val
	v.isSet = true
}

func (v NullableAdjustmentDetailsType) IsSet() bool {
	return v.isSet
}

func (v *NullableAdjustmentDetailsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdjustmentDetailsType(val *AdjustmentDetailsType) *NullableAdjustmentDetailsType {
	return &NullableAdjustmentDetailsType{value: val, isSet: true}
}

func (v NullableAdjustmentDetailsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdjustmentDetailsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


