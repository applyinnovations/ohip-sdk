/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the CashierClosureType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CashierClosureType{}

// CashierClosureType Cashier Shift Totals and Per Hotel amounts group by currency code
type CashierClosureType struct {
	CashierInfo *CashierClosureNoType `json:"cashierInfo,omitempty"`
	// Currency Hotels Amounts for Cashier Shift.
	HotelCurrencyAmountList []HotelCashierClosureCurrencyAmountType `json:"hotelCurrencyAmountList,omitempty"`
	// Currency Total Amounts for Cashier Shift.
	SummaryCurrencyAmountList []CashierClosureCurrencyAmountType `json:"summaryCurrencyAmountList,omitempty"`
}

// NewCashierClosureType instantiates a new CashierClosureType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCashierClosureType() *CashierClosureType {
	this := CashierClosureType{}
	return &this
}

// NewCashierClosureTypeWithDefaults instantiates a new CashierClosureType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCashierClosureTypeWithDefaults() *CashierClosureType {
	this := CashierClosureType{}
	return &this
}

// GetCashierInfo returns the CashierInfo field value if set, zero value otherwise.
func (o *CashierClosureType) GetCashierInfo() CashierClosureNoType {
	if o == nil || IsNil(o.CashierInfo) {
		var ret CashierClosureNoType
		return ret
	}
	return *o.CashierInfo
}

// GetCashierInfoOk returns a tuple with the CashierInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierClosureType) GetCashierInfoOk() (*CashierClosureNoType, bool) {
	if o == nil || IsNil(o.CashierInfo) {
		return nil, false
	}
	return o.CashierInfo, true
}

// HasCashierInfo returns a boolean if a field has been set.
func (o *CashierClosureType) HasCashierInfo() bool {
	if o != nil && !IsNil(o.CashierInfo) {
		return true
	}

	return false
}

// SetCashierInfo gets a reference to the given CashierClosureNoType and assigns it to the CashierInfo field.
func (o *CashierClosureType) SetCashierInfo(v CashierClosureNoType) {
	o.CashierInfo = &v
}

// GetHotelCurrencyAmountList returns the HotelCurrencyAmountList field value if set, zero value otherwise.
func (o *CashierClosureType) GetHotelCurrencyAmountList() []HotelCashierClosureCurrencyAmountType {
	if o == nil || IsNil(o.HotelCurrencyAmountList) {
		var ret []HotelCashierClosureCurrencyAmountType
		return ret
	}
	return o.HotelCurrencyAmountList
}

// GetHotelCurrencyAmountListOk returns a tuple with the HotelCurrencyAmountList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierClosureType) GetHotelCurrencyAmountListOk() ([]HotelCashierClosureCurrencyAmountType, bool) {
	if o == nil || IsNil(o.HotelCurrencyAmountList) {
		return nil, false
	}
	return o.HotelCurrencyAmountList, true
}

// HasHotelCurrencyAmountList returns a boolean if a field has been set.
func (o *CashierClosureType) HasHotelCurrencyAmountList() bool {
	if o != nil && !IsNil(o.HotelCurrencyAmountList) {
		return true
	}

	return false
}

// SetHotelCurrencyAmountList gets a reference to the given []HotelCashierClosureCurrencyAmountType and assigns it to the HotelCurrencyAmountList field.
func (o *CashierClosureType) SetHotelCurrencyAmountList(v []HotelCashierClosureCurrencyAmountType) {
	o.HotelCurrencyAmountList = v
}

// GetSummaryCurrencyAmountList returns the SummaryCurrencyAmountList field value if set, zero value otherwise.
func (o *CashierClosureType) GetSummaryCurrencyAmountList() []CashierClosureCurrencyAmountType {
	if o == nil || IsNil(o.SummaryCurrencyAmountList) {
		var ret []CashierClosureCurrencyAmountType
		return ret
	}
	return o.SummaryCurrencyAmountList
}

// GetSummaryCurrencyAmountListOk returns a tuple with the SummaryCurrencyAmountList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierClosureType) GetSummaryCurrencyAmountListOk() ([]CashierClosureCurrencyAmountType, bool) {
	if o == nil || IsNil(o.SummaryCurrencyAmountList) {
		return nil, false
	}
	return o.SummaryCurrencyAmountList, true
}

// HasSummaryCurrencyAmountList returns a boolean if a field has been set.
func (o *CashierClosureType) HasSummaryCurrencyAmountList() bool {
	if o != nil && !IsNil(o.SummaryCurrencyAmountList) {
		return true
	}

	return false
}

// SetSummaryCurrencyAmountList gets a reference to the given []CashierClosureCurrencyAmountType and assigns it to the SummaryCurrencyAmountList field.
func (o *CashierClosureType) SetSummaryCurrencyAmountList(v []CashierClosureCurrencyAmountType) {
	o.SummaryCurrencyAmountList = v
}

func (o CashierClosureType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CashierClosureType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CashierInfo) {
		toSerialize["cashierInfo"] = o.CashierInfo
	}
	if !IsNil(o.HotelCurrencyAmountList) {
		toSerialize["hotelCurrencyAmountList"] = o.HotelCurrencyAmountList
	}
	if !IsNil(o.SummaryCurrencyAmountList) {
		toSerialize["summaryCurrencyAmountList"] = o.SummaryCurrencyAmountList
	}
	return toSerialize, nil
}

type NullableCashierClosureType struct {
	value *CashierClosureType
	isSet bool
}

func (v NullableCashierClosureType) Get() *CashierClosureType {
	return v.value
}

func (v *NullableCashierClosureType) Set(val *CashierClosureType) {
	v.value = val
	v.isSet = true
}

func (v NullableCashierClosureType) IsSet() bool {
	return v.isSet
}

func (v *NullableCashierClosureType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashierClosureType(val *CashierClosureType) *NullableCashierClosureType {
	return &NullableCashierClosureType{value: val, isSet: true}
}

func (v NullableCashierClosureType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashierClosureType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


