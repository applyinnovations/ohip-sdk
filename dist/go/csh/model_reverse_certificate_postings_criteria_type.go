/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the ReverseCertificatePostingsCriteriaType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReverseCertificatePostingsCriteriaType{}

// ReverseCertificatePostingsCriteriaType Criteria type for reversing certificate postings of transactions.
type ReverseCertificatePostingsCriteriaType struct {
	// The Cashier ID of the Cashier who is currently processing the transaction(s).
	CashierId *float32 `json:"cashierId,omitempty"`
	// Property code where the reservation transaction exists.
	HotelId *string `json:"hotelId,omitempty"`
	// The reason code for the deletion.
	ReasonCode *string `json:"reasonCode,omitempty"`
	ReservationNameId *UniqueIDType `json:"reservationNameId,omitempty"`
	// The unique transaction number of this transaction.
	TransactionList []float32 `json:"transactionList,omitempty"`
}

// NewReverseCertificatePostingsCriteriaType instantiates a new ReverseCertificatePostingsCriteriaType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReverseCertificatePostingsCriteriaType() *ReverseCertificatePostingsCriteriaType {
	this := ReverseCertificatePostingsCriteriaType{}
	return &this
}

// NewReverseCertificatePostingsCriteriaTypeWithDefaults instantiates a new ReverseCertificatePostingsCriteriaType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReverseCertificatePostingsCriteriaTypeWithDefaults() *ReverseCertificatePostingsCriteriaType {
	this := ReverseCertificatePostingsCriteriaType{}
	return &this
}

// GetCashierId returns the CashierId field value if set, zero value otherwise.
func (o *ReverseCertificatePostingsCriteriaType) GetCashierId() float32 {
	if o == nil || IsNil(o.CashierId) {
		var ret float32
		return ret
	}
	return *o.CashierId
}

// GetCashierIdOk returns a tuple with the CashierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReverseCertificatePostingsCriteriaType) GetCashierIdOk() (*float32, bool) {
	if o == nil || IsNil(o.CashierId) {
		return nil, false
	}
	return o.CashierId, true
}

// HasCashierId returns a boolean if a field has been set.
func (o *ReverseCertificatePostingsCriteriaType) HasCashierId() bool {
	if o != nil && !IsNil(o.CashierId) {
		return true
	}

	return false
}

// SetCashierId gets a reference to the given float32 and assigns it to the CashierId field.
func (o *ReverseCertificatePostingsCriteriaType) SetCashierId(v float32) {
	o.CashierId = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ReverseCertificatePostingsCriteriaType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReverseCertificatePostingsCriteriaType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ReverseCertificatePostingsCriteriaType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ReverseCertificatePostingsCriteriaType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *ReverseCertificatePostingsCriteriaType) GetReasonCode() string {
	if o == nil || IsNil(o.ReasonCode) {
		var ret string
		return ret
	}
	return *o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReverseCertificatePostingsCriteriaType) GetReasonCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *ReverseCertificatePostingsCriteriaType) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given string and assigns it to the ReasonCode field.
func (o *ReverseCertificatePostingsCriteriaType) SetReasonCode(v string) {
	o.ReasonCode = &v
}

// GetReservationNameId returns the ReservationNameId field value if set, zero value otherwise.
func (o *ReverseCertificatePostingsCriteriaType) GetReservationNameId() UniqueIDType {
	if o == nil || IsNil(o.ReservationNameId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ReservationNameId
}

// GetReservationNameIdOk returns a tuple with the ReservationNameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReverseCertificatePostingsCriteriaType) GetReservationNameIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ReservationNameId) {
		return nil, false
	}
	return o.ReservationNameId, true
}

// HasReservationNameId returns a boolean if a field has been set.
func (o *ReverseCertificatePostingsCriteriaType) HasReservationNameId() bool {
	if o != nil && !IsNil(o.ReservationNameId) {
		return true
	}

	return false
}

// SetReservationNameId gets a reference to the given UniqueIDType and assigns it to the ReservationNameId field.
func (o *ReverseCertificatePostingsCriteriaType) SetReservationNameId(v UniqueIDType) {
	o.ReservationNameId = &v
}

// GetTransactionList returns the TransactionList field value if set, zero value otherwise.
func (o *ReverseCertificatePostingsCriteriaType) GetTransactionList() []float32 {
	if o == nil || IsNil(o.TransactionList) {
		var ret []float32
		return ret
	}
	return o.TransactionList
}

// GetTransactionListOk returns a tuple with the TransactionList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReverseCertificatePostingsCriteriaType) GetTransactionListOk() ([]float32, bool) {
	if o == nil || IsNil(o.TransactionList) {
		return nil, false
	}
	return o.TransactionList, true
}

// HasTransactionList returns a boolean if a field has been set.
func (o *ReverseCertificatePostingsCriteriaType) HasTransactionList() bool {
	if o != nil && !IsNil(o.TransactionList) {
		return true
	}

	return false
}

// SetTransactionList gets a reference to the given []float32 and assigns it to the TransactionList field.
func (o *ReverseCertificatePostingsCriteriaType) SetTransactionList(v []float32) {
	o.TransactionList = v
}

func (o ReverseCertificatePostingsCriteriaType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReverseCertificatePostingsCriteriaType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CashierId) {
		toSerialize["cashierId"] = o.CashierId
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ReasonCode) {
		toSerialize["reasonCode"] = o.ReasonCode
	}
	if !IsNil(o.ReservationNameId) {
		toSerialize["reservationNameId"] = o.ReservationNameId
	}
	if !IsNil(o.TransactionList) {
		toSerialize["transactionList"] = o.TransactionList
	}
	return toSerialize, nil
}

type NullableReverseCertificatePostingsCriteriaType struct {
	value *ReverseCertificatePostingsCriteriaType
	isSet bool
}

func (v NullableReverseCertificatePostingsCriteriaType) Get() *ReverseCertificatePostingsCriteriaType {
	return v.value
}

func (v *NullableReverseCertificatePostingsCriteriaType) Set(val *ReverseCertificatePostingsCriteriaType) {
	v.value = val
	v.isSet = true
}

func (v NullableReverseCertificatePostingsCriteriaType) IsSet() bool {
	return v.isSet
}

func (v *NullableReverseCertificatePostingsCriteriaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReverseCertificatePostingsCriteriaType(val *ReverseCertificatePostingsCriteriaType) *NullableReverseCertificatePostingsCriteriaType {
	return &NullableReverseCertificatePostingsCriteriaType{value: val, isSet: true}
}

func (v NullableReverseCertificatePostingsCriteriaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReverseCertificatePostingsCriteriaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


