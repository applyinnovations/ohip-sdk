/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
	"fmt"
)

// PaymentTax The types of Payment Tax transactions.
type PaymentTax string

// List of paymentTax
const (
	PAYMENTTAX_DEPOSIT PaymentTax = "Deposit"
	PAYMENTTAX_FRONT_OFFICE PaymentTax = "FrontOffice"
	PAYMENTTAX_CREDIT_NOTE PaymentTax = "CreditNote"
	PAYMENTTAX_CITY_LEDGER PaymentTax = "CityLedger"
	PAYMENTTAX_ACCOUNTS_RECEIVABLES PaymentTax = "AccountsReceivables"
	PAYMENTTAX_NON_VAT PaymentTax = "NonVat"
)

// All allowed values of PaymentTax enum
var AllowedPaymentTaxEnumValues = []PaymentTax{
	"Deposit",
	"FrontOffice",
	"CreditNote",
	"CityLedger",
	"AccountsReceivables",
	"NonVat",
}

func (v *PaymentTax) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentTax(value)
	for _, existing := range AllowedPaymentTaxEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaymentTax", value)
}

// NewPaymentTaxFromValue returns a pointer to a valid PaymentTax
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentTaxFromValue(v string) (*PaymentTax, error) {
	ev := PaymentTax(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentTax: valid values are %v", v, AllowedPaymentTaxEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentTax) IsValid() bool {
	for _, existing := range AllowedPaymentTaxEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to paymentTax value
func (v PaymentTax) Ptr() *PaymentTax {
	return &v
}

type NullablePaymentTax struct {
	value *PaymentTax
	isSet bool
}

func (v NullablePaymentTax) Get() *PaymentTax {
	return v.value
}

func (v *NullablePaymentTax) Set(val *PaymentTax) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentTax) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentTax) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentTax(val *PaymentTax) *NullablePaymentTax {
	return &NullablePaymentTax{value: val, isSet: true}
}

func (v NullablePaymentTax) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentTax) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

