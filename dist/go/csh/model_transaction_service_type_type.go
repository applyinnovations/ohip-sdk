/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the TransactionServiceTypeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionServiceTypeType{}

// TransactionServiceTypeType Containsts service type posting information.
type TransactionServiceTypeType struct {
	ServiceType *CodeDescriptionType `json:"serviceType,omitempty"`
	Revenue *CurrencyAmountType `json:"revenue,omitempty"`
	Payment *CurrencyAmountType `json:"payment,omitempty"`
	Balance *CurrencyAmountType `json:"balance,omitempty"`
	// Running total number of the service type.
	TotalPostings *int32 `json:"totalPostings,omitempty"`
}

// NewTransactionServiceTypeType instantiates a new TransactionServiceTypeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionServiceTypeType() *TransactionServiceTypeType {
	this := TransactionServiceTypeType{}
	return &this
}

// NewTransactionServiceTypeTypeWithDefaults instantiates a new TransactionServiceTypeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionServiceTypeTypeWithDefaults() *TransactionServiceTypeType {
	this := TransactionServiceTypeType{}
	return &this
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise.
func (o *TransactionServiceTypeType) GetServiceType() CodeDescriptionType {
	if o == nil || IsNil(o.ServiceType) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionServiceTypeType) GetServiceTypeOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.ServiceType) {
		return nil, false
	}
	return o.ServiceType, true
}

// HasServiceType returns a boolean if a field has been set.
func (o *TransactionServiceTypeType) HasServiceType() bool {
	if o != nil && !IsNil(o.ServiceType) {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given CodeDescriptionType and assigns it to the ServiceType field.
func (o *TransactionServiceTypeType) SetServiceType(v CodeDescriptionType) {
	o.ServiceType = &v
}

// GetRevenue returns the Revenue field value if set, zero value otherwise.
func (o *TransactionServiceTypeType) GetRevenue() CurrencyAmountType {
	if o == nil || IsNil(o.Revenue) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Revenue
}

// GetRevenueOk returns a tuple with the Revenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionServiceTypeType) GetRevenueOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Revenue) {
		return nil, false
	}
	return o.Revenue, true
}

// HasRevenue returns a boolean if a field has been set.
func (o *TransactionServiceTypeType) HasRevenue() bool {
	if o != nil && !IsNil(o.Revenue) {
		return true
	}

	return false
}

// SetRevenue gets a reference to the given CurrencyAmountType and assigns it to the Revenue field.
func (o *TransactionServiceTypeType) SetRevenue(v CurrencyAmountType) {
	o.Revenue = &v
}

// GetPayment returns the Payment field value if set, zero value otherwise.
func (o *TransactionServiceTypeType) GetPayment() CurrencyAmountType {
	if o == nil || IsNil(o.Payment) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Payment
}

// GetPaymentOk returns a tuple with the Payment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionServiceTypeType) GetPaymentOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Payment) {
		return nil, false
	}
	return o.Payment, true
}

// HasPayment returns a boolean if a field has been set.
func (o *TransactionServiceTypeType) HasPayment() bool {
	if o != nil && !IsNil(o.Payment) {
		return true
	}

	return false
}

// SetPayment gets a reference to the given CurrencyAmountType and assigns it to the Payment field.
func (o *TransactionServiceTypeType) SetPayment(v CurrencyAmountType) {
	o.Payment = &v
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *TransactionServiceTypeType) GetBalance() CurrencyAmountType {
	if o == nil || IsNil(o.Balance) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionServiceTypeType) GetBalanceOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *TransactionServiceTypeType) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given CurrencyAmountType and assigns it to the Balance field.
func (o *TransactionServiceTypeType) SetBalance(v CurrencyAmountType) {
	o.Balance = &v
}

// GetTotalPostings returns the TotalPostings field value if set, zero value otherwise.
func (o *TransactionServiceTypeType) GetTotalPostings() int32 {
	if o == nil || IsNil(o.TotalPostings) {
		var ret int32
		return ret
	}
	return *o.TotalPostings
}

// GetTotalPostingsOk returns a tuple with the TotalPostings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionServiceTypeType) GetTotalPostingsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalPostings) {
		return nil, false
	}
	return o.TotalPostings, true
}

// HasTotalPostings returns a boolean if a field has been set.
func (o *TransactionServiceTypeType) HasTotalPostings() bool {
	if o != nil && !IsNil(o.TotalPostings) {
		return true
	}

	return false
}

// SetTotalPostings gets a reference to the given int32 and assigns it to the TotalPostings field.
func (o *TransactionServiceTypeType) SetTotalPostings(v int32) {
	o.TotalPostings = &v
}

func (o TransactionServiceTypeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionServiceTypeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServiceType) {
		toSerialize["serviceType"] = o.ServiceType
	}
	if !IsNil(o.Revenue) {
		toSerialize["revenue"] = o.Revenue
	}
	if !IsNil(o.Payment) {
		toSerialize["payment"] = o.Payment
	}
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	if !IsNil(o.TotalPostings) {
		toSerialize["totalPostings"] = o.TotalPostings
	}
	return toSerialize, nil
}

type NullableTransactionServiceTypeType struct {
	value *TransactionServiceTypeType
	isSet bool
}

func (v NullableTransactionServiceTypeType) Get() *TransactionServiceTypeType {
	return v.value
}

func (v *NullableTransactionServiceTypeType) Set(val *TransactionServiceTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionServiceTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionServiceTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionServiceTypeType(val *TransactionServiceTypeType) *NullableTransactionServiceTypeType {
	return &NullableTransactionServiceTypeType{value: val, isSet: true}
}

func (v NullableTransactionServiceTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionServiceTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


