/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the AuthorizationHistoryTypeStatusSuccessful type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizationHistoryTypeStatusSuccessful{}

// AuthorizationHistoryTypeStatusSuccessful An indicator that the authorization was successful.
type AuthorizationHistoryTypeStatusSuccessful struct {
	// Approval code sent by the credit card company on a successful authorization.
	ApprovalCode *string `json:"approvalCode,omitempty"`
}

// NewAuthorizationHistoryTypeStatusSuccessful instantiates a new AuthorizationHistoryTypeStatusSuccessful object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizationHistoryTypeStatusSuccessful() *AuthorizationHistoryTypeStatusSuccessful {
	this := AuthorizationHistoryTypeStatusSuccessful{}
	return &this
}

// NewAuthorizationHistoryTypeStatusSuccessfulWithDefaults instantiates a new AuthorizationHistoryTypeStatusSuccessful object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizationHistoryTypeStatusSuccessfulWithDefaults() *AuthorizationHistoryTypeStatusSuccessful {
	this := AuthorizationHistoryTypeStatusSuccessful{}
	return &this
}

// GetApprovalCode returns the ApprovalCode field value if set, zero value otherwise.
func (o *AuthorizationHistoryTypeStatusSuccessful) GetApprovalCode() string {
	if o == nil || IsNil(o.ApprovalCode) {
		var ret string
		return ret
	}
	return *o.ApprovalCode
}

// GetApprovalCodeOk returns a tuple with the ApprovalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationHistoryTypeStatusSuccessful) GetApprovalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ApprovalCode) {
		return nil, false
	}
	return o.ApprovalCode, true
}

// HasApprovalCode returns a boolean if a field has been set.
func (o *AuthorizationHistoryTypeStatusSuccessful) HasApprovalCode() bool {
	if o != nil && !IsNil(o.ApprovalCode) {
		return true
	}

	return false
}

// SetApprovalCode gets a reference to the given string and assigns it to the ApprovalCode field.
func (o *AuthorizationHistoryTypeStatusSuccessful) SetApprovalCode(v string) {
	o.ApprovalCode = &v
}

func (o AuthorizationHistoryTypeStatusSuccessful) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizationHistoryTypeStatusSuccessful) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApprovalCode) {
		toSerialize["approvalCode"] = o.ApprovalCode
	}
	return toSerialize, nil
}

type NullableAuthorizationHistoryTypeStatusSuccessful struct {
	value *AuthorizationHistoryTypeStatusSuccessful
	isSet bool
}

func (v NullableAuthorizationHistoryTypeStatusSuccessful) Get() *AuthorizationHistoryTypeStatusSuccessful {
	return v.value
}

func (v *NullableAuthorizationHistoryTypeStatusSuccessful) Set(val *AuthorizationHistoryTypeStatusSuccessful) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationHistoryTypeStatusSuccessful) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationHistoryTypeStatusSuccessful) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationHistoryTypeStatusSuccessful(val *AuthorizationHistoryTypeStatusSuccessful) *NullableAuthorizationHistoryTypeStatusSuccessful {
	return &NullableAuthorizationHistoryTypeStatusSuccessful{value: val, isSet: true}
}

func (v NullableAuthorizationHistoryTypeStatusSuccessful) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationHistoryTypeStatusSuccessful) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


