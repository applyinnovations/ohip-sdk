/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the FolioTypeNameInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FolioTypeNameInfoType{}

// FolioTypeNameInfoType Details of a Folio Type configuration.
type FolioTypeNameInfoType struct {
	// Property where the Folio Type exists.
	HotelId *string `json:"hotelId,omitempty"`
	// The Folio Type.
	FolioTypeName *string `json:"folioTypeName,omitempty"`
	// The report name which should be used as the Folio for printing.
	FolioReportName *string `json:"folioReportName,omitempty"`
	FolioReportModuleId *UniqueIDType `json:"folioReportModuleId,omitempty"`
	// The Language Code for which the folio is effective.
	FolioLanguageCode *string `json:"folioLanguageCode,omitempty"`
}

// NewFolioTypeNameInfoType instantiates a new FolioTypeNameInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFolioTypeNameInfoType() *FolioTypeNameInfoType {
	this := FolioTypeNameInfoType{}
	return &this
}

// NewFolioTypeNameInfoTypeWithDefaults instantiates a new FolioTypeNameInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFolioTypeNameInfoTypeWithDefaults() *FolioTypeNameInfoType {
	this := FolioTypeNameInfoType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *FolioTypeNameInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolioTypeNameInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *FolioTypeNameInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *FolioTypeNameInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetFolioTypeName returns the FolioTypeName field value if set, zero value otherwise.
func (o *FolioTypeNameInfoType) GetFolioTypeName() string {
	if o == nil || IsNil(o.FolioTypeName) {
		var ret string
		return ret
	}
	return *o.FolioTypeName
}

// GetFolioTypeNameOk returns a tuple with the FolioTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolioTypeNameInfoType) GetFolioTypeNameOk() (*string, bool) {
	if o == nil || IsNil(o.FolioTypeName) {
		return nil, false
	}
	return o.FolioTypeName, true
}

// HasFolioTypeName returns a boolean if a field has been set.
func (o *FolioTypeNameInfoType) HasFolioTypeName() bool {
	if o != nil && !IsNil(o.FolioTypeName) {
		return true
	}

	return false
}

// SetFolioTypeName gets a reference to the given string and assigns it to the FolioTypeName field.
func (o *FolioTypeNameInfoType) SetFolioTypeName(v string) {
	o.FolioTypeName = &v
}

// GetFolioReportName returns the FolioReportName field value if set, zero value otherwise.
func (o *FolioTypeNameInfoType) GetFolioReportName() string {
	if o == nil || IsNil(o.FolioReportName) {
		var ret string
		return ret
	}
	return *o.FolioReportName
}

// GetFolioReportNameOk returns a tuple with the FolioReportName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolioTypeNameInfoType) GetFolioReportNameOk() (*string, bool) {
	if o == nil || IsNil(o.FolioReportName) {
		return nil, false
	}
	return o.FolioReportName, true
}

// HasFolioReportName returns a boolean if a field has been set.
func (o *FolioTypeNameInfoType) HasFolioReportName() bool {
	if o != nil && !IsNil(o.FolioReportName) {
		return true
	}

	return false
}

// SetFolioReportName gets a reference to the given string and assigns it to the FolioReportName field.
func (o *FolioTypeNameInfoType) SetFolioReportName(v string) {
	o.FolioReportName = &v
}

// GetFolioReportModuleId returns the FolioReportModuleId field value if set, zero value otherwise.
func (o *FolioTypeNameInfoType) GetFolioReportModuleId() UniqueIDType {
	if o == nil || IsNil(o.FolioReportModuleId) {
		var ret UniqueIDType
		return ret
	}
	return *o.FolioReportModuleId
}

// GetFolioReportModuleIdOk returns a tuple with the FolioReportModuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolioTypeNameInfoType) GetFolioReportModuleIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.FolioReportModuleId) {
		return nil, false
	}
	return o.FolioReportModuleId, true
}

// HasFolioReportModuleId returns a boolean if a field has been set.
func (o *FolioTypeNameInfoType) HasFolioReportModuleId() bool {
	if o != nil && !IsNil(o.FolioReportModuleId) {
		return true
	}

	return false
}

// SetFolioReportModuleId gets a reference to the given UniqueIDType and assigns it to the FolioReportModuleId field.
func (o *FolioTypeNameInfoType) SetFolioReportModuleId(v UniqueIDType) {
	o.FolioReportModuleId = &v
}

// GetFolioLanguageCode returns the FolioLanguageCode field value if set, zero value otherwise.
func (o *FolioTypeNameInfoType) GetFolioLanguageCode() string {
	if o == nil || IsNil(o.FolioLanguageCode) {
		var ret string
		return ret
	}
	return *o.FolioLanguageCode
}

// GetFolioLanguageCodeOk returns a tuple with the FolioLanguageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolioTypeNameInfoType) GetFolioLanguageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.FolioLanguageCode) {
		return nil, false
	}
	return o.FolioLanguageCode, true
}

// HasFolioLanguageCode returns a boolean if a field has been set.
func (o *FolioTypeNameInfoType) HasFolioLanguageCode() bool {
	if o != nil && !IsNil(o.FolioLanguageCode) {
		return true
	}

	return false
}

// SetFolioLanguageCode gets a reference to the given string and assigns it to the FolioLanguageCode field.
func (o *FolioTypeNameInfoType) SetFolioLanguageCode(v string) {
	o.FolioLanguageCode = &v
}

func (o FolioTypeNameInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FolioTypeNameInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.FolioTypeName) {
		toSerialize["folioTypeName"] = o.FolioTypeName
	}
	if !IsNil(o.FolioReportName) {
		toSerialize["folioReportName"] = o.FolioReportName
	}
	if !IsNil(o.FolioReportModuleId) {
		toSerialize["folioReportModuleId"] = o.FolioReportModuleId
	}
	if !IsNil(o.FolioLanguageCode) {
		toSerialize["folioLanguageCode"] = o.FolioLanguageCode
	}
	return toSerialize, nil
}

type NullableFolioTypeNameInfoType struct {
	value *FolioTypeNameInfoType
	isSet bool
}

func (v NullableFolioTypeNameInfoType) Get() *FolioTypeNameInfoType {
	return v.value
}

func (v *NullableFolioTypeNameInfoType) Set(val *FolioTypeNameInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableFolioTypeNameInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableFolioTypeNameInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolioTypeNameInfoType(val *FolioTypeNameInfoType) *NullableFolioTypeNameInfoType {
	return &NullableFolioTypeNameInfoType{value: val, isSet: true}
}

func (v NullableFolioTypeNameInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolioTypeNameInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


