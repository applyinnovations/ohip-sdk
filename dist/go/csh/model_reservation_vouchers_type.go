/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the ReservationVouchersType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReservationVouchersType{}

// ReservationVouchersType Vouchers information of a reservation.
type ReservationVouchersType struct {
	// List of vouchers associated with the reservation.
	Vouchers []ReservationVoucherType `json:"vouchers,omitempty"`
}

// NewReservationVouchersType instantiates a new ReservationVouchersType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservationVouchersType() *ReservationVouchersType {
	this := ReservationVouchersType{}
	return &this
}

// NewReservationVouchersTypeWithDefaults instantiates a new ReservationVouchersType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservationVouchersTypeWithDefaults() *ReservationVouchersType {
	this := ReservationVouchersType{}
	return &this
}

// GetVouchers returns the Vouchers field value if set, zero value otherwise.
func (o *ReservationVouchersType) GetVouchers() []ReservationVoucherType {
	if o == nil || IsNil(o.Vouchers) {
		var ret []ReservationVoucherType
		return ret
	}
	return o.Vouchers
}

// GetVouchersOk returns a tuple with the Vouchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationVouchersType) GetVouchersOk() ([]ReservationVoucherType, bool) {
	if o == nil || IsNil(o.Vouchers) {
		return nil, false
	}
	return o.Vouchers, true
}

// HasVouchers returns a boolean if a field has been set.
func (o *ReservationVouchersType) HasVouchers() bool {
	if o != nil && !IsNil(o.Vouchers) {
		return true
	}

	return false
}

// SetVouchers gets a reference to the given []ReservationVoucherType and assigns it to the Vouchers field.
func (o *ReservationVouchersType) SetVouchers(v []ReservationVoucherType) {
	o.Vouchers = v
}

func (o ReservationVouchersType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReservationVouchersType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Vouchers) {
		toSerialize["vouchers"] = o.Vouchers
	}
	return toSerialize, nil
}

type NullableReservationVouchersType struct {
	value *ReservationVouchersType
	isSet bool
}

func (v NullableReservationVouchersType) Get() *ReservationVouchersType {
	return v.value
}

func (v *NullableReservationVouchersType) Set(val *ReservationVouchersType) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationVouchersType) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationVouchersType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationVouchersType(val *ReservationVouchersType) *NullableReservationVouchersType {
	return &NullableReservationVouchersType{value: val, isSet: true}
}

func (v NullableReservationVouchersType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationVouchersType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


