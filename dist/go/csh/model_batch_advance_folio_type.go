/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the BatchAdvanceFolioType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchAdvanceFolioType{}

// BatchAdvanceFolioType Contains criteria for process batch advance folio.
type BatchAdvanceFolioType struct {
	// The Cashier ID of the Cashier who is currently processing the transaction(s).
	CashierId *float32 `json:"cashierId,omitempty"`
	// Property context of the reservations.
	HotelId *string `json:"hotelId,omitempty"`
	// Unique identifier for a reservation.
	Reservations []ReservationId `json:"reservations,omitempty"`
}

// NewBatchAdvanceFolioType instantiates a new BatchAdvanceFolioType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchAdvanceFolioType() *BatchAdvanceFolioType {
	this := BatchAdvanceFolioType{}
	return &this
}

// NewBatchAdvanceFolioTypeWithDefaults instantiates a new BatchAdvanceFolioType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchAdvanceFolioTypeWithDefaults() *BatchAdvanceFolioType {
	this := BatchAdvanceFolioType{}
	return &this
}

// GetCashierId returns the CashierId field value if set, zero value otherwise.
func (o *BatchAdvanceFolioType) GetCashierId() float32 {
	if o == nil || IsNil(o.CashierId) {
		var ret float32
		return ret
	}
	return *o.CashierId
}

// GetCashierIdOk returns a tuple with the CashierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchAdvanceFolioType) GetCashierIdOk() (*float32, bool) {
	if o == nil || IsNil(o.CashierId) {
		return nil, false
	}
	return o.CashierId, true
}

// HasCashierId returns a boolean if a field has been set.
func (o *BatchAdvanceFolioType) HasCashierId() bool {
	if o != nil && !IsNil(o.CashierId) {
		return true
	}

	return false
}

// SetCashierId gets a reference to the given float32 and assigns it to the CashierId field.
func (o *BatchAdvanceFolioType) SetCashierId(v float32) {
	o.CashierId = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *BatchAdvanceFolioType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchAdvanceFolioType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *BatchAdvanceFolioType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *BatchAdvanceFolioType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetReservations returns the Reservations field value if set, zero value otherwise.
func (o *BatchAdvanceFolioType) GetReservations() []ReservationId {
	if o == nil || IsNil(o.Reservations) {
		var ret []ReservationId
		return ret
	}
	return o.Reservations
}

// GetReservationsOk returns a tuple with the Reservations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchAdvanceFolioType) GetReservationsOk() ([]ReservationId, bool) {
	if o == nil || IsNil(o.Reservations) {
		return nil, false
	}
	return o.Reservations, true
}

// HasReservations returns a boolean if a field has been set.
func (o *BatchAdvanceFolioType) HasReservations() bool {
	if o != nil && !IsNil(o.Reservations) {
		return true
	}

	return false
}

// SetReservations gets a reference to the given []ReservationId and assigns it to the Reservations field.
func (o *BatchAdvanceFolioType) SetReservations(v []ReservationId) {
	o.Reservations = v
}

func (o BatchAdvanceFolioType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchAdvanceFolioType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CashierId) {
		toSerialize["cashierId"] = o.CashierId
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Reservations) {
		toSerialize["reservations"] = o.Reservations
	}
	return toSerialize, nil
}

type NullableBatchAdvanceFolioType struct {
	value *BatchAdvanceFolioType
	isSet bool
}

func (v NullableBatchAdvanceFolioType) Get() *BatchAdvanceFolioType {
	return v.value
}

func (v *NullableBatchAdvanceFolioType) Set(val *BatchAdvanceFolioType) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchAdvanceFolioType) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchAdvanceFolioType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchAdvanceFolioType(val *BatchAdvanceFolioType) *NullableBatchAdvanceFolioType {
	return &NullableBatchAdvanceFolioType{value: val, isSet: true}
}

func (v NullableBatchAdvanceFolioType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchAdvanceFolioType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


