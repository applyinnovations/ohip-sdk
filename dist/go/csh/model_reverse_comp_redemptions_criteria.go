/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the ReverseCompRedemptionsCriteria type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReverseCompRedemptionsCriteria{}

// ReverseCompRedemptionsCriteria Criteria to reverse complimentary bucket redemptions request.
type ReverseCompRedemptionsCriteria struct {
	// The Cashier ID of the Cashier who is currently processing the transaction(s).
	CashierId *float32 `json:"cashierId,omitempty"`
	// Information regarding Complimentary Bucket Redemption object.
	CompRedemptions []RedemptionType `json:"compRedemptions,omitempty"`
	// Folio Window.
	FolioView *int32 `json:"folioView,omitempty"`
	// Membership number.
	MembershipId *string `json:"membershipId,omitempty"`
}

// NewReverseCompRedemptionsCriteria instantiates a new ReverseCompRedemptionsCriteria object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReverseCompRedemptionsCriteria() *ReverseCompRedemptionsCriteria {
	this := ReverseCompRedemptionsCriteria{}
	return &this
}

// NewReverseCompRedemptionsCriteriaWithDefaults instantiates a new ReverseCompRedemptionsCriteria object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReverseCompRedemptionsCriteriaWithDefaults() *ReverseCompRedemptionsCriteria {
	this := ReverseCompRedemptionsCriteria{}
	return &this
}

// GetCashierId returns the CashierId field value if set, zero value otherwise.
func (o *ReverseCompRedemptionsCriteria) GetCashierId() float32 {
	if o == nil || IsNil(o.CashierId) {
		var ret float32
		return ret
	}
	return *o.CashierId
}

// GetCashierIdOk returns a tuple with the CashierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReverseCompRedemptionsCriteria) GetCashierIdOk() (*float32, bool) {
	if o == nil || IsNil(o.CashierId) {
		return nil, false
	}
	return o.CashierId, true
}

// HasCashierId returns a boolean if a field has been set.
func (o *ReverseCompRedemptionsCriteria) HasCashierId() bool {
	if o != nil && !IsNil(o.CashierId) {
		return true
	}

	return false
}

// SetCashierId gets a reference to the given float32 and assigns it to the CashierId field.
func (o *ReverseCompRedemptionsCriteria) SetCashierId(v float32) {
	o.CashierId = &v
}

// GetCompRedemptions returns the CompRedemptions field value if set, zero value otherwise.
func (o *ReverseCompRedemptionsCriteria) GetCompRedemptions() []RedemptionType {
	if o == nil || IsNil(o.CompRedemptions) {
		var ret []RedemptionType
		return ret
	}
	return o.CompRedemptions
}

// GetCompRedemptionsOk returns a tuple with the CompRedemptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReverseCompRedemptionsCriteria) GetCompRedemptionsOk() ([]RedemptionType, bool) {
	if o == nil || IsNil(o.CompRedemptions) {
		return nil, false
	}
	return o.CompRedemptions, true
}

// HasCompRedemptions returns a boolean if a field has been set.
func (o *ReverseCompRedemptionsCriteria) HasCompRedemptions() bool {
	if o != nil && !IsNil(o.CompRedemptions) {
		return true
	}

	return false
}

// SetCompRedemptions gets a reference to the given []RedemptionType and assigns it to the CompRedemptions field.
func (o *ReverseCompRedemptionsCriteria) SetCompRedemptions(v []RedemptionType) {
	o.CompRedemptions = v
}

// GetFolioView returns the FolioView field value if set, zero value otherwise.
func (o *ReverseCompRedemptionsCriteria) GetFolioView() int32 {
	if o == nil || IsNil(o.FolioView) {
		var ret int32
		return ret
	}
	return *o.FolioView
}

// GetFolioViewOk returns a tuple with the FolioView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReverseCompRedemptionsCriteria) GetFolioViewOk() (*int32, bool) {
	if o == nil || IsNil(o.FolioView) {
		return nil, false
	}
	return o.FolioView, true
}

// HasFolioView returns a boolean if a field has been set.
func (o *ReverseCompRedemptionsCriteria) HasFolioView() bool {
	if o != nil && !IsNil(o.FolioView) {
		return true
	}

	return false
}

// SetFolioView gets a reference to the given int32 and assigns it to the FolioView field.
func (o *ReverseCompRedemptionsCriteria) SetFolioView(v int32) {
	o.FolioView = &v
}

// GetMembershipId returns the MembershipId field value if set, zero value otherwise.
func (o *ReverseCompRedemptionsCriteria) GetMembershipId() string {
	if o == nil || IsNil(o.MembershipId) {
		var ret string
		return ret
	}
	return *o.MembershipId
}

// GetMembershipIdOk returns a tuple with the MembershipId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReverseCompRedemptionsCriteria) GetMembershipIdOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipId) {
		return nil, false
	}
	return o.MembershipId, true
}

// HasMembershipId returns a boolean if a field has been set.
func (o *ReverseCompRedemptionsCriteria) HasMembershipId() bool {
	if o != nil && !IsNil(o.MembershipId) {
		return true
	}

	return false
}

// SetMembershipId gets a reference to the given string and assigns it to the MembershipId field.
func (o *ReverseCompRedemptionsCriteria) SetMembershipId(v string) {
	o.MembershipId = &v
}

func (o ReverseCompRedemptionsCriteria) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReverseCompRedemptionsCriteria) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CashierId) {
		toSerialize["cashierId"] = o.CashierId
	}
	if !IsNil(o.CompRedemptions) {
		toSerialize["compRedemptions"] = o.CompRedemptions
	}
	if !IsNil(o.FolioView) {
		toSerialize["folioView"] = o.FolioView
	}
	if !IsNil(o.MembershipId) {
		toSerialize["membershipId"] = o.MembershipId
	}
	return toSerialize, nil
}

type NullableReverseCompRedemptionsCriteria struct {
	value *ReverseCompRedemptionsCriteria
	isSet bool
}

func (v NullableReverseCompRedemptionsCriteria) Get() *ReverseCompRedemptionsCriteria {
	return v.value
}

func (v *NullableReverseCompRedemptionsCriteria) Set(val *ReverseCompRedemptionsCriteria) {
	v.value = val
	v.isSet = true
}

func (v NullableReverseCompRedemptionsCriteria) IsSet() bool {
	return v.isSet
}

func (v *NullableReverseCompRedemptionsCriteria) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReverseCompRedemptionsCriteria(val *ReverseCompRedemptionsCriteria) *NullableReverseCompRedemptionsCriteria {
	return &NullableReverseCompRedemptionsCriteria{value: val, isSet: true}
}

func (v NullableReverseCompRedemptionsCriteria) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReverseCompRedemptionsCriteria) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


