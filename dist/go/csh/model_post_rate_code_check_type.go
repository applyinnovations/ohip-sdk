/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the PostRateCodeCheckType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostRateCodeCheckType{}

// PostRateCodeCheckType The response type for Checks done before Posting a Rate Code amount to a reservation.
type PostRateCodeCheckType struct {
	// Indicates that the Products(Packages) which are included in the Rate Code cannot be posted as part of this transaction. This could be the case where the reservation is an Open Folio or has Post Stay.
	CanPostProducts *bool `json:"canPostProducts,omitempty"`
	// Indicates that the Products(Packages) which are included in the Rate Code cannot be reversed as part of this transaction. This could be the case when the reservation has consumed the allowance already and is now trying to reverse the Rate Code by using a negative quantity.
	CanReverseProducts *bool `json:"canReverseProducts,omitempty"`
	// Indicates that the Rate Code has Products(Packages) for the user to determine if they should be posted.
	RateCodeHasProducts *bool `json:"rateCodeHasProducts,omitempty"`
}

// NewPostRateCodeCheckType instantiates a new PostRateCodeCheckType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostRateCodeCheckType() *PostRateCodeCheckType {
	this := PostRateCodeCheckType{}
	return &this
}

// NewPostRateCodeCheckTypeWithDefaults instantiates a new PostRateCodeCheckType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostRateCodeCheckTypeWithDefaults() *PostRateCodeCheckType {
	this := PostRateCodeCheckType{}
	return &this
}

// GetCanPostProducts returns the CanPostProducts field value if set, zero value otherwise.
func (o *PostRateCodeCheckType) GetCanPostProducts() bool {
	if o == nil || IsNil(o.CanPostProducts) {
		var ret bool
		return ret
	}
	return *o.CanPostProducts
}

// GetCanPostProductsOk returns a tuple with the CanPostProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostRateCodeCheckType) GetCanPostProductsOk() (*bool, bool) {
	if o == nil || IsNil(o.CanPostProducts) {
		return nil, false
	}
	return o.CanPostProducts, true
}

// HasCanPostProducts returns a boolean if a field has been set.
func (o *PostRateCodeCheckType) HasCanPostProducts() bool {
	if o != nil && !IsNil(o.CanPostProducts) {
		return true
	}

	return false
}

// SetCanPostProducts gets a reference to the given bool and assigns it to the CanPostProducts field.
func (o *PostRateCodeCheckType) SetCanPostProducts(v bool) {
	o.CanPostProducts = &v
}

// GetCanReverseProducts returns the CanReverseProducts field value if set, zero value otherwise.
func (o *PostRateCodeCheckType) GetCanReverseProducts() bool {
	if o == nil || IsNil(o.CanReverseProducts) {
		var ret bool
		return ret
	}
	return *o.CanReverseProducts
}

// GetCanReverseProductsOk returns a tuple with the CanReverseProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostRateCodeCheckType) GetCanReverseProductsOk() (*bool, bool) {
	if o == nil || IsNil(o.CanReverseProducts) {
		return nil, false
	}
	return o.CanReverseProducts, true
}

// HasCanReverseProducts returns a boolean if a field has been set.
func (o *PostRateCodeCheckType) HasCanReverseProducts() bool {
	if o != nil && !IsNil(o.CanReverseProducts) {
		return true
	}

	return false
}

// SetCanReverseProducts gets a reference to the given bool and assigns it to the CanReverseProducts field.
func (o *PostRateCodeCheckType) SetCanReverseProducts(v bool) {
	o.CanReverseProducts = &v
}

// GetRateCodeHasProducts returns the RateCodeHasProducts field value if set, zero value otherwise.
func (o *PostRateCodeCheckType) GetRateCodeHasProducts() bool {
	if o == nil || IsNil(o.RateCodeHasProducts) {
		var ret bool
		return ret
	}
	return *o.RateCodeHasProducts
}

// GetRateCodeHasProductsOk returns a tuple with the RateCodeHasProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostRateCodeCheckType) GetRateCodeHasProductsOk() (*bool, bool) {
	if o == nil || IsNil(o.RateCodeHasProducts) {
		return nil, false
	}
	return o.RateCodeHasProducts, true
}

// HasRateCodeHasProducts returns a boolean if a field has been set.
func (o *PostRateCodeCheckType) HasRateCodeHasProducts() bool {
	if o != nil && !IsNil(o.RateCodeHasProducts) {
		return true
	}

	return false
}

// SetRateCodeHasProducts gets a reference to the given bool and assigns it to the RateCodeHasProducts field.
func (o *PostRateCodeCheckType) SetRateCodeHasProducts(v bool) {
	o.RateCodeHasProducts = &v
}

func (o PostRateCodeCheckType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostRateCodeCheckType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CanPostProducts) {
		toSerialize["canPostProducts"] = o.CanPostProducts
	}
	if !IsNil(o.CanReverseProducts) {
		toSerialize["canReverseProducts"] = o.CanReverseProducts
	}
	if !IsNil(o.RateCodeHasProducts) {
		toSerialize["rateCodeHasProducts"] = o.RateCodeHasProducts
	}
	return toSerialize, nil
}

type NullablePostRateCodeCheckType struct {
	value *PostRateCodeCheckType
	isSet bool
}

func (v NullablePostRateCodeCheckType) Get() *PostRateCodeCheckType {
	return v.value
}

func (v *NullablePostRateCodeCheckType) Set(val *PostRateCodeCheckType) {
	v.value = val
	v.isSet = true
}

func (v NullablePostRateCodeCheckType) IsSet() bool {
	return v.isSet
}

func (v *NullablePostRateCodeCheckType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostRateCodeCheckType(val *PostRateCodeCheckType) *NullablePostRateCodeCheckType {
	return &NullablePostRateCodeCheckType{value: val, isSet: true}
}

func (v NullablePostRateCodeCheckType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostRateCodeCheckType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


