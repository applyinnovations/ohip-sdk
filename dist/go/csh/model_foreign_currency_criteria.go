/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the ForeignCurrencyCriteria type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForeignCurrencyCriteria{}

// ForeignCurrencyCriteria Operation to calculate foreign currency exchange.
type ForeignCurrencyCriteria struct {
	// A set of currencies that need to be converted.
	Exchange []ExchangeRateCalculationType `json:"exchange,omitempty"`
	// Flag to add exchange commission in order to recalculate payment amount in billing.
	AddExchangeCommission *bool `json:"addExchangeCommission,omitempty"`
	// Flag to include exchange information text in response.
	IncludeExchangeInformation *bool `json:"includeExchangeInformation,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewForeignCurrencyCriteria instantiates a new ForeignCurrencyCriteria object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForeignCurrencyCriteria() *ForeignCurrencyCriteria {
	this := ForeignCurrencyCriteria{}
	return &this
}

// NewForeignCurrencyCriteriaWithDefaults instantiates a new ForeignCurrencyCriteria object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForeignCurrencyCriteriaWithDefaults() *ForeignCurrencyCriteria {
	this := ForeignCurrencyCriteria{}
	return &this
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *ForeignCurrencyCriteria) GetExchange() []ExchangeRateCalculationType {
	if o == nil || IsNil(o.Exchange) {
		var ret []ExchangeRateCalculationType
		return ret
	}
	return o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForeignCurrencyCriteria) GetExchangeOk() ([]ExchangeRateCalculationType, bool) {
	if o == nil || IsNil(o.Exchange) {
		return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *ForeignCurrencyCriteria) HasExchange() bool {
	if o != nil && !IsNil(o.Exchange) {
		return true
	}

	return false
}

// SetExchange gets a reference to the given []ExchangeRateCalculationType and assigns it to the Exchange field.
func (o *ForeignCurrencyCriteria) SetExchange(v []ExchangeRateCalculationType) {
	o.Exchange = v
}

// GetAddExchangeCommission returns the AddExchangeCommission field value if set, zero value otherwise.
func (o *ForeignCurrencyCriteria) GetAddExchangeCommission() bool {
	if o == nil || IsNil(o.AddExchangeCommission) {
		var ret bool
		return ret
	}
	return *o.AddExchangeCommission
}

// GetAddExchangeCommissionOk returns a tuple with the AddExchangeCommission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForeignCurrencyCriteria) GetAddExchangeCommissionOk() (*bool, bool) {
	if o == nil || IsNil(o.AddExchangeCommission) {
		return nil, false
	}
	return o.AddExchangeCommission, true
}

// HasAddExchangeCommission returns a boolean if a field has been set.
func (o *ForeignCurrencyCriteria) HasAddExchangeCommission() bool {
	if o != nil && !IsNil(o.AddExchangeCommission) {
		return true
	}

	return false
}

// SetAddExchangeCommission gets a reference to the given bool and assigns it to the AddExchangeCommission field.
func (o *ForeignCurrencyCriteria) SetAddExchangeCommission(v bool) {
	o.AddExchangeCommission = &v
}

// GetIncludeExchangeInformation returns the IncludeExchangeInformation field value if set, zero value otherwise.
func (o *ForeignCurrencyCriteria) GetIncludeExchangeInformation() bool {
	if o == nil || IsNil(o.IncludeExchangeInformation) {
		var ret bool
		return ret
	}
	return *o.IncludeExchangeInformation
}

// GetIncludeExchangeInformationOk returns a tuple with the IncludeExchangeInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForeignCurrencyCriteria) GetIncludeExchangeInformationOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeExchangeInformation) {
		return nil, false
	}
	return o.IncludeExchangeInformation, true
}

// HasIncludeExchangeInformation returns a boolean if a field has been set.
func (o *ForeignCurrencyCriteria) HasIncludeExchangeInformation() bool {
	if o != nil && !IsNil(o.IncludeExchangeInformation) {
		return true
	}

	return false
}

// SetIncludeExchangeInformation gets a reference to the given bool and assigns it to the IncludeExchangeInformation field.
func (o *ForeignCurrencyCriteria) SetIncludeExchangeInformation(v bool) {
	o.IncludeExchangeInformation = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ForeignCurrencyCriteria) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForeignCurrencyCriteria) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ForeignCurrencyCriteria) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *ForeignCurrencyCriteria) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ForeignCurrencyCriteria) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForeignCurrencyCriteria) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ForeignCurrencyCriteria) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ForeignCurrencyCriteria) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ForeignCurrencyCriteria) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForeignCurrencyCriteria) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Exchange) {
		toSerialize["exchange"] = o.Exchange
	}
	if !IsNil(o.AddExchangeCommission) {
		toSerialize["addExchangeCommission"] = o.AddExchangeCommission
	}
	if !IsNil(o.IncludeExchangeInformation) {
		toSerialize["includeExchangeInformation"] = o.IncludeExchangeInformation
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableForeignCurrencyCriteria struct {
	value *ForeignCurrencyCriteria
	isSet bool
}

func (v NullableForeignCurrencyCriteria) Get() *ForeignCurrencyCriteria {
	return v.value
}

func (v *NullableForeignCurrencyCriteria) Set(val *ForeignCurrencyCriteria) {
	v.value = val
	v.isSet = true
}

func (v NullableForeignCurrencyCriteria) IsSet() bool {
	return v.isSet
}

func (v *NullableForeignCurrencyCriteria) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForeignCurrencyCriteria(val *ForeignCurrencyCriteria) *NullableForeignCurrencyCriteria {
	return &NullableForeignCurrencyCriteria{value: val, isSet: true}
}

func (v NullableForeignCurrencyCriteria) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForeignCurrencyCriteria) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


