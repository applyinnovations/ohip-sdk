/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the CCSurchargeAmountType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CCSurchargeAmountType{}

// CCSurchargeAmountType Information regarding the Surcharge amount which will be applied to a payment.
type CCSurchargeAmountType struct {
	// Property where the payment is being posted.
	HotelId *string `json:"hotelId,omitempty"`
	SurchargeAmount *CurrencyAmountType `json:"surchargeAmount,omitempty"`
	SurchargeInfo *CCSurchargeInfoType `json:"surchargeInfo,omitempty"`
	PaymentMethod *CashieringPaymentMethodType `json:"paymentMethod,omitempty"`
}

// NewCCSurchargeAmountType instantiates a new CCSurchargeAmountType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCCSurchargeAmountType() *CCSurchargeAmountType {
	this := CCSurchargeAmountType{}
	return &this
}

// NewCCSurchargeAmountTypeWithDefaults instantiates a new CCSurchargeAmountType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCCSurchargeAmountTypeWithDefaults() *CCSurchargeAmountType {
	this := CCSurchargeAmountType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CCSurchargeAmountType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CCSurchargeAmountType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CCSurchargeAmountType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CCSurchargeAmountType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetSurchargeAmount returns the SurchargeAmount field value if set, zero value otherwise.
func (o *CCSurchargeAmountType) GetSurchargeAmount() CurrencyAmountType {
	if o == nil || IsNil(o.SurchargeAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.SurchargeAmount
}

// GetSurchargeAmountOk returns a tuple with the SurchargeAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CCSurchargeAmountType) GetSurchargeAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.SurchargeAmount) {
		return nil, false
	}
	return o.SurchargeAmount, true
}

// HasSurchargeAmount returns a boolean if a field has been set.
func (o *CCSurchargeAmountType) HasSurchargeAmount() bool {
	if o != nil && !IsNil(o.SurchargeAmount) {
		return true
	}

	return false
}

// SetSurchargeAmount gets a reference to the given CurrencyAmountType and assigns it to the SurchargeAmount field.
func (o *CCSurchargeAmountType) SetSurchargeAmount(v CurrencyAmountType) {
	o.SurchargeAmount = &v
}

// GetSurchargeInfo returns the SurchargeInfo field value if set, zero value otherwise.
func (o *CCSurchargeAmountType) GetSurchargeInfo() CCSurchargeInfoType {
	if o == nil || IsNil(o.SurchargeInfo) {
		var ret CCSurchargeInfoType
		return ret
	}
	return *o.SurchargeInfo
}

// GetSurchargeInfoOk returns a tuple with the SurchargeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CCSurchargeAmountType) GetSurchargeInfoOk() (*CCSurchargeInfoType, bool) {
	if o == nil || IsNil(o.SurchargeInfo) {
		return nil, false
	}
	return o.SurchargeInfo, true
}

// HasSurchargeInfo returns a boolean if a field has been set.
func (o *CCSurchargeAmountType) HasSurchargeInfo() bool {
	if o != nil && !IsNil(o.SurchargeInfo) {
		return true
	}

	return false
}

// SetSurchargeInfo gets a reference to the given CCSurchargeInfoType and assigns it to the SurchargeInfo field.
func (o *CCSurchargeAmountType) SetSurchargeInfo(v CCSurchargeInfoType) {
	o.SurchargeInfo = &v
}

// GetPaymentMethod returns the PaymentMethod field value if set, zero value otherwise.
func (o *CCSurchargeAmountType) GetPaymentMethod() CashieringPaymentMethodType {
	if o == nil || IsNil(o.PaymentMethod) {
		var ret CashieringPaymentMethodType
		return ret
	}
	return *o.PaymentMethod
}

// GetPaymentMethodOk returns a tuple with the PaymentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CCSurchargeAmountType) GetPaymentMethodOk() (*CashieringPaymentMethodType, bool) {
	if o == nil || IsNil(o.PaymentMethod) {
		return nil, false
	}
	return o.PaymentMethod, true
}

// HasPaymentMethod returns a boolean if a field has been set.
func (o *CCSurchargeAmountType) HasPaymentMethod() bool {
	if o != nil && !IsNil(o.PaymentMethod) {
		return true
	}

	return false
}

// SetPaymentMethod gets a reference to the given CashieringPaymentMethodType and assigns it to the PaymentMethod field.
func (o *CCSurchargeAmountType) SetPaymentMethod(v CashieringPaymentMethodType) {
	o.PaymentMethod = &v
}

func (o CCSurchargeAmountType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CCSurchargeAmountType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.SurchargeAmount) {
		toSerialize["surchargeAmount"] = o.SurchargeAmount
	}
	if !IsNil(o.SurchargeInfo) {
		toSerialize["surchargeInfo"] = o.SurchargeInfo
	}
	if !IsNil(o.PaymentMethod) {
		toSerialize["paymentMethod"] = o.PaymentMethod
	}
	return toSerialize, nil
}

type NullableCCSurchargeAmountType struct {
	value *CCSurchargeAmountType
	isSet bool
}

func (v NullableCCSurchargeAmountType) Get() *CCSurchargeAmountType {
	return v.value
}

func (v *NullableCCSurchargeAmountType) Set(val *CCSurchargeAmountType) {
	v.value = val
	v.isSet = true
}

func (v NullableCCSurchargeAmountType) IsSet() bool {
	return v.isSet
}

func (v *NullableCCSurchargeAmountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCCSurchargeAmountType(val *CCSurchargeAmountType) *NullableCCSurchargeAmountType {
	return &NullableCCSurchargeAmountType{value: val, isSet: true}
}

func (v NullableCCSurchargeAmountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCCSurchargeAmountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


