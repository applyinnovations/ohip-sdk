/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the DepositTransactionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DepositTransactionType{}

// DepositTransactionType Deposit transaction of a reservation.
type DepositTransactionType struct {
	// Property code where the reservation transaction exists.
	HotelId *string `json:"hotelId,omitempty"`
	ReservationId *UniqueIDType `json:"reservationId,omitempty"`
	// The unique transaction number associated with transaction group.
	TransactionNo *float32 `json:"transactionNo,omitempty"`
	SplitAmount *CurrencyAmountType `json:"splitAmount,omitempty"`
	OriginalAmount *CurrencyAmountType `json:"originalAmount,omitempty"`
}

// NewDepositTransactionType instantiates a new DepositTransactionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDepositTransactionType() *DepositTransactionType {
	this := DepositTransactionType{}
	return &this
}

// NewDepositTransactionTypeWithDefaults instantiates a new DepositTransactionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDepositTransactionTypeWithDefaults() *DepositTransactionType {
	this := DepositTransactionType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *DepositTransactionType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepositTransactionType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *DepositTransactionType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *DepositTransactionType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetReservationId returns the ReservationId field value if set, zero value otherwise.
func (o *DepositTransactionType) GetReservationId() UniqueIDType {
	if o == nil || IsNil(o.ReservationId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ReservationId
}

// GetReservationIdOk returns a tuple with the ReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepositTransactionType) GetReservationIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ReservationId) {
		return nil, false
	}
	return o.ReservationId, true
}

// HasReservationId returns a boolean if a field has been set.
func (o *DepositTransactionType) HasReservationId() bool {
	if o != nil && !IsNil(o.ReservationId) {
		return true
	}

	return false
}

// SetReservationId gets a reference to the given UniqueIDType and assigns it to the ReservationId field.
func (o *DepositTransactionType) SetReservationId(v UniqueIDType) {
	o.ReservationId = &v
}

// GetTransactionNo returns the TransactionNo field value if set, zero value otherwise.
func (o *DepositTransactionType) GetTransactionNo() float32 {
	if o == nil || IsNil(o.TransactionNo) {
		var ret float32
		return ret
	}
	return *o.TransactionNo
}

// GetTransactionNoOk returns a tuple with the TransactionNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepositTransactionType) GetTransactionNoOk() (*float32, bool) {
	if o == nil || IsNil(o.TransactionNo) {
		return nil, false
	}
	return o.TransactionNo, true
}

// HasTransactionNo returns a boolean if a field has been set.
func (o *DepositTransactionType) HasTransactionNo() bool {
	if o != nil && !IsNil(o.TransactionNo) {
		return true
	}

	return false
}

// SetTransactionNo gets a reference to the given float32 and assigns it to the TransactionNo field.
func (o *DepositTransactionType) SetTransactionNo(v float32) {
	o.TransactionNo = &v
}

// GetSplitAmount returns the SplitAmount field value if set, zero value otherwise.
func (o *DepositTransactionType) GetSplitAmount() CurrencyAmountType {
	if o == nil || IsNil(o.SplitAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.SplitAmount
}

// GetSplitAmountOk returns a tuple with the SplitAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepositTransactionType) GetSplitAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.SplitAmount) {
		return nil, false
	}
	return o.SplitAmount, true
}

// HasSplitAmount returns a boolean if a field has been set.
func (o *DepositTransactionType) HasSplitAmount() bool {
	if o != nil && !IsNil(o.SplitAmount) {
		return true
	}

	return false
}

// SetSplitAmount gets a reference to the given CurrencyAmountType and assigns it to the SplitAmount field.
func (o *DepositTransactionType) SetSplitAmount(v CurrencyAmountType) {
	o.SplitAmount = &v
}

// GetOriginalAmount returns the OriginalAmount field value if set, zero value otherwise.
func (o *DepositTransactionType) GetOriginalAmount() CurrencyAmountType {
	if o == nil || IsNil(o.OriginalAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.OriginalAmount
}

// GetOriginalAmountOk returns a tuple with the OriginalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepositTransactionType) GetOriginalAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.OriginalAmount) {
		return nil, false
	}
	return o.OriginalAmount, true
}

// HasOriginalAmount returns a boolean if a field has been set.
func (o *DepositTransactionType) HasOriginalAmount() bool {
	if o != nil && !IsNil(o.OriginalAmount) {
		return true
	}

	return false
}

// SetOriginalAmount gets a reference to the given CurrencyAmountType and assigns it to the OriginalAmount field.
func (o *DepositTransactionType) SetOriginalAmount(v CurrencyAmountType) {
	o.OriginalAmount = &v
}

func (o DepositTransactionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DepositTransactionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ReservationId) {
		toSerialize["reservationId"] = o.ReservationId
	}
	if !IsNil(o.TransactionNo) {
		toSerialize["transactionNo"] = o.TransactionNo
	}
	if !IsNil(o.SplitAmount) {
		toSerialize["splitAmount"] = o.SplitAmount
	}
	if !IsNil(o.OriginalAmount) {
		toSerialize["originalAmount"] = o.OriginalAmount
	}
	return toSerialize, nil
}

type NullableDepositTransactionType struct {
	value *DepositTransactionType
	isSet bool
}

func (v NullableDepositTransactionType) Get() *DepositTransactionType {
	return v.value
}

func (v *NullableDepositTransactionType) Set(val *DepositTransactionType) {
	v.value = val
	v.isSet = true
}

func (v NullableDepositTransactionType) IsSet() bool {
	return v.isSet
}

func (v *NullableDepositTransactionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepositTransactionType(val *DepositTransactionType) *NullableDepositTransactionType {
	return &NullableDepositTransactionType{value: val, isSet: true}
}

func (v NullableDepositTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepositTransactionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


