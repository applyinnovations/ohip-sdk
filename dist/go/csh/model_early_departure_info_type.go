/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the EarlyDepartureInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EarlyDepartureInfoType{}

// EarlyDepartureInfoType Information regarding Early Departure for a reservation. Contains information regarding penalty, if any.
type EarlyDepartureInfoType struct {
	PenaltyAmount *CurrencyAmountType `json:"penaltyAmount,omitempty"`
	// Description of the Early Departure Penalty calculation rule.
	PenaltyDescription *string `json:"penaltyDescription,omitempty"`
}

// NewEarlyDepartureInfoType instantiates a new EarlyDepartureInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEarlyDepartureInfoType() *EarlyDepartureInfoType {
	this := EarlyDepartureInfoType{}
	return &this
}

// NewEarlyDepartureInfoTypeWithDefaults instantiates a new EarlyDepartureInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEarlyDepartureInfoTypeWithDefaults() *EarlyDepartureInfoType {
	this := EarlyDepartureInfoType{}
	return &this
}

// GetPenaltyAmount returns the PenaltyAmount field value if set, zero value otherwise.
func (o *EarlyDepartureInfoType) GetPenaltyAmount() CurrencyAmountType {
	if o == nil || IsNil(o.PenaltyAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.PenaltyAmount
}

// GetPenaltyAmountOk returns a tuple with the PenaltyAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarlyDepartureInfoType) GetPenaltyAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.PenaltyAmount) {
		return nil, false
	}
	return o.PenaltyAmount, true
}

// HasPenaltyAmount returns a boolean if a field has been set.
func (o *EarlyDepartureInfoType) HasPenaltyAmount() bool {
	if o != nil && !IsNil(o.PenaltyAmount) {
		return true
	}

	return false
}

// SetPenaltyAmount gets a reference to the given CurrencyAmountType and assigns it to the PenaltyAmount field.
func (o *EarlyDepartureInfoType) SetPenaltyAmount(v CurrencyAmountType) {
	o.PenaltyAmount = &v
}

// GetPenaltyDescription returns the PenaltyDescription field value if set, zero value otherwise.
func (o *EarlyDepartureInfoType) GetPenaltyDescription() string {
	if o == nil || IsNil(o.PenaltyDescription) {
		var ret string
		return ret
	}
	return *o.PenaltyDescription
}

// GetPenaltyDescriptionOk returns a tuple with the PenaltyDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarlyDepartureInfoType) GetPenaltyDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.PenaltyDescription) {
		return nil, false
	}
	return o.PenaltyDescription, true
}

// HasPenaltyDescription returns a boolean if a field has been set.
func (o *EarlyDepartureInfoType) HasPenaltyDescription() bool {
	if o != nil && !IsNil(o.PenaltyDescription) {
		return true
	}

	return false
}

// SetPenaltyDescription gets a reference to the given string and assigns it to the PenaltyDescription field.
func (o *EarlyDepartureInfoType) SetPenaltyDescription(v string) {
	o.PenaltyDescription = &v
}

func (o EarlyDepartureInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EarlyDepartureInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PenaltyAmount) {
		toSerialize["penaltyAmount"] = o.PenaltyAmount
	}
	if !IsNil(o.PenaltyDescription) {
		toSerialize["penaltyDescription"] = o.PenaltyDescription
	}
	return toSerialize, nil
}

type NullableEarlyDepartureInfoType struct {
	value *EarlyDepartureInfoType
	isSet bool
}

func (v NullableEarlyDepartureInfoType) Get() *EarlyDepartureInfoType {
	return v.value
}

func (v *NullableEarlyDepartureInfoType) Set(val *EarlyDepartureInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableEarlyDepartureInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableEarlyDepartureInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEarlyDepartureInfoType(val *EarlyDepartureInfoType) *NullableEarlyDepartureInfoType {
	return &NullableEarlyDepartureInfoType{value: val, isSet: true}
}

func (v NullableEarlyDepartureInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEarlyDepartureInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


