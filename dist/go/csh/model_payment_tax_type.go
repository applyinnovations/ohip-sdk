/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the PaymentTaxType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentTaxType{}

// PaymentTaxType Information regarding payments made which have Payment Tax.
type PaymentTaxType struct {
	Amount *CurrencyAmountType `json:"amount,omitempty"`
	AvailableCredit *CurrencyAmountType `json:"availableCredit,omitempty"`
	FolioWindowNo *int32 `json:"folioWindowNo,omitempty"`
	NonTaxableAmount *CurrencyAmountType `json:"nonTaxableAmount,omitempty"`
	// The Payment Invoice date
	PaymentDate *string `json:"paymentDate,omitempty"`
	PaymentType *PaymentTax `json:"paymentType,omitempty"`
	// The Tax Invoice for this payment.
	TaxInvoiceNo *string `json:"taxInvoiceNo,omitempty"`
	TaxableAmount *CurrencyAmountType `json:"taxableAmount,omitempty"`
	// Billing Transaction Code of the Payment.
	TransactionCode *string `json:"transactionCode,omitempty"`
	// Transaction Date of the Payment.
	TransactionDate *string `json:"transactionDate,omitempty"`
	// Billing Transaction Description.
	TransactionDescription *string `json:"transactionDescription,omitempty"`
	// Unique Transaction Identifier.
	TransactionNo *float32 `json:"transactionNo,omitempty"`
}

// NewPaymentTaxType instantiates a new PaymentTaxType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentTaxType() *PaymentTaxType {
	this := PaymentTaxType{}
	return &this
}

// NewPaymentTaxTypeWithDefaults instantiates a new PaymentTaxType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentTaxTypeWithDefaults() *PaymentTaxType {
	this := PaymentTaxType{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *PaymentTaxType) GetAmount() CurrencyAmountType {
	if o == nil || IsNil(o.Amount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTaxType) GetAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *PaymentTaxType) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given CurrencyAmountType and assigns it to the Amount field.
func (o *PaymentTaxType) SetAmount(v CurrencyAmountType) {
	o.Amount = &v
}

// GetAvailableCredit returns the AvailableCredit field value if set, zero value otherwise.
func (o *PaymentTaxType) GetAvailableCredit() CurrencyAmountType {
	if o == nil || IsNil(o.AvailableCredit) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.AvailableCredit
}

// GetAvailableCreditOk returns a tuple with the AvailableCredit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTaxType) GetAvailableCreditOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.AvailableCredit) {
		return nil, false
	}
	return o.AvailableCredit, true
}

// HasAvailableCredit returns a boolean if a field has been set.
func (o *PaymentTaxType) HasAvailableCredit() bool {
	if o != nil && !IsNil(o.AvailableCredit) {
		return true
	}

	return false
}

// SetAvailableCredit gets a reference to the given CurrencyAmountType and assigns it to the AvailableCredit field.
func (o *PaymentTaxType) SetAvailableCredit(v CurrencyAmountType) {
	o.AvailableCredit = &v
}

// GetFolioWindowNo returns the FolioWindowNo field value if set, zero value otherwise.
func (o *PaymentTaxType) GetFolioWindowNo() int32 {
	if o == nil || IsNil(o.FolioWindowNo) {
		var ret int32
		return ret
	}
	return *o.FolioWindowNo
}

// GetFolioWindowNoOk returns a tuple with the FolioWindowNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTaxType) GetFolioWindowNoOk() (*int32, bool) {
	if o == nil || IsNil(o.FolioWindowNo) {
		return nil, false
	}
	return o.FolioWindowNo, true
}

// HasFolioWindowNo returns a boolean if a field has been set.
func (o *PaymentTaxType) HasFolioWindowNo() bool {
	if o != nil && !IsNil(o.FolioWindowNo) {
		return true
	}

	return false
}

// SetFolioWindowNo gets a reference to the given int32 and assigns it to the FolioWindowNo field.
func (o *PaymentTaxType) SetFolioWindowNo(v int32) {
	o.FolioWindowNo = &v
}

// GetNonTaxableAmount returns the NonTaxableAmount field value if set, zero value otherwise.
func (o *PaymentTaxType) GetNonTaxableAmount() CurrencyAmountType {
	if o == nil || IsNil(o.NonTaxableAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.NonTaxableAmount
}

// GetNonTaxableAmountOk returns a tuple with the NonTaxableAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTaxType) GetNonTaxableAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.NonTaxableAmount) {
		return nil, false
	}
	return o.NonTaxableAmount, true
}

// HasNonTaxableAmount returns a boolean if a field has been set.
func (o *PaymentTaxType) HasNonTaxableAmount() bool {
	if o != nil && !IsNil(o.NonTaxableAmount) {
		return true
	}

	return false
}

// SetNonTaxableAmount gets a reference to the given CurrencyAmountType and assigns it to the NonTaxableAmount field.
func (o *PaymentTaxType) SetNonTaxableAmount(v CurrencyAmountType) {
	o.NonTaxableAmount = &v
}

// GetPaymentDate returns the PaymentDate field value if set, zero value otherwise.
func (o *PaymentTaxType) GetPaymentDate() string {
	if o == nil || IsNil(o.PaymentDate) {
		var ret string
		return ret
	}
	return *o.PaymentDate
}

// GetPaymentDateOk returns a tuple with the PaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTaxType) GetPaymentDateOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentDate) {
		return nil, false
	}
	return o.PaymentDate, true
}

// HasPaymentDate returns a boolean if a field has been set.
func (o *PaymentTaxType) HasPaymentDate() bool {
	if o != nil && !IsNil(o.PaymentDate) {
		return true
	}

	return false
}

// SetPaymentDate gets a reference to the given string and assigns it to the PaymentDate field.
func (o *PaymentTaxType) SetPaymentDate(v string) {
	o.PaymentDate = &v
}

// GetPaymentType returns the PaymentType field value if set, zero value otherwise.
func (o *PaymentTaxType) GetPaymentType() PaymentTax {
	if o == nil || IsNil(o.PaymentType) {
		var ret PaymentTax
		return ret
	}
	return *o.PaymentType
}

// GetPaymentTypeOk returns a tuple with the PaymentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTaxType) GetPaymentTypeOk() (*PaymentTax, bool) {
	if o == nil || IsNil(o.PaymentType) {
		return nil, false
	}
	return o.PaymentType, true
}

// HasPaymentType returns a boolean if a field has been set.
func (o *PaymentTaxType) HasPaymentType() bool {
	if o != nil && !IsNil(o.PaymentType) {
		return true
	}

	return false
}

// SetPaymentType gets a reference to the given PaymentTax and assigns it to the PaymentType field.
func (o *PaymentTaxType) SetPaymentType(v PaymentTax) {
	o.PaymentType = &v
}

// GetTaxInvoiceNo returns the TaxInvoiceNo field value if set, zero value otherwise.
func (o *PaymentTaxType) GetTaxInvoiceNo() string {
	if o == nil || IsNil(o.TaxInvoiceNo) {
		var ret string
		return ret
	}
	return *o.TaxInvoiceNo
}

// GetTaxInvoiceNoOk returns a tuple with the TaxInvoiceNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTaxType) GetTaxInvoiceNoOk() (*string, bool) {
	if o == nil || IsNil(o.TaxInvoiceNo) {
		return nil, false
	}
	return o.TaxInvoiceNo, true
}

// HasTaxInvoiceNo returns a boolean if a field has been set.
func (o *PaymentTaxType) HasTaxInvoiceNo() bool {
	if o != nil && !IsNil(o.TaxInvoiceNo) {
		return true
	}

	return false
}

// SetTaxInvoiceNo gets a reference to the given string and assigns it to the TaxInvoiceNo field.
func (o *PaymentTaxType) SetTaxInvoiceNo(v string) {
	o.TaxInvoiceNo = &v
}

// GetTaxableAmount returns the TaxableAmount field value if set, zero value otherwise.
func (o *PaymentTaxType) GetTaxableAmount() CurrencyAmountType {
	if o == nil || IsNil(o.TaxableAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.TaxableAmount
}

// GetTaxableAmountOk returns a tuple with the TaxableAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTaxType) GetTaxableAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.TaxableAmount) {
		return nil, false
	}
	return o.TaxableAmount, true
}

// HasTaxableAmount returns a boolean if a field has been set.
func (o *PaymentTaxType) HasTaxableAmount() bool {
	if o != nil && !IsNil(o.TaxableAmount) {
		return true
	}

	return false
}

// SetTaxableAmount gets a reference to the given CurrencyAmountType and assigns it to the TaxableAmount field.
func (o *PaymentTaxType) SetTaxableAmount(v CurrencyAmountType) {
	o.TaxableAmount = &v
}

// GetTransactionCode returns the TransactionCode field value if set, zero value otherwise.
func (o *PaymentTaxType) GetTransactionCode() string {
	if o == nil || IsNil(o.TransactionCode) {
		var ret string
		return ret
	}
	return *o.TransactionCode
}

// GetTransactionCodeOk returns a tuple with the TransactionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTaxType) GetTransactionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionCode) {
		return nil, false
	}
	return o.TransactionCode, true
}

// HasTransactionCode returns a boolean if a field has been set.
func (o *PaymentTaxType) HasTransactionCode() bool {
	if o != nil && !IsNil(o.TransactionCode) {
		return true
	}

	return false
}

// SetTransactionCode gets a reference to the given string and assigns it to the TransactionCode field.
func (o *PaymentTaxType) SetTransactionCode(v string) {
	o.TransactionCode = &v
}

// GetTransactionDate returns the TransactionDate field value if set, zero value otherwise.
func (o *PaymentTaxType) GetTransactionDate() string {
	if o == nil || IsNil(o.TransactionDate) {
		var ret string
		return ret
	}
	return *o.TransactionDate
}

// GetTransactionDateOk returns a tuple with the TransactionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTaxType) GetTransactionDateOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionDate) {
		return nil, false
	}
	return o.TransactionDate, true
}

// HasTransactionDate returns a boolean if a field has been set.
func (o *PaymentTaxType) HasTransactionDate() bool {
	if o != nil && !IsNil(o.TransactionDate) {
		return true
	}

	return false
}

// SetTransactionDate gets a reference to the given string and assigns it to the TransactionDate field.
func (o *PaymentTaxType) SetTransactionDate(v string) {
	o.TransactionDate = &v
}

// GetTransactionDescription returns the TransactionDescription field value if set, zero value otherwise.
func (o *PaymentTaxType) GetTransactionDescription() string {
	if o == nil || IsNil(o.TransactionDescription) {
		var ret string
		return ret
	}
	return *o.TransactionDescription
}

// GetTransactionDescriptionOk returns a tuple with the TransactionDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTaxType) GetTransactionDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionDescription) {
		return nil, false
	}
	return o.TransactionDescription, true
}

// HasTransactionDescription returns a boolean if a field has been set.
func (o *PaymentTaxType) HasTransactionDescription() bool {
	if o != nil && !IsNil(o.TransactionDescription) {
		return true
	}

	return false
}

// SetTransactionDescription gets a reference to the given string and assigns it to the TransactionDescription field.
func (o *PaymentTaxType) SetTransactionDescription(v string) {
	o.TransactionDescription = &v
}

// GetTransactionNo returns the TransactionNo field value if set, zero value otherwise.
func (o *PaymentTaxType) GetTransactionNo() float32 {
	if o == nil || IsNil(o.TransactionNo) {
		var ret float32
		return ret
	}
	return *o.TransactionNo
}

// GetTransactionNoOk returns a tuple with the TransactionNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTaxType) GetTransactionNoOk() (*float32, bool) {
	if o == nil || IsNil(o.TransactionNo) {
		return nil, false
	}
	return o.TransactionNo, true
}

// HasTransactionNo returns a boolean if a field has been set.
func (o *PaymentTaxType) HasTransactionNo() bool {
	if o != nil && !IsNil(o.TransactionNo) {
		return true
	}

	return false
}

// SetTransactionNo gets a reference to the given float32 and assigns it to the TransactionNo field.
func (o *PaymentTaxType) SetTransactionNo(v float32) {
	o.TransactionNo = &v
}

func (o PaymentTaxType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentTaxType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.AvailableCredit) {
		toSerialize["availableCredit"] = o.AvailableCredit
	}
	if !IsNil(o.FolioWindowNo) {
		toSerialize["folioWindowNo"] = o.FolioWindowNo
	}
	if !IsNil(o.NonTaxableAmount) {
		toSerialize["nonTaxableAmount"] = o.NonTaxableAmount
	}
	if !IsNil(o.PaymentDate) {
		toSerialize["paymentDate"] = o.PaymentDate
	}
	if !IsNil(o.PaymentType) {
		toSerialize["paymentType"] = o.PaymentType
	}
	if !IsNil(o.TaxInvoiceNo) {
		toSerialize["taxInvoiceNo"] = o.TaxInvoiceNo
	}
	if !IsNil(o.TaxableAmount) {
		toSerialize["taxableAmount"] = o.TaxableAmount
	}
	if !IsNil(o.TransactionCode) {
		toSerialize["transactionCode"] = o.TransactionCode
	}
	if !IsNil(o.TransactionDate) {
		toSerialize["transactionDate"] = o.TransactionDate
	}
	if !IsNil(o.TransactionDescription) {
		toSerialize["transactionDescription"] = o.TransactionDescription
	}
	if !IsNil(o.TransactionNo) {
		toSerialize["transactionNo"] = o.TransactionNo
	}
	return toSerialize, nil
}

type NullablePaymentTaxType struct {
	value *PaymentTaxType
	isSet bool
}

func (v NullablePaymentTaxType) Get() *PaymentTaxType {
	return v.value
}

func (v *NullablePaymentTaxType) Set(val *PaymentTaxType) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentTaxType) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentTaxType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentTaxType(val *PaymentTaxType) *NullablePaymentTaxType {
	return &NullablePaymentTaxType{value: val, isSet: true}
}

func (v NullablePaymentTaxType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentTaxType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


