/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the GamingRequestStatusType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GamingRequestStatusType{}

// GamingRequestStatusType Type that holds guest request status details.
type GamingRequestStatusType struct {
	// Hotel code corresponding to the transaction.
	HotelId *string `json:"hotelId,omitempty"`
	// Status code from the External System..
	StatusCode *string `json:"statusCode,omitempty"`
	// Status of the request.
	Status *string `json:"status,omitempty"`
	// Message Id from the External System.
	MessageId *int32 `json:"messageId,omitempty"`
	// Message sent from the External System regarding the status of this request.
	MessageText *string `json:"messageText,omitempty"`
	// Date the request was sent.
	RequestDate *string `json:"requestDate,omitempty"`
}

// NewGamingRequestStatusType instantiates a new GamingRequestStatusType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGamingRequestStatusType() *GamingRequestStatusType {
	this := GamingRequestStatusType{}
	return &this
}

// NewGamingRequestStatusTypeWithDefaults instantiates a new GamingRequestStatusType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGamingRequestStatusTypeWithDefaults() *GamingRequestStatusType {
	this := GamingRequestStatusType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *GamingRequestStatusType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GamingRequestStatusType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *GamingRequestStatusType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *GamingRequestStatusType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *GamingRequestStatusType) GetStatusCode() string {
	if o == nil || IsNil(o.StatusCode) {
		var ret string
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GamingRequestStatusType) GetStatusCodeOk() (*string, bool) {
	if o == nil || IsNil(o.StatusCode) {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *GamingRequestStatusType) HasStatusCode() bool {
	if o != nil && !IsNil(o.StatusCode) {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given string and assigns it to the StatusCode field.
func (o *GamingRequestStatusType) SetStatusCode(v string) {
	o.StatusCode = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *GamingRequestStatusType) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GamingRequestStatusType) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *GamingRequestStatusType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *GamingRequestStatusType) SetStatus(v string) {
	o.Status = &v
}

// GetMessageId returns the MessageId field value if set, zero value otherwise.
func (o *GamingRequestStatusType) GetMessageId() int32 {
	if o == nil || IsNil(o.MessageId) {
		var ret int32
		return ret
	}
	return *o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GamingRequestStatusType) GetMessageIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MessageId) {
		return nil, false
	}
	return o.MessageId, true
}

// HasMessageId returns a boolean if a field has been set.
func (o *GamingRequestStatusType) HasMessageId() bool {
	if o != nil && !IsNil(o.MessageId) {
		return true
	}

	return false
}

// SetMessageId gets a reference to the given int32 and assigns it to the MessageId field.
func (o *GamingRequestStatusType) SetMessageId(v int32) {
	o.MessageId = &v
}

// GetMessageText returns the MessageText field value if set, zero value otherwise.
func (o *GamingRequestStatusType) GetMessageText() string {
	if o == nil || IsNil(o.MessageText) {
		var ret string
		return ret
	}
	return *o.MessageText
}

// GetMessageTextOk returns a tuple with the MessageText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GamingRequestStatusType) GetMessageTextOk() (*string, bool) {
	if o == nil || IsNil(o.MessageText) {
		return nil, false
	}
	return o.MessageText, true
}

// HasMessageText returns a boolean if a field has been set.
func (o *GamingRequestStatusType) HasMessageText() bool {
	if o != nil && !IsNil(o.MessageText) {
		return true
	}

	return false
}

// SetMessageText gets a reference to the given string and assigns it to the MessageText field.
func (o *GamingRequestStatusType) SetMessageText(v string) {
	o.MessageText = &v
}

// GetRequestDate returns the RequestDate field value if set, zero value otherwise.
func (o *GamingRequestStatusType) GetRequestDate() string {
	if o == nil || IsNil(o.RequestDate) {
		var ret string
		return ret
	}
	return *o.RequestDate
}

// GetRequestDateOk returns a tuple with the RequestDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GamingRequestStatusType) GetRequestDateOk() (*string, bool) {
	if o == nil || IsNil(o.RequestDate) {
		return nil, false
	}
	return o.RequestDate, true
}

// HasRequestDate returns a boolean if a field has been set.
func (o *GamingRequestStatusType) HasRequestDate() bool {
	if o != nil && !IsNil(o.RequestDate) {
		return true
	}

	return false
}

// SetRequestDate gets a reference to the given string and assigns it to the RequestDate field.
func (o *GamingRequestStatusType) SetRequestDate(v string) {
	o.RequestDate = &v
}

func (o GamingRequestStatusType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GamingRequestStatusType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.StatusCode) {
		toSerialize["statusCode"] = o.StatusCode
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.MessageId) {
		toSerialize["messageId"] = o.MessageId
	}
	if !IsNil(o.MessageText) {
		toSerialize["messageText"] = o.MessageText
	}
	if !IsNil(o.RequestDate) {
		toSerialize["requestDate"] = o.RequestDate
	}
	return toSerialize, nil
}

type NullableGamingRequestStatusType struct {
	value *GamingRequestStatusType
	isSet bool
}

func (v NullableGamingRequestStatusType) Get() *GamingRequestStatusType {
	return v.value
}

func (v *NullableGamingRequestStatusType) Set(val *GamingRequestStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableGamingRequestStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableGamingRequestStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGamingRequestStatusType(val *GamingRequestStatusType) *NullableGamingRequestStatusType {
	return &NullableGamingRequestStatusType{value: val, isSet: true}
}

func (v NullableGamingRequestStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGamingRequestStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


