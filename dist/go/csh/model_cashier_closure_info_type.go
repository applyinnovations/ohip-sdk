/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the CashierClosureInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CashierClosureInfoType{}

// CashierClosureInfoType Cashier closure Information.
type CashierClosureInfoType struct {
	CashierClosureNo *CashierClosureNoType `json:"cashierClosureNo,omitempty"`
	// Cashier title of the cashier.
	CashierTitle *string `json:"cashierTitle,omitempty"`
	// Cashier user name.
	CashierUser *string `json:"cashierUser,omitempty"`
	// Date and time cashier was closed.
	CloseDate *string `json:"closeDate,omitempty"`
	// Business date cashier was closed.
	ClosureBusinessDate *string `json:"closureBusinessDate,omitempty"`
	// Property this record belongs to.
	HotelId *string `json:"hotelId,omitempty"`
	// Date and time cashier was opened.
	OpenDate *string `json:"openDate,omitempty"`
	// Information of the Cashier.
	ReportsList []CashierReportType `json:"reportsList,omitempty"`
}

// NewCashierClosureInfoType instantiates a new CashierClosureInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCashierClosureInfoType() *CashierClosureInfoType {
	this := CashierClosureInfoType{}
	return &this
}

// NewCashierClosureInfoTypeWithDefaults instantiates a new CashierClosureInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCashierClosureInfoTypeWithDefaults() *CashierClosureInfoType {
	this := CashierClosureInfoType{}
	return &this
}

// GetCashierClosureNo returns the CashierClosureNo field value if set, zero value otherwise.
func (o *CashierClosureInfoType) GetCashierClosureNo() CashierClosureNoType {
	if o == nil || IsNil(o.CashierClosureNo) {
		var ret CashierClosureNoType
		return ret
	}
	return *o.CashierClosureNo
}

// GetCashierClosureNoOk returns a tuple with the CashierClosureNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierClosureInfoType) GetCashierClosureNoOk() (*CashierClosureNoType, bool) {
	if o == nil || IsNil(o.CashierClosureNo) {
		return nil, false
	}
	return o.CashierClosureNo, true
}

// HasCashierClosureNo returns a boolean if a field has been set.
func (o *CashierClosureInfoType) HasCashierClosureNo() bool {
	if o != nil && !IsNil(o.CashierClosureNo) {
		return true
	}

	return false
}

// SetCashierClosureNo gets a reference to the given CashierClosureNoType and assigns it to the CashierClosureNo field.
func (o *CashierClosureInfoType) SetCashierClosureNo(v CashierClosureNoType) {
	o.CashierClosureNo = &v
}

// GetCashierTitle returns the CashierTitle field value if set, zero value otherwise.
func (o *CashierClosureInfoType) GetCashierTitle() string {
	if o == nil || IsNil(o.CashierTitle) {
		var ret string
		return ret
	}
	return *o.CashierTitle
}

// GetCashierTitleOk returns a tuple with the CashierTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierClosureInfoType) GetCashierTitleOk() (*string, bool) {
	if o == nil || IsNil(o.CashierTitle) {
		return nil, false
	}
	return o.CashierTitle, true
}

// HasCashierTitle returns a boolean if a field has been set.
func (o *CashierClosureInfoType) HasCashierTitle() bool {
	if o != nil && !IsNil(o.CashierTitle) {
		return true
	}

	return false
}

// SetCashierTitle gets a reference to the given string and assigns it to the CashierTitle field.
func (o *CashierClosureInfoType) SetCashierTitle(v string) {
	o.CashierTitle = &v
}

// GetCashierUser returns the CashierUser field value if set, zero value otherwise.
func (o *CashierClosureInfoType) GetCashierUser() string {
	if o == nil || IsNil(o.CashierUser) {
		var ret string
		return ret
	}
	return *o.CashierUser
}

// GetCashierUserOk returns a tuple with the CashierUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierClosureInfoType) GetCashierUserOk() (*string, bool) {
	if o == nil || IsNil(o.CashierUser) {
		return nil, false
	}
	return o.CashierUser, true
}

// HasCashierUser returns a boolean if a field has been set.
func (o *CashierClosureInfoType) HasCashierUser() bool {
	if o != nil && !IsNil(o.CashierUser) {
		return true
	}

	return false
}

// SetCashierUser gets a reference to the given string and assigns it to the CashierUser field.
func (o *CashierClosureInfoType) SetCashierUser(v string) {
	o.CashierUser = &v
}

// GetCloseDate returns the CloseDate field value if set, zero value otherwise.
func (o *CashierClosureInfoType) GetCloseDate() string {
	if o == nil || IsNil(o.CloseDate) {
		var ret string
		return ret
	}
	return *o.CloseDate
}

// GetCloseDateOk returns a tuple with the CloseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierClosureInfoType) GetCloseDateOk() (*string, bool) {
	if o == nil || IsNil(o.CloseDate) {
		return nil, false
	}
	return o.CloseDate, true
}

// HasCloseDate returns a boolean if a field has been set.
func (o *CashierClosureInfoType) HasCloseDate() bool {
	if o != nil && !IsNil(o.CloseDate) {
		return true
	}

	return false
}

// SetCloseDate gets a reference to the given string and assigns it to the CloseDate field.
func (o *CashierClosureInfoType) SetCloseDate(v string) {
	o.CloseDate = &v
}

// GetClosureBusinessDate returns the ClosureBusinessDate field value if set, zero value otherwise.
func (o *CashierClosureInfoType) GetClosureBusinessDate() string {
	if o == nil || IsNil(o.ClosureBusinessDate) {
		var ret string
		return ret
	}
	return *o.ClosureBusinessDate
}

// GetClosureBusinessDateOk returns a tuple with the ClosureBusinessDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierClosureInfoType) GetClosureBusinessDateOk() (*string, bool) {
	if o == nil || IsNil(o.ClosureBusinessDate) {
		return nil, false
	}
	return o.ClosureBusinessDate, true
}

// HasClosureBusinessDate returns a boolean if a field has been set.
func (o *CashierClosureInfoType) HasClosureBusinessDate() bool {
	if o != nil && !IsNil(o.ClosureBusinessDate) {
		return true
	}

	return false
}

// SetClosureBusinessDate gets a reference to the given string and assigns it to the ClosureBusinessDate field.
func (o *CashierClosureInfoType) SetClosureBusinessDate(v string) {
	o.ClosureBusinessDate = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CashierClosureInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierClosureInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CashierClosureInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CashierClosureInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetOpenDate returns the OpenDate field value if set, zero value otherwise.
func (o *CashierClosureInfoType) GetOpenDate() string {
	if o == nil || IsNil(o.OpenDate) {
		var ret string
		return ret
	}
	return *o.OpenDate
}

// GetOpenDateOk returns a tuple with the OpenDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierClosureInfoType) GetOpenDateOk() (*string, bool) {
	if o == nil || IsNil(o.OpenDate) {
		return nil, false
	}
	return o.OpenDate, true
}

// HasOpenDate returns a boolean if a field has been set.
func (o *CashierClosureInfoType) HasOpenDate() bool {
	if o != nil && !IsNil(o.OpenDate) {
		return true
	}

	return false
}

// SetOpenDate gets a reference to the given string and assigns it to the OpenDate field.
func (o *CashierClosureInfoType) SetOpenDate(v string) {
	o.OpenDate = &v
}

// GetReportsList returns the ReportsList field value if set, zero value otherwise.
func (o *CashierClosureInfoType) GetReportsList() []CashierReportType {
	if o == nil || IsNil(o.ReportsList) {
		var ret []CashierReportType
		return ret
	}
	return o.ReportsList
}

// GetReportsListOk returns a tuple with the ReportsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierClosureInfoType) GetReportsListOk() ([]CashierReportType, bool) {
	if o == nil || IsNil(o.ReportsList) {
		return nil, false
	}
	return o.ReportsList, true
}

// HasReportsList returns a boolean if a field has been set.
func (o *CashierClosureInfoType) HasReportsList() bool {
	if o != nil && !IsNil(o.ReportsList) {
		return true
	}

	return false
}

// SetReportsList gets a reference to the given []CashierReportType and assigns it to the ReportsList field.
func (o *CashierClosureInfoType) SetReportsList(v []CashierReportType) {
	o.ReportsList = v
}

func (o CashierClosureInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CashierClosureInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CashierClosureNo) {
		toSerialize["cashierClosureNo"] = o.CashierClosureNo
	}
	if !IsNil(o.CashierTitle) {
		toSerialize["cashierTitle"] = o.CashierTitle
	}
	if !IsNil(o.CashierUser) {
		toSerialize["cashierUser"] = o.CashierUser
	}
	if !IsNil(o.CloseDate) {
		toSerialize["closeDate"] = o.CloseDate
	}
	if !IsNil(o.ClosureBusinessDate) {
		toSerialize["closureBusinessDate"] = o.ClosureBusinessDate
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.OpenDate) {
		toSerialize["openDate"] = o.OpenDate
	}
	if !IsNil(o.ReportsList) {
		toSerialize["reportsList"] = o.ReportsList
	}
	return toSerialize, nil
}

type NullableCashierClosureInfoType struct {
	value *CashierClosureInfoType
	isSet bool
}

func (v NullableCashierClosureInfoType) Get() *CashierClosureInfoType {
	return v.value
}

func (v *NullableCashierClosureInfoType) Set(val *CashierClosureInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableCashierClosureInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableCashierClosureInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashierClosureInfoType(val *CashierClosureInfoType) *NullableCashierClosureInfoType {
	return &NullableCashierClosureInfoType{value: val, isSet: true}
}

func (v NullableCashierClosureInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashierClosureInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


