/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the CCSurchargeInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CCSurchargeInfoType{}

// CCSurchargeInfoType Credit Card Surcharge Information type. Information regarding surcharge which can be applied to a Credit Card payment.
type CCSurchargeInfoType struct {
	// The percentage on the payment amount which will be the Surcharge.
	Percentage *float32 `json:"percentage,omitempty"`
	Threshold *CurrencyAmountType `json:"threshold,omitempty"`
	// The Payment Transaction Code for which the Surcharge Applies.
	TransactionCode *string `json:"transactionCode,omitempty"`
}

// NewCCSurchargeInfoType instantiates a new CCSurchargeInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCCSurchargeInfoType() *CCSurchargeInfoType {
	this := CCSurchargeInfoType{}
	return &this
}

// NewCCSurchargeInfoTypeWithDefaults instantiates a new CCSurchargeInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCCSurchargeInfoTypeWithDefaults() *CCSurchargeInfoType {
	this := CCSurchargeInfoType{}
	return &this
}

// GetPercentage returns the Percentage field value if set, zero value otherwise.
func (o *CCSurchargeInfoType) GetPercentage() float32 {
	if o == nil || IsNil(o.Percentage) {
		var ret float32
		return ret
	}
	return *o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CCSurchargeInfoType) GetPercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.Percentage) {
		return nil, false
	}
	return o.Percentage, true
}

// HasPercentage returns a boolean if a field has been set.
func (o *CCSurchargeInfoType) HasPercentage() bool {
	if o != nil && !IsNil(o.Percentage) {
		return true
	}

	return false
}

// SetPercentage gets a reference to the given float32 and assigns it to the Percentage field.
func (o *CCSurchargeInfoType) SetPercentage(v float32) {
	o.Percentage = &v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *CCSurchargeInfoType) GetThreshold() CurrencyAmountType {
	if o == nil || IsNil(o.Threshold) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CCSurchargeInfoType) GetThresholdOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *CCSurchargeInfoType) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given CurrencyAmountType and assigns it to the Threshold field.
func (o *CCSurchargeInfoType) SetThreshold(v CurrencyAmountType) {
	o.Threshold = &v
}

// GetTransactionCode returns the TransactionCode field value if set, zero value otherwise.
func (o *CCSurchargeInfoType) GetTransactionCode() string {
	if o == nil || IsNil(o.TransactionCode) {
		var ret string
		return ret
	}
	return *o.TransactionCode
}

// GetTransactionCodeOk returns a tuple with the TransactionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CCSurchargeInfoType) GetTransactionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionCode) {
		return nil, false
	}
	return o.TransactionCode, true
}

// HasTransactionCode returns a boolean if a field has been set.
func (o *CCSurchargeInfoType) HasTransactionCode() bool {
	if o != nil && !IsNil(o.TransactionCode) {
		return true
	}

	return false
}

// SetTransactionCode gets a reference to the given string and assigns it to the TransactionCode field.
func (o *CCSurchargeInfoType) SetTransactionCode(v string) {
	o.TransactionCode = &v
}

func (o CCSurchargeInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CCSurchargeInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Percentage) {
		toSerialize["percentage"] = o.Percentage
	}
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	if !IsNil(o.TransactionCode) {
		toSerialize["transactionCode"] = o.TransactionCode
	}
	return toSerialize, nil
}

type NullableCCSurchargeInfoType struct {
	value *CCSurchargeInfoType
	isSet bool
}

func (v NullableCCSurchargeInfoType) Get() *CCSurchargeInfoType {
	return v.value
}

func (v *NullableCCSurchargeInfoType) Set(val *CCSurchargeInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableCCSurchargeInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableCCSurchargeInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCCSurchargeInfoType(val *CCSurchargeInfoType) *NullableCCSurchargeInfoType {
	return &NullableCCSurchargeInfoType{value: val, isSet: true}
}

func (v NullableCCSurchargeInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCCSurchargeInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


