/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the AuthorizationHistoryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizationHistoryType{}

// AuthorizationHistoryType Information on a single credit card authorization transaction.
type AuthorizationHistoryType struct {
	// The corresponding business date for this record.
	BusinessDate *string `json:"businessDate,omitempty"`
	TransactionType *CardAuthorizationTransactionType `json:"transactionType,omitempty"`
	ApprovalAmount *CurrencyAmountType `json:"approvalAmount,omitempty"`
	CardPaymentInformation *AuthorizationHistoryTypeCardPaymentInformation `json:"cardPaymentInformation,omitempty"`
	Status *AuthorizationHistoryTypeStatus `json:"status,omitempty"`
	// Time stamp of the creation.
	CreateDateTime *string `json:"createDateTime,omitempty"`
	// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
	CreatorId *string `json:"creatorId,omitempty"`
	// Time stamp of last modification.
	LastModifyDateTime *string `json:"lastModifyDateTime,omitempty"`
	// Identifies the last software system or person to modify a record.
	LastModifierId *string `json:"lastModifierId,omitempty"`
	// Date an item will be purged from a database (e.g., from a live database to an archive).
	PurgeDate *string `json:"purgeDate,omitempty"`
	// History type can only be either Settlement or Authorization or Payment or Refunds.
	Type *string `json:"type,omitempty"`
}

// NewAuthorizationHistoryType instantiates a new AuthorizationHistoryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizationHistoryType() *AuthorizationHistoryType {
	this := AuthorizationHistoryType{}
	return &this
}

// NewAuthorizationHistoryTypeWithDefaults instantiates a new AuthorizationHistoryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizationHistoryTypeWithDefaults() *AuthorizationHistoryType {
	this := AuthorizationHistoryType{}
	return &this
}

// GetBusinessDate returns the BusinessDate field value if set, zero value otherwise.
func (o *AuthorizationHistoryType) GetBusinessDate() string {
	if o == nil || IsNil(o.BusinessDate) {
		var ret string
		return ret
	}
	return *o.BusinessDate
}

// GetBusinessDateOk returns a tuple with the BusinessDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationHistoryType) GetBusinessDateOk() (*string, bool) {
	if o == nil || IsNil(o.BusinessDate) {
		return nil, false
	}
	return o.BusinessDate, true
}

// HasBusinessDate returns a boolean if a field has been set.
func (o *AuthorizationHistoryType) HasBusinessDate() bool {
	if o != nil && !IsNil(o.BusinessDate) {
		return true
	}

	return false
}

// SetBusinessDate gets a reference to the given string and assigns it to the BusinessDate field.
func (o *AuthorizationHistoryType) SetBusinessDate(v string) {
	o.BusinessDate = &v
}

// GetTransactionType returns the TransactionType field value if set, zero value otherwise.
func (o *AuthorizationHistoryType) GetTransactionType() CardAuthorizationTransactionType {
	if o == nil || IsNil(o.TransactionType) {
		var ret CardAuthorizationTransactionType
		return ret
	}
	return *o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationHistoryType) GetTransactionTypeOk() (*CardAuthorizationTransactionType, bool) {
	if o == nil || IsNil(o.TransactionType) {
		return nil, false
	}
	return o.TransactionType, true
}

// HasTransactionType returns a boolean if a field has been set.
func (o *AuthorizationHistoryType) HasTransactionType() bool {
	if o != nil && !IsNil(o.TransactionType) {
		return true
	}

	return false
}

// SetTransactionType gets a reference to the given CardAuthorizationTransactionType and assigns it to the TransactionType field.
func (o *AuthorizationHistoryType) SetTransactionType(v CardAuthorizationTransactionType) {
	o.TransactionType = &v
}

// GetApprovalAmount returns the ApprovalAmount field value if set, zero value otherwise.
func (o *AuthorizationHistoryType) GetApprovalAmount() CurrencyAmountType {
	if o == nil || IsNil(o.ApprovalAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.ApprovalAmount
}

// GetApprovalAmountOk returns a tuple with the ApprovalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationHistoryType) GetApprovalAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.ApprovalAmount) {
		return nil, false
	}
	return o.ApprovalAmount, true
}

// HasApprovalAmount returns a boolean if a field has been set.
func (o *AuthorizationHistoryType) HasApprovalAmount() bool {
	if o != nil && !IsNil(o.ApprovalAmount) {
		return true
	}

	return false
}

// SetApprovalAmount gets a reference to the given CurrencyAmountType and assigns it to the ApprovalAmount field.
func (o *AuthorizationHistoryType) SetApprovalAmount(v CurrencyAmountType) {
	o.ApprovalAmount = &v
}

// GetCardPaymentInformation returns the CardPaymentInformation field value if set, zero value otherwise.
func (o *AuthorizationHistoryType) GetCardPaymentInformation() AuthorizationHistoryTypeCardPaymentInformation {
	if o == nil || IsNil(o.CardPaymentInformation) {
		var ret AuthorizationHistoryTypeCardPaymentInformation
		return ret
	}
	return *o.CardPaymentInformation
}

// GetCardPaymentInformationOk returns a tuple with the CardPaymentInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationHistoryType) GetCardPaymentInformationOk() (*AuthorizationHistoryTypeCardPaymentInformation, bool) {
	if o == nil || IsNil(o.CardPaymentInformation) {
		return nil, false
	}
	return o.CardPaymentInformation, true
}

// HasCardPaymentInformation returns a boolean if a field has been set.
func (o *AuthorizationHistoryType) HasCardPaymentInformation() bool {
	if o != nil && !IsNil(o.CardPaymentInformation) {
		return true
	}

	return false
}

// SetCardPaymentInformation gets a reference to the given AuthorizationHistoryTypeCardPaymentInformation and assigns it to the CardPaymentInformation field.
func (o *AuthorizationHistoryType) SetCardPaymentInformation(v AuthorizationHistoryTypeCardPaymentInformation) {
	o.CardPaymentInformation = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AuthorizationHistoryType) GetStatus() AuthorizationHistoryTypeStatus {
	if o == nil || IsNil(o.Status) {
		var ret AuthorizationHistoryTypeStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationHistoryType) GetStatusOk() (*AuthorizationHistoryTypeStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AuthorizationHistoryType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given AuthorizationHistoryTypeStatus and assigns it to the Status field.
func (o *AuthorizationHistoryType) SetStatus(v AuthorizationHistoryTypeStatus) {
	o.Status = &v
}

// GetCreateDateTime returns the CreateDateTime field value if set, zero value otherwise.
func (o *AuthorizationHistoryType) GetCreateDateTime() string {
	if o == nil || IsNil(o.CreateDateTime) {
		var ret string
		return ret
	}
	return *o.CreateDateTime
}

// GetCreateDateTimeOk returns a tuple with the CreateDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationHistoryType) GetCreateDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreateDateTime) {
		return nil, false
	}
	return o.CreateDateTime, true
}

// HasCreateDateTime returns a boolean if a field has been set.
func (o *AuthorizationHistoryType) HasCreateDateTime() bool {
	if o != nil && !IsNil(o.CreateDateTime) {
		return true
	}

	return false
}

// SetCreateDateTime gets a reference to the given string and assigns it to the CreateDateTime field.
func (o *AuthorizationHistoryType) SetCreateDateTime(v string) {
	o.CreateDateTime = &v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise.
func (o *AuthorizationHistoryType) GetCreatorId() string {
	if o == nil || IsNil(o.CreatorId) {
		var ret string
		return ret
	}
	return *o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationHistoryType) GetCreatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorId) {
		return nil, false
	}
	return o.CreatorId, true
}

// HasCreatorId returns a boolean if a field has been set.
func (o *AuthorizationHistoryType) HasCreatorId() bool {
	if o != nil && !IsNil(o.CreatorId) {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given string and assigns it to the CreatorId field.
func (o *AuthorizationHistoryType) SetCreatorId(v string) {
	o.CreatorId = &v
}

// GetLastModifyDateTime returns the LastModifyDateTime field value if set, zero value otherwise.
func (o *AuthorizationHistoryType) GetLastModifyDateTime() string {
	if o == nil || IsNil(o.LastModifyDateTime) {
		var ret string
		return ret
	}
	return *o.LastModifyDateTime
}

// GetLastModifyDateTimeOk returns a tuple with the LastModifyDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationHistoryType) GetLastModifyDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifyDateTime) {
		return nil, false
	}
	return o.LastModifyDateTime, true
}

// HasLastModifyDateTime returns a boolean if a field has been set.
func (o *AuthorizationHistoryType) HasLastModifyDateTime() bool {
	if o != nil && !IsNil(o.LastModifyDateTime) {
		return true
	}

	return false
}

// SetLastModifyDateTime gets a reference to the given string and assigns it to the LastModifyDateTime field.
func (o *AuthorizationHistoryType) SetLastModifyDateTime(v string) {
	o.LastModifyDateTime = &v
}

// GetLastModifierId returns the LastModifierId field value if set, zero value otherwise.
func (o *AuthorizationHistoryType) GetLastModifierId() string {
	if o == nil || IsNil(o.LastModifierId) {
		var ret string
		return ret
	}
	return *o.LastModifierId
}

// GetLastModifierIdOk returns a tuple with the LastModifierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationHistoryType) GetLastModifierIdOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifierId) {
		return nil, false
	}
	return o.LastModifierId, true
}

// HasLastModifierId returns a boolean if a field has been set.
func (o *AuthorizationHistoryType) HasLastModifierId() bool {
	if o != nil && !IsNil(o.LastModifierId) {
		return true
	}

	return false
}

// SetLastModifierId gets a reference to the given string and assigns it to the LastModifierId field.
func (o *AuthorizationHistoryType) SetLastModifierId(v string) {
	o.LastModifierId = &v
}

// GetPurgeDate returns the PurgeDate field value if set, zero value otherwise.
func (o *AuthorizationHistoryType) GetPurgeDate() string {
	if o == nil || IsNil(o.PurgeDate) {
		var ret string
		return ret
	}
	return *o.PurgeDate
}

// GetPurgeDateOk returns a tuple with the PurgeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationHistoryType) GetPurgeDateOk() (*string, bool) {
	if o == nil || IsNil(o.PurgeDate) {
		return nil, false
	}
	return o.PurgeDate, true
}

// HasPurgeDate returns a boolean if a field has been set.
func (o *AuthorizationHistoryType) HasPurgeDate() bool {
	if o != nil && !IsNil(o.PurgeDate) {
		return true
	}

	return false
}

// SetPurgeDate gets a reference to the given string and assigns it to the PurgeDate field.
func (o *AuthorizationHistoryType) SetPurgeDate(v string) {
	o.PurgeDate = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AuthorizationHistoryType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationHistoryType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AuthorizationHistoryType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AuthorizationHistoryType) SetType(v string) {
	o.Type = &v
}

func (o AuthorizationHistoryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizationHistoryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BusinessDate) {
		toSerialize["businessDate"] = o.BusinessDate
	}
	if !IsNil(o.TransactionType) {
		toSerialize["transactionType"] = o.TransactionType
	}
	if !IsNil(o.ApprovalAmount) {
		toSerialize["approvalAmount"] = o.ApprovalAmount
	}
	if !IsNil(o.CardPaymentInformation) {
		toSerialize["cardPaymentInformation"] = o.CardPaymentInformation
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CreateDateTime) {
		toSerialize["createDateTime"] = o.CreateDateTime
	}
	if !IsNil(o.CreatorId) {
		toSerialize["creatorId"] = o.CreatorId
	}
	if !IsNil(o.LastModifyDateTime) {
		toSerialize["lastModifyDateTime"] = o.LastModifyDateTime
	}
	if !IsNil(o.LastModifierId) {
		toSerialize["lastModifierId"] = o.LastModifierId
	}
	if !IsNil(o.PurgeDate) {
		toSerialize["purgeDate"] = o.PurgeDate
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableAuthorizationHistoryType struct {
	value *AuthorizationHistoryType
	isSet bool
}

func (v NullableAuthorizationHistoryType) Get() *AuthorizationHistoryType {
	return v.value
}

func (v *NullableAuthorizationHistoryType) Set(val *AuthorizationHistoryType) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationHistoryType) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationHistoryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationHistoryType(val *AuthorizationHistoryType) *NullableAuthorizationHistoryType {
	return &NullableAuthorizationHistoryType{value: val, isSet: true}
}

func (v NullableAuthorizationHistoryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationHistoryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


