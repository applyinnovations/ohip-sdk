/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the PostingBreakdownType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostingBreakdownType{}

// PostingBreakdownType Details of a financial posting's breakdown.
type PostingBreakdownType struct {
	GrossAmount *CurrencyAmountType `json:"grossAmount,omitempty"`
	NetAmount *CurrencyAmountType `json:"netAmount,omitempty"`
	// Taxes breakout associated to postings
	Taxes []GeneratePostingType `json:"taxes,omitempty"`
}

// NewPostingBreakdownType instantiates a new PostingBreakdownType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostingBreakdownType() *PostingBreakdownType {
	this := PostingBreakdownType{}
	return &this
}

// NewPostingBreakdownTypeWithDefaults instantiates a new PostingBreakdownType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostingBreakdownTypeWithDefaults() *PostingBreakdownType {
	this := PostingBreakdownType{}
	return &this
}

// GetGrossAmount returns the GrossAmount field value if set, zero value otherwise.
func (o *PostingBreakdownType) GetGrossAmount() CurrencyAmountType {
	if o == nil || IsNil(o.GrossAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.GrossAmount
}

// GetGrossAmountOk returns a tuple with the GrossAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostingBreakdownType) GetGrossAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.GrossAmount) {
		return nil, false
	}
	return o.GrossAmount, true
}

// HasGrossAmount returns a boolean if a field has been set.
func (o *PostingBreakdownType) HasGrossAmount() bool {
	if o != nil && !IsNil(o.GrossAmount) {
		return true
	}

	return false
}

// SetGrossAmount gets a reference to the given CurrencyAmountType and assigns it to the GrossAmount field.
func (o *PostingBreakdownType) SetGrossAmount(v CurrencyAmountType) {
	o.GrossAmount = &v
}

// GetNetAmount returns the NetAmount field value if set, zero value otherwise.
func (o *PostingBreakdownType) GetNetAmount() CurrencyAmountType {
	if o == nil || IsNil(o.NetAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.NetAmount
}

// GetNetAmountOk returns a tuple with the NetAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostingBreakdownType) GetNetAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.NetAmount) {
		return nil, false
	}
	return o.NetAmount, true
}

// HasNetAmount returns a boolean if a field has been set.
func (o *PostingBreakdownType) HasNetAmount() bool {
	if o != nil && !IsNil(o.NetAmount) {
		return true
	}

	return false
}

// SetNetAmount gets a reference to the given CurrencyAmountType and assigns it to the NetAmount field.
func (o *PostingBreakdownType) SetNetAmount(v CurrencyAmountType) {
	o.NetAmount = &v
}

// GetTaxes returns the Taxes field value if set, zero value otherwise.
func (o *PostingBreakdownType) GetTaxes() []GeneratePostingType {
	if o == nil || IsNil(o.Taxes) {
		var ret []GeneratePostingType
		return ret
	}
	return o.Taxes
}

// GetTaxesOk returns a tuple with the Taxes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostingBreakdownType) GetTaxesOk() ([]GeneratePostingType, bool) {
	if o == nil || IsNil(o.Taxes) {
		return nil, false
	}
	return o.Taxes, true
}

// HasTaxes returns a boolean if a field has been set.
func (o *PostingBreakdownType) HasTaxes() bool {
	if o != nil && !IsNil(o.Taxes) {
		return true
	}

	return false
}

// SetTaxes gets a reference to the given []GeneratePostingType and assigns it to the Taxes field.
func (o *PostingBreakdownType) SetTaxes(v []GeneratePostingType) {
	o.Taxes = v
}

func (o PostingBreakdownType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostingBreakdownType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GrossAmount) {
		toSerialize["grossAmount"] = o.GrossAmount
	}
	if !IsNil(o.NetAmount) {
		toSerialize["netAmount"] = o.NetAmount
	}
	if !IsNil(o.Taxes) {
		toSerialize["taxes"] = o.Taxes
	}
	return toSerialize, nil
}

type NullablePostingBreakdownType struct {
	value *PostingBreakdownType
	isSet bool
}

func (v NullablePostingBreakdownType) Get() *PostingBreakdownType {
	return v.value
}

func (v *NullablePostingBreakdownType) Set(val *PostingBreakdownType) {
	v.value = val
	v.isSet = true
}

func (v NullablePostingBreakdownType) IsSet() bool {
	return v.isSet
}

func (v *NullablePostingBreakdownType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostingBreakdownType(val *PostingBreakdownType) *NullablePostingBreakdownType {
	return &NullablePostingBreakdownType{value: val, isSet: true}
}

func (v NullablePostingBreakdownType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostingBreakdownType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


