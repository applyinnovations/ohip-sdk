/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
	"fmt"
)

// FolioCommandType the model 'FolioCommandType'
type FolioCommandType string

// List of folioCommandType
const (
	FOLIOCOMMANDTYPE_INVOICE FolioCommandType = "Invoice"
	FOLIOCOMMANDTYPE_INFO FolioCommandType = "Info"
	FOLIOCOMMANDTYPE_RESEND_INVOICE FolioCommandType = "ResendInvoice"
	FOLIOCOMMANDTYPE_CANCELLATION FolioCommandType = "Cancellation"
	FOLIOCOMMANDTYPE_EOD_RESET FolioCommandType = "EodReset"
	FOLIOCOMMANDTYPE_X_REPORT FolioCommandType = "XReport"
	FOLIOCOMMANDTYPE_SEND_FISCAL_INVOICE FolioCommandType = "SendFiscalInvoice"
	FOLIOCOMMANDTYPE_ZERO_INVOICE FolioCommandType = "ZeroInvoice"
	FOLIOCOMMANDTYPE_END_OF_PERIOD FolioCommandType = "EndOfPeriod"
	FOLIOCOMMANDTYPE_ZERO_INVOICE_WITH_RECEIPT FolioCommandType = "ZeroInvoiceWithReceipt"
	FOLIOCOMMANDTYPE_FISCAL_UPDATE FolioCommandType = "FiscalUpdate"
	FOLIOCOMMANDTYPE_CHECK_OUT FolioCommandType = "CheckOut"
)

// All allowed values of FolioCommandType enum
var AllowedFolioCommandTypeEnumValues = []FolioCommandType{
	"Invoice",
	"Info",
	"ResendInvoice",
	"Cancellation",
	"EodReset",
	"XReport",
	"SendFiscalInvoice",
	"ZeroInvoice",
	"EndOfPeriod",
	"ZeroInvoiceWithReceipt",
	"FiscalUpdate",
	"CheckOut",
}

func (v *FolioCommandType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FolioCommandType(value)
	for _, existing := range AllowedFolioCommandTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FolioCommandType", value)
}

// NewFolioCommandTypeFromValue returns a pointer to a valid FolioCommandType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFolioCommandTypeFromValue(v string) (*FolioCommandType, error) {
	ev := FolioCommandType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FolioCommandType: valid values are %v", v, AllowedFolioCommandTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FolioCommandType) IsValid() bool {
	for _, existing := range AllowedFolioCommandTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to folioCommandType value
func (v FolioCommandType) Ptr() *FolioCommandType {
	return &v
}

type NullableFolioCommandType struct {
	value *FolioCommandType
	isSet bool
}

func (v NullableFolioCommandType) Get() *FolioCommandType {
	return v.value
}

func (v *NullableFolioCommandType) Set(val *FolioCommandType) {
	v.value = val
	v.isSet = true
}

func (v NullableFolioCommandType) IsSet() bool {
	return v.isSet
}

func (v *NullableFolioCommandType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolioCommandType(val *FolioCommandType) *NullableFolioCommandType {
	return &NullableFolioCommandType{value: val, isSet: true}
}

func (v NullableFolioCommandType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolioCommandType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

