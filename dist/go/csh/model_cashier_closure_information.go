/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the CashierClosureInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CashierClosureInformation{}

// CashierClosureInformation Response to the request to get financial details for a Posting Activity. This will return the before and after values for the transactions which were changed.
type CashierClosureInformation struct {
	// Information of the Cashier.
	CashierClosureInfo []CashierClosureInfoType `json:"cashierClosureInfo,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewCashierClosureInformation instantiates a new CashierClosureInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCashierClosureInformation() *CashierClosureInformation {
	this := CashierClosureInformation{}
	return &this
}

// NewCashierClosureInformationWithDefaults instantiates a new CashierClosureInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCashierClosureInformationWithDefaults() *CashierClosureInformation {
	this := CashierClosureInformation{}
	return &this
}

// GetCashierClosureInfo returns the CashierClosureInfo field value if set, zero value otherwise.
func (o *CashierClosureInformation) GetCashierClosureInfo() []CashierClosureInfoType {
	if o == nil || IsNil(o.CashierClosureInfo) {
		var ret []CashierClosureInfoType
		return ret
	}
	return o.CashierClosureInfo
}

// GetCashierClosureInfoOk returns a tuple with the CashierClosureInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierClosureInformation) GetCashierClosureInfoOk() ([]CashierClosureInfoType, bool) {
	if o == nil || IsNil(o.CashierClosureInfo) {
		return nil, false
	}
	return o.CashierClosureInfo, true
}

// HasCashierClosureInfo returns a boolean if a field has been set.
func (o *CashierClosureInformation) HasCashierClosureInfo() bool {
	if o != nil && !IsNil(o.CashierClosureInfo) {
		return true
	}

	return false
}

// SetCashierClosureInfo gets a reference to the given []CashierClosureInfoType and assigns it to the CashierClosureInfo field.
func (o *CashierClosureInformation) SetCashierClosureInfo(v []CashierClosureInfoType) {
	o.CashierClosureInfo = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *CashierClosureInformation) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierClosureInformation) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *CashierClosureInformation) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *CashierClosureInformation) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *CashierClosureInformation) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierClosureInformation) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *CashierClosureInformation) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *CashierClosureInformation) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o CashierClosureInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CashierClosureInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CashierClosureInfo) {
		toSerialize["cashierClosureInfo"] = o.CashierClosureInfo
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableCashierClosureInformation struct {
	value *CashierClosureInformation
	isSet bool
}

func (v NullableCashierClosureInformation) Get() *CashierClosureInformation {
	return v.value
}

func (v *NullableCashierClosureInformation) Set(val *CashierClosureInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableCashierClosureInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableCashierClosureInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashierClosureInformation(val *CashierClosureInformation) *NullableCashierClosureInformation {
	return &NullableCashierClosureInformation{value: val, isSet: true}
}

func (v NullableCashierClosureInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashierClosureInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


