/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the CheckDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckDetails{}

// CheckDetails Response object to Fetch the check details for a given posting posted through the POS.
type CheckDetails struct {
	// Used for Character Strings, length 0 to 32000.
	CheckDetailsInfo *string `json:"checkDetailsInfo,omitempty"`
	// Response of guest check Image details in encoded format.
	CheckImageInfo *string `json:"checkImageInfo,omitempty"`
	// Used for Character Strings, length 0 to 200.
	CheckNumber *string `json:"checkNumber,omitempty"`
	// Indicates the Cheque date.
	CheckDate *string `json:"checkDate,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewCheckDetails instantiates a new CheckDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckDetails() *CheckDetails {
	this := CheckDetails{}
	return &this
}

// NewCheckDetailsWithDefaults instantiates a new CheckDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckDetailsWithDefaults() *CheckDetails {
	this := CheckDetails{}
	return &this
}

// GetCheckDetailsInfo returns the CheckDetailsInfo field value if set, zero value otherwise.
func (o *CheckDetails) GetCheckDetailsInfo() string {
	if o == nil || IsNil(o.CheckDetailsInfo) {
		var ret string
		return ret
	}
	return *o.CheckDetailsInfo
}

// GetCheckDetailsInfoOk returns a tuple with the CheckDetailsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckDetails) GetCheckDetailsInfoOk() (*string, bool) {
	if o == nil || IsNil(o.CheckDetailsInfo) {
		return nil, false
	}
	return o.CheckDetailsInfo, true
}

// HasCheckDetailsInfo returns a boolean if a field has been set.
func (o *CheckDetails) HasCheckDetailsInfo() bool {
	if o != nil && !IsNil(o.CheckDetailsInfo) {
		return true
	}

	return false
}

// SetCheckDetailsInfo gets a reference to the given string and assigns it to the CheckDetailsInfo field.
func (o *CheckDetails) SetCheckDetailsInfo(v string) {
	o.CheckDetailsInfo = &v
}

// GetCheckImageInfo returns the CheckImageInfo field value if set, zero value otherwise.
func (o *CheckDetails) GetCheckImageInfo() string {
	if o == nil || IsNil(o.CheckImageInfo) {
		var ret string
		return ret
	}
	return *o.CheckImageInfo
}

// GetCheckImageInfoOk returns a tuple with the CheckImageInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckDetails) GetCheckImageInfoOk() (*string, bool) {
	if o == nil || IsNil(o.CheckImageInfo) {
		return nil, false
	}
	return o.CheckImageInfo, true
}

// HasCheckImageInfo returns a boolean if a field has been set.
func (o *CheckDetails) HasCheckImageInfo() bool {
	if o != nil && !IsNil(o.CheckImageInfo) {
		return true
	}

	return false
}

// SetCheckImageInfo gets a reference to the given string and assigns it to the CheckImageInfo field.
func (o *CheckDetails) SetCheckImageInfo(v string) {
	o.CheckImageInfo = &v
}

// GetCheckNumber returns the CheckNumber field value if set, zero value otherwise.
func (o *CheckDetails) GetCheckNumber() string {
	if o == nil || IsNil(o.CheckNumber) {
		var ret string
		return ret
	}
	return *o.CheckNumber
}

// GetCheckNumberOk returns a tuple with the CheckNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckDetails) GetCheckNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CheckNumber) {
		return nil, false
	}
	return o.CheckNumber, true
}

// HasCheckNumber returns a boolean if a field has been set.
func (o *CheckDetails) HasCheckNumber() bool {
	if o != nil && !IsNil(o.CheckNumber) {
		return true
	}

	return false
}

// SetCheckNumber gets a reference to the given string and assigns it to the CheckNumber field.
func (o *CheckDetails) SetCheckNumber(v string) {
	o.CheckNumber = &v
}

// GetCheckDate returns the CheckDate field value if set, zero value otherwise.
func (o *CheckDetails) GetCheckDate() string {
	if o == nil || IsNil(o.CheckDate) {
		var ret string
		return ret
	}
	return *o.CheckDate
}

// GetCheckDateOk returns a tuple with the CheckDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckDetails) GetCheckDateOk() (*string, bool) {
	if o == nil || IsNil(o.CheckDate) {
		return nil, false
	}
	return o.CheckDate, true
}

// HasCheckDate returns a boolean if a field has been set.
func (o *CheckDetails) HasCheckDate() bool {
	if o != nil && !IsNil(o.CheckDate) {
		return true
	}

	return false
}

// SetCheckDate gets a reference to the given string and assigns it to the CheckDate field.
func (o *CheckDetails) SetCheckDate(v string) {
	o.CheckDate = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *CheckDetails) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckDetails) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *CheckDetails) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *CheckDetails) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *CheckDetails) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckDetails) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *CheckDetails) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *CheckDetails) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o CheckDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CheckDetailsInfo) {
		toSerialize["checkDetailsInfo"] = o.CheckDetailsInfo
	}
	if !IsNil(o.CheckImageInfo) {
		toSerialize["checkImageInfo"] = o.CheckImageInfo
	}
	if !IsNil(o.CheckNumber) {
		toSerialize["checkNumber"] = o.CheckNumber
	}
	if !IsNil(o.CheckDate) {
		toSerialize["checkDate"] = o.CheckDate
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableCheckDetails struct {
	value *CheckDetails
	isSet bool
}

func (v NullableCheckDetails) Get() *CheckDetails {
	return v.value
}

func (v *NullableCheckDetails) Set(val *CheckDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckDetails(val *CheckDetails) *NullableCheckDetails {
	return &NullableCheckDetails{value: val, isSet: true}
}

func (v NullableCheckDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


