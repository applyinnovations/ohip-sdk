/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
	"fmt"
)

// FolioTypeValidationType Profile detail is not configured with Tax ID.
type FolioTypeValidationType string

// List of folioTypeValidationType
const (
	FOLIOTYPEVALIDATIONTYPE_TAX_ID FolioTypeValidationType = "TaxID"
)

// All allowed values of FolioTypeValidationType enum
var AllowedFolioTypeValidationTypeEnumValues = []FolioTypeValidationType{
	"TaxID",
}

func (v *FolioTypeValidationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FolioTypeValidationType(value)
	for _, existing := range AllowedFolioTypeValidationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FolioTypeValidationType", value)
}

// NewFolioTypeValidationTypeFromValue returns a pointer to a valid FolioTypeValidationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFolioTypeValidationTypeFromValue(v string) (*FolioTypeValidationType, error) {
	ev := FolioTypeValidationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FolioTypeValidationType: valid values are %v", v, AllowedFolioTypeValidationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FolioTypeValidationType) IsValid() bool {
	for _, existing := range AllowedFolioTypeValidationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to folioTypeValidationType value
func (v FolioTypeValidationType) Ptr() *FolioTypeValidationType {
	return &v
}

type NullableFolioTypeValidationType struct {
	value *FolioTypeValidationType
	isSet bool
}

func (v NullableFolioTypeValidationType) Get() *FolioTypeValidationType {
	return v.value
}

func (v *NullableFolioTypeValidationType) Set(val *FolioTypeValidationType) {
	v.value = val
	v.isSet = true
}

func (v NullableFolioTypeValidationType) IsSet() bool {
	return v.isSet
}

func (v *NullableFolioTypeValidationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolioTypeValidationType(val *FolioTypeValidationType) *NullableFolioTypeValidationType {
	return &NullableFolioTypeValidationType{value: val, isSet: true}
}

func (v NullableFolioTypeValidationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolioTypeValidationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

