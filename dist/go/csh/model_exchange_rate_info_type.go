/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the ExchangeRateInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExchangeRateInfoType{}

// ExchangeRateInfoType Exchange rate information of a currency.
type ExchangeRateInfoType struct {
	// Description of currency Code.
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// Description of exchange rate.
	ExchangeRate *float32 `json:"exchangeRate,omitempty"`
}

// NewExchangeRateInfoType instantiates a new ExchangeRateInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeRateInfoType() *ExchangeRateInfoType {
	this := ExchangeRateInfoType{}
	return &this
}

// NewExchangeRateInfoTypeWithDefaults instantiates a new ExchangeRateInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeRateInfoTypeWithDefaults() *ExchangeRateInfoType {
	this := ExchangeRateInfoType{}
	return &this
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *ExchangeRateInfoType) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRateInfoType) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *ExchangeRateInfoType) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *ExchangeRateInfoType) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetExchangeRate returns the ExchangeRate field value if set, zero value otherwise.
func (o *ExchangeRateInfoType) GetExchangeRate() float32 {
	if o == nil || IsNil(o.ExchangeRate) {
		var ret float32
		return ret
	}
	return *o.ExchangeRate
}

// GetExchangeRateOk returns a tuple with the ExchangeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRateInfoType) GetExchangeRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ExchangeRate) {
		return nil, false
	}
	return o.ExchangeRate, true
}

// HasExchangeRate returns a boolean if a field has been set.
func (o *ExchangeRateInfoType) HasExchangeRate() bool {
	if o != nil && !IsNil(o.ExchangeRate) {
		return true
	}

	return false
}

// SetExchangeRate gets a reference to the given float32 and assigns it to the ExchangeRate field.
func (o *ExchangeRateInfoType) SetExchangeRate(v float32) {
	o.ExchangeRate = &v
}

func (o ExchangeRateInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExchangeRateInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.ExchangeRate) {
		toSerialize["exchangeRate"] = o.ExchangeRate
	}
	return toSerialize, nil
}

type NullableExchangeRateInfoType struct {
	value *ExchangeRateInfoType
	isSet bool
}

func (v NullableExchangeRateInfoType) Get() *ExchangeRateInfoType {
	return v.value
}

func (v *NullableExchangeRateInfoType) Set(val *ExchangeRateInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeRateInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeRateInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeRateInfoType(val *ExchangeRateInfoType) *NullableExchangeRateInfoType {
	return &NullableExchangeRateInfoType{value: val, isSet: true}
}

func (v NullableExchangeRateInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeRateInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


