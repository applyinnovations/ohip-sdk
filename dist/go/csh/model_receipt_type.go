/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
	"fmt"
)

// ReceiptType This contains the receipt type.
type ReceiptType string

// List of receiptType
const (
	RECEIPTTYPE_PAYMENT ReceiptType = "Payment"
	RECEIPTTYPE_DEPOSIT ReceiptType = "Deposit"
	RECEIPTTYPE_PAIDOUT ReceiptType = "Paidout"
	RECEIPTTYPE_TRANSACTION ReceiptType = "Transaction"
	RECEIPTTYPE_CHECK_EXCHANGE ReceiptType = "CheckExchange"
	RECEIPTTYPE_CURRENCY_EXCHANGE_CHECK ReceiptType = "CurrencyExchangeCheck"
	RECEIPTTYPE_CURRENCY_EXCHANGE_CASH ReceiptType = "CurrencyExchangeCash"
	RECEIPTTYPE_DEPOSIT_REQUEST ReceiptType = "DepositRequest"
	RECEIPTTYPE_DEPOSIT_REFUND_RECEIPT ReceiptType = "DepositRefundReceipt"
	RECEIPTTYPE_ACKNOWLEDGEMENT ReceiptType = "Acknowledgement"
)

// All allowed values of ReceiptType enum
var AllowedReceiptTypeEnumValues = []ReceiptType{
	"Payment",
	"Deposit",
	"Paidout",
	"Transaction",
	"CheckExchange",
	"CurrencyExchangeCheck",
	"CurrencyExchangeCash",
	"DepositRequest",
	"DepositRefundReceipt",
	"Acknowledgement",
}

func (v *ReceiptType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReceiptType(value)
	for _, existing := range AllowedReceiptTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReceiptType", value)
}

// NewReceiptTypeFromValue returns a pointer to a valid ReceiptType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReceiptTypeFromValue(v string) (*ReceiptType, error) {
	ev := ReceiptType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReceiptType: valid values are %v", v, AllowedReceiptTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReceiptType) IsValid() bool {
	for _, existing := range AllowedReceiptTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to receiptType value
func (v ReceiptType) Ptr() *ReceiptType {
	return &v
}

type NullableReceiptType struct {
	value *ReceiptType
	isSet bool
}

func (v NullableReceiptType) Get() *ReceiptType {
	return v.value
}

func (v *NullableReceiptType) Set(val *ReceiptType) {
	v.value = val
	v.isSet = true
}

func (v NullableReceiptType) IsSet() bool {
	return v.isSet
}

func (v *NullableReceiptType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReceiptType(val *ReceiptType) *NullableReceiptType {
	return &NullableReceiptType{value: val, isSet: true}
}

func (v NullableReceiptType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReceiptType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

