/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the EarlyDepartureInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EarlyDepartureInfo{}

// EarlyDepartureInfo Response for Early departure verification. Contains information regarding early departure penalty amount if applicable and any errors or warnings as to why the early departure cannot be done. Possible error codes are: FOF00152: An early departure could result in a change to the room rate, due to the reduced length of stay. FOF00153: Exchange Rates not setup for {currency code} . FOF00155: The partially consumed package(s) will be charged to the guest account. FOF00156: There is a Rate Code Restriction for {restriction information}. FOF00157: The reservation status is not valid for an early departure. FOF00158: Early Departure is not required as the reservation is already in Due Out status.
type EarlyDepartureInfo struct {
	EarlyDepartureDetails *EarlyDepartureInfoType `json:"earlyDepartureDetails,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewEarlyDepartureInfo instantiates a new EarlyDepartureInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEarlyDepartureInfo() *EarlyDepartureInfo {
	this := EarlyDepartureInfo{}
	return &this
}

// NewEarlyDepartureInfoWithDefaults instantiates a new EarlyDepartureInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEarlyDepartureInfoWithDefaults() *EarlyDepartureInfo {
	this := EarlyDepartureInfo{}
	return &this
}

// GetEarlyDepartureDetails returns the EarlyDepartureDetails field value if set, zero value otherwise.
func (o *EarlyDepartureInfo) GetEarlyDepartureDetails() EarlyDepartureInfoType {
	if o == nil || IsNil(o.EarlyDepartureDetails) {
		var ret EarlyDepartureInfoType
		return ret
	}
	return *o.EarlyDepartureDetails
}

// GetEarlyDepartureDetailsOk returns a tuple with the EarlyDepartureDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarlyDepartureInfo) GetEarlyDepartureDetailsOk() (*EarlyDepartureInfoType, bool) {
	if o == nil || IsNil(o.EarlyDepartureDetails) {
		return nil, false
	}
	return o.EarlyDepartureDetails, true
}

// HasEarlyDepartureDetails returns a boolean if a field has been set.
func (o *EarlyDepartureInfo) HasEarlyDepartureDetails() bool {
	if o != nil && !IsNil(o.EarlyDepartureDetails) {
		return true
	}

	return false
}

// SetEarlyDepartureDetails gets a reference to the given EarlyDepartureInfoType and assigns it to the EarlyDepartureDetails field.
func (o *EarlyDepartureInfo) SetEarlyDepartureDetails(v EarlyDepartureInfoType) {
	o.EarlyDepartureDetails = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *EarlyDepartureInfo) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarlyDepartureInfo) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *EarlyDepartureInfo) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *EarlyDepartureInfo) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *EarlyDepartureInfo) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarlyDepartureInfo) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *EarlyDepartureInfo) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *EarlyDepartureInfo) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o EarlyDepartureInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EarlyDepartureInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EarlyDepartureDetails) {
		toSerialize["earlyDepartureDetails"] = o.EarlyDepartureDetails
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableEarlyDepartureInfo struct {
	value *EarlyDepartureInfo
	isSet bool
}

func (v NullableEarlyDepartureInfo) Get() *EarlyDepartureInfo {
	return v.value
}

func (v *NullableEarlyDepartureInfo) Set(val *EarlyDepartureInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEarlyDepartureInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEarlyDepartureInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEarlyDepartureInfo(val *EarlyDepartureInfo) *NullableEarlyDepartureInfo {
	return &NullableEarlyDepartureInfo{value: val, isSet: true}
}

func (v NullableEarlyDepartureInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEarlyDepartureInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


