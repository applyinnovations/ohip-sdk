/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the AuthorizationHistoryTypeStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizationHistoryTypeStatus{}

// AuthorizationHistoryTypeStatus Contains he authorization status indicator - either Successful for Failed.
type AuthorizationHistoryTypeStatus struct {
	Successful *AuthorizationHistoryTypeStatusSuccessful `json:"successful,omitempty"`
	Failed *AuthorizationHistoryTypeStatusFailed `json:"failed,omitempty"`
}

// NewAuthorizationHistoryTypeStatus instantiates a new AuthorizationHistoryTypeStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizationHistoryTypeStatus() *AuthorizationHistoryTypeStatus {
	this := AuthorizationHistoryTypeStatus{}
	return &this
}

// NewAuthorizationHistoryTypeStatusWithDefaults instantiates a new AuthorizationHistoryTypeStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizationHistoryTypeStatusWithDefaults() *AuthorizationHistoryTypeStatus {
	this := AuthorizationHistoryTypeStatus{}
	return &this
}

// GetSuccessful returns the Successful field value if set, zero value otherwise.
func (o *AuthorizationHistoryTypeStatus) GetSuccessful() AuthorizationHistoryTypeStatusSuccessful {
	if o == nil || IsNil(o.Successful) {
		var ret AuthorizationHistoryTypeStatusSuccessful
		return ret
	}
	return *o.Successful
}

// GetSuccessfulOk returns a tuple with the Successful field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationHistoryTypeStatus) GetSuccessfulOk() (*AuthorizationHistoryTypeStatusSuccessful, bool) {
	if o == nil || IsNil(o.Successful) {
		return nil, false
	}
	return o.Successful, true
}

// HasSuccessful returns a boolean if a field has been set.
func (o *AuthorizationHistoryTypeStatus) HasSuccessful() bool {
	if o != nil && !IsNil(o.Successful) {
		return true
	}

	return false
}

// SetSuccessful gets a reference to the given AuthorizationHistoryTypeStatusSuccessful and assigns it to the Successful field.
func (o *AuthorizationHistoryTypeStatus) SetSuccessful(v AuthorizationHistoryTypeStatusSuccessful) {
	o.Successful = &v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *AuthorizationHistoryTypeStatus) GetFailed() AuthorizationHistoryTypeStatusFailed {
	if o == nil || IsNil(o.Failed) {
		var ret AuthorizationHistoryTypeStatusFailed
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationHistoryTypeStatus) GetFailedOk() (*AuthorizationHistoryTypeStatusFailed, bool) {
	if o == nil || IsNil(o.Failed) {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *AuthorizationHistoryTypeStatus) HasFailed() bool {
	if o != nil && !IsNil(o.Failed) {
		return true
	}

	return false
}

// SetFailed gets a reference to the given AuthorizationHistoryTypeStatusFailed and assigns it to the Failed field.
func (o *AuthorizationHistoryTypeStatus) SetFailed(v AuthorizationHistoryTypeStatusFailed) {
	o.Failed = &v
}

func (o AuthorizationHistoryTypeStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizationHistoryTypeStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Successful) {
		toSerialize["successful"] = o.Successful
	}
	if !IsNil(o.Failed) {
		toSerialize["failed"] = o.Failed
	}
	return toSerialize, nil
}

type NullableAuthorizationHistoryTypeStatus struct {
	value *AuthorizationHistoryTypeStatus
	isSet bool
}

func (v NullableAuthorizationHistoryTypeStatus) Get() *AuthorizationHistoryTypeStatus {
	return v.value
}

func (v *NullableAuthorizationHistoryTypeStatus) Set(val *AuthorizationHistoryTypeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationHistoryTypeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationHistoryTypeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationHistoryTypeStatus(val *AuthorizationHistoryTypeStatus) *NullableAuthorizationHistoryTypeStatus {
	return &NullableAuthorizationHistoryTypeStatus{value: val, isSet: true}
}

func (v NullableAuthorizationHistoryTypeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationHistoryTypeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


