/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the ChargesAndPaymentsCriteria type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChargesAndPaymentsCriteria{}

// ChargesAndPaymentsCriteria Request to post charges and payments on a reservation.
type ChargesAndPaymentsCriteria struct {
	// Information regarding the charges which have to be posted.
	Charges []ChargeCriteriaType `json:"charges,omitempty"`
	// The payment information to be posted.
	Payments []PaymentCriteriaType `json:"payments,omitempty"`
	// The Cashier ID of the Cashier who is currently processing the transaction(s).
	CashierId *float32 `json:"cashierId,omitempty"`
}

// NewChargesAndPaymentsCriteria instantiates a new ChargesAndPaymentsCriteria object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChargesAndPaymentsCriteria() *ChargesAndPaymentsCriteria {
	this := ChargesAndPaymentsCriteria{}
	return &this
}

// NewChargesAndPaymentsCriteriaWithDefaults instantiates a new ChargesAndPaymentsCriteria object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargesAndPaymentsCriteriaWithDefaults() *ChargesAndPaymentsCriteria {
	this := ChargesAndPaymentsCriteria{}
	return &this
}

// GetCharges returns the Charges field value if set, zero value otherwise.
func (o *ChargesAndPaymentsCriteria) GetCharges() []ChargeCriteriaType {
	if o == nil || IsNil(o.Charges) {
		var ret []ChargeCriteriaType
		return ret
	}
	return o.Charges
}

// GetChargesOk returns a tuple with the Charges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargesAndPaymentsCriteria) GetChargesOk() ([]ChargeCriteriaType, bool) {
	if o == nil || IsNil(o.Charges) {
		return nil, false
	}
	return o.Charges, true
}

// HasCharges returns a boolean if a field has been set.
func (o *ChargesAndPaymentsCriteria) HasCharges() bool {
	if o != nil && !IsNil(o.Charges) {
		return true
	}

	return false
}

// SetCharges gets a reference to the given []ChargeCriteriaType and assigns it to the Charges field.
func (o *ChargesAndPaymentsCriteria) SetCharges(v []ChargeCriteriaType) {
	o.Charges = v
}

// GetPayments returns the Payments field value if set, zero value otherwise.
func (o *ChargesAndPaymentsCriteria) GetPayments() []PaymentCriteriaType {
	if o == nil || IsNil(o.Payments) {
		var ret []PaymentCriteriaType
		return ret
	}
	return o.Payments
}

// GetPaymentsOk returns a tuple with the Payments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargesAndPaymentsCriteria) GetPaymentsOk() ([]PaymentCriteriaType, bool) {
	if o == nil || IsNil(o.Payments) {
		return nil, false
	}
	return o.Payments, true
}

// HasPayments returns a boolean if a field has been set.
func (o *ChargesAndPaymentsCriteria) HasPayments() bool {
	if o != nil && !IsNil(o.Payments) {
		return true
	}

	return false
}

// SetPayments gets a reference to the given []PaymentCriteriaType and assigns it to the Payments field.
func (o *ChargesAndPaymentsCriteria) SetPayments(v []PaymentCriteriaType) {
	o.Payments = v
}

// GetCashierId returns the CashierId field value if set, zero value otherwise.
func (o *ChargesAndPaymentsCriteria) GetCashierId() float32 {
	if o == nil || IsNil(o.CashierId) {
		var ret float32
		return ret
	}
	return *o.CashierId
}

// GetCashierIdOk returns a tuple with the CashierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargesAndPaymentsCriteria) GetCashierIdOk() (*float32, bool) {
	if o == nil || IsNil(o.CashierId) {
		return nil, false
	}
	return o.CashierId, true
}

// HasCashierId returns a boolean if a field has been set.
func (o *ChargesAndPaymentsCriteria) HasCashierId() bool {
	if o != nil && !IsNil(o.CashierId) {
		return true
	}

	return false
}

// SetCashierId gets a reference to the given float32 and assigns it to the CashierId field.
func (o *ChargesAndPaymentsCriteria) SetCashierId(v float32) {
	o.CashierId = &v
}

func (o ChargesAndPaymentsCriteria) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChargesAndPaymentsCriteria) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Charges) {
		toSerialize["charges"] = o.Charges
	}
	if !IsNil(o.Payments) {
		toSerialize["payments"] = o.Payments
	}
	if !IsNil(o.CashierId) {
		toSerialize["cashierId"] = o.CashierId
	}
	return toSerialize, nil
}

type NullableChargesAndPaymentsCriteria struct {
	value *ChargesAndPaymentsCriteria
	isSet bool
}

func (v NullableChargesAndPaymentsCriteria) Get() *ChargesAndPaymentsCriteria {
	return v.value
}

func (v *NullableChargesAndPaymentsCriteria) Set(val *ChargesAndPaymentsCriteria) {
	v.value = val
	v.isSet = true
}

func (v NullableChargesAndPaymentsCriteria) IsSet() bool {
	return v.isSet
}

func (v *NullableChargesAndPaymentsCriteria) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargesAndPaymentsCriteria(val *ChargesAndPaymentsCriteria) *NullableChargesAndPaymentsCriteria {
	return &NullableChargesAndPaymentsCriteria{value: val, isSet: true}
}

func (v NullableChargesAndPaymentsCriteria) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargesAndPaymentsCriteria) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


