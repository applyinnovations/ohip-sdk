/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
	"fmt"
)

// PayloadType Fiscal Payload Type.
type PayloadType string

// List of payloadType
const (
	PAYLOADTYPE_CHECK_OUT PayloadType = "CheckOut"
	PAYLOADTYPE_FOLIO_GENERATION PayloadType = "FolioGeneration"
)

// All allowed values of PayloadType enum
var AllowedPayloadTypeEnumValues = []PayloadType{
	"CheckOut",
	"FolioGeneration",
}

func (v *PayloadType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PayloadType(value)
	for _, existing := range AllowedPayloadTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PayloadType", value)
}

// NewPayloadTypeFromValue returns a pointer to a valid PayloadType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPayloadTypeFromValue(v string) (*PayloadType, error) {
	ev := PayloadType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PayloadType: valid values are %v", v, AllowedPayloadTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PayloadType) IsValid() bool {
	for _, existing := range AllowedPayloadTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to payloadType value
func (v PayloadType) Ptr() *PayloadType {
	return &v
}

type NullablePayloadType struct {
	value *PayloadType
	isSet bool
}

func (v NullablePayloadType) Get() *PayloadType {
	return v.value
}

func (v *NullablePayloadType) Set(val *PayloadType) {
	v.value = val
	v.isSet = true
}

func (v NullablePayloadType) IsSet() bool {
	return v.isSet
}

func (v *NullablePayloadType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayloadType(val *PayloadType) *NullablePayloadType {
	return &NullablePayloadType{value: val, isSet: true}
}

func (v NullablePayloadType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayloadType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

