/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the ExchangeAmounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExchangeAmounts{}

// ExchangeAmounts Converted values for the Exchange Currency requested.
type ExchangeAmounts struct {
	DebitAmount *CurrencyAmountType `json:"debitAmount,omitempty"`
	CreditAmount *CurrencyAmountType `json:"creditAmount,omitempty"`
}

// NewExchangeAmounts instantiates a new ExchangeAmounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeAmounts() *ExchangeAmounts {
	this := ExchangeAmounts{}
	return &this
}

// NewExchangeAmountsWithDefaults instantiates a new ExchangeAmounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeAmountsWithDefaults() *ExchangeAmounts {
	this := ExchangeAmounts{}
	return &this
}

// GetDebitAmount returns the DebitAmount field value if set, zero value otherwise.
func (o *ExchangeAmounts) GetDebitAmount() CurrencyAmountType {
	if o == nil || IsNil(o.DebitAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.DebitAmount
}

// GetDebitAmountOk returns a tuple with the DebitAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeAmounts) GetDebitAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.DebitAmount) {
		return nil, false
	}
	return o.DebitAmount, true
}

// HasDebitAmount returns a boolean if a field has been set.
func (o *ExchangeAmounts) HasDebitAmount() bool {
	if o != nil && !IsNil(o.DebitAmount) {
		return true
	}

	return false
}

// SetDebitAmount gets a reference to the given CurrencyAmountType and assigns it to the DebitAmount field.
func (o *ExchangeAmounts) SetDebitAmount(v CurrencyAmountType) {
	o.DebitAmount = &v
}

// GetCreditAmount returns the CreditAmount field value if set, zero value otherwise.
func (o *ExchangeAmounts) GetCreditAmount() CurrencyAmountType {
	if o == nil || IsNil(o.CreditAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.CreditAmount
}

// GetCreditAmountOk returns a tuple with the CreditAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeAmounts) GetCreditAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.CreditAmount) {
		return nil, false
	}
	return o.CreditAmount, true
}

// HasCreditAmount returns a boolean if a field has been set.
func (o *ExchangeAmounts) HasCreditAmount() bool {
	if o != nil && !IsNil(o.CreditAmount) {
		return true
	}

	return false
}

// SetCreditAmount gets a reference to the given CurrencyAmountType and assigns it to the CreditAmount field.
func (o *ExchangeAmounts) SetCreditAmount(v CurrencyAmountType) {
	o.CreditAmount = &v
}

func (o ExchangeAmounts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExchangeAmounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DebitAmount) {
		toSerialize["debitAmount"] = o.DebitAmount
	}
	if !IsNil(o.CreditAmount) {
		toSerialize["creditAmount"] = o.CreditAmount
	}
	return toSerialize, nil
}

type NullableExchangeAmounts struct {
	value *ExchangeAmounts
	isSet bool
}

func (v NullableExchangeAmounts) Get() *ExchangeAmounts {
	return v.value
}

func (v *NullableExchangeAmounts) Set(val *ExchangeAmounts) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeAmounts) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeAmounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeAmounts(val *ExchangeAmounts) *NullableExchangeAmounts {
	return &NullableExchangeAmounts{value: val, isSet: true}
}

func (v NullableExchangeAmounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeAmounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


