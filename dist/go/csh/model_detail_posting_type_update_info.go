/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the DetailPostingTypeUpdateInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DetailPostingTypeUpdateInfo{}

// DetailPostingTypeUpdateInfo Update info associated to this transaction.
type DetailPostingTypeUpdateInfo struct {
	UpdateDate *string `json:"updateDate,omitempty"`
	UpdateBy *string `json:"updateBy,omitempty"`
}

// NewDetailPostingTypeUpdateInfo instantiates a new DetailPostingTypeUpdateInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetailPostingTypeUpdateInfo() *DetailPostingTypeUpdateInfo {
	this := DetailPostingTypeUpdateInfo{}
	return &this
}

// NewDetailPostingTypeUpdateInfoWithDefaults instantiates a new DetailPostingTypeUpdateInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetailPostingTypeUpdateInfoWithDefaults() *DetailPostingTypeUpdateInfo {
	this := DetailPostingTypeUpdateInfo{}
	return &this
}

// GetUpdateDate returns the UpdateDate field value if set, zero value otherwise.
func (o *DetailPostingTypeUpdateInfo) GetUpdateDate() string {
	if o == nil || IsNil(o.UpdateDate) {
		var ret string
		return ret
	}
	return *o.UpdateDate
}

// GetUpdateDateOk returns a tuple with the UpdateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailPostingTypeUpdateInfo) GetUpdateDateOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateDate) {
		return nil, false
	}
	return o.UpdateDate, true
}

// HasUpdateDate returns a boolean if a field has been set.
func (o *DetailPostingTypeUpdateInfo) HasUpdateDate() bool {
	if o != nil && !IsNil(o.UpdateDate) {
		return true
	}

	return false
}

// SetUpdateDate gets a reference to the given string and assigns it to the UpdateDate field.
func (o *DetailPostingTypeUpdateInfo) SetUpdateDate(v string) {
	o.UpdateDate = &v
}

// GetUpdateBy returns the UpdateBy field value if set, zero value otherwise.
func (o *DetailPostingTypeUpdateInfo) GetUpdateBy() string {
	if o == nil || IsNil(o.UpdateBy) {
		var ret string
		return ret
	}
	return *o.UpdateBy
}

// GetUpdateByOk returns a tuple with the UpdateBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailPostingTypeUpdateInfo) GetUpdateByOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateBy) {
		return nil, false
	}
	return o.UpdateBy, true
}

// HasUpdateBy returns a boolean if a field has been set.
func (o *DetailPostingTypeUpdateInfo) HasUpdateBy() bool {
	if o != nil && !IsNil(o.UpdateBy) {
		return true
	}

	return false
}

// SetUpdateBy gets a reference to the given string and assigns it to the UpdateBy field.
func (o *DetailPostingTypeUpdateInfo) SetUpdateBy(v string) {
	o.UpdateBy = &v
}

func (o DetailPostingTypeUpdateInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DetailPostingTypeUpdateInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UpdateDate) {
		toSerialize["updateDate"] = o.UpdateDate
	}
	if !IsNil(o.UpdateBy) {
		toSerialize["updateBy"] = o.UpdateBy
	}
	return toSerialize, nil
}

type NullableDetailPostingTypeUpdateInfo struct {
	value *DetailPostingTypeUpdateInfo
	isSet bool
}

func (v NullableDetailPostingTypeUpdateInfo) Get() *DetailPostingTypeUpdateInfo {
	return v.value
}

func (v *NullableDetailPostingTypeUpdateInfo) Set(val *DetailPostingTypeUpdateInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDetailPostingTypeUpdateInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDetailPostingTypeUpdateInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetailPostingTypeUpdateInfo(val *DetailPostingTypeUpdateInfo) *NullableDetailPostingTypeUpdateInfo {
	return &NullableDetailPostingTypeUpdateInfo{value: val, isSet: true}
}

func (v NullableDetailPostingTypeUpdateInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetailPostingTypeUpdateInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


