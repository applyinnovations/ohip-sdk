/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
	"fmt"
)

// FiscalSupportingDocumentType Fiscal Supporting Document Type
type FiscalSupportingDocumentType string

// List of fiscalSupportingDocumentType
const (
	FISCALSUPPORTINGDOCUMENTTYPE_INFORMATION_FOLIO FiscalSupportingDocumentType = "InformationFolio"
	FISCALSUPPORTINGDOCUMENTTYPE_PROFORMA_FOLIO FiscalSupportingDocumentType = "ProformaFolio"
)

// All allowed values of FiscalSupportingDocumentType enum
var AllowedFiscalSupportingDocumentTypeEnumValues = []FiscalSupportingDocumentType{
	"InformationFolio",
	"ProformaFolio",
}

func (v *FiscalSupportingDocumentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FiscalSupportingDocumentType(value)
	for _, existing := range AllowedFiscalSupportingDocumentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FiscalSupportingDocumentType", value)
}

// NewFiscalSupportingDocumentTypeFromValue returns a pointer to a valid FiscalSupportingDocumentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFiscalSupportingDocumentTypeFromValue(v string) (*FiscalSupportingDocumentType, error) {
	ev := FiscalSupportingDocumentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FiscalSupportingDocumentType: valid values are %v", v, AllowedFiscalSupportingDocumentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FiscalSupportingDocumentType) IsValid() bool {
	for _, existing := range AllowedFiscalSupportingDocumentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to fiscalSupportingDocumentType value
func (v FiscalSupportingDocumentType) Ptr() *FiscalSupportingDocumentType {
	return &v
}

type NullableFiscalSupportingDocumentType struct {
	value *FiscalSupportingDocumentType
	isSet bool
}

func (v NullableFiscalSupportingDocumentType) Get() *FiscalSupportingDocumentType {
	return v.value
}

func (v *NullableFiscalSupportingDocumentType) Set(val *FiscalSupportingDocumentType) {
	v.value = val
	v.isSet = true
}

func (v NullableFiscalSupportingDocumentType) IsSet() bool {
	return v.isSet
}

func (v *NullableFiscalSupportingDocumentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiscalSupportingDocumentType(val *FiscalSupportingDocumentType) *NullableFiscalSupportingDocumentType {
	return &NullableFiscalSupportingDocumentType{value: val, isSet: true}
}

func (v NullableFiscalSupportingDocumentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiscalSupportingDocumentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

