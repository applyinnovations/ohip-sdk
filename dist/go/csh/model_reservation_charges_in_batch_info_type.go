/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the ReservationChargesInBatchInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReservationChargesInBatchInfoType{}

// ReservationChargesInBatchInfoType Result of charges in batch for each reservation.
type ReservationChargesInBatchInfoType struct {
	ReservationId *ReservationId `json:"reservationId,omitempty"`
	// Arrival date of the reservation.
	ArrivalDate *string `json:"arrivalDate,omitempty"`
	// Departure date of the reservation.
	DepartureDate *string `json:"departureDate,omitempty"`
	// Guest name associated to the reservation.
	GuestName *string `json:"guestName,omitempty"`
	// Room number associated to the reservation.
	RoomId *string `json:"roomId,omitempty"`
	// Indicator that tells whether posting is allowed for the reservation
	PostingAllowed *bool `json:"postingAllowed,omitempty"`
	// Returning an empty element of this type indicates the successful processing of an message. This is used in conjunction with the Warning Type to report any warnings or business errors.
	Success map[string]interface{} `json:"success,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
	// An error that occurred during the processing of a message.
	Errors []ErrorType `json:"errors,omitempty"`
}

// NewReservationChargesInBatchInfoType instantiates a new ReservationChargesInBatchInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservationChargesInBatchInfoType() *ReservationChargesInBatchInfoType {
	this := ReservationChargesInBatchInfoType{}
	return &this
}

// NewReservationChargesInBatchInfoTypeWithDefaults instantiates a new ReservationChargesInBatchInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservationChargesInBatchInfoTypeWithDefaults() *ReservationChargesInBatchInfoType {
	this := ReservationChargesInBatchInfoType{}
	return &this
}

// GetReservationId returns the ReservationId field value if set, zero value otherwise.
func (o *ReservationChargesInBatchInfoType) GetReservationId() ReservationId {
	if o == nil || IsNil(o.ReservationId) {
		var ret ReservationId
		return ret
	}
	return *o.ReservationId
}

// GetReservationIdOk returns a tuple with the ReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationChargesInBatchInfoType) GetReservationIdOk() (*ReservationId, bool) {
	if o == nil || IsNil(o.ReservationId) {
		return nil, false
	}
	return o.ReservationId, true
}

// HasReservationId returns a boolean if a field has been set.
func (o *ReservationChargesInBatchInfoType) HasReservationId() bool {
	if o != nil && !IsNil(o.ReservationId) {
		return true
	}

	return false
}

// SetReservationId gets a reference to the given ReservationId and assigns it to the ReservationId field.
func (o *ReservationChargesInBatchInfoType) SetReservationId(v ReservationId) {
	o.ReservationId = &v
}

// GetArrivalDate returns the ArrivalDate field value if set, zero value otherwise.
func (o *ReservationChargesInBatchInfoType) GetArrivalDate() string {
	if o == nil || IsNil(o.ArrivalDate) {
		var ret string
		return ret
	}
	return *o.ArrivalDate
}

// GetArrivalDateOk returns a tuple with the ArrivalDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationChargesInBatchInfoType) GetArrivalDateOk() (*string, bool) {
	if o == nil || IsNil(o.ArrivalDate) {
		return nil, false
	}
	return o.ArrivalDate, true
}

// HasArrivalDate returns a boolean if a field has been set.
func (o *ReservationChargesInBatchInfoType) HasArrivalDate() bool {
	if o != nil && !IsNil(o.ArrivalDate) {
		return true
	}

	return false
}

// SetArrivalDate gets a reference to the given string and assigns it to the ArrivalDate field.
func (o *ReservationChargesInBatchInfoType) SetArrivalDate(v string) {
	o.ArrivalDate = &v
}

// GetDepartureDate returns the DepartureDate field value if set, zero value otherwise.
func (o *ReservationChargesInBatchInfoType) GetDepartureDate() string {
	if o == nil || IsNil(o.DepartureDate) {
		var ret string
		return ret
	}
	return *o.DepartureDate
}

// GetDepartureDateOk returns a tuple with the DepartureDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationChargesInBatchInfoType) GetDepartureDateOk() (*string, bool) {
	if o == nil || IsNil(o.DepartureDate) {
		return nil, false
	}
	return o.DepartureDate, true
}

// HasDepartureDate returns a boolean if a field has been set.
func (o *ReservationChargesInBatchInfoType) HasDepartureDate() bool {
	if o != nil && !IsNil(o.DepartureDate) {
		return true
	}

	return false
}

// SetDepartureDate gets a reference to the given string and assigns it to the DepartureDate field.
func (o *ReservationChargesInBatchInfoType) SetDepartureDate(v string) {
	o.DepartureDate = &v
}

// GetGuestName returns the GuestName field value if set, zero value otherwise.
func (o *ReservationChargesInBatchInfoType) GetGuestName() string {
	if o == nil || IsNil(o.GuestName) {
		var ret string
		return ret
	}
	return *o.GuestName
}

// GetGuestNameOk returns a tuple with the GuestName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationChargesInBatchInfoType) GetGuestNameOk() (*string, bool) {
	if o == nil || IsNil(o.GuestName) {
		return nil, false
	}
	return o.GuestName, true
}

// HasGuestName returns a boolean if a field has been set.
func (o *ReservationChargesInBatchInfoType) HasGuestName() bool {
	if o != nil && !IsNil(o.GuestName) {
		return true
	}

	return false
}

// SetGuestName gets a reference to the given string and assigns it to the GuestName field.
func (o *ReservationChargesInBatchInfoType) SetGuestName(v string) {
	o.GuestName = &v
}

// GetRoomId returns the RoomId field value if set, zero value otherwise.
func (o *ReservationChargesInBatchInfoType) GetRoomId() string {
	if o == nil || IsNil(o.RoomId) {
		var ret string
		return ret
	}
	return *o.RoomId
}

// GetRoomIdOk returns a tuple with the RoomId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationChargesInBatchInfoType) GetRoomIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoomId) {
		return nil, false
	}
	return o.RoomId, true
}

// HasRoomId returns a boolean if a field has been set.
func (o *ReservationChargesInBatchInfoType) HasRoomId() bool {
	if o != nil && !IsNil(o.RoomId) {
		return true
	}

	return false
}

// SetRoomId gets a reference to the given string and assigns it to the RoomId field.
func (o *ReservationChargesInBatchInfoType) SetRoomId(v string) {
	o.RoomId = &v
}

// GetPostingAllowed returns the PostingAllowed field value if set, zero value otherwise.
func (o *ReservationChargesInBatchInfoType) GetPostingAllowed() bool {
	if o == nil || IsNil(o.PostingAllowed) {
		var ret bool
		return ret
	}
	return *o.PostingAllowed
}

// GetPostingAllowedOk returns a tuple with the PostingAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationChargesInBatchInfoType) GetPostingAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.PostingAllowed) {
		return nil, false
	}
	return o.PostingAllowed, true
}

// HasPostingAllowed returns a boolean if a field has been set.
func (o *ReservationChargesInBatchInfoType) HasPostingAllowed() bool {
	if o != nil && !IsNil(o.PostingAllowed) {
		return true
	}

	return false
}

// SetPostingAllowed gets a reference to the given bool and assigns it to the PostingAllowed field.
func (o *ReservationChargesInBatchInfoType) SetPostingAllowed(v bool) {
	o.PostingAllowed = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *ReservationChargesInBatchInfoType) GetSuccess() map[string]interface{} {
	if o == nil || IsNil(o.Success) {
		var ret map[string]interface{}
		return ret
	}
	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationChargesInBatchInfoType) GetSuccessOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Success) {
		return map[string]interface{}{}, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *ReservationChargesInBatchInfoType) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given map[string]interface{} and assigns it to the Success field.
func (o *ReservationChargesInBatchInfoType) SetSuccess(v map[string]interface{}) {
	o.Success = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ReservationChargesInBatchInfoType) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationChargesInBatchInfoType) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ReservationChargesInBatchInfoType) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ReservationChargesInBatchInfoType) SetWarnings(v []WarningType) {
	o.Warnings = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ReservationChargesInBatchInfoType) GetErrors() []ErrorType {
	if o == nil || IsNil(o.Errors) {
		var ret []ErrorType
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationChargesInBatchInfoType) GetErrorsOk() ([]ErrorType, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ReservationChargesInBatchInfoType) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ErrorType and assigns it to the Errors field.
func (o *ReservationChargesInBatchInfoType) SetErrors(v []ErrorType) {
	o.Errors = v
}

func (o ReservationChargesInBatchInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReservationChargesInBatchInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReservationId) {
		toSerialize["reservationId"] = o.ReservationId
	}
	if !IsNil(o.ArrivalDate) {
		toSerialize["arrivalDate"] = o.ArrivalDate
	}
	if !IsNil(o.DepartureDate) {
		toSerialize["departureDate"] = o.DepartureDate
	}
	if !IsNil(o.GuestName) {
		toSerialize["guestName"] = o.GuestName
	}
	if !IsNil(o.RoomId) {
		toSerialize["roomId"] = o.RoomId
	}
	if !IsNil(o.PostingAllowed) {
		toSerialize["postingAllowed"] = o.PostingAllowed
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableReservationChargesInBatchInfoType struct {
	value *ReservationChargesInBatchInfoType
	isSet bool
}

func (v NullableReservationChargesInBatchInfoType) Get() *ReservationChargesInBatchInfoType {
	return v.value
}

func (v *NullableReservationChargesInBatchInfoType) Set(val *ReservationChargesInBatchInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationChargesInBatchInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationChargesInBatchInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationChargesInBatchInfoType(val *ReservationChargesInBatchInfoType) *NullableReservationChargesInBatchInfoType {
	return &NullableReservationChargesInBatchInfoType{value: val, isSet: true}
}

func (v NullableReservationChargesInBatchInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationChargesInBatchInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


