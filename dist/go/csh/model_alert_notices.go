/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the AlertNotices type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertNotices{}

// AlertNotices Response with the fetched alerts, includes global alerts.
type AlertNotices struct {
	// List of alerts.
	Alerts []AlertType `json:"alerts,omitempty"`
	// List of Notes for the Guest related to the reservation.
	Comments []CommentInfoType `json:"comments,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewAlertNotices instantiates a new AlertNotices object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertNotices() *AlertNotices {
	this := AlertNotices{}
	return &this
}

// NewAlertNoticesWithDefaults instantiates a new AlertNotices object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertNoticesWithDefaults() *AlertNotices {
	this := AlertNotices{}
	return &this
}

// GetAlerts returns the Alerts field value if set, zero value otherwise.
func (o *AlertNotices) GetAlerts() []AlertType {
	if o == nil || IsNil(o.Alerts) {
		var ret []AlertType
		return ret
	}
	return o.Alerts
}

// GetAlertsOk returns a tuple with the Alerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertNotices) GetAlertsOk() ([]AlertType, bool) {
	if o == nil || IsNil(o.Alerts) {
		return nil, false
	}
	return o.Alerts, true
}

// HasAlerts returns a boolean if a field has been set.
func (o *AlertNotices) HasAlerts() bool {
	if o != nil && !IsNil(o.Alerts) {
		return true
	}

	return false
}

// SetAlerts gets a reference to the given []AlertType and assigns it to the Alerts field.
func (o *AlertNotices) SetAlerts(v []AlertType) {
	o.Alerts = v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *AlertNotices) GetComments() []CommentInfoType {
	if o == nil || IsNil(o.Comments) {
		var ret []CommentInfoType
		return ret
	}
	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertNotices) GetCommentsOk() ([]CommentInfoType, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *AlertNotices) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given []CommentInfoType and assigns it to the Comments field.
func (o *AlertNotices) SetComments(v []CommentInfoType) {
	o.Comments = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *AlertNotices) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertNotices) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *AlertNotices) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *AlertNotices) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *AlertNotices) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertNotices) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *AlertNotices) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *AlertNotices) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o AlertNotices) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertNotices) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Alerts) {
		toSerialize["alerts"] = o.Alerts
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableAlertNotices struct {
	value *AlertNotices
	isSet bool
}

func (v NullableAlertNotices) Get() *AlertNotices {
	return v.value
}

func (v *NullableAlertNotices) Set(val *AlertNotices) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertNotices) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertNotices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertNotices(val *AlertNotices) *NullableAlertNotices {
	return &NullableAlertNotices{value: val, isSet: true}
}

func (v NullableAlertNotices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertNotices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


