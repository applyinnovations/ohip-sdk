/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the BackToBackResSequenceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackToBackResSequenceType{}

// BackToBackResSequenceType Type object represents Back To Back Sequence Position and Total Count of Linked Back To Back Reservations ordered by consecutive Stay Dates.
type BackToBackResSequenceType struct {
	// Indicates the Sequence position of Back to Back Reservation.
	Position *int32 `json:"position,omitempty"`
	// Indicates the total count of Back To Back Reservations in the group of Linked Reservations.
	TotalCount *int32 `json:"totalCount,omitempty"`
}

// NewBackToBackResSequenceType instantiates a new BackToBackResSequenceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackToBackResSequenceType() *BackToBackResSequenceType {
	this := BackToBackResSequenceType{}
	return &this
}

// NewBackToBackResSequenceTypeWithDefaults instantiates a new BackToBackResSequenceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackToBackResSequenceTypeWithDefaults() *BackToBackResSequenceType {
	this := BackToBackResSequenceType{}
	return &this
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *BackToBackResSequenceType) GetPosition() int32 {
	if o == nil || IsNil(o.Position) {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackToBackResSequenceType) GetPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *BackToBackResSequenceType) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *BackToBackResSequenceType) SetPosition(v int32) {
	o.Position = &v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *BackToBackResSequenceType) GetTotalCount() int32 {
	if o == nil || IsNil(o.TotalCount) {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackToBackResSequenceType) GetTotalCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *BackToBackResSequenceType) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *BackToBackResSequenceType) SetTotalCount(v int32) {
	o.TotalCount = &v
}

func (o BackToBackResSequenceType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackToBackResSequenceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.TotalCount) {
		toSerialize["totalCount"] = o.TotalCount
	}
	return toSerialize, nil
}

type NullableBackToBackResSequenceType struct {
	value *BackToBackResSequenceType
	isSet bool
}

func (v NullableBackToBackResSequenceType) Get() *BackToBackResSequenceType {
	return v.value
}

func (v *NullableBackToBackResSequenceType) Set(val *BackToBackResSequenceType) {
	v.value = val
	v.isSet = true
}

func (v NullableBackToBackResSequenceType) IsSet() bool {
	return v.isSet
}

func (v *NullableBackToBackResSequenceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackToBackResSequenceType(val *BackToBackResSequenceType) *NullableBackToBackResSequenceType {
	return &NullableBackToBackResSequenceType{value: val, isSet: true}
}

func (v NullableBackToBackResSequenceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackToBackResSequenceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


