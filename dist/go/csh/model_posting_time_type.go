/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the PostingTimeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostingTimeType{}

// PostingTimeType Time of posting.
type PostingTimeType struct {
	// Time of posting.
	Time *string `json:"time,omitempty"`
	// Timezone associated with posting time.
	Timezone *string `json:"timezone,omitempty"`
}

// NewPostingTimeType instantiates a new PostingTimeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostingTimeType() *PostingTimeType {
	this := PostingTimeType{}
	return &this
}

// NewPostingTimeTypeWithDefaults instantiates a new PostingTimeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostingTimeTypeWithDefaults() *PostingTimeType {
	this := PostingTimeType{}
	return &this
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *PostingTimeType) GetTime() string {
	if o == nil || IsNil(o.Time) {
		var ret string
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostingTimeType) GetTimeOk() (*string, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *PostingTimeType) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given string and assigns it to the Time field.
func (o *PostingTimeType) SetTime(v string) {
	o.Time = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *PostingTimeType) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostingTimeType) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *PostingTimeType) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *PostingTimeType) SetTimezone(v string) {
	o.Timezone = &v
}

func (o PostingTimeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostingTimeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	return toSerialize, nil
}

type NullablePostingTimeType struct {
	value *PostingTimeType
	isSet bool
}

func (v NullablePostingTimeType) Get() *PostingTimeType {
	return v.value
}

func (v *NullablePostingTimeType) Set(val *PostingTimeType) {
	v.value = val
	v.isSet = true
}

func (v NullablePostingTimeType) IsSet() bool {
	return v.isSet
}

func (v *NullablePostingTimeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostingTimeType(val *PostingTimeType) *NullablePostingTimeType {
	return &NullablePostingTimeType{value: val, isSet: true}
}

func (v NullablePostingTimeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostingTimeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


