/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
	"fmt"
)

// VaultHTTPTransactionType the model 'VaultHTTPTransactionType'
type VaultHTTPTransactionType string

// List of vaultHTTPTransactionType
const (
	VAULTHTTPTRANSACTIONTYPE_CC_UNIQUE_ID VaultHTTPTransactionType = "CCUniqueID"
	VAULTHTTPTRANSACTIONTYPE_CC_NUMBER VaultHTTPTransactionType = "CCNumber"
	VAULTHTTPTRANSACTIONTYPE_FOLIO_AUTHORIZATION VaultHTTPTransactionType = "FolioAuthorization"
)

// All allowed values of VaultHTTPTransactionType enum
var AllowedVaultHTTPTransactionTypeEnumValues = []VaultHTTPTransactionType{
	"CCUniqueID",
	"CCNumber",
	"FolioAuthorization",
}

func (v *VaultHTTPTransactionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VaultHTTPTransactionType(value)
	for _, existing := range AllowedVaultHTTPTransactionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VaultHTTPTransactionType", value)
}

// NewVaultHTTPTransactionTypeFromValue returns a pointer to a valid VaultHTTPTransactionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVaultHTTPTransactionTypeFromValue(v string) (*VaultHTTPTransactionType, error) {
	ev := VaultHTTPTransactionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VaultHTTPTransactionType: valid values are %v", v, AllowedVaultHTTPTransactionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VaultHTTPTransactionType) IsValid() bool {
	for _, existing := range AllowedVaultHTTPTransactionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vaultHTTPTransactionType value
func (v VaultHTTPTransactionType) Ptr() *VaultHTTPTransactionType {
	return &v
}

type NullableVaultHTTPTransactionType struct {
	value *VaultHTTPTransactionType
	isSet bool
}

func (v NullableVaultHTTPTransactionType) Get() *VaultHTTPTransactionType {
	return v.value
}

func (v *NullableVaultHTTPTransactionType) Set(val *VaultHTTPTransactionType) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultHTTPTransactionType) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultHTTPTransactionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultHTTPTransactionType(val *VaultHTTPTransactionType) *NullableVaultHTTPTransactionType {
	return &NullableVaultHTTPTransactionType{value: val, isSet: true}
}

func (v NullableVaultHTTPTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultHTTPTransactionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

