/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the VaultHTTPTransactionMessageTypeAuthorizationApproval type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VaultHTTPTransactionMessageTypeAuthorizationApproval{}

// VaultHTTPTransactionMessageTypeAuthorizationApproval Authorization approval record.
type VaultHTTPTransactionMessageTypeAuthorizationApproval struct {
	ProfileId *ProfileId `json:"profileId,omitempty"`
	// Unique Id that references an object uniquely in the system.
	ReservationIdList []UniqueIDType `json:"reservationIdList,omitempty"`
	ApprovalAmount *CurrencyAmountType `json:"approvalAmount,omitempty"`
	AuthorizedPaymentRecord *ReservationPaymentMethodType `json:"authorizedPaymentRecord,omitempty"`
	// The approval code authenticates the authorization.
	ApprovalCode *string `json:"approvalCode,omitempty"`
	// Unique Authorization Sequence for the authorization and settlement.
	OriginalAuthSequence *int32 `json:"originalAuthSequence,omitempty"`
	CardSwiped *bool `json:"cardSwiped,omitempty"`
	SourceOfAuthorization *CardAuthorizationTransactionType `json:"sourceOfAuthorization,omitempty"`
}

// NewVaultHTTPTransactionMessageTypeAuthorizationApproval instantiates a new VaultHTTPTransactionMessageTypeAuthorizationApproval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVaultHTTPTransactionMessageTypeAuthorizationApproval() *VaultHTTPTransactionMessageTypeAuthorizationApproval {
	this := VaultHTTPTransactionMessageTypeAuthorizationApproval{}
	return &this
}

// NewVaultHTTPTransactionMessageTypeAuthorizationApprovalWithDefaults instantiates a new VaultHTTPTransactionMessageTypeAuthorizationApproval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultHTTPTransactionMessageTypeAuthorizationApprovalWithDefaults() *VaultHTTPTransactionMessageTypeAuthorizationApproval {
	this := VaultHTTPTransactionMessageTypeAuthorizationApproval{}
	return &this
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) GetProfileId() ProfileId {
	if o == nil || IsNil(o.ProfileId) {
		var ret ProfileId
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) GetProfileIdOk() (*ProfileId, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) HasProfileId() bool {
	if o != nil && !IsNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given ProfileId and assigns it to the ProfileId field.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) SetProfileId(v ProfileId) {
	o.ProfileId = &v
}

// GetReservationIdList returns the ReservationIdList field value if set, zero value otherwise.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) GetReservationIdList() []UniqueIDType {
	if o == nil || IsNil(o.ReservationIdList) {
		var ret []UniqueIDType
		return ret
	}
	return o.ReservationIdList
}

// GetReservationIdListOk returns a tuple with the ReservationIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) GetReservationIdListOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.ReservationIdList) {
		return nil, false
	}
	return o.ReservationIdList, true
}

// HasReservationIdList returns a boolean if a field has been set.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) HasReservationIdList() bool {
	if o != nil && !IsNil(o.ReservationIdList) {
		return true
	}

	return false
}

// SetReservationIdList gets a reference to the given []UniqueIDType and assigns it to the ReservationIdList field.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) SetReservationIdList(v []UniqueIDType) {
	o.ReservationIdList = v
}

// GetApprovalAmount returns the ApprovalAmount field value if set, zero value otherwise.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) GetApprovalAmount() CurrencyAmountType {
	if o == nil || IsNil(o.ApprovalAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.ApprovalAmount
}

// GetApprovalAmountOk returns a tuple with the ApprovalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) GetApprovalAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.ApprovalAmount) {
		return nil, false
	}
	return o.ApprovalAmount, true
}

// HasApprovalAmount returns a boolean if a field has been set.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) HasApprovalAmount() bool {
	if o != nil && !IsNil(o.ApprovalAmount) {
		return true
	}

	return false
}

// SetApprovalAmount gets a reference to the given CurrencyAmountType and assigns it to the ApprovalAmount field.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) SetApprovalAmount(v CurrencyAmountType) {
	o.ApprovalAmount = &v
}

// GetAuthorizedPaymentRecord returns the AuthorizedPaymentRecord field value if set, zero value otherwise.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) GetAuthorizedPaymentRecord() ReservationPaymentMethodType {
	if o == nil || IsNil(o.AuthorizedPaymentRecord) {
		var ret ReservationPaymentMethodType
		return ret
	}
	return *o.AuthorizedPaymentRecord
}

// GetAuthorizedPaymentRecordOk returns a tuple with the AuthorizedPaymentRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) GetAuthorizedPaymentRecordOk() (*ReservationPaymentMethodType, bool) {
	if o == nil || IsNil(o.AuthorizedPaymentRecord) {
		return nil, false
	}
	return o.AuthorizedPaymentRecord, true
}

// HasAuthorizedPaymentRecord returns a boolean if a field has been set.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) HasAuthorizedPaymentRecord() bool {
	if o != nil && !IsNil(o.AuthorizedPaymentRecord) {
		return true
	}

	return false
}

// SetAuthorizedPaymentRecord gets a reference to the given ReservationPaymentMethodType and assigns it to the AuthorizedPaymentRecord field.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) SetAuthorizedPaymentRecord(v ReservationPaymentMethodType) {
	o.AuthorizedPaymentRecord = &v
}

// GetApprovalCode returns the ApprovalCode field value if set, zero value otherwise.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) GetApprovalCode() string {
	if o == nil || IsNil(o.ApprovalCode) {
		var ret string
		return ret
	}
	return *o.ApprovalCode
}

// GetApprovalCodeOk returns a tuple with the ApprovalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) GetApprovalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ApprovalCode) {
		return nil, false
	}
	return o.ApprovalCode, true
}

// HasApprovalCode returns a boolean if a field has been set.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) HasApprovalCode() bool {
	if o != nil && !IsNil(o.ApprovalCode) {
		return true
	}

	return false
}

// SetApprovalCode gets a reference to the given string and assigns it to the ApprovalCode field.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) SetApprovalCode(v string) {
	o.ApprovalCode = &v
}

// GetOriginalAuthSequence returns the OriginalAuthSequence field value if set, zero value otherwise.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) GetOriginalAuthSequence() int32 {
	if o == nil || IsNil(o.OriginalAuthSequence) {
		var ret int32
		return ret
	}
	return *o.OriginalAuthSequence
}

// GetOriginalAuthSequenceOk returns a tuple with the OriginalAuthSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) GetOriginalAuthSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.OriginalAuthSequence) {
		return nil, false
	}
	return o.OriginalAuthSequence, true
}

// HasOriginalAuthSequence returns a boolean if a field has been set.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) HasOriginalAuthSequence() bool {
	if o != nil && !IsNil(o.OriginalAuthSequence) {
		return true
	}

	return false
}

// SetOriginalAuthSequence gets a reference to the given int32 and assigns it to the OriginalAuthSequence field.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) SetOriginalAuthSequence(v int32) {
	o.OriginalAuthSequence = &v
}

// GetCardSwiped returns the CardSwiped field value if set, zero value otherwise.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) GetCardSwiped() bool {
	if o == nil || IsNil(o.CardSwiped) {
		var ret bool
		return ret
	}
	return *o.CardSwiped
}

// GetCardSwipedOk returns a tuple with the CardSwiped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) GetCardSwipedOk() (*bool, bool) {
	if o == nil || IsNil(o.CardSwiped) {
		return nil, false
	}
	return o.CardSwiped, true
}

// HasCardSwiped returns a boolean if a field has been set.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) HasCardSwiped() bool {
	if o != nil && !IsNil(o.CardSwiped) {
		return true
	}

	return false
}

// SetCardSwiped gets a reference to the given bool and assigns it to the CardSwiped field.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) SetCardSwiped(v bool) {
	o.CardSwiped = &v
}

// GetSourceOfAuthorization returns the SourceOfAuthorization field value if set, zero value otherwise.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) GetSourceOfAuthorization() CardAuthorizationTransactionType {
	if o == nil || IsNil(o.SourceOfAuthorization) {
		var ret CardAuthorizationTransactionType
		return ret
	}
	return *o.SourceOfAuthorization
}

// GetSourceOfAuthorizationOk returns a tuple with the SourceOfAuthorization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) GetSourceOfAuthorizationOk() (*CardAuthorizationTransactionType, bool) {
	if o == nil || IsNil(o.SourceOfAuthorization) {
		return nil, false
	}
	return o.SourceOfAuthorization, true
}

// HasSourceOfAuthorization returns a boolean if a field has been set.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) HasSourceOfAuthorization() bool {
	if o != nil && !IsNil(o.SourceOfAuthorization) {
		return true
	}

	return false
}

// SetSourceOfAuthorization gets a reference to the given CardAuthorizationTransactionType and assigns it to the SourceOfAuthorization field.
func (o *VaultHTTPTransactionMessageTypeAuthorizationApproval) SetSourceOfAuthorization(v CardAuthorizationTransactionType) {
	o.SourceOfAuthorization = &v
}

func (o VaultHTTPTransactionMessageTypeAuthorizationApproval) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VaultHTTPTransactionMessageTypeAuthorizationApproval) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProfileId) {
		toSerialize["profileId"] = o.ProfileId
	}
	if !IsNil(o.ReservationIdList) {
		toSerialize["reservationIdList"] = o.ReservationIdList
	}
	if !IsNil(o.ApprovalAmount) {
		toSerialize["approvalAmount"] = o.ApprovalAmount
	}
	if !IsNil(o.AuthorizedPaymentRecord) {
		toSerialize["authorizedPaymentRecord"] = o.AuthorizedPaymentRecord
	}
	if !IsNil(o.ApprovalCode) {
		toSerialize["approvalCode"] = o.ApprovalCode
	}
	if !IsNil(o.OriginalAuthSequence) {
		toSerialize["originalAuthSequence"] = o.OriginalAuthSequence
	}
	if !IsNil(o.CardSwiped) {
		toSerialize["cardSwiped"] = o.CardSwiped
	}
	if !IsNil(o.SourceOfAuthorization) {
		toSerialize["sourceOfAuthorization"] = o.SourceOfAuthorization
	}
	return toSerialize, nil
}

type NullableVaultHTTPTransactionMessageTypeAuthorizationApproval struct {
	value *VaultHTTPTransactionMessageTypeAuthorizationApproval
	isSet bool
}

func (v NullableVaultHTTPTransactionMessageTypeAuthorizationApproval) Get() *VaultHTTPTransactionMessageTypeAuthorizationApproval {
	return v.value
}

func (v *NullableVaultHTTPTransactionMessageTypeAuthorizationApproval) Set(val *VaultHTTPTransactionMessageTypeAuthorizationApproval) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultHTTPTransactionMessageTypeAuthorizationApproval) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultHTTPTransactionMessageTypeAuthorizationApproval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultHTTPTransactionMessageTypeAuthorizationApproval(val *VaultHTTPTransactionMessageTypeAuthorizationApproval) *NullableVaultHTTPTransactionMessageTypeAuthorizationApproval {
	return &NullableVaultHTTPTransactionMessageTypeAuthorizationApproval{value: val, isSet: true}
}

func (v NullableVaultHTTPTransactionMessageTypeAuthorizationApproval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultHTTPTransactionMessageTypeAuthorizationApproval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


