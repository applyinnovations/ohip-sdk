/*
OPERA Cloud Cashiering API

Testing CashieringAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package csh

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/csh"
)

func Test_csh_CashieringAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CashieringAPIService ActivatePrepaidCard", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.ActivatePrepaidCard(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService AdjustTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.AdjustTransactions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService ApplyFinalPostings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.ApplyFinalPostings(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService ApplyFlexibleBenefitPostings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.ApplyFlexibleBenefitPostings(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService AttachDepositPolicyToPayment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var policyId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.AttachDepositPolicyToPayment(context.Background(), transactionId, policyId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService AuthorizeCreditCardAmount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.AuthorizeCreditCardAmount(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService AuthorizeCreditCardAmountByProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.AuthorizeCreditCardAmountByProfile(context.Background(), profileId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService AutoSettleCompFolios", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.AutoSettleCompFolios(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService BreakCashierLock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cashierId string

		resp, httpRes, err := apiClient.CashieringAPI.BreakCashierLock(context.Background(), cashierId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService CalculateForeignCurrency", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CashieringAPI.CalculateForeignCurrency(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService CancelPrepaidCardTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.CancelPrepaidCardTransaction(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService CashOutPrepaidCard", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.CashOutPrepaidCard(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService ChangeBillingPayment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.ChangeBillingPayment(context.Background(), transactionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService ChangeRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.ChangeRoutingInstructions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService ChangeTransactionCovers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.ChangeTransactionCovers(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService CheckPostRateCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateCode string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.CheckPostRateCode(context.Background(), rateCode, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService CloseReservationFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.CloseReservationFolio(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService ConvertFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folioId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.ConvertFolio(context.Background(), folioId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService DeleteAdvanceRoomCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.DeleteAdvanceRoomCharges(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService DeleteCompRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.DeleteCompRoutingInstructions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService DeleteFolioRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.DeleteFolioRoutingInstructions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService DeleteRequestRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.DeleteRequestRoutingInstructions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService DeleteRoomRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.DeleteRoomRoutingInstructions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService DeleteRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.DeleteRoutingInstructions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService DetachDepositPolicyFromPayment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.DetachDepositPolicyFromPayment(context.Background(), transactionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GenerateFiscalFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GenerateFiscalFolio(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GenerateFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GenerateFolio(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetAdditionalTaxes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetAdditionalTaxes(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetAdvancePaymentBalance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetAdvancePaymentBalance(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetAlerts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetAlerts(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetAuthorizationHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetAuthorizationHistory(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetAuthorizersCreditInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetAuthorizersCreditInfo(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetBalanceInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetBalanceInfo(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetBatchCCSettlements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetBatchCCSettlements(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetBatchCCSettlementsStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var batchId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetBatchCCSettlementsStatus(context.Background(), batchId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetBedTaxInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetBedTaxInfo(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetBillingInstructionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetBillingInstructionCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetCCAuthorizationInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetCCAuthorizationInstructions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetCCAuthorizationInstructionsByProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetCCAuthorizationInstructionsByProfile(context.Background(), profileId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetCCSurchargeInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetCCSurchargeInfo(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetCashierClosure", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cashierId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetCashierClosure(context.Background(), cashierId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetCashierClosureInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetCashierClosureInfo(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetCashierClosureReportsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cashierId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetCashierClosureReportsList(context.Background(), cashierId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetCashierLock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cashierId string

		resp, httpRes, err := apiClient.CashieringAPI.GetCashierLock(context.Background(), cashierId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetCashierReportPostings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CashieringAPI.GetCashierReportPostings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetCashierTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cashierId string

		resp, httpRes, err := apiClient.CashieringAPI.GetCashierTransactions(context.Background(), cashierId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetCheckDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var checkNumber string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetCheckDetails(context.Background(), checkNumber, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetCompAccountingJournal", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CashieringAPI.GetCompAccountingJournal(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetCompPostingJournal", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetCompPostingJournal(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetCompRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetCompRoutingInstructions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetCompTrxAuthorizers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetCompTrxAuthorizers(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetCreditLimitOveragePayments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetCreditLimitOveragePayments(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetDepositFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetDepositFolio(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetDepositFolioTransactionDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetDepositFolioTransactionDetails(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetDepositMaturityInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetDepositMaturityInfo(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetEligibleBillAmount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var reservationId string

		resp, httpRes, err := apiClient.CashieringAPI.GetEligibleBillAmount(context.Background(), hotelId, reservationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetFinancialPostings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetFinancialPostings(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetFinancialPostingsNetVat", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetFinancialPostingsNetVat(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetFiscalFolioActivity", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetFiscalFolioActivity(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetFiscalFolioActivityDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folioSeqNo string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetFiscalFolioActivityDetails(context.Background(), folioSeqNo, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetFiscalPrintingDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetFiscalPrintingDetails(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetFiscalSupportingDocuments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetFiscalSupportingDocuments(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetFixedCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetFixedCharges(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetFolio(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetFolioHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetFolioHistory(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetFolioPrinters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetFolioPrinters(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetFolioTaxPaymentsInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetFolioTaxPaymentsInfo(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetFolioTransactionDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetFolioTransactionDetails(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetFolioTypeName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetFolioTypeName(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetFolioTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetFolioTypes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetGamingRequestStatusInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetGamingRequestStatusInfo(context.Background(), transactionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetGuestsTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetGuestsTransactions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetHotelCreditCardWallet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var profileId string

		resp, httpRes, err := apiClient.CashieringAPI.GetHotelCreditCardWallet(context.Background(), hotelId, profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetHotelRevenue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetHotelRevenue(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetMaturedDeposits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetMaturedDeposits(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetPostBillingCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetPostBillingCharges(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetPostingActivityDetail", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetPostingActivityDetail(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetPostingSummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetPostingSummary(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetPostingsForRefresh", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetReservationId string
		var sourceReservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetPostingsForRefresh(context.Background(), targetReservationId, sourceReservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetReceiptHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetReceiptHistory(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetReservationPackageOptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetReservationPackageOptions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetReservationRevenueBucketTotals", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetReservationRevenueBucketTotals(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetReservationVouchers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetReservationVouchers(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetReservationsVouchers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetReservationsVouchers(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetRoundingDifference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CashieringAPI.GetRoundingDifference(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetRoutingInstructions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetStoredFolioDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folioId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetStoredFolioDetails(context.Background(), folioId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetTransactionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetTransactionCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetTransactionCovers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetTransactionCovers(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetValidateFiscalPrintingDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetValidateFiscalPrintingDetails(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService GetfetchStagedTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.GetfetchStagedTransactions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService IsDepositRefundEligible", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.IsDepositRefundEligible(context.Background(), transactionId, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService LinkReservationPackageAllowance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var destinationReservationId string
		var sourceReservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.LinkReservationPackageAllowance(context.Background(), destinationReservationId, sourceReservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostAdvanceFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostAdvanceFolio(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostAdvanceRoomCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostAdvanceRoomCharges(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostArticlesSale", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostArticlesSale(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostAutoCheckoutReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostAutoCheckoutReservations(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostAwardTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var reservationId float32
		var membershipId float32

		resp, httpRes, err := apiClient.CashieringAPI.PostAwardTransaction(context.Background(), hotelId, reservationId, membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostBatchAutoSettlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostBatchAutoSettlement(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostBatchCCSettlements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostBatchCCSettlements(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostBatchDeposit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostBatchDeposit(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostBedTaxInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostBedTaxInfo(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostBillingCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostBillingCharges(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostBillingChargesInBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostBillingChargesInBatch(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostBillingCheckCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var checkNumber string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostBillingCheckCharges(context.Background(), checkNumber, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostBillingPayment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostBillingPayment(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostBulkPrepaidCards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostBulkPrepaidCards(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostCCSettlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostCCSettlement(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostChargesAndPayments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var reservationId string

		resp, httpRes, err := apiClient.CashieringAPI.PostChargesAndPayments(context.Background(), hotelId, reservationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostCheckOut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostCheckOut(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostCompRedemptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostCompRedemptions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostCompTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostCompTransaction(context.Background(), transactionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostCreditBill", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostCreditBill(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostCreditLimitOveragePayments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostCreditLimitOveragePayments(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostDeferredTaxesProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostDeferredTaxesProcess(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostDepositFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostDepositFolio(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostDepositPayment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostDepositPayment(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostDepositPaymentByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var externalSysCode string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostDepositPaymentByExtId(context.Background(), reservationId, externalSysCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostFBAReimbursement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CashieringAPI.PostFBAReimbursement(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostFBASettlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CashieringAPI.PostFBASettlement(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostFiscalCommandInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostFiscalCommandInvoice(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostFiscalInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var reservationId string

		resp, httpRes, err := apiClient.CashieringAPI.PostFiscalInfo(context.Background(), hotelId, reservationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostFiscalInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folioId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostFiscalInvoice(context.Background(), folioId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostFixedCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostFixedCharges(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostForeignCurrencyExchange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CashieringAPI.PostForeignCurrencyExchange(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostGenerateBatchVouchers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostGenerateBatchVouchers(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostGuestCheckDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var checkNumber string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostGuestCheckDetails(context.Background(), checkNumber, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostPasserBySale", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostPasserBySale(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostPrepaidCards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostPrepaidCards(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostProforma", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostProforma(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostProformaFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostProformaFolio(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostRateCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateCode string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostRateCode(context.Background(), rateCode, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostReservationVouchers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostReservationVouchers(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostReversePayment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostReversePayment(context.Background(), transactionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostRoomAndTaxForDayUse", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string

		resp, httpRes, err := apiClient.CashieringAPI.PostRoomAndTaxForDayUse(context.Background(), reservationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostStoredFolioDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folioId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostStoredFolioDetails(context.Background(), folioId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostSupplementalFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostSupplementalFolio(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PostZeroBalanceCheckoutReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PostZeroBalanceCheckoutReservations(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService ProcessFiscalRetry", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folioId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.ProcessFiscalRetry(context.Background(), folioId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService ProcessReservationDeposit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.ProcessReservationDeposit(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService ProcessRoomRoutingRefresh", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetReservationId string
		var sourceReservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.ProcessRoomRoutingRefresh(context.Background(), targetReservationId, sourceReservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PutBedTaxInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taxRegistraitionNo string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PutBedTaxInfo(context.Background(), taxRegistraitionNo, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PutBillingCharge", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PutBillingCharge(context.Background(), transactionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PutBillingCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PutBillingCharges(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PutCashier", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cashierId string

		resp, httpRes, err := apiClient.CashieringAPI.PutCashier(context.Background(), cashierId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PutCashierLock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var lockId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PutCashierLock(context.Background(), lockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PutForEarlyDeparture", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PutForEarlyDeparture(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PutPayeeTaxNumber", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var payeeId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PutPayeeTaxNumber(context.Background(), payeeId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PutReservationDepositTransfer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceReservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PutReservationDepositTransfer(context.Background(), sourceReservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService PutRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.PutRoutingInstructions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService RedeemPrepaidCards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.RedeemPrepaidCards(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService RegisterManualAuthorization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.RegisterManualAuthorization(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService RegisterVaultTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.RegisterVaultTransaction(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService ReinstateCheckOut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.ReinstateCheckOut(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService ReleaseCashierLock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var lockId string

		resp, httpRes, err := apiClient.CashieringAPI.ReleaseCashierLock(context.Background(), lockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService ReloadPrepaidCard", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.ReloadPrepaidCard(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService RemoveBedTaxInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taxRegistraitionNo string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.RemoveBedTaxInfo(context.Background(), taxRegistraitionNo, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService RemoveFixedCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.RemoveFixedCharges(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService ResendSupportingDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.ResendSupportingDocument(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService ReverseARInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.ReverseARInvoice(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService ReverseCertificatePostings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.ReverseCertificatePostings(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService ReverseCompRedemptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.ReverseCompRedemptions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService ReverseFlexibleBenefitPosting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.ReverseFlexibleBenefitPosting(context.Background(), transactionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService ReverseFolioTaxPayment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cashierId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.ReverseFolioTaxPayment(context.Background(), cashierId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService SplitAndTransferTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.SplitAndTransferTransaction(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService SplitDepositTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.SplitDepositTransaction(context.Background(), transactionId, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService SplitTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.SplitTransaction(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService TransferCompTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.TransferCompTransactions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService TransferFolioToWindow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.TransferFolioToWindow(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService TransferTransactionToReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toReservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.TransferTransactionToReservation(context.Background(), toReservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService TransferTransactionToWindow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.TransferTransactionToWindow(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService TransitionDepositToGuestFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.TransitionDepositToGuestFolio(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService UnlinkReservationPackageAllowance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.UnlinkReservationPackageAllowance(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService UpdateFixedCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.UpdateFixedCharges(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService ValidateCreditBill", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.ValidateCreditBill(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService ValidateDepositFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.ValidateDepositFolio(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService ValidateTransactionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.ValidateTransactionCodes(context.Background(), transactionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService VerifyForEarlyDeparture", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.VerifyForEarlyDeparture(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService VoidBillingCheckCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var checkNumber string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.VoidBillingCheckCharges(context.Background(), checkNumber, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringAPIService VoidFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folioId string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringAPI.VoidFolio(context.Background(), folioId, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
