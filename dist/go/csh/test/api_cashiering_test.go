/*
OPERA Cloud Cashiering API

Testing CashieringApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package csh

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/csh"
)

func Test_csh_CashieringApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CashieringApiService ActivatePrepaidCard", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.ActivatePrepaidCard(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService AdjustTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.AdjustTransactions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService ApplyFinalPostings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.ApplyFinalPostings(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService ApplyFlexibleBenefitPostings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.ApplyFlexibleBenefitPostings(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService AttachDepositPolicyToPayment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var policyId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.AttachDepositPolicyToPayment(context.Background(), transactionId, policyId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService AuthorizeCreditCardAmount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.AuthorizeCreditCardAmount(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService AuthorizeCreditCardAmountByProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.AuthorizeCreditCardAmountByProfile(context.Background(), profileId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService AutoSettleCompFolios", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.AutoSettleCompFolios(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService BreakCashierLock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cashierId string

		resp, httpRes, err := apiClient.CashieringApi.BreakCashierLock(context.Background(), cashierId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService CalculateForeignCurrency", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CashieringApi.CalculateForeignCurrency(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService CancelPrepaidCardTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.CancelPrepaidCardTransaction(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService CashOutPrepaidCard", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.CashOutPrepaidCard(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService ChangeBillingPayment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.ChangeBillingPayment(context.Background(), transactionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService ChangeRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.ChangeRoutingInstructions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService CheckPostRateCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateCode string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.CheckPostRateCode(context.Background(), rateCode, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService CloseReservationFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.CloseReservationFolio(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService ConvertFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folioId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.ConvertFolio(context.Background(), folioId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService DeleteAdvanceRoomCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.DeleteAdvanceRoomCharges(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService DeleteCompRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.DeleteCompRoutingInstructions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService DeleteFolioRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.DeleteFolioRoutingInstructions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService DeleteRequestRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.DeleteRequestRoutingInstructions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService DeleteRoomRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.DeleteRoomRoutingInstructions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService DeleteRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.DeleteRoutingInstructions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService DetachDepositPolicyFromPayment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.DetachDepositPolicyFromPayment(context.Background(), transactionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GenerateFiscalFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GenerateFiscalFolio(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GenerateFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GenerateFolio(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetAdditionalTaxes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetAdditionalTaxes(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetAdvancePaymentBalance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetAdvancePaymentBalance(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetAlerts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetAlerts(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetAuthorizationHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetAuthorizationHistory(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetAuthorizersCreditInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetAuthorizersCreditInfo(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetBalanceInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetBalanceInfo(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetBatchCCSettlements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetBatchCCSettlements(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetBatchCCSettlementsStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var batchId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetBatchCCSettlementsStatus(context.Background(), batchId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetBedTaxInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetBedTaxInfo(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetBillingInstructionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetBillingInstructionCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetCCAuthorizationInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetCCAuthorizationInstructions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetCCAuthorizationInstructionsByProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetCCAuthorizationInstructionsByProfile(context.Background(), profileId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetCCSurchargeInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetCCSurchargeInfo(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetCashierClosure", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cashierId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetCashierClosure(context.Background(), cashierId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetCashierClosureInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetCashierClosureInfo(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetCashierClosureReportsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cashierId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetCashierClosureReportsList(context.Background(), cashierId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetCashierLock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cashierId string

		resp, httpRes, err := apiClient.CashieringApi.GetCashierLock(context.Background(), cashierId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetCashierReportPostings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CashieringApi.GetCashierReportPostings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetCashierTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cashierId string

		resp, httpRes, err := apiClient.CashieringApi.GetCashierTransactions(context.Background(), cashierId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetCheckDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var checkNumber string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetCheckDetails(context.Background(), checkNumber, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetCompAccountingJournal", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CashieringApi.GetCompAccountingJournal(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetCompPostingJournal", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetCompPostingJournal(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetCompRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetCompRoutingInstructions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetCompTrxAuthorizers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetCompTrxAuthorizers(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetCreditLimitOveragePayments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetCreditLimitOveragePayments(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetDepositFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetDepositFolio(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetDepositFolioTransactionDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetDepositFolioTransactionDetails(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetDepositMaturityInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetDepositMaturityInfo(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetEligibleBillAmount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var reservationId string

		resp, httpRes, err := apiClient.CashieringApi.GetEligibleBillAmount(context.Background(), hotelId, reservationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetFinancialPostings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetFinancialPostings(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetFinancialPostingsNetVat", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetFinancialPostingsNetVat(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetFiscalFolioActivity", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetFiscalFolioActivity(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetFiscalFolioActivityDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folioSeqNo string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetFiscalFolioActivityDetails(context.Background(), folioSeqNo, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetFiscalPrintingDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetFiscalPrintingDetails(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetFiscalSupportingDocuments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetFiscalSupportingDocuments(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetFixedCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetFixedCharges(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetFolio(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetFolioHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetFolioHistory(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetFolioPrinters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetFolioPrinters(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetFolioTaxPaymentsInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetFolioTaxPaymentsInfo(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetFolioTransactionDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetFolioTransactionDetails(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetFolioTypeName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetFolioTypeName(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetFolioTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetFolioTypes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetGamingRequestStatusInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetGamingRequestStatusInfo(context.Background(), transactionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetGuestsTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetGuestsTransactions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetHotelCreditCardWallet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var profileId string

		resp, httpRes, err := apiClient.CashieringApi.GetHotelCreditCardWallet(context.Background(), hotelId, profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetHotelRevenue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetHotelRevenue(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetMaturedDeposits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetMaturedDeposits(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetPostBillingCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetPostBillingCharges(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetPostingActivityDetail", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetPostingActivityDetail(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetPostingSummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetPostingSummary(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetPostingsForRefresh", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetReservationId string
		var sourceReservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetPostingsForRefresh(context.Background(), targetReservationId, sourceReservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetReceiptHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetReceiptHistory(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetReservationPackageOptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetReservationPackageOptions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetReservationRevenueBucketTotals", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetReservationRevenueBucketTotals(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetRoundingDifference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CashieringApi.GetRoundingDifference(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetRoutingInstructions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetStoredFolioDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folioId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetStoredFolioDetails(context.Background(), folioId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetTransactionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetTransactionCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetValidateFiscalPrintingDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetValidateFiscalPrintingDetails(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService GetfetchStagedTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.GetfetchStagedTransactions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService IsDepositRefundEligible", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.IsDepositRefundEligible(context.Background(), transactionId, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService LinkReservationPackageAllowance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var destinationReservationId string
		var sourceReservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.LinkReservationPackageAllowance(context.Background(), destinationReservationId, sourceReservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostAdvanceFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostAdvanceFolio(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostAdvanceRoomCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostAdvanceRoomCharges(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostArticlesSale", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostArticlesSale(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostAutoCheckoutReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostAutoCheckoutReservations(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostAwardTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var reservationId float32
		var membershipId float32

		resp, httpRes, err := apiClient.CashieringApi.PostAwardTransaction(context.Background(), hotelId, reservationId, membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostBatchAutoSettlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostBatchAutoSettlement(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostBatchCCSettlements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostBatchCCSettlements(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostBatchDeposit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostBatchDeposit(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostBedTaxInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostBedTaxInfo(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostBillingCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostBillingCharges(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostBillingChargesInBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostBillingChargesInBatch(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostBillingCheckCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var checkNumber string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostBillingCheckCharges(context.Background(), checkNumber, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostBillingPayment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostBillingPayment(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostCCSettlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostCCSettlement(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostCheckOut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostCheckOut(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostCompRedemptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostCompRedemptions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostCompTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostCompTransaction(context.Background(), transactionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostCreditBill", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostCreditBill(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostCreditLimitOveragePayments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostCreditLimitOveragePayments(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostDeferredTaxesProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostDeferredTaxesProcess(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostDepositFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostDepositFolio(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostDepositPayment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostDepositPayment(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostDepositPaymentByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var externalSysCode string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostDepositPaymentByExtId(context.Background(), reservationId, externalSysCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostFBAReimbursement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CashieringApi.PostFBAReimbursement(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostFBASettlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CashieringApi.PostFBASettlement(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostFiscalCommandInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostFiscalCommandInvoice(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostFiscalInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var reservationId string

		resp, httpRes, err := apiClient.CashieringApi.PostFiscalInfo(context.Background(), hotelId, reservationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostFiscalInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folioId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostFiscalInvoice(context.Background(), folioId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostFixedCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostFixedCharges(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostForeignCurrencyExchange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CashieringApi.PostForeignCurrencyExchange(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostGuestCheckDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var checkNumber string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostGuestCheckDetails(context.Background(), checkNumber, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostPasserBySale", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostPasserBySale(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostPrepaidCards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostPrepaidCards(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostProforma", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostProforma(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostRateCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateCode string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostRateCode(context.Background(), rateCode, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostReversePayment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostReversePayment(context.Background(), transactionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostRoomAndTaxForDayUse", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string

		resp, httpRes, err := apiClient.CashieringApi.PostRoomAndTaxForDayUse(context.Background(), reservationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostStoredFolioDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folioId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostStoredFolioDetails(context.Background(), folioId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostSupplementalFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostSupplementalFolio(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PostZeroBalanceCheckoutReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PostZeroBalanceCheckoutReservations(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService ProcessFiscalRetry", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folioId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.ProcessFiscalRetry(context.Background(), folioId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService ProcessReservationDeposit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.ProcessReservationDeposit(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService ProcessRoomRoutingRefresh", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetReservationId string
		var sourceReservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.ProcessRoomRoutingRefresh(context.Background(), targetReservationId, sourceReservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PutBedTaxInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taxRegistraitionNo string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PutBedTaxInfo(context.Background(), taxRegistraitionNo, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PutBillingCharge", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PutBillingCharge(context.Background(), transactionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PutBillingCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PutBillingCharges(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PutCashier", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cashierId string

		resp, httpRes, err := apiClient.CashieringApi.PutCashier(context.Background(), cashierId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PutCashierLock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var lockId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PutCashierLock(context.Background(), lockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PutForEarlyDeparture", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PutForEarlyDeparture(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PutPayeeTaxNumber", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var payeeId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PutPayeeTaxNumber(context.Background(), payeeId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PutReservationDepositTransfer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceReservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PutReservationDepositTransfer(context.Background(), sourceReservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService PutRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.PutRoutingInstructions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService RedeemPrepaidCards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.RedeemPrepaidCards(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService RegisterManualAuthorization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.RegisterManualAuthorization(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService RegisterVaultTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.RegisterVaultTransaction(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService ReinstateCheckOut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.ReinstateCheckOut(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService ReleaseCashierLock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var lockId string

		resp, httpRes, err := apiClient.CashieringApi.ReleaseCashierLock(context.Background(), lockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService ReloadPrepaidCard", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.ReloadPrepaidCard(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService RemoveBedTaxInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taxRegistraitionNo string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.RemoveBedTaxInfo(context.Background(), taxRegistraitionNo, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService RemoveFixedCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.RemoveFixedCharges(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService ResendSupportingDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.ResendSupportingDocument(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService ReverseARInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.ReverseARInvoice(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService ReverseCertificatePostings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.ReverseCertificatePostings(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService ReverseCompRedemptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.ReverseCompRedemptions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService ReverseFlexibleBenefitPosting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.ReverseFlexibleBenefitPosting(context.Background(), transactionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService ReverseFolioTaxPayment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cashierId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.ReverseFolioTaxPayment(context.Background(), cashierId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService SplitAndTransferTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.SplitAndTransferTransaction(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService SplitDepositTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.SplitDepositTransaction(context.Background(), transactionId, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService SplitTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.SplitTransaction(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService TransferCompTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.TransferCompTransactions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService TransferFolioToWindow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.TransferFolioToWindow(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService TransferTransactionToReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toReservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.TransferTransactionToReservation(context.Background(), toReservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService TransferTransactionToWindow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.TransferTransactionToWindow(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService TransitionDepositToGuestFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.TransitionDepositToGuestFolio(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService UnlinkReservationPackageAllowance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.UnlinkReservationPackageAllowance(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService UpdateFixedCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.UpdateFixedCharges(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService ValidateCreditBill", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.ValidateCreditBill(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService ValidateDepositFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.ValidateDepositFolio(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService ValidateTransactionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.ValidateTransactionCodes(context.Background(), transactionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService VerifyForEarlyDeparture", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.VerifyForEarlyDeparture(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService VoidBillingCheckCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var checkNumber string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.VoidBillingCheckCharges(context.Background(), checkNumber, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CashieringApiService VoidFolio", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folioId string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.CashieringApi.VoidFolio(context.Background(), folioId, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
