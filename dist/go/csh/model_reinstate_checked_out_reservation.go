/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the ReinstateCheckedOutReservation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReinstateCheckedOutReservation{}

// ReinstateCheckedOutReservation Request to reinstate checkout reservation in order to post additional transactions, etc.
type ReinstateCheckedOutReservation struct {
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	HotelId *string `json:"hotelId,omitempty"`
	ReservationId *ReservationId `json:"reservationId,omitempty"`
	// Indicates whether interfaces should be notified.
	NotifyInterfaces *bool `json:"notifyInterfaces,omitempty"`
	// Indicate whether user wants to reinstate even if some other guest already checked in into same room.
	OverrideFlag *bool `json:"overrideFlag,omitempty"`
	// The Cashier ID of the Cashier who is currently processing the transaction(s).
	CashierId *float32 `json:"cashierId,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewReinstateCheckedOutReservation instantiates a new ReinstateCheckedOutReservation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReinstateCheckedOutReservation() *ReinstateCheckedOutReservation {
	this := ReinstateCheckedOutReservation{}
	return &this
}

// NewReinstateCheckedOutReservationWithDefaults instantiates a new ReinstateCheckedOutReservation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReinstateCheckedOutReservationWithDefaults() *ReinstateCheckedOutReservation {
	this := ReinstateCheckedOutReservation{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ReinstateCheckedOutReservation) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReinstateCheckedOutReservation) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ReinstateCheckedOutReservation) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ReinstateCheckedOutReservation) SetHotelId(v string) {
	o.HotelId = &v
}

// GetReservationId returns the ReservationId field value if set, zero value otherwise.
func (o *ReinstateCheckedOutReservation) GetReservationId() ReservationId {
	if o == nil || IsNil(o.ReservationId) {
		var ret ReservationId
		return ret
	}
	return *o.ReservationId
}

// GetReservationIdOk returns a tuple with the ReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReinstateCheckedOutReservation) GetReservationIdOk() (*ReservationId, bool) {
	if o == nil || IsNil(o.ReservationId) {
		return nil, false
	}
	return o.ReservationId, true
}

// HasReservationId returns a boolean if a field has been set.
func (o *ReinstateCheckedOutReservation) HasReservationId() bool {
	if o != nil && !IsNil(o.ReservationId) {
		return true
	}

	return false
}

// SetReservationId gets a reference to the given ReservationId and assigns it to the ReservationId field.
func (o *ReinstateCheckedOutReservation) SetReservationId(v ReservationId) {
	o.ReservationId = &v
}

// GetNotifyInterfaces returns the NotifyInterfaces field value if set, zero value otherwise.
func (o *ReinstateCheckedOutReservation) GetNotifyInterfaces() bool {
	if o == nil || IsNil(o.NotifyInterfaces) {
		var ret bool
		return ret
	}
	return *o.NotifyInterfaces
}

// GetNotifyInterfacesOk returns a tuple with the NotifyInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReinstateCheckedOutReservation) GetNotifyInterfacesOk() (*bool, bool) {
	if o == nil || IsNil(o.NotifyInterfaces) {
		return nil, false
	}
	return o.NotifyInterfaces, true
}

// HasNotifyInterfaces returns a boolean if a field has been set.
func (o *ReinstateCheckedOutReservation) HasNotifyInterfaces() bool {
	if o != nil && !IsNil(o.NotifyInterfaces) {
		return true
	}

	return false
}

// SetNotifyInterfaces gets a reference to the given bool and assigns it to the NotifyInterfaces field.
func (o *ReinstateCheckedOutReservation) SetNotifyInterfaces(v bool) {
	o.NotifyInterfaces = &v
}

// GetOverrideFlag returns the OverrideFlag field value if set, zero value otherwise.
func (o *ReinstateCheckedOutReservation) GetOverrideFlag() bool {
	if o == nil || IsNil(o.OverrideFlag) {
		var ret bool
		return ret
	}
	return *o.OverrideFlag
}

// GetOverrideFlagOk returns a tuple with the OverrideFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReinstateCheckedOutReservation) GetOverrideFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideFlag) {
		return nil, false
	}
	return o.OverrideFlag, true
}

// HasOverrideFlag returns a boolean if a field has been set.
func (o *ReinstateCheckedOutReservation) HasOverrideFlag() bool {
	if o != nil && !IsNil(o.OverrideFlag) {
		return true
	}

	return false
}

// SetOverrideFlag gets a reference to the given bool and assigns it to the OverrideFlag field.
func (o *ReinstateCheckedOutReservation) SetOverrideFlag(v bool) {
	o.OverrideFlag = &v
}

// GetCashierId returns the CashierId field value if set, zero value otherwise.
func (o *ReinstateCheckedOutReservation) GetCashierId() float32 {
	if o == nil || IsNil(o.CashierId) {
		var ret float32
		return ret
	}
	return *o.CashierId
}

// GetCashierIdOk returns a tuple with the CashierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReinstateCheckedOutReservation) GetCashierIdOk() (*float32, bool) {
	if o == nil || IsNil(o.CashierId) {
		return nil, false
	}
	return o.CashierId, true
}

// HasCashierId returns a boolean if a field has been set.
func (o *ReinstateCheckedOutReservation) HasCashierId() bool {
	if o != nil && !IsNil(o.CashierId) {
		return true
	}

	return false
}

// SetCashierId gets a reference to the given float32 and assigns it to the CashierId field.
func (o *ReinstateCheckedOutReservation) SetCashierId(v float32) {
	o.CashierId = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ReinstateCheckedOutReservation) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReinstateCheckedOutReservation) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ReinstateCheckedOutReservation) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *ReinstateCheckedOutReservation) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ReinstateCheckedOutReservation) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReinstateCheckedOutReservation) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ReinstateCheckedOutReservation) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ReinstateCheckedOutReservation) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ReinstateCheckedOutReservation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReinstateCheckedOutReservation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ReservationId) {
		toSerialize["reservationId"] = o.ReservationId
	}
	if !IsNil(o.NotifyInterfaces) {
		toSerialize["notifyInterfaces"] = o.NotifyInterfaces
	}
	if !IsNil(o.OverrideFlag) {
		toSerialize["overrideFlag"] = o.OverrideFlag
	}
	if !IsNil(o.CashierId) {
		toSerialize["cashierId"] = o.CashierId
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableReinstateCheckedOutReservation struct {
	value *ReinstateCheckedOutReservation
	isSet bool
}

func (v NullableReinstateCheckedOutReservation) Get() *ReinstateCheckedOutReservation {
	return v.value
}

func (v *NullableReinstateCheckedOutReservation) Set(val *ReinstateCheckedOutReservation) {
	v.value = val
	v.isSet = true
}

func (v NullableReinstateCheckedOutReservation) IsSet() bool {
	return v.isSet
}

func (v *NullableReinstateCheckedOutReservation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReinstateCheckedOutReservation(val *ReinstateCheckedOutReservation) *NullableReinstateCheckedOutReservation {
	return &NullableReinstateCheckedOutReservation{value: val, isSet: true}
}

func (v NullableReinstateCheckedOutReservation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReinstateCheckedOutReservation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


