/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the LinkedAllowanceReservationsInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkedAllowanceReservationsInfoType{}

// LinkedAllowanceReservationsInfoType List of reservation with linked package allowances.
type LinkedAllowanceReservationsInfoType struct {
	// The resort code.
	HotelId *string `json:"hotelId,omitempty"`
	// List of Package Allowance Source reservations.
	SourceReservations []LinkedAllowanceReservationInfoType `json:"sourceReservations,omitempty"`
	TargetReservation *LinkedAllowanceReservationInfoType `json:"targetReservation,omitempty"`
}

// NewLinkedAllowanceReservationsInfoType instantiates a new LinkedAllowanceReservationsInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkedAllowanceReservationsInfoType() *LinkedAllowanceReservationsInfoType {
	this := LinkedAllowanceReservationsInfoType{}
	return &this
}

// NewLinkedAllowanceReservationsInfoTypeWithDefaults instantiates a new LinkedAllowanceReservationsInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkedAllowanceReservationsInfoTypeWithDefaults() *LinkedAllowanceReservationsInfoType {
	this := LinkedAllowanceReservationsInfoType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *LinkedAllowanceReservationsInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkedAllowanceReservationsInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *LinkedAllowanceReservationsInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *LinkedAllowanceReservationsInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetSourceReservations returns the SourceReservations field value if set, zero value otherwise.
func (o *LinkedAllowanceReservationsInfoType) GetSourceReservations() []LinkedAllowanceReservationInfoType {
	if o == nil || IsNil(o.SourceReservations) {
		var ret []LinkedAllowanceReservationInfoType
		return ret
	}
	return o.SourceReservations
}

// GetSourceReservationsOk returns a tuple with the SourceReservations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkedAllowanceReservationsInfoType) GetSourceReservationsOk() ([]LinkedAllowanceReservationInfoType, bool) {
	if o == nil || IsNil(o.SourceReservations) {
		return nil, false
	}
	return o.SourceReservations, true
}

// HasSourceReservations returns a boolean if a field has been set.
func (o *LinkedAllowanceReservationsInfoType) HasSourceReservations() bool {
	if o != nil && !IsNil(o.SourceReservations) {
		return true
	}

	return false
}

// SetSourceReservations gets a reference to the given []LinkedAllowanceReservationInfoType and assigns it to the SourceReservations field.
func (o *LinkedAllowanceReservationsInfoType) SetSourceReservations(v []LinkedAllowanceReservationInfoType) {
	o.SourceReservations = v
}

// GetTargetReservation returns the TargetReservation field value if set, zero value otherwise.
func (o *LinkedAllowanceReservationsInfoType) GetTargetReservation() LinkedAllowanceReservationInfoType {
	if o == nil || IsNil(o.TargetReservation) {
		var ret LinkedAllowanceReservationInfoType
		return ret
	}
	return *o.TargetReservation
}

// GetTargetReservationOk returns a tuple with the TargetReservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkedAllowanceReservationsInfoType) GetTargetReservationOk() (*LinkedAllowanceReservationInfoType, bool) {
	if o == nil || IsNil(o.TargetReservation) {
		return nil, false
	}
	return o.TargetReservation, true
}

// HasTargetReservation returns a boolean if a field has been set.
func (o *LinkedAllowanceReservationsInfoType) HasTargetReservation() bool {
	if o != nil && !IsNil(o.TargetReservation) {
		return true
	}

	return false
}

// SetTargetReservation gets a reference to the given LinkedAllowanceReservationInfoType and assigns it to the TargetReservation field.
func (o *LinkedAllowanceReservationsInfoType) SetTargetReservation(v LinkedAllowanceReservationInfoType) {
	o.TargetReservation = &v
}

func (o LinkedAllowanceReservationsInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkedAllowanceReservationsInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.SourceReservations) {
		toSerialize["sourceReservations"] = o.SourceReservations
	}
	if !IsNil(o.TargetReservation) {
		toSerialize["targetReservation"] = o.TargetReservation
	}
	return toSerialize, nil
}

type NullableLinkedAllowanceReservationsInfoType struct {
	value *LinkedAllowanceReservationsInfoType
	isSet bool
}

func (v NullableLinkedAllowanceReservationsInfoType) Get() *LinkedAllowanceReservationsInfoType {
	return v.value
}

func (v *NullableLinkedAllowanceReservationsInfoType) Set(val *LinkedAllowanceReservationsInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkedAllowanceReservationsInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkedAllowanceReservationsInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkedAllowanceReservationsInfoType(val *LinkedAllowanceReservationsInfoType) *NullableLinkedAllowanceReservationsInfoType {
	return &NullableLinkedAllowanceReservationsInfoType{value: val, isSet: true}
}

func (v NullableLinkedAllowanceReservationsInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkedAllowanceReservationsInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


