/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the CoversInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoversInfoType{}

// CoversInfoType Type to provide the information related to covers based on the transaction code and date.
type CoversInfoType struct {
	// Unique transaction code.
	TransactionCode *string `json:"transactionCode,omitempty"`
	// Transaction description.
	TransactionDescription *string `json:"transactionDescription,omitempty"`
	// Date on which needs to be searched for covers.
	CoversDate *string `json:"coversDate,omitempty"`
	// Total revenue for the transaction code today
	RevenueToday *float32 `json:"revenueToday,omitempty"`
	// Covers for current date i.e., Today.
	CoversToday *float32 `json:"coversToday,omitempty"`
	// Journal of the covers posted.
	CoversJournal *float32 `json:"coversJournal,omitempty"`
	// Covers posted from Month to Date.
	CoversMtd *float32 `json:"coversMtd,omitempty"`
	// Covers posted from Year to Date.
	CoversYtd *float32 `json:"coversYtd,omitempty"`
}

// NewCoversInfoType instantiates a new CoversInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoversInfoType() *CoversInfoType {
	this := CoversInfoType{}
	return &this
}

// NewCoversInfoTypeWithDefaults instantiates a new CoversInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoversInfoTypeWithDefaults() *CoversInfoType {
	this := CoversInfoType{}
	return &this
}

// GetTransactionCode returns the TransactionCode field value if set, zero value otherwise.
func (o *CoversInfoType) GetTransactionCode() string {
	if o == nil || IsNil(o.TransactionCode) {
		var ret string
		return ret
	}
	return *o.TransactionCode
}

// GetTransactionCodeOk returns a tuple with the TransactionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoversInfoType) GetTransactionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionCode) {
		return nil, false
	}
	return o.TransactionCode, true
}

// HasTransactionCode returns a boolean if a field has been set.
func (o *CoversInfoType) HasTransactionCode() bool {
	if o != nil && !IsNil(o.TransactionCode) {
		return true
	}

	return false
}

// SetTransactionCode gets a reference to the given string and assigns it to the TransactionCode field.
func (o *CoversInfoType) SetTransactionCode(v string) {
	o.TransactionCode = &v
}

// GetTransactionDescription returns the TransactionDescription field value if set, zero value otherwise.
func (o *CoversInfoType) GetTransactionDescription() string {
	if o == nil || IsNil(o.TransactionDescription) {
		var ret string
		return ret
	}
	return *o.TransactionDescription
}

// GetTransactionDescriptionOk returns a tuple with the TransactionDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoversInfoType) GetTransactionDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionDescription) {
		return nil, false
	}
	return o.TransactionDescription, true
}

// HasTransactionDescription returns a boolean if a field has been set.
func (o *CoversInfoType) HasTransactionDescription() bool {
	if o != nil && !IsNil(o.TransactionDescription) {
		return true
	}

	return false
}

// SetTransactionDescription gets a reference to the given string and assigns it to the TransactionDescription field.
func (o *CoversInfoType) SetTransactionDescription(v string) {
	o.TransactionDescription = &v
}

// GetCoversDate returns the CoversDate field value if set, zero value otherwise.
func (o *CoversInfoType) GetCoversDate() string {
	if o == nil || IsNil(o.CoversDate) {
		var ret string
		return ret
	}
	return *o.CoversDate
}

// GetCoversDateOk returns a tuple with the CoversDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoversInfoType) GetCoversDateOk() (*string, bool) {
	if o == nil || IsNil(o.CoversDate) {
		return nil, false
	}
	return o.CoversDate, true
}

// HasCoversDate returns a boolean if a field has been set.
func (o *CoversInfoType) HasCoversDate() bool {
	if o != nil && !IsNil(o.CoversDate) {
		return true
	}

	return false
}

// SetCoversDate gets a reference to the given string and assigns it to the CoversDate field.
func (o *CoversInfoType) SetCoversDate(v string) {
	o.CoversDate = &v
}

// GetRevenueToday returns the RevenueToday field value if set, zero value otherwise.
func (o *CoversInfoType) GetRevenueToday() float32 {
	if o == nil || IsNil(o.RevenueToday) {
		var ret float32
		return ret
	}
	return *o.RevenueToday
}

// GetRevenueTodayOk returns a tuple with the RevenueToday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoversInfoType) GetRevenueTodayOk() (*float32, bool) {
	if o == nil || IsNil(o.RevenueToday) {
		return nil, false
	}
	return o.RevenueToday, true
}

// HasRevenueToday returns a boolean if a field has been set.
func (o *CoversInfoType) HasRevenueToday() bool {
	if o != nil && !IsNil(o.RevenueToday) {
		return true
	}

	return false
}

// SetRevenueToday gets a reference to the given float32 and assigns it to the RevenueToday field.
func (o *CoversInfoType) SetRevenueToday(v float32) {
	o.RevenueToday = &v
}

// GetCoversToday returns the CoversToday field value if set, zero value otherwise.
func (o *CoversInfoType) GetCoversToday() float32 {
	if o == nil || IsNil(o.CoversToday) {
		var ret float32
		return ret
	}
	return *o.CoversToday
}

// GetCoversTodayOk returns a tuple with the CoversToday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoversInfoType) GetCoversTodayOk() (*float32, bool) {
	if o == nil || IsNil(o.CoversToday) {
		return nil, false
	}
	return o.CoversToday, true
}

// HasCoversToday returns a boolean if a field has been set.
func (o *CoversInfoType) HasCoversToday() bool {
	if o != nil && !IsNil(o.CoversToday) {
		return true
	}

	return false
}

// SetCoversToday gets a reference to the given float32 and assigns it to the CoversToday field.
func (o *CoversInfoType) SetCoversToday(v float32) {
	o.CoversToday = &v
}

// GetCoversJournal returns the CoversJournal field value if set, zero value otherwise.
func (o *CoversInfoType) GetCoversJournal() float32 {
	if o == nil || IsNil(o.CoversJournal) {
		var ret float32
		return ret
	}
	return *o.CoversJournal
}

// GetCoversJournalOk returns a tuple with the CoversJournal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoversInfoType) GetCoversJournalOk() (*float32, bool) {
	if o == nil || IsNil(o.CoversJournal) {
		return nil, false
	}
	return o.CoversJournal, true
}

// HasCoversJournal returns a boolean if a field has been set.
func (o *CoversInfoType) HasCoversJournal() bool {
	if o != nil && !IsNil(o.CoversJournal) {
		return true
	}

	return false
}

// SetCoversJournal gets a reference to the given float32 and assigns it to the CoversJournal field.
func (o *CoversInfoType) SetCoversJournal(v float32) {
	o.CoversJournal = &v
}

// GetCoversMtd returns the CoversMtd field value if set, zero value otherwise.
func (o *CoversInfoType) GetCoversMtd() float32 {
	if o == nil || IsNil(o.CoversMtd) {
		var ret float32
		return ret
	}
	return *o.CoversMtd
}

// GetCoversMtdOk returns a tuple with the CoversMtd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoversInfoType) GetCoversMtdOk() (*float32, bool) {
	if o == nil || IsNil(o.CoversMtd) {
		return nil, false
	}
	return o.CoversMtd, true
}

// HasCoversMtd returns a boolean if a field has been set.
func (o *CoversInfoType) HasCoversMtd() bool {
	if o != nil && !IsNil(o.CoversMtd) {
		return true
	}

	return false
}

// SetCoversMtd gets a reference to the given float32 and assigns it to the CoversMtd field.
func (o *CoversInfoType) SetCoversMtd(v float32) {
	o.CoversMtd = &v
}

// GetCoversYtd returns the CoversYtd field value if set, zero value otherwise.
func (o *CoversInfoType) GetCoversYtd() float32 {
	if o == nil || IsNil(o.CoversYtd) {
		var ret float32
		return ret
	}
	return *o.CoversYtd
}

// GetCoversYtdOk returns a tuple with the CoversYtd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoversInfoType) GetCoversYtdOk() (*float32, bool) {
	if o == nil || IsNil(o.CoversYtd) {
		return nil, false
	}
	return o.CoversYtd, true
}

// HasCoversYtd returns a boolean if a field has been set.
func (o *CoversInfoType) HasCoversYtd() bool {
	if o != nil && !IsNil(o.CoversYtd) {
		return true
	}

	return false
}

// SetCoversYtd gets a reference to the given float32 and assigns it to the CoversYtd field.
func (o *CoversInfoType) SetCoversYtd(v float32) {
	o.CoversYtd = &v
}

func (o CoversInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoversInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TransactionCode) {
		toSerialize["transactionCode"] = o.TransactionCode
	}
	if !IsNil(o.TransactionDescription) {
		toSerialize["transactionDescription"] = o.TransactionDescription
	}
	if !IsNil(o.CoversDate) {
		toSerialize["coversDate"] = o.CoversDate
	}
	if !IsNil(o.RevenueToday) {
		toSerialize["revenueToday"] = o.RevenueToday
	}
	if !IsNil(o.CoversToday) {
		toSerialize["coversToday"] = o.CoversToday
	}
	if !IsNil(o.CoversJournal) {
		toSerialize["coversJournal"] = o.CoversJournal
	}
	if !IsNil(o.CoversMtd) {
		toSerialize["coversMtd"] = o.CoversMtd
	}
	if !IsNil(o.CoversYtd) {
		toSerialize["coversYtd"] = o.CoversYtd
	}
	return toSerialize, nil
}

type NullableCoversInfoType struct {
	value *CoversInfoType
	isSet bool
}

func (v NullableCoversInfoType) Get() *CoversInfoType {
	return v.value
}

func (v *NullableCoversInfoType) Set(val *CoversInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableCoversInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableCoversInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoversInfoType(val *CoversInfoType) *NullableCoversInfoType {
	return &NullableCoversInfoType{value: val, isSet: true}
}

func (v NullableCoversInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoversInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


