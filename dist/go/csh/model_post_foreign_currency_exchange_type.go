/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the PostForeignCurrencyExchangeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostForeignCurrencyExchangeType{}

// PostForeignCurrencyExchangeType Currency conversion calculation type.
type PostForeignCurrencyExchangeType struct {
	// Property code where the currency is being converted.
	HotelId *string `json:"hotelId,omitempty"`
	FromCurrencyAmount *CurrencyAmountType `json:"fromCurrencyAmount,omitempty"`
	// Date on which exchange rate was obtained.
	ExchangeDate *string `json:"exchangeDate,omitempty"`
	// Buy or Sell for calculation.
	Sell *bool `json:"sell,omitempty"`
	// Exchange references.
	ExchangeReference *string `json:"exchangeReference,omitempty"`
	ExchangeType *CurrencyExchangeType `json:"exchangeType,omitempty"`
	ReservationId *ReservationId `json:"reservationId,omitempty"`
	ProfileId *ProfileId `json:"profileId,omitempty"`
	// Room to which posting is to be made.
	Room *string `json:"room,omitempty"`
	// Name of the guest to whom posting is done.
	GuestName *string `json:"guestName,omitempty"`
	// Name of the passer by customer to whom posting is to be done.
	PasserByName *string `json:"passerByName,omitempty"`
	// The Cashier ID of the Cashier who is currently processing the transaction(s).
	CashierId *float32 `json:"cashierId,omitempty"`
}

// NewPostForeignCurrencyExchangeType instantiates a new PostForeignCurrencyExchangeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostForeignCurrencyExchangeType() *PostForeignCurrencyExchangeType {
	this := PostForeignCurrencyExchangeType{}
	return &this
}

// NewPostForeignCurrencyExchangeTypeWithDefaults instantiates a new PostForeignCurrencyExchangeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostForeignCurrencyExchangeTypeWithDefaults() *PostForeignCurrencyExchangeType {
	this := PostForeignCurrencyExchangeType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *PostForeignCurrencyExchangeType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostForeignCurrencyExchangeType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *PostForeignCurrencyExchangeType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *PostForeignCurrencyExchangeType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetFromCurrencyAmount returns the FromCurrencyAmount field value if set, zero value otherwise.
func (o *PostForeignCurrencyExchangeType) GetFromCurrencyAmount() CurrencyAmountType {
	if o == nil || IsNil(o.FromCurrencyAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.FromCurrencyAmount
}

// GetFromCurrencyAmountOk returns a tuple with the FromCurrencyAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostForeignCurrencyExchangeType) GetFromCurrencyAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.FromCurrencyAmount) {
		return nil, false
	}
	return o.FromCurrencyAmount, true
}

// HasFromCurrencyAmount returns a boolean if a field has been set.
func (o *PostForeignCurrencyExchangeType) HasFromCurrencyAmount() bool {
	if o != nil && !IsNil(o.FromCurrencyAmount) {
		return true
	}

	return false
}

// SetFromCurrencyAmount gets a reference to the given CurrencyAmountType and assigns it to the FromCurrencyAmount field.
func (o *PostForeignCurrencyExchangeType) SetFromCurrencyAmount(v CurrencyAmountType) {
	o.FromCurrencyAmount = &v
}

// GetExchangeDate returns the ExchangeDate field value if set, zero value otherwise.
func (o *PostForeignCurrencyExchangeType) GetExchangeDate() string {
	if o == nil || IsNil(o.ExchangeDate) {
		var ret string
		return ret
	}
	return *o.ExchangeDate
}

// GetExchangeDateOk returns a tuple with the ExchangeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostForeignCurrencyExchangeType) GetExchangeDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExchangeDate) {
		return nil, false
	}
	return o.ExchangeDate, true
}

// HasExchangeDate returns a boolean if a field has been set.
func (o *PostForeignCurrencyExchangeType) HasExchangeDate() bool {
	if o != nil && !IsNil(o.ExchangeDate) {
		return true
	}

	return false
}

// SetExchangeDate gets a reference to the given string and assigns it to the ExchangeDate field.
func (o *PostForeignCurrencyExchangeType) SetExchangeDate(v string) {
	o.ExchangeDate = &v
}

// GetSell returns the Sell field value if set, zero value otherwise.
func (o *PostForeignCurrencyExchangeType) GetSell() bool {
	if o == nil || IsNil(o.Sell) {
		var ret bool
		return ret
	}
	return *o.Sell
}

// GetSellOk returns a tuple with the Sell field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostForeignCurrencyExchangeType) GetSellOk() (*bool, bool) {
	if o == nil || IsNil(o.Sell) {
		return nil, false
	}
	return o.Sell, true
}

// HasSell returns a boolean if a field has been set.
func (o *PostForeignCurrencyExchangeType) HasSell() bool {
	if o != nil && !IsNil(o.Sell) {
		return true
	}

	return false
}

// SetSell gets a reference to the given bool and assigns it to the Sell field.
func (o *PostForeignCurrencyExchangeType) SetSell(v bool) {
	o.Sell = &v
}

// GetExchangeReference returns the ExchangeReference field value if set, zero value otherwise.
func (o *PostForeignCurrencyExchangeType) GetExchangeReference() string {
	if o == nil || IsNil(o.ExchangeReference) {
		var ret string
		return ret
	}
	return *o.ExchangeReference
}

// GetExchangeReferenceOk returns a tuple with the ExchangeReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostForeignCurrencyExchangeType) GetExchangeReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.ExchangeReference) {
		return nil, false
	}
	return o.ExchangeReference, true
}

// HasExchangeReference returns a boolean if a field has been set.
func (o *PostForeignCurrencyExchangeType) HasExchangeReference() bool {
	if o != nil && !IsNil(o.ExchangeReference) {
		return true
	}

	return false
}

// SetExchangeReference gets a reference to the given string and assigns it to the ExchangeReference field.
func (o *PostForeignCurrencyExchangeType) SetExchangeReference(v string) {
	o.ExchangeReference = &v
}

// GetExchangeType returns the ExchangeType field value if set, zero value otherwise.
func (o *PostForeignCurrencyExchangeType) GetExchangeType() CurrencyExchangeType {
	if o == nil || IsNil(o.ExchangeType) {
		var ret CurrencyExchangeType
		return ret
	}
	return *o.ExchangeType
}

// GetExchangeTypeOk returns a tuple with the ExchangeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostForeignCurrencyExchangeType) GetExchangeTypeOk() (*CurrencyExchangeType, bool) {
	if o == nil || IsNil(o.ExchangeType) {
		return nil, false
	}
	return o.ExchangeType, true
}

// HasExchangeType returns a boolean if a field has been set.
func (o *PostForeignCurrencyExchangeType) HasExchangeType() bool {
	if o != nil && !IsNil(o.ExchangeType) {
		return true
	}

	return false
}

// SetExchangeType gets a reference to the given CurrencyExchangeType and assigns it to the ExchangeType field.
func (o *PostForeignCurrencyExchangeType) SetExchangeType(v CurrencyExchangeType) {
	o.ExchangeType = &v
}

// GetReservationId returns the ReservationId field value if set, zero value otherwise.
func (o *PostForeignCurrencyExchangeType) GetReservationId() ReservationId {
	if o == nil || IsNil(o.ReservationId) {
		var ret ReservationId
		return ret
	}
	return *o.ReservationId
}

// GetReservationIdOk returns a tuple with the ReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostForeignCurrencyExchangeType) GetReservationIdOk() (*ReservationId, bool) {
	if o == nil || IsNil(o.ReservationId) {
		return nil, false
	}
	return o.ReservationId, true
}

// HasReservationId returns a boolean if a field has been set.
func (o *PostForeignCurrencyExchangeType) HasReservationId() bool {
	if o != nil && !IsNil(o.ReservationId) {
		return true
	}

	return false
}

// SetReservationId gets a reference to the given ReservationId and assigns it to the ReservationId field.
func (o *PostForeignCurrencyExchangeType) SetReservationId(v ReservationId) {
	o.ReservationId = &v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *PostForeignCurrencyExchangeType) GetProfileId() ProfileId {
	if o == nil || IsNil(o.ProfileId) {
		var ret ProfileId
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostForeignCurrencyExchangeType) GetProfileIdOk() (*ProfileId, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *PostForeignCurrencyExchangeType) HasProfileId() bool {
	if o != nil && !IsNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given ProfileId and assigns it to the ProfileId field.
func (o *PostForeignCurrencyExchangeType) SetProfileId(v ProfileId) {
	o.ProfileId = &v
}

// GetRoom returns the Room field value if set, zero value otherwise.
func (o *PostForeignCurrencyExchangeType) GetRoom() string {
	if o == nil || IsNil(o.Room) {
		var ret string
		return ret
	}
	return *o.Room
}

// GetRoomOk returns a tuple with the Room field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostForeignCurrencyExchangeType) GetRoomOk() (*string, bool) {
	if o == nil || IsNil(o.Room) {
		return nil, false
	}
	return o.Room, true
}

// HasRoom returns a boolean if a field has been set.
func (o *PostForeignCurrencyExchangeType) HasRoom() bool {
	if o != nil && !IsNil(o.Room) {
		return true
	}

	return false
}

// SetRoom gets a reference to the given string and assigns it to the Room field.
func (o *PostForeignCurrencyExchangeType) SetRoom(v string) {
	o.Room = &v
}

// GetGuestName returns the GuestName field value if set, zero value otherwise.
func (o *PostForeignCurrencyExchangeType) GetGuestName() string {
	if o == nil || IsNil(o.GuestName) {
		var ret string
		return ret
	}
	return *o.GuestName
}

// GetGuestNameOk returns a tuple with the GuestName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostForeignCurrencyExchangeType) GetGuestNameOk() (*string, bool) {
	if o == nil || IsNil(o.GuestName) {
		return nil, false
	}
	return o.GuestName, true
}

// HasGuestName returns a boolean if a field has been set.
func (o *PostForeignCurrencyExchangeType) HasGuestName() bool {
	if o != nil && !IsNil(o.GuestName) {
		return true
	}

	return false
}

// SetGuestName gets a reference to the given string and assigns it to the GuestName field.
func (o *PostForeignCurrencyExchangeType) SetGuestName(v string) {
	o.GuestName = &v
}

// GetPasserByName returns the PasserByName field value if set, zero value otherwise.
func (o *PostForeignCurrencyExchangeType) GetPasserByName() string {
	if o == nil || IsNil(o.PasserByName) {
		var ret string
		return ret
	}
	return *o.PasserByName
}

// GetPasserByNameOk returns a tuple with the PasserByName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostForeignCurrencyExchangeType) GetPasserByNameOk() (*string, bool) {
	if o == nil || IsNil(o.PasserByName) {
		return nil, false
	}
	return o.PasserByName, true
}

// HasPasserByName returns a boolean if a field has been set.
func (o *PostForeignCurrencyExchangeType) HasPasserByName() bool {
	if o != nil && !IsNil(o.PasserByName) {
		return true
	}

	return false
}

// SetPasserByName gets a reference to the given string and assigns it to the PasserByName field.
func (o *PostForeignCurrencyExchangeType) SetPasserByName(v string) {
	o.PasserByName = &v
}

// GetCashierId returns the CashierId field value if set, zero value otherwise.
func (o *PostForeignCurrencyExchangeType) GetCashierId() float32 {
	if o == nil || IsNil(o.CashierId) {
		var ret float32
		return ret
	}
	return *o.CashierId
}

// GetCashierIdOk returns a tuple with the CashierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostForeignCurrencyExchangeType) GetCashierIdOk() (*float32, bool) {
	if o == nil || IsNil(o.CashierId) {
		return nil, false
	}
	return o.CashierId, true
}

// HasCashierId returns a boolean if a field has been set.
func (o *PostForeignCurrencyExchangeType) HasCashierId() bool {
	if o != nil && !IsNil(o.CashierId) {
		return true
	}

	return false
}

// SetCashierId gets a reference to the given float32 and assigns it to the CashierId field.
func (o *PostForeignCurrencyExchangeType) SetCashierId(v float32) {
	o.CashierId = &v
}

func (o PostForeignCurrencyExchangeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostForeignCurrencyExchangeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.FromCurrencyAmount) {
		toSerialize["fromCurrencyAmount"] = o.FromCurrencyAmount
	}
	if !IsNil(o.ExchangeDate) {
		toSerialize["exchangeDate"] = o.ExchangeDate
	}
	if !IsNil(o.Sell) {
		toSerialize["sell"] = o.Sell
	}
	if !IsNil(o.ExchangeReference) {
		toSerialize["exchangeReference"] = o.ExchangeReference
	}
	if !IsNil(o.ExchangeType) {
		toSerialize["exchangeType"] = o.ExchangeType
	}
	if !IsNil(o.ReservationId) {
		toSerialize["reservationId"] = o.ReservationId
	}
	if !IsNil(o.ProfileId) {
		toSerialize["profileId"] = o.ProfileId
	}
	if !IsNil(o.Room) {
		toSerialize["room"] = o.Room
	}
	if !IsNil(o.GuestName) {
		toSerialize["guestName"] = o.GuestName
	}
	if !IsNil(o.PasserByName) {
		toSerialize["passerByName"] = o.PasserByName
	}
	if !IsNil(o.CashierId) {
		toSerialize["cashierId"] = o.CashierId
	}
	return toSerialize, nil
}

type NullablePostForeignCurrencyExchangeType struct {
	value *PostForeignCurrencyExchangeType
	isSet bool
}

func (v NullablePostForeignCurrencyExchangeType) Get() *PostForeignCurrencyExchangeType {
	return v.value
}

func (v *NullablePostForeignCurrencyExchangeType) Set(val *PostForeignCurrencyExchangeType) {
	v.value = val
	v.isSet = true
}

func (v NullablePostForeignCurrencyExchangeType) IsSet() bool {
	return v.isSet
}

func (v *NullablePostForeignCurrencyExchangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostForeignCurrencyExchangeType(val *PostForeignCurrencyExchangeType) *NullablePostForeignCurrencyExchangeType {
	return &NullablePostForeignCurrencyExchangeType{value: val, isSet: true}
}

func (v NullablePostForeignCurrencyExchangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostForeignCurrencyExchangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


