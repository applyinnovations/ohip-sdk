/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the CheckDetailsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckDetailsType{}

// CheckDetailsType Holds check details information.
type CheckDetailsType struct {
	// Check date of the posting.
	CheckDate *string `json:"checkDate,omitempty"`
	// Check text of the posting.
	CheckText *string `json:"checkText,omitempty"`
	// Check image of the posting.
	CheckImage *string `json:"checkImage,omitempty"`
}

// NewCheckDetailsType instantiates a new CheckDetailsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckDetailsType() *CheckDetailsType {
	this := CheckDetailsType{}
	return &this
}

// NewCheckDetailsTypeWithDefaults instantiates a new CheckDetailsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckDetailsTypeWithDefaults() *CheckDetailsType {
	this := CheckDetailsType{}
	return &this
}

// GetCheckDate returns the CheckDate field value if set, zero value otherwise.
func (o *CheckDetailsType) GetCheckDate() string {
	if o == nil || IsNil(o.CheckDate) {
		var ret string
		return ret
	}
	return *o.CheckDate
}

// GetCheckDateOk returns a tuple with the CheckDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckDetailsType) GetCheckDateOk() (*string, bool) {
	if o == nil || IsNil(o.CheckDate) {
		return nil, false
	}
	return o.CheckDate, true
}

// HasCheckDate returns a boolean if a field has been set.
func (o *CheckDetailsType) HasCheckDate() bool {
	if o != nil && !IsNil(o.CheckDate) {
		return true
	}

	return false
}

// SetCheckDate gets a reference to the given string and assigns it to the CheckDate field.
func (o *CheckDetailsType) SetCheckDate(v string) {
	o.CheckDate = &v
}

// GetCheckText returns the CheckText field value if set, zero value otherwise.
func (o *CheckDetailsType) GetCheckText() string {
	if o == nil || IsNil(o.CheckText) {
		var ret string
		return ret
	}
	return *o.CheckText
}

// GetCheckTextOk returns a tuple with the CheckText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckDetailsType) GetCheckTextOk() (*string, bool) {
	if o == nil || IsNil(o.CheckText) {
		return nil, false
	}
	return o.CheckText, true
}

// HasCheckText returns a boolean if a field has been set.
func (o *CheckDetailsType) HasCheckText() bool {
	if o != nil && !IsNil(o.CheckText) {
		return true
	}

	return false
}

// SetCheckText gets a reference to the given string and assigns it to the CheckText field.
func (o *CheckDetailsType) SetCheckText(v string) {
	o.CheckText = &v
}

// GetCheckImage returns the CheckImage field value if set, zero value otherwise.
func (o *CheckDetailsType) GetCheckImage() string {
	if o == nil || IsNil(o.CheckImage) {
		var ret string
		return ret
	}
	return *o.CheckImage
}

// GetCheckImageOk returns a tuple with the CheckImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckDetailsType) GetCheckImageOk() (*string, bool) {
	if o == nil || IsNil(o.CheckImage) {
		return nil, false
	}
	return o.CheckImage, true
}

// HasCheckImage returns a boolean if a field has been set.
func (o *CheckDetailsType) HasCheckImage() bool {
	if o != nil && !IsNil(o.CheckImage) {
		return true
	}

	return false
}

// SetCheckImage gets a reference to the given string and assigns it to the CheckImage field.
func (o *CheckDetailsType) SetCheckImage(v string) {
	o.CheckImage = &v
}

func (o CheckDetailsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckDetailsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CheckDate) {
		toSerialize["checkDate"] = o.CheckDate
	}
	if !IsNil(o.CheckText) {
		toSerialize["checkText"] = o.CheckText
	}
	if !IsNil(o.CheckImage) {
		toSerialize["checkImage"] = o.CheckImage
	}
	return toSerialize, nil
}

type NullableCheckDetailsType struct {
	value *CheckDetailsType
	isSet bool
}

func (v NullableCheckDetailsType) Get() *CheckDetailsType {
	return v.value
}

func (v *NullableCheckDetailsType) Set(val *CheckDetailsType) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckDetailsType) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckDetailsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckDetailsType(val *CheckDetailsType) *NullableCheckDetailsType {
	return &NullableCheckDetailsType{value: val, isSet: true}
}

func (v NullableCheckDetailsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckDetailsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


