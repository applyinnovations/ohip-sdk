/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the ReceiptSummaryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReceiptSummaryType{}

// ReceiptSummaryType Contains Receipt Details.
type ReceiptSummaryType struct {
	// Custom Number.
	CustomNumbers []string `json:"customNumbers,omitempty"`
	// The ending value of the date range.
	End *string `json:"end,omitempty"`
	PayeeInfo *PayeeInfoType `json:"payeeInfo,omitempty"`
	ReceiptAmount *CurrencyAmountType `json:"receiptAmount,omitempty"`
	// Receipt Number.
	ReceiptNo *float32 `json:"receiptNo,omitempty"`
	ReceiptType *ReceiptType `json:"receiptType,omitempty"`
	// Receipt Type Description.
	ReceiptTypeDescription *string `json:"receiptTypeDescription,omitempty"`
	// The starting value of the date range.
	Start *string `json:"start,omitempty"`
	// Tax Invoice Number of the Receipt.
	TaxInvoice *string `json:"taxInvoice,omitempty"`
	// Transaction Number.
	TransactionNo *string `json:"transactionNo,omitempty"`
}

// NewReceiptSummaryType instantiates a new ReceiptSummaryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReceiptSummaryType() *ReceiptSummaryType {
	this := ReceiptSummaryType{}
	return &this
}

// NewReceiptSummaryTypeWithDefaults instantiates a new ReceiptSummaryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReceiptSummaryTypeWithDefaults() *ReceiptSummaryType {
	this := ReceiptSummaryType{}
	return &this
}

// GetCustomNumbers returns the CustomNumbers field value if set, zero value otherwise.
func (o *ReceiptSummaryType) GetCustomNumbers() []string {
	if o == nil || IsNil(o.CustomNumbers) {
		var ret []string
		return ret
	}
	return o.CustomNumbers
}

// GetCustomNumbersOk returns a tuple with the CustomNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceiptSummaryType) GetCustomNumbersOk() ([]string, bool) {
	if o == nil || IsNil(o.CustomNumbers) {
		return nil, false
	}
	return o.CustomNumbers, true
}

// HasCustomNumbers returns a boolean if a field has been set.
func (o *ReceiptSummaryType) HasCustomNumbers() bool {
	if o != nil && !IsNil(o.CustomNumbers) {
		return true
	}

	return false
}

// SetCustomNumbers gets a reference to the given []string and assigns it to the CustomNumbers field.
func (o *ReceiptSummaryType) SetCustomNumbers(v []string) {
	o.CustomNumbers = v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *ReceiptSummaryType) GetEnd() string {
	if o == nil || IsNil(o.End) {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceiptSummaryType) GetEndOk() (*string, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *ReceiptSummaryType) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *ReceiptSummaryType) SetEnd(v string) {
	o.End = &v
}

// GetPayeeInfo returns the PayeeInfo field value if set, zero value otherwise.
func (o *ReceiptSummaryType) GetPayeeInfo() PayeeInfoType {
	if o == nil || IsNil(o.PayeeInfo) {
		var ret PayeeInfoType
		return ret
	}
	return *o.PayeeInfo
}

// GetPayeeInfoOk returns a tuple with the PayeeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceiptSummaryType) GetPayeeInfoOk() (*PayeeInfoType, bool) {
	if o == nil || IsNil(o.PayeeInfo) {
		return nil, false
	}
	return o.PayeeInfo, true
}

// HasPayeeInfo returns a boolean if a field has been set.
func (o *ReceiptSummaryType) HasPayeeInfo() bool {
	if o != nil && !IsNil(o.PayeeInfo) {
		return true
	}

	return false
}

// SetPayeeInfo gets a reference to the given PayeeInfoType and assigns it to the PayeeInfo field.
func (o *ReceiptSummaryType) SetPayeeInfo(v PayeeInfoType) {
	o.PayeeInfo = &v
}

// GetReceiptAmount returns the ReceiptAmount field value if set, zero value otherwise.
func (o *ReceiptSummaryType) GetReceiptAmount() CurrencyAmountType {
	if o == nil || IsNil(o.ReceiptAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.ReceiptAmount
}

// GetReceiptAmountOk returns a tuple with the ReceiptAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceiptSummaryType) GetReceiptAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.ReceiptAmount) {
		return nil, false
	}
	return o.ReceiptAmount, true
}

// HasReceiptAmount returns a boolean if a field has been set.
func (o *ReceiptSummaryType) HasReceiptAmount() bool {
	if o != nil && !IsNil(o.ReceiptAmount) {
		return true
	}

	return false
}

// SetReceiptAmount gets a reference to the given CurrencyAmountType and assigns it to the ReceiptAmount field.
func (o *ReceiptSummaryType) SetReceiptAmount(v CurrencyAmountType) {
	o.ReceiptAmount = &v
}

// GetReceiptNo returns the ReceiptNo field value if set, zero value otherwise.
func (o *ReceiptSummaryType) GetReceiptNo() float32 {
	if o == nil || IsNil(o.ReceiptNo) {
		var ret float32
		return ret
	}
	return *o.ReceiptNo
}

// GetReceiptNoOk returns a tuple with the ReceiptNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceiptSummaryType) GetReceiptNoOk() (*float32, bool) {
	if o == nil || IsNil(o.ReceiptNo) {
		return nil, false
	}
	return o.ReceiptNo, true
}

// HasReceiptNo returns a boolean if a field has been set.
func (o *ReceiptSummaryType) HasReceiptNo() bool {
	if o != nil && !IsNil(o.ReceiptNo) {
		return true
	}

	return false
}

// SetReceiptNo gets a reference to the given float32 and assigns it to the ReceiptNo field.
func (o *ReceiptSummaryType) SetReceiptNo(v float32) {
	o.ReceiptNo = &v
}

// GetReceiptType returns the ReceiptType field value if set, zero value otherwise.
func (o *ReceiptSummaryType) GetReceiptType() ReceiptType {
	if o == nil || IsNil(o.ReceiptType) {
		var ret ReceiptType
		return ret
	}
	return *o.ReceiptType
}

// GetReceiptTypeOk returns a tuple with the ReceiptType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceiptSummaryType) GetReceiptTypeOk() (*ReceiptType, bool) {
	if o == nil || IsNil(o.ReceiptType) {
		return nil, false
	}
	return o.ReceiptType, true
}

// HasReceiptType returns a boolean if a field has been set.
func (o *ReceiptSummaryType) HasReceiptType() bool {
	if o != nil && !IsNil(o.ReceiptType) {
		return true
	}

	return false
}

// SetReceiptType gets a reference to the given ReceiptType and assigns it to the ReceiptType field.
func (o *ReceiptSummaryType) SetReceiptType(v ReceiptType) {
	o.ReceiptType = &v
}

// GetReceiptTypeDescription returns the ReceiptTypeDescription field value if set, zero value otherwise.
func (o *ReceiptSummaryType) GetReceiptTypeDescription() string {
	if o == nil || IsNil(o.ReceiptTypeDescription) {
		var ret string
		return ret
	}
	return *o.ReceiptTypeDescription
}

// GetReceiptTypeDescriptionOk returns a tuple with the ReceiptTypeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceiptSummaryType) GetReceiptTypeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ReceiptTypeDescription) {
		return nil, false
	}
	return o.ReceiptTypeDescription, true
}

// HasReceiptTypeDescription returns a boolean if a field has been set.
func (o *ReceiptSummaryType) HasReceiptTypeDescription() bool {
	if o != nil && !IsNil(o.ReceiptTypeDescription) {
		return true
	}

	return false
}

// SetReceiptTypeDescription gets a reference to the given string and assigns it to the ReceiptTypeDescription field.
func (o *ReceiptSummaryType) SetReceiptTypeDescription(v string) {
	o.ReceiptTypeDescription = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *ReceiptSummaryType) GetStart() string {
	if o == nil || IsNil(o.Start) {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceiptSummaryType) GetStartOk() (*string, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *ReceiptSummaryType) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *ReceiptSummaryType) SetStart(v string) {
	o.Start = &v
}

// GetTaxInvoice returns the TaxInvoice field value if set, zero value otherwise.
func (o *ReceiptSummaryType) GetTaxInvoice() string {
	if o == nil || IsNil(o.TaxInvoice) {
		var ret string
		return ret
	}
	return *o.TaxInvoice
}

// GetTaxInvoiceOk returns a tuple with the TaxInvoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceiptSummaryType) GetTaxInvoiceOk() (*string, bool) {
	if o == nil || IsNil(o.TaxInvoice) {
		return nil, false
	}
	return o.TaxInvoice, true
}

// HasTaxInvoice returns a boolean if a field has been set.
func (o *ReceiptSummaryType) HasTaxInvoice() bool {
	if o != nil && !IsNil(o.TaxInvoice) {
		return true
	}

	return false
}

// SetTaxInvoice gets a reference to the given string and assigns it to the TaxInvoice field.
func (o *ReceiptSummaryType) SetTaxInvoice(v string) {
	o.TaxInvoice = &v
}

// GetTransactionNo returns the TransactionNo field value if set, zero value otherwise.
func (o *ReceiptSummaryType) GetTransactionNo() string {
	if o == nil || IsNil(o.TransactionNo) {
		var ret string
		return ret
	}
	return *o.TransactionNo
}

// GetTransactionNoOk returns a tuple with the TransactionNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceiptSummaryType) GetTransactionNoOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionNo) {
		return nil, false
	}
	return o.TransactionNo, true
}

// HasTransactionNo returns a boolean if a field has been set.
func (o *ReceiptSummaryType) HasTransactionNo() bool {
	if o != nil && !IsNil(o.TransactionNo) {
		return true
	}

	return false
}

// SetTransactionNo gets a reference to the given string and assigns it to the TransactionNo field.
func (o *ReceiptSummaryType) SetTransactionNo(v string) {
	o.TransactionNo = &v
}

func (o ReceiptSummaryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReceiptSummaryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomNumbers) {
		toSerialize["customNumbers"] = o.CustomNumbers
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.PayeeInfo) {
		toSerialize["payeeInfo"] = o.PayeeInfo
	}
	if !IsNil(o.ReceiptAmount) {
		toSerialize["receiptAmount"] = o.ReceiptAmount
	}
	if !IsNil(o.ReceiptNo) {
		toSerialize["receiptNo"] = o.ReceiptNo
	}
	if !IsNil(o.ReceiptType) {
		toSerialize["receiptType"] = o.ReceiptType
	}
	if !IsNil(o.ReceiptTypeDescription) {
		toSerialize["receiptTypeDescription"] = o.ReceiptTypeDescription
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.TaxInvoice) {
		toSerialize["taxInvoice"] = o.TaxInvoice
	}
	if !IsNil(o.TransactionNo) {
		toSerialize["transactionNo"] = o.TransactionNo
	}
	return toSerialize, nil
}

type NullableReceiptSummaryType struct {
	value *ReceiptSummaryType
	isSet bool
}

func (v NullableReceiptSummaryType) Get() *ReceiptSummaryType {
	return v.value
}

func (v *NullableReceiptSummaryType) Set(val *ReceiptSummaryType) {
	v.value = val
	v.isSet = true
}

func (v NullableReceiptSummaryType) IsSet() bool {
	return v.isSet
}

func (v *NullableReceiptSummaryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReceiptSummaryType(val *ReceiptSummaryType) *NullableReceiptSummaryType {
	return &NullableReceiptSummaryType{value: val, isSet: true}
}

func (v NullableReceiptSummaryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReceiptSummaryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


