/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the UpdateFixedChargesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateFixedChargesRequest{}

// UpdateFixedChargesRequest struct for UpdateFixedChargesRequest
type UpdateFixedChargesRequest struct {
	// Holds fixed charge detail.
	FixedCharges []FixedChargeType `json:"fixedCharges,omitempty"`
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	HotelId *string `json:"hotelId,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	ReservationId *UniqueIDType `json:"reservationId,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewUpdateFixedChargesRequest instantiates a new UpdateFixedChargesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateFixedChargesRequest() *UpdateFixedChargesRequest {
	this := UpdateFixedChargesRequest{}
	return &this
}

// NewUpdateFixedChargesRequestWithDefaults instantiates a new UpdateFixedChargesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateFixedChargesRequestWithDefaults() *UpdateFixedChargesRequest {
	this := UpdateFixedChargesRequest{}
	return &this
}

// GetFixedCharges returns the FixedCharges field value if set, zero value otherwise.
func (o *UpdateFixedChargesRequest) GetFixedCharges() []FixedChargeType {
	if o == nil || IsNil(o.FixedCharges) {
		var ret []FixedChargeType
		return ret
	}
	return o.FixedCharges
}

// GetFixedChargesOk returns a tuple with the FixedCharges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFixedChargesRequest) GetFixedChargesOk() ([]FixedChargeType, bool) {
	if o == nil || IsNil(o.FixedCharges) {
		return nil, false
	}
	return o.FixedCharges, true
}

// HasFixedCharges returns a boolean if a field has been set.
func (o *UpdateFixedChargesRequest) HasFixedCharges() bool {
	if o != nil && !IsNil(o.FixedCharges) {
		return true
	}

	return false
}

// SetFixedCharges gets a reference to the given []FixedChargeType and assigns it to the FixedCharges field.
func (o *UpdateFixedChargesRequest) SetFixedCharges(v []FixedChargeType) {
	o.FixedCharges = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *UpdateFixedChargesRequest) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFixedChargesRequest) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *UpdateFixedChargesRequest) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *UpdateFixedChargesRequest) SetHotelId(v string) {
	o.HotelId = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *UpdateFixedChargesRequest) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFixedChargesRequest) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *UpdateFixedChargesRequest) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *UpdateFixedChargesRequest) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetReservationId returns the ReservationId field value if set, zero value otherwise.
func (o *UpdateFixedChargesRequest) GetReservationId() UniqueIDType {
	if o == nil || IsNil(o.ReservationId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ReservationId
}

// GetReservationIdOk returns a tuple with the ReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFixedChargesRequest) GetReservationIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ReservationId) {
		return nil, false
	}
	return o.ReservationId, true
}

// HasReservationId returns a boolean if a field has been set.
func (o *UpdateFixedChargesRequest) HasReservationId() bool {
	if o != nil && !IsNil(o.ReservationId) {
		return true
	}

	return false
}

// SetReservationId gets a reference to the given UniqueIDType and assigns it to the ReservationId field.
func (o *UpdateFixedChargesRequest) SetReservationId(v UniqueIDType) {
	o.ReservationId = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *UpdateFixedChargesRequest) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFixedChargesRequest) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *UpdateFixedChargesRequest) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *UpdateFixedChargesRequest) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o UpdateFixedChargesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateFixedChargesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FixedCharges) {
		toSerialize["fixedCharges"] = o.FixedCharges
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.ReservationId) {
		toSerialize["reservationId"] = o.ReservationId
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableUpdateFixedChargesRequest struct {
	value *UpdateFixedChargesRequest
	isSet bool
}

func (v NullableUpdateFixedChargesRequest) Get() *UpdateFixedChargesRequest {
	return v.value
}

func (v *NullableUpdateFixedChargesRequest) Set(val *UpdateFixedChargesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateFixedChargesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateFixedChargesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateFixedChargesRequest(val *UpdateFixedChargesRequest) *NullableUpdateFixedChargesRequest {
	return &NullableUpdateFixedChargesRequest{value: val, isSet: true}
}

func (v NullableUpdateFixedChargesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateFixedChargesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


