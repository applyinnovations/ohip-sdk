/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the AwardPaymentDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwardPaymentDetails{}

// AwardPaymentDetails Request object for fetching a membership transaction.
type AwardPaymentDetails struct {
	// Type of award that is used to redeem points.
	AwardType *string `json:"awardType,omitempty"`
	// A monetary amount representing the outstanding balance.
	BillAmount *float32 `json:"billAmount,omitempty"`
	// Folio Window.
	FolioView *int32 `json:"folioView,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// The number of points that are redeemed for this award.
	PointsRequired *float32 `json:"pointsRequired,omitempty"`
	// The value of amount or points that is being redeemed.
	RedeemAmount *int32 `json:"redeemAmount,omitempty"`
	// Voucher number of redeemed award.
	VoucherNo *string `json:"voucherNo,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewAwardPaymentDetails instantiates a new AwardPaymentDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwardPaymentDetails() *AwardPaymentDetails {
	this := AwardPaymentDetails{}
	return &this
}

// NewAwardPaymentDetailsWithDefaults instantiates a new AwardPaymentDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwardPaymentDetailsWithDefaults() *AwardPaymentDetails {
	this := AwardPaymentDetails{}
	return &this
}

// GetAwardType returns the AwardType field value if set, zero value otherwise.
func (o *AwardPaymentDetails) GetAwardType() string {
	if o == nil || IsNil(o.AwardType) {
		var ret string
		return ret
	}
	return *o.AwardType
}

// GetAwardTypeOk returns a tuple with the AwardType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardPaymentDetails) GetAwardTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AwardType) {
		return nil, false
	}
	return o.AwardType, true
}

// HasAwardType returns a boolean if a field has been set.
func (o *AwardPaymentDetails) HasAwardType() bool {
	if o != nil && !IsNil(o.AwardType) {
		return true
	}

	return false
}

// SetAwardType gets a reference to the given string and assigns it to the AwardType field.
func (o *AwardPaymentDetails) SetAwardType(v string) {
	o.AwardType = &v
}

// GetBillAmount returns the BillAmount field value if set, zero value otherwise.
func (o *AwardPaymentDetails) GetBillAmount() float32 {
	if o == nil || IsNil(o.BillAmount) {
		var ret float32
		return ret
	}
	return *o.BillAmount
}

// GetBillAmountOk returns a tuple with the BillAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardPaymentDetails) GetBillAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.BillAmount) {
		return nil, false
	}
	return o.BillAmount, true
}

// HasBillAmount returns a boolean if a field has been set.
func (o *AwardPaymentDetails) HasBillAmount() bool {
	if o != nil && !IsNil(o.BillAmount) {
		return true
	}

	return false
}

// SetBillAmount gets a reference to the given float32 and assigns it to the BillAmount field.
func (o *AwardPaymentDetails) SetBillAmount(v float32) {
	o.BillAmount = &v
}

// GetFolioView returns the FolioView field value if set, zero value otherwise.
func (o *AwardPaymentDetails) GetFolioView() int32 {
	if o == nil || IsNil(o.FolioView) {
		var ret int32
		return ret
	}
	return *o.FolioView
}

// GetFolioViewOk returns a tuple with the FolioView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardPaymentDetails) GetFolioViewOk() (*int32, bool) {
	if o == nil || IsNil(o.FolioView) {
		return nil, false
	}
	return o.FolioView, true
}

// HasFolioView returns a boolean if a field has been set.
func (o *AwardPaymentDetails) HasFolioView() bool {
	if o != nil && !IsNil(o.FolioView) {
		return true
	}

	return false
}

// SetFolioView gets a reference to the given int32 and assigns it to the FolioView field.
func (o *AwardPaymentDetails) SetFolioView(v int32) {
	o.FolioView = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *AwardPaymentDetails) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardPaymentDetails) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *AwardPaymentDetails) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *AwardPaymentDetails) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetPointsRequired returns the PointsRequired field value if set, zero value otherwise.
func (o *AwardPaymentDetails) GetPointsRequired() float32 {
	if o == nil || IsNil(o.PointsRequired) {
		var ret float32
		return ret
	}
	return *o.PointsRequired
}

// GetPointsRequiredOk returns a tuple with the PointsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardPaymentDetails) GetPointsRequiredOk() (*float32, bool) {
	if o == nil || IsNil(o.PointsRequired) {
		return nil, false
	}
	return o.PointsRequired, true
}

// HasPointsRequired returns a boolean if a field has been set.
func (o *AwardPaymentDetails) HasPointsRequired() bool {
	if o != nil && !IsNil(o.PointsRequired) {
		return true
	}

	return false
}

// SetPointsRequired gets a reference to the given float32 and assigns it to the PointsRequired field.
func (o *AwardPaymentDetails) SetPointsRequired(v float32) {
	o.PointsRequired = &v
}

// GetRedeemAmount returns the RedeemAmount field value if set, zero value otherwise.
func (o *AwardPaymentDetails) GetRedeemAmount() int32 {
	if o == nil || IsNil(o.RedeemAmount) {
		var ret int32
		return ret
	}
	return *o.RedeemAmount
}

// GetRedeemAmountOk returns a tuple with the RedeemAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardPaymentDetails) GetRedeemAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.RedeemAmount) {
		return nil, false
	}
	return o.RedeemAmount, true
}

// HasRedeemAmount returns a boolean if a field has been set.
func (o *AwardPaymentDetails) HasRedeemAmount() bool {
	if o != nil && !IsNil(o.RedeemAmount) {
		return true
	}

	return false
}

// SetRedeemAmount gets a reference to the given int32 and assigns it to the RedeemAmount field.
func (o *AwardPaymentDetails) SetRedeemAmount(v int32) {
	o.RedeemAmount = &v
}

// GetVoucherNo returns the VoucherNo field value if set, zero value otherwise.
func (o *AwardPaymentDetails) GetVoucherNo() string {
	if o == nil || IsNil(o.VoucherNo) {
		var ret string
		return ret
	}
	return *o.VoucherNo
}

// GetVoucherNoOk returns a tuple with the VoucherNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardPaymentDetails) GetVoucherNoOk() (*string, bool) {
	if o == nil || IsNil(o.VoucherNo) {
		return nil, false
	}
	return o.VoucherNo, true
}

// HasVoucherNo returns a boolean if a field has been set.
func (o *AwardPaymentDetails) HasVoucherNo() bool {
	if o != nil && !IsNil(o.VoucherNo) {
		return true
	}

	return false
}

// SetVoucherNo gets a reference to the given string and assigns it to the VoucherNo field.
func (o *AwardPaymentDetails) SetVoucherNo(v string) {
	o.VoucherNo = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *AwardPaymentDetails) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardPaymentDetails) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *AwardPaymentDetails) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *AwardPaymentDetails) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o AwardPaymentDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwardPaymentDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AwardType) {
		toSerialize["awardType"] = o.AwardType
	}
	if !IsNil(o.BillAmount) {
		toSerialize["billAmount"] = o.BillAmount
	}
	if !IsNil(o.FolioView) {
		toSerialize["folioView"] = o.FolioView
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.PointsRequired) {
		toSerialize["pointsRequired"] = o.PointsRequired
	}
	if !IsNil(o.RedeemAmount) {
		toSerialize["redeemAmount"] = o.RedeemAmount
	}
	if !IsNil(o.VoucherNo) {
		toSerialize["voucherNo"] = o.VoucherNo
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableAwardPaymentDetails struct {
	value *AwardPaymentDetails
	isSet bool
}

func (v NullableAwardPaymentDetails) Get() *AwardPaymentDetails {
	return v.value
}

func (v *NullableAwardPaymentDetails) Set(val *AwardPaymentDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableAwardPaymentDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableAwardPaymentDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwardPaymentDetails(val *AwardPaymentDetails) *NullableAwardPaymentDetails {
	return &NullableAwardPaymentDetails{value: val, isSet: true}
}

func (v NullableAwardPaymentDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwardPaymentDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


