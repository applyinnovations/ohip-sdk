/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the RedeemPrepaidCardsStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RedeemPrepaidCardsStatus{}

// RedeemPrepaidCardsStatus Response for redeem Prepaid cards request.
type RedeemPrepaidCardsStatus struct {
	// Prepaid card info object.
	PrepaidCards []PrepaidCardInfoType `json:"prepaidCards,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewRedeemPrepaidCardsStatus instantiates a new RedeemPrepaidCardsStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedeemPrepaidCardsStatus() *RedeemPrepaidCardsStatus {
	this := RedeemPrepaidCardsStatus{}
	return &this
}

// NewRedeemPrepaidCardsStatusWithDefaults instantiates a new RedeemPrepaidCardsStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedeemPrepaidCardsStatusWithDefaults() *RedeemPrepaidCardsStatus {
	this := RedeemPrepaidCardsStatus{}
	return &this
}

// GetPrepaidCards returns the PrepaidCards field value if set, zero value otherwise.
func (o *RedeemPrepaidCardsStatus) GetPrepaidCards() []PrepaidCardInfoType {
	if o == nil || IsNil(o.PrepaidCards) {
		var ret []PrepaidCardInfoType
		return ret
	}
	return o.PrepaidCards
}

// GetPrepaidCardsOk returns a tuple with the PrepaidCards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedeemPrepaidCardsStatus) GetPrepaidCardsOk() ([]PrepaidCardInfoType, bool) {
	if o == nil || IsNil(o.PrepaidCards) {
		return nil, false
	}
	return o.PrepaidCards, true
}

// HasPrepaidCards returns a boolean if a field has been set.
func (o *RedeemPrepaidCardsStatus) HasPrepaidCards() bool {
	if o != nil && !IsNil(o.PrepaidCards) {
		return true
	}

	return false
}

// SetPrepaidCards gets a reference to the given []PrepaidCardInfoType and assigns it to the PrepaidCards field.
func (o *RedeemPrepaidCardsStatus) SetPrepaidCards(v []PrepaidCardInfoType) {
	o.PrepaidCards = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *RedeemPrepaidCardsStatus) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedeemPrepaidCardsStatus) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *RedeemPrepaidCardsStatus) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *RedeemPrepaidCardsStatus) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o RedeemPrepaidCardsStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RedeemPrepaidCardsStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PrepaidCards) {
		toSerialize["prepaidCards"] = o.PrepaidCards
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableRedeemPrepaidCardsStatus struct {
	value *RedeemPrepaidCardsStatus
	isSet bool
}

func (v NullableRedeemPrepaidCardsStatus) Get() *RedeemPrepaidCardsStatus {
	return v.value
}

func (v *NullableRedeemPrepaidCardsStatus) Set(val *RedeemPrepaidCardsStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRedeemPrepaidCardsStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRedeemPrepaidCardsStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedeemPrepaidCardsStatus(val *RedeemPrepaidCardsStatus) *NullableRedeemPrepaidCardsStatus {
	return &NullableRedeemPrepaidCardsStatus{value: val, isSet: true}
}

func (v NullableRedeemPrepaidCardsStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedeemPrepaidCardsStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


