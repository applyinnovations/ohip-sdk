/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the FiscalSupportingDocumentCriteriaType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FiscalSupportingDocumentCriteriaType{}

// FiscalSupportingDocumentCriteriaType Criteria for sending supporting document to fiscal partner.
type FiscalSupportingDocumentCriteriaType struct {
	// Supporting document number.
	DocumentNo *int32 `json:"documentNo,omitempty"`
	DocumentType *FiscalSupportingDocumentType `json:"documentType,omitempty"`
	// Unique ID of the hotel
	HotelId *string `json:"hotelId,omitempty"`
}

// NewFiscalSupportingDocumentCriteriaType instantiates a new FiscalSupportingDocumentCriteriaType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFiscalSupportingDocumentCriteriaType() *FiscalSupportingDocumentCriteriaType {
	this := FiscalSupportingDocumentCriteriaType{}
	return &this
}

// NewFiscalSupportingDocumentCriteriaTypeWithDefaults instantiates a new FiscalSupportingDocumentCriteriaType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFiscalSupportingDocumentCriteriaTypeWithDefaults() *FiscalSupportingDocumentCriteriaType {
	this := FiscalSupportingDocumentCriteriaType{}
	return &this
}

// GetDocumentNo returns the DocumentNo field value if set, zero value otherwise.
func (o *FiscalSupportingDocumentCriteriaType) GetDocumentNo() int32 {
	if o == nil || IsNil(o.DocumentNo) {
		var ret int32
		return ret
	}
	return *o.DocumentNo
}

// GetDocumentNoOk returns a tuple with the DocumentNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalSupportingDocumentCriteriaType) GetDocumentNoOk() (*int32, bool) {
	if o == nil || IsNil(o.DocumentNo) {
		return nil, false
	}
	return o.DocumentNo, true
}

// HasDocumentNo returns a boolean if a field has been set.
func (o *FiscalSupportingDocumentCriteriaType) HasDocumentNo() bool {
	if o != nil && !IsNil(o.DocumentNo) {
		return true
	}

	return false
}

// SetDocumentNo gets a reference to the given int32 and assigns it to the DocumentNo field.
func (o *FiscalSupportingDocumentCriteriaType) SetDocumentNo(v int32) {
	o.DocumentNo = &v
}

// GetDocumentType returns the DocumentType field value if set, zero value otherwise.
func (o *FiscalSupportingDocumentCriteriaType) GetDocumentType() FiscalSupportingDocumentType {
	if o == nil || IsNil(o.DocumentType) {
		var ret FiscalSupportingDocumentType
		return ret
	}
	return *o.DocumentType
}

// GetDocumentTypeOk returns a tuple with the DocumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalSupportingDocumentCriteriaType) GetDocumentTypeOk() (*FiscalSupportingDocumentType, bool) {
	if o == nil || IsNil(o.DocumentType) {
		return nil, false
	}
	return o.DocumentType, true
}

// HasDocumentType returns a boolean if a field has been set.
func (o *FiscalSupportingDocumentCriteriaType) HasDocumentType() bool {
	if o != nil && !IsNil(o.DocumentType) {
		return true
	}

	return false
}

// SetDocumentType gets a reference to the given FiscalSupportingDocumentType and assigns it to the DocumentType field.
func (o *FiscalSupportingDocumentCriteriaType) SetDocumentType(v FiscalSupportingDocumentType) {
	o.DocumentType = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *FiscalSupportingDocumentCriteriaType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalSupportingDocumentCriteriaType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *FiscalSupportingDocumentCriteriaType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *FiscalSupportingDocumentCriteriaType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o FiscalSupportingDocumentCriteriaType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FiscalSupportingDocumentCriteriaType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DocumentNo) {
		toSerialize["documentNo"] = o.DocumentNo
	}
	if !IsNil(o.DocumentType) {
		toSerialize["documentType"] = o.DocumentType
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableFiscalSupportingDocumentCriteriaType struct {
	value *FiscalSupportingDocumentCriteriaType
	isSet bool
}

func (v NullableFiscalSupportingDocumentCriteriaType) Get() *FiscalSupportingDocumentCriteriaType {
	return v.value
}

func (v *NullableFiscalSupportingDocumentCriteriaType) Set(val *FiscalSupportingDocumentCriteriaType) {
	v.value = val
	v.isSet = true
}

func (v NullableFiscalSupportingDocumentCriteriaType) IsSet() bool {
	return v.isSet
}

func (v *NullableFiscalSupportingDocumentCriteriaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiscalSupportingDocumentCriteriaType(val *FiscalSupportingDocumentCriteriaType) *NullableFiscalSupportingDocumentCriteriaType {
	return &NullableFiscalSupportingDocumentCriteriaType{value: val, isSet: true}
}

func (v NullableFiscalSupportingDocumentCriteriaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiscalSupportingDocumentCriteriaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


