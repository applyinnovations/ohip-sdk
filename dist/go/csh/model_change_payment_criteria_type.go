/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the ChangePaymentCriteriaType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangePaymentCriteriaType{}

// ChangePaymentCriteriaType struct for ChangePaymentCriteriaType
type ChangePaymentCriteriaType struct {
	// Property code.
	HotelId *string `json:"hotelId,omitempty"`
	// Transaction number of the payment being corrected.
	TransactionNo *float32 `json:"transactionNo,omitempty"`
	// Corrected user-defined posting reference.
	Reference *string `json:"reference,omitempty"`
	// Corrected user-defined posting remark.
	Remark *string `json:"remark,omitempty"`
	// Corrected Cheque number.
	CheckNumber *string `json:"checkNumber,omitempty"`
	// Corrected POS covers - number of copies of receipts that got printed for that particular receipt.
	Covers *string `json:"covers,omitempty"`
	// Tax Service Accounting Codes used.
	DepositTransactionId *string `json:"depositTransactionId,omitempty"`
	// The Cashier ID of the Cashier who is currently processing the transaction(s).
	CashierId *float32 `json:"cashierId,omitempty"`
}

// NewChangePaymentCriteriaType instantiates a new ChangePaymentCriteriaType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangePaymentCriteriaType() *ChangePaymentCriteriaType {
	this := ChangePaymentCriteriaType{}
	return &this
}

// NewChangePaymentCriteriaTypeWithDefaults instantiates a new ChangePaymentCriteriaType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangePaymentCriteriaTypeWithDefaults() *ChangePaymentCriteriaType {
	this := ChangePaymentCriteriaType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ChangePaymentCriteriaType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangePaymentCriteriaType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ChangePaymentCriteriaType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ChangePaymentCriteriaType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetTransactionNo returns the TransactionNo field value if set, zero value otherwise.
func (o *ChangePaymentCriteriaType) GetTransactionNo() float32 {
	if o == nil || IsNil(o.TransactionNo) {
		var ret float32
		return ret
	}
	return *o.TransactionNo
}

// GetTransactionNoOk returns a tuple with the TransactionNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangePaymentCriteriaType) GetTransactionNoOk() (*float32, bool) {
	if o == nil || IsNil(o.TransactionNo) {
		return nil, false
	}
	return o.TransactionNo, true
}

// HasTransactionNo returns a boolean if a field has been set.
func (o *ChangePaymentCriteriaType) HasTransactionNo() bool {
	if o != nil && !IsNil(o.TransactionNo) {
		return true
	}

	return false
}

// SetTransactionNo gets a reference to the given float32 and assigns it to the TransactionNo field.
func (o *ChangePaymentCriteriaType) SetTransactionNo(v float32) {
	o.TransactionNo = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *ChangePaymentCriteriaType) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangePaymentCriteriaType) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *ChangePaymentCriteriaType) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *ChangePaymentCriteriaType) SetReference(v string) {
	o.Reference = &v
}

// GetRemark returns the Remark field value if set, zero value otherwise.
func (o *ChangePaymentCriteriaType) GetRemark() string {
	if o == nil || IsNil(o.Remark) {
		var ret string
		return ret
	}
	return *o.Remark
}

// GetRemarkOk returns a tuple with the Remark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangePaymentCriteriaType) GetRemarkOk() (*string, bool) {
	if o == nil || IsNil(o.Remark) {
		return nil, false
	}
	return o.Remark, true
}

// HasRemark returns a boolean if a field has been set.
func (o *ChangePaymentCriteriaType) HasRemark() bool {
	if o != nil && !IsNil(o.Remark) {
		return true
	}

	return false
}

// SetRemark gets a reference to the given string and assigns it to the Remark field.
func (o *ChangePaymentCriteriaType) SetRemark(v string) {
	o.Remark = &v
}

// GetCheckNumber returns the CheckNumber field value if set, zero value otherwise.
func (o *ChangePaymentCriteriaType) GetCheckNumber() string {
	if o == nil || IsNil(o.CheckNumber) {
		var ret string
		return ret
	}
	return *o.CheckNumber
}

// GetCheckNumberOk returns a tuple with the CheckNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangePaymentCriteriaType) GetCheckNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CheckNumber) {
		return nil, false
	}
	return o.CheckNumber, true
}

// HasCheckNumber returns a boolean if a field has been set.
func (o *ChangePaymentCriteriaType) HasCheckNumber() bool {
	if o != nil && !IsNil(o.CheckNumber) {
		return true
	}

	return false
}

// SetCheckNumber gets a reference to the given string and assigns it to the CheckNumber field.
func (o *ChangePaymentCriteriaType) SetCheckNumber(v string) {
	o.CheckNumber = &v
}

// GetCovers returns the Covers field value if set, zero value otherwise.
func (o *ChangePaymentCriteriaType) GetCovers() string {
	if o == nil || IsNil(o.Covers) {
		var ret string
		return ret
	}
	return *o.Covers
}

// GetCoversOk returns a tuple with the Covers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangePaymentCriteriaType) GetCoversOk() (*string, bool) {
	if o == nil || IsNil(o.Covers) {
		return nil, false
	}
	return o.Covers, true
}

// HasCovers returns a boolean if a field has been set.
func (o *ChangePaymentCriteriaType) HasCovers() bool {
	if o != nil && !IsNil(o.Covers) {
		return true
	}

	return false
}

// SetCovers gets a reference to the given string and assigns it to the Covers field.
func (o *ChangePaymentCriteriaType) SetCovers(v string) {
	o.Covers = &v
}

// GetDepositTransactionId returns the DepositTransactionId field value if set, zero value otherwise.
func (o *ChangePaymentCriteriaType) GetDepositTransactionId() string {
	if o == nil || IsNil(o.DepositTransactionId) {
		var ret string
		return ret
	}
	return *o.DepositTransactionId
}

// GetDepositTransactionIdOk returns a tuple with the DepositTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangePaymentCriteriaType) GetDepositTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.DepositTransactionId) {
		return nil, false
	}
	return o.DepositTransactionId, true
}

// HasDepositTransactionId returns a boolean if a field has been set.
func (o *ChangePaymentCriteriaType) HasDepositTransactionId() bool {
	if o != nil && !IsNil(o.DepositTransactionId) {
		return true
	}

	return false
}

// SetDepositTransactionId gets a reference to the given string and assigns it to the DepositTransactionId field.
func (o *ChangePaymentCriteriaType) SetDepositTransactionId(v string) {
	o.DepositTransactionId = &v
}

// GetCashierId returns the CashierId field value if set, zero value otherwise.
func (o *ChangePaymentCriteriaType) GetCashierId() float32 {
	if o == nil || IsNil(o.CashierId) {
		var ret float32
		return ret
	}
	return *o.CashierId
}

// GetCashierIdOk returns a tuple with the CashierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangePaymentCriteriaType) GetCashierIdOk() (*float32, bool) {
	if o == nil || IsNil(o.CashierId) {
		return nil, false
	}
	return o.CashierId, true
}

// HasCashierId returns a boolean if a field has been set.
func (o *ChangePaymentCriteriaType) HasCashierId() bool {
	if o != nil && !IsNil(o.CashierId) {
		return true
	}

	return false
}

// SetCashierId gets a reference to the given float32 and assigns it to the CashierId field.
func (o *ChangePaymentCriteriaType) SetCashierId(v float32) {
	o.CashierId = &v
}

func (o ChangePaymentCriteriaType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangePaymentCriteriaType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.TransactionNo) {
		toSerialize["transactionNo"] = o.TransactionNo
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.Remark) {
		toSerialize["remark"] = o.Remark
	}
	if !IsNil(o.CheckNumber) {
		toSerialize["checkNumber"] = o.CheckNumber
	}
	if !IsNil(o.Covers) {
		toSerialize["covers"] = o.Covers
	}
	if !IsNil(o.DepositTransactionId) {
		toSerialize["depositTransactionId"] = o.DepositTransactionId
	}
	if !IsNil(o.CashierId) {
		toSerialize["cashierId"] = o.CashierId
	}
	return toSerialize, nil
}

type NullableChangePaymentCriteriaType struct {
	value *ChangePaymentCriteriaType
	isSet bool
}

func (v NullableChangePaymentCriteriaType) Get() *ChangePaymentCriteriaType {
	return v.value
}

func (v *NullableChangePaymentCriteriaType) Set(val *ChangePaymentCriteriaType) {
	v.value = val
	v.isSet = true
}

func (v NullableChangePaymentCriteriaType) IsSet() bool {
	return v.isSet
}

func (v *NullableChangePaymentCriteriaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangePaymentCriteriaType(val *ChangePaymentCriteriaType) *NullableChangePaymentCriteriaType {
	return &NullableChangePaymentCriteriaType{value: val, isSet: true}
}

func (v NullableChangePaymentCriteriaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangePaymentCriteriaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


