/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the HotelCashierTransactionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelCashierTransactionType{}

// HotelCashierTransactionType Cashier Shift amounts for each Hotel group by currency code
type HotelCashierTransactionType struct {
	// Hotel Code.
	HotelId *string `json:"hotelId,omitempty"`
	// Hotel's transaction in cashier shift.
	Transactions []CashierTransactionType `json:"transactions,omitempty"`
}

// NewHotelCashierTransactionType instantiates a new HotelCashierTransactionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelCashierTransactionType() *HotelCashierTransactionType {
	this := HotelCashierTransactionType{}
	return &this
}

// NewHotelCashierTransactionTypeWithDefaults instantiates a new HotelCashierTransactionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelCashierTransactionTypeWithDefaults() *HotelCashierTransactionType {
	this := HotelCashierTransactionType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *HotelCashierTransactionType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelCashierTransactionType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *HotelCashierTransactionType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *HotelCashierTransactionType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetTransactions returns the Transactions field value if set, zero value otherwise.
func (o *HotelCashierTransactionType) GetTransactions() []CashierTransactionType {
	if o == nil || IsNil(o.Transactions) {
		var ret []CashierTransactionType
		return ret
	}
	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelCashierTransactionType) GetTransactionsOk() ([]CashierTransactionType, bool) {
	if o == nil || IsNil(o.Transactions) {
		return nil, false
	}
	return o.Transactions, true
}

// HasTransactions returns a boolean if a field has been set.
func (o *HotelCashierTransactionType) HasTransactions() bool {
	if o != nil && !IsNil(o.Transactions) {
		return true
	}

	return false
}

// SetTransactions gets a reference to the given []CashierTransactionType and assigns it to the Transactions field.
func (o *HotelCashierTransactionType) SetTransactions(v []CashierTransactionType) {
	o.Transactions = v
}

func (o HotelCashierTransactionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelCashierTransactionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Transactions) {
		toSerialize["transactions"] = o.Transactions
	}
	return toSerialize, nil
}

type NullableHotelCashierTransactionType struct {
	value *HotelCashierTransactionType
	isSet bool
}

func (v NullableHotelCashierTransactionType) Get() *HotelCashierTransactionType {
	return v.value
}

func (v *NullableHotelCashierTransactionType) Set(val *HotelCashierTransactionType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelCashierTransactionType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelCashierTransactionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelCashierTransactionType(val *HotelCashierTransactionType) *NullableHotelCashierTransactionType {
	return &NullableHotelCashierTransactionType{value: val, isSet: true}
}

func (v NullableHotelCashierTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelCashierTransactionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


