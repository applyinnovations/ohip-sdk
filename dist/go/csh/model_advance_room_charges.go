/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the AdvanceRoomCharges type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvanceRoomCharges{}

// AdvanceRoomCharges Request to post the Room Charges for a reservation in advance. This request posts the Room Charges for a reservation for tonight or for many nights starting from the last posted night. This can also be used to verify if the reservation has already been charged for the full stay. Setting the Verify flag will return details regarding the last Room Charge posted date and if there are any available dates for which the room charges can be posted in advance. Room Charges cannot be posted for dates prior to the business date of the resort. To make the actual posting, the verification flag should be false.
type AdvanceRoomCharges struct {
	Criteria *AdvanceRoomChargesCriteriaType `json:"criteria,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewAdvanceRoomCharges instantiates a new AdvanceRoomCharges object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvanceRoomCharges() *AdvanceRoomCharges {
	this := AdvanceRoomCharges{}
	return &this
}

// NewAdvanceRoomChargesWithDefaults instantiates a new AdvanceRoomCharges object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvanceRoomChargesWithDefaults() *AdvanceRoomCharges {
	this := AdvanceRoomCharges{}
	return &this
}

// GetCriteria returns the Criteria field value if set, zero value otherwise.
func (o *AdvanceRoomCharges) GetCriteria() AdvanceRoomChargesCriteriaType {
	if o == nil || IsNil(o.Criteria) {
		var ret AdvanceRoomChargesCriteriaType
		return ret
	}
	return *o.Criteria
}

// GetCriteriaOk returns a tuple with the Criteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvanceRoomCharges) GetCriteriaOk() (*AdvanceRoomChargesCriteriaType, bool) {
	if o == nil || IsNil(o.Criteria) {
		return nil, false
	}
	return o.Criteria, true
}

// HasCriteria returns a boolean if a field has been set.
func (o *AdvanceRoomCharges) HasCriteria() bool {
	if o != nil && !IsNil(o.Criteria) {
		return true
	}

	return false
}

// SetCriteria gets a reference to the given AdvanceRoomChargesCriteriaType and assigns it to the Criteria field.
func (o *AdvanceRoomCharges) SetCriteria(v AdvanceRoomChargesCriteriaType) {
	o.Criteria = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *AdvanceRoomCharges) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvanceRoomCharges) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *AdvanceRoomCharges) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *AdvanceRoomCharges) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *AdvanceRoomCharges) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvanceRoomCharges) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *AdvanceRoomCharges) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *AdvanceRoomCharges) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o AdvanceRoomCharges) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvanceRoomCharges) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Criteria) {
		toSerialize["criteria"] = o.Criteria
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableAdvanceRoomCharges struct {
	value *AdvanceRoomCharges
	isSet bool
}

func (v NullableAdvanceRoomCharges) Get() *AdvanceRoomCharges {
	return v.value
}

func (v *NullableAdvanceRoomCharges) Set(val *AdvanceRoomCharges) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvanceRoomCharges) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvanceRoomCharges) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvanceRoomCharges(val *AdvanceRoomCharges) *NullableAdvanceRoomCharges {
	return &NullableAdvanceRoomCharges{value: val, isSet: true}
}

func (v NullableAdvanceRoomCharges) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvanceRoomCharges) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


