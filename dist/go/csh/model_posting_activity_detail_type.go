/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the PostingActivityDetailType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostingActivityDetailType{}

// PostingActivityDetailType Details of a Posting transaction change.
type PostingActivityDetailType struct {
	HotelId *string `json:"hotelId,omitempty"`
	ReservationId *ReservationId `json:"reservationId,omitempty"`
	Activity *ActivityLogType `json:"activity,omitempty"`
	// List of postings.
	OldInfo []SummaryPostingType `json:"oldInfo,omitempty"`
	// List of postings.
	NewInfo []SummaryPostingType `json:"newInfo,omitempty"`
}

// NewPostingActivityDetailType instantiates a new PostingActivityDetailType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostingActivityDetailType() *PostingActivityDetailType {
	this := PostingActivityDetailType{}
	return &this
}

// NewPostingActivityDetailTypeWithDefaults instantiates a new PostingActivityDetailType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostingActivityDetailTypeWithDefaults() *PostingActivityDetailType {
	this := PostingActivityDetailType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *PostingActivityDetailType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostingActivityDetailType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *PostingActivityDetailType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *PostingActivityDetailType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetReservationId returns the ReservationId field value if set, zero value otherwise.
func (o *PostingActivityDetailType) GetReservationId() ReservationId {
	if o == nil || IsNil(o.ReservationId) {
		var ret ReservationId
		return ret
	}
	return *o.ReservationId
}

// GetReservationIdOk returns a tuple with the ReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostingActivityDetailType) GetReservationIdOk() (*ReservationId, bool) {
	if o == nil || IsNil(o.ReservationId) {
		return nil, false
	}
	return o.ReservationId, true
}

// HasReservationId returns a boolean if a field has been set.
func (o *PostingActivityDetailType) HasReservationId() bool {
	if o != nil && !IsNil(o.ReservationId) {
		return true
	}

	return false
}

// SetReservationId gets a reference to the given ReservationId and assigns it to the ReservationId field.
func (o *PostingActivityDetailType) SetReservationId(v ReservationId) {
	o.ReservationId = &v
}

// GetActivity returns the Activity field value if set, zero value otherwise.
func (o *PostingActivityDetailType) GetActivity() ActivityLogType {
	if o == nil || IsNil(o.Activity) {
		var ret ActivityLogType
		return ret
	}
	return *o.Activity
}

// GetActivityOk returns a tuple with the Activity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostingActivityDetailType) GetActivityOk() (*ActivityLogType, bool) {
	if o == nil || IsNil(o.Activity) {
		return nil, false
	}
	return o.Activity, true
}

// HasActivity returns a boolean if a field has been set.
func (o *PostingActivityDetailType) HasActivity() bool {
	if o != nil && !IsNil(o.Activity) {
		return true
	}

	return false
}

// SetActivity gets a reference to the given ActivityLogType and assigns it to the Activity field.
func (o *PostingActivityDetailType) SetActivity(v ActivityLogType) {
	o.Activity = &v
}

// GetOldInfo returns the OldInfo field value if set, zero value otherwise.
func (o *PostingActivityDetailType) GetOldInfo() []SummaryPostingType {
	if o == nil || IsNil(o.OldInfo) {
		var ret []SummaryPostingType
		return ret
	}
	return o.OldInfo
}

// GetOldInfoOk returns a tuple with the OldInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostingActivityDetailType) GetOldInfoOk() ([]SummaryPostingType, bool) {
	if o == nil || IsNil(o.OldInfo) {
		return nil, false
	}
	return o.OldInfo, true
}

// HasOldInfo returns a boolean if a field has been set.
func (o *PostingActivityDetailType) HasOldInfo() bool {
	if o != nil && !IsNil(o.OldInfo) {
		return true
	}

	return false
}

// SetOldInfo gets a reference to the given []SummaryPostingType and assigns it to the OldInfo field.
func (o *PostingActivityDetailType) SetOldInfo(v []SummaryPostingType) {
	o.OldInfo = v
}

// GetNewInfo returns the NewInfo field value if set, zero value otherwise.
func (o *PostingActivityDetailType) GetNewInfo() []SummaryPostingType {
	if o == nil || IsNil(o.NewInfo) {
		var ret []SummaryPostingType
		return ret
	}
	return o.NewInfo
}

// GetNewInfoOk returns a tuple with the NewInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostingActivityDetailType) GetNewInfoOk() ([]SummaryPostingType, bool) {
	if o == nil || IsNil(o.NewInfo) {
		return nil, false
	}
	return o.NewInfo, true
}

// HasNewInfo returns a boolean if a field has been set.
func (o *PostingActivityDetailType) HasNewInfo() bool {
	if o != nil && !IsNil(o.NewInfo) {
		return true
	}

	return false
}

// SetNewInfo gets a reference to the given []SummaryPostingType and assigns it to the NewInfo field.
func (o *PostingActivityDetailType) SetNewInfo(v []SummaryPostingType) {
	o.NewInfo = v
}

func (o PostingActivityDetailType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostingActivityDetailType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ReservationId) {
		toSerialize["reservationId"] = o.ReservationId
	}
	if !IsNil(o.Activity) {
		toSerialize["activity"] = o.Activity
	}
	if !IsNil(o.OldInfo) {
		toSerialize["oldInfo"] = o.OldInfo
	}
	if !IsNil(o.NewInfo) {
		toSerialize["newInfo"] = o.NewInfo
	}
	return toSerialize, nil
}

type NullablePostingActivityDetailType struct {
	value *PostingActivityDetailType
	isSet bool
}

func (v NullablePostingActivityDetailType) Get() *PostingActivityDetailType {
	return v.value
}

func (v *NullablePostingActivityDetailType) Set(val *PostingActivityDetailType) {
	v.value = val
	v.isSet = true
}

func (v NullablePostingActivityDetailType) IsSet() bool {
	return v.isSet
}

func (v *NullablePostingActivityDetailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostingActivityDetailType(val *PostingActivityDetailType) *NullablePostingActivityDetailType {
	return &NullablePostingActivityDetailType{value: val, isSet: true}
}

func (v NullablePostingActivityDetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostingActivityDetailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


