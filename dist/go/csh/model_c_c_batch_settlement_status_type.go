/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the CCBatchSettlementStatusType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CCBatchSettlementStatusType{}

// CCBatchSettlementStatusType Provides status information for credit card settlements .
type CCBatchSettlementStatusType struct {
	// Batch Id for identify status of job.
	Reason *string `json:"reason,omitempty"`
	SettlementId *UniqueIDType `json:"settlementId,omitempty"`
	// Status of credit card settlements.
	SettlementStatus *string `json:"settlementStatus,omitempty"`
}

// NewCCBatchSettlementStatusType instantiates a new CCBatchSettlementStatusType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCCBatchSettlementStatusType() *CCBatchSettlementStatusType {
	this := CCBatchSettlementStatusType{}
	return &this
}

// NewCCBatchSettlementStatusTypeWithDefaults instantiates a new CCBatchSettlementStatusType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCCBatchSettlementStatusTypeWithDefaults() *CCBatchSettlementStatusType {
	this := CCBatchSettlementStatusType{}
	return &this
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *CCBatchSettlementStatusType) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CCBatchSettlementStatusType) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *CCBatchSettlementStatusType) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *CCBatchSettlementStatusType) SetReason(v string) {
	o.Reason = &v
}

// GetSettlementId returns the SettlementId field value if set, zero value otherwise.
func (o *CCBatchSettlementStatusType) GetSettlementId() UniqueIDType {
	if o == nil || IsNil(o.SettlementId) {
		var ret UniqueIDType
		return ret
	}
	return *o.SettlementId
}

// GetSettlementIdOk returns a tuple with the SettlementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CCBatchSettlementStatusType) GetSettlementIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.SettlementId) {
		return nil, false
	}
	return o.SettlementId, true
}

// HasSettlementId returns a boolean if a field has been set.
func (o *CCBatchSettlementStatusType) HasSettlementId() bool {
	if o != nil && !IsNil(o.SettlementId) {
		return true
	}

	return false
}

// SetSettlementId gets a reference to the given UniqueIDType and assigns it to the SettlementId field.
func (o *CCBatchSettlementStatusType) SetSettlementId(v UniqueIDType) {
	o.SettlementId = &v
}

// GetSettlementStatus returns the SettlementStatus field value if set, zero value otherwise.
func (o *CCBatchSettlementStatusType) GetSettlementStatus() string {
	if o == nil || IsNil(o.SettlementStatus) {
		var ret string
		return ret
	}
	return *o.SettlementStatus
}

// GetSettlementStatusOk returns a tuple with the SettlementStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CCBatchSettlementStatusType) GetSettlementStatusOk() (*string, bool) {
	if o == nil || IsNil(o.SettlementStatus) {
		return nil, false
	}
	return o.SettlementStatus, true
}

// HasSettlementStatus returns a boolean if a field has been set.
func (o *CCBatchSettlementStatusType) HasSettlementStatus() bool {
	if o != nil && !IsNil(o.SettlementStatus) {
		return true
	}

	return false
}

// SetSettlementStatus gets a reference to the given string and assigns it to the SettlementStatus field.
func (o *CCBatchSettlementStatusType) SetSettlementStatus(v string) {
	o.SettlementStatus = &v
}

func (o CCBatchSettlementStatusType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CCBatchSettlementStatusType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.SettlementId) {
		toSerialize["settlementId"] = o.SettlementId
	}
	if !IsNil(o.SettlementStatus) {
		toSerialize["settlementStatus"] = o.SettlementStatus
	}
	return toSerialize, nil
}

type NullableCCBatchSettlementStatusType struct {
	value *CCBatchSettlementStatusType
	isSet bool
}

func (v NullableCCBatchSettlementStatusType) Get() *CCBatchSettlementStatusType {
	return v.value
}

func (v *NullableCCBatchSettlementStatusType) Set(val *CCBatchSettlementStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableCCBatchSettlementStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableCCBatchSettlementStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCCBatchSettlementStatusType(val *CCBatchSettlementStatusType) *NullableCCBatchSettlementStatusType {
	return &NullableCCBatchSettlementStatusType{value: val, isSet: true}
}

func (v NullableCCBatchSettlementStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCCBatchSettlementStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


