/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the PostingGroupType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostingGroupType{}

// PostingGroupType Transaction group information. Ever posting could represent a. Regular transaction b. Group header - has Group Id, Count, Descripton and Includes Group Memebers elements c. Group transaction - has SubGroupId element pointing to Group Header Id
type PostingGroupType struct {
	// Number of transactions in group.
	GroupCount *int32 `json:"groupCount,omitempty"`
	// Group Description.
	GroupDescription *string `json:"groupDescription,omitempty"`
	// Group Id.
	GroupId *string `json:"groupId,omitempty"`
	// Indicates to which group transaction belongs.
	SubGroupId *string `json:"subGroupId,omitempty"`
}

// NewPostingGroupType instantiates a new PostingGroupType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostingGroupType() *PostingGroupType {
	this := PostingGroupType{}
	return &this
}

// NewPostingGroupTypeWithDefaults instantiates a new PostingGroupType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostingGroupTypeWithDefaults() *PostingGroupType {
	this := PostingGroupType{}
	return &this
}

// GetGroupCount returns the GroupCount field value if set, zero value otherwise.
func (o *PostingGroupType) GetGroupCount() int32 {
	if o == nil || IsNil(o.GroupCount) {
		var ret int32
		return ret
	}
	return *o.GroupCount
}

// GetGroupCountOk returns a tuple with the GroupCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostingGroupType) GetGroupCountOk() (*int32, bool) {
	if o == nil || IsNil(o.GroupCount) {
		return nil, false
	}
	return o.GroupCount, true
}

// HasGroupCount returns a boolean if a field has been set.
func (o *PostingGroupType) HasGroupCount() bool {
	if o != nil && !IsNil(o.GroupCount) {
		return true
	}

	return false
}

// SetGroupCount gets a reference to the given int32 and assigns it to the GroupCount field.
func (o *PostingGroupType) SetGroupCount(v int32) {
	o.GroupCount = &v
}

// GetGroupDescription returns the GroupDescription field value if set, zero value otherwise.
func (o *PostingGroupType) GetGroupDescription() string {
	if o == nil || IsNil(o.GroupDescription) {
		var ret string
		return ret
	}
	return *o.GroupDescription
}

// GetGroupDescriptionOk returns a tuple with the GroupDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostingGroupType) GetGroupDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.GroupDescription) {
		return nil, false
	}
	return o.GroupDescription, true
}

// HasGroupDescription returns a boolean if a field has been set.
func (o *PostingGroupType) HasGroupDescription() bool {
	if o != nil && !IsNil(o.GroupDescription) {
		return true
	}

	return false
}

// SetGroupDescription gets a reference to the given string and assigns it to the GroupDescription field.
func (o *PostingGroupType) SetGroupDescription(v string) {
	o.GroupDescription = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *PostingGroupType) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostingGroupType) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *PostingGroupType) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *PostingGroupType) SetGroupId(v string) {
	o.GroupId = &v
}

// GetSubGroupId returns the SubGroupId field value if set, zero value otherwise.
func (o *PostingGroupType) GetSubGroupId() string {
	if o == nil || IsNil(o.SubGroupId) {
		var ret string
		return ret
	}
	return *o.SubGroupId
}

// GetSubGroupIdOk returns a tuple with the SubGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostingGroupType) GetSubGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubGroupId) {
		return nil, false
	}
	return o.SubGroupId, true
}

// HasSubGroupId returns a boolean if a field has been set.
func (o *PostingGroupType) HasSubGroupId() bool {
	if o != nil && !IsNil(o.SubGroupId) {
		return true
	}

	return false
}

// SetSubGroupId gets a reference to the given string and assigns it to the SubGroupId field.
func (o *PostingGroupType) SetSubGroupId(v string) {
	o.SubGroupId = &v
}

func (o PostingGroupType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostingGroupType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GroupCount) {
		toSerialize["groupCount"] = o.GroupCount
	}
	if !IsNil(o.GroupDescription) {
		toSerialize["groupDescription"] = o.GroupDescription
	}
	if !IsNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !IsNil(o.SubGroupId) {
		toSerialize["subGroupId"] = o.SubGroupId
	}
	return toSerialize, nil
}

type NullablePostingGroupType struct {
	value *PostingGroupType
	isSet bool
}

func (v NullablePostingGroupType) Get() *PostingGroupType {
	return v.value
}

func (v *NullablePostingGroupType) Set(val *PostingGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullablePostingGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullablePostingGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostingGroupType(val *PostingGroupType) *NullablePostingGroupType {
	return &NullablePostingGroupType{value: val, isSet: true}
}

func (v NullablePostingGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostingGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


