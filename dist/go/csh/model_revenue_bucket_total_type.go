/*
OPERA Cloud Cashiering API

APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package csh

import (
	"encoding/json"
)

// checks if the RevenueBucketTotalType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RevenueBucketTotalType{}

// RevenueBucketTotalType reservation revenue bucket total information.
type RevenueBucketTotalType struct {
	RevenueBucketCode *RevenueBucketCodeType `json:"revenueBucketCode,omitempty"`
	TotalAmount *CurrencyAmountType `json:"totalAmount,omitempty"`
}

// NewRevenueBucketTotalType instantiates a new RevenueBucketTotalType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevenueBucketTotalType() *RevenueBucketTotalType {
	this := RevenueBucketTotalType{}
	return &this
}

// NewRevenueBucketTotalTypeWithDefaults instantiates a new RevenueBucketTotalType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevenueBucketTotalTypeWithDefaults() *RevenueBucketTotalType {
	this := RevenueBucketTotalType{}
	return &this
}

// GetRevenueBucketCode returns the RevenueBucketCode field value if set, zero value otherwise.
func (o *RevenueBucketTotalType) GetRevenueBucketCode() RevenueBucketCodeType {
	if o == nil || IsNil(o.RevenueBucketCode) {
		var ret RevenueBucketCodeType
		return ret
	}
	return *o.RevenueBucketCode
}

// GetRevenueBucketCodeOk returns a tuple with the RevenueBucketCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevenueBucketTotalType) GetRevenueBucketCodeOk() (*RevenueBucketCodeType, bool) {
	if o == nil || IsNil(o.RevenueBucketCode) {
		return nil, false
	}
	return o.RevenueBucketCode, true
}

// HasRevenueBucketCode returns a boolean if a field has been set.
func (o *RevenueBucketTotalType) HasRevenueBucketCode() bool {
	if o != nil && !IsNil(o.RevenueBucketCode) {
		return true
	}

	return false
}

// SetRevenueBucketCode gets a reference to the given RevenueBucketCodeType and assigns it to the RevenueBucketCode field.
func (o *RevenueBucketTotalType) SetRevenueBucketCode(v RevenueBucketCodeType) {
	o.RevenueBucketCode = &v
}

// GetTotalAmount returns the TotalAmount field value if set, zero value otherwise.
func (o *RevenueBucketTotalType) GetTotalAmount() CurrencyAmountType {
	if o == nil || IsNil(o.TotalAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.TotalAmount
}

// GetTotalAmountOk returns a tuple with the TotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevenueBucketTotalType) GetTotalAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.TotalAmount) {
		return nil, false
	}
	return o.TotalAmount, true
}

// HasTotalAmount returns a boolean if a field has been set.
func (o *RevenueBucketTotalType) HasTotalAmount() bool {
	if o != nil && !IsNil(o.TotalAmount) {
		return true
	}

	return false
}

// SetTotalAmount gets a reference to the given CurrencyAmountType and assigns it to the TotalAmount field.
func (o *RevenueBucketTotalType) SetTotalAmount(v CurrencyAmountType) {
	o.TotalAmount = &v
}

func (o RevenueBucketTotalType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RevenueBucketTotalType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RevenueBucketCode) {
		toSerialize["revenueBucketCode"] = o.RevenueBucketCode
	}
	if !IsNil(o.TotalAmount) {
		toSerialize["totalAmount"] = o.TotalAmount
	}
	return toSerialize, nil
}

type NullableRevenueBucketTotalType struct {
	value *RevenueBucketTotalType
	isSet bool
}

func (v NullableRevenueBucketTotalType) Get() *RevenueBucketTotalType {
	return v.value
}

func (v *NullableRevenueBucketTotalType) Set(val *RevenueBucketTotalType) {
	v.value = val
	v.isSet = true
}

func (v NullableRevenueBucketTotalType) IsSet() bool {
	return v.isSet
}

func (v *NullableRevenueBucketTotalType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevenueBucketTotalType(val *RevenueBucketTotalType) *NullableRevenueBucketTotalType {
	return &NullableRevenueBucketTotalType{value: val, isSet: true}
}

func (v NullableRevenueBucketTotalType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevenueBucketTotalType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


