/*
OPERA Cloud Back Office Operations API

APIs to cater for Back Office Operations functionality in OPERA Cloud. <br /><br /> A common BackOffice industry term is End of Day.Â  This closes and balances each day's business activities. It reconciles guest folios and processes credit card transactions. The End of Day routine rolls the business date forward and prints final reports.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bof

import (
	"encoding/json"
)

// checks if the HotelActiveEndOfDayType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelActiveEndOfDayType{}

// HotelActiveEndOfDayType Defines hotel and its active end of days.
type HotelActiveEndOfDayType struct {
	// Hotel code of the active end of days.
	HotelId *string `json:"hotelId,omitempty"`
	// Current open business date of hotel.
	BusinessDate *string `json:"businessDate,omitempty"`
}

// NewHotelActiveEndOfDayType instantiates a new HotelActiveEndOfDayType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelActiveEndOfDayType() *HotelActiveEndOfDayType {
	this := HotelActiveEndOfDayType{}
	return &this
}

// NewHotelActiveEndOfDayTypeWithDefaults instantiates a new HotelActiveEndOfDayType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelActiveEndOfDayTypeWithDefaults() *HotelActiveEndOfDayType {
	this := HotelActiveEndOfDayType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *HotelActiveEndOfDayType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelActiveEndOfDayType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *HotelActiveEndOfDayType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *HotelActiveEndOfDayType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetBusinessDate returns the BusinessDate field value if set, zero value otherwise.
func (o *HotelActiveEndOfDayType) GetBusinessDate() string {
	if o == nil || IsNil(o.BusinessDate) {
		var ret string
		return ret
	}
	return *o.BusinessDate
}

// GetBusinessDateOk returns a tuple with the BusinessDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelActiveEndOfDayType) GetBusinessDateOk() (*string, bool) {
	if o == nil || IsNil(o.BusinessDate) {
		return nil, false
	}
	return o.BusinessDate, true
}

// HasBusinessDate returns a boolean if a field has been set.
func (o *HotelActiveEndOfDayType) HasBusinessDate() bool {
	if o != nil && !IsNil(o.BusinessDate) {
		return true
	}

	return false
}

// SetBusinessDate gets a reference to the given string and assigns it to the BusinessDate field.
func (o *HotelActiveEndOfDayType) SetBusinessDate(v string) {
	o.BusinessDate = &v
}

func (o HotelActiveEndOfDayType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelActiveEndOfDayType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.BusinessDate) {
		toSerialize["businessDate"] = o.BusinessDate
	}
	return toSerialize, nil
}

type NullableHotelActiveEndOfDayType struct {
	value *HotelActiveEndOfDayType
	isSet bool
}

func (v NullableHotelActiveEndOfDayType) Get() *HotelActiveEndOfDayType {
	return v.value
}

func (v *NullableHotelActiveEndOfDayType) Set(val *HotelActiveEndOfDayType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelActiveEndOfDayType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelActiveEndOfDayType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelActiveEndOfDayType(val *HotelActiveEndOfDayType) *NullableHotelActiveEndOfDayType {
	return &NullableHotelActiveEndOfDayType{value: val, isSet: true}
}

func (v NullableHotelActiveEndOfDayType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelActiveEndOfDayType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


