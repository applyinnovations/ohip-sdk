/*
OPERA Cloud Reservation Asynchronous API

APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvasync

import (
	"encoding/json"
)

// checks if the ProfileTypeEmails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileTypeEmails{}

// ProfileTypeEmails List of email address for the customer.
type ProfileTypeEmails struct {
	// Collection of Detailed information on an eMail address for the customer.
	EmailInfo []EmailInfoType `json:"emailInfo,omitempty"`
}

// NewProfileTypeEmails instantiates a new ProfileTypeEmails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileTypeEmails() *ProfileTypeEmails {
	this := ProfileTypeEmails{}
	return &this
}

// NewProfileTypeEmailsWithDefaults instantiates a new ProfileTypeEmails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileTypeEmailsWithDefaults() *ProfileTypeEmails {
	this := ProfileTypeEmails{}
	return &this
}

// GetEmailInfo returns the EmailInfo field value if set, zero value otherwise.
func (o *ProfileTypeEmails) GetEmailInfo() []EmailInfoType {
	if o == nil || IsNil(o.EmailInfo) {
		var ret []EmailInfoType
		return ret
	}
	return o.EmailInfo
}

// GetEmailInfoOk returns a tuple with the EmailInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileTypeEmails) GetEmailInfoOk() ([]EmailInfoType, bool) {
	if o == nil || IsNil(o.EmailInfo) {
		return nil, false
	}
	return o.EmailInfo, true
}

// HasEmailInfo returns a boolean if a field has been set.
func (o *ProfileTypeEmails) HasEmailInfo() bool {
	if o != nil && !IsNil(o.EmailInfo) {
		return true
	}

	return false
}

// SetEmailInfo gets a reference to the given []EmailInfoType and assigns it to the EmailInfo field.
func (o *ProfileTypeEmails) SetEmailInfo(v []EmailInfoType) {
	o.EmailInfo = v
}

func (o ProfileTypeEmails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfileTypeEmails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EmailInfo) {
		toSerialize["emailInfo"] = o.EmailInfo
	}
	return toSerialize, nil
}

type NullableProfileTypeEmails struct {
	value *ProfileTypeEmails
	isSet bool
}

func (v NullableProfileTypeEmails) Get() *ProfileTypeEmails {
	return v.value
}

func (v *NullableProfileTypeEmails) Set(val *ProfileTypeEmails) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileTypeEmails) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileTypeEmails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileTypeEmails(val *ProfileTypeEmails) *NullableProfileTypeEmails {
	return &NullableProfileTypeEmails{value: val, isSet: true}
}

func (v NullableProfileTypeEmails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileTypeEmails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


