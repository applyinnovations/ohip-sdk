/*
OPERA Cloud Reservation Asynchronous API

APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvasync

import (
	"encoding/json"
)

// checks if the ReservationCommentType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReservationCommentType{}

// ReservationCommentType Reservation Comment Type.
type ReservationCommentType struct {
	// Specifies Comment's Text
	Text *string `json:"text,omitempty"`
	// Specifies Comment's Title.
	CommentTitle *string `json:"commentTitle,omitempty"`
	// Notification Location associated with the Note.
	NotificationLocation *string `json:"notificationLocation,omitempty"`
	// Specifies type of the comment.
	Type *string `json:"type,omitempty"`
	// When true, the comment may not be shown to the consumer. When false, the comment may be shown to the consumer.
	Internal *bool `json:"internal,omitempty"`
}

// NewReservationCommentType instantiates a new ReservationCommentType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservationCommentType() *ReservationCommentType {
	this := ReservationCommentType{}
	var internal bool = false
	this.Internal = &internal
	return &this
}

// NewReservationCommentTypeWithDefaults instantiates a new ReservationCommentType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservationCommentTypeWithDefaults() *ReservationCommentType {
	this := ReservationCommentType{}
	var internal bool = false
	this.Internal = &internal
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ReservationCommentType) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationCommentType) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ReservationCommentType) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *ReservationCommentType) SetText(v string) {
	o.Text = &v
}

// GetCommentTitle returns the CommentTitle field value if set, zero value otherwise.
func (o *ReservationCommentType) GetCommentTitle() string {
	if o == nil || IsNil(o.CommentTitle) {
		var ret string
		return ret
	}
	return *o.CommentTitle
}

// GetCommentTitleOk returns a tuple with the CommentTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationCommentType) GetCommentTitleOk() (*string, bool) {
	if o == nil || IsNil(o.CommentTitle) {
		return nil, false
	}
	return o.CommentTitle, true
}

// HasCommentTitle returns a boolean if a field has been set.
func (o *ReservationCommentType) HasCommentTitle() bool {
	if o != nil && !IsNil(o.CommentTitle) {
		return true
	}

	return false
}

// SetCommentTitle gets a reference to the given string and assigns it to the CommentTitle field.
func (o *ReservationCommentType) SetCommentTitle(v string) {
	o.CommentTitle = &v
}

// GetNotificationLocation returns the NotificationLocation field value if set, zero value otherwise.
func (o *ReservationCommentType) GetNotificationLocation() string {
	if o == nil || IsNil(o.NotificationLocation) {
		var ret string
		return ret
	}
	return *o.NotificationLocation
}

// GetNotificationLocationOk returns a tuple with the NotificationLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationCommentType) GetNotificationLocationOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationLocation) {
		return nil, false
	}
	return o.NotificationLocation, true
}

// HasNotificationLocation returns a boolean if a field has been set.
func (o *ReservationCommentType) HasNotificationLocation() bool {
	if o != nil && !IsNil(o.NotificationLocation) {
		return true
	}

	return false
}

// SetNotificationLocation gets a reference to the given string and assigns it to the NotificationLocation field.
func (o *ReservationCommentType) SetNotificationLocation(v string) {
	o.NotificationLocation = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ReservationCommentType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationCommentType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ReservationCommentType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ReservationCommentType) SetType(v string) {
	o.Type = &v
}

// GetInternal returns the Internal field value if set, zero value otherwise.
func (o *ReservationCommentType) GetInternal() bool {
	if o == nil || IsNil(o.Internal) {
		var ret bool
		return ret
	}
	return *o.Internal
}

// GetInternalOk returns a tuple with the Internal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationCommentType) GetInternalOk() (*bool, bool) {
	if o == nil || IsNil(o.Internal) {
		return nil, false
	}
	return o.Internal, true
}

// HasInternal returns a boolean if a field has been set.
func (o *ReservationCommentType) HasInternal() bool {
	if o != nil && !IsNil(o.Internal) {
		return true
	}

	return false
}

// SetInternal gets a reference to the given bool and assigns it to the Internal field.
func (o *ReservationCommentType) SetInternal(v bool) {
	o.Internal = &v
}

func (o ReservationCommentType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReservationCommentType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.CommentTitle) {
		toSerialize["commentTitle"] = o.CommentTitle
	}
	if !IsNil(o.NotificationLocation) {
		toSerialize["notificationLocation"] = o.NotificationLocation
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Internal) {
		toSerialize["internal"] = o.Internal
	}
	return toSerialize, nil
}

type NullableReservationCommentType struct {
	value *ReservationCommentType
	isSet bool
}

func (v NullableReservationCommentType) Get() *ReservationCommentType {
	return v.value
}

func (v *NullableReservationCommentType) Set(val *ReservationCommentType) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationCommentType) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationCommentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationCommentType(val *ReservationCommentType) *NullableReservationCommentType {
	return &NullableReservationCommentType{value: val, isSet: true}
}

func (v NullableReservationCommentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationCommentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


