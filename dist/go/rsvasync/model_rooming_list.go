/*
OPERA Cloud Reservation Asynchronous API

APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvasync

import (
	"encoding/json"
)

// checks if the RoomingList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomingList{}

// RoomingList Request object for creating rooming list reservations. The standard optional Opera Context element is also included.
type RoomingList struct {
	BlockInfo *RoomingListBlockInfoType `json:"blockInfo,omitempty"`
	Reservations *RoomingListReservationsType `json:"reservations,omitempty"`
	// Contains a set of rooming list reservations that need to be shared.
	Shares []RoomingListShareType `json:"shares,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewRoomingList instantiates a new RoomingList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomingList() *RoomingList {
	this := RoomingList{}
	return &this
}

// NewRoomingListWithDefaults instantiates a new RoomingList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomingListWithDefaults() *RoomingList {
	this := RoomingList{}
	return &this
}

// GetBlockInfo returns the BlockInfo field value if set, zero value otherwise.
func (o *RoomingList) GetBlockInfo() RoomingListBlockInfoType {
	if o == nil || IsNil(o.BlockInfo) {
		var ret RoomingListBlockInfoType
		return ret
	}
	return *o.BlockInfo
}

// GetBlockInfoOk returns a tuple with the BlockInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomingList) GetBlockInfoOk() (*RoomingListBlockInfoType, bool) {
	if o == nil || IsNil(o.BlockInfo) {
		return nil, false
	}
	return o.BlockInfo, true
}

// HasBlockInfo returns a boolean if a field has been set.
func (o *RoomingList) HasBlockInfo() bool {
	if o != nil && !IsNil(o.BlockInfo) {
		return true
	}

	return false
}

// SetBlockInfo gets a reference to the given RoomingListBlockInfoType and assigns it to the BlockInfo field.
func (o *RoomingList) SetBlockInfo(v RoomingListBlockInfoType) {
	o.BlockInfo = &v
}

// GetReservations returns the Reservations field value if set, zero value otherwise.
func (o *RoomingList) GetReservations() RoomingListReservationsType {
	if o == nil || IsNil(o.Reservations) {
		var ret RoomingListReservationsType
		return ret
	}
	return *o.Reservations
}

// GetReservationsOk returns a tuple with the Reservations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomingList) GetReservationsOk() (*RoomingListReservationsType, bool) {
	if o == nil || IsNil(o.Reservations) {
		return nil, false
	}
	return o.Reservations, true
}

// HasReservations returns a boolean if a field has been set.
func (o *RoomingList) HasReservations() bool {
	if o != nil && !IsNil(o.Reservations) {
		return true
	}

	return false
}

// SetReservations gets a reference to the given RoomingListReservationsType and assigns it to the Reservations field.
func (o *RoomingList) SetReservations(v RoomingListReservationsType) {
	o.Reservations = &v
}

// GetShares returns the Shares field value if set, zero value otherwise.
func (o *RoomingList) GetShares() []RoomingListShareType {
	if o == nil || IsNil(o.Shares) {
		var ret []RoomingListShareType
		return ret
	}
	return o.Shares
}

// GetSharesOk returns a tuple with the Shares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomingList) GetSharesOk() ([]RoomingListShareType, bool) {
	if o == nil || IsNil(o.Shares) {
		return nil, false
	}
	return o.Shares, true
}

// HasShares returns a boolean if a field has been set.
func (o *RoomingList) HasShares() bool {
	if o != nil && !IsNil(o.Shares) {
		return true
	}

	return false
}

// SetShares gets a reference to the given []RoomingListShareType and assigns it to the Shares field.
func (o *RoomingList) SetShares(v []RoomingListShareType) {
	o.Shares = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *RoomingList) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomingList) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *RoomingList) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *RoomingList) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *RoomingList) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomingList) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *RoomingList) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *RoomingList) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o RoomingList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomingList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockInfo) {
		toSerialize["blockInfo"] = o.BlockInfo
	}
	if !IsNil(o.Reservations) {
		toSerialize["reservations"] = o.Reservations
	}
	if !IsNil(o.Shares) {
		toSerialize["shares"] = o.Shares
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableRoomingList struct {
	value *RoomingList
	isSet bool
}

func (v NullableRoomingList) Get() *RoomingList {
	return v.value
}

func (v *NullableRoomingList) Set(val *RoomingList) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomingList) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomingList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomingList(val *RoomingList) *NullableRoomingList {
	return &NullableRoomingList{value: val, isSet: true}
}

func (v NullableRoomingList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomingList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


