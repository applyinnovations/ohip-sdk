/*
OPERA Cloud Reservation Asynchronous API

APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvasync

import (
	"encoding/json"
)

// checks if the PreferencesMassUpdateCriteria type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PreferencesMassUpdateCriteria{}

// PreferencesMassUpdateCriteria Reservation Preferences Mass Update criteria.
type PreferencesMassUpdateCriteria struct {
	// Unique ID of reservations to be updated.
	ReservationIds []UniqueIDType `json:"reservationIds,omitempty"`
	// Collection of reservation preferences.
	PreferenceCollection []PreferencesTypeType `json:"preferenceCollection,omitempty"`
	// Specifies whether to copy the reservation preference to the profile or not.
	CopyToProfile *bool `json:"copyToProfile,omitempty"`
}

// NewPreferencesMassUpdateCriteria instantiates a new PreferencesMassUpdateCriteria object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreferencesMassUpdateCriteria() *PreferencesMassUpdateCriteria {
	this := PreferencesMassUpdateCriteria{}
	return &this
}

// NewPreferencesMassUpdateCriteriaWithDefaults instantiates a new PreferencesMassUpdateCriteria object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreferencesMassUpdateCriteriaWithDefaults() *PreferencesMassUpdateCriteria {
	this := PreferencesMassUpdateCriteria{}
	return &this
}

// GetReservationIds returns the ReservationIds field value if set, zero value otherwise.
func (o *PreferencesMassUpdateCriteria) GetReservationIds() []UniqueIDType {
	if o == nil || IsNil(o.ReservationIds) {
		var ret []UniqueIDType
		return ret
	}
	return o.ReservationIds
}

// GetReservationIdsOk returns a tuple with the ReservationIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreferencesMassUpdateCriteria) GetReservationIdsOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.ReservationIds) {
		return nil, false
	}
	return o.ReservationIds, true
}

// HasReservationIds returns a boolean if a field has been set.
func (o *PreferencesMassUpdateCriteria) HasReservationIds() bool {
	if o != nil && !IsNil(o.ReservationIds) {
		return true
	}

	return false
}

// SetReservationIds gets a reference to the given []UniqueIDType and assigns it to the ReservationIds field.
func (o *PreferencesMassUpdateCriteria) SetReservationIds(v []UniqueIDType) {
	o.ReservationIds = v
}

// GetPreferenceCollection returns the PreferenceCollection field value if set, zero value otherwise.
func (o *PreferencesMassUpdateCriteria) GetPreferenceCollection() []PreferencesTypeType {
	if o == nil || IsNil(o.PreferenceCollection) {
		var ret []PreferencesTypeType
		return ret
	}
	return o.PreferenceCollection
}

// GetPreferenceCollectionOk returns a tuple with the PreferenceCollection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreferencesMassUpdateCriteria) GetPreferenceCollectionOk() ([]PreferencesTypeType, bool) {
	if o == nil || IsNil(o.PreferenceCollection) {
		return nil, false
	}
	return o.PreferenceCollection, true
}

// HasPreferenceCollection returns a boolean if a field has been set.
func (o *PreferencesMassUpdateCriteria) HasPreferenceCollection() bool {
	if o != nil && !IsNil(o.PreferenceCollection) {
		return true
	}

	return false
}

// SetPreferenceCollection gets a reference to the given []PreferencesTypeType and assigns it to the PreferenceCollection field.
func (o *PreferencesMassUpdateCriteria) SetPreferenceCollection(v []PreferencesTypeType) {
	o.PreferenceCollection = v
}

// GetCopyToProfile returns the CopyToProfile field value if set, zero value otherwise.
func (o *PreferencesMassUpdateCriteria) GetCopyToProfile() bool {
	if o == nil || IsNil(o.CopyToProfile) {
		var ret bool
		return ret
	}
	return *o.CopyToProfile
}

// GetCopyToProfileOk returns a tuple with the CopyToProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreferencesMassUpdateCriteria) GetCopyToProfileOk() (*bool, bool) {
	if o == nil || IsNil(o.CopyToProfile) {
		return nil, false
	}
	return o.CopyToProfile, true
}

// HasCopyToProfile returns a boolean if a field has been set.
func (o *PreferencesMassUpdateCriteria) HasCopyToProfile() bool {
	if o != nil && !IsNil(o.CopyToProfile) {
		return true
	}

	return false
}

// SetCopyToProfile gets a reference to the given bool and assigns it to the CopyToProfile field.
func (o *PreferencesMassUpdateCriteria) SetCopyToProfile(v bool) {
	o.CopyToProfile = &v
}

func (o PreferencesMassUpdateCriteria) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PreferencesMassUpdateCriteria) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReservationIds) {
		toSerialize["reservationIds"] = o.ReservationIds
	}
	if !IsNil(o.PreferenceCollection) {
		toSerialize["preferenceCollection"] = o.PreferenceCollection
	}
	if !IsNil(o.CopyToProfile) {
		toSerialize["copyToProfile"] = o.CopyToProfile
	}
	return toSerialize, nil
}

type NullablePreferencesMassUpdateCriteria struct {
	value *PreferencesMassUpdateCriteria
	isSet bool
}

func (v NullablePreferencesMassUpdateCriteria) Get() *PreferencesMassUpdateCriteria {
	return v.value
}

func (v *NullablePreferencesMassUpdateCriteria) Set(val *PreferencesMassUpdateCriteria) {
	v.value = val
	v.isSet = true
}

func (v NullablePreferencesMassUpdateCriteria) IsSet() bool {
	return v.isSet
}

func (v *NullablePreferencesMassUpdateCriteria) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreferencesMassUpdateCriteria(val *PreferencesMassUpdateCriteria) *NullablePreferencesMassUpdateCriteria {
	return &NullablePreferencesMassUpdateCriteria{value: val, isSet: true}
}

func (v NullablePreferencesMassUpdateCriteria) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreferencesMassUpdateCriteria) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


