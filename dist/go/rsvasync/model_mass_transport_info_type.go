/*
OPERA Cloud Reservation Asynchronous API

APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvasync

import (
	"encoding/json"
)

// checks if the MassTransportInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MassTransportInfoType{}

// MassTransportInfoType struct for MassTransportInfoType
type MassTransportInfoType struct {
	// Comments about the transport info
	Comments *string `json:"comments,omitempty"`
	// Identifier for transport type transport info of a reservation
	Type *string `json:"type,omitempty"`
	// Identifier for transport transport code transport info of a reservation
	TransportCode *string `json:"transportCode,omitempty"`
	// Identifier for carrier code in transport info of a reservation
	CarrierCode *string `json:"carrierCode,omitempty"`
	// Identifier for station code in transport info of a reservation
	StationCode *string `json:"stationCode,omitempty"`
	// Date time for arrival and departure transportation
	DateTime *string `json:"dateTime,omitempty"`
	// Identifier to check if transport is required
	TransportationReqd *bool `json:"transportationReqd,omitempty"`
}

// NewMassTransportInfoType instantiates a new MassTransportInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMassTransportInfoType() *MassTransportInfoType {
	this := MassTransportInfoType{}
	return &this
}

// NewMassTransportInfoTypeWithDefaults instantiates a new MassTransportInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMassTransportInfoTypeWithDefaults() *MassTransportInfoType {
	this := MassTransportInfoType{}
	return &this
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *MassTransportInfoType) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MassTransportInfoType) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *MassTransportInfoType) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *MassTransportInfoType) SetComments(v string) {
	o.Comments = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MassTransportInfoType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MassTransportInfoType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MassTransportInfoType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MassTransportInfoType) SetType(v string) {
	o.Type = &v
}

// GetTransportCode returns the TransportCode field value if set, zero value otherwise.
func (o *MassTransportInfoType) GetTransportCode() string {
	if o == nil || IsNil(o.TransportCode) {
		var ret string
		return ret
	}
	return *o.TransportCode
}

// GetTransportCodeOk returns a tuple with the TransportCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MassTransportInfoType) GetTransportCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TransportCode) {
		return nil, false
	}
	return o.TransportCode, true
}

// HasTransportCode returns a boolean if a field has been set.
func (o *MassTransportInfoType) HasTransportCode() bool {
	if o != nil && !IsNil(o.TransportCode) {
		return true
	}

	return false
}

// SetTransportCode gets a reference to the given string and assigns it to the TransportCode field.
func (o *MassTransportInfoType) SetTransportCode(v string) {
	o.TransportCode = &v
}

// GetCarrierCode returns the CarrierCode field value if set, zero value otherwise.
func (o *MassTransportInfoType) GetCarrierCode() string {
	if o == nil || IsNil(o.CarrierCode) {
		var ret string
		return ret
	}
	return *o.CarrierCode
}

// GetCarrierCodeOk returns a tuple with the CarrierCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MassTransportInfoType) GetCarrierCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CarrierCode) {
		return nil, false
	}
	return o.CarrierCode, true
}

// HasCarrierCode returns a boolean if a field has been set.
func (o *MassTransportInfoType) HasCarrierCode() bool {
	if o != nil && !IsNil(o.CarrierCode) {
		return true
	}

	return false
}

// SetCarrierCode gets a reference to the given string and assigns it to the CarrierCode field.
func (o *MassTransportInfoType) SetCarrierCode(v string) {
	o.CarrierCode = &v
}

// GetStationCode returns the StationCode field value if set, zero value otherwise.
func (o *MassTransportInfoType) GetStationCode() string {
	if o == nil || IsNil(o.StationCode) {
		var ret string
		return ret
	}
	return *o.StationCode
}

// GetStationCodeOk returns a tuple with the StationCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MassTransportInfoType) GetStationCodeOk() (*string, bool) {
	if o == nil || IsNil(o.StationCode) {
		return nil, false
	}
	return o.StationCode, true
}

// HasStationCode returns a boolean if a field has been set.
func (o *MassTransportInfoType) HasStationCode() bool {
	if o != nil && !IsNil(o.StationCode) {
		return true
	}

	return false
}

// SetStationCode gets a reference to the given string and assigns it to the StationCode field.
func (o *MassTransportInfoType) SetStationCode(v string) {
	o.StationCode = &v
}

// GetDateTime returns the DateTime field value if set, zero value otherwise.
func (o *MassTransportInfoType) GetDateTime() string {
	if o == nil || IsNil(o.DateTime) {
		var ret string
		return ret
	}
	return *o.DateTime
}

// GetDateTimeOk returns a tuple with the DateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MassTransportInfoType) GetDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.DateTime) {
		return nil, false
	}
	return o.DateTime, true
}

// HasDateTime returns a boolean if a field has been set.
func (o *MassTransportInfoType) HasDateTime() bool {
	if o != nil && !IsNil(o.DateTime) {
		return true
	}

	return false
}

// SetDateTime gets a reference to the given string and assigns it to the DateTime field.
func (o *MassTransportInfoType) SetDateTime(v string) {
	o.DateTime = &v
}

// GetTransportationReqd returns the TransportationReqd field value if set, zero value otherwise.
func (o *MassTransportInfoType) GetTransportationReqd() bool {
	if o == nil || IsNil(o.TransportationReqd) {
		var ret bool
		return ret
	}
	return *o.TransportationReqd
}

// GetTransportationReqdOk returns a tuple with the TransportationReqd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MassTransportInfoType) GetTransportationReqdOk() (*bool, bool) {
	if o == nil || IsNil(o.TransportationReqd) {
		return nil, false
	}
	return o.TransportationReqd, true
}

// HasTransportationReqd returns a boolean if a field has been set.
func (o *MassTransportInfoType) HasTransportationReqd() bool {
	if o != nil && !IsNil(o.TransportationReqd) {
		return true
	}

	return false
}

// SetTransportationReqd gets a reference to the given bool and assigns it to the TransportationReqd field.
func (o *MassTransportInfoType) SetTransportationReqd(v bool) {
	o.TransportationReqd = &v
}

func (o MassTransportInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MassTransportInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TransportCode) {
		toSerialize["transportCode"] = o.TransportCode
	}
	if !IsNil(o.CarrierCode) {
		toSerialize["carrierCode"] = o.CarrierCode
	}
	if !IsNil(o.StationCode) {
		toSerialize["stationCode"] = o.StationCode
	}
	if !IsNil(o.DateTime) {
		toSerialize["dateTime"] = o.DateTime
	}
	if !IsNil(o.TransportationReqd) {
		toSerialize["transportationReqd"] = o.TransportationReqd
	}
	return toSerialize, nil
}

type NullableMassTransportInfoType struct {
	value *MassTransportInfoType
	isSet bool
}

func (v NullableMassTransportInfoType) Get() *MassTransportInfoType {
	return v.value
}

func (v *NullableMassTransportInfoType) Set(val *MassTransportInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableMassTransportInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableMassTransportInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMassTransportInfoType(val *MassTransportInfoType) *NullableMassTransportInfoType {
	return &NullableMassTransportInfoType{value: val, isSet: true}
}

func (v NullableMassTransportInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMassTransportInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


