/*
OPERA Cloud Reservation Asynchronous API

APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvasync

import (
	"encoding/json"
)

// checks if the MassUpdateFacilityHousekeepingTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MassUpdateFacilityHousekeepingTask{}

// MassUpdateFacilityHousekeepingTask Information about housekeeping facility task.
type MassUpdateFacilityHousekeepingTask struct {
	// Code of facility task.
	FacilityTask *string `json:"facilityTask,omitempty"`
	// Date on which the task needs to start being performed.
	TaskStartDate *string `json:"taskStartDate,omitempty"`
	// Date on which task will stop being performed.
	TaskEndDate *string `json:"taskEndDate,omitempty"`
	StayPeriod *MassUpdateHousekeepingTaskStayPeriod `json:"stayPeriod,omitempty"`
	// Signifies frequency(i.e. every 2 days) with which task is to be performed.
	Frequency *int32 `json:"frequency,omitempty"`
	// Signifies offset(in days) i.e. start on 3rd day from arrival.
	CycleStartDay *int32 `json:"cycleStartDay,omitempty"`
	// Remove existing task(s) scheduled for the selected date(s) for the selected reservations before adding new one.
	ReplaceExistingTasks *bool `json:"replaceExistingTasks,omitempty"`
	// List of the facility codes.
	FacilityCodes []MassUpdateFacilityCode `json:"facilityCodes,omitempty"`
}

// NewMassUpdateFacilityHousekeepingTask instantiates a new MassUpdateFacilityHousekeepingTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMassUpdateFacilityHousekeepingTask() *MassUpdateFacilityHousekeepingTask {
	this := MassUpdateFacilityHousekeepingTask{}
	var replaceExistingTasks bool = false
	this.ReplaceExistingTasks = &replaceExistingTasks
	return &this
}

// NewMassUpdateFacilityHousekeepingTaskWithDefaults instantiates a new MassUpdateFacilityHousekeepingTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMassUpdateFacilityHousekeepingTaskWithDefaults() *MassUpdateFacilityHousekeepingTask {
	this := MassUpdateFacilityHousekeepingTask{}
	var replaceExistingTasks bool = false
	this.ReplaceExistingTasks = &replaceExistingTasks
	return &this
}

// GetFacilityTask returns the FacilityTask field value if set, zero value otherwise.
func (o *MassUpdateFacilityHousekeepingTask) GetFacilityTask() string {
	if o == nil || IsNil(o.FacilityTask) {
		var ret string
		return ret
	}
	return *o.FacilityTask
}

// GetFacilityTaskOk returns a tuple with the FacilityTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MassUpdateFacilityHousekeepingTask) GetFacilityTaskOk() (*string, bool) {
	if o == nil || IsNil(o.FacilityTask) {
		return nil, false
	}
	return o.FacilityTask, true
}

// HasFacilityTask returns a boolean if a field has been set.
func (o *MassUpdateFacilityHousekeepingTask) HasFacilityTask() bool {
	if o != nil && !IsNil(o.FacilityTask) {
		return true
	}

	return false
}

// SetFacilityTask gets a reference to the given string and assigns it to the FacilityTask field.
func (o *MassUpdateFacilityHousekeepingTask) SetFacilityTask(v string) {
	o.FacilityTask = &v
}

// GetTaskStartDate returns the TaskStartDate field value if set, zero value otherwise.
func (o *MassUpdateFacilityHousekeepingTask) GetTaskStartDate() string {
	if o == nil || IsNil(o.TaskStartDate) {
		var ret string
		return ret
	}
	return *o.TaskStartDate
}

// GetTaskStartDateOk returns a tuple with the TaskStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MassUpdateFacilityHousekeepingTask) GetTaskStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.TaskStartDate) {
		return nil, false
	}
	return o.TaskStartDate, true
}

// HasTaskStartDate returns a boolean if a field has been set.
func (o *MassUpdateFacilityHousekeepingTask) HasTaskStartDate() bool {
	if o != nil && !IsNil(o.TaskStartDate) {
		return true
	}

	return false
}

// SetTaskStartDate gets a reference to the given string and assigns it to the TaskStartDate field.
func (o *MassUpdateFacilityHousekeepingTask) SetTaskStartDate(v string) {
	o.TaskStartDate = &v
}

// GetTaskEndDate returns the TaskEndDate field value if set, zero value otherwise.
func (o *MassUpdateFacilityHousekeepingTask) GetTaskEndDate() string {
	if o == nil || IsNil(o.TaskEndDate) {
		var ret string
		return ret
	}
	return *o.TaskEndDate
}

// GetTaskEndDateOk returns a tuple with the TaskEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MassUpdateFacilityHousekeepingTask) GetTaskEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.TaskEndDate) {
		return nil, false
	}
	return o.TaskEndDate, true
}

// HasTaskEndDate returns a boolean if a field has been set.
func (o *MassUpdateFacilityHousekeepingTask) HasTaskEndDate() bool {
	if o != nil && !IsNil(o.TaskEndDate) {
		return true
	}

	return false
}

// SetTaskEndDate gets a reference to the given string and assigns it to the TaskEndDate field.
func (o *MassUpdateFacilityHousekeepingTask) SetTaskEndDate(v string) {
	o.TaskEndDate = &v
}

// GetStayPeriod returns the StayPeriod field value if set, zero value otherwise.
func (o *MassUpdateFacilityHousekeepingTask) GetStayPeriod() MassUpdateHousekeepingTaskStayPeriod {
	if o == nil || IsNil(o.StayPeriod) {
		var ret MassUpdateHousekeepingTaskStayPeriod
		return ret
	}
	return *o.StayPeriod
}

// GetStayPeriodOk returns a tuple with the StayPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MassUpdateFacilityHousekeepingTask) GetStayPeriodOk() (*MassUpdateHousekeepingTaskStayPeriod, bool) {
	if o == nil || IsNil(o.StayPeriod) {
		return nil, false
	}
	return o.StayPeriod, true
}

// HasStayPeriod returns a boolean if a field has been set.
func (o *MassUpdateFacilityHousekeepingTask) HasStayPeriod() bool {
	if o != nil && !IsNil(o.StayPeriod) {
		return true
	}

	return false
}

// SetStayPeriod gets a reference to the given MassUpdateHousekeepingTaskStayPeriod and assigns it to the StayPeriod field.
func (o *MassUpdateFacilityHousekeepingTask) SetStayPeriod(v MassUpdateHousekeepingTaskStayPeriod) {
	o.StayPeriod = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *MassUpdateFacilityHousekeepingTask) GetFrequency() int32 {
	if o == nil || IsNil(o.Frequency) {
		var ret int32
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MassUpdateFacilityHousekeepingTask) GetFrequencyOk() (*int32, bool) {
	if o == nil || IsNil(o.Frequency) {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *MassUpdateFacilityHousekeepingTask) HasFrequency() bool {
	if o != nil && !IsNil(o.Frequency) {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given int32 and assigns it to the Frequency field.
func (o *MassUpdateFacilityHousekeepingTask) SetFrequency(v int32) {
	o.Frequency = &v
}

// GetCycleStartDay returns the CycleStartDay field value if set, zero value otherwise.
func (o *MassUpdateFacilityHousekeepingTask) GetCycleStartDay() int32 {
	if o == nil || IsNil(o.CycleStartDay) {
		var ret int32
		return ret
	}
	return *o.CycleStartDay
}

// GetCycleStartDayOk returns a tuple with the CycleStartDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MassUpdateFacilityHousekeepingTask) GetCycleStartDayOk() (*int32, bool) {
	if o == nil || IsNil(o.CycleStartDay) {
		return nil, false
	}
	return o.CycleStartDay, true
}

// HasCycleStartDay returns a boolean if a field has been set.
func (o *MassUpdateFacilityHousekeepingTask) HasCycleStartDay() bool {
	if o != nil && !IsNil(o.CycleStartDay) {
		return true
	}

	return false
}

// SetCycleStartDay gets a reference to the given int32 and assigns it to the CycleStartDay field.
func (o *MassUpdateFacilityHousekeepingTask) SetCycleStartDay(v int32) {
	o.CycleStartDay = &v
}

// GetReplaceExistingTasks returns the ReplaceExistingTasks field value if set, zero value otherwise.
func (o *MassUpdateFacilityHousekeepingTask) GetReplaceExistingTasks() bool {
	if o == nil || IsNil(o.ReplaceExistingTasks) {
		var ret bool
		return ret
	}
	return *o.ReplaceExistingTasks
}

// GetReplaceExistingTasksOk returns a tuple with the ReplaceExistingTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MassUpdateFacilityHousekeepingTask) GetReplaceExistingTasksOk() (*bool, bool) {
	if o == nil || IsNil(o.ReplaceExistingTasks) {
		return nil, false
	}
	return o.ReplaceExistingTasks, true
}

// HasReplaceExistingTasks returns a boolean if a field has been set.
func (o *MassUpdateFacilityHousekeepingTask) HasReplaceExistingTasks() bool {
	if o != nil && !IsNil(o.ReplaceExistingTasks) {
		return true
	}

	return false
}

// SetReplaceExistingTasks gets a reference to the given bool and assigns it to the ReplaceExistingTasks field.
func (o *MassUpdateFacilityHousekeepingTask) SetReplaceExistingTasks(v bool) {
	o.ReplaceExistingTasks = &v
}

// GetFacilityCodes returns the FacilityCodes field value if set, zero value otherwise.
func (o *MassUpdateFacilityHousekeepingTask) GetFacilityCodes() []MassUpdateFacilityCode {
	if o == nil || IsNil(o.FacilityCodes) {
		var ret []MassUpdateFacilityCode
		return ret
	}
	return o.FacilityCodes
}

// GetFacilityCodesOk returns a tuple with the FacilityCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MassUpdateFacilityHousekeepingTask) GetFacilityCodesOk() ([]MassUpdateFacilityCode, bool) {
	if o == nil || IsNil(o.FacilityCodes) {
		return nil, false
	}
	return o.FacilityCodes, true
}

// HasFacilityCodes returns a boolean if a field has been set.
func (o *MassUpdateFacilityHousekeepingTask) HasFacilityCodes() bool {
	if o != nil && !IsNil(o.FacilityCodes) {
		return true
	}

	return false
}

// SetFacilityCodes gets a reference to the given []MassUpdateFacilityCode and assigns it to the FacilityCodes field.
func (o *MassUpdateFacilityHousekeepingTask) SetFacilityCodes(v []MassUpdateFacilityCode) {
	o.FacilityCodes = v
}

func (o MassUpdateFacilityHousekeepingTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MassUpdateFacilityHousekeepingTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FacilityTask) {
		toSerialize["facilityTask"] = o.FacilityTask
	}
	if !IsNil(o.TaskStartDate) {
		toSerialize["taskStartDate"] = o.TaskStartDate
	}
	if !IsNil(o.TaskEndDate) {
		toSerialize["taskEndDate"] = o.TaskEndDate
	}
	if !IsNil(o.StayPeriod) {
		toSerialize["stayPeriod"] = o.StayPeriod
	}
	if !IsNil(o.Frequency) {
		toSerialize["frequency"] = o.Frequency
	}
	if !IsNil(o.CycleStartDay) {
		toSerialize["cycleStartDay"] = o.CycleStartDay
	}
	if !IsNil(o.ReplaceExistingTasks) {
		toSerialize["replaceExistingTasks"] = o.ReplaceExistingTasks
	}
	if !IsNil(o.FacilityCodes) {
		toSerialize["facilityCodes"] = o.FacilityCodes
	}
	return toSerialize, nil
}

type NullableMassUpdateFacilityHousekeepingTask struct {
	value *MassUpdateFacilityHousekeepingTask
	isSet bool
}

func (v NullableMassUpdateFacilityHousekeepingTask) Get() *MassUpdateFacilityHousekeepingTask {
	return v.value
}

func (v *NullableMassUpdateFacilityHousekeepingTask) Set(val *MassUpdateFacilityHousekeepingTask) {
	v.value = val
	v.isSet = true
}

func (v NullableMassUpdateFacilityHousekeepingTask) IsSet() bool {
	return v.isSet
}

func (v *NullableMassUpdateFacilityHousekeepingTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMassUpdateFacilityHousekeepingTask(val *MassUpdateFacilityHousekeepingTask) *NullableMassUpdateFacilityHousekeepingTask {
	return &NullableMassUpdateFacilityHousekeepingTask{value: val, isSet: true}
}

func (v NullableMassUpdateFacilityHousekeepingTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMassUpdateFacilityHousekeepingTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


