/*
OPERA Cloud Reservation Asynchronous API

APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvasync

import (
	"encoding/json"
)

// checks if the PreferencesTypeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PreferencesTypeType{}

// PreferencesTypeType Preference details for the profile.
type PreferencesTypeType struct {
	// Collection of Preferences for the profile.
	Preference []PreferencesType `json:"preference,omitempty"`
	// Preference group code.
	PreferenceType *string `json:"preferenceType,omitempty"`
	// Preference group description.
	PreferenceTypeDescription *string `json:"preferenceTypeDescription,omitempty"`
}

// NewPreferencesTypeType instantiates a new PreferencesTypeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreferencesTypeType() *PreferencesTypeType {
	this := PreferencesTypeType{}
	return &this
}

// NewPreferencesTypeTypeWithDefaults instantiates a new PreferencesTypeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreferencesTypeTypeWithDefaults() *PreferencesTypeType {
	this := PreferencesTypeType{}
	return &this
}

// GetPreference returns the Preference field value if set, zero value otherwise.
func (o *PreferencesTypeType) GetPreference() []PreferencesType {
	if o == nil || IsNil(o.Preference) {
		var ret []PreferencesType
		return ret
	}
	return o.Preference
}

// GetPreferenceOk returns a tuple with the Preference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreferencesTypeType) GetPreferenceOk() ([]PreferencesType, bool) {
	if o == nil || IsNil(o.Preference) {
		return nil, false
	}
	return o.Preference, true
}

// HasPreference returns a boolean if a field has been set.
func (o *PreferencesTypeType) HasPreference() bool {
	if o != nil && !IsNil(o.Preference) {
		return true
	}

	return false
}

// SetPreference gets a reference to the given []PreferencesType and assigns it to the Preference field.
func (o *PreferencesTypeType) SetPreference(v []PreferencesType) {
	o.Preference = v
}

// GetPreferenceType returns the PreferenceType field value if set, zero value otherwise.
func (o *PreferencesTypeType) GetPreferenceType() string {
	if o == nil || IsNil(o.PreferenceType) {
		var ret string
		return ret
	}
	return *o.PreferenceType
}

// GetPreferenceTypeOk returns a tuple with the PreferenceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreferencesTypeType) GetPreferenceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PreferenceType) {
		return nil, false
	}
	return o.PreferenceType, true
}

// HasPreferenceType returns a boolean if a field has been set.
func (o *PreferencesTypeType) HasPreferenceType() bool {
	if o != nil && !IsNil(o.PreferenceType) {
		return true
	}

	return false
}

// SetPreferenceType gets a reference to the given string and assigns it to the PreferenceType field.
func (o *PreferencesTypeType) SetPreferenceType(v string) {
	o.PreferenceType = &v
}

// GetPreferenceTypeDescription returns the PreferenceTypeDescription field value if set, zero value otherwise.
func (o *PreferencesTypeType) GetPreferenceTypeDescription() string {
	if o == nil || IsNil(o.PreferenceTypeDescription) {
		var ret string
		return ret
	}
	return *o.PreferenceTypeDescription
}

// GetPreferenceTypeDescriptionOk returns a tuple with the PreferenceTypeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreferencesTypeType) GetPreferenceTypeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.PreferenceTypeDescription) {
		return nil, false
	}
	return o.PreferenceTypeDescription, true
}

// HasPreferenceTypeDescription returns a boolean if a field has been set.
func (o *PreferencesTypeType) HasPreferenceTypeDescription() bool {
	if o != nil && !IsNil(o.PreferenceTypeDescription) {
		return true
	}

	return false
}

// SetPreferenceTypeDescription gets a reference to the given string and assigns it to the PreferenceTypeDescription field.
func (o *PreferencesTypeType) SetPreferenceTypeDescription(v string) {
	o.PreferenceTypeDescription = &v
}

func (o PreferencesTypeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PreferencesTypeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Preference) {
		toSerialize["preference"] = o.Preference
	}
	if !IsNil(o.PreferenceType) {
		toSerialize["preferenceType"] = o.PreferenceType
	}
	if !IsNil(o.PreferenceTypeDescription) {
		toSerialize["preferenceTypeDescription"] = o.PreferenceTypeDescription
	}
	return toSerialize, nil
}

type NullablePreferencesTypeType struct {
	value *PreferencesTypeType
	isSet bool
}

func (v NullablePreferencesTypeType) Get() *PreferencesTypeType {
	return v.value
}

func (v *NullablePreferencesTypeType) Set(val *PreferencesTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullablePreferencesTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullablePreferencesTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreferencesTypeType(val *PreferencesTypeType) *NullablePreferencesTypeType {
	return &NullablePreferencesTypeType{value: val, isSet: true}
}

func (v NullablePreferencesTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreferencesTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


