/*
OPERA Cloud Reservation Asynchronous API

APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvasync

import (
	"encoding/json"
)

// checks if the TraceTimeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TraceTimeType{}

// TraceTimeType struct for TraceTimeType
type TraceTimeType struct {
	DateTimeSpan *DateTimeSpanType `json:"dateTimeSpan,omitempty"`
	// Time of the trace in 24 hour time.
	TraceTime *string `json:"traceTime,omitempty"`
}

// NewTraceTimeType instantiates a new TraceTimeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraceTimeType() *TraceTimeType {
	this := TraceTimeType{}
	return &this
}

// NewTraceTimeTypeWithDefaults instantiates a new TraceTimeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceTimeTypeWithDefaults() *TraceTimeType {
	this := TraceTimeType{}
	return &this
}

// GetDateTimeSpan returns the DateTimeSpan field value if set, zero value otherwise.
func (o *TraceTimeType) GetDateTimeSpan() DateTimeSpanType {
	if o == nil || IsNil(o.DateTimeSpan) {
		var ret DateTimeSpanType
		return ret
	}
	return *o.DateTimeSpan
}

// GetDateTimeSpanOk returns a tuple with the DateTimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceTimeType) GetDateTimeSpanOk() (*DateTimeSpanType, bool) {
	if o == nil || IsNil(o.DateTimeSpan) {
		return nil, false
	}
	return o.DateTimeSpan, true
}

// HasDateTimeSpan returns a boolean if a field has been set.
func (o *TraceTimeType) HasDateTimeSpan() bool {
	if o != nil && !IsNil(o.DateTimeSpan) {
		return true
	}

	return false
}

// SetDateTimeSpan gets a reference to the given DateTimeSpanType and assigns it to the DateTimeSpan field.
func (o *TraceTimeType) SetDateTimeSpan(v DateTimeSpanType) {
	o.DateTimeSpan = &v
}

// GetTraceTime returns the TraceTime field value if set, zero value otherwise.
func (o *TraceTimeType) GetTraceTime() string {
	if o == nil || IsNil(o.TraceTime) {
		var ret string
		return ret
	}
	return *o.TraceTime
}

// GetTraceTimeOk returns a tuple with the TraceTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceTimeType) GetTraceTimeOk() (*string, bool) {
	if o == nil || IsNil(o.TraceTime) {
		return nil, false
	}
	return o.TraceTime, true
}

// HasTraceTime returns a boolean if a field has been set.
func (o *TraceTimeType) HasTraceTime() bool {
	if o != nil && !IsNil(o.TraceTime) {
		return true
	}

	return false
}

// SetTraceTime gets a reference to the given string and assigns it to the TraceTime field.
func (o *TraceTimeType) SetTraceTime(v string) {
	o.TraceTime = &v
}

func (o TraceTimeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TraceTimeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DateTimeSpan) {
		toSerialize["dateTimeSpan"] = o.DateTimeSpan
	}
	if !IsNil(o.TraceTime) {
		toSerialize["traceTime"] = o.TraceTime
	}
	return toSerialize, nil
}

type NullableTraceTimeType struct {
	value *TraceTimeType
	isSet bool
}

func (v NullableTraceTimeType) Get() *TraceTimeType {
	return v.value
}

func (v *NullableTraceTimeType) Set(val *TraceTimeType) {
	v.value = val
	v.isSet = true
}

func (v NullableTraceTimeType) IsSet() bool {
	return v.isSet
}

func (v *NullableTraceTimeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraceTimeType(val *TraceTimeType) *NullableTraceTimeType {
	return &NullableTraceTimeType{value: val, isSet: true}
}

func (v NullableTraceTimeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraceTimeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


