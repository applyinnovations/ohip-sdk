/*
OPERA Cloud Reservation Asynchronous API

APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvasync

import (
	"encoding/json"
)

// checks if the OutcomeMessageType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutcomeMessageType{}

// OutcomeMessageType Object for update messages.
type OutcomeMessageType struct {
	// Update Message Code.
	MessageCode *string `json:"messageCode,omitempty"`
	// Update Message Text
	MessageText *string `json:"messageText,omitempty"`
}

// NewOutcomeMessageType instantiates a new OutcomeMessageType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutcomeMessageType() *OutcomeMessageType {
	this := OutcomeMessageType{}
	return &this
}

// NewOutcomeMessageTypeWithDefaults instantiates a new OutcomeMessageType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutcomeMessageTypeWithDefaults() *OutcomeMessageType {
	this := OutcomeMessageType{}
	return &this
}

// GetMessageCode returns the MessageCode field value if set, zero value otherwise.
func (o *OutcomeMessageType) GetMessageCode() string {
	if o == nil || IsNil(o.MessageCode) {
		var ret string
		return ret
	}
	return *o.MessageCode
}

// GetMessageCodeOk returns a tuple with the MessageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutcomeMessageType) GetMessageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MessageCode) {
		return nil, false
	}
	return o.MessageCode, true
}

// HasMessageCode returns a boolean if a field has been set.
func (o *OutcomeMessageType) HasMessageCode() bool {
	if o != nil && !IsNil(o.MessageCode) {
		return true
	}

	return false
}

// SetMessageCode gets a reference to the given string and assigns it to the MessageCode field.
func (o *OutcomeMessageType) SetMessageCode(v string) {
	o.MessageCode = &v
}

// GetMessageText returns the MessageText field value if set, zero value otherwise.
func (o *OutcomeMessageType) GetMessageText() string {
	if o == nil || IsNil(o.MessageText) {
		var ret string
		return ret
	}
	return *o.MessageText
}

// GetMessageTextOk returns a tuple with the MessageText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutcomeMessageType) GetMessageTextOk() (*string, bool) {
	if o == nil || IsNil(o.MessageText) {
		return nil, false
	}
	return o.MessageText, true
}

// HasMessageText returns a boolean if a field has been set.
func (o *OutcomeMessageType) HasMessageText() bool {
	if o != nil && !IsNil(o.MessageText) {
		return true
	}

	return false
}

// SetMessageText gets a reference to the given string and assigns it to the MessageText field.
func (o *OutcomeMessageType) SetMessageText(v string) {
	o.MessageText = &v
}

func (o OutcomeMessageType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutcomeMessageType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MessageCode) {
		toSerialize["messageCode"] = o.MessageCode
	}
	if !IsNil(o.MessageText) {
		toSerialize["messageText"] = o.MessageText
	}
	return toSerialize, nil
}

type NullableOutcomeMessageType struct {
	value *OutcomeMessageType
	isSet bool
}

func (v NullableOutcomeMessageType) Get() *OutcomeMessageType {
	return v.value
}

func (v *NullableOutcomeMessageType) Set(val *OutcomeMessageType) {
	v.value = val
	v.isSet = true
}

func (v NullableOutcomeMessageType) IsSet() bool {
	return v.isSet
}

func (v *NullableOutcomeMessageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutcomeMessageType(val *OutcomeMessageType) *NullableOutcomeMessageType {
	return &NullableOutcomeMessageType{value: val, isSet: true}
}

func (v NullableOutcomeMessageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutcomeMessageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


