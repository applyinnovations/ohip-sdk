/*
OPERA Cloud Reservation Asynchronous API

Testing ReservationAsyncAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rsvasync

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/rsvasync"
)

func Test_rsvasync_ReservationAsyncAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ReservationAsyncAPIService GetMassUpdateProcessSummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var massUpdateId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationAsyncAPI.GetMassUpdateProcessSummary(context.Background(), massUpdateId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationAsyncAPIService GetReservationsDailySummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var summaryId string
		var extSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationAsyncAPI.GetReservationsDailySummary(context.Background(), summaryId, extSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationAsyncAPIService GetReservationsProcessStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var summaryId string
		var extSystemCode string
		var hotelId string

		httpRes, err := apiClient.ReservationAsyncAPI.GetReservationsProcessStatus(context.Background(), summaryId, extSystemCode, hotelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationAsyncAPIService GetRoomingListCreationProcessResults", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationAsyncAPI.GetRoomingListCreationProcessResults(context.Background(), requestId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationAsyncAPIService GetRoomingListCreationProcessStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string
		var hotelId string

		httpRes, err := apiClient.ReservationAsyncAPI.GetRoomingListCreationProcessStatus(context.Background(), requestId, hotelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationAsyncAPIService GetRoomingListValidationProcessResults", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationAsyncAPI.GetRoomingListValidationProcessResults(context.Background(), requestId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationAsyncAPIService GetRoomingListValidationProcessStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string
		var hotelId string

		httpRes, err := apiClient.ReservationAsyncAPI.GetRoomingListValidationProcessStatus(context.Background(), requestId, hotelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationAsyncAPIService HeadMassUpdateProcessStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var massUpdateId string
		var hotelId string

		httpRes, err := apiClient.ReservationAsyncAPI.HeadMassUpdateProcessStatus(context.Background(), massUpdateId, hotelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationAsyncAPIService StartHousekeepingMassUpdateProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		httpRes, err := apiClient.ReservationAsyncAPI.StartHousekeepingMassUpdateProcess(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationAsyncAPIService StartNotesMassUpdateProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		httpRes, err := apiClient.ReservationAsyncAPI.StartNotesMassUpdateProcess(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationAsyncAPIService StartPaymentInstructionsMassUpdateProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		httpRes, err := apiClient.ReservationAsyncAPI.StartPaymentInstructionsMassUpdateProcess(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationAsyncAPIService StartPreferencesMassUpdateProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		httpRes, err := apiClient.ReservationAsyncAPI.StartPreferencesMassUpdateProcess(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationAsyncAPIService StartReservationDetailsMassUpdateProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		httpRes, err := apiClient.ReservationAsyncAPI.StartReservationDetailsMassUpdateProcess(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationAsyncAPIService StartReservationsDailySummaryProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extSystemCode string
		var hotelId string

		httpRes, err := apiClient.ReservationAsyncAPI.StartReservationsDailySummaryProcess(context.Background(), extSystemCode, hotelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationAsyncAPIService StartRoomingListCreationProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var blockId string

		httpRes, err := apiClient.ReservationAsyncAPI.StartRoomingListCreationProcess(context.Background(), hotelId, blockId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationAsyncAPIService StartRoomingListValidationProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var blockId string

		httpRes, err := apiClient.ReservationAsyncAPI.StartRoomingListValidationProcess(context.Background(), hotelId, blockId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationAsyncAPIService StartRoutingInstructionsMassUpdateProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		httpRes, err := apiClient.ReservationAsyncAPI.StartRoutingInstructionsMassUpdateProcess(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationAsyncAPIService StartTracesMassUpdateProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		httpRes, err := apiClient.ReservationAsyncAPI.StartTracesMassUpdateProcess(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationAsyncAPIService StartTransportationsMassUpdateProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		httpRes, err := apiClient.ReservationAsyncAPI.StartTransportationsMassUpdateProcess(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
