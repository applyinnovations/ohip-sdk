/*
OPERA Cloud Reservation Asynchronous API

APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvasync

import (
	"encoding/json"
	"fmt"
)

// DatabaseResStatusType This reservation is in checked in status and the business date is past departure date. This could occur when ORS and PMS are in same environment.
type DatabaseResStatusType string

// List of database_ResStatusType
const (
	DATABASERESSTATUSTYPE_RESERVED DatabaseResStatusType = "RESERVED"
	DATABASERESSTATUSTYPE_REQUESTED DatabaseResStatusType = "REQUESTED"
	DATABASERESSTATUSTYPE_NO_SHOW DatabaseResStatusType = "NO SHOW"
	DATABASERESSTATUSTYPE_CANCELLED DatabaseResStatusType = "CANCELLED"
	DATABASERESSTATUSTYPE_IN_HOUSE DatabaseResStatusType = "IN HOUSE"
	DATABASERESSTATUSTYPE_CHECKED_IN DatabaseResStatusType = "CHECKED IN"
	DATABASERESSTATUSTYPE_CHECKED_OUT DatabaseResStatusType = "CHECKED OUT"
	DATABASERESSTATUSTYPE_WAITLIST DatabaseResStatusType = "WAITLIST"
	DATABASERESSTATUSTYPE_DUE_IN DatabaseResStatusType = "DUE IN"
	DATABASERESSTATUSTYPE_DUE_OUT DatabaseResStatusType = "DUE OUT"
	DATABASERESSTATUSTYPE_WALKIN DatabaseResStatusType = "WALKIN"
	DATABASERESSTATUSTYPE_PENDING_CHECKOUT DatabaseResStatusType = "PENDING CHECKOUT"
	DATABASERESSTATUSTYPE_PROSPECT DatabaseResStatusType = "PROSPECT"
)

// All allowed values of DatabaseResStatusType enum
var AllowedDatabaseResStatusTypeEnumValues = []DatabaseResStatusType{
	"RESERVED",
	"REQUESTED",
	"NO SHOW",
	"CANCELLED",
	"IN HOUSE",
	"CHECKED IN",
	"CHECKED OUT",
	"WAITLIST",
	"DUE IN",
	"DUE OUT",
	"WALKIN",
	"PENDING CHECKOUT",
	"PROSPECT",
}

func (v *DatabaseResStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DatabaseResStatusType(value)
	for _, existing := range AllowedDatabaseResStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DatabaseResStatusType", value)
}

// NewDatabaseResStatusTypeFromValue returns a pointer to a valid DatabaseResStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDatabaseResStatusTypeFromValue(v string) (*DatabaseResStatusType, error) {
	ev := DatabaseResStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DatabaseResStatusType: valid values are %v", v, AllowedDatabaseResStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DatabaseResStatusType) IsValid() bool {
	for _, existing := range AllowedDatabaseResStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to database_ResStatusType value
func (v DatabaseResStatusType) Ptr() *DatabaseResStatusType {
	return &v
}

type NullableDatabaseResStatusType struct {
	value *DatabaseResStatusType
	isSet bool
}

func (v NullableDatabaseResStatusType) Get() *DatabaseResStatusType {
	return v.value
}

func (v *NullableDatabaseResStatusType) Set(val *DatabaseResStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseResStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseResStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseResStatusType(val *DatabaseResStatusType) *NullableDatabaseResStatusType {
	return &NullableDatabaseResStatusType{value: val, isSet: true}
}

func (v NullableDatabaseResStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseResStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

