/*
Opera Cloud Rate Plan Asynchronous Service API

APIs catering to the Rate Plan asynchronous related functionality in a hotel.  This includes adding/updating daily rates&apos; pricing schedules and best available rates by day or length of stay. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtpasync

import (
	"encoding/json"
)

// checks if the RatePlanClassificationsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatePlanClassificationsType{}

// RatePlanClassificationsType struct for RatePlanClassificationsType
type RatePlanClassificationsType struct {
	// Rate Category for the rate plan.
	RateCategory *string `json:"rateCategory,omitempty"`
	// Market code for the rate plan.
	MarketCode *string `json:"marketCode,omitempty"`
	// Source code for the rate plan.
	SourceCode *string `json:"sourceCode,omitempty"`
}

// NewRatePlanClassificationsType instantiates a new RatePlanClassificationsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatePlanClassificationsType() *RatePlanClassificationsType {
	this := RatePlanClassificationsType{}
	return &this
}

// NewRatePlanClassificationsTypeWithDefaults instantiates a new RatePlanClassificationsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatePlanClassificationsTypeWithDefaults() *RatePlanClassificationsType {
	this := RatePlanClassificationsType{}
	return &this
}

// GetRateCategory returns the RateCategory field value if set, zero value otherwise.
func (o *RatePlanClassificationsType) GetRateCategory() string {
	if o == nil || IsNil(o.RateCategory) {
		var ret string
		return ret
	}
	return *o.RateCategory
}

// GetRateCategoryOk returns a tuple with the RateCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanClassificationsType) GetRateCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.RateCategory) {
		return nil, false
	}
	return o.RateCategory, true
}

// HasRateCategory returns a boolean if a field has been set.
func (o *RatePlanClassificationsType) HasRateCategory() bool {
	if o != nil && !IsNil(o.RateCategory) {
		return true
	}

	return false
}

// SetRateCategory gets a reference to the given string and assigns it to the RateCategory field.
func (o *RatePlanClassificationsType) SetRateCategory(v string) {
	o.RateCategory = &v
}

// GetMarketCode returns the MarketCode field value if set, zero value otherwise.
func (o *RatePlanClassificationsType) GetMarketCode() string {
	if o == nil || IsNil(o.MarketCode) {
		var ret string
		return ret
	}
	return *o.MarketCode
}

// GetMarketCodeOk returns a tuple with the MarketCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanClassificationsType) GetMarketCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MarketCode) {
		return nil, false
	}
	return o.MarketCode, true
}

// HasMarketCode returns a boolean if a field has been set.
func (o *RatePlanClassificationsType) HasMarketCode() bool {
	if o != nil && !IsNil(o.MarketCode) {
		return true
	}

	return false
}

// SetMarketCode gets a reference to the given string and assigns it to the MarketCode field.
func (o *RatePlanClassificationsType) SetMarketCode(v string) {
	o.MarketCode = &v
}

// GetSourceCode returns the SourceCode field value if set, zero value otherwise.
func (o *RatePlanClassificationsType) GetSourceCode() string {
	if o == nil || IsNil(o.SourceCode) {
		var ret string
		return ret
	}
	return *o.SourceCode
}

// GetSourceCodeOk returns a tuple with the SourceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanClassificationsType) GetSourceCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SourceCode) {
		return nil, false
	}
	return o.SourceCode, true
}

// HasSourceCode returns a boolean if a field has been set.
func (o *RatePlanClassificationsType) HasSourceCode() bool {
	if o != nil && !IsNil(o.SourceCode) {
		return true
	}

	return false
}

// SetSourceCode gets a reference to the given string and assigns it to the SourceCode field.
func (o *RatePlanClassificationsType) SetSourceCode(v string) {
	o.SourceCode = &v
}

func (o RatePlanClassificationsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatePlanClassificationsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RateCategory) {
		toSerialize["rateCategory"] = o.RateCategory
	}
	if !IsNil(o.MarketCode) {
		toSerialize["marketCode"] = o.MarketCode
	}
	if !IsNil(o.SourceCode) {
		toSerialize["sourceCode"] = o.SourceCode
	}
	return toSerialize, nil
}

type NullableRatePlanClassificationsType struct {
	value *RatePlanClassificationsType
	isSet bool
}

func (v NullableRatePlanClassificationsType) Get() *RatePlanClassificationsType {
	return v.value
}

func (v *NullableRatePlanClassificationsType) Set(val *RatePlanClassificationsType) {
	v.value = val
	v.isSet = true
}

func (v NullableRatePlanClassificationsType) IsSet() bool {
	return v.isSet
}

func (v *NullableRatePlanClassificationsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatePlanClassificationsType(val *RatePlanClassificationsType) *NullableRatePlanClassificationsType {
	return &NullableRatePlanClassificationsType{value: val, isSet: true}
}

func (v NullableRatePlanClassificationsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatePlanClassificationsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


