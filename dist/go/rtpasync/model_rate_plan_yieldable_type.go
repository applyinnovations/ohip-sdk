/*
Opera Cloud Rate Plan Asynchronous Service API

APIs catering to the Rate Plan asynchronous related functionality in a hotel.  This includes adding/updating daily rates&apos; pricing schedules and best available rates by day or length of stay. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtpasync

import (
	"encoding/json"
	"fmt"
)

// RatePlanYieldableType Simple type for valid values for Yieldable element for the Rate plan code.
type RatePlanYieldableType string

// List of ratePlanYieldableType
const (
	RATEPLANYIELDABLETYPE_YIELDABLE RatePlanYieldableType = "Yieldable"
	RATEPLANYIELDABLETYPE_NON_YIELDABLE RatePlanYieldableType = "NonYieldable"
	RATEPLANYIELDABLETYPE_STAY_PATTERN RatePlanYieldableType = "StayPattern"
)

// All allowed values of RatePlanYieldableType enum
var AllowedRatePlanYieldableTypeEnumValues = []RatePlanYieldableType{
	"Yieldable",
	"NonYieldable",
	"StayPattern",
}

func (v *RatePlanYieldableType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RatePlanYieldableType(value)
	for _, existing := range AllowedRatePlanYieldableTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RatePlanYieldableType", value)
}

// NewRatePlanYieldableTypeFromValue returns a pointer to a valid RatePlanYieldableType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRatePlanYieldableTypeFromValue(v string) (*RatePlanYieldableType, error) {
	ev := RatePlanYieldableType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RatePlanYieldableType: valid values are %v", v, AllowedRatePlanYieldableTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RatePlanYieldableType) IsValid() bool {
	for _, existing := range AllowedRatePlanYieldableTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ratePlanYieldableType value
func (v RatePlanYieldableType) Ptr() *RatePlanYieldableType {
	return &v
}

type NullableRatePlanYieldableType struct {
	value *RatePlanYieldableType
	isSet bool
}

func (v NullableRatePlanYieldableType) Get() *RatePlanYieldableType {
	return v.value
}

func (v *NullableRatePlanYieldableType) Set(val *RatePlanYieldableType) {
	v.value = val
	v.isSet = true
}

func (v NullableRatePlanYieldableType) IsSet() bool {
	return v.isSet
}

func (v *NullableRatePlanYieldableType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatePlanYieldableType(val *RatePlanYieldableType) *NullableRatePlanYieldableType {
	return &NullableRatePlanYieldableType{value: val, isSet: true}
}

func (v NullableRatePlanYieldableType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatePlanYieldableType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

