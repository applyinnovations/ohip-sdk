/*
Opera Cloud Rate Plan Asynchronous Service API

APIs catering to the Rate Plan asynchronous related functionality in a hotel.  This includes adding/updating daily rates&apos; pricing schedules and best available rates by day or length of stay. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtpasync

import (
	"encoding/json"
)

// checks if the RatePlanDistributionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatePlanDistributionType{}

// RatePlanDistributionType struct for RatePlanDistributionType
type RatePlanDistributionType struct {
	// Restriction updates for the rate plan to be sent to channels?
	RestrictionUpdate *bool `json:"restrictionUpdate,omitempty"`
	// Rate updates for the rate plan to be sent to channels?
	RateUpdate *bool `json:"rateUpdate,omitempty"`
	// Rate plan to be uploaded to MyFidleio and published.
	MyFidelioUploadAllowed *bool `json:"myFidelioUploadAllowed,omitempty"`
	// Rate plan Code is available for channels.
	ChannelAllowed *bool `json:"channelAllowed,omitempty"`
}

// NewRatePlanDistributionType instantiates a new RatePlanDistributionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatePlanDistributionType() *RatePlanDistributionType {
	this := RatePlanDistributionType{}
	return &this
}

// NewRatePlanDistributionTypeWithDefaults instantiates a new RatePlanDistributionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatePlanDistributionTypeWithDefaults() *RatePlanDistributionType {
	this := RatePlanDistributionType{}
	return &this
}

// GetRestrictionUpdate returns the RestrictionUpdate field value if set, zero value otherwise.
func (o *RatePlanDistributionType) GetRestrictionUpdate() bool {
	if o == nil || IsNil(o.RestrictionUpdate) {
		var ret bool
		return ret
	}
	return *o.RestrictionUpdate
}

// GetRestrictionUpdateOk returns a tuple with the RestrictionUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanDistributionType) GetRestrictionUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.RestrictionUpdate) {
		return nil, false
	}
	return o.RestrictionUpdate, true
}

// HasRestrictionUpdate returns a boolean if a field has been set.
func (o *RatePlanDistributionType) HasRestrictionUpdate() bool {
	if o != nil && !IsNil(o.RestrictionUpdate) {
		return true
	}

	return false
}

// SetRestrictionUpdate gets a reference to the given bool and assigns it to the RestrictionUpdate field.
func (o *RatePlanDistributionType) SetRestrictionUpdate(v bool) {
	o.RestrictionUpdate = &v
}

// GetRateUpdate returns the RateUpdate field value if set, zero value otherwise.
func (o *RatePlanDistributionType) GetRateUpdate() bool {
	if o == nil || IsNil(o.RateUpdate) {
		var ret bool
		return ret
	}
	return *o.RateUpdate
}

// GetRateUpdateOk returns a tuple with the RateUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanDistributionType) GetRateUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.RateUpdate) {
		return nil, false
	}
	return o.RateUpdate, true
}

// HasRateUpdate returns a boolean if a field has been set.
func (o *RatePlanDistributionType) HasRateUpdate() bool {
	if o != nil && !IsNil(o.RateUpdate) {
		return true
	}

	return false
}

// SetRateUpdate gets a reference to the given bool and assigns it to the RateUpdate field.
func (o *RatePlanDistributionType) SetRateUpdate(v bool) {
	o.RateUpdate = &v
}

// GetMyFidelioUploadAllowed returns the MyFidelioUploadAllowed field value if set, zero value otherwise.
func (o *RatePlanDistributionType) GetMyFidelioUploadAllowed() bool {
	if o == nil || IsNil(o.MyFidelioUploadAllowed) {
		var ret bool
		return ret
	}
	return *o.MyFidelioUploadAllowed
}

// GetMyFidelioUploadAllowedOk returns a tuple with the MyFidelioUploadAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanDistributionType) GetMyFidelioUploadAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.MyFidelioUploadAllowed) {
		return nil, false
	}
	return o.MyFidelioUploadAllowed, true
}

// HasMyFidelioUploadAllowed returns a boolean if a field has been set.
func (o *RatePlanDistributionType) HasMyFidelioUploadAllowed() bool {
	if o != nil && !IsNil(o.MyFidelioUploadAllowed) {
		return true
	}

	return false
}

// SetMyFidelioUploadAllowed gets a reference to the given bool and assigns it to the MyFidelioUploadAllowed field.
func (o *RatePlanDistributionType) SetMyFidelioUploadAllowed(v bool) {
	o.MyFidelioUploadAllowed = &v
}

// GetChannelAllowed returns the ChannelAllowed field value if set, zero value otherwise.
func (o *RatePlanDistributionType) GetChannelAllowed() bool {
	if o == nil || IsNil(o.ChannelAllowed) {
		var ret bool
		return ret
	}
	return *o.ChannelAllowed
}

// GetChannelAllowedOk returns a tuple with the ChannelAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanDistributionType) GetChannelAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.ChannelAllowed) {
		return nil, false
	}
	return o.ChannelAllowed, true
}

// HasChannelAllowed returns a boolean if a field has been set.
func (o *RatePlanDistributionType) HasChannelAllowed() bool {
	if o != nil && !IsNil(o.ChannelAllowed) {
		return true
	}

	return false
}

// SetChannelAllowed gets a reference to the given bool and assigns it to the ChannelAllowed field.
func (o *RatePlanDistributionType) SetChannelAllowed(v bool) {
	o.ChannelAllowed = &v
}

func (o RatePlanDistributionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatePlanDistributionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RestrictionUpdate) {
		toSerialize["restrictionUpdate"] = o.RestrictionUpdate
	}
	if !IsNil(o.RateUpdate) {
		toSerialize["rateUpdate"] = o.RateUpdate
	}
	if !IsNil(o.MyFidelioUploadAllowed) {
		toSerialize["myFidelioUploadAllowed"] = o.MyFidelioUploadAllowed
	}
	if !IsNil(o.ChannelAllowed) {
		toSerialize["channelAllowed"] = o.ChannelAllowed
	}
	return toSerialize, nil
}

type NullableRatePlanDistributionType struct {
	value *RatePlanDistributionType
	isSet bool
}

func (v NullableRatePlanDistributionType) Get() *RatePlanDistributionType {
	return v.value
}

func (v *NullableRatePlanDistributionType) Set(val *RatePlanDistributionType) {
	v.value = val
	v.isSet = true
}

func (v NullableRatePlanDistributionType) IsSet() bool {
	return v.isSet
}

func (v *NullableRatePlanDistributionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatePlanDistributionType(val *RatePlanDistributionType) *NullableRatePlanDistributionType {
	return &NullableRatePlanDistributionType{value: val, isSet: true}
}

func (v NullableRatePlanDistributionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatePlanDistributionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


