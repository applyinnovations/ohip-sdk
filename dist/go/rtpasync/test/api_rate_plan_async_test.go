/*
Opera Cloud Rate Plan Asynchronous Service API

Testing RatePlanAsyncAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rtpasync

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/rtpasync"
)

func Test_rtpasync_RatePlanAsyncAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RatePlanAsyncAPIService GetBestAvailableRatePlans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string
		var hotelId string
		var extSystemCode string

		resp, httpRes, err := apiClient.RatePlanAsyncAPI.GetBestAvailableRatePlans(context.Background(), requestId, hotelId, extSystemCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAsyncAPIService GetBestAvailableRatePlansProcessStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string
		var extSystemCode string
		var hotelId string

		httpRes, err := apiClient.RatePlanAsyncAPI.GetBestAvailableRatePlansProcessStatus(context.Background(), requestId, extSystemCode, hotelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAsyncAPIService GetDailyRatePlanSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string
		var hotelId string
		var extSystemCode string

		resp, httpRes, err := apiClient.RatePlanAsyncAPI.GetDailyRatePlanSchedules(context.Background(), requestId, hotelId, extSystemCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAsyncAPIService GetDailyRatePlanSchedulesProcessStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string
		var extSystemCode string
		var hotelId string

		httpRes, err := apiClient.RatePlanAsyncAPI.GetDailyRatePlanSchedulesProcessStatus(context.Background(), requestId, extSystemCode, hotelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAsyncAPIService GetHurdleRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var extSystemCode string
		var requestId string

		resp, httpRes, err := apiClient.RatePlanAsyncAPI.GetHurdleRates(context.Background(), hotelId, extSystemCode, requestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAsyncAPIService GetHurdleRatesProcessStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string
		var extSystemCode string
		var hotelId string

		httpRes, err := apiClient.RatePlanAsyncAPI.GetHurdleRatesProcessStatus(context.Background(), requestId, extSystemCode, hotelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAsyncAPIService GetRatePlansHeaders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var extSystemCode string
		var requestId string

		resp, httpRes, err := apiClient.RatePlanAsyncAPI.GetRatePlansHeaders(context.Background(), hotelId, extSystemCode, requestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAsyncAPIService GetRatePlansHeadersProcessStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string
		var extSystemCode string
		var hotelId string

		httpRes, err := apiClient.RatePlanAsyncAPI.GetRatePlansHeadersProcessStatus(context.Background(), requestId, extSystemCode, hotelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAsyncAPIService StartHurdleRatesProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var extSystemCode string

		httpRes, err := apiClient.RatePlanAsyncAPI.StartHurdleRatesProcess(context.Background(), hotelId, extSystemCode).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAsyncAPIService StartSetBestAvailableRatePlansProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var extSystemCode string

		httpRes, err := apiClient.RatePlanAsyncAPI.StartSetBestAvailableRatePlansProcess(context.Background(), hotelId, extSystemCode).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAsyncAPIService StartSetDailyRatePlanSchedulesProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var extSystemCode string

		httpRes, err := apiClient.RatePlanAsyncAPI.StartSetDailyRatePlanSchedulesProcess(context.Background(), hotelId, extSystemCode).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAsyncAPIService StartSetRatePlansHeadersProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var extSystemCode string

		httpRes, err := apiClient.RatePlanAsyncAPI.StartSetRatePlansHeadersProcess(context.Background(), hotelId, extSystemCode).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
