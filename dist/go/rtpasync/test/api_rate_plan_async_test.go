/*
Opera Cloud Rate Plan Asynchronous Service API

Testing RatePlanAsyncApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rtpasync

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/rtpasync"
)

func Test_rtpasync_RatePlanAsyncApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RatePlanAsyncApiService GetBestAvailableRatePlans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string
		var hotelId string
		var extSystemCode string

		resp, httpRes, err := apiClient.RatePlanAsyncApi.GetBestAvailableRatePlans(context.Background(), requestId, hotelId, extSystemCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAsyncApiService GetBestAvailableRatePlansProcessStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string
		var extSystemCode string
		var hotelId string

		httpRes, err := apiClient.RatePlanAsyncApi.GetBestAvailableRatePlansProcessStatus(context.Background(), requestId, extSystemCode, hotelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAsyncApiService GetDailyRatePlanSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string
		var hotelId string
		var extSystemCode string

		resp, httpRes, err := apiClient.RatePlanAsyncApi.GetDailyRatePlanSchedules(context.Background(), requestId, hotelId, extSystemCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAsyncApiService GetDailyRatePlanSchedulesProcessStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string
		var extSystemCode string
		var hotelId string

		httpRes, err := apiClient.RatePlanAsyncApi.GetDailyRatePlanSchedulesProcessStatus(context.Background(), requestId, extSystemCode, hotelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAsyncApiService GetHurdleRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var extSystemCode string
		var requestId string

		resp, httpRes, err := apiClient.RatePlanAsyncApi.GetHurdleRates(context.Background(), hotelId, extSystemCode, requestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAsyncApiService GetHurdleRatesProcessStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string
		var extSystemCode string
		var hotelId string

		httpRes, err := apiClient.RatePlanAsyncApi.GetHurdleRatesProcessStatus(context.Background(), requestId, extSystemCode, hotelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAsyncApiService GetRatePlansHeaders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var extSystemCode string
		var requestId string

		resp, httpRes, err := apiClient.RatePlanAsyncApi.GetRatePlansHeaders(context.Background(), hotelId, extSystemCode, requestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAsyncApiService GetRatePlansHeadersProcessStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string
		var extSystemCode string
		var hotelId string

		httpRes, err := apiClient.RatePlanAsyncApi.GetRatePlansHeadersProcessStatus(context.Background(), requestId, extSystemCode, hotelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAsyncApiService StartHurdleRatesProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var extSystemCode string

		httpRes, err := apiClient.RatePlanAsyncApi.StartHurdleRatesProcess(context.Background(), hotelId, extSystemCode).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAsyncApiService StartSetBestAvailableRatePlansProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var extSystemCode string

		httpRes, err := apiClient.RatePlanAsyncApi.StartSetBestAvailableRatePlansProcess(context.Background(), hotelId, extSystemCode).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAsyncApiService StartSetDailyRatePlanSchedulesProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var extSystemCode string

		httpRes, err := apiClient.RatePlanAsyncApi.StartSetDailyRatePlanSchedulesProcess(context.Background(), hotelId, extSystemCode).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAsyncApiService StartSetRatePlansHeadersProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var extSystemCode string

		httpRes, err := apiClient.RatePlanAsyncApi.StartSetRatePlansHeadersProcess(context.Background(), hotelId, extSystemCode).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
