/*
Opera Cloud Rate Plan Asynchronous Service API

APIs catering to the Rate Plan asynchronous related functionality in a hotel.  This includes adding/updating daily rates&apos; pricing schedules and best available rates by day or length of stay. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtpasync

import (
	"encoding/json"
)

// checks if the DailyRatePlanScheduleType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DailyRatePlanScheduleType{}

// DailyRatePlanScheduleType Daily rate plan schedule details.
type DailyRatePlanScheduleType struct {
	RateAmounts *ScheduleRateAmountsType `json:"rateAmounts,omitempty"`
	// The rate date for which the daily rate amounts will be applied.
	RateDate *string `json:"rateDate,omitempty"`
	// The rate code for which the daily rate amounts will be applied.
	RatePlanCode *string `json:"ratePlanCode,omitempty"`
	// The room type label for which the daily rate amounts will be applied.
	RoomType *string `json:"roomType,omitempty"`
}

// NewDailyRatePlanScheduleType instantiates a new DailyRatePlanScheduleType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDailyRatePlanScheduleType() *DailyRatePlanScheduleType {
	this := DailyRatePlanScheduleType{}
	return &this
}

// NewDailyRatePlanScheduleTypeWithDefaults instantiates a new DailyRatePlanScheduleType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDailyRatePlanScheduleTypeWithDefaults() *DailyRatePlanScheduleType {
	this := DailyRatePlanScheduleType{}
	return &this
}

// GetRateAmounts returns the RateAmounts field value if set, zero value otherwise.
func (o *DailyRatePlanScheduleType) GetRateAmounts() ScheduleRateAmountsType {
	if o == nil || IsNil(o.RateAmounts) {
		var ret ScheduleRateAmountsType
		return ret
	}
	return *o.RateAmounts
}

// GetRateAmountsOk returns a tuple with the RateAmounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyRatePlanScheduleType) GetRateAmountsOk() (*ScheduleRateAmountsType, bool) {
	if o == nil || IsNil(o.RateAmounts) {
		return nil, false
	}
	return o.RateAmounts, true
}

// HasRateAmounts returns a boolean if a field has been set.
func (o *DailyRatePlanScheduleType) HasRateAmounts() bool {
	if o != nil && !IsNil(o.RateAmounts) {
		return true
	}

	return false
}

// SetRateAmounts gets a reference to the given ScheduleRateAmountsType and assigns it to the RateAmounts field.
func (o *DailyRatePlanScheduleType) SetRateAmounts(v ScheduleRateAmountsType) {
	o.RateAmounts = &v
}

// GetRateDate returns the RateDate field value if set, zero value otherwise.
func (o *DailyRatePlanScheduleType) GetRateDate() string {
	if o == nil || IsNil(o.RateDate) {
		var ret string
		return ret
	}
	return *o.RateDate
}

// GetRateDateOk returns a tuple with the RateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyRatePlanScheduleType) GetRateDateOk() (*string, bool) {
	if o == nil || IsNil(o.RateDate) {
		return nil, false
	}
	return o.RateDate, true
}

// HasRateDate returns a boolean if a field has been set.
func (o *DailyRatePlanScheduleType) HasRateDate() bool {
	if o != nil && !IsNil(o.RateDate) {
		return true
	}

	return false
}

// SetRateDate gets a reference to the given string and assigns it to the RateDate field.
func (o *DailyRatePlanScheduleType) SetRateDate(v string) {
	o.RateDate = &v
}

// GetRatePlanCode returns the RatePlanCode field value if set, zero value otherwise.
func (o *DailyRatePlanScheduleType) GetRatePlanCode() string {
	if o == nil || IsNil(o.RatePlanCode) {
		var ret string
		return ret
	}
	return *o.RatePlanCode
}

// GetRatePlanCodeOk returns a tuple with the RatePlanCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyRatePlanScheduleType) GetRatePlanCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RatePlanCode) {
		return nil, false
	}
	return o.RatePlanCode, true
}

// HasRatePlanCode returns a boolean if a field has been set.
func (o *DailyRatePlanScheduleType) HasRatePlanCode() bool {
	if o != nil && !IsNil(o.RatePlanCode) {
		return true
	}

	return false
}

// SetRatePlanCode gets a reference to the given string and assigns it to the RatePlanCode field.
func (o *DailyRatePlanScheduleType) SetRatePlanCode(v string) {
	o.RatePlanCode = &v
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *DailyRatePlanScheduleType) GetRoomType() string {
	if o == nil || IsNil(o.RoomType) {
		var ret string
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyRatePlanScheduleType) GetRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *DailyRatePlanScheduleType) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given string and assigns it to the RoomType field.
func (o *DailyRatePlanScheduleType) SetRoomType(v string) {
	o.RoomType = &v
}

func (o DailyRatePlanScheduleType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DailyRatePlanScheduleType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RateAmounts) {
		toSerialize["rateAmounts"] = o.RateAmounts
	}
	if !IsNil(o.RateDate) {
		toSerialize["rateDate"] = o.RateDate
	}
	if !IsNil(o.RatePlanCode) {
		toSerialize["ratePlanCode"] = o.RatePlanCode
	}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	return toSerialize, nil
}

type NullableDailyRatePlanScheduleType struct {
	value *DailyRatePlanScheduleType
	isSet bool
}

func (v NullableDailyRatePlanScheduleType) Get() *DailyRatePlanScheduleType {
	return v.value
}

func (v *NullableDailyRatePlanScheduleType) Set(val *DailyRatePlanScheduleType) {
	v.value = val
	v.isSet = true
}

func (v NullableDailyRatePlanScheduleType) IsSet() bool {
	return v.isSet
}

func (v *NullableDailyRatePlanScheduleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDailyRatePlanScheduleType(val *DailyRatePlanScheduleType) *NullableDailyRatePlanScheduleType {
	return &NullableDailyRatePlanScheduleType{value: val, isSet: true}
}

func (v NullableDailyRatePlanScheduleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDailyRatePlanScheduleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


