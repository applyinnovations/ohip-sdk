/*
OPERA Cloud Room Rotation Configuration Service API

APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmrcfg

import (
	"encoding/json"
)

// checks if the CreateRoomOwnerDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRoomOwnerDetails{}

// CreateRoomOwnerDetails Request object for creating room ownership records.
type CreateRoomOwnerDetails struct {
	// Indicate to override the Owner Exclusive flag in room ownership records with overlapping dates
	OverrideOwnerExclusive *bool `json:"overrideOwnerExclusive,omitempty"`
	RoomOwner *RoomOwnershipType `json:"roomOwner,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewCreateRoomOwnerDetails instantiates a new CreateRoomOwnerDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRoomOwnerDetails() *CreateRoomOwnerDetails {
	this := CreateRoomOwnerDetails{}
	var overrideOwnerExclusive bool = false
	this.OverrideOwnerExclusive = &overrideOwnerExclusive
	return &this
}

// NewCreateRoomOwnerDetailsWithDefaults instantiates a new CreateRoomOwnerDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRoomOwnerDetailsWithDefaults() *CreateRoomOwnerDetails {
	this := CreateRoomOwnerDetails{}
	var overrideOwnerExclusive bool = false
	this.OverrideOwnerExclusive = &overrideOwnerExclusive
	return &this
}

// GetOverrideOwnerExclusive returns the OverrideOwnerExclusive field value if set, zero value otherwise.
func (o *CreateRoomOwnerDetails) GetOverrideOwnerExclusive() bool {
	if o == nil || IsNil(o.OverrideOwnerExclusive) {
		var ret bool
		return ret
	}
	return *o.OverrideOwnerExclusive
}

// GetOverrideOwnerExclusiveOk returns a tuple with the OverrideOwnerExclusive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRoomOwnerDetails) GetOverrideOwnerExclusiveOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideOwnerExclusive) {
		return nil, false
	}
	return o.OverrideOwnerExclusive, true
}

// HasOverrideOwnerExclusive returns a boolean if a field has been set.
func (o *CreateRoomOwnerDetails) HasOverrideOwnerExclusive() bool {
	if o != nil && !IsNil(o.OverrideOwnerExclusive) {
		return true
	}

	return false
}

// SetOverrideOwnerExclusive gets a reference to the given bool and assigns it to the OverrideOwnerExclusive field.
func (o *CreateRoomOwnerDetails) SetOverrideOwnerExclusive(v bool) {
	o.OverrideOwnerExclusive = &v
}

// GetRoomOwner returns the RoomOwner field value if set, zero value otherwise.
func (o *CreateRoomOwnerDetails) GetRoomOwner() RoomOwnershipType {
	if o == nil || IsNil(o.RoomOwner) {
		var ret RoomOwnershipType
		return ret
	}
	return *o.RoomOwner
}

// GetRoomOwnerOk returns a tuple with the RoomOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRoomOwnerDetails) GetRoomOwnerOk() (*RoomOwnershipType, bool) {
	if o == nil || IsNil(o.RoomOwner) {
		return nil, false
	}
	return o.RoomOwner, true
}

// HasRoomOwner returns a boolean if a field has been set.
func (o *CreateRoomOwnerDetails) HasRoomOwner() bool {
	if o != nil && !IsNil(o.RoomOwner) {
		return true
	}

	return false
}

// SetRoomOwner gets a reference to the given RoomOwnershipType and assigns it to the RoomOwner field.
func (o *CreateRoomOwnerDetails) SetRoomOwner(v RoomOwnershipType) {
	o.RoomOwner = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *CreateRoomOwnerDetails) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRoomOwnerDetails) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *CreateRoomOwnerDetails) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *CreateRoomOwnerDetails) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o CreateRoomOwnerDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRoomOwnerDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OverrideOwnerExclusive) {
		toSerialize["overrideOwnerExclusive"] = o.OverrideOwnerExclusive
	}
	if !IsNil(o.RoomOwner) {
		toSerialize["roomOwner"] = o.RoomOwner
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableCreateRoomOwnerDetails struct {
	value *CreateRoomOwnerDetails
	isSet bool
}

func (v NullableCreateRoomOwnerDetails) Get() *CreateRoomOwnerDetails {
	return v.value
}

func (v *NullableCreateRoomOwnerDetails) Set(val *CreateRoomOwnerDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRoomOwnerDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRoomOwnerDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRoomOwnerDetails(val *CreateRoomOwnerDetails) *NullableCreateRoomOwnerDetails {
	return &NullableCreateRoomOwnerDetails{value: val, isSet: true}
}

func (v NullableCreateRoomOwnerDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRoomOwnerDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


