/*
OPERA Cloud Room Rotation Configuration Service API

APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmrcfg

import (
	"encoding/json"
)

// checks if the RotationGroupsResultType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RotationGroupsResultType{}

// RotationGroupsResultType Defines collection of Room Rotation Groups.
type RotationGroupsResultType struct {
	RotationGroup []RotationGroupType `json:"rotationGroup,omitempty"`
	// Collection of Room Type Code Description.
	MasterInfo []MasterInfoType `json:"masterInfo,omitempty"`
}

// NewRotationGroupsResultType instantiates a new RotationGroupsResultType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRotationGroupsResultType() *RotationGroupsResultType {
	this := RotationGroupsResultType{}
	return &this
}

// NewRotationGroupsResultTypeWithDefaults instantiates a new RotationGroupsResultType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRotationGroupsResultTypeWithDefaults() *RotationGroupsResultType {
	this := RotationGroupsResultType{}
	return &this
}

// GetRotationGroup returns the RotationGroup field value if set, zero value otherwise.
func (o *RotationGroupsResultType) GetRotationGroup() []RotationGroupType {
	if o == nil || IsNil(o.RotationGroup) {
		var ret []RotationGroupType
		return ret
	}
	return o.RotationGroup
}

// GetRotationGroupOk returns a tuple with the RotationGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RotationGroupsResultType) GetRotationGroupOk() ([]RotationGroupType, bool) {
	if o == nil || IsNil(o.RotationGroup) {
		return nil, false
	}
	return o.RotationGroup, true
}

// HasRotationGroup returns a boolean if a field has been set.
func (o *RotationGroupsResultType) HasRotationGroup() bool {
	if o != nil && !IsNil(o.RotationGroup) {
		return true
	}

	return false
}

// SetRotationGroup gets a reference to the given []RotationGroupType and assigns it to the RotationGroup field.
func (o *RotationGroupsResultType) SetRotationGroup(v []RotationGroupType) {
	o.RotationGroup = v
}

// GetMasterInfo returns the MasterInfo field value if set, zero value otherwise.
func (o *RotationGroupsResultType) GetMasterInfo() []MasterInfoType {
	if o == nil || IsNil(o.MasterInfo) {
		var ret []MasterInfoType
		return ret
	}
	return o.MasterInfo
}

// GetMasterInfoOk returns a tuple with the MasterInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RotationGroupsResultType) GetMasterInfoOk() ([]MasterInfoType, bool) {
	if o == nil || IsNil(o.MasterInfo) {
		return nil, false
	}
	return o.MasterInfo, true
}

// HasMasterInfo returns a boolean if a field has been set.
func (o *RotationGroupsResultType) HasMasterInfo() bool {
	if o != nil && !IsNil(o.MasterInfo) {
		return true
	}

	return false
}

// SetMasterInfo gets a reference to the given []MasterInfoType and assigns it to the MasterInfo field.
func (o *RotationGroupsResultType) SetMasterInfo(v []MasterInfoType) {
	o.MasterInfo = v
}

func (o RotationGroupsResultType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RotationGroupsResultType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RotationGroup) {
		toSerialize["rotationGroup"] = o.RotationGroup
	}
	if !IsNil(o.MasterInfo) {
		toSerialize["masterInfo"] = o.MasterInfo
	}
	return toSerialize, nil
}

type NullableRotationGroupsResultType struct {
	value *RotationGroupsResultType
	isSet bool
}

func (v NullableRotationGroupsResultType) Get() *RotationGroupsResultType {
	return v.value
}

func (v *NullableRotationGroupsResultType) Set(val *RotationGroupsResultType) {
	v.value = val
	v.isSet = true
}

func (v NullableRotationGroupsResultType) IsSet() bool {
	return v.isSet
}

func (v *NullableRotationGroupsResultType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRotationGroupsResultType(val *RotationGroupsResultType) *NullableRotationGroupsResultType {
	return &NullableRotationGroupsResultType{value: val, isSet: true}
}

func (v NullableRotationGroupsResultType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRotationGroupsResultType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


