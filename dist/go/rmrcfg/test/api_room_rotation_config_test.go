/*
OPERA Cloud Room Rotation Configuration Service API

Testing RoomRotationConfigApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rmrcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/rmrcfg"
)

func Test_rmrcfg_RoomRotationConfigApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RoomRotationConfigApiService DeleteAdjustmentReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var adjustmentReasonsId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.DeleteAdjustmentReasons(context.Background(), adjustmentReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService DeleteOverrideReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var overrideReasonsId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.DeleteOverrideReasons(context.Background(), overrideReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService DeleteRoomOwner", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomOwnershipId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.DeleteRoomOwner(context.Background(), roomOwnershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService DeleteRoomOwnerReferral", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string
		var roomOwnerReferralId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.DeleteRoomOwnerReferral(context.Background(), profileId, roomOwnerReferralId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService DeleteRotationRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ruleId string
		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.DeleteRotationRules(context.Background(), ruleId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService DeleteUnitGrades", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var unitGradeCode string
		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.DeleteUnitGrades(context.Background(), unitGradeCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService GetAdjustmentReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RoomRotationConfigApi.GetAdjustmentReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService GetOverrideReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RoomRotationConfigApi.GetOverrideReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService GetProfileRoomOwners", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.GetProfileRoomOwners(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService GetRevenueTransactionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.GetRevenueTransactionCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService GetRoomOwnerReferrals", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.GetRoomOwnerReferrals(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService GetRotationPeriod", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.GetRotationPeriod(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService GetRotationRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.GetRotationRules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService GetUnitGrades", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.GetUnitGrades(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService PostAdjustmentReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RoomRotationConfigApi.PostAdjustmentReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService PostOverrideReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RoomRotationConfigApi.PostOverrideReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService PostRoomOwner", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RoomRotationConfigApi.PostRoomOwner(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService PostRoomOwnerReferrals", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.PostRoomOwnerReferrals(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService PostRoomRotationRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.PostRoomRotationRules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService PostRotationRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.PostRotationRules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService PostUnitGrades", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.PostUnitGrades(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService PutAdjustmentReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var adjustmentReasonsId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.PutAdjustmentReasons(context.Background(), adjustmentReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService PutOverrideReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var overrideReasonsId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.PutOverrideReasons(context.Background(), overrideReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService PutRevenueTransactionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.PutRevenueTransactionCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService PutRoomOwner", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RoomRotationConfigApi.PutRoomOwner(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService PutRoomOwnerReferral", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string
		var roomOwnerReferralId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.PutRoomOwnerReferral(context.Background(), profileId, roomOwnerReferralId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService PutRotationPeriod", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.PutRotationPeriod(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService PutRotationRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ruleId string
		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.PutRotationRules(context.Background(), ruleId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigApiService PutUnitGrades", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var unitGradeCode string
		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigApi.PutUnitGrades(context.Background(), unitGradeCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
