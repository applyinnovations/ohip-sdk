/*
OPERA Cloud Room Rotation Configuration Service API

Testing RoomRotationConfigAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rmrcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/rmrcfg"
)

func Test_rmrcfg_RoomRotationConfigAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RoomRotationConfigAPIService DeleteAdjustmentReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var adjustmentReasonsId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.DeleteAdjustmentReasons(context.Background(), adjustmentReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService DeleteOverrideReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var overrideReasonsId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.DeleteOverrideReasons(context.Background(), overrideReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService DeleteRoomOwner", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomOwnershipId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.DeleteRoomOwner(context.Background(), roomOwnershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService DeleteRoomOwnerReferral", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string
		var roomOwnerReferralId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.DeleteRoomOwnerReferral(context.Background(), profileId, roomOwnerReferralId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService DeleteRotationRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ruleId string
		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.DeleteRotationRules(context.Background(), ruleId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService DeleteUnitGrades", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var unitGradeCode string
		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.DeleteUnitGrades(context.Background(), unitGradeCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService GetAdjustmentReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.GetAdjustmentReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService GetOverrideReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.GetOverrideReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService GetProfileRoomOwners", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.GetProfileRoomOwners(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService GetRevenueTransactionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.GetRevenueTransactionCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService GetRoomOwnerReferrals", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.GetRoomOwnerReferrals(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService GetRotationPeriod", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.GetRotationPeriod(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService GetRotationRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.GetRotationRules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService GetUnitGrades", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.GetUnitGrades(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService PostAdjustmentReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.PostAdjustmentReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService PostOverrideReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.PostOverrideReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService PostRoomOwner", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.PostRoomOwner(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService PostRoomOwnerReferrals", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.PostRoomOwnerReferrals(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService PostRoomRotationRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.PostRoomRotationRules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService PostRotationRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.PostRotationRules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService PostUnitGrades", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.PostUnitGrades(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService PutAdjustmentReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var adjustmentReasonsId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.PutAdjustmentReasons(context.Background(), adjustmentReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService PutOverrideReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var overrideReasonsId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.PutOverrideReasons(context.Background(), overrideReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService PutRevenueTransactionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.PutRevenueTransactionCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService PutRoomOwner", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.PutRoomOwner(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService PutRoomOwnerReferral", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string
		var roomOwnerReferralId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.PutRoomOwnerReferral(context.Background(), profileId, roomOwnerReferralId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService PutRotationPeriod", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.PutRotationPeriod(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService PutRotationRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ruleId string
		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.PutRotationRules(context.Background(), ruleId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationConfigAPIService PutUnitGrades", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var unitGradeCode string
		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationConfigAPI.PutUnitGrades(context.Background(), unitGradeCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
