/*
OPERA Cloud Room Rotation Configuration Service API

APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmrcfg

import (
	"encoding/json"
)

// checks if the RotationRulesResultType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RotationRulesResultType{}

// RotationRulesResultType Collection of Room Rotation Rules Results.
type RotationRulesResultType struct {
	RotationRules *RotationRulesType `json:"rotationRules,omitempty"`
	// Collection of RateCodes, RoomTypes, Out of Order Reasons
	MasterInfo []MasterInfoType `json:"masterInfo,omitempty"`
	// Evaluated total page count based on the requested max fetch count.
	TotalPages *int32 `json:"totalPages,omitempty"`
	// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
	Offset *int32 `json:"offset,omitempty"`
	// Indicates maximum number of records a Web Service should return.
	Limit *int32 `json:"limit,omitempty"`
	// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
	HasMore *bool `json:"hasMore,omitempty"`
	// Total number of rows queried
	TotalResults *int32 `json:"totalResults,omitempty"`
	// Total number of rows returned
	Count *int32 `json:"count,omitempty"`
}

// NewRotationRulesResultType instantiates a new RotationRulesResultType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRotationRulesResultType() *RotationRulesResultType {
	this := RotationRulesResultType{}
	return &this
}

// NewRotationRulesResultTypeWithDefaults instantiates a new RotationRulesResultType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRotationRulesResultTypeWithDefaults() *RotationRulesResultType {
	this := RotationRulesResultType{}
	return &this
}

// GetRotationRules returns the RotationRules field value if set, zero value otherwise.
func (o *RotationRulesResultType) GetRotationRules() RotationRulesType {
	if o == nil || IsNil(o.RotationRules) {
		var ret RotationRulesType
		return ret
	}
	return *o.RotationRules
}

// GetRotationRulesOk returns a tuple with the RotationRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RotationRulesResultType) GetRotationRulesOk() (*RotationRulesType, bool) {
	if o == nil || IsNil(o.RotationRules) {
		return nil, false
	}
	return o.RotationRules, true
}

// HasRotationRules returns a boolean if a field has been set.
func (o *RotationRulesResultType) HasRotationRules() bool {
	if o != nil && !IsNil(o.RotationRules) {
		return true
	}

	return false
}

// SetRotationRules gets a reference to the given RotationRulesType and assigns it to the RotationRules field.
func (o *RotationRulesResultType) SetRotationRules(v RotationRulesType) {
	o.RotationRules = &v
}

// GetMasterInfo returns the MasterInfo field value if set, zero value otherwise.
func (o *RotationRulesResultType) GetMasterInfo() []MasterInfoType {
	if o == nil || IsNil(o.MasterInfo) {
		var ret []MasterInfoType
		return ret
	}
	return o.MasterInfo
}

// GetMasterInfoOk returns a tuple with the MasterInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RotationRulesResultType) GetMasterInfoOk() ([]MasterInfoType, bool) {
	if o == nil || IsNil(o.MasterInfo) {
		return nil, false
	}
	return o.MasterInfo, true
}

// HasMasterInfo returns a boolean if a field has been set.
func (o *RotationRulesResultType) HasMasterInfo() bool {
	if o != nil && !IsNil(o.MasterInfo) {
		return true
	}

	return false
}

// SetMasterInfo gets a reference to the given []MasterInfoType and assigns it to the MasterInfo field.
func (o *RotationRulesResultType) SetMasterInfo(v []MasterInfoType) {
	o.MasterInfo = v
}

// GetTotalPages returns the TotalPages field value if set, zero value otherwise.
func (o *RotationRulesResultType) GetTotalPages() int32 {
	if o == nil || IsNil(o.TotalPages) {
		var ret int32
		return ret
	}
	return *o.TotalPages
}

// GetTotalPagesOk returns a tuple with the TotalPages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RotationRulesResultType) GetTotalPagesOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalPages) {
		return nil, false
	}
	return o.TotalPages, true
}

// HasTotalPages returns a boolean if a field has been set.
func (o *RotationRulesResultType) HasTotalPages() bool {
	if o != nil && !IsNil(o.TotalPages) {
		return true
	}

	return false
}

// SetTotalPages gets a reference to the given int32 and assigns it to the TotalPages field.
func (o *RotationRulesResultType) SetTotalPages(v int32) {
	o.TotalPages = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *RotationRulesResultType) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RotationRulesResultType) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *RotationRulesResultType) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *RotationRulesResultType) SetOffset(v int32) {
	o.Offset = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *RotationRulesResultType) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RotationRulesResultType) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *RotationRulesResultType) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *RotationRulesResultType) SetLimit(v int32) {
	o.Limit = &v
}

// GetHasMore returns the HasMore field value if set, zero value otherwise.
func (o *RotationRulesResultType) GetHasMore() bool {
	if o == nil || IsNil(o.HasMore) {
		var ret bool
		return ret
	}
	return *o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RotationRulesResultType) GetHasMoreOk() (*bool, bool) {
	if o == nil || IsNil(o.HasMore) {
		return nil, false
	}
	return o.HasMore, true
}

// HasHasMore returns a boolean if a field has been set.
func (o *RotationRulesResultType) HasHasMore() bool {
	if o != nil && !IsNil(o.HasMore) {
		return true
	}

	return false
}

// SetHasMore gets a reference to the given bool and assigns it to the HasMore field.
func (o *RotationRulesResultType) SetHasMore(v bool) {
	o.HasMore = &v
}

// GetTotalResults returns the TotalResults field value if set, zero value otherwise.
func (o *RotationRulesResultType) GetTotalResults() int32 {
	if o == nil || IsNil(o.TotalResults) {
		var ret int32
		return ret
	}
	return *o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RotationRulesResultType) GetTotalResultsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalResults) {
		return nil, false
	}
	return o.TotalResults, true
}

// HasTotalResults returns a boolean if a field has been set.
func (o *RotationRulesResultType) HasTotalResults() bool {
	if o != nil && !IsNil(o.TotalResults) {
		return true
	}

	return false
}

// SetTotalResults gets a reference to the given int32 and assigns it to the TotalResults field.
func (o *RotationRulesResultType) SetTotalResults(v int32) {
	o.TotalResults = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *RotationRulesResultType) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RotationRulesResultType) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *RotationRulesResultType) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *RotationRulesResultType) SetCount(v int32) {
	o.Count = &v
}

func (o RotationRulesResultType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RotationRulesResultType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RotationRules) {
		toSerialize["rotationRules"] = o.RotationRules
	}
	if !IsNil(o.MasterInfo) {
		toSerialize["masterInfo"] = o.MasterInfo
	}
	if !IsNil(o.TotalPages) {
		toSerialize["totalPages"] = o.TotalPages
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.HasMore) {
		toSerialize["hasMore"] = o.HasMore
	}
	if !IsNil(o.TotalResults) {
		toSerialize["totalResults"] = o.TotalResults
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	return toSerialize, nil
}

type NullableRotationRulesResultType struct {
	value *RotationRulesResultType
	isSet bool
}

func (v NullableRotationRulesResultType) Get() *RotationRulesResultType {
	return v.value
}

func (v *NullableRotationRulesResultType) Set(val *RotationRulesResultType) {
	v.value = val
	v.isSet = true
}

func (v NullableRotationRulesResultType) IsSet() bool {
	return v.isSet
}

func (v *NullableRotationRulesResultType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRotationRulesResultType(val *RotationRulesResultType) *NullableRotationRulesResultType {
	return &NullableRotationRulesResultType{value: val, isSet: true}
}

func (v NullableRotationRulesResultType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRotationRulesResultType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


