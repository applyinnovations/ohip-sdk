/*
OPERA Cloud Room Rotation Configuration Service API

APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmrcfg

import (
	"encoding/json"
)

// checks if the FetchRotationPeriodResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FetchRotationPeriodResponse{}

// FetchRotationPeriodResponse Response Object for Fetch Rotation Period
type FetchRotationPeriodResponse struct {
	// Property code for Room Rotation Period.
	HotelId *string `json:"hotelId,omitempty"`
	// Represents Effective start date for the Room Rotation Period Setup.
	StartDate *string `json:"startDate,omitempty"`
	PeriodFrequency *RotationPeriodFrequencyType `json:"periodFrequency,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewFetchRotationPeriodResponse instantiates a new FetchRotationPeriodResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchRotationPeriodResponse() *FetchRotationPeriodResponse {
	this := FetchRotationPeriodResponse{}
	return &this
}

// NewFetchRotationPeriodResponseWithDefaults instantiates a new FetchRotationPeriodResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchRotationPeriodResponseWithDefaults() *FetchRotationPeriodResponse {
	this := FetchRotationPeriodResponse{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *FetchRotationPeriodResponse) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchRotationPeriodResponse) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *FetchRotationPeriodResponse) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *FetchRotationPeriodResponse) SetHotelId(v string) {
	o.HotelId = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *FetchRotationPeriodResponse) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchRotationPeriodResponse) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *FetchRotationPeriodResponse) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *FetchRotationPeriodResponse) SetStartDate(v string) {
	o.StartDate = &v
}

// GetPeriodFrequency returns the PeriodFrequency field value if set, zero value otherwise.
func (o *FetchRotationPeriodResponse) GetPeriodFrequency() RotationPeriodFrequencyType {
	if o == nil || IsNil(o.PeriodFrequency) {
		var ret RotationPeriodFrequencyType
		return ret
	}
	return *o.PeriodFrequency
}

// GetPeriodFrequencyOk returns a tuple with the PeriodFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchRotationPeriodResponse) GetPeriodFrequencyOk() (*RotationPeriodFrequencyType, bool) {
	if o == nil || IsNil(o.PeriodFrequency) {
		return nil, false
	}
	return o.PeriodFrequency, true
}

// HasPeriodFrequency returns a boolean if a field has been set.
func (o *FetchRotationPeriodResponse) HasPeriodFrequency() bool {
	if o != nil && !IsNil(o.PeriodFrequency) {
		return true
	}

	return false
}

// SetPeriodFrequency gets a reference to the given RotationPeriodFrequencyType and assigns it to the PeriodFrequency field.
func (o *FetchRotationPeriodResponse) SetPeriodFrequency(v RotationPeriodFrequencyType) {
	o.PeriodFrequency = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *FetchRotationPeriodResponse) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchRotationPeriodResponse) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *FetchRotationPeriodResponse) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *FetchRotationPeriodResponse) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *FetchRotationPeriodResponse) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchRotationPeriodResponse) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *FetchRotationPeriodResponse) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *FetchRotationPeriodResponse) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o FetchRotationPeriodResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FetchRotationPeriodResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.PeriodFrequency) {
		toSerialize["periodFrequency"] = o.PeriodFrequency
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableFetchRotationPeriodResponse struct {
	value *FetchRotationPeriodResponse
	isSet bool
}

func (v NullableFetchRotationPeriodResponse) Get() *FetchRotationPeriodResponse {
	return v.value
}

func (v *NullableFetchRotationPeriodResponse) Set(val *FetchRotationPeriodResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchRotationPeriodResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchRotationPeriodResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchRotationPeriodResponse(val *FetchRotationPeriodResponse) *NullableFetchRotationPeriodResponse {
	return &NullableFetchRotationPeriodResponse{value: val, isSet: true}
}

func (v NullableFetchRotationPeriodResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchRotationPeriodResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


