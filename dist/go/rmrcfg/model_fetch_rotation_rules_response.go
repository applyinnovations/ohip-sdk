/*
OPERA Cloud Room Rotation Configuration Service API

APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmrcfg

import (
	"encoding/json"
)

// checks if the FetchRotationRulesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FetchRotationRulesResponse{}

// FetchRotationRulesResponse Response object for retrieving rotation rules for a given property
type FetchRotationRulesResponse struct {
	RotationRulesResult *RotationRulesResultType `json:"rotationRulesResult,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewFetchRotationRulesResponse instantiates a new FetchRotationRulesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchRotationRulesResponse() *FetchRotationRulesResponse {
	this := FetchRotationRulesResponse{}
	return &this
}

// NewFetchRotationRulesResponseWithDefaults instantiates a new FetchRotationRulesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchRotationRulesResponseWithDefaults() *FetchRotationRulesResponse {
	this := FetchRotationRulesResponse{}
	return &this
}

// GetRotationRulesResult returns the RotationRulesResult field value if set, zero value otherwise.
func (o *FetchRotationRulesResponse) GetRotationRulesResult() RotationRulesResultType {
	if o == nil || IsNil(o.RotationRulesResult) {
		var ret RotationRulesResultType
		return ret
	}
	return *o.RotationRulesResult
}

// GetRotationRulesResultOk returns a tuple with the RotationRulesResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchRotationRulesResponse) GetRotationRulesResultOk() (*RotationRulesResultType, bool) {
	if o == nil || IsNil(o.RotationRulesResult) {
		return nil, false
	}
	return o.RotationRulesResult, true
}

// HasRotationRulesResult returns a boolean if a field has been set.
func (o *FetchRotationRulesResponse) HasRotationRulesResult() bool {
	if o != nil && !IsNil(o.RotationRulesResult) {
		return true
	}

	return false
}

// SetRotationRulesResult gets a reference to the given RotationRulesResultType and assigns it to the RotationRulesResult field.
func (o *FetchRotationRulesResponse) SetRotationRulesResult(v RotationRulesResultType) {
	o.RotationRulesResult = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *FetchRotationRulesResponse) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchRotationRulesResponse) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *FetchRotationRulesResponse) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *FetchRotationRulesResponse) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *FetchRotationRulesResponse) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchRotationRulesResponse) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *FetchRotationRulesResponse) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *FetchRotationRulesResponse) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o FetchRotationRulesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FetchRotationRulesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RotationRulesResult) {
		toSerialize["rotationRulesResult"] = o.RotationRulesResult
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableFetchRotationRulesResponse struct {
	value *FetchRotationRulesResponse
	isSet bool
}

func (v NullableFetchRotationRulesResponse) Get() *FetchRotationRulesResponse {
	return v.value
}

func (v *NullableFetchRotationRulesResponse) Set(val *FetchRotationRulesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchRotationRulesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchRotationRulesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchRotationRulesResponse(val *FetchRotationRulesResponse) *NullableFetchRotationRulesResponse {
	return &NullableFetchRotationRulesResponse{value: val, isSet: true}
}

func (v NullableFetchRotationRulesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchRotationRulesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


