/*
OPERA Cloud Room Rotation Configuration Service API

APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmrcfg

import (
	"encoding/json"
)

// checks if the RotationGroupType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RotationGroupType{}

// RotationGroupType Defines Room Rotation Group Details.
type RotationGroupType struct {
	// Hotel Code of Room Rotation Group.
	HotelId *string `json:"hotelId,omitempty"`
	// Room Rotation Group Code.
	GroupCode *string `json:"groupCode,omitempty"`
	Description *TranslationTextType2000 `json:"description,omitempty"`
	RoomTypes []string `json:"roomTypes,omitempty"`
}

// NewRotationGroupType instantiates a new RotationGroupType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRotationGroupType() *RotationGroupType {
	this := RotationGroupType{}
	return &this
}

// NewRotationGroupTypeWithDefaults instantiates a new RotationGroupType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRotationGroupTypeWithDefaults() *RotationGroupType {
	this := RotationGroupType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RotationGroupType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RotationGroupType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RotationGroupType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RotationGroupType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetGroupCode returns the GroupCode field value if set, zero value otherwise.
func (o *RotationGroupType) GetGroupCode() string {
	if o == nil || IsNil(o.GroupCode) {
		var ret string
		return ret
	}
	return *o.GroupCode
}

// GetGroupCodeOk returns a tuple with the GroupCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RotationGroupType) GetGroupCodeOk() (*string, bool) {
	if o == nil || IsNil(o.GroupCode) {
		return nil, false
	}
	return o.GroupCode, true
}

// HasGroupCode returns a boolean if a field has been set.
func (o *RotationGroupType) HasGroupCode() bool {
	if o != nil && !IsNil(o.GroupCode) {
		return true
	}

	return false
}

// SetGroupCode gets a reference to the given string and assigns it to the GroupCode field.
func (o *RotationGroupType) SetGroupCode(v string) {
	o.GroupCode = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RotationGroupType) GetDescription() TranslationTextType2000 {
	if o == nil || IsNil(o.Description) {
		var ret TranslationTextType2000
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RotationGroupType) GetDescriptionOk() (*TranslationTextType2000, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RotationGroupType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given TranslationTextType2000 and assigns it to the Description field.
func (o *RotationGroupType) SetDescription(v TranslationTextType2000) {
	o.Description = &v
}

// GetRoomTypes returns the RoomTypes field value if set, zero value otherwise.
func (o *RotationGroupType) GetRoomTypes() []string {
	if o == nil || IsNil(o.RoomTypes) {
		var ret []string
		return ret
	}
	return o.RoomTypes
}

// GetRoomTypesOk returns a tuple with the RoomTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RotationGroupType) GetRoomTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.RoomTypes) {
		return nil, false
	}
	return o.RoomTypes, true
}

// HasRoomTypes returns a boolean if a field has been set.
func (o *RotationGroupType) HasRoomTypes() bool {
	if o != nil && !IsNil(o.RoomTypes) {
		return true
	}

	return false
}

// SetRoomTypes gets a reference to the given []string and assigns it to the RoomTypes field.
func (o *RotationGroupType) SetRoomTypes(v []string) {
	o.RoomTypes = v
}

func (o RotationGroupType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RotationGroupType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.GroupCode) {
		toSerialize["groupCode"] = o.GroupCode
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.RoomTypes) {
		toSerialize["roomTypes"] = o.RoomTypes
	}
	return toSerialize, nil
}

type NullableRotationGroupType struct {
	value *RotationGroupType
	isSet bool
}

func (v NullableRotationGroupType) Get() *RotationGroupType {
	return v.value
}

func (v *NullableRotationGroupType) Set(val *RotationGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableRotationGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableRotationGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRotationGroupType(val *RotationGroupType) *NullableRotationGroupType {
	return &NullableRotationGroupType{value: val, isSet: true}
}

func (v NullableRotationGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRotationGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


