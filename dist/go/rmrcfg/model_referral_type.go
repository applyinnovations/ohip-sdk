/*
OPERA Cloud Room Rotation Configuration Service API

APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmrcfg

import (
	"encoding/json"
	"fmt"
)

// ReferralType Indicates the type of referral for a Profile to the Room Owner.
type ReferralType string

// List of referralType
const (
	REFERRALTYPE_OWNER ReferralType = "Owner"
	REFERRALTYPE_OWNER_REFERRAL ReferralType = "OwnerReferral"
)

// All allowed values of ReferralType enum
var AllowedReferralTypeEnumValues = []ReferralType{
	"Owner",
	"OwnerReferral",
}

func (v *ReferralType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReferralType(value)
	for _, existing := range AllowedReferralTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReferralType", value)
}

// NewReferralTypeFromValue returns a pointer to a valid ReferralType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReferralTypeFromValue(v string) (*ReferralType, error) {
	ev := ReferralType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReferralType: valid values are %v", v, AllowedReferralTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReferralType) IsValid() bool {
	for _, existing := range AllowedReferralTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to referralType value
func (v ReferralType) Ptr() *ReferralType {
	return &v
}

type NullableReferralType struct {
	value *ReferralType
	isSet bool
}

func (v NullableReferralType) Get() *ReferralType {
	return v.value
}

func (v *NullableReferralType) Set(val *ReferralType) {
	v.value = val
	v.isSet = true
}

func (v NullableReferralType) IsSet() bool {
	return v.isSet
}

func (v *NullableReferralType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReferralType(val *ReferralType) *NullableReferralType {
	return &NullableReferralType{value: val, isSet: true}
}

func (v NullableReferralType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReferralType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

