/*
OPERA Cloud Room Rotation Configuration Service API

APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmrcfg

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// RoomRotationConfigAPIService RoomRotationConfigAPI service
type RoomRotationConfigAPIService service

type RoomRotationConfigAPIDeleteAdjustmentReasonsRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	adjustmentReasonsId string
	authorization *string
	xAppKey *string
	xHotelid *string
	code *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIDeleteAdjustmentReasonsRequest) Authorization(authorization string) RoomRotationConfigAPIDeleteAdjustmentReasonsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIDeleteAdjustmentReasonsRequest) XAppKey(xAppKey string) RoomRotationConfigAPIDeleteAdjustmentReasonsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIDeleteAdjustmentReasonsRequest) XHotelid(xHotelid string) RoomRotationConfigAPIDeleteAdjustmentReasonsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Code of the Room Rotation Adjustment Reason.  Multiple values can be entered by adding multiple query parameters.
func (r RoomRotationConfigAPIDeleteAdjustmentReasonsRequest) Code(code []string) RoomRotationConfigAPIDeleteAdjustmentReasonsRequest {
	r.code = &code
	return r
}

// External system code.
func (r RoomRotationConfigAPIDeleteAdjustmentReasonsRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIDeleteAdjustmentReasonsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIDeleteAdjustmentReasonsRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIDeleteAdjustmentReasonsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIDeleteAdjustmentReasonsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteAdjustmentReasonsExecute(r)
}

/*
DeleteAdjustmentReasons Delete Room Rotation Adjustment Reasons

Use this API to delete Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>deleteAdjustmentReasons</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adjustmentReasonsId Unique ID of Room Rotation Adjustment Reason.
 @return RoomRotationConfigAPIDeleteAdjustmentReasonsRequest
*/
func (a *RoomRotationConfigAPIService) DeleteAdjustmentReasons(ctx context.Context, adjustmentReasonsId string) RoomRotationConfigAPIDeleteAdjustmentReasonsRequest {
	return RoomRotationConfigAPIDeleteAdjustmentReasonsRequest{
		ApiService: a,
		ctx: ctx,
		adjustmentReasonsId: adjustmentReasonsId,
	}
}

// Execute executes the request
//  @return Status
func (a *RoomRotationConfigAPIService) DeleteAdjustmentReasonsExecute(r RoomRotationConfigAPIDeleteAdjustmentReasonsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.DeleteAdjustmentReasons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/adjustmentReasons/{adjustmentReasonsId}"
	localVarPath = strings.Replace(localVarPath, "{"+"adjustmentReasonsId"+"}", url.PathEscape(parameterValueToString(r.adjustmentReasonsId, "adjustmentReasonsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.adjustmentReasonsId) < 1 {
		return localVarReturnValue, nil, reportError("adjustmentReasonsId must have at least 1 elements")
	}
	if strlen(r.adjustmentReasonsId) > 8 {
		return localVarReturnValue, nil, reportError("adjustmentReasonsId must have less than 8 elements")
	}

	if r.code != nil {
		t := *r.code
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "code", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "code", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIDeleteOverrideReasonsRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	overrideReasonsId string
	authorization *string
	xAppKey *string
	xHotelid *string
	code *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIDeleteOverrideReasonsRequest) Authorization(authorization string) RoomRotationConfigAPIDeleteOverrideReasonsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIDeleteOverrideReasonsRequest) XAppKey(xAppKey string) RoomRotationConfigAPIDeleteOverrideReasonsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIDeleteOverrideReasonsRequest) XHotelid(xHotelid string) RoomRotationConfigAPIDeleteOverrideReasonsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Code of the Room Rotation Override Reason.  Multiple values can be entered by adding multiple query parameters.
func (r RoomRotationConfigAPIDeleteOverrideReasonsRequest) Code(code []string) RoomRotationConfigAPIDeleteOverrideReasonsRequest {
	r.code = &code
	return r
}

// External system code.
func (r RoomRotationConfigAPIDeleteOverrideReasonsRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIDeleteOverrideReasonsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIDeleteOverrideReasonsRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIDeleteOverrideReasonsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIDeleteOverrideReasonsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteOverrideReasonsExecute(r)
}

/*
DeleteOverrideReasons Delete an existing Room Rotation Override Reason

Use this API to delete an existing Room Rotation Override Reason. <p><strong>OperationId:</strong>deleteOverrideReasons</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param overrideReasonsId Unique ID of Room Rotation Override Reason
 @return RoomRotationConfigAPIDeleteOverrideReasonsRequest
*/
func (a *RoomRotationConfigAPIService) DeleteOverrideReasons(ctx context.Context, overrideReasonsId string) RoomRotationConfigAPIDeleteOverrideReasonsRequest {
	return RoomRotationConfigAPIDeleteOverrideReasonsRequest{
		ApiService: a,
		ctx: ctx,
		overrideReasonsId: overrideReasonsId,
	}
}

// Execute executes the request
//  @return Status
func (a *RoomRotationConfigAPIService) DeleteOverrideReasonsExecute(r RoomRotationConfigAPIDeleteOverrideReasonsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.DeleteOverrideReasons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/overrideReasons/{overrideReasonsId}"
	localVarPath = strings.Replace(localVarPath, "{"+"overrideReasonsId"+"}", url.PathEscape(parameterValueToString(r.overrideReasonsId, "overrideReasonsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.overrideReasonsId) < 1 {
		return localVarReturnValue, nil, reportError("overrideReasonsId must have at least 1 elements")
	}
	if strlen(r.overrideReasonsId) > 8 {
		return localVarReturnValue, nil, reportError("overrideReasonsId must have less than 8 elements")
	}

	if r.code != nil {
		t := *r.code
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "code", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "code", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIDeleteRoomOwnerRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	roomOwnershipId string
	authorization *string
	xAppKey *string
	xHotelid *string
	overrideReferralCheck *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIDeleteRoomOwnerRequest) Authorization(authorization string) RoomRotationConfigAPIDeleteRoomOwnerRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIDeleteRoomOwnerRequest) XAppKey(xAppKey string) RoomRotationConfigAPIDeleteRoomOwnerRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIDeleteRoomOwnerRequest) XHotelid(xHotelid string) RoomRotationConfigAPIDeleteRoomOwnerRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicate to Override the Referral record Check if applicable.
func (r RoomRotationConfigAPIDeleteRoomOwnerRequest) OverrideReferralCheck(overrideReferralCheck bool) RoomRotationConfigAPIDeleteRoomOwnerRequest {
	r.overrideReferralCheck = &overrideReferralCheck
	return r
}

// External system code.
func (r RoomRotationConfigAPIDeleteRoomOwnerRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIDeleteRoomOwnerRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIDeleteRoomOwnerRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIDeleteRoomOwnerRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIDeleteRoomOwnerRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteRoomOwnerExecute(r)
}

/*
DeleteRoomOwner Delete Room Ownership Record

Use this API to delete Room Ownership Record. <p><strong>OperationId:</strong>deleteRoomOwner</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roomOwnershipId Unique Id for Room Ownership Record.
 @return RoomRotationConfigAPIDeleteRoomOwnerRequest
*/
func (a *RoomRotationConfigAPIService) DeleteRoomOwner(ctx context.Context, roomOwnershipId string) RoomRotationConfigAPIDeleteRoomOwnerRequest {
	return RoomRotationConfigAPIDeleteRoomOwnerRequest{
		ApiService: a,
		ctx: ctx,
		roomOwnershipId: roomOwnershipId,
	}
}

// Execute executes the request
//  @return Status
func (a *RoomRotationConfigAPIService) DeleteRoomOwnerExecute(r RoomRotationConfigAPIDeleteRoomOwnerRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.DeleteRoomOwner")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/roomOwners/{roomOwnershipId}"
	localVarPath = strings.Replace(localVarPath, "{"+"roomOwnershipId"+"}", url.PathEscape(parameterValueToString(r.roomOwnershipId, "roomOwnershipId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.roomOwnershipId) < 1 {
		return localVarReturnValue, nil, reportError("roomOwnershipId must have at least 1 elements")
	}
	if strlen(r.roomOwnershipId) > 2000 {
		return localVarReturnValue, nil, reportError("roomOwnershipId must have less than 2000 elements")
	}

	if r.overrideReferralCheck != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "overrideReferralCheck", r.overrideReferralCheck, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIDeleteRoomOwnerReferralRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	profileId string
	roomOwnerReferralId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIDeleteRoomOwnerReferralRequest) Authorization(authorization string) RoomRotationConfigAPIDeleteRoomOwnerReferralRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIDeleteRoomOwnerReferralRequest) XAppKey(xAppKey string) RoomRotationConfigAPIDeleteRoomOwnerReferralRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIDeleteRoomOwnerReferralRequest) XHotelid(xHotelid string) RoomRotationConfigAPIDeleteRoomOwnerReferralRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r RoomRotationConfigAPIDeleteRoomOwnerReferralRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIDeleteRoomOwnerReferralRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIDeleteRoomOwnerReferralRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIDeleteRoomOwnerReferralRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIDeleteRoomOwnerReferralRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteRoomOwnerReferralExecute(r)
}

/*
DeleteRoomOwnerReferral Delete Room Owner Referral Record

Use this API to delete Room Owner Referral Record. <p><strong>OperationId:</strong>deleteRoomOwnerReferral</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Unique ID of profile.
 @param roomOwnerReferralId Unique Room Owner Referral Record.
 @return RoomRotationConfigAPIDeleteRoomOwnerReferralRequest
*/
func (a *RoomRotationConfigAPIService) DeleteRoomOwnerReferral(ctx context.Context, profileId string, roomOwnerReferralId string) RoomRotationConfigAPIDeleteRoomOwnerReferralRequest {
	return RoomRotationConfigAPIDeleteRoomOwnerReferralRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		roomOwnerReferralId: roomOwnerReferralId,
	}
}

// Execute executes the request
//  @return Status
func (a *RoomRotationConfigAPIService) DeleteRoomOwnerReferralExecute(r RoomRotationConfigAPIDeleteRoomOwnerReferralRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.DeleteRoomOwnerReferral")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/roomOwnerReferrals/{roomOwnerReferralId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roomOwnerReferralId"+"}", url.PathEscape(parameterValueToString(r.roomOwnerReferralId, "roomOwnerReferralId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}
	if strlen(r.roomOwnerReferralId) < 1 {
		return localVarReturnValue, nil, reportError("roomOwnerReferralId must have at least 1 elements")
	}
	if strlen(r.roomOwnerReferralId) > 2000 {
		return localVarReturnValue, nil, reportError("roomOwnerReferralId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIDeleteRotationRulesRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	ruleId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIDeleteRotationRulesRequest) Authorization(authorization string) RoomRotationConfigAPIDeleteRotationRulesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIDeleteRotationRulesRequest) XAppKey(xAppKey string) RoomRotationConfigAPIDeleteRotationRulesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIDeleteRotationRulesRequest) XHotelid(xHotelid string) RoomRotationConfigAPIDeleteRotationRulesRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r RoomRotationConfigAPIDeleteRotationRulesRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIDeleteRotationRulesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIDeleteRotationRulesRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIDeleteRotationRulesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIDeleteRotationRulesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteRotationRulesExecute(r)
}

/*
DeleteRotationRules Delete an existing Room Rotation Rule

This API has been deprecated and will be replaced by <p><strong>OperationId:</strong>postRoomRotationRules</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ruleId Unique ID of Rotation Rule.
 @param hotelId Unique ID of hotel.
 @return RoomRotationConfigAPIDeleteRotationRulesRequest

Deprecated
*/
func (a *RoomRotationConfigAPIService) DeleteRotationRules(ctx context.Context, ruleId string, hotelId string) RoomRotationConfigAPIDeleteRotationRulesRequest {
	return RoomRotationConfigAPIDeleteRotationRulesRequest{
		ApiService: a,
		ctx: ctx,
		ruleId: ruleId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
// Deprecated
func (a *RoomRotationConfigAPIService) DeleteRotationRulesExecute(r RoomRotationConfigAPIDeleteRotationRulesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.DeleteRotationRules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rules/{ruleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ruleId"+"}", url.PathEscape(parameterValueToString(r.ruleId, "ruleId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ruleId) < 1 {
		return localVarReturnValue, nil, reportError("ruleId must have at least 1 elements")
	}
	if strlen(r.ruleId) > 2000 {
		return localVarReturnValue, nil, reportError("ruleId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIDeleteUnitGradesRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	unitGradeCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	code *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIDeleteUnitGradesRequest) Authorization(authorization string) RoomRotationConfigAPIDeleteUnitGradesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIDeleteUnitGradesRequest) XAppKey(xAppKey string) RoomRotationConfigAPIDeleteUnitGradesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIDeleteUnitGradesRequest) XHotelid(xHotelid string) RoomRotationConfigAPIDeleteUnitGradesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Owner Room Unit Grade Code.  Multiple values can be entered by adding multiple query parameters.
func (r RoomRotationConfigAPIDeleteUnitGradesRequest) Code(code []string) RoomRotationConfigAPIDeleteUnitGradesRequest {
	r.code = &code
	return r
}

// External system code.
func (r RoomRotationConfigAPIDeleteUnitGradesRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIDeleteUnitGradesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIDeleteUnitGradesRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIDeleteUnitGradesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIDeleteUnitGradesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteUnitGradesExecute(r)
}

/*
DeleteUnitGrades Delete an existing Room Rotation Owner Room Unit Grade

Use this API to delete an existing Room Rotation Owner Room Unit Grade. <p><strong>OperationId:</strong>deleteUnitGrades</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param unitGradeCode Unique Code of Owner Room Unit Grade.
 @param hotelId Unique ID of hotel.
 @return RoomRotationConfigAPIDeleteUnitGradesRequest
*/
func (a *RoomRotationConfigAPIService) DeleteUnitGrades(ctx context.Context, unitGradeCode string, hotelId string) RoomRotationConfigAPIDeleteUnitGradesRequest {
	return RoomRotationConfigAPIDeleteUnitGradesRequest{
		ApiService: a,
		ctx: ctx,
		unitGradeCode: unitGradeCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RoomRotationConfigAPIService) DeleteUnitGradesExecute(r RoomRotationConfigAPIDeleteUnitGradesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.DeleteUnitGrades")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/unitGrades/{unitGradeCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"unitGradeCode"+"}", url.PathEscape(parameterValueToString(r.unitGradeCode, "unitGradeCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.unitGradeCode) < 1 {
		return localVarReturnValue, nil, reportError("unitGradeCode must have at least 1 elements")
	}
	if strlen(r.unitGradeCode) > 8 {
		return localVarReturnValue, nil, reportError("unitGradeCode must have less than 8 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 20 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 20 elements")
	}

	if r.code != nil {
		t := *r.code
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "code", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "code", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIGetAdjustmentReasonsRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	fetchInactive *bool
	code *[]string
	wildCard *string
	description *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIGetAdjustmentReasonsRequest) Authorization(authorization string) RoomRotationConfigAPIGetAdjustmentReasonsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIGetAdjustmentReasonsRequest) XAppKey(xAppKey string) RoomRotationConfigAPIGetAdjustmentReasonsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIGetAdjustmentReasonsRequest) XHotelid(xHotelid string) RoomRotationConfigAPIGetAdjustmentReasonsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Determines wether to fetch inactive records or not.
func (r RoomRotationConfigAPIGetAdjustmentReasonsRequest) FetchInactive(fetchInactive bool) RoomRotationConfigAPIGetAdjustmentReasonsRequest {
	r.fetchInactive = &fetchInactive
	return r
}

// Rotation Adjustment Reason Codes to be searched.  Multiple values can be entered by adding multiple query parameters.
func (r RoomRotationConfigAPIGetAdjustmentReasonsRequest) Code(code []string) RoomRotationConfigAPIGetAdjustmentReasonsRequest {
	r.code = &code
	return r
}

// Wildcard search on the code.
func (r RoomRotationConfigAPIGetAdjustmentReasonsRequest) WildCard(wildCard string) RoomRotationConfigAPIGetAdjustmentReasonsRequest {
	r.wildCard = &wildCard
	return r
}

// Description of the code.
func (r RoomRotationConfigAPIGetAdjustmentReasonsRequest) Description(description string) RoomRotationConfigAPIGetAdjustmentReasonsRequest {
	r.description = &description
	return r
}

// External system code.
func (r RoomRotationConfigAPIGetAdjustmentReasonsRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIGetAdjustmentReasonsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIGetAdjustmentReasonsRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIGetAdjustmentReasonsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIGetAdjustmentReasonsRequest) Execute() (*FetchAdjustmentReasonsDetails, *http.Response, error) {
	return r.ApiService.GetAdjustmentReasonsExecute(r)
}

/*
GetAdjustmentReasons Get Room Rotation Adjustment Reasons

Use this API to get configured Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>getAdjustmentReasons</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RoomRotationConfigAPIGetAdjustmentReasonsRequest
*/
func (a *RoomRotationConfigAPIService) GetAdjustmentReasons(ctx context.Context) RoomRotationConfigAPIGetAdjustmentReasonsRequest {
	return RoomRotationConfigAPIGetAdjustmentReasonsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FetchAdjustmentReasonsDetails
func (a *RoomRotationConfigAPIService) GetAdjustmentReasonsExecute(r RoomRotationConfigAPIGetAdjustmentReasonsRequest) (*FetchAdjustmentReasonsDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchAdjustmentReasonsDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.GetAdjustmentReasons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/adjustmentReasons"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fetchInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInactive", r.fetchInactive, "")
  }
	if r.code != nil {
		t := *r.code
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "code", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "code", t, "multi")
		}
  }
	if r.wildCard != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wildCard", r.wildCard, "")
  }
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIGetOverrideReasonsRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	fetchInactive *bool
	code *[]string
	wildCard *string
	description *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIGetOverrideReasonsRequest) Authorization(authorization string) RoomRotationConfigAPIGetOverrideReasonsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIGetOverrideReasonsRequest) XAppKey(xAppKey string) RoomRotationConfigAPIGetOverrideReasonsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIGetOverrideReasonsRequest) XHotelid(xHotelid string) RoomRotationConfigAPIGetOverrideReasonsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Determines wether to fetch inactive records or not.
func (r RoomRotationConfigAPIGetOverrideReasonsRequest) FetchInactive(fetchInactive bool) RoomRotationConfigAPIGetOverrideReasonsRequest {
	r.fetchInactive = &fetchInactive
	return r
}

// Room Rotation Override Reason Codes to be searched.  Multiple values can be entered by adding multiple query parameters.
func (r RoomRotationConfigAPIGetOverrideReasonsRequest) Code(code []string) RoomRotationConfigAPIGetOverrideReasonsRequest {
	r.code = &code
	return r
}

// Wildcard search on the Room Rotation Override Reason code.
func (r RoomRotationConfigAPIGetOverrideReasonsRequest) WildCard(wildCard string) RoomRotationConfigAPIGetOverrideReasonsRequest {
	r.wildCard = &wildCard
	return r
}

// Description of the configured Room Rotation Override Reason.
func (r RoomRotationConfigAPIGetOverrideReasonsRequest) Description(description string) RoomRotationConfigAPIGetOverrideReasonsRequest {
	r.description = &description
	return r
}

// External system code.
func (r RoomRotationConfigAPIGetOverrideReasonsRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIGetOverrideReasonsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIGetOverrideReasonsRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIGetOverrideReasonsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIGetOverrideReasonsRequest) Execute() (*OverrideReasonsDetails, *http.Response, error) {
	return r.ApiService.GetOverrideReasonsExecute(r)
}

/*
GetOverrideReasons Get Room Rotation Override Reasons

Use this API to get configured Room Rotation Override Reasons <p><strong>OperationId:</strong>getOverrideReasons</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RoomRotationConfigAPIGetOverrideReasonsRequest
*/
func (a *RoomRotationConfigAPIService) GetOverrideReasons(ctx context.Context) RoomRotationConfigAPIGetOverrideReasonsRequest {
	return RoomRotationConfigAPIGetOverrideReasonsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OverrideReasonsDetails
func (a *RoomRotationConfigAPIService) GetOverrideReasonsExecute(r RoomRotationConfigAPIGetOverrideReasonsRequest) (*OverrideReasonsDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OverrideReasonsDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.GetOverrideReasons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/overrideReasons"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fetchInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInactive", r.fetchInactive, "")
  }
	if r.code != nil {
		t := *r.code
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "code", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "code", t, "multi")
		}
  }
	if r.wildCard != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wildCard", r.wildCard, "")
  }
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIGetProfileRoomOwnersRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	showInactiveRoomOwners *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIGetProfileRoomOwnersRequest) Authorization(authorization string) RoomRotationConfigAPIGetProfileRoomOwnersRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIGetProfileRoomOwnersRequest) XAppKey(xAppKey string) RoomRotationConfigAPIGetProfileRoomOwnersRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIGetProfileRoomOwnersRequest) XHotelid(xHotelid string) RoomRotationConfigAPIGetProfileRoomOwnersRequest {
	r.xHotelid = &xHotelid
	return r
}

// If set to True, Inactive Room Ownership Records will also be retrieved. Otherwise, only Active Room Ownership Records will be retrieved.
func (r RoomRotationConfigAPIGetProfileRoomOwnersRequest) ShowInactiveRoomOwners(showInactiveRoomOwners bool) RoomRotationConfigAPIGetProfileRoomOwnersRequest {
	r.showInactiveRoomOwners = &showInactiveRoomOwners
	return r
}

// External system code.
func (r RoomRotationConfigAPIGetProfileRoomOwnersRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIGetProfileRoomOwnersRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIGetProfileRoomOwnersRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIGetProfileRoomOwnersRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIGetProfileRoomOwnersRequest) Execute() (*RoomOwnershipDetails, *http.Response, error) {
	return r.ApiService.GetProfileRoomOwnersExecute(r)
}

/*
GetProfileRoomOwners Get Profile Room Ownership Records

Use this API to fetch profile Room Ownership Records. <p><strong>OperationId:</strong>getProfileRoomOwners</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Unique ID of profile.
 @return RoomRotationConfigAPIGetProfileRoomOwnersRequest
*/
func (a *RoomRotationConfigAPIService) GetProfileRoomOwners(ctx context.Context, profileId string) RoomRotationConfigAPIGetProfileRoomOwnersRequest {
	return RoomRotationConfigAPIGetProfileRoomOwnersRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return RoomOwnershipDetails
func (a *RoomRotationConfigAPIService) GetProfileRoomOwnersExecute(r RoomRotationConfigAPIGetProfileRoomOwnersRequest) (*RoomOwnershipDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RoomOwnershipDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.GetProfileRoomOwners")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/roomOwners"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.showInactiveRoomOwners != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showInactiveRoomOwners", r.showInactiveRoomOwners, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIGetRevenueTransactionCodesRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	rotationRevenue *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIGetRevenueTransactionCodesRequest) Authorization(authorization string) RoomRotationConfigAPIGetRevenueTransactionCodesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIGetRevenueTransactionCodesRequest) XAppKey(xAppKey string) RoomRotationConfigAPIGetRevenueTransactionCodesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIGetRevenueTransactionCodesRequest) XHotelid(xHotelid string) RoomRotationConfigAPIGetRevenueTransactionCodesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicate to retrieve transaction codes that are marked as Rotation Revenue transaction codes. If this value is omitted, all transaction codes will be returned for the given property.
func (r RoomRotationConfigAPIGetRevenueTransactionCodesRequest) RotationRevenue(rotationRevenue bool) RoomRotationConfigAPIGetRevenueTransactionCodesRequest {
	r.rotationRevenue = &rotationRevenue
	return r
}

// External system code.
func (r RoomRotationConfigAPIGetRevenueTransactionCodesRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIGetRevenueTransactionCodesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIGetRevenueTransactionCodesRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIGetRevenueTransactionCodesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIGetRevenueTransactionCodesRequest) Execute() (*FetchRevenueTransactionCodesDetails, *http.Response, error) {
	return r.ApiService.GetRevenueTransactionCodesExecute(r)
}

/*
GetRevenueTransactionCodes Retrieve all Room Rotation Revenue Transaction Codes

Use this API to retrieve all existing Room Rotation Revenue Transaction Codes for a given hotel. <p><strong>OperationId:</strong>getRevenueTransactionCodes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of hotel.
 @return RoomRotationConfigAPIGetRevenueTransactionCodesRequest
*/
func (a *RoomRotationConfigAPIService) GetRevenueTransactionCodes(ctx context.Context, hotelId string) RoomRotationConfigAPIGetRevenueTransactionCodesRequest {
	return RoomRotationConfigAPIGetRevenueTransactionCodesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return FetchRevenueTransactionCodesDetails
func (a *RoomRotationConfigAPIService) GetRevenueTransactionCodesExecute(r RoomRotationConfigAPIGetRevenueTransactionCodesRequest) (*FetchRevenueTransactionCodesDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchRevenueTransactionCodesDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.GetRevenueTransactionCodes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/revenueTransactionCodes"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 20 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 20 elements")
	}

	if r.rotationRevenue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rotationRevenue", r.rotationRevenue, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIGetRoomOwnerReferralsRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	includeInactive *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIGetRoomOwnerReferralsRequest) Authorization(authorization string) RoomRotationConfigAPIGetRoomOwnerReferralsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIGetRoomOwnerReferralsRequest) XAppKey(xAppKey string) RoomRotationConfigAPIGetRoomOwnerReferralsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIGetRoomOwnerReferralsRequest) XHotelid(xHotelid string) RoomRotationConfigAPIGetRoomOwnerReferralsRequest {
	r.xHotelid = &xHotelid
	return r
}

// If set to True, Inactive Room Owner Referrals will also be retrieved. Otherwise, only Active Room Owner Referrals details will be retrieved.
func (r RoomRotationConfigAPIGetRoomOwnerReferralsRequest) IncludeInactive(includeInactive bool) RoomRotationConfigAPIGetRoomOwnerReferralsRequest {
	r.includeInactive = &includeInactive
	return r
}

// External system code.
func (r RoomRotationConfigAPIGetRoomOwnerReferralsRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIGetRoomOwnerReferralsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIGetRoomOwnerReferralsRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIGetRoomOwnerReferralsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIGetRoomOwnerReferralsRequest) Execute() (*RoomOwnerReferralDetails, *http.Response, error) {
	return r.ApiService.GetRoomOwnerReferralsExecute(r)
}

/*
GetRoomOwnerReferrals Get Profile Owner Referral Records.

Use this API to fetch profile Owner Referral Records. <p><strong>OperationId:</strong>getRoomOwnerReferrals</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Unique ID of profile.
 @return RoomRotationConfigAPIGetRoomOwnerReferralsRequest
*/
func (a *RoomRotationConfigAPIService) GetRoomOwnerReferrals(ctx context.Context, profileId string) RoomRotationConfigAPIGetRoomOwnerReferralsRequest {
	return RoomRotationConfigAPIGetRoomOwnerReferralsRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return RoomOwnerReferralDetails
func (a *RoomRotationConfigAPIService) GetRoomOwnerReferralsExecute(r RoomRotationConfigAPIGetRoomOwnerReferralsRequest) (*RoomOwnerReferralDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RoomOwnerReferralDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.GetRoomOwnerReferrals")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/roomOwnerReferrals"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.includeInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInactive", r.includeInactive, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIGetRotationPeriodRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIGetRotationPeriodRequest) Authorization(authorization string) RoomRotationConfigAPIGetRotationPeriodRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIGetRotationPeriodRequest) XAppKey(xAppKey string) RoomRotationConfigAPIGetRotationPeriodRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIGetRotationPeriodRequest) XHotelid(xHotelid string) RoomRotationConfigAPIGetRotationPeriodRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r RoomRotationConfigAPIGetRotationPeriodRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIGetRotationPeriodRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIGetRotationPeriodRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIGetRotationPeriodRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIGetRotationPeriodRequest) Execute() (*FetchRotationPeriod, *http.Response, error) {
	return r.ApiService.GetRotationPeriodExecute(r)
}

/*
GetRotationPeriod Fetch Room Rotation Period

Use this API to fetch Room Rotation Period based on criteria. <p><strong>OperationId:</strong>getRotationPeriod</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of hotel.
 @return RoomRotationConfigAPIGetRotationPeriodRequest
*/
func (a *RoomRotationConfigAPIService) GetRotationPeriod(ctx context.Context, hotelId string) RoomRotationConfigAPIGetRotationPeriodRequest {
	return RoomRotationConfigAPIGetRotationPeriodRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return FetchRotationPeriod
func (a *RoomRotationConfigAPIService) GetRotationPeriodExecute(r RoomRotationConfigAPIGetRotationPeriodRequest) (*FetchRotationPeriod, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchRotationPeriod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.GetRotationPeriod")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rotationPeriod"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 20 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 20 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIGetRotationRulesRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	setupType *string
	inactiveRules *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIGetRotationRulesRequest) Authorization(authorization string) RoomRotationConfigAPIGetRotationRulesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIGetRotationRulesRequest) XAppKey(xAppKey string) RoomRotationConfigAPIGetRotationRulesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIGetRotationRulesRequest) XHotelid(xHotelid string) RoomRotationConfigAPIGetRotationRulesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RoomRotationConfigAPIGetRotationRulesRequest) Limit(limit int32) RoomRotationConfigAPIGetRotationRulesRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r RoomRotationConfigAPIGetRotationRulesRequest) Offset(offset int32) RoomRotationConfigAPIGetRotationRulesRequest {
	r.offset = &offset
	return r
}

// Simple type for Rotation Setup Rule(s).
func (r RoomRotationConfigAPIGetRotationRulesRequest) SetupType(setupType string) RoomRotationConfigAPIGetRotationRulesRequest {
	r.setupType = &setupType
	return r
}

// If set to True, only Inactive Rotation Setup Rules will be retrieved. Otherwise, only Active Rotation Setup Rules will be retrieved.
func (r RoomRotationConfigAPIGetRotationRulesRequest) InactiveRules(inactiveRules bool) RoomRotationConfigAPIGetRotationRulesRequest {
	r.inactiveRules = &inactiveRules
	return r
}

// External system code.
func (r RoomRotationConfigAPIGetRotationRulesRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIGetRotationRulesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIGetRotationRulesRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIGetRotationRulesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIGetRotationRulesRequest) Execute() (*FetchRotationRules, *http.Response, error) {
	return r.ApiService.GetRotationRulesExecute(r)
}

/*
GetRotationRules Retrieve all Room Rotation Setup Rules

Use this API to retrieve all existing Room Rotation Setup Rules based on criteria. <p><strong>OperationId:</strong>getRotationRules</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of hotel.
 @return RoomRotationConfigAPIGetRotationRulesRequest
*/
func (a *RoomRotationConfigAPIService) GetRotationRules(ctx context.Context, hotelId string) RoomRotationConfigAPIGetRotationRulesRequest {
	return RoomRotationConfigAPIGetRotationRulesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return FetchRotationRules
func (a *RoomRotationConfigAPIService) GetRotationRulesExecute(r RoomRotationConfigAPIGetRotationRulesRequest) (*FetchRotationRules, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchRotationRules
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.GetRotationRules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rules"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 20 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 20 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.setupType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "setupType", r.setupType, "")
  }
	if r.inactiveRules != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inactiveRules", r.inactiveRules, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIGetUnitGradesRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelIds *[]string
	fetchInactive *bool
	code *[]string
	wildCard *string
	description *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIGetUnitGradesRequest) Authorization(authorization string) RoomRotationConfigAPIGetUnitGradesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIGetUnitGradesRequest) XAppKey(xAppKey string) RoomRotationConfigAPIGetUnitGradesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIGetUnitGradesRequest) XHotelid(xHotelid string) RoomRotationConfigAPIGetUnitGradesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Unique ID(s) of hotel(s).
func (r RoomRotationConfigAPIGetUnitGradesRequest) HotelIds(hotelIds []string) RoomRotationConfigAPIGetUnitGradesRequest {
	r.hotelIds = &hotelIds
	return r
}

// Determines wether to fetch inactive records or not.
func (r RoomRotationConfigAPIGetUnitGradesRequest) FetchInactive(fetchInactive bool) RoomRotationConfigAPIGetUnitGradesRequest {
	r.fetchInactive = &fetchInactive
	return r
}

// Configured Owner Room Grade Codes to be searched.  Multiple values can be entered by adding multiple query parameters.
func (r RoomRotationConfigAPIGetUnitGradesRequest) Code(code []string) RoomRotationConfigAPIGetUnitGradesRequest {
	r.code = &code
	return r
}

// Wildcard search on Owner Room Grade Codes.
func (r RoomRotationConfigAPIGetUnitGradesRequest) WildCard(wildCard string) RoomRotationConfigAPIGetUnitGradesRequest {
	r.wildCard = &wildCard
	return r
}

// Description of Owner Room Grade Codes.
func (r RoomRotationConfigAPIGetUnitGradesRequest) Description(description string) RoomRotationConfigAPIGetUnitGradesRequest {
	r.description = &description
	return r
}

// External system code.
func (r RoomRotationConfigAPIGetUnitGradesRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIGetUnitGradesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIGetUnitGradesRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIGetUnitGradesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIGetUnitGradesRequest) Execute() (*FetchUnitGradesDetails, *http.Response, error) {
	return r.ApiService.GetUnitGradesExecute(r)
}

/*
GetUnitGrades Get Room Rotation Owner Room Grades

Use this API to Get Room Rotation Owner Room Grades. <p><strong>OperationId:</strong>getUnitGrades</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of hotel.
 @return RoomRotationConfigAPIGetUnitGradesRequest
*/
func (a *RoomRotationConfigAPIService) GetUnitGrades(ctx context.Context, hotelId string) RoomRotationConfigAPIGetUnitGradesRequest {
	return RoomRotationConfigAPIGetUnitGradesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return FetchUnitGradesDetails
func (a *RoomRotationConfigAPIService) GetUnitGradesExecute(r RoomRotationConfigAPIGetUnitGradesRequest) (*FetchUnitGradesDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchUnitGradesDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.GetUnitGrades")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/unitGrades"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 20 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 20 elements")
	}

	if r.hotelIds != nil {
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
  }
	if r.fetchInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInactive", r.fetchInactive, "")
  }
	if r.code != nil {
		t := *r.code
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "code", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "code", t, "multi")
		}
  }
	if r.wildCard != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wildCard", r.wildCard, "")
  }
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIPostAdjustmentReasonsRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	createAdjustmentReasonsDetails *CreateAdjustmentReasonsDetails
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIPostAdjustmentReasonsRequest) Authorization(authorization string) RoomRotationConfigAPIPostAdjustmentReasonsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIPostAdjustmentReasonsRequest) XAppKey(xAppKey string) RoomRotationConfigAPIPostAdjustmentReasonsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIPostAdjustmentReasonsRequest) XHotelid(xHotelid string) RoomRotationConfigAPIPostAdjustmentReasonsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating a new Room Rotation Adjustment Reason.
func (r RoomRotationConfigAPIPostAdjustmentReasonsRequest) CreateAdjustmentReasonsDetails(createAdjustmentReasonsDetails CreateAdjustmentReasonsDetails) RoomRotationConfigAPIPostAdjustmentReasonsRequest {
	r.createAdjustmentReasonsDetails = &createAdjustmentReasonsDetails
	return r
}

// External system code.
func (r RoomRotationConfigAPIPostAdjustmentReasonsRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIPostAdjustmentReasonsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIPostAdjustmentReasonsRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIPostAdjustmentReasonsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIPostAdjustmentReasonsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostAdjustmentReasonsExecute(r)
}

/*
PostAdjustmentReasons Post Room Rotation Adjustment Reasons

Use this API to post Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>postAdjustmentReasons</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RoomRotationConfigAPIPostAdjustmentReasonsRequest
*/
func (a *RoomRotationConfigAPIService) PostAdjustmentReasons(ctx context.Context) RoomRotationConfigAPIPostAdjustmentReasonsRequest {
	return RoomRotationConfigAPIPostAdjustmentReasonsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *RoomRotationConfigAPIService) PostAdjustmentReasonsExecute(r RoomRotationConfigAPIPostAdjustmentReasonsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.PostAdjustmentReasons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/adjustmentReasons"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.createAdjustmentReasonsDetails
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIPostOverrideReasonsRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	overrideReasonsCriteria *OverrideReasonsCriteria
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIPostOverrideReasonsRequest) Authorization(authorization string) RoomRotationConfigAPIPostOverrideReasonsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIPostOverrideReasonsRequest) XAppKey(xAppKey string) RoomRotationConfigAPIPostOverrideReasonsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIPostOverrideReasonsRequest) XHotelid(xHotelid string) RoomRotationConfigAPIPostOverrideReasonsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating a new Room Rotation Override Reason.
func (r RoomRotationConfigAPIPostOverrideReasonsRequest) OverrideReasonsCriteria(overrideReasonsCriteria OverrideReasonsCriteria) RoomRotationConfigAPIPostOverrideReasonsRequest {
	r.overrideReasonsCriteria = &overrideReasonsCriteria
	return r
}

// External system code.
func (r RoomRotationConfigAPIPostOverrideReasonsRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIPostOverrideReasonsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIPostOverrideReasonsRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIPostOverrideReasonsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIPostOverrideReasonsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostOverrideReasonsExecute(r)
}

/*
PostOverrideReasons Create a new Room Rotation Override Reason

Use this API to create a new Room Rotation Override Reason. <p><strong>OperationId:</strong>postOverrideReasons</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RoomRotationConfigAPIPostOverrideReasonsRequest
*/
func (a *RoomRotationConfigAPIService) PostOverrideReasons(ctx context.Context) RoomRotationConfigAPIPostOverrideReasonsRequest {
	return RoomRotationConfigAPIPostOverrideReasonsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *RoomRotationConfigAPIService) PostOverrideReasonsExecute(r RoomRotationConfigAPIPostOverrideReasonsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.PostOverrideReasons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/overrideReasons"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.overrideReasonsCriteria
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIPostRoomOwnerRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	createRoomOwnerDetails *CreateRoomOwnerDetails
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIPostRoomOwnerRequest) Authorization(authorization string) RoomRotationConfigAPIPostRoomOwnerRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIPostRoomOwnerRequest) XAppKey(xAppKey string) RoomRotationConfigAPIPostRoomOwnerRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIPostRoomOwnerRequest) XHotelid(xHotelid string) RoomRotationConfigAPIPostRoomOwnerRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating room ownership record..
func (r RoomRotationConfigAPIPostRoomOwnerRequest) CreateRoomOwnerDetails(createRoomOwnerDetails CreateRoomOwnerDetails) RoomRotationConfigAPIPostRoomOwnerRequest {
	r.createRoomOwnerDetails = &createRoomOwnerDetails
	return r
}

// External system code.
func (r RoomRotationConfigAPIPostRoomOwnerRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIPostRoomOwnerRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIPostRoomOwnerRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIPostRoomOwnerRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIPostRoomOwnerRequest) Execute() (*RoomOwnershipDetails, *http.Response, error) {
	return r.ApiService.PostRoomOwnerExecute(r)
}

/*
PostRoomOwner Create Room Ownership Record

Use this API to create Create Room Ownership Record. <p><strong>OperationId:</strong>postRoomOwner</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RoomRotationConfigAPIPostRoomOwnerRequest
*/
func (a *RoomRotationConfigAPIService) PostRoomOwner(ctx context.Context) RoomRotationConfigAPIPostRoomOwnerRequest {
	return RoomRotationConfigAPIPostRoomOwnerRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RoomOwnershipDetails
func (a *RoomRotationConfigAPIService) PostRoomOwnerExecute(r RoomRotationConfigAPIPostRoomOwnerRequest) (*RoomOwnershipDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RoomOwnershipDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.PostRoomOwner")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/roomOwners"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.createRoomOwnerDetails
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIPostRoomOwnerReferralsRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	createRoomOwnerReferralDetails *CreateRoomOwnerReferralDetails
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIPostRoomOwnerReferralsRequest) Authorization(authorization string) RoomRotationConfigAPIPostRoomOwnerReferralsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIPostRoomOwnerReferralsRequest) XAppKey(xAppKey string) RoomRotationConfigAPIPostRoomOwnerReferralsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIPostRoomOwnerReferralsRequest) XHotelid(xHotelid string) RoomRotationConfigAPIPostRoomOwnerReferralsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating room owner referrals.
func (r RoomRotationConfigAPIPostRoomOwnerReferralsRequest) CreateRoomOwnerReferralDetails(createRoomOwnerReferralDetails CreateRoomOwnerReferralDetails) RoomRotationConfigAPIPostRoomOwnerReferralsRequest {
	r.createRoomOwnerReferralDetails = &createRoomOwnerReferralDetails
	return r
}

// External system code.
func (r RoomRotationConfigAPIPostRoomOwnerReferralsRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIPostRoomOwnerReferralsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIPostRoomOwnerReferralsRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIPostRoomOwnerReferralsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIPostRoomOwnerReferralsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostRoomOwnerReferralsExecute(r)
}

/*
PostRoomOwnerReferrals Create Room Owner Referrals

Use this API to create multiple Room Owner Referral Records. <p><strong>OperationId:</strong>postRoomOwnerReferrals</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Unique ID of profile.
 @return RoomRotationConfigAPIPostRoomOwnerReferralsRequest
*/
func (a *RoomRotationConfigAPIService) PostRoomOwnerReferrals(ctx context.Context, profileId string) RoomRotationConfigAPIPostRoomOwnerReferralsRequest {
	return RoomRotationConfigAPIPostRoomOwnerReferralsRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Status
func (a *RoomRotationConfigAPIService) PostRoomOwnerReferralsExecute(r RoomRotationConfigAPIPostRoomOwnerReferralsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.PostRoomOwnerReferrals")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/roomOwnerReferrals"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.createRoomOwnerReferralDetails
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIPostRoomRotationRulesRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	rotationRules *RoomRotationRules
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIPostRoomRotationRulesRequest) Authorization(authorization string) RoomRotationConfigAPIPostRoomRotationRulesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIPostRoomRotationRulesRequest) XAppKey(xAppKey string) RoomRotationConfigAPIPostRoomRotationRulesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIPostRoomRotationRulesRequest) XHotelid(xHotelid string) RoomRotationConfigAPIPostRoomRotationRulesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for saving changes to room rotation setup rules.
func (r RoomRotationConfigAPIPostRoomRotationRulesRequest) RotationRules(rotationRules RoomRotationRules) RoomRotationConfigAPIPostRoomRotationRulesRequest {
	r.rotationRules = &rotationRules
	return r
}

// External system code.
func (r RoomRotationConfigAPIPostRoomRotationRulesRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIPostRoomRotationRulesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIPostRoomRotationRulesRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIPostRoomRotationRulesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIPostRoomRotationRulesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostRoomRotationRulesExecute(r)
}

/*
PostRoomRotationRules Save changes to Rotation Setup Rules and recalculate Rotation Points

This operation will create/update/delete Rotation Setup Rules sent in the request and then recalculate rotation points.  <p><strong>OperationId:</strong>postRoomRotationRules</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of hotel.
 @return RoomRotationConfigAPIPostRoomRotationRulesRequest
*/
func (a *RoomRotationConfigAPIService) PostRoomRotationRules(ctx context.Context, hotelId string) RoomRotationConfigAPIPostRoomRotationRulesRequest {
	return RoomRotationConfigAPIPostRoomRotationRulesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RoomRotationConfigAPIService) PostRoomRotationRulesExecute(r RoomRotationConfigAPIPostRoomRotationRulesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.PostRoomRotationRules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rotationRules"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 20 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 20 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.rotationRules
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIPostRotationRulesRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	rotationRules *RotationRules
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIPostRotationRulesRequest) Authorization(authorization string) RoomRotationConfigAPIPostRotationRulesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIPostRotationRulesRequest) XAppKey(xAppKey string) RoomRotationConfigAPIPostRotationRulesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIPostRotationRulesRequest) XHotelid(xHotelid string) RoomRotationConfigAPIPostRotationRulesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating Rotation Rules for a given property
func (r RoomRotationConfigAPIPostRotationRulesRequest) RotationRules(rotationRules RotationRules) RoomRotationConfigAPIPostRotationRulesRequest {
	r.rotationRules = &rotationRules
	return r
}

// External system code.
func (r RoomRotationConfigAPIPostRotationRulesRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIPostRotationRulesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIPostRotationRulesRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIPostRotationRulesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIPostRotationRulesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostRotationRulesExecute(r)
}

/*
PostRotationRules Create Room Rotation Rules

This API has been deprecated and will be replaced by <p><strong>OperationId:</strong>postRoomRotationRules</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of hotel.
 @return RoomRotationConfigAPIPostRotationRulesRequest

Deprecated
*/
func (a *RoomRotationConfigAPIService) PostRotationRules(ctx context.Context, hotelId string) RoomRotationConfigAPIPostRotationRulesRequest {
	return RoomRotationConfigAPIPostRotationRulesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
// Deprecated
func (a *RoomRotationConfigAPIService) PostRotationRulesExecute(r RoomRotationConfigAPIPostRotationRulesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.PostRotationRules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rules"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.rotationRules
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIPostUnitGradesRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	createUnitGradesDetails *CreateUnitGradesDetails
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIPostUnitGradesRequest) Authorization(authorization string) RoomRotationConfigAPIPostUnitGradesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIPostUnitGradesRequest) XAppKey(xAppKey string) RoomRotationConfigAPIPostUnitGradesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIPostUnitGradesRequest) XHotelid(xHotelid string) RoomRotationConfigAPIPostUnitGradesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating a new Room Rotation Owner Room Unit Grade.
func (r RoomRotationConfigAPIPostUnitGradesRequest) CreateUnitGradesDetails(createUnitGradesDetails CreateUnitGradesDetails) RoomRotationConfigAPIPostUnitGradesRequest {
	r.createUnitGradesDetails = &createUnitGradesDetails
	return r
}

// External system code.
func (r RoomRotationConfigAPIPostUnitGradesRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIPostUnitGradesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIPostUnitGradesRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIPostUnitGradesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIPostUnitGradesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostUnitGradesExecute(r)
}

/*
PostUnitGrades Create a new Room Rotation Owner Room Grade Code

Use this API to create a new Room Rotation Owner Room Grade Code. <p><strong>OperationId:</strong>postUnitGrades</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of hotel.
 @return RoomRotationConfigAPIPostUnitGradesRequest
*/
func (a *RoomRotationConfigAPIService) PostUnitGrades(ctx context.Context, hotelId string) RoomRotationConfigAPIPostUnitGradesRequest {
	return RoomRotationConfigAPIPostUnitGradesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RoomRotationConfigAPIService) PostUnitGradesExecute(r RoomRotationConfigAPIPostUnitGradesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.PostUnitGrades")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/unitGrades"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 20 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 20 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.createUnitGradesDetails
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIPutAdjustmentReasonsRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	adjustmentReasonsId string
	authorization *string
	xAppKey *string
	xHotelid *string
	changeAdjustmentReasonsDetails *ChangeAdjustmentReasonsDetails
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIPutAdjustmentReasonsRequest) Authorization(authorization string) RoomRotationConfigAPIPutAdjustmentReasonsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIPutAdjustmentReasonsRequest) XAppKey(xAppKey string) RoomRotationConfigAPIPutAdjustmentReasonsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIPutAdjustmentReasonsRequest) XHotelid(xHotelid string) RoomRotationConfigAPIPutAdjustmentReasonsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for changing an existing Room Rotation Adjustment Reasons.
func (r RoomRotationConfigAPIPutAdjustmentReasonsRequest) ChangeAdjustmentReasonsDetails(changeAdjustmentReasonsDetails ChangeAdjustmentReasonsDetails) RoomRotationConfigAPIPutAdjustmentReasonsRequest {
	r.changeAdjustmentReasonsDetails = &changeAdjustmentReasonsDetails
	return r
}

// External system code.
func (r RoomRotationConfigAPIPutAdjustmentReasonsRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIPutAdjustmentReasonsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIPutAdjustmentReasonsRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIPutAdjustmentReasonsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIPutAdjustmentReasonsRequest) Execute() (*AdjustmentReasonsDetailsUpdated, *http.Response, error) {
	return r.ApiService.PutAdjustmentReasonsExecute(r)
}

/*
PutAdjustmentReasons Update Room Rotation Adjustment Reasons

Use this API to update Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>putAdjustmentReasons</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adjustmentReasonsId Unique ID of Room Rotation Adjustment Reason
 @return RoomRotationConfigAPIPutAdjustmentReasonsRequest
*/
func (a *RoomRotationConfigAPIService) PutAdjustmentReasons(ctx context.Context, adjustmentReasonsId string) RoomRotationConfigAPIPutAdjustmentReasonsRequest {
	return RoomRotationConfigAPIPutAdjustmentReasonsRequest{
		ApiService: a,
		ctx: ctx,
		adjustmentReasonsId: adjustmentReasonsId,
	}
}

// Execute executes the request
//  @return AdjustmentReasonsDetailsUpdated
func (a *RoomRotationConfigAPIService) PutAdjustmentReasonsExecute(r RoomRotationConfigAPIPutAdjustmentReasonsRequest) (*AdjustmentReasonsDetailsUpdated, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdjustmentReasonsDetailsUpdated
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.PutAdjustmentReasons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/adjustmentReasons/{adjustmentReasonsId}"
	localVarPath = strings.Replace(localVarPath, "{"+"adjustmentReasonsId"+"}", url.PathEscape(parameterValueToString(r.adjustmentReasonsId, "adjustmentReasonsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.adjustmentReasonsId) < 1 {
		return localVarReturnValue, nil, reportError("adjustmentReasonsId must have at least 1 elements")
	}
	if strlen(r.adjustmentReasonsId) > 8 {
		return localVarReturnValue, nil, reportError("adjustmentReasonsId must have less than 8 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.changeAdjustmentReasonsDetails
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIPutOverrideReasonsRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	overrideReasonsId string
	authorization *string
	xAppKey *string
	xHotelid *string
	overrideReasonsToBeChanged *OverrideReasonsToBeChanged
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIPutOverrideReasonsRequest) Authorization(authorization string) RoomRotationConfigAPIPutOverrideReasonsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIPutOverrideReasonsRequest) XAppKey(xAppKey string) RoomRotationConfigAPIPutOverrideReasonsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIPutOverrideReasonsRequest) XHotelid(xHotelid string) RoomRotationConfigAPIPutOverrideReasonsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for changing an existing Room Rotation Override Reason.
func (r RoomRotationConfigAPIPutOverrideReasonsRequest) OverrideReasonsToBeChanged(overrideReasonsToBeChanged OverrideReasonsToBeChanged) RoomRotationConfigAPIPutOverrideReasonsRequest {
	r.overrideReasonsToBeChanged = &overrideReasonsToBeChanged
	return r
}

// External system code.
func (r RoomRotationConfigAPIPutOverrideReasonsRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIPutOverrideReasonsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIPutOverrideReasonsRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIPutOverrideReasonsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIPutOverrideReasonsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutOverrideReasonsExecute(r)
}

/*
PutOverrideReasons Change an existing Room Rotation Override Reason

Use this API to update an existing Room Rotation Override Reason. <p><strong>OperationId:</strong>putOverrideReasons</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param overrideReasonsId Unique ID of Room Rotation Override Reason
 @return RoomRotationConfigAPIPutOverrideReasonsRequest
*/
func (a *RoomRotationConfigAPIService) PutOverrideReasons(ctx context.Context, overrideReasonsId string) RoomRotationConfigAPIPutOverrideReasonsRequest {
	return RoomRotationConfigAPIPutOverrideReasonsRequest{
		ApiService: a,
		ctx: ctx,
		overrideReasonsId: overrideReasonsId,
	}
}

// Execute executes the request
//  @return Status
func (a *RoomRotationConfigAPIService) PutOverrideReasonsExecute(r RoomRotationConfigAPIPutOverrideReasonsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.PutOverrideReasons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/overrideReasons/{overrideReasonsId}"
	localVarPath = strings.Replace(localVarPath, "{"+"overrideReasonsId"+"}", url.PathEscape(parameterValueToString(r.overrideReasonsId, "overrideReasonsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.overrideReasonsId) < 1 {
		return localVarReturnValue, nil, reportError("overrideReasonsId must have at least 1 elements")
	}
	if strlen(r.overrideReasonsId) > 8 {
		return localVarReturnValue, nil, reportError("overrideReasonsId must have less than 8 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.overrideReasonsToBeChanged
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIPutRevenueTransactionCodesRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	changeRevenueTransactionCodesCriteria *ChangeRevenueTransactionCodesCriteria
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIPutRevenueTransactionCodesRequest) Authorization(authorization string) RoomRotationConfigAPIPutRevenueTransactionCodesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIPutRevenueTransactionCodesRequest) XAppKey(xAppKey string) RoomRotationConfigAPIPutRevenueTransactionCodesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIPutRevenueTransactionCodesRequest) XHotelid(xHotelid string) RoomRotationConfigAPIPutRevenueTransactionCodesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for updating the rotation revenue status of a transaction code for a given property.
func (r RoomRotationConfigAPIPutRevenueTransactionCodesRequest) ChangeRevenueTransactionCodesCriteria(changeRevenueTransactionCodesCriteria ChangeRevenueTransactionCodesCriteria) RoomRotationConfigAPIPutRevenueTransactionCodesRequest {
	r.changeRevenueTransactionCodesCriteria = &changeRevenueTransactionCodesCriteria
	return r
}

// External system code.
func (r RoomRotationConfigAPIPutRevenueTransactionCodesRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIPutRevenueTransactionCodesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIPutRevenueTransactionCodesRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIPutRevenueTransactionCodesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIPutRevenueTransactionCodesRequest) Execute() (*ChangeRevenueTransactionCodesDetails, *http.Response, error) {
	return r.ApiService.PutRevenueTransactionCodesExecute(r)
}

/*
PutRevenueTransactionCodes Update the room rotation revenue status of a set of transaction codes

Use this API to update the room rotation revenue status of a set of transaction codes. <p><strong>OperationId:</strong>putRevenueTransactionCodes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of hotel.
 @return RoomRotationConfigAPIPutRevenueTransactionCodesRequest
*/
func (a *RoomRotationConfigAPIService) PutRevenueTransactionCodes(ctx context.Context, hotelId string) RoomRotationConfigAPIPutRevenueTransactionCodesRequest {
	return RoomRotationConfigAPIPutRevenueTransactionCodesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ChangeRevenueTransactionCodesDetails
func (a *RoomRotationConfigAPIService) PutRevenueTransactionCodesExecute(r RoomRotationConfigAPIPutRevenueTransactionCodesRequest) (*ChangeRevenueTransactionCodesDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangeRevenueTransactionCodesDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.PutRevenueTransactionCodes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/revenueTransactionCodes"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 20 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 20 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.changeRevenueTransactionCodesCriteria
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIPutRoomOwnerRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	changeRoomOwnerDetails *ChangeRoomOwnerDetails
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIPutRoomOwnerRequest) Authorization(authorization string) RoomRotationConfigAPIPutRoomOwnerRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIPutRoomOwnerRequest) XAppKey(xAppKey string) RoomRotationConfigAPIPutRoomOwnerRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIPutRoomOwnerRequest) XHotelid(xHotelid string) RoomRotationConfigAPIPutRoomOwnerRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for changing room ownership record.
func (r RoomRotationConfigAPIPutRoomOwnerRequest) ChangeRoomOwnerDetails(changeRoomOwnerDetails ChangeRoomOwnerDetails) RoomRotationConfigAPIPutRoomOwnerRequest {
	r.changeRoomOwnerDetails = &changeRoomOwnerDetails
	return r
}

// External system code.
func (r RoomRotationConfigAPIPutRoomOwnerRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIPutRoomOwnerRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIPutRoomOwnerRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIPutRoomOwnerRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIPutRoomOwnerRequest) Execute() (*RoomOwnershipDetails, *http.Response, error) {
	return r.ApiService.PutRoomOwnerExecute(r)
}

/*
PutRoomOwner Change Room Ownership Records

Use this API to update Multiple Room Ownership Records across properties. <p><strong>OperationId:</strong>putRoomOwner</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RoomRotationConfigAPIPutRoomOwnerRequest
*/
func (a *RoomRotationConfigAPIService) PutRoomOwner(ctx context.Context) RoomRotationConfigAPIPutRoomOwnerRequest {
	return RoomRotationConfigAPIPutRoomOwnerRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RoomOwnershipDetails
func (a *RoomRotationConfigAPIService) PutRoomOwnerExecute(r RoomRotationConfigAPIPutRoomOwnerRequest) (*RoomOwnershipDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RoomOwnershipDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.PutRoomOwner")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/roomOwners"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.changeRoomOwnerDetails
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIPutRoomOwnerReferralRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	profileId string
	roomOwnerReferralId string
	authorization *string
	xAppKey *string
	xHotelid *string
	changeRoomOwnerReferralDetails *ChangeRoomOwnerReferralDetails
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIPutRoomOwnerReferralRequest) Authorization(authorization string) RoomRotationConfigAPIPutRoomOwnerReferralRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIPutRoomOwnerReferralRequest) XAppKey(xAppKey string) RoomRotationConfigAPIPutRoomOwnerReferralRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIPutRoomOwnerReferralRequest) XHotelid(xHotelid string) RoomRotationConfigAPIPutRoomOwnerReferralRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for changing room owner referral record.
func (r RoomRotationConfigAPIPutRoomOwnerReferralRequest) ChangeRoomOwnerReferralDetails(changeRoomOwnerReferralDetails ChangeRoomOwnerReferralDetails) RoomRotationConfigAPIPutRoomOwnerReferralRequest {
	r.changeRoomOwnerReferralDetails = &changeRoomOwnerReferralDetails
	return r
}

// External system code.
func (r RoomRotationConfigAPIPutRoomOwnerReferralRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIPutRoomOwnerReferralRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIPutRoomOwnerReferralRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIPutRoomOwnerReferralRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIPutRoomOwnerReferralRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutRoomOwnerReferralExecute(r)
}

/*
PutRoomOwnerReferral Change Room Owner Referral Record

Use this API to update Room Owner Referral Record. <p><strong>OperationId:</strong>putRoomOwnerReferral</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Unique ID of profile.
 @param roomOwnerReferralId Unique Room Owner Referral Record.
 @return RoomRotationConfigAPIPutRoomOwnerReferralRequest
*/
func (a *RoomRotationConfigAPIService) PutRoomOwnerReferral(ctx context.Context, profileId string, roomOwnerReferralId string) RoomRotationConfigAPIPutRoomOwnerReferralRequest {
	return RoomRotationConfigAPIPutRoomOwnerReferralRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
		roomOwnerReferralId: roomOwnerReferralId,
	}
}

// Execute executes the request
//  @return Status
func (a *RoomRotationConfigAPIService) PutRoomOwnerReferralExecute(r RoomRotationConfigAPIPutRoomOwnerReferralRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.PutRoomOwnerReferral")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/roomOwnerReferrals/{roomOwnerReferralId}"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roomOwnerReferralId"+"}", url.PathEscape(parameterValueToString(r.roomOwnerReferralId, "roomOwnerReferralId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}
	if strlen(r.roomOwnerReferralId) < 1 {
		return localVarReturnValue, nil, reportError("roomOwnerReferralId must have at least 1 elements")
	}
	if strlen(r.roomOwnerReferralId) > 2000 {
		return localVarReturnValue, nil, reportError("roomOwnerReferralId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.changeRoomOwnerReferralDetails
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIPutRotationPeriodRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	rotationPeriod *RotationPeriod
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIPutRotationPeriodRequest) Authorization(authorization string) RoomRotationConfigAPIPutRotationPeriodRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIPutRotationPeriodRequest) XAppKey(xAppKey string) RoomRotationConfigAPIPutRotationPeriodRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIPutRotationPeriodRequest) XHotelid(xHotelid string) RoomRotationConfigAPIPutRotationPeriodRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request Object for changing Rotation Period
func (r RoomRotationConfigAPIPutRotationPeriodRequest) RotationPeriod(rotationPeriod RotationPeriod) RoomRotationConfigAPIPutRotationPeriodRequest {
	r.rotationPeriod = &rotationPeriod
	return r
}

// External system code.
func (r RoomRotationConfigAPIPutRotationPeriodRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIPutRotationPeriodRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIPutRotationPeriodRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIPutRotationPeriodRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIPutRotationPeriodRequest) Execute() (*ChangeRotationPeriodDetails, *http.Response, error) {
	return r.ApiService.PutRotationPeriodExecute(r)
}

/*
PutRotationPeriod Change Room Rotation Period

Use this API to change Room Rotation Period. <p><strong>OperationId:</strong>putRotationPeriod</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of hotel.
 @return RoomRotationConfigAPIPutRotationPeriodRequest
*/
func (a *RoomRotationConfigAPIService) PutRotationPeriod(ctx context.Context, hotelId string) RoomRotationConfigAPIPutRotationPeriodRequest {
	return RoomRotationConfigAPIPutRotationPeriodRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ChangeRotationPeriodDetails
func (a *RoomRotationConfigAPIService) PutRotationPeriodExecute(r RoomRotationConfigAPIPutRotationPeriodRequest) (*ChangeRotationPeriodDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangeRotationPeriodDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.PutRotationPeriod")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rotationPeriod"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 20 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 20 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.rotationPeriod
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIPutRotationRulesRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	ruleId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	rotationRules *RotationRules
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIPutRotationRulesRequest) Authorization(authorization string) RoomRotationConfigAPIPutRotationRulesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIPutRotationRulesRequest) XAppKey(xAppKey string) RoomRotationConfigAPIPutRotationRulesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIPutRotationRulesRequest) XHotelid(xHotelid string) RoomRotationConfigAPIPutRotationRulesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for changing room rotation rules.
func (r RoomRotationConfigAPIPutRotationRulesRequest) RotationRules(rotationRules RotationRules) RoomRotationConfigAPIPutRotationRulesRequest {
	r.rotationRules = &rotationRules
	return r
}

// External system code.
func (r RoomRotationConfigAPIPutRotationRulesRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIPutRotationRulesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIPutRotationRulesRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIPutRotationRulesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIPutRotationRulesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutRotationRulesExecute(r)
}

/*
PutRotationRules Change Room Rotation Rules

This API has been deprecated and will be replaced by <p><strong>OperationId:</strong>postRoomRotationRules</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ruleId Unique Rotation Group Code.
 @param hotelId Unique ID of hotel.
 @return RoomRotationConfigAPIPutRotationRulesRequest

Deprecated
*/
func (a *RoomRotationConfigAPIService) PutRotationRules(ctx context.Context, ruleId string, hotelId string) RoomRotationConfigAPIPutRotationRulesRequest {
	return RoomRotationConfigAPIPutRotationRulesRequest{
		ApiService: a,
		ctx: ctx,
		ruleId: ruleId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
// Deprecated
func (a *RoomRotationConfigAPIService) PutRotationRulesExecute(r RoomRotationConfigAPIPutRotationRulesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.PutRotationRules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rules/{ruleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ruleId"+"}", url.PathEscape(parameterValueToString(r.ruleId, "ruleId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ruleId) < 1 {
		return localVarReturnValue, nil, reportError("ruleId must have at least 1 elements")
	}
	if strlen(r.ruleId) > 2000 {
		return localVarReturnValue, nil, reportError("ruleId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.rotationRules
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationConfigAPIPutUnitGradesRequest struct {
	ctx context.Context
	ApiService *RoomRotationConfigAPIService
	unitGradeCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	changeUnitGradesDetails *ChangeUnitGradesDetails
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationConfigAPIPutUnitGradesRequest) Authorization(authorization string) RoomRotationConfigAPIPutUnitGradesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationConfigAPIPutUnitGradesRequest) XAppKey(xAppKey string) RoomRotationConfigAPIPutUnitGradesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationConfigAPIPutUnitGradesRequest) XHotelid(xHotelid string) RoomRotationConfigAPIPutUnitGradesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for changing an existing Room Rotation Owner Room Unit Grades.
func (r RoomRotationConfigAPIPutUnitGradesRequest) ChangeUnitGradesDetails(changeUnitGradesDetails ChangeUnitGradesDetails) RoomRotationConfigAPIPutUnitGradesRequest {
	r.changeUnitGradesDetails = &changeUnitGradesDetails
	return r
}

// External system code.
func (r RoomRotationConfigAPIPutUnitGradesRequest) XExternalsystem(xExternalsystem string) RoomRotationConfigAPIPutUnitGradesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationConfigAPIPutUnitGradesRequest) AcceptLanguage(acceptLanguage string) RoomRotationConfigAPIPutUnitGradesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationConfigAPIPutUnitGradesRequest) Execute() (*UnitGradesDetailsUpdated, *http.Response, error) {
	return r.ApiService.PutUnitGradesExecute(r)
}

/*
PutUnitGrades Change an existing Room Rotation Owner Room Unit Grade

Use this API to update Room Rotation Owner Room Unit Grades. <p><strong>OperationId:</strong>putUnitGrades</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param unitGradeCode Unique Code of Owner Room Unit Grade.
 @param hotelId Unique ID of hotel.
 @return RoomRotationConfigAPIPutUnitGradesRequest
*/
func (a *RoomRotationConfigAPIService) PutUnitGrades(ctx context.Context, unitGradeCode string, hotelId string) RoomRotationConfigAPIPutUnitGradesRequest {
	return RoomRotationConfigAPIPutUnitGradesRequest{
		ApiService: a,
		ctx: ctx,
		unitGradeCode: unitGradeCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return UnitGradesDetailsUpdated
func (a *RoomRotationConfigAPIService) PutUnitGradesExecute(r RoomRotationConfigAPIPutUnitGradesRequest) (*UnitGradesDetailsUpdated, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnitGradesDetailsUpdated
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationConfigAPIService.PutUnitGrades")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/unitGrades/{unitGradeCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"unitGradeCode"+"}", url.PathEscape(parameterValueToString(r.unitGradeCode, "unitGradeCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.unitGradeCode) < 1 {
		return localVarReturnValue, nil, reportError("unitGradeCode must have at least 1 elements")
	}
	if strlen(r.unitGradeCode) > 8 {
		return localVarReturnValue, nil, reportError("unitGradeCode must have less than 8 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 20 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 20 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.changeUnitGradesDetails
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
