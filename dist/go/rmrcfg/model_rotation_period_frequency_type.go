/*
OPERA Cloud Room Rotation Configuration Service API

APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmrcfg

import (
	"encoding/json"
	"fmt"
)

// RotationPeriodFrequencyType Simple type for Rotation Period Type.
type RotationPeriodFrequencyType string

// List of rotationPeriodFrequencyType
const (
	ROTATIONPERIODFREQUENCYTYPE_MONTHLY RotationPeriodFrequencyType = "Monthly"
	ROTATIONPERIODFREQUENCYTYPE_QUARTERLY RotationPeriodFrequencyType = "Quarterly"
	ROTATIONPERIODFREQUENCYTYPE_SEMI_ANNUALLY RotationPeriodFrequencyType = "SemiAnnually"
	ROTATIONPERIODFREQUENCYTYPE_ANNUALLY RotationPeriodFrequencyType = "Annually"
	ROTATIONPERIODFREQUENCYTYPE_NEVER RotationPeriodFrequencyType = "Never"
)

// All allowed values of RotationPeriodFrequencyType enum
var AllowedRotationPeriodFrequencyTypeEnumValues = []RotationPeriodFrequencyType{
	"Monthly",
	"Quarterly",
	"SemiAnnually",
	"Annually",
	"Never",
}

func (v *RotationPeriodFrequencyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RotationPeriodFrequencyType(value)
	for _, existing := range AllowedRotationPeriodFrequencyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RotationPeriodFrequencyType", value)
}

// NewRotationPeriodFrequencyTypeFromValue returns a pointer to a valid RotationPeriodFrequencyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRotationPeriodFrequencyTypeFromValue(v string) (*RotationPeriodFrequencyType, error) {
	ev := RotationPeriodFrequencyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RotationPeriodFrequencyType: valid values are %v", v, AllowedRotationPeriodFrequencyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RotationPeriodFrequencyType) IsValid() bool {
	for _, existing := range AllowedRotationPeriodFrequencyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to rotationPeriodFrequencyType value
func (v RotationPeriodFrequencyType) Ptr() *RotationPeriodFrequencyType {
	return &v
}

type NullableRotationPeriodFrequencyType struct {
	value *RotationPeriodFrequencyType
	isSet bool
}

func (v NullableRotationPeriodFrequencyType) Get() *RotationPeriodFrequencyType {
	return v.value
}

func (v *NullableRotationPeriodFrequencyType) Set(val *RotationPeriodFrequencyType) {
	v.value = val
	v.isSet = true
}

func (v NullableRotationPeriodFrequencyType) IsSet() bool {
	return v.isSet
}

func (v *NullableRotationPeriodFrequencyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRotationPeriodFrequencyType(val *RotationPeriodFrequencyType) *NullableRotationPeriodFrequencyType {
	return &NullableRotationPeriodFrequencyType{value: val, isSet: true}
}

func (v NullableRotationPeriodFrequencyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRotationPeriodFrequencyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

