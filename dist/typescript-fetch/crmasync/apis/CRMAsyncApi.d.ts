/**
 * OPERA Cloud CRM Asynchronous API
 * APIs to insert Stay Records related asynchronous functionality in OPERA.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { InstanceLink, StayRecordStatus, StayRecords } from '../models/index';
export interface GetStayRecordsProcessRequest {
    requestId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    acceptLanguage?: string;
}
export interface GetStayRecordsProcessStatusRequest {
    requestId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    acceptLanguage?: string;
}
export interface StayRecordsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    criteria: StayRecords;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class CRMAsyncApi extends runtime.BaseAPI {
    /**
     * Use this to check whether the request sent have been processed. <p><strong>OperationId:</strong>getStayRecordsProcess</p>
     * This API facilitates fetching the status for stay records uploaded.
     */
    getStayRecordsProcessRaw(requestParameters: GetStayRecordsProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StayRecordStatus>>;
    /**
     * Use this to check whether the request sent have been processed. <p><strong>OperationId:</strong>getStayRecordsProcess</p>
     * This API facilitates fetching the status for stay records uploaded.
     */
    getStayRecordsProcess(requestParameters: GetStayRecordsProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StayRecordStatus>;
    /**
     * Use this to check whether the request sent have been processed. <p><strong>OperationId:</strong>getStayRecordsProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    getStayRecordsProcessStatusRaw(requestParameters: GetStayRecordsProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Use this to check whether the request sent have been processed. <p><strong>OperationId:</strong>getStayRecordsProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    getStayRecordsProcessStatus(requestParameters: GetStayRecordsProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * A user can upload various stay records to OPERA by specifying stay record column details in the request.<p><strong>OperationId:</strong>stayRecords</p>
     * This API facilitates uploading stage records to LCS.
     */
    stayRecordsRaw(requestParameters: StayRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InstanceLink>>>;
    /**
     * A user can upload various stay records to OPERA by specifying stay record column details in the request.<p><strong>OperationId:</strong>stayRecords</p>
     * This API facilitates uploading stage records to LCS.
     */
    stayRecords(requestParameters: StayRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InstanceLink>>;
}
