"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetSellMessagesUsedInModuleEnum = exports.GetSellMessagesFetchInstructionsEnum = exports.GetRoomCalendarRoomStatusEnum = exports.GetRoomCalendarSortingByEnum = exports.GetReservationsToShareByReservationIdFetchInstructionsEnum = exports.GetReservationsToShareByProfileIdFetchInstructionsEnum = exports.GetReservationsSummaryReservationStatusEnum = exports.GetReservationsRoomReadyStatusesEnum = exports.GetReservationsReservationStatusesEnum = exports.GetReservationsSearchTypesEnum = exports.GetReservationsAllowedReservationActionsEnum = exports.GetReservationsFetchInstructionsEnum = exports.GetReservationsHousekeepingRoomStatusesEnum = exports.GetReservationsSortOrderEnum = exports.GetReservationsOrderByEnum = exports.GetReservationsSearchTypeEnum = exports.GetReservationIndicatorsCheckInstructionsEnum = exports.GetReservationByExtIdAllowedActionsEnum = exports.GetReservationByExtIdFetchInstructionsEnum = exports.GetReservationAllowedActionsEnum = exports.GetReservationFetchInstructionsEnum = exports.GetPackageFetchInstructionsEnum = exports.GetLinkedReservationsFetchInstructionsEnum = exports.GetHotelReservationsRoomReadyStatusesEnum = exports.GetHotelReservationsReservationStatusesEnum = exports.GetHotelReservationsSearchTypesEnum = exports.GetHotelReservationsPeriodicFolioEnum = exports.GetHotelReservationsAllowedReservationActionsEnum = exports.GetHotelReservationsFetchInstructionsEnum = exports.GetHotelReservationsHousekeepingRoomStatusesEnum = exports.GetHotelReservationsSortOrderEnum = exports.GetHotelReservationsOrderByEnum = exports.GetHotelReservationsSearchTypeEnum = exports.GetHotelReservationsDiscrepancyEnum = exports.GetGuestMessagesReservationStatusEnum = exports.GetExternalSystemReservationsRoomReadyStatusesEnum = exports.GetExternalSystemReservationsReservationStatusesEnum = exports.GetExternalSystemReservationsSearchTypesEnum = exports.GetExternalSystemReservationsFetchInstructionsEnum = exports.GetExternalSystemReservationsHousekeepingRoomStatusesEnum = exports.GetExternalSystemReservationsSortOrderEnum = exports.GetExternalSystemReservationsOrderByEnum = exports.GetExternalSystemReservationsSearchTypeEnum = exports.GetAlertNoticesAlertAreaEnum = exports.DeletePreCheckInReservationEmailFolioEmailFormatEnum = exports.DeletePreCheckInReservationProcessingEnum = exports.DeletePreCheckInReservationCardTypeEnum = exports.DeletePreCheckInReservationCardOrTokenEnum = exports.ReservationApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class ReservationApi extends runtime.BaseAPI {
    /**
     * Change a list of Guest Locater for a Reservation. <p><strong>OperationId:</strong>changeReservationLocators</p>
     * Change Reservation Guest Locators
     */
    changeReservationLocatorsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.locatorId === null || requestParameters.locatorId === undefined) {
                throw new runtime.RequiredError('locatorId', 'Required parameter requestParameters.locatorId was null or undefined when calling changeReservationLocators.');
            }
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling changeReservationLocators.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling changeReservationLocators.');
            }
            if (requestParameters.reservationLocatorsInfo === null || requestParameters.reservationLocatorsInfo === undefined) {
                throw new runtime.RequiredError('reservationLocatorsInfo', 'Required parameter requestParameters.reservationLocatorsInfo was null or undefined when calling changeReservationLocators.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/guestLocators/{locatorId}`.replace(`{${"locatorId"}}`, encodeURIComponent(String(requestParameters.locatorId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationLocatorsInfoToJSON)(requestParameters.reservationLocatorsInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationLocatorsStatusFromJSON)(jsonValue));
        });
    }
    /**
     * Change a list of Guest Locater for a Reservation. <p><strong>OperationId:</strong>changeReservationLocators</p>
     * Change Reservation Guest Locators
     */
    changeReservationLocators(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeReservationLocatorsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete an existing cancellation policy for a specific hotel. <p><strong>OperationId:</strong>deleteCancellationPolicy</p>
     * Delete a Cancellation policy
     */
    deleteCancellationPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteCancellationPolicy.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteCancellationPolicy.');
            }
            if (requestParameters.policyId === null || requestParameters.policyId === undefined) {
                throw new runtime.RequiredError('policyId', 'Required parameter requestParameters.policyId was null or undefined when calling deleteCancellationPolicy.');
            }
            const queryParameters = {};
            if (requestParameters.policyId !== undefined) {
                queryParameters['policyId'] = requestParameters.policyId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/cancellationPolicies`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete an existing cancellation policy for a specific hotel. <p><strong>OperationId:</strong>deleteCancellationPolicy</p>
     * Delete a Cancellation policy
     */
    deleteCancellationPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCancellationPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete deposit policy for a property.   <p><strong>OperationId:</strong>deleteDepositPolicy</p>
     * Delete deposit policy
     */
    deleteDepositPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteDepositPolicy.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteDepositPolicy.');
            }
            if (requestParameters.policyId === null || requestParameters.policyId === undefined) {
                throw new runtime.RequiredError('policyId', 'Required parameter requestParameters.policyId was null or undefined when calling deleteDepositPolicy.');
            }
            const queryParameters = {};
            if (requestParameters.policyId !== undefined) {
                queryParameters['policyId'] = requestParameters.policyId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/depositPolicies`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete deposit policy for a property.   <p><strong>OperationId:</strong>deleteDepositPolicy</p>
     * Delete deposit policy
     */
    deleteDepositPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteDepositPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the Reservation Ecoupons. <p><strong>OperationId:</strong>deleteECoupons</p>
     * Delete Reservation ECoupons
     */
    deleteECouponsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteECoupons.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteECoupons.');
            }
            const queryParameters = {};
            if (requestParameters.eCouponId !== undefined) {
                queryParameters['eCouponId'] = requestParameters.eCouponId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/eCoupons`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete the Reservation Ecoupons. <p><strong>OperationId:</strong>deleteECoupons</p>
     * Delete Reservation ECoupons
     */
    deleteECoupons(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteECouponsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete guest messages from a reservation. <p><strong>OperationId:</strong>deleteGuestMessages</p>
     * Delete guest messages
     */
    deleteGuestMessagesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.guestMessageId === null || requestParameters.guestMessageId === undefined) {
                throw new runtime.RequiredError('guestMessageId', 'Required parameter requestParameters.guestMessageId was null or undefined when calling deleteGuestMessages.');
            }
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteGuestMessages.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteGuestMessages.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/guestMessages/{guestMessageId}`.replace(`{${"guestMessageId"}}`, encodeURIComponent(String(requestParameters.guestMessageId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete guest messages from a reservation. <p><strong>OperationId:</strong>deleteGuestMessages</p>
     * Delete guest messages
     */
    deleteGuestMessages(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteGuestMessagesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Cancel Master account on a reservation. <p><strong>OperationId:</strong>deleteMasterAccount</p>
     * Cancel Master Account
     */
    deleteMasterAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteMasterAccount.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteMasterAccount.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/masterAccount`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Cancel Master account on a reservation. <p><strong>OperationId:</strong>deleteMasterAccount</p>
     * Cancel Master Account
     */
    deleteMasterAccount(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteMasterAccountRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete a payment method from a reservation. <p><strong>OperationId:</strong>deletePaymentMethods</p>
     * Delete a payment method
     */
    deletePaymentMethodsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deletePaymentMethods.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deletePaymentMethods.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/paymentMethods`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete a payment method from a reservation. <p><strong>OperationId:</strong>deletePaymentMethods</p>
     * Delete a payment method
     */
    deletePaymentMethods(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deletePaymentMethodsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This will cancel or rather revert the pre-checkin action for a guest\'s reservation. The reservation will return to DUEIN status. <p><strong>OperationId:</strong>deletePreCheckInReservation</p>
     * Revert a PreCheckIn Reservation
     */
    deletePreCheckInReservationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deletePreCheckInReservation.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deletePreCheckInReservation.');
            }
            const queryParameters = {};
            if (requestParameters.resvIDExtension !== undefined) {
                queryParameters['resvIDExtension'] = requestParameters.resvIDExtension;
            }
            if (requestParameters.arrivalTime !== undefined) {
                queryParameters['arrivalTime'] = requestParameters.arrivalTime;
            }
            if (requestParameters.roomNumber !== undefined) {
                queryParameters['roomNumber'] = requestParameters.roomNumber;
            }
            if (requestParameters.guestPreferredCurrency !== undefined) {
                queryParameters['guestPreferredCurrency'] = requestParameters.guestPreferredCurrency;
            }
            if (requestParameters.allowMobileViewFolio !== undefined) {
                queryParameters['allowMobileViewFolio'] = requestParameters.allowMobileViewFolio;
            }
            if (requestParameters.paymentMethodDescription) {
                queryParameters['paymentMethodDescription'] = requestParameters.paymentMethodDescription;
            }
            if (requestParameters.paymentMethodFolioView) {
                queryParameters['paymentMethodFolioView'] = requestParameters.paymentMethodFolioView;
            }
            if (requestParameters.paymentMethod) {
                queryParameters['paymentMethod'] = requestParameters.paymentMethod;
            }
            if (requestParameters.attachCreditCardToProfile !== undefined) {
                queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
            }
            if (requestParameters.cardHolderName !== undefined) {
                queryParameters['cardHolderName'] = requestParameters.cardHolderName;
            }
            if (requestParameters.cardNumber !== undefined) {
                queryParameters['cardNumber'] = requestParameters.cardNumber;
            }
            if (requestParameters.cardNumberLast4Digits !== undefined) {
                queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
            }
            if (requestParameters.cardNumberMasked !== undefined) {
                queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
            }
            if (requestParameters.cardOrToken !== undefined) {
                queryParameters['cardOrToken'] = requestParameters.cardOrToken;
            }
            if (requestParameters.cardType !== undefined) {
                queryParameters['cardType'] = requestParameters.cardType;
            }
            if (requestParameters.expirationDate !== undefined) {
                queryParameters['expirationDate'] = requestParameters.expirationDate;
            }
            if (requestParameters.expirationDateExpired !== undefined) {
                queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
            }
            if (requestParameters.expirationDateMasked !== undefined) {
                queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
            }
            if (requestParameters.processing !== undefined) {
                queryParameters['processing'] = requestParameters.processing;
            }
            if (requestParameters.swiped !== undefined) {
                queryParameters['swiped'] = requestParameters.swiped;
            }
            if (requestParameters.userDefinedCardType !== undefined) {
                queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
            }
            if (requestParameters.cardId !== undefined) {
                queryParameters['cardId'] = requestParameters.cardId;
            }
            if (requestParameters.cardIdIDExtension !== undefined) {
                queryParameters['cardIdIDExtension'] = requestParameters.cardIdIDExtension;
            }
            if (requestParameters.cardIdIDContext !== undefined) {
                queryParameters['cardIdIDContext'] = requestParameters.cardIdIDContext;
            }
            if (requestParameters.cardIdType !== undefined) {
                queryParameters['cardIdType'] = requestParameters.cardIdType;
            }
            if (requestParameters.currentAuthorizedAmount !== undefined) {
                queryParameters['currentAuthorizedAmount'] = requestParameters.currentAuthorizedAmount;
            }
            if (requestParameters.authorizedAmountCurrencyCode !== undefined) {
                queryParameters['authorizedAmountCurrencyCode'] = requestParameters.authorizedAmountCurrencyCode;
            }
            if (requestParameters.approvalAmountNeeded !== undefined) {
                queryParameters['approvalAmountNeeded'] = requestParameters.approvalAmountNeeded;
            }
            if (requestParameters.approvalAmountCurrencyCode !== undefined) {
                queryParameters['approvalAmountCurrencyCode'] = requestParameters.approvalAmountCurrencyCode;
            }
            if (requestParameters.balanceAmount !== undefined) {
                queryParameters['balanceAmount'] = requestParameters.balanceAmount;
            }
            if (requestParameters.balanceCurrencyCode !== undefined) {
                queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
            }
            if (requestParameters.authorizationRuleCode !== undefined) {
                queryParameters['authorizationRuleCode'] = requestParameters.authorizationRuleCode;
            }
            if (requestParameters.authorizationRuleAmount !== undefined) {
                queryParameters['authorizationRuleAmount'] = requestParameters.authorizationRuleAmount;
            }
            if (requestParameters.authorizationRuleCurrencyCode !== undefined) {
                queryParameters['authorizationRuleCurrencyCode'] = requestParameters.authorizationRuleCurrencyCode;
            }
            if (requestParameters.authorizationRulePercent !== undefined) {
                queryParameters['authorizationRulePercent'] = requestParameters.authorizationRulePercent;
            }
            if (requestParameters.emailFolio !== undefined) {
                queryParameters['emailFolio'] = requestParameters.emailFolio;
            }
            if (requestParameters.emailFolioID !== undefined) {
                queryParameters['emailFolioID'] = requestParameters.emailFolioID;
            }
            if (requestParameters.emailFolioIDExtension !== undefined) {
                queryParameters['emailFolioIDExtension'] = requestParameters.emailFolioIDExtension;
            }
            if (requestParameters.emailFolioIDContext !== undefined) {
                queryParameters['emailFolioIDContext'] = requestParameters.emailFolioIDContext;
            }
            if (requestParameters.emailFolioIDType !== undefined) {
                queryParameters['emailFolioIDType'] = requestParameters.emailFolioIDType;
            }
            if (requestParameters.emailFolioCreateDateTime !== undefined) {
                queryParameters['emailFolioCreateDateTime'] = requestParameters.emailFolioCreateDateTime;
            }
            if (requestParameters.emailFolioCreatorID !== undefined) {
                queryParameters['emailFolioCreatorID'] = requestParameters.emailFolioCreatorID;
            }
            if (requestParameters.emailFolioEmailAddress !== undefined) {
                queryParameters['emailFolioEmailAddress'] = requestParameters.emailFolioEmailAddress;
            }
            if (requestParameters.emailFolioEmailFormat !== undefined) {
                queryParameters['emailFolioEmailFormat'] = requestParameters.emailFolioEmailFormat;
            }
            if (requestParameters.emailFolioLastModifierID !== undefined) {
                queryParameters['emailFolioLastModifierID'] = requestParameters.emailFolioLastModifierID;
            }
            if (requestParameters.emailFolioLastModifyDateTime !== undefined) {
                queryParameters['emailFolioLastModifyDateTime'] = requestParameters.emailFolioLastModifyDateTime;
            }
            if (requestParameters.emailFolioOrderSequence !== undefined) {
                queryParameters['emailFolioOrderSequence'] = requestParameters.emailFolioOrderSequence;
            }
            if (requestParameters.emailFolioPrimaryInd !== undefined) {
                queryParameters['emailFolioPrimaryInd'] = requestParameters.emailFolioPrimaryInd;
            }
            if (requestParameters.emailFolioPurgeDate !== undefined) {
                queryParameters['emailFolioPurgeDate'] = requestParameters.emailFolioPurgeDate;
            }
            if (requestParameters.emailFolioType !== undefined) {
                queryParameters['emailFolioType'] = requestParameters.emailFolioType;
            }
            if (requestParameters.emailFolioTypeDescription !== undefined) {
                queryParameters['emailFolioTypeDescription'] = requestParameters.emailFolioTypeDescription;
            }
            if (requestParameters.arrivalCarrierCode !== undefined) {
                queryParameters['arrivalCarrierCode'] = requestParameters.arrivalCarrierCode;
            }
            if (requestParameters.arrivalDateTime !== undefined) {
                queryParameters['arrivalDateTime'] = requestParameters.arrivalDateTime;
            }
            if (requestParameters.arrivalStationCode !== undefined) {
                queryParameters['arrivalStationCode'] = requestParameters.arrivalStationCode;
            }
            if (requestParameters.arrivalTransportCode !== undefined) {
                queryParameters['arrivalTransportCode'] = requestParameters.arrivalTransportCode;
            }
            if (requestParameters.arrivalTransportationReqd !== undefined) {
                queryParameters['arrivalTransportationReqd'] = requestParameters.arrivalTransportationReqd;
            }
            if (requestParameters.arrivalType !== undefined) {
                queryParameters['arrivalType'] = requestParameters.arrivalType;
            }
            if (requestParameters.arrivalComments !== undefined) {
                queryParameters['arrivalComments'] = requestParameters.arrivalComments;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/preCheckIn`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This will cancel or rather revert the pre-checkin action for a guest\'s reservation. The reservation will return to DUEIN status. <p><strong>OperationId:</strong>deletePreCheckInReservation</p>
     * Revert a PreCheckIn Reservation
     */
    deletePreCheckInReservation(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deletePreCheckInReservationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to refund Reservation tickets. <p><strong>OperationId:</strong>deleteRefundTickets</p>
     * Refund Reservation tickets
     */
    deleteRefundTicketsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteRefundTickets.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteRefundTickets.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/tickets/refund`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to refund Reservation tickets. <p><strong>OperationId:</strong>deleteRefundTickets</p>
     * Refund Reservation tickets
     */
    deleteRefundTickets(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteRefundTicketsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete attachments from a Reservation. <p><strong>OperationId:</strong>deleteReservationAttachment</p>
     * Delete Reservation attachments
     */
    deleteReservationAttachmentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.attachmentId === null || requestParameters.attachmentId === undefined) {
                throw new runtime.RequiredError('attachmentId', 'Required parameter requestParameters.attachmentId was null or undefined when calling deleteReservationAttachment.');
            }
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteReservationAttachment.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteReservationAttachment.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/attachments/{attachmentId}`.replace(`{${"attachmentId"}}`, encodeURIComponent(String(requestParameters.attachmentId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete attachments from a Reservation. <p><strong>OperationId:</strong>deleteReservationAttachment</p>
     * Delete Reservation attachments
     */
    deleteReservationAttachment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteReservationAttachmentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Remove a certification from a reservation. <p><strong>OperationId:</strong>deleteReservationCertificate</p>
     * Detach Certificate
     */
    deleteReservationCertificateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteReservationCertificate.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteReservationCertificate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/certificates`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Remove a certification from a reservation. <p><strong>OperationId:</strong>deleteReservationCertificate</p>
     * Detach Certificate
     */
    deleteReservationCertificate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteReservationCertificateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinks</p>
     * Remove Reservation Links
     */
    deleteReservationLinksRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteReservationLinks.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteReservationLinks.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/linkedReservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinks</p>
     * Remove Reservation Links
     */
    deleteReservationLinks(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteReservationLinksRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinksByChain</p>
     * Remove Reservation Links By Chain
     */
    deleteReservationLinksByChainRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteReservationLinksByChain.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/reservations/linkedReservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinksByChain</p>
     * Remove Reservation Links By Chain
     */
    deleteReservationLinksByChain(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteReservationLinksByChainRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinksByExtId</p>
     * Remove Reservation Links
     */
    deleteReservationLinksByExtIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationExternalId === null || requestParameters.reservationExternalId === undefined) {
                throw new runtime.RequiredError('reservationExternalId', 'Required parameter requestParameters.reservationExternalId was null or undefined when calling deleteReservationLinksByExtId.');
            }
            if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
                throw new runtime.RequiredError('externalSystemCode', 'Required parameter requestParameters.externalSystemCode was null or undefined when calling deleteReservationLinksByExtId.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteReservationLinksByExtId.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/linkedReservations/{reservationExternalId}`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinksByExtId</p>
     * Remove Reservation Links
     */
    deleteReservationLinksByExtId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteReservationLinksByExtIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a Guest Locater for a Reservation. <p><strong>OperationId:</strong>deleteReservationLocators</p>
     * Remove Reservation Locators
     */
    deleteReservationLocatorsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.locatorId === null || requestParameters.locatorId === undefined) {
                throw new runtime.RequiredError('locatorId', 'Required parameter requestParameters.locatorId was null or undefined when calling deleteReservationLocators.');
            }
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteReservationLocators.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteReservationLocators.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/guestLocators/{locatorId}`.replace(`{${"locatorId"}}`, encodeURIComponent(String(requestParameters.locatorId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete a Guest Locater for a Reservation. <p><strong>OperationId:</strong>deleteReservationLocators</p>
     * Remove Reservation Locators
     */
    deleteReservationLocators(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteReservationLocatorsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Release Reservation Lock. <p><strong>OperationId:</strong>deleteReservationLock</p>
     * Release Reservation Lock
     */
    deleteReservationLockRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.lockHandle === null || requestParameters.lockHandle === undefined) {
                throw new runtime.RequiredError('lockHandle', 'Required parameter requestParameters.lockHandle was null or undefined when calling deleteReservationLock.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteReservationLock.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/locks/{lockHandle}`.replace(`{${"lockHandle"}}`, encodeURIComponent(String(requestParameters.lockHandle))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Release Reservation Lock. <p><strong>OperationId:</strong>deleteReservationLock</p>
     * Release Reservation Lock
     */
    deleteReservationLock(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteReservationLockRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a membership from an existing reservation. <p><strong>OperationId:</strong>deleteReservationMembership</p>
     * Delete a Reservation membership
     */
    deleteReservationMembershipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteReservationMembership.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteReservationMembership.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/memberships`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete a membership from an existing reservation. <p><strong>OperationId:</strong>deleteReservationMembership</p>
     * Delete a Reservation membership
     */
    deleteReservationMembership(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteReservationMembershipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to delete packages from a reservation. <p><strong>OperationId:</strong>deleteReservationPackage</p>
     * Delete a package from a Reservation
     */
    deleteReservationPackageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteReservationPackage.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteReservationPackage.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/packages`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to delete packages from a reservation. <p><strong>OperationId:</strong>deleteReservationPackage</p>
     * Delete a package from a Reservation
     */
    deleteReservationPackage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteReservationPackageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to remove a preference that exist on a reservation. <p><strong>OperationId:</strong>deleteReservationPreference</p>
     * Delete a Reservation Preference
     */
    deleteReservationPreferenceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.preferenceCode === null || requestParameters.preferenceCode === undefined) {
                throw new runtime.RequiredError('preferenceCode', 'Required parameter requestParameters.preferenceCode was null or undefined when calling deleteReservationPreference.');
            }
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteReservationPreference.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteReservationPreference.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/preferences/{preferenceCode}`.replace(`{${"preferenceCode"}}`, encodeURIComponent(String(requestParameters.preferenceCode))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to remove a preference that exist on a reservation. <p><strong>OperationId:</strong>deleteReservationPreference</p>
     * Delete a Reservation Preference
     */
    deleteReservationPreference(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteReservationPreferenceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete the Inventory Items reserved for the Reservation. <p><strong>OperationId:</strong>deleteReservedInventoryItems</p>
     * Delete Reserved Inventory Items
     */
    deleteReservedInventoryItemsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteReservedInventoryItems.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteReservedInventoryItems.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/inventoryItems`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete the Inventory Items reserved for the Reservation. <p><strong>OperationId:</strong>deleteReservedInventoryItems</p>
     * Delete Reserved Inventory Items
     */
    deleteReservedInventoryItems(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteReservedInventoryItemsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to delete routing instructions from a reservation. <p><strong>OperationId:</strong>deleteRoutingInstructions</p>
     * Delete routing instructions
     * @deprecated
     */
    deleteRoutingInstructionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteRoutingInstructions.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteRoutingInstructions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete routing instructions from a reservation. <p><strong>OperationId:</strong>deleteRoutingInstructions</p>
     * Delete routing instructions
     * @deprecated
     */
    deleteRoutingInstructions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteRoutingInstructionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete an existing sell message configuration for a property. <p><strong>OperationId:</strong>deleteSellMessageConfig</p>
     * Delete sell message
     */
    deleteSellMessageConfigRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteSellMessageConfig.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/sellMessages/config`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete an existing sell message configuration for a property. <p><strong>OperationId:</strong>deleteSellMessageConfig</p>
     * Delete sell message
     */
    deleteSellMessageConfig(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteSellMessageConfigRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete an existing sell message configuration. <p><strong>OperationId:</strong>deleteSellMessageConfigByChain</p>
     * Delete sell message by chain
     */
    deleteSellMessageConfigByChainRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.sellMessageConfigId) {
                queryParameters['sellMessageConfigId'] = requestParameters.sellMessageConfigId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/sellMessages/config`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete an existing sell message configuration. <p><strong>OperationId:</strong>deleteSellMessageConfigByChain</p>
     * Delete sell message by chain
     */
    deleteSellMessageConfigByChain(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteSellMessageConfigByChainRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API can be used to separate the share reservations. <p><strong>OperationId:</strong>deleteShareReservation</p>
     * Separate share Reservations
     */
    deleteShareReservationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteShareReservation.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteShareReservation.');
            }
            const queryParameters = {};
            if (requestParameters.overrideInventoryCheck !== undefined) {
                queryParameters['overrideInventoryCheck'] = requestParameters.overrideInventoryCheck;
            }
            if (requestParameters.overrideMaxOccupancyCheck !== undefined) {
                queryParameters['overrideMaxOccupancyCheck'] = requestParameters.overrideMaxOccupancyCheck;
            }
            if (requestParameters.overrideRateAvailabilityCheck !== undefined) {
                queryParameters['overrideRateAvailabilityCheck'] = requestParameters.overrideRateAvailabilityCheck;
            }
            if (requestParameters.returnShareReservations !== undefined) {
                queryParameters['returnShareReservations'] = requestParameters.returnShareReservations;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/shares`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API can be used to separate the share reservations. <p><strong>OperationId:</strong>deleteShareReservation</p>
     * Separate share Reservations
     */
    deleteShareReservation(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteShareReservationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API can be used to separate the share reservations. <p><strong>OperationId:</strong>deleteShareReservationByExtId</p>
     * Separate share Reservations
     */
    deleteShareReservationByExtIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationExternalId === null || requestParameters.reservationExternalId === undefined) {
                throw new runtime.RequiredError('reservationExternalId', 'Required parameter requestParameters.reservationExternalId was null or undefined when calling deleteShareReservationByExtId.');
            }
            if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
                throw new runtime.RequiredError('externalSystemCode', 'Required parameter requestParameters.externalSystemCode was null or undefined when calling deleteShareReservationByExtId.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteShareReservationByExtId.');
            }
            const queryParameters = {};
            if (requestParameters.overrideInventoryCheck !== undefined) {
                queryParameters['overrideInventoryCheck'] = requestParameters.overrideInventoryCheck;
            }
            if (requestParameters.overrideMaxOccupancyCheck !== undefined) {
                queryParameters['overrideMaxOccupancyCheck'] = requestParameters.overrideMaxOccupancyCheck;
            }
            if (requestParameters.overrideRateAvailabilityCheck !== undefined) {
                queryParameters['overrideRateAvailabilityCheck'] = requestParameters.overrideRateAvailabilityCheck;
            }
            if (requestParameters.returnShareReservations !== undefined) {
                queryParameters['returnShareReservations'] = requestParameters.returnShareReservations;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/shares`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API can be used to separate the share reservations. <p><strong>OperationId:</strong>deleteShareReservationByExtId</p>
     * Separate share Reservations
     */
    deleteShareReservationByExtId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteShareReservationByExtIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to delete tickets from a reservation. <p><strong>OperationId:</strong>deleteTickets</p>
     * Delete tickets
     */
    deleteTicketsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteTickets.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteTickets.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/tickets`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete tickets from a reservation. <p><strong>OperationId:</strong>deleteTickets</p>
     * Delete tickets
     */
    deleteTickets(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteTicketsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to delete Transaction Diversions. <p><strong>OperationId:</strong>deleteTransactionDiversions</p>
     * Delete Transaction Diversions
     */
    deleteTransactionDiversionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteTransactionDiversions.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteTransactionDiversions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/transactionDiversions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete Transaction Diversions. <p><strong>OperationId:</strong>deleteTransactionDiversions</p>
     * Delete Transaction Diversions
     */
    deleteTransactionDiversions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteTransactionDiversionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will enable you to delete an upsell from a reservation. There may be reservation policies that might prevent an upsell from being deleted and as such an appropriate response will be returned. <p><strong>OperationId:</strong>deleteUpsell</p>
     * Delete a Reservation Upsell
     */
    deleteUpsellRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling deleteUpsell.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteUpsell.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/upsell`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API will enable you to delete an upsell from a reservation. There may be reservation policies that might prevent an upsell from being deleted and as such an appropriate response will be returned. <p><strong>OperationId:</strong>deleteUpsell</p>
     * Delete a Reservation Upsell
     */
    deleteUpsell(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteUpsellRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the alert notices including global alerts for a reservation. <p><strong>OperationId:</strong>getAlertNotices</p>
     * Fetch Alert Notices
     */
    getAlertNoticesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getAlertNotices.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getAlertNotices.');
            }
            const queryParameters = {};
            if (requestParameters.alertArea !== undefined) {
                queryParameters['alertArea'] = requestParameters.alertArea;
            }
            if (requestParameters.welcomeOffer !== undefined) {
                queryParameters['welcomeOffer'] = requestParameters.welcomeOffer;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/alerts`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AlertsFromJSON)(jsonValue));
        });
    }
    /**
     * Get the alert notices including global alerts for a reservation. <p><strong>OperationId:</strong>getAlertNotices</p>
     * Fetch Alert Notices
     */
    getAlertNotices(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAlertNoticesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get award upgrades for a specific property. <p><strong>OperationId:</strong>getAwardUpgrades</p>
     * Get Award Upgrades
     */
    getAwardUpgradesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getAwardUpgrades.');
            }
            const queryParameters = {};
            if (requestParameters.profileId !== undefined) {
                queryParameters['profileId'] = requestParameters.profileId;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.profileIdType !== undefined) {
                queryParameters['profileIdType'] = requestParameters.profileIdType;
            }
            if (requestParameters.membershipType !== undefined) {
                queryParameters['membershipType'] = requestParameters.membershipType;
            }
            if (requestParameters.membershipCardNo !== undefined) {
                queryParameters['membershipCardNo'] = requestParameters.membershipCardNo;
            }
            if (requestParameters.membershipPoints !== undefined) {
                queryParameters['membershipPoints'] = requestParameters.membershipPoints;
            }
            if (requestParameters.id) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.reservationTimeSpanStartDate !== undefined) {
                queryParameters['reservationTimeSpanStartDate'] = requestParameters.reservationTimeSpanStartDate;
            }
            if (requestParameters.reservationTimeSpanEndDate !== undefined) {
                queryParameters['reservationTimeSpanEndDate'] = requestParameters.reservationTimeSpanEndDate;
            }
            if (requestParameters.reservationTimeSpanDuration !== undefined) {
                queryParameters['reservationTimeSpanDuration'] = requestParameters.reservationTimeSpanDuration;
            }
            if (requestParameters.numberOfRooms !== undefined) {
                queryParameters['numberOfRooms'] = requestParameters.numberOfRooms;
            }
            if (requestParameters.roomType !== undefined) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/awardUpgrades`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AwardUpgradesFromJSON)(jsonValue));
        });
    }
    /**
     * Get award upgrades for a specific property. <p><strong>OperationId:</strong>getAwardUpgrades</p>
     * Get Award Upgrades
     */
    getAwardUpgrades(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAwardUpgradesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get certificates and awards associated with the Reservation. <p><strong>OperationId:</strong>getAwards</p>
     * Fetch Awards
     */
    getAwardsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getAwards.');
            }
            const queryParameters = {};
            if (requestParameters.reservationId !== undefined) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/awards`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationAwardsFromJSON)(jsonValue));
        });
    }
    /**
     * Get certificates and awards associated with the Reservation. <p><strong>OperationId:</strong>getAwards</p>
     * Fetch Awards
     */
    getAwards(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAwardsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the Reservation Call History <p><strong>OperationId:</strong>getCallHistory</p>
     * Get the Reservation Call History
     */
    getCallHistoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getCallHistory.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCallHistory.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/calls`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CallHistoryFromJSON)(jsonValue));
        });
    }
    /**
     * Get the Reservation Call History <p><strong>OperationId:</strong>getCallHistory</p>
     * Get the Reservation Call History
     */
    getCallHistory(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCallHistoryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get call statistics. <p><strong>OperationId:</strong>getCallStatistics</p>
     * Get call statistics
     */
    getCallStatisticsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.end !== undefined) {
                queryParameters['end'] = requestParameters.end;
            }
            if (requestParameters.start !== undefined) {
                queryParameters['start'] = requestParameters.start;
            }
            if (requestParameters.domain !== undefined) {
                queryParameters['domain'] = requestParameters.domain;
            }
            if (requestParameters.appUserName) {
                queryParameters['appUserName'] = requestParameters.appUserName;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/calls/statistics`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CallStatisticsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get call statistics. <p><strong>OperationId:</strong>getCallStatistics</p>
     * Get call statistics
     */
    getCallStatistics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCallStatisticsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get cancellation history for a reservation. <p><strong>OperationId:</strong>getCancellationHistory</p>
     * Get cancellation history
     */
    getCancellationHistoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getCancellationHistory.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCancellationHistory.');
            }
            const queryParameters = {};
            if (requestParameters.hotelName !== undefined) {
                queryParameters['hotelName'] = requestParameters.hotelName;
            }
            if (requestParameters.roomStayStartDate !== undefined) {
                queryParameters['roomStayStartDate'] = requestParameters.roomStayStartDate;
            }
            if (requestParameters.roomStayEndDate !== undefined) {
                queryParameters['roomStayEndDate'] = requestParameters.roomStayEndDate;
            }
            if (requestParameters.roomStayDuration !== undefined) {
                queryParameters['roomStayDuration'] = requestParameters.roomStayDuration;
            }
            if (requestParameters.roomClass !== undefined) {
                queryParameters['roomClass'] = requestParameters.roomClass;
            }
            if (requestParameters.roomType !== undefined) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.numberOfRooms !== undefined) {
                queryParameters['numberOfRooms'] = requestParameters.numberOfRooms;
            }
            if (requestParameters.roomId !== undefined) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            if (requestParameters.ratePlanCode !== undefined) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.reservationBlockHotelId !== undefined) {
                queryParameters['reservationBlockHotelId'] = requestParameters.reservationBlockHotelId;
            }
            if (requestParameters.reservationBlockId) {
                queryParameters['reservationBlockId'] = requestParameters.reservationBlockId;
            }
            if (requestParameters.reservationBlockIdType) {
                queryParameters['reservationBlockIdType'] = requestParameters.reservationBlockIdType;
            }
            if (requestParameters.blockName !== undefined) {
                queryParameters['blockName'] = requestParameters.blockName;
            }
            if (requestParameters.bookingChannelCode !== undefined) {
                queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
            }
            if (requestParameters.linkCode !== undefined) {
                queryParameters['linkCode'] = requestParameters.linkCode;
            }
            if (requestParameters.onHold !== undefined) {
                queryParameters['onHold'] = requestParameters.onHold;
            }
            if (requestParameters.membershipAccountId !== undefined) {
                queryParameters['membershipAccountId'] = requestParameters.membershipAccountId;
            }
            if (requestParameters.membershipBonusCode !== undefined) {
                queryParameters['membershipBonusCode'] = requestParameters.membershipBonusCode;
            }
            if (requestParameters.membershipLevel !== undefined) {
                queryParameters['membershipLevel'] = requestParameters.membershipLevel;
            }
            if (requestParameters.membershipId !== undefined) {
                queryParameters['membershipId'] = requestParameters.membershipId;
            }
            if (requestParameters.lastStayDate !== undefined) {
                queryParameters['lastStayDate'] = requestParameters.lastStayDate;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/cancellationHistory`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CancellationHistoryFromJSON)(jsonValue));
        });
    }
    /**
     * Get cancellation history for a reservation. <p><strong>OperationId:</strong>getCancellationHistory</p>
     * Get cancellation history
     */
    getCancellationHistory(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCancellationHistoryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of Reservations for which confirmation letters need to be sent. <p><strong>OperationId:</strong>getConfirmationLetters</p>
     * Fetch Confirmation Letters
     */
    getConfirmationLettersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getConfirmationLetters.');
            }
            const queryParameters = {};
            if (requestParameters.notAttached !== undefined) {
                queryParameters['notAttached'] = requestParameters.notAttached;
            }
            if (requestParameters.pending !== undefined) {
                queryParameters['pending'] = requestParameters.pending;
            }
            if (requestParameters.sent !== undefined) {
                queryParameters['sent'] = requestParameters.sent;
            }
            if (requestParameters.createdOnEndDate !== undefined) {
                queryParameters['createdOnEndDate'] = requestParameters.createdOnEndDate;
            }
            if (requestParameters.createdOnStartDate !== undefined) {
                queryParameters['createdOnStartDate'] = requestParameters.createdOnStartDate;
            }
            if (requestParameters.arrivalEndDate !== undefined) {
                queryParameters['arrivalEndDate'] = requestParameters.arrivalEndDate;
            }
            if (requestParameters.arrivalStartDate !== undefined) {
                queryParameters['arrivalStartDate'] = requestParameters.arrivalStartDate;
            }
            if (requestParameters.letterStyleId) {
                queryParameters['letterStyleId'] = requestParameters.letterStyleId;
            }
            if (requestParameters.letterStyle) {
                queryParameters['letterStyle'] = requestParameters.letterStyle;
            }
            if (requestParameters.letterStyleIdType) {
                queryParameters['letterStyleIdType'] = requestParameters.letterStyleIdType;
            }
            if (requestParameters.reservationGuestId !== undefined) {
                queryParameters['reservationGuestId'] = requestParameters.reservationGuestId;
            }
            if (requestParameters.reservationGuestIdType !== undefined) {
                queryParameters['reservationGuestIdType'] = requestParameters.reservationGuestIdType;
            }
            if (requestParameters.membershipId !== undefined) {
                queryParameters['membershipId'] = requestParameters.membershipId;
            }
            if (requestParameters.membershipLevelCode) {
                queryParameters['membershipLevelCode'] = requestParameters.membershipLevelCode;
            }
            if (requestParameters.membershipTypeCode) {
                queryParameters['membershipTypeCode'] = requestParameters.membershipTypeCode;
            }
            if (requestParameters.surname !== undefined) {
                queryParameters['surname'] = requestParameters.surname;
            }
            if (requestParameters.givenName !== undefined) {
                queryParameters['givenName'] = requestParameters.givenName;
            }
            if (requestParameters.blockHotelId !== undefined) {
                queryParameters['blockHotelId'] = requestParameters.blockHotelId;
            }
            if (requestParameters.blockId) {
                queryParameters['blockId'] = requestParameters.blockId;
            }
            if (requestParameters.blockIdType) {
                queryParameters['blockIdType'] = requestParameters.blockIdType;
            }
            if (requestParameters.blockName !== undefined) {
                queryParameters['blockName'] = requestParameters.blockName;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/confirmationLetters`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationConfirmationLettersFromJSON)(jsonValue));
        });
    }
    /**
     * Get a list of Reservations for which confirmation letters need to be sent. <p><strong>OperationId:</strong>getConfirmationLetters</p>
     * Fetch Confirmation Letters
     */
    getConfirmationLetters(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getConfirmationLettersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the Reservation Ecoupons. <p><strong>OperationId:</strong>getECoupons</p>
     * Get Reservation Ecoupons
     */
    getECouponsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getECoupons.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getECoupons.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/eCoupons`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ECouponsFromJSON)(jsonValue));
        });
    }
    /**
     * Get the Reservation Ecoupons. <p><strong>OperationId:</strong>getECoupons</p>
     * Get Reservation Ecoupons
     */
    getECoupons(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getECouponsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get external system delivery history. <p><strong>OperationId:</strong>getExternalSystemDeliveryHistory</p>
     * Get External system delivery history
     */
    getExternalSystemDeliveryHistoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getExternalSystemDeliveryHistory.');
            }
            const queryParameters = {};
            if (requestParameters.reservationId !== undefined) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.reservationIdType !== undefined) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/fetchExternalSystemDeliveryHistory`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DeliveryHistoryLogFromJSON)(jsonValue));
        });
    }
    /**
     * Get external system delivery history. <p><strong>OperationId:</strong>getExternalSystemDeliveryHistory</p>
     * Get External system delivery history
     */
    getExternalSystemDeliveryHistory(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getExternalSystemDeliveryHistoryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getExternalSystemReservations</p>
     * Get Reservations for a hotel
     */
    getExternalSystemReservationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling getExternalSystemReservations.');
            }
            if (requestParameters.externalReferenceList === null || requestParameters.externalReferenceList === undefined) {
                throw new runtime.RequiredError('externalReferenceList', 'Required parameter requestParameters.externalReferenceList was null or undefined when calling getExternalSystemReservations.');
            }
            const queryParameters = {};
            if (requestParameters.externalReferenceList) {
                queryParameters['externalReferenceList'] = requestParameters.externalReferenceList;
            }
            if (requestParameters.recentlyAccessed !== undefined) {
                queryParameters['recentlyAccessed'] = requestParameters.recentlyAccessed;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.searchType !== undefined) {
                queryParameters['searchType'] = requestParameters.searchType;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.text !== undefined) {
                queryParameters['text'] = requestParameters.text;
            }
            if (requestParameters.arrivalEndDate !== undefined) {
                queryParameters['arrivalEndDate'] = requestParameters.arrivalEndDate;
            }
            if (requestParameters.arrivalStartDate !== undefined) {
                queryParameters['arrivalStartDate'] = requestParameters.arrivalStartDate;
            }
            if (requestParameters.departureEndDate !== undefined) {
                queryParameters['departureEndDate'] = requestParameters.departureEndDate;
            }
            if (requestParameters.departureStartDate !== undefined) {
                queryParameters['departureStartDate'] = requestParameters.departureStartDate;
            }
            if (requestParameters.expectedArrivalStartTime !== undefined) {
                queryParameters['expectedArrivalStartTime'] = requestParameters.expectedArrivalStartTime;
            }
            if (requestParameters.expectedArrivalEndTime !== undefined) {
                queryParameters['expectedArrivalEndTime'] = requestParameters.expectedArrivalEndTime;
            }
            if (requestParameters.expectedReturnEndTime !== undefined) {
                queryParameters['expectedReturnEndTime'] = requestParameters.expectedReturnEndTime;
            }
            if (requestParameters.expectedReturnStartTime !== undefined) {
                queryParameters['expectedReturnStartTime'] = requestParameters.expectedReturnStartTime;
            }
            if (requestParameters.companyNames) {
                queryParameters['companyNames'] = requestParameters.companyNames;
            }
            if (requestParameters.travelAgentIds) {
                queryParameters['travelAgentIds'] = requestParameters.travelAgentIds;
            }
            if (requestParameters.companyIds) {
                queryParameters['companyIds'] = requestParameters.companyIds;
            }
            if (requestParameters.sourceIds) {
                queryParameters['sourceIds'] = requestParameters.sourceIds;
            }
            if (requestParameters.contactIds) {
                queryParameters['contactIds'] = requestParameters.contactIds;
            }
            if (requestParameters.groupIds) {
                queryParameters['groupIds'] = requestParameters.groupIds;
            }
            if (requestParameters.billingContactIds) {
                queryParameters['billingContactIds'] = requestParameters.billingContactIds;
            }
            if (requestParameters.profileIds) {
                queryParameters['profileIds'] = requestParameters.profileIds;
            }
            if (requestParameters.membershipCardNumber !== undefined) {
                queryParameters['membershipCardNumber'] = requestParameters.membershipCardNumber;
            }
            if (requestParameters.membershipLevels) {
                queryParameters['membershipLevels'] = requestParameters.membershipLevels;
            }
            if (requestParameters.membershipTypes) {
                queryParameters['membershipTypes'] = requestParameters.membershipTypes;
            }
            if (requestParameters.surname !== undefined) {
                queryParameters['surname'] = requestParameters.surname;
            }
            if (requestParameters.givenName !== undefined) {
                queryParameters['givenName'] = requestParameters.givenName;
            }
            if (requestParameters.anyVIPStatus !== undefined) {
                queryParameters['anyVIPStatus'] = requestParameters.anyVIPStatus;
            }
            if (requestParameters.vipCodes) {
                queryParameters['vipCodes'] = requestParameters.vipCodes;
            }
            if (requestParameters.guaranteeCode !== undefined) {
                queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
            }
            if (requestParameters.paymentMethod !== undefined) {
                queryParameters['paymentMethod'] = requestParameters.paymentMethod;
            }
            if (requestParameters.discountApplied !== undefined) {
                queryParameters['discountApplied'] = requestParameters.discountApplied;
            }
            if (requestParameters.user) {
                queryParameters['user'] = requestParameters.user;
            }
            if (requestParameters.createdBy !== undefined) {
                queryParameters['createdBy'] = requestParameters.createdBy;
            }
            if (requestParameters.cancelledByList) {
                queryParameters['cancelledByList'] = requestParameters.cancelledByList;
            }
            if (requestParameters.cancelledOn !== undefined) {
                queryParameters['cancelledOn'] = requestParameters.cancelledOn;
            }
            if (requestParameters.ratePlanCodes) {
                queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
            }
            if (requestParameters.sourceCodes) {
                queryParameters['sourceCodes'] = requestParameters.sourceCodes;
            }
            if (requestParameters.marketCodes) {
                queryParameters['marketCodes'] = requestParameters.marketCodes;
            }
            if (requestParameters.excludeBlockReservations !== undefined) {
                queryParameters['excludeBlockReservations'] = requestParameters.excludeBlockReservations;
            }
            if (requestParameters.blockName !== undefined) {
                queryParameters['blockName'] = requestParameters.blockName;
            }
            if (requestParameters.blockIds) {
                queryParameters['blockIds'] = requestParameters.blockIds;
            }
            if (requestParameters.blockCodes) {
                queryParameters['blockCodes'] = requestParameters.blockCodes;
            }
            if (requestParameters.customReference !== undefined) {
                queryParameters['customReference'] = requestParameters.customReference;
            }
            if (requestParameters.recordLocator !== undefined) {
                queryParameters['recordLocator'] = requestParameters.recordLocator;
            }
            if (requestParameters.orderBy) {
                queryParameters['orderBy'] = requestParameters.orderBy;
            }
            if (requestParameters.sortOrder) {
                queryParameters['sortOrder'] = requestParameters.sortOrder;
            }
            if (requestParameters.roomAssignedOnly !== undefined) {
                queryParameters['roomAssignedOnly'] = requestParameters.roomAssignedOnly;
            }
            if (requestParameters.roomUnassignedOnly !== undefined) {
                queryParameters['roomUnassignedOnly'] = requestParameters.roomUnassignedOnly;
            }
            if (requestParameters.roomId !== undefined) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            if (requestParameters.roomType) {
                queryParameters['roomType'] = requestParameters.roomType.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.roomFeatures) {
                queryParameters['roomFeatures'] = requestParameters.roomFeatures;
            }
            if (requestParameters.roomSpecials) {
                queryParameters['roomSpecials'] = requestParameters.roomSpecials;
            }
            if (requestParameters.roomSmokingPreference !== undefined) {
                queryParameters['roomSmokingPreference'] = requestParameters.roomSmokingPreference;
            }
            if (requestParameters.roomFloorPreferences) {
                queryParameters['roomFloorPreferences'] = requestParameters.roomFloorPreferences;
            }
            if (requestParameters.housekeepingRoomStatuses) {
                queryParameters['housekeepingRoomStatuses'] = requestParameters.housekeepingRoomStatuses;
            }
            if (requestParameters.roomClasses) {
                queryParameters['roomClasses'] = requestParameters.roomClasses;
            }
            if (requestParameters.roomRangeFrom !== undefined) {
                queryParameters['roomRangeFrom'] = requestParameters.roomRangeFrom;
            }
            if (requestParameters.roomRangeTo !== undefined) {
                queryParameters['roomRangeTo'] = requestParameters.roomRangeTo;
            }
            if (requestParameters.communication !== undefined) {
                queryParameters['communication'] = requestParameters.communication;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            if (requestParameters.allowPreRegistration !== undefined) {
                queryParameters['allowPreRegistration'] = requestParameters.allowPreRegistration;
            }
            if (requestParameters.hasDepositBalance !== undefined) {
                queryParameters['hasDepositBalance'] = requestParameters.hasDepositBalance;
            }
            if (requestParameters.hasOpenBalance !== undefined) {
                queryParameters['hasOpenBalance'] = requestParameters.hasOpenBalance;
            }
            if (requestParameters.hasOpenFolio !== undefined) {
                queryParameters['hasOpenFolio'] = requestParameters.hasOpenFolio;
            }
            if (requestParameters.includeScheduledCheckOut !== undefined) {
                queryParameters['includeScheduledCheckOut'] = requestParameters.includeScheduledCheckOut;
            }
            if (requestParameters.linkedOnly !== undefined) {
                queryParameters['linkedOnly'] = requestParameters.linkedOnly;
            }
            if (requestParameters.unlinkedOnly !== undefined) {
                queryParameters['unlinkedOnly'] = requestParameters.unlinkedOnly;
            }
            if (requestParameters.actualArrivals !== undefined) {
                queryParameters['actualArrivals'] = requestParameters.actualArrivals;
            }
            if (requestParameters.actualDepartures !== undefined) {
                queryParameters['actualDepartures'] = requestParameters.actualDepartures;
            }
            if (requestParameters.complimentaryReservations !== undefined) {
                queryParameters['complimentaryReservations'] = requestParameters.complimentaryReservations;
            }
            if (requestParameters.dayOfArrivalCancels !== undefined) {
                queryParameters['dayOfArrivalCancels'] = requestParameters.dayOfArrivalCancels;
            }
            if (requestParameters.dayUse !== undefined) {
                queryParameters['dayUse'] = requestParameters.dayUse;
            }
            if (requestParameters.earlyDepartures !== undefined) {
                queryParameters['earlyDepartures'] = requestParameters.earlyDepartures;
            }
            if (requestParameters.expectedArrivals !== undefined) {
                queryParameters['expectedArrivals'] = requestParameters.expectedArrivals;
            }
            if (requestParameters.expectedDepartures !== undefined) {
                queryParameters['expectedDepartures'] = requestParameters.expectedDepartures;
            }
            if (requestParameters.extendedStays !== undefined) {
                queryParameters['extendedStays'] = requestParameters.extendedStays;
            }
            if (requestParameters.houseUseReservations !== undefined) {
                queryParameters['houseUseReservations'] = requestParameters.houseUseReservations;
            }
            if (requestParameters.stayovers !== undefined) {
                queryParameters['stayovers'] = requestParameters.stayovers;
            }
            if (requestParameters.stayDate !== undefined) {
                queryParameters['stayDate'] = requestParameters.stayDate;
            }
            if (requestParameters.roomRoutingId !== undefined) {
                queryParameters['roomRoutingId'] = requestParameters.roomRoutingId;
            }
            if (requestParameters.excludePseudoRoomReservations !== undefined) {
                queryParameters['excludePseudoRoomReservations'] = requestParameters.excludePseudoRoomReservations;
            }
            if (requestParameters.excludeReservationIds) {
                queryParameters['excludeReservationIds'] = requestParameters.excludeReservationIds;
            }
            if (requestParameters.excludeVIPStatusCodes) {
                queryParameters['excludeVIPStatusCodes'] = requestParameters.excludeVIPStatusCodes;
            }
            if (requestParameters.excludeSpecials) {
                queryParameters['excludeSpecials'] = requestParameters.excludeSpecials;
            }
            if (requestParameters.excludeFloorPreferences) {
                queryParameters['excludeFloorPreferences'] = requestParameters.excludeFloorPreferences;
            }
            if (requestParameters.excludeAdvanceCheckedIn !== undefined) {
                queryParameters['excludeAdvanceCheckedIn'] = requestParameters.excludeAdvanceCheckedIn;
            }
            if (requestParameters.excludeRoomFeatures) {
                queryParameters['excludeRoomFeatures'] = requestParameters.excludeRoomFeatures;
            }
            if (requestParameters.playerId !== undefined) {
                queryParameters['playerId'] = requestParameters.playerId;
            }
            if (requestParameters.gamingBalanceFrom !== undefined) {
                queryParameters['gamingBalanceFrom'] = requestParameters.gamingBalanceFrom;
            }
            if (requestParameters.gamingBalanceTo !== undefined) {
                queryParameters['gamingBalanceTo'] = requestParameters.gamingBalanceTo;
            }
            if (requestParameters.compAccountingBalanceFrom !== undefined) {
                queryParameters['compAccountingBalanceFrom'] = requestParameters.compAccountingBalanceFrom;
            }
            if (requestParameters.compAccountingBalanceTo !== undefined) {
                queryParameters['compAccountingBalanceTo'] = requestParameters.compAccountingBalanceTo;
            }
            if (requestParameters.searchTypes) {
                queryParameters['searchTypes'] = requestParameters.searchTypes;
            }
            if (requestParameters.reservationStatuses) {
                queryParameters['reservationStatuses'] = requestParameters.reservationStatuses;
            }
            if (requestParameters.transportationCodes) {
                queryParameters['transportationCodes'] = requestParameters.transportationCodes;
            }
            if (requestParameters.roomReadyStatuses) {
                queryParameters['roomReadyStatuses'] = requestParameters.roomReadyStatuses;
            }
            if (requestParameters.checkoutMessageReceived !== undefined) {
                queryParameters['checkoutMessageReceived'] = requestParameters.checkoutMessageReceived;
            }
            if (requestParameters.optedForCommunication !== undefined) {
                queryParameters['optedForCommunication'] = requestParameters.optedForCommunication;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/reservations`.replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getExternalSystemReservations</p>
     * Get Reservations for a hotel
     */
    getExternalSystemReservations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getExternalSystemReservationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to identify whether there are future reservations or business block for the profile id. <p><strong>OperationId:</strong>getFutureReservationsOrBlocks</p>
     * Get Future Reservations on a profile
     */
    getFutureReservationsOrBlocksRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
                throw new runtime.RequiredError('profileId', 'Required parameter requestParameters.profileId was null or undefined when calling getFutureReservationsOrBlocks.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/profiles/{profileId}/reservations`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FutureReservationsOrBlocksDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to identify whether there are future reservations or business block for the profile id. <p><strong>OperationId:</strong>getFutureReservationsOrBlocks</p>
     * Get Future Reservations on a profile
     */
    getFutureReservationsOrBlocks(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFutureReservationsOrBlocksRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get guest messages which exist on a reservation. <p><strong>OperationId:</strong>getGuestMessages</p>
     * Get guest messages
     */
    getGuestMessagesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getGuestMessages.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.reservationId !== undefined) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.retrieveDeliveredMessages !== undefined) {
                queryParameters['retrieveDeliveredMessages'] = requestParameters.retrieveDeliveredMessages;
            }
            if (requestParameters.room !== undefined) {
                queryParameters['room'] = requestParameters.room;
            }
            if (requestParameters.travelAgent !== undefined) {
                queryParameters['travelAgent'] = requestParameters.travelAgent;
            }
            if (requestParameters.company !== undefined) {
                queryParameters['company'] = requestParameters.company;
            }
            if (requestParameters.group !== undefined) {
                queryParameters['group'] = requestParameters.group;
            }
            if (requestParameters.source !== undefined) {
                queryParameters['source'] = requestParameters.source;
            }
            if (requestParameters.reservationStatus !== undefined) {
                queryParameters['reservationStatus'] = requestParameters.reservationStatus;
            }
            if (requestParameters.retrieveUndeliveredMessages !== undefined) {
                queryParameters['retrieveUndeliveredMessages'] = requestParameters.retrieveUndeliveredMessages;
            }
            if (requestParameters.retrievePrintedMessages !== undefined) {
                queryParameters['retrievePrintedMessages'] = requestParameters.retrievePrintedMessages;
            }
            if (requestParameters.retrieveTextedMessages !== undefined) {
                queryParameters['retrieveTextedMessages'] = requestParameters.retrieveTextedMessages;
            }
            if (requestParameters.blockName !== undefined) {
                queryParameters['blockName'] = requestParameters.blockName;
            }
            if (requestParameters.recipientName !== undefined) {
                queryParameters['recipientName'] = requestParameters.recipientName;
            }
            if (requestParameters.confirmationNo !== undefined) {
                queryParameters['confirmationNo'] = requestParameters.confirmationNo;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/guestMessages`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GuestMessagesFromJSON)(jsonValue));
        });
    }
    /**
     * Get guest messages which exist on a reservation. <p><strong>OperationId:</strong>getGuestMessages</p>
     * Get guest messages
     */
    getGuestMessages(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getGuestMessagesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to search reservations in a hotel, filtering by whether they are Day Use, Due In, Checked In, Due Out, Checked Out, Cancelled, No Show and Complimentary or any other of the large selection of search criteria. It also serves as an entry way for changing existing reservation information, canceling reservations, checking in guests, canceling check ins, etc. You can use further query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data.<p><strong>OperationId:</strong>getHotelReservations</p>
     * Get and search for reservations in a hotel
     */
    getHotelReservationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getHotelReservations.');
            }
            const queryParameters = {};
            if (requestParameters.keyTrack2 !== undefined) {
                queryParameters['keyTrack2'] = requestParameters.keyTrack2;
            }
            if (requestParameters.discrepancy !== undefined) {
                queryParameters['discrepancy'] = requestParameters.discrepancy;
            }
            if (requestParameters.recentlyAccessed !== undefined) {
                queryParameters['recentlyAccessed'] = requestParameters.recentlyAccessed;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.searchType !== undefined) {
                queryParameters['searchType'] = requestParameters.searchType;
            }
            if (requestParameters.text !== undefined) {
                queryParameters['text'] = requestParameters.text;
            }
            if (requestParameters.reservationIdList) {
                queryParameters['reservationIdList'] = requestParameters.reservationIdList;
            }
            if (requestParameters.confirmationNumberList) {
                queryParameters['confirmationNumberList'] = requestParameters.confirmationNumberList;
            }
            if (requestParameters.cancellationNumberList) {
                queryParameters['cancellationNumberList'] = requestParameters.cancellationNumberList;
            }
            if (requestParameters.externalReferenceIds) {
                queryParameters['externalReferenceIds'] = requestParameters.externalReferenceIds;
            }
            if (requestParameters.externalSystemCodes) {
                queryParameters['externalSystemCodes'] = requestParameters.externalSystemCodes;
            }
            if (requestParameters.arrivalEndDate !== undefined) {
                queryParameters['arrivalEndDate'] = requestParameters.arrivalEndDate;
            }
            if (requestParameters.arrivalStartDate !== undefined) {
                queryParameters['arrivalStartDate'] = requestParameters.arrivalStartDate;
            }
            if (requestParameters.departureEndDate !== undefined) {
                queryParameters['departureEndDate'] = requestParameters.departureEndDate;
            }
            if (requestParameters.departureStartDate !== undefined) {
                queryParameters['departureStartDate'] = requestParameters.departureStartDate;
            }
            if (requestParameters.stayOnStartDate !== undefined) {
                queryParameters['stayOnStartDate'] = requestParameters.stayOnStartDate;
            }
            if (requestParameters.createdOnStartDate !== undefined) {
                queryParameters['createdOnStartDate'] = requestParameters.createdOnStartDate;
            }
            if (requestParameters.expectedArrivalEndTime !== undefined) {
                queryParameters['expectedArrivalEndTime'] = requestParameters.expectedArrivalEndTime;
            }
            if (requestParameters.expectedArrivalStartTime !== undefined) {
                queryParameters['expectedArrivalStartTime'] = requestParameters.expectedArrivalStartTime;
            }
            if (requestParameters.depositDueEndDate !== undefined) {
                queryParameters['depositDueEndDate'] = requestParameters.depositDueEndDate;
            }
            if (requestParameters.depositDueStartDate !== undefined) {
                queryParameters['depositDueStartDate'] = requestParameters.depositDueStartDate;
            }
            if (requestParameters.expectedReturnEndTime !== undefined) {
                queryParameters['expectedReturnEndTime'] = requestParameters.expectedReturnEndTime;
            }
            if (requestParameters.expectedReturnStartTime !== undefined) {
                queryParameters['expectedReturnStartTime'] = requestParameters.expectedReturnStartTime;
            }
            if (requestParameters.companyNames) {
                queryParameters['companyNames'] = requestParameters.companyNames;
            }
            if (requestParameters.sourceNames) {
                queryParameters['sourceNames'] = requestParameters.sourceNames;
            }
            if (requestParameters.travelAgentNames) {
                queryParameters['travelAgentNames'] = requestParameters.travelAgentNames;
            }
            if (requestParameters.groupNames) {
                queryParameters['groupNames'] = requestParameters.groupNames;
            }
            if (requestParameters.travelAgentIds) {
                queryParameters['travelAgentIds'] = requestParameters.travelAgentIds;
            }
            if (requestParameters.companyIds) {
                queryParameters['companyIds'] = requestParameters.companyIds;
            }
            if (requestParameters.sourceIds) {
                queryParameters['sourceIds'] = requestParameters.sourceIds;
            }
            if (requestParameters.contactIds) {
                queryParameters['contactIds'] = requestParameters.contactIds;
            }
            if (requestParameters.groupIds) {
                queryParameters['groupIds'] = requestParameters.groupIds;
            }
            if (requestParameters.billingContactIds) {
                queryParameters['billingContactIds'] = requestParameters.billingContactIds;
            }
            if (requestParameters.profileId !== undefined) {
                queryParameters['profileId'] = requestParameters.profileId;
            }
            if (requestParameters.commissionPaid !== undefined) {
                queryParameters['commissionPaid'] = requestParameters.commissionPaid;
            }
            if (requestParameters.membershipCardNumber !== undefined) {
                queryParameters['membershipCardNumber'] = requestParameters.membershipCardNumber;
            }
            if (requestParameters.membershipLevels) {
                queryParameters['membershipLevels'] = requestParameters.membershipLevels;
            }
            if (requestParameters.membershipTypes) {
                queryParameters['membershipTypes'] = requestParameters.membershipTypes;
            }
            if (requestParameters.surname !== undefined) {
                queryParameters['surname'] = requestParameters.surname;
            }
            if (requestParameters.givenName !== undefined) {
                queryParameters['givenName'] = requestParameters.givenName;
            }
            if (requestParameters.fromName !== undefined) {
                queryParameters['fromName'] = requestParameters.fromName;
            }
            if (requestParameters.toName !== undefined) {
                queryParameters['toName'] = requestParameters.toName;
            }
            if (requestParameters.anyVIPStatus !== undefined) {
                queryParameters['anyVIPStatus'] = requestParameters.anyVIPStatus;
            }
            if (requestParameters.vipCodes) {
                queryParameters['vipCodes'] = requestParameters.vipCodes;
            }
            if (requestParameters.guaranteeCode !== undefined) {
                queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
            }
            if (requestParameters.paymentMethod !== undefined) {
                queryParameters['paymentMethod'] = requestParameters.paymentMethod;
            }
            if (requestParameters.discountApplied !== undefined) {
                queryParameters['discountApplied'] = requestParameters.discountApplied;
            }
            if (requestParameters.user) {
                queryParameters['user'] = requestParameters.user;
            }
            if (requestParameters.createdBy !== undefined) {
                queryParameters['createdBy'] = requestParameters.createdBy;
            }
            if (requestParameters.cancelledByList) {
                queryParameters['cancelledByList'] = requestParameters.cancelledByList;
            }
            if (requestParameters.cancelledOn !== undefined) {
                queryParameters['cancelledOn'] = requestParameters.cancelledOn;
            }
            if (requestParameters.ratePlanCodes) {
                queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
            }
            if (requestParameters.sourceCodes) {
                queryParameters['sourceCodes'] = requestParameters.sourceCodes;
            }
            if (requestParameters.marketCodes) {
                queryParameters['marketCodes'] = requestParameters.marketCodes;
            }
            if (requestParameters.excludeBlockReservations !== undefined) {
                queryParameters['excludeBlockReservations'] = requestParameters.excludeBlockReservations;
            }
            if (requestParameters.blockCriteriaHotelCode !== undefined) {
                queryParameters['blockCriteriaHotelCode'] = requestParameters.blockCriteriaHotelCode;
            }
            if (requestParameters.blockName !== undefined) {
                queryParameters['blockName'] = requestParameters.blockName;
            }
            if (requestParameters.blockIds) {
                queryParameters['blockIds'] = requestParameters.blockIds;
            }
            if (requestParameters.blockCodes) {
                queryParameters['blockCodes'] = requestParameters.blockCodes;
            }
            if (requestParameters.customReference !== undefined) {
                queryParameters['customReference'] = requestParameters.customReference;
            }
            if (requestParameters.recordLocator !== undefined) {
                queryParameters['recordLocator'] = requestParameters.recordLocator;
            }
            if (requestParameters.orderBy) {
                queryParameters['orderBy'] = requestParameters.orderBy;
            }
            if (requestParameters.sortOrder) {
                queryParameters['sortOrder'] = requestParameters.sortOrder;
            }
            if (requestParameters.roomAssignedOnly !== undefined) {
                queryParameters['roomAssignedOnly'] = requestParameters.roomAssignedOnly;
            }
            if (requestParameters.roomUnassignedOnly !== undefined) {
                queryParameters['roomUnassignedOnly'] = requestParameters.roomUnassignedOnly;
            }
            if (requestParameters.roomId !== undefined) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            if (requestParameters.roomType) {
                queryParameters['roomType'] = requestParameters.roomType.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.roomFeatures) {
                queryParameters['roomFeatures'] = requestParameters.roomFeatures;
            }
            if (requestParameters.roomSpecials) {
                queryParameters['roomSpecials'] = requestParameters.roomSpecials;
            }
            if (requestParameters.roomSmokingPreference !== undefined) {
                queryParameters['roomSmokingPreference'] = requestParameters.roomSmokingPreference;
            }
            if (requestParameters.roomFloorPreferences) {
                queryParameters['roomFloorPreferences'] = requestParameters.roomFloorPreferences;
            }
            if (requestParameters.housekeepingRoomStatuses) {
                queryParameters['housekeepingRoomStatuses'] = requestParameters.housekeepingRoomStatuses;
            }
            if (requestParameters.roomClasses) {
                queryParameters['roomClasses'] = requestParameters.roomClasses;
            }
            if (requestParameters.roomRangeFrom !== undefined) {
                queryParameters['roomRangeFrom'] = requestParameters.roomRangeFrom;
            }
            if (requestParameters.roomRangeTo !== undefined) {
                queryParameters['roomRangeTo'] = requestParameters.roomRangeTo;
            }
            if (requestParameters.communication !== undefined) {
                queryParameters['communication'] = requestParameters.communication;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            if (requestParameters.allowedReservationActions) {
                queryParameters['allowedReservationActions'] = requestParameters.allowedReservationActions;
            }
            if (requestParameters.allowPreRegistration !== undefined) {
                queryParameters['allowPreRegistration'] = requestParameters.allowPreRegistration;
            }
            if (requestParameters.excludeNoPost !== undefined) {
                queryParameters['excludeNoPost'] = requestParameters.excludeNoPost;
            }
            if (requestParameters.excludePMRooms !== undefined) {
                queryParameters['excludePMRooms'] = requestParameters.excludePMRooms;
            }
            if (requestParameters.hasDepositBalance !== undefined) {
                queryParameters['hasDepositBalance'] = requestParameters.hasDepositBalance;
            }
            if (requestParameters.hasOpenBalance !== undefined) {
                queryParameters['hasOpenBalance'] = requestParameters.hasOpenBalance;
            }
            if (requestParameters.hasOpenFolio !== undefined) {
                queryParameters['hasOpenFolio'] = requestParameters.hasOpenFolio;
            }
            if (requestParameters.includeScheduledCheckOut !== undefined) {
                queryParameters['includeScheduledCheckOut'] = requestParameters.includeScheduledCheckOut;
            }
            if (requestParameters.linkedOnly !== undefined) {
                queryParameters['linkedOnly'] = requestParameters.linkedOnly;
            }
            if (requestParameters.unlinkedOnly !== undefined) {
                queryParameters['unlinkedOnly'] = requestParameters.unlinkedOnly;
            }
            if (requestParameters.actualArrivals !== undefined) {
                queryParameters['actualArrivals'] = requestParameters.actualArrivals;
            }
            if (requestParameters.actualDepartures !== undefined) {
                queryParameters['actualDepartures'] = requestParameters.actualDepartures;
            }
            if (requestParameters.complimentaryReservations !== undefined) {
                queryParameters['complimentaryReservations'] = requestParameters.complimentaryReservations;
            }
            if (requestParameters.dayOfArrivalCancels !== undefined) {
                queryParameters['dayOfArrivalCancels'] = requestParameters.dayOfArrivalCancels;
            }
            if (requestParameters.dayUse !== undefined) {
                queryParameters['dayUse'] = requestParameters.dayUse;
            }
            if (requestParameters.earlyDepartures !== undefined) {
                queryParameters['earlyDepartures'] = requestParameters.earlyDepartures;
            }
            if (requestParameters.expectedArrivals !== undefined) {
                queryParameters['expectedArrivals'] = requestParameters.expectedArrivals;
            }
            if (requestParameters.expectedDepartures !== undefined) {
                queryParameters['expectedDepartures'] = requestParameters.expectedDepartures;
            }
            if (requestParameters.extendedStays !== undefined) {
                queryParameters['extendedStays'] = requestParameters.extendedStays;
            }
            if (requestParameters.houseUseReservations !== undefined) {
                queryParameters['houseUseReservations'] = requestParameters.houseUseReservations;
            }
            if (requestParameters.stayovers !== undefined) {
                queryParameters['stayovers'] = requestParameters.stayovers;
            }
            if (requestParameters.stayDate !== undefined) {
                queryParameters['stayDate'] = requestParameters.stayDate;
            }
            if (requestParameters.roomRoutingId !== undefined) {
                queryParameters['roomRoutingId'] = requestParameters.roomRoutingId;
            }
            if (requestParameters.periodicFolio !== undefined) {
                queryParameters['periodicFolio'] = requestParameters.periodicFolio;
            }
            if (requestParameters.folioSettlementTypes !== undefined) {
                queryParameters['folioSettlementTypes'] = requestParameters.folioSettlementTypes;
            }
            if (requestParameters.defaultDays !== undefined) {
                queryParameters['defaultDays'] = requestParameters.defaultDays;
            }
            if (requestParameters.excludePseudoRoomReservations !== undefined) {
                queryParameters['excludePseudoRoomReservations'] = requestParameters.excludePseudoRoomReservations;
            }
            if (requestParameters.excludeReservationIds) {
                queryParameters['excludeReservationIds'] = requestParameters.excludeReservationIds;
            }
            if (requestParameters.excludeVIPStatusCodes) {
                queryParameters['excludeVIPStatusCodes'] = requestParameters.excludeVIPStatusCodes;
            }
            if (requestParameters.excludeSpecials) {
                queryParameters['excludeSpecials'] = requestParameters.excludeSpecials;
            }
            if (requestParameters.excludeFloorPreferences) {
                queryParameters['excludeFloorPreferences'] = requestParameters.excludeFloorPreferences;
            }
            if (requestParameters.excludeAdvanceCheckedIn !== undefined) {
                queryParameters['excludeAdvanceCheckedIn'] = requestParameters.excludeAdvanceCheckedIn;
            }
            if (requestParameters.excludeRoomFeatures) {
                queryParameters['excludeRoomFeatures'] = requestParameters.excludeRoomFeatures;
            }
            if (requestParameters.playerId !== undefined) {
                queryParameters['playerId'] = requestParameters.playerId;
            }
            if (requestParameters.gamingBalanceFrom !== undefined) {
                queryParameters['gamingBalanceFrom'] = requestParameters.gamingBalanceFrom;
            }
            if (requestParameters.gamingBalanceTo !== undefined) {
                queryParameters['gamingBalanceTo'] = requestParameters.gamingBalanceTo;
            }
            if (requestParameters.compAccountingBalanceFrom !== undefined) {
                queryParameters['compAccountingBalanceFrom'] = requestParameters.compAccountingBalanceFrom;
            }
            if (requestParameters.compAccountingBalanceTo !== undefined) {
                queryParameters['compAccountingBalanceTo'] = requestParameters.compAccountingBalanceTo;
            }
            if (requestParameters.searchTypes) {
                queryParameters['searchTypes'] = requestParameters.searchTypes;
            }
            if (requestParameters.reservationStatuses) {
                queryParameters['reservationStatuses'] = requestParameters.reservationStatuses;
            }
            if (requestParameters.transportationCodes) {
                queryParameters['transportationCodes'] = requestParameters.transportationCodes;
            }
            if (requestParameters.roomReadyStatuses) {
                queryParameters['roomReadyStatuses'] = requestParameters.roomReadyStatuses;
            }
            if (requestParameters.checkoutMessageReceived !== undefined) {
                queryParameters['checkoutMessageReceived'] = requestParameters.checkoutMessageReceived;
            }
            if (requestParameters.optedForCommunication !== undefined) {
                queryParameters['optedForCommunication'] = requestParameters.optedForCommunication;
            }
            if (requestParameters.swapShiftRoomReservationId !== undefined) {
                queryParameters['swapShiftRoomReservationId'] = requestParameters.swapShiftRoomReservationId;
            }
            if (requestParameters.roomSmokingPreferences) {
                queryParameters['roomSmokingPreferences'] = requestParameters.roomSmokingPreferences;
            }
            if (requestParameters.roomFeaturePreferences) {
                queryParameters['roomFeaturePreferences'] = requestParameters.roomFeaturePreferences;
            }
            if (requestParameters.roomsFloorPreferences) {
                queryParameters['roomsFloorPreferences'] = requestParameters.roomsFloorPreferences;
            }
            if (requestParameters.contactNames) {
                queryParameters['contactNames'] = requestParameters.contactNames;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to search reservations in a hotel, filtering by whether they are Day Use, Due In, Checked In, Due Out, Checked Out, Cancelled, No Show and Complimentary or any other of the large selection of search criteria. It also serves as an entry way for changing existing reservation information, canceling reservations, checking in guests, canceling check ins, etc. You can use further query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data.<p><strong>OperationId:</strong>getHotelReservations</p>
     * Get and search for reservations in a hotel
     */
    getHotelReservations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getHotelReservationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get linked Reservations for given Reservation. <p><strong>OperationId:</strong>getLinkedReservations</p>
     * Get linked Reservations
     */
    getLinkedReservationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getLinkedReservations.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getLinkedReservations.');
            }
            const queryParameters = {};
            if (requestParameters.additionalReservationId) {
                queryParameters['additionalReservationId'] = requestParameters.additionalReservationId;
            }
            if (requestParameters.additionalReservationIdType) {
                queryParameters['additionalReservationIdType'] = requestParameters.additionalReservationIdType;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/linked`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.LinkedHotelReservationsFromJSON)(jsonValue));
        });
    }
    /**
     * Get linked Reservations for given Reservation. <p><strong>OperationId:</strong>getLinkedReservations</p>
     * Get linked Reservations
     */
    getLinkedReservations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getLinkedReservationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Reservation summary for linked Reservation of given Reservation id. <p><strong>OperationId:</strong>getLinkedReservationsSummary</p>
     * Get Reservation summary for linked Reservation
     */
    getLinkedReservationsSummaryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getLinkedReservationsSummary.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getLinkedReservationsSummary.');
            }
            const queryParameters = {};
            if (requestParameters.additionalReservationId) {
                queryParameters['additionalReservationId'] = requestParameters.additionalReservationId;
            }
            if (requestParameters.additionalReservationIdType) {
                queryParameters['additionalReservationIdType'] = requestParameters.additionalReservationIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/linkedSummary`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.LinkedReservationsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Get Reservation summary for linked Reservation of given Reservation id. <p><strong>OperationId:</strong>getLinkedReservationsSummary</p>
     * Get Reservation summary for linked Reservation
     */
    getLinkedReservationsSummary(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getLinkedReservationsSummaryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the package availability for a hotel code and reservation id <p><strong>OperationId:</strong>getPackage</p>
     * Get Package
     */
    getPackageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getPackage.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getPackage.');
            }
            const queryParameters = {};
            if (requestParameters.postingRhythm !== undefined) {
                queryParameters['postingRhythm'] = requestParameters.postingRhythm;
            }
            if (requestParameters.productCode !== undefined) {
                queryParameters['productCode'] = requestParameters.productCode;
            }
            if (requestParameters.ratePlanCode !== undefined) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.reservationTimeSpanStartDate !== undefined) {
                queryParameters['reservationTimeSpanStartDate'] = requestParameters.reservationTimeSpanStartDate;
            }
            if (requestParameters.reservationTimeSpanEndDate !== undefined) {
                queryParameters['reservationTimeSpanEndDate'] = requestParameters.reservationTimeSpanEndDate;
            }
            if (requestParameters.packageTimeSpanStartDate !== undefined) {
                queryParameters['packageTimeSpanStartDate'] = requestParameters.packageTimeSpanStartDate;
            }
            if (requestParameters.packageTimeSpanEndDate !== undefined) {
                queryParameters['packageTimeSpanEndDate'] = requestParameters.packageTimeSpanEndDate;
            }
            if (requestParameters.packageQuantity !== undefined) {
                queryParameters['packageQuantity'] = requestParameters.packageQuantity;
            }
            if (requestParameters.packageExcludedQuantity !== undefined) {
                queryParameters['packageExcludedQuantity'] = requestParameters.packageExcludedQuantity;
            }
            if (requestParameters.reservationAdults !== undefined) {
                queryParameters['reservationAdults'] = requestParameters.reservationAdults;
            }
            if (requestParameters.reservationChildren !== undefined) {
                queryParameters['reservationChildren'] = requestParameters.reservationChildren;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/packages`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PackagesFromJSON)(jsonValue));
        });
    }
    /**
     * Get the package availability for a hotel code and reservation id <p><strong>OperationId:</strong>getPackage</p>
     * Get Package
     */
    getPackage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPackageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will return the payment method(s) that exist on a reservation. <p><strong>OperationId:</strong>getPaymentMethods</p>
     * Get a payment method
     */
    getPaymentMethodsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getPaymentMethods.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getPaymentMethods.');
            }
            const queryParameters = {};
            if (requestParameters.includeAmounts !== undefined) {
                queryParameters['includeAmounts'] = requestParameters.includeAmounts;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/paymentMethods`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationPaymentMethodsFromJSON)(jsonValue));
        });
    }
    /**
     * This API will return the payment method(s) that exist on a reservation. <p><strong>OperationId:</strong>getPaymentMethods</p>
     * Get a payment method
     */
    getPaymentMethods(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPaymentMethodsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get preArrival Member Reservations. <p><strong>OperationId:</strong>getPreArrivalMemberReservations</p>
     * Get preArrival Member Reservations
     */
    getPreArrivalMemberReservationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getPreArrivalMemberReservations.');
            }
            const queryParameters = {};
            if (requestParameters.end !== undefined) {
                queryParameters['end'] = requestParameters.end;
            }
            if (requestParameters.start !== undefined) {
                queryParameters['start'] = requestParameters.start;
            }
            if (requestParameters.membershipType !== undefined) {
                queryParameters['membershipType'] = requestParameters.membershipType;
            }
            if (requestParameters.externalReferenceType !== undefined) {
                queryParameters['externalReferenceType'] = requestParameters.externalReferenceType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/preArrivalMembersReservations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PreArrivalMemberReservationsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Get preArrival Member Reservations. <p><strong>OperationId:</strong>getPreArrivalMemberReservations</p>
     * Get preArrival Member Reservations
     */
    getPreArrivalMemberReservations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPreArrivalMemberReservationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get preConfigured Routing Instructions. <p><strong>OperationId:</strong>getPreConfiguredRoutingInstructions</p>
     * Get pre-Configured Routing Instructions
     */
    getPreConfiguredRoutingInstructionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getPreConfiguredRoutingInstructions.');
            }
            const queryParameters = {};
            if (requestParameters.rateCode !== undefined) {
                queryParameters['rateCode'] = requestParameters.rateCode;
            }
            if (requestParameters.promotionCodes) {
                queryParameters['promotionCodes'] = requestParameters.promotionCodes;
            }
            if (requestParameters.guestName !== undefined) {
                queryParameters['guestName'] = requestParameters.guestName;
            }
            if (requestParameters.guestIds) {
                queryParameters['guestIds'] = requestParameters.guestIds;
            }
            if (requestParameters.companyName !== undefined) {
                queryParameters['companyName'] = requestParameters.companyName;
            }
            if (requestParameters.companyIds) {
                queryParameters['companyIds'] = requestParameters.companyIds;
            }
            if (requestParameters.groupName !== undefined) {
                queryParameters['groupName'] = requestParameters.groupName;
            }
            if (requestParameters.groupIds) {
                queryParameters['groupIds'] = requestParameters.groupIds;
            }
            if (requestParameters.travelAgentName !== undefined) {
                queryParameters['travelAgentName'] = requestParameters.travelAgentName;
            }
            if (requestParameters.travelAgentIds) {
                queryParameters['travelAgentIds'] = requestParameters.travelAgentIds;
            }
            if (requestParameters.sourceName !== undefined) {
                queryParameters['sourceName'] = requestParameters.sourceName;
            }
            if (requestParameters.sourceIds) {
                queryParameters['sourceIds'] = requestParameters.sourceIds;
            }
            if (requestParameters.contactName !== undefined) {
                queryParameters['contactName'] = requestParameters.contactName;
            }
            if (requestParameters.contactIds) {
                queryParameters['contactIds'] = requestParameters.contactIds;
            }
            if (requestParameters.billingContactName !== undefined) {
                queryParameters['billingContactName'] = requestParameters.billingContactName;
            }
            if (requestParameters.billingContactIds) {
                queryParameters['billingContactIds'] = requestParameters.billingContactIds;
            }
            if (requestParameters.addresseeName !== undefined) {
                queryParameters['addresseeName'] = requestParameters.addresseeName;
            }
            if (requestParameters.addresseeIds) {
                queryParameters['addresseeIds'] = requestParameters.addresseeIds;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/preConfiguredRoutingInstructions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PreConfiguredRoutingInstructionsFromJSON)(jsonValue));
        });
    }
    /**
     * Get preConfigured Routing Instructions. <p><strong>OperationId:</strong>getPreConfiguredRoutingInstructions</p>
     * Get pre-Configured Routing Instructions
     */
    getPreConfiguredRoutingInstructions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPreConfiguredRoutingInstructionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to retrieve rate plan information including a breakdown of packages and taxes.<p><strong>OperationId:</strong>getRateInfo</p>
     * Get rate information
     */
    getRateInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRateInfo.');
            }
            const queryParameters = {};
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            if (requestParameters.summaryInfo !== undefined) {
                queryParameters['summaryInfo'] = requestParameters.summaryInfo;
            }
            if (requestParameters.criteriaStartDate !== undefined) {
                queryParameters['criteriaStartDate'] = requestParameters.criteriaStartDate;
            }
            if (requestParameters.criteriaEndDate !== undefined) {
                queryParameters['criteriaEndDate'] = requestParameters.criteriaEndDate;
            }
            if (requestParameters.adults !== undefined) {
                queryParameters['adults'] = requestParameters.adults;
            }
            if (requestParameters.children !== undefined) {
                queryParameters['children'] = requestParameters.children;
            }
            if (requestParameters.childAge) {
                queryParameters['childAge'] = requestParameters.childAge;
            }
            if (requestParameters.bucket1Count !== undefined) {
                queryParameters['bucket1Count'] = requestParameters.bucket1Count;
            }
            if (requestParameters.bucket2Count !== undefined) {
                queryParameters['bucket2Count'] = requestParameters.bucket2Count;
            }
            if (requestParameters.bucket3Count !== undefined) {
                queryParameters['bucket3Count'] = requestParameters.bucket3Count;
            }
            if (requestParameters.bucket4Count !== undefined) {
                queryParameters['bucket4Count'] = requestParameters.bucket4Count;
            }
            if (requestParameters.bucket5Count !== undefined) {
                queryParameters['bucket5Count'] = requestParameters.bucket5Count;
            }
            if (requestParameters.detailDate !== undefined) {
                queryParameters['detailDate'] = requestParameters.detailDate;
            }
            if (requestParameters.blockId !== undefined) {
                queryParameters['blockId'] = requestParameters.blockId;
            }
            if (requestParameters.blockIdType !== undefined) {
                queryParameters['blockIdType'] = requestParameters.blockIdType;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idExtension !== undefined) {
                queryParameters['idExtension'] = requestParameters.idExtension;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.ratePlanCode !== undefined) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.effectiveRateEnd) {
                queryParameters['effectiveRateEnd'] = requestParameters.effectiveRateEnd;
            }
            if (requestParameters.effectiveRateStart) {
                queryParameters['effectiveRateStart'] = requestParameters.effectiveRateStart;
            }
            if (requestParameters.roomType !== undefined) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/rateInfo`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RateInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to retrieve rate plan information including a breakdown of packages and taxes.<p><strong>OperationId:</strong>getRateInfo</p>
     * Get rate information
     */
    getRateInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRateInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will return all recently accessed Reservations. <p><strong>OperationId:</strong>getRecentlyAccessedReservations</p>
     * Get recently accessed Reservations
     */
    getRecentlyAccessedReservationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/recentlyAccessedReservations`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RecentlyAccessedReservationsFromJSON)(jsonValue));
        });
    }
    /**
     * This API will return all recently accessed Reservations. <p><strong>OperationId:</strong>getRecentlyAccessedReservations</p>
     * Get recently accessed Reservations
     */
    getRecentlyAccessedReservations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRecentlyAccessedReservationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to reprint Reservation tickets. <p><strong>OperationId:</strong>getReprintTickets</p>
     * Reprints Reservation tickets
     */
    getReprintTicketsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getReprintTickets.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReprintTickets.');
            }
            const queryParameters = {};
            if (requestParameters.ticketId !== undefined) {
                queryParameters['ticketId'] = requestParameters.ticketId;
            }
            if (requestParameters.ticketIdType !== undefined) {
                queryParameters['ticketIdType'] = requestParameters.ticketIdType;
            }
            if (requestParameters.packageCode) {
                queryParameters['packageCode'] = requestParameters.packageCode;
            }
            if (requestParameters.reservationProductId !== undefined) {
                queryParameters['reservationProductId'] = requestParameters.reservationProductId;
            }
            if (requestParameters.reservationProductIdType !== undefined) {
                queryParameters['reservationProductIdType'] = requestParameters.reservationProductIdType;
            }
            if (requestParameters.ticketNumberId !== undefined) {
                queryParameters['ticketNumberId'] = requestParameters.ticketNumberId;
            }
            if (requestParameters.ticketNumberIdType !== undefined) {
                queryParameters['ticketNumberIdType'] = requestParameters.ticketNumberIdType;
            }
            if (requestParameters.ticketIssueDate) {
                queryParameters['ticketIssueDate'] = requestParameters.ticketIssueDate;
            }
            if (requestParameters.ticketConsumptionDate) {
                queryParameters['ticketConsumptionDate'] = requestParameters.ticketConsumptionDate;
            }
            if (requestParameters.ticketRateCode) {
                queryParameters['ticketRateCode'] = requestParameters.ticketRateCode;
            }
            if (requestParameters.ticketStatus) {
                queryParameters['ticketStatus'] = requestParameters.ticketStatus;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/tickets/reprint`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TicketsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to reprint Reservation tickets. <p><strong>OperationId:</strong>getReprintTickets</p>
     * Reprints Reservation tickets
     */
    getReprintTickets(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReprintTicketsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to retrieve a reservation&apos;s detail such as guest&apos;s stay, arrival and departure dates, transportation, room and rate information, preferences, packages, and more using OPERA&apos;s reservationId.<p><strong>OperationId:</strong>getReservation</p>
     * Get reservation by ID
     */
    getReservationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getReservation.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReservation.');
            }
            const queryParameters = {};
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            if (requestParameters.allowedActions) {
                queryParameters['allowedActions'] = requestParameters.allowedActions;
            }
            if (requestParameters.markAsRecentlyAccessed !== undefined) {
                queryParameters['markAsRecentlyAccessed'] = requestParameters.markAsRecentlyAccessed;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to retrieve a reservation&apos;s detail such as guest&apos;s stay, arrival and departure dates, transportation, room and rate information, preferences, packages, and more using OPERA&apos;s reservationId.<p><strong>OperationId:</strong>getReservation</p>
     * Get reservation by ID
     */
    getReservation(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get the activity log data of reservations being created and managed.<p><strong>OperationId:</strong>getReservationActivityLog</p>
     * Fetch reservation activity log
     */
    getReservationActivityLogRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReservationActivityLog.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.parameterName) {
                queryParameters['parameterName'] = requestParameters.parameterName;
            }
            if (requestParameters.parameterValue) {
                queryParameters['parameterValue'] = requestParameters.parameterValue;
            }
            if (requestParameters.activityGroup !== undefined) {
                queryParameters['activityGroup'] = requestParameters.activityGroup;
            }
            if (requestParameters.activityType !== undefined) {
                queryParameters['activityType'] = requestParameters.activityType;
            }
            if (requestParameters.fromDate !== undefined) {
                queryParameters['fromDate'] = requestParameters.fromDate;
            }
            if (requestParameters.toDate !== undefined) {
                queryParameters['toDate'] = requestParameters.toDate;
            }
            if (requestParameters.searchText !== undefined) {
                queryParameters['searchText'] = requestParameters.searchText;
            }
            if (requestParameters.userByIdsUserId) {
                queryParameters['userByIdsUserId'] = requestParameters.userByIdsUserId;
            }
            if (requestParameters.userForIdsUserId) {
                queryParameters['userForIdsUserId'] = requestParameters.userForIdsUserId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/activityLog`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ActivityLogFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get the activity log data of reservations being created and managed.<p><strong>OperationId:</strong>getReservationActivityLog</p>
     * Fetch reservation activity log
     */
    getReservationActivityLog(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationActivityLogRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Reservation attachments <p><strong>OperationId:</strong>getReservationAttachments</p>
     * Get Reservation attachments
     */
    getReservationAttachmentsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getReservationAttachments.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReservationAttachments.');
            }
            const queryParameters = {};
            if (requestParameters.webRegistrationCard !== undefined) {
                queryParameters['webRegistrationCard'] = requestParameters.webRegistrationCard;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/attachments`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationAttachmentsFromJSON)(jsonValue));
        });
    }
    /**
     * Get Reservation attachments <p><strong>OperationId:</strong>getReservationAttachments</p>
     * Get Reservation attachments
     */
    getReservationAttachments(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationAttachmentsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get a reservation using the external reference ID associated with the reservation such as a Central Reservation System confirmation number or booking engine confirmation number.<p><strong>OperationId:</strong>getReservationByExtId</p>
     * Get reservation by external ID
     */
    getReservationByExtIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationExternalId === null || requestParameters.reservationExternalId === undefined) {
                throw new runtime.RequiredError('reservationExternalId', 'Required parameter requestParameters.reservationExternalId was null or undefined when calling getReservationByExtId.');
            }
            if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
                throw new runtime.RequiredError('externalSystemCode', 'Required parameter requestParameters.externalSystemCode was null or undefined when calling getReservationByExtId.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReservationByExtId.');
            }
            const queryParameters = {};
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            if (requestParameters.allowedActions) {
                queryParameters['allowedActions'] = requestParameters.allowedActions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get a reservation using the external reference ID associated with the reservation such as a Central Reservation System confirmation number or booking engine confirmation number.<p><strong>OperationId:</strong>getReservationByExtId</p>
     * Get reservation by external ID
     */
    getReservationByExtId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationByExtIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the Reservation excluded preferences. <p><strong>OperationId:</strong>getReservationExcludedPreferences</p>
     * Fetch Reservation excluded preferences
     */
    getReservationExcludedPreferencesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getReservationExcludedPreferences.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReservationExcludedPreferences.');
            }
            const queryParameters = {};
            if (requestParameters.preferenceType !== undefined) {
                queryParameters['preferenceType'] = requestParameters.preferenceType;
            }
            if (requestParameters.preferenceCode !== undefined) {
                queryParameters['preferenceCode'] = requestParameters.preferenceCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/excludedPreferences`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationExcludedPreferencesFromJSON)(jsonValue));
        });
    }
    /**
     * Get the Reservation excluded preferences. <p><strong>OperationId:</strong>getReservationExcludedPreferences</p>
     * Fetch Reservation excluded preferences
     */
    getReservationExcludedPreferences(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationExcludedPreferencesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Reservation indicators. <p><strong>OperationId:</strong>getReservationIndicators</p>
     * Get Reservation indicators
     */
    getReservationIndicatorsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.reservationId) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.checkInstructions) {
                queryParameters['checkInstructions'] = requestParameters.checkInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/reservations/indicators`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CheckReservationsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Get Reservation indicators. <p><strong>OperationId:</strong>getReservationIndicators</p>
     * Get Reservation indicators
     */
    getReservationIndicators(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationIndicatorsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the Guest locater for a Reservation. <p><strong>OperationId:</strong>getReservationLocators</p>
     * Fetch Reservation Guest Locator
     */
    getReservationLocatorsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getReservationLocators.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReservationLocators.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/guestLocators`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationLocatorsFromJSON)(jsonValue));
        });
    }
    /**
     * Get the Guest locater for a Reservation. <p><strong>OperationId:</strong>getReservationLocators</p>
     * Fetch Reservation Guest Locator
     */
    getReservationLocators(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationLocatorsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get cancelation and deposit policies for a given reservation.<p><strong>OperationId:</strong>getReservationPolicies</p>
     * Get reservation cancel and deposit policies
     */
    getReservationPoliciesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getReservationPolicies.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReservationPolicies.');
            }
            const queryParameters = {};
            if (requestParameters.fetchDepositPolicies !== undefined) {
                queryParameters['fetchDepositPolicies'] = requestParameters.fetchDepositPolicies;
            }
            if (requestParameters.fetchCancellationPolicies !== undefined) {
                queryParameters['fetchCancellationPolicies'] = requestParameters.fetchCancellationPolicies;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/policies`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationPoliciesFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get cancelation and deposit policies for a given reservation.<p><strong>OperationId:</strong>getReservationPolicies</p>
     * Get reservation cancel and deposit policies
     */
    getReservationPolicies(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationPoliciesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to retrieve the preferences that exist on a reservation. <p><strong>OperationId:</strong>getReservationPreference</p>
     * Get Reservation Preferences
     */
    getReservationPreferenceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getReservationPreference.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReservationPreference.');
            }
            const queryParameters = {};
            if (requestParameters.preferenceTypeCode) {
                queryParameters['preferenceTypeCode'] = requestParameters.preferenceTypeCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/preferences`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationPreferenceFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to retrieve the preferences that exist on a reservation. <p><strong>OperationId:</strong>getReservationPreference</p>
     * Get Reservation Preferences
     */
    getReservationPreference(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationPreferenceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to retrieve the available upsell offers for a specific reservation. If no upsell options are configured for this hotel or available for this reservation, an appropriate error will be returned. <p><strong>OperationId:</strong>getReservationUpsellInfo</p>
     * Get available Upsell offers
     */
    getReservationUpsellInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getReservationUpsellInfo.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReservationUpsellInfo.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/upsell`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationUpsellInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to retrieve the available upsell offers for a specific reservation. If no upsell options are configured for this hotel or available for this reservation, an appropriate error will be returned. <p><strong>OperationId:</strong>getReservationUpsellInfo</p>
     * Get available Upsell offers
     */
    getReservationUpsellInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationUpsellInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getReservations</p>
     * Get Reservations for a hotel
     */
    getReservationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.recentlyAccessed !== undefined) {
                queryParameters['recentlyAccessed'] = requestParameters.recentlyAccessed;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.searchType !== undefined) {
                queryParameters['searchType'] = requestParameters.searchType;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.text !== undefined) {
                queryParameters['text'] = requestParameters.text;
            }
            if (requestParameters.reservationIdList) {
                queryParameters['reservationIdList'] = requestParameters.reservationIdList;
            }
            if (requestParameters.confirmationNumberList) {
                queryParameters['confirmationNumberList'] = requestParameters.confirmationNumberList;
            }
            if (requestParameters.cancellationNumberList) {
                queryParameters['cancellationNumberList'] = requestParameters.cancellationNumberList;
            }
            if (requestParameters.externalReferenceIds) {
                queryParameters['externalReferenceIds'] = requestParameters.externalReferenceIds;
            }
            if (requestParameters.externalSystemCodes) {
                queryParameters['externalSystemCodes'] = requestParameters.externalSystemCodes;
            }
            if (requestParameters.arrivalEndDate !== undefined) {
                queryParameters['arrivalEndDate'] = requestParameters.arrivalEndDate;
            }
            if (requestParameters.arrivalStartDate !== undefined) {
                queryParameters['arrivalStartDate'] = requestParameters.arrivalStartDate;
            }
            if (requestParameters.departureEndDate !== undefined) {
                queryParameters['departureEndDate'] = requestParameters.departureEndDate;
            }
            if (requestParameters.departureStartDate !== undefined) {
                queryParameters['departureStartDate'] = requestParameters.departureStartDate;
            }
            if (requestParameters.expectedArrivalStartTime !== undefined) {
                queryParameters['expectedArrivalStartTime'] = requestParameters.expectedArrivalStartTime;
            }
            if (requestParameters.expectedArrivalEndTime !== undefined) {
                queryParameters['expectedArrivalEndTime'] = requestParameters.expectedArrivalEndTime;
            }
            if (requestParameters.expectedReturnEndTime !== undefined) {
                queryParameters['expectedReturnEndTime'] = requestParameters.expectedReturnEndTime;
            }
            if (requestParameters.expectedReturnStartTime !== undefined) {
                queryParameters['expectedReturnStartTime'] = requestParameters.expectedReturnStartTime;
            }
            if (requestParameters.companyNames) {
                queryParameters['companyNames'] = requestParameters.companyNames;
            }
            if (requestParameters.sourceNames) {
                queryParameters['sourceNames'] = requestParameters.sourceNames;
            }
            if (requestParameters.travelAgentNames) {
                queryParameters['travelAgentNames'] = requestParameters.travelAgentNames;
            }
            if (requestParameters.groupNames) {
                queryParameters['groupNames'] = requestParameters.groupNames;
            }
            if (requestParameters.travelAgentIds) {
                queryParameters['travelAgentIds'] = requestParameters.travelAgentIds;
            }
            if (requestParameters.companyIds) {
                queryParameters['companyIds'] = requestParameters.companyIds;
            }
            if (requestParameters.sourceIds) {
                queryParameters['sourceIds'] = requestParameters.sourceIds;
            }
            if (requestParameters.contactIds) {
                queryParameters['contactIds'] = requestParameters.contactIds;
            }
            if (requestParameters.groupIds) {
                queryParameters['groupIds'] = requestParameters.groupIds;
            }
            if (requestParameters.billingContactIds) {
                queryParameters['billingContactIds'] = requestParameters.billingContactIds;
            }
            if (requestParameters.profileIds) {
                queryParameters['profileIds'] = requestParameters.profileIds;
            }
            if (requestParameters.membershipCardNumber !== undefined) {
                queryParameters['membershipCardNumber'] = requestParameters.membershipCardNumber;
            }
            if (requestParameters.membershipLevels) {
                queryParameters['membershipLevels'] = requestParameters.membershipLevels;
            }
            if (requestParameters.membershipTypes) {
                queryParameters['membershipTypes'] = requestParameters.membershipTypes;
            }
            if (requestParameters.surname !== undefined) {
                queryParameters['surname'] = requestParameters.surname;
            }
            if (requestParameters.givenName !== undefined) {
                queryParameters['givenName'] = requestParameters.givenName;
            }
            if (requestParameters.anyVIPStatus !== undefined) {
                queryParameters['anyVIPStatus'] = requestParameters.anyVIPStatus;
            }
            if (requestParameters.vipCodes) {
                queryParameters['vipCodes'] = requestParameters.vipCodes;
            }
            if (requestParameters.guaranteeCode !== undefined) {
                queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
            }
            if (requestParameters.paymentMethod !== undefined) {
                queryParameters['paymentMethod'] = requestParameters.paymentMethod;
            }
            if (requestParameters.discountApplied !== undefined) {
                queryParameters['discountApplied'] = requestParameters.discountApplied;
            }
            if (requestParameters.user) {
                queryParameters['user'] = requestParameters.user;
            }
            if (requestParameters.createdBy !== undefined) {
                queryParameters['createdBy'] = requestParameters.createdBy;
            }
            if (requestParameters.cancelledByList) {
                queryParameters['cancelledByList'] = requestParameters.cancelledByList;
            }
            if (requestParameters.cancelledOn !== undefined) {
                queryParameters['cancelledOn'] = requestParameters.cancelledOn;
            }
            if (requestParameters.ratePlanCodes) {
                queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
            }
            if (requestParameters.sourceCodes) {
                queryParameters['sourceCodes'] = requestParameters.sourceCodes;
            }
            if (requestParameters.marketCodes) {
                queryParameters['marketCodes'] = requestParameters.marketCodes;
            }
            if (requestParameters.excludeBlockReservations !== undefined) {
                queryParameters['excludeBlockReservations'] = requestParameters.excludeBlockReservations;
            }
            if (requestParameters.blockName !== undefined) {
                queryParameters['blockName'] = requestParameters.blockName;
            }
            if (requestParameters.blockIds) {
                queryParameters['blockIds'] = requestParameters.blockIds;
            }
            if (requestParameters.blockCodes) {
                queryParameters['blockCodes'] = requestParameters.blockCodes;
            }
            if (requestParameters.customReference !== undefined) {
                queryParameters['customReference'] = requestParameters.customReference;
            }
            if (requestParameters.recordLocator !== undefined) {
                queryParameters['recordLocator'] = requestParameters.recordLocator;
            }
            if (requestParameters.orderBy) {
                queryParameters['orderBy'] = requestParameters.orderBy;
            }
            if (requestParameters.sortOrder) {
                queryParameters['sortOrder'] = requestParameters.sortOrder;
            }
            if (requestParameters.roomAssignedOnly !== undefined) {
                queryParameters['roomAssignedOnly'] = requestParameters.roomAssignedOnly;
            }
            if (requestParameters.roomUnassignedOnly !== undefined) {
                queryParameters['roomUnassignedOnly'] = requestParameters.roomUnassignedOnly;
            }
            if (requestParameters.roomId !== undefined) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            if (requestParameters.roomType) {
                queryParameters['roomType'] = requestParameters.roomType.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.roomFeatures) {
                queryParameters['roomFeatures'] = requestParameters.roomFeatures;
            }
            if (requestParameters.roomSpecials) {
                queryParameters['roomSpecials'] = requestParameters.roomSpecials;
            }
            if (requestParameters.roomSmokingPreference !== undefined) {
                queryParameters['roomSmokingPreference'] = requestParameters.roomSmokingPreference;
            }
            if (requestParameters.roomFloorPreferences) {
                queryParameters['roomFloorPreferences'] = requestParameters.roomFloorPreferences;
            }
            if (requestParameters.housekeepingRoomStatuses) {
                queryParameters['housekeepingRoomStatuses'] = requestParameters.housekeepingRoomStatuses;
            }
            if (requestParameters.roomClasses) {
                queryParameters['roomClasses'] = requestParameters.roomClasses;
            }
            if (requestParameters.roomRangeFrom !== undefined) {
                queryParameters['roomRangeFrom'] = requestParameters.roomRangeFrom;
            }
            if (requestParameters.roomRangeTo !== undefined) {
                queryParameters['roomRangeTo'] = requestParameters.roomRangeTo;
            }
            if (requestParameters.communication !== undefined) {
                queryParameters['communication'] = requestParameters.communication;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            if (requestParameters.allowedReservationActions) {
                queryParameters['allowedReservationActions'] = requestParameters.allowedReservationActions;
            }
            if (requestParameters.allowPreRegistration !== undefined) {
                queryParameters['allowPreRegistration'] = requestParameters.allowPreRegistration;
            }
            if (requestParameters.hasDepositBalance !== undefined) {
                queryParameters['hasDepositBalance'] = requestParameters.hasDepositBalance;
            }
            if (requestParameters.hasOpenBalance !== undefined) {
                queryParameters['hasOpenBalance'] = requestParameters.hasOpenBalance;
            }
            if (requestParameters.hasOpenFolio !== undefined) {
                queryParameters['hasOpenFolio'] = requestParameters.hasOpenFolio;
            }
            if (requestParameters.includeScheduledCheckOut !== undefined) {
                queryParameters['includeScheduledCheckOut'] = requestParameters.includeScheduledCheckOut;
            }
            if (requestParameters.linkedOnly !== undefined) {
                queryParameters['linkedOnly'] = requestParameters.linkedOnly;
            }
            if (requestParameters.unlinkedOnly !== undefined) {
                queryParameters['unlinkedOnly'] = requestParameters.unlinkedOnly;
            }
            if (requestParameters.actualArrivals !== undefined) {
                queryParameters['actualArrivals'] = requestParameters.actualArrivals;
            }
            if (requestParameters.actualDepartures !== undefined) {
                queryParameters['actualDepartures'] = requestParameters.actualDepartures;
            }
            if (requestParameters.complimentaryReservations !== undefined) {
                queryParameters['complimentaryReservations'] = requestParameters.complimentaryReservations;
            }
            if (requestParameters.dayOfArrivalCancels !== undefined) {
                queryParameters['dayOfArrivalCancels'] = requestParameters.dayOfArrivalCancels;
            }
            if (requestParameters.dayUse !== undefined) {
                queryParameters['dayUse'] = requestParameters.dayUse;
            }
            if (requestParameters.earlyDepartures !== undefined) {
                queryParameters['earlyDepartures'] = requestParameters.earlyDepartures;
            }
            if (requestParameters.expectedArrivals !== undefined) {
                queryParameters['expectedArrivals'] = requestParameters.expectedArrivals;
            }
            if (requestParameters.expectedDepartures !== undefined) {
                queryParameters['expectedDepartures'] = requestParameters.expectedDepartures;
            }
            if (requestParameters.extendedStays !== undefined) {
                queryParameters['extendedStays'] = requestParameters.extendedStays;
            }
            if (requestParameters.houseUseReservations !== undefined) {
                queryParameters['houseUseReservations'] = requestParameters.houseUseReservations;
            }
            if (requestParameters.stayovers !== undefined) {
                queryParameters['stayovers'] = requestParameters.stayovers;
            }
            if (requestParameters.stayDate !== undefined) {
                queryParameters['stayDate'] = requestParameters.stayDate;
            }
            if (requestParameters.roomRoutingId !== undefined) {
                queryParameters['roomRoutingId'] = requestParameters.roomRoutingId;
            }
            if (requestParameters.excludePseudoRoomReservations !== undefined) {
                queryParameters['excludePseudoRoomReservations'] = requestParameters.excludePseudoRoomReservations;
            }
            if (requestParameters.excludeReservationIds) {
                queryParameters['excludeReservationIds'] = requestParameters.excludeReservationIds;
            }
            if (requestParameters.excludeVIPStatusCodes) {
                queryParameters['excludeVIPStatusCodes'] = requestParameters.excludeVIPStatusCodes;
            }
            if (requestParameters.excludeSpecials) {
                queryParameters['excludeSpecials'] = requestParameters.excludeSpecials;
            }
            if (requestParameters.excludeFloorPreferences) {
                queryParameters['excludeFloorPreferences'] = requestParameters.excludeFloorPreferences;
            }
            if (requestParameters.excludeAdvanceCheckedIn !== undefined) {
                queryParameters['excludeAdvanceCheckedIn'] = requestParameters.excludeAdvanceCheckedIn;
            }
            if (requestParameters.excludeRoomFeatures) {
                queryParameters['excludeRoomFeatures'] = requestParameters.excludeRoomFeatures;
            }
            if (requestParameters.playerId !== undefined) {
                queryParameters['playerId'] = requestParameters.playerId;
            }
            if (requestParameters.gamingBalanceFrom !== undefined) {
                queryParameters['gamingBalanceFrom'] = requestParameters.gamingBalanceFrom;
            }
            if (requestParameters.gamingBalanceTo !== undefined) {
                queryParameters['gamingBalanceTo'] = requestParameters.gamingBalanceTo;
            }
            if (requestParameters.compAccountingBalanceFrom !== undefined) {
                queryParameters['compAccountingBalanceFrom'] = requestParameters.compAccountingBalanceFrom;
            }
            if (requestParameters.compAccountingBalanceTo !== undefined) {
                queryParameters['compAccountingBalanceTo'] = requestParameters.compAccountingBalanceTo;
            }
            if (requestParameters.searchTypes) {
                queryParameters['searchTypes'] = requestParameters.searchTypes;
            }
            if (requestParameters.reservationStatuses) {
                queryParameters['reservationStatuses'] = requestParameters.reservationStatuses;
            }
            if (requestParameters.transportationCodes) {
                queryParameters['transportationCodes'] = requestParameters.transportationCodes;
            }
            if (requestParameters.roomReadyStatuses) {
                queryParameters['roomReadyStatuses'] = requestParameters.roomReadyStatuses;
            }
            if (requestParameters.checkoutMessageReceived !== undefined) {
                queryParameters['checkoutMessageReceived'] = requestParameters.checkoutMessageReceived;
            }
            if (requestParameters.optedForCommunication !== undefined) {
                queryParameters['optedForCommunication'] = requestParameters.optedForCommunication;
            }
            if (requestParameters.createdOn !== undefined) {
                queryParameters['createdOn'] = requestParameters.createdOn;
            }
            if (requestParameters.stayOn !== undefined) {
                queryParameters['stayOn'] = requestParameters.stayOn;
            }
            if (requestParameters.contactNames) {
                queryParameters['contactNames'] = requestParameters.contactNames;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/reservations`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getReservations</p>
     * Get Reservations for a hotel
     */
    getReservations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * <p>This operation fetches brief summary for the reservations and also supports the Global Parameter <strong>MAX ROWS FETCH COUNT</strong>.<br>By default this parameter is configured to support an overall fetch of <strong>5000</strong> Records in total, with maximum number of records that can be fetched at a time being <strong>200</strong> (limit). However, this parameter can be updated to support an overall fetch value being a valid number between <strong>1</strong> and <strong>10000</strong> with maximum number of records that can be fetched at a time being same i.e. <strong>200</strong> (limit).</p><p>Requests with an <strong>offset</strong> and <strong>limit</strong> sum exceeding the <strong>MAX ROWS FETCH COUNT</strong> configured would fail the request.</p> <p><strong>OperationId:</strong>getReservationsSummary</p>
     * Get brief summary for Reservations
     */
    getReservationsSummaryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReservationsSummary.');
            }
            const queryParameters = {};
            if (requestParameters.advancedCheckedIn !== undefined) {
                queryParameters['advancedCheckedIn'] = requestParameters.advancedCheckedIn;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.preRegistered !== undefined) {
                queryParameters['preRegistered'] = requestParameters.preRegistered;
            }
            if (requestParameters.arrivalDate !== undefined) {
                queryParameters['arrivalDate'] = requestParameters.arrivalDate;
            }
            if (requestParameters.departureDate !== undefined) {
                queryParameters['departureDate'] = requestParameters.departureDate;
            }
            if (requestParameters.createDateTime !== undefined) {
                queryParameters['createDateTime'] = requestParameters.createDateTime;
            }
            if (requestParameters.cancelledOn !== undefined) {
                queryParameters['cancelledOn'] = requestParameters.cancelledOn;
            }
            if (requestParameters.folioClosedOn !== undefined) {
                queryParameters['folioClosedOn'] = requestParameters.folioClosedOn;
            }
            if (requestParameters.lastName !== undefined) {
                queryParameters['lastName'] = requestParameters.lastName;
            }
            if (requestParameters.companyId !== undefined) {
                queryParameters['companyId'] = requestParameters.companyId;
            }
            if (requestParameters.guestNameId !== undefined) {
                queryParameters['guestNameId'] = requestParameters.guestNameId;
            }
            if (requestParameters.reservationStatus !== undefined) {
                queryParameters['reservationStatus'] = requestParameters.reservationStatus;
            }
            if (requestParameters.confirmationNumber !== undefined) {
                queryParameters['confirmationNumber'] = requestParameters.confirmationNumber;
            }
            if (requestParameters.externalReferenceNumber !== undefined) {
                queryParameters['externalReferenceNumber'] = requestParameters.externalReferenceNumber;
            }
            if (requestParameters.cancellationNumber !== undefined) {
                queryParameters['cancellationNumber'] = requestParameters.cancellationNumber;
            }
            if (requestParameters.membershipNumber !== undefined) {
                queryParameters['membershipNumber'] = requestParameters.membershipNumber;
            }
            if (requestParameters.registeredCardNumber !== undefined) {
                queryParameters['registeredCardNumber'] = requestParameters.registeredCardNumber;
            }
            if (requestParameters.balance !== undefined) {
                queryParameters['balance'] = requestParameters.balance;
            }
            if (requestParameters.roomId !== undefined) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/summary`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationsSummaryFromJSON)(jsonValue));
        });
    }
    /**
     * <p>This operation fetches brief summary for the reservations and also supports the Global Parameter <strong>MAX ROWS FETCH COUNT</strong>.<br>By default this parameter is configured to support an overall fetch of <strong>5000</strong> Records in total, with maximum number of records that can be fetched at a time being <strong>200</strong> (limit). However, this parameter can be updated to support an overall fetch value being a valid number between <strong>1</strong> and <strong>10000</strong> with maximum number of records that can be fetched at a time being same i.e. <strong>200</strong> (limit).</p><p>Requests with an <strong>offset</strong> and <strong>limit</strong> sum exceeding the <strong>MAX ROWS FETCH COUNT</strong> configured would fail the request.</p> <p><strong>OperationId:</strong>getReservationsSummary</p>
     * Get brief summary for Reservations
     */
    getReservationsSummary(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationsSummaryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Reservations to share by profile id. <p><strong>OperationId:</strong>getReservationsToShareByProfileId</p>
     * Get Reservations to share
     */
    getReservationsToShareByProfileIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.profileIdtoShare === null || requestParameters.profileIdtoShare === undefined) {
                throw new runtime.RequiredError('profileIdtoShare', 'Required parameter requestParameters.profileIdtoShare was null or undefined when calling getReservationsToShareByProfileId.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReservationsToShareByProfileId.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.superSearch !== undefined) {
                queryParameters['superSearch'] = requestParameters.superSearch;
            }
            if (requestParameters.reservationGuestId !== undefined) {
                queryParameters['reservationGuestId'] = requestParameters.reservationGuestId;
            }
            if (requestParameters.reservationGuestIdType !== undefined) {
                queryParameters['reservationGuestIdType'] = requestParameters.reservationGuestIdType;
            }
            if (requestParameters.membershipId !== undefined) {
                queryParameters['membershipId'] = requestParameters.membershipId;
            }
            if (requestParameters.membershipLevel) {
                queryParameters['membershipLevel'] = requestParameters.membershipLevel;
            }
            if (requestParameters.membershipType) {
                queryParameters['membershipType'] = requestParameters.membershipType;
            }
            if (requestParameters.surname !== undefined) {
                queryParameters['surname'] = requestParameters.surname;
            }
            if (requestParameters.givenName !== undefined) {
                queryParameters['givenName'] = requestParameters.givenName;
            }
            if (requestParameters.roomId !== undefined) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/profiles/{profileIdtoShare}/share`.replace(`{${"profileIdtoShare"}}`, encodeURIComponent(String(requestParameters.profileIdtoShare))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FetchReservationsFromJSON)(jsonValue));
        });
    }
    /**
     * Get Reservations to share by profile id. <p><strong>OperationId:</strong>getReservationsToShareByProfileId</p>
     * Get Reservations to share
     */
    getReservationsToShareByProfileId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationsToShareByProfileIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Fetch the reservation that can be shared with an existing reservation. <p><strong>OperationId:</strong>getReservationsToShareByReservationId</p>
     * Get Reservations to share by Reservation id
     */
    getReservationsToShareByReservationIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationIdtoShare === null || requestParameters.reservationIdtoShare === undefined) {
                throw new runtime.RequiredError('reservationIdtoShare', 'Required parameter requestParameters.reservationIdtoShare was null or undefined when calling getReservationsToShareByReservationId.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReservationsToShareByReservationId.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.superSearch !== undefined) {
                queryParameters['superSearch'] = requestParameters.superSearch;
            }
            if (requestParameters.reservationGuestId !== undefined) {
                queryParameters['reservationGuestId'] = requestParameters.reservationGuestId;
            }
            if (requestParameters.reservationGuestIdType !== undefined) {
                queryParameters['reservationGuestIdType'] = requestParameters.reservationGuestIdType;
            }
            if (requestParameters.membershipId !== undefined) {
                queryParameters['membershipId'] = requestParameters.membershipId;
            }
            if (requestParameters.membershipLevel) {
                queryParameters['membershipLevel'] = requestParameters.membershipLevel;
            }
            if (requestParameters.membershipType) {
                queryParameters['membershipType'] = requestParameters.membershipType;
            }
            if (requestParameters.surname !== undefined) {
                queryParameters['surname'] = requestParameters.surname;
            }
            if (requestParameters.givenName !== undefined) {
                queryParameters['givenName'] = requestParameters.givenName;
            }
            if (requestParameters.roomId !== undefined) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationIdtoShare}/share`.replace(`{${"reservationIdtoShare"}}`, encodeURIComponent(String(requestParameters.reservationIdtoShare))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FetchReservationsFromJSON)(jsonValue));
        });
    }
    /**
     * Fetch the reservation that can be shared with an existing reservation. <p><strong>OperationId:</strong>getReservationsToShareByReservationId</p>
     * Get Reservations to share by Reservation id
     */
    getReservationsToShareByReservationId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationsToShareByReservationIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the Inventory Items reserved for the Reservation. <p><strong>OperationId:</strong>getReservedInventoryItems</p>
     * Get Reserved Inventory Items
     */
    getReservedInventoryItemsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getReservedInventoryItems.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getReservedInventoryItems.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/inventoryItems`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.InventoryItemsFromJSON)(jsonValue));
        });
    }
    /**
     * Get the Inventory Items reserved for the Reservation. <p><strong>OperationId:</strong>getReservedInventoryItems</p>
     * Get Reserved Inventory Items
     */
    getReservedInventoryItems(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservedInventoryItemsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get the room calendar for a hotel. It fetches inventory detail per rooms, the reservations assigned for a selected date range in the past or future, scheduled Out of Order or Out of Service status, room description, room attributes, room features, connecting room, etc.<p><strong>OperationId:</strong>getRoomCalendar</p>
     * Get the room calendar
     */
    getRoomCalendarRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRoomCalendar.');
            }
            const queryParameters = {};
            if (requestParameters.advanceCheckedIn !== undefined) {
                queryParameters['advanceCheckedIn'] = requestParameters.advanceCheckedIn;
            }
            if (requestParameters.assignedRooms !== undefined) {
                queryParameters['assignedRooms'] = requestParameters.assignedRooms;
            }
            if (requestParameters.componentRooms !== undefined) {
                queryParameters['componentRooms'] = requestParameters.componentRooms;
            }
            if (requestParameters.connectingRoomsOnly !== undefined) {
                queryParameters['connectingRoomsOnly'] = requestParameters.connectingRoomsOnly;
            }
            if (requestParameters.dueOut !== undefined) {
                queryParameters['dueOut'] = requestParameters.dueOut;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.isSortDescending !== undefined) {
                queryParameters['isSortDescending'] = requestParameters.isSortDescending;
            }
            if (requestParameters.pageIndex !== undefined) {
                queryParameters['pageIndex'] = requestParameters.pageIndex;
            }
            if (requestParameters.partiallyAssignedRooms !== undefined) {
                queryParameters['partiallyAssignedRooms'] = requestParameters.partiallyAssignedRooms;
            }
            if (requestParameters.recordsPerPage !== undefined) {
                queryParameters['recordsPerPage'] = requestParameters.recordsPerPage;
            }
            if (requestParameters.roomConditions !== undefined) {
                queryParameters['roomConditions'] = requestParameters.roomConditions;
            }
            if (requestParameters.ownerRoomsOnly !== undefined) {
                queryParameters['ownerRoomsOnly'] = requestParameters.ownerRoomsOnly;
            }
            if (requestParameters.ownerExclusiveOnly !== undefined) {
                queryParameters['ownerExclusiveOnly'] = requestParameters.ownerExclusiveOnly;
            }
            if (requestParameters.sortingBy !== undefined) {
                queryParameters['sortingBy'] = requestParameters.sortingBy;
            }
            if (requestParameters.includeRoomMoveHistory !== undefined) {
                queryParameters['includeRoomMoveHistory'] = requestParameters.includeRoomMoveHistory;
            }
            if (requestParameters.includeComponentRoomBlockOutDates !== undefined) {
                queryParameters['includeComponentRoomBlockOutDates'] = requestParameters.includeComponentRoomBlockOutDates;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.unassignedRooms !== undefined) {
                queryParameters['unassignedRooms'] = requestParameters.unassignedRooms;
            }
            if (requestParameters.roomId) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            if (requestParameters.roomType) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.roomClass) {
                queryParameters['roomClass'] = requestParameters.roomClass;
            }
            if (requestParameters.floor) {
                queryParameters['floor'] = requestParameters.floor;
            }
            if (requestParameters.roomFeature) {
                queryParameters['roomFeature'] = requestParameters.roomFeature;
            }
            if (requestParameters.roomStatus) {
                queryParameters['roomStatus'] = requestParameters.roomStatus;
            }
            if (requestParameters.smokingPreference) {
                queryParameters['smokingPreference'] = requestParameters.smokingPreference;
            }
            if (requestParameters.bedType) {
                queryParameters['bedType'] = requestParameters.bedType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/roomCalendar`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RoomCalendarFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get the room calendar for a hotel. It fetches inventory detail per rooms, the reservations assigned for a selected date range in the past or future, scheduled Out of Order or Out of Service status, room description, room attributes, room features, connecting room, etc.<p><strong>OperationId:</strong>getRoomCalendar</p>
     * Get the room calendar
     */
    getRoomCalendar(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRoomCalendarRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to fetch a reservation\'s routing instructions. It requires a reservation ID, which can be fetched using getReservations. <p><strong>OperationId:</strong>getRoutingInstructions</p>
     * Get routing instructions
     */
    getRoutingInstructionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getRoutingInstructions.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRoutingInstructions.');
            }
            const queryParameters = {};
            if (requestParameters.includeWindowRouting !== undefined) {
                queryParameters['includeWindowRouting'] = requestParameters.includeWindowRouting;
            }
            if (requestParameters.includeRoomRouting !== undefined) {
                queryParameters['includeRoomRouting'] = requestParameters.includeRoomRouting;
            }
            if (requestParameters.includeCompRouting !== undefined) {
                queryParameters['includeCompRouting'] = requestParameters.includeCompRouting;
            }
            if (requestParameters.includeCompRoutingRequests !== undefined) {
                queryParameters['includeCompRoutingRequests'] = requestParameters.includeCompRoutingRequests;
            }
            if (requestParameters.effectiveOn !== undefined) {
                queryParameters['effectiveOn'] = requestParameters.effectiveOn;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RoutingInstructionsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to fetch a reservation\'s routing instructions. It requires a reservation ID, which can be fetched using getReservations. <p><strong>OperationId:</strong>getRoutingInstructions</p>
     * Get routing instructions
     */
    getRoutingInstructions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRoutingInstructionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will get the script for your property. <p><strong>OperationId:</strong>getScript</p>
     * Get a script
     */
    getScriptRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getScript.');
            }
            const queryParameters = {};
            if (requestParameters.languageCode !== undefined) {
                queryParameters['languageCode'] = requestParameters.languageCode;
            }
            if (requestParameters.scriptType !== undefined) {
                queryParameters['scriptType'] = requestParameters.scriptType;
            }
            if (requestParameters.reservationId) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.reservationIdType) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/script`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScriptFromJSON)(jsonValue));
        });
    }
    /**
     * This API will get the script for your property. <p><strong>OperationId:</strong>getScript</p>
     * Get a script
     */
    getScript(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getScriptRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Fetch the existing sell message configuration for a property. <p><strong>OperationId:</strong>getSellMessageConfig</p>
     * Get sell messages
     */
    getSellMessageConfigRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getSellMessageConfig.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.message !== undefined) {
                queryParameters['message'] = requestParameters.message;
            }
            if (requestParameters.roomType) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.ratePlanCode) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.blockId) {
                queryParameters['blockId'] = requestParameters.blockId;
            }
            if (requestParameters.blockIdType) {
                queryParameters['blockIdType'] = requestParameters.blockIdType;
            }
            if (requestParameters.blockCode !== undefined) {
                queryParameters['blockCode'] = requestParameters.blockCode;
            }
            if (requestParameters.languageCode !== undefined) {
                queryParameters['languageCode'] = requestParameters.languageCode;
            }
            if (requestParameters.croCode !== undefined) {
                queryParameters['croCode'] = requestParameters.croCode;
            }
            if (requestParameters.displayDate !== undefined) {
                queryParameters['displayDate'] = requestParameters.displayDate;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/sellMessages/config`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FetchSellMessageConfigFromJSON)(jsonValue));
        });
    }
    /**
     * Fetch the existing sell message configuration for a property. <p><strong>OperationId:</strong>getSellMessageConfig</p>
     * Get sell messages
     */
    getSellMessageConfig(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSellMessageConfigRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Fetch the existing sell message configuration. <p><strong>OperationId:</strong>getSellMessageConfigByChain</p>
     * Get sell messages by chain
     */
    getSellMessageConfigByChainRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.message !== undefined) {
                queryParameters['message'] = requestParameters.message;
            }
            if (requestParameters.roomType) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.ratePlanCode) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.blockId) {
                queryParameters['blockId'] = requestParameters.blockId;
            }
            if (requestParameters.blockIdType) {
                queryParameters['blockIdType'] = requestParameters.blockIdType;
            }
            if (requestParameters.blockCode !== undefined) {
                queryParameters['blockCode'] = requestParameters.blockCode;
            }
            if (requestParameters.languageCode !== undefined) {
                queryParameters['languageCode'] = requestParameters.languageCode;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.chainId !== undefined) {
                queryParameters['chainId'] = requestParameters.chainId;
            }
            if (requestParameters.croCode !== undefined) {
                queryParameters['croCode'] = requestParameters.croCode;
            }
            if (requestParameters.displayDate !== undefined) {
                queryParameters['displayDate'] = requestParameters.displayDate;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/sellMessages/config`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FetchSellMessageConfigFromJSON)(jsonValue));
        });
    }
    /**
     * Fetch the existing sell message configuration. <p><strong>OperationId:</strong>getSellMessageConfigByChain</p>
     * Get sell messages by chain
     */
    getSellMessageConfigByChain(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSellMessageConfigByChainRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Fetch the configured sell messages for a property. <p><strong>OperationId:</strong>getSellMessages</p>
     * Get sell messages
     */
    getSellMessagesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.croCode !== undefined) {
                queryParameters['croCode'] = requestParameters.croCode;
            }
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.criteriaId !== undefined) {
                queryParameters['criteriaId'] = requestParameters.criteriaId;
            }
            if (requestParameters.criteriaIdType !== undefined) {
                queryParameters['criteriaIdType'] = requestParameters.criteriaIdType;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.ratePlanCode !== undefined) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.roomType !== undefined) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.stickyFlagYn !== undefined) {
                queryParameters['stickyFlagYn'] = requestParameters.stickyFlagYn;
            }
            if (requestParameters.criteriaType !== undefined) {
                queryParameters['criteriaType'] = requestParameters.criteriaType;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            if (requestParameters.usedInModule !== undefined) {
                queryParameters['usedInModule'] = requestParameters.usedInModule;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/sellMessages`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SellMessagesFromJSON)(jsonValue));
        });
    }
    /**
     * Fetch the configured sell messages for a property. <p><strong>OperationId:</strong>getSellMessages</p>
     * Get sell messages
     */
    getSellMessages(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSellMessagesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API can be used to retrieve the share reservations that exist on a reservation. <p><strong>OperationId:</strong>getShareReservations</p>
     * Get share Reservations
     */
    getShareReservationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getShareReservations.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getShareReservations.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/shares`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ShareReservationsFromJSON)(jsonValue));
        });
    }
    /**
     * This API can be used to retrieve the share reservations that exist on a reservation. <p><strong>OperationId:</strong>getShareReservations</p>
     * Get share Reservations
     */
    getShareReservations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getShareReservationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API can be used to retrieve the share reservations that exist on a reservation. <p><strong>OperationId:</strong>getShareReservationsByExtId</p>
     * Get share Reservations
     */
    getShareReservationsByExtIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationExternalId === null || requestParameters.reservationExternalId === undefined) {
                throw new runtime.RequiredError('reservationExternalId', 'Required parameter requestParameters.reservationExternalId was null or undefined when calling getShareReservationsByExtId.');
            }
            if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
                throw new runtime.RequiredError('externalSystemCode', 'Required parameter requestParameters.externalSystemCode was null or undefined when calling getShareReservationsByExtId.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getShareReservationsByExtId.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/shares`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ShareReservationsFromJSON)(jsonValue));
        });
    }
    /**
     * This API can be used to retrieve the share reservations that exist on a reservation. <p><strong>OperationId:</strong>getShareReservationsByExtId</p>
     * Get share Reservations
     */
    getShareReservationsByExtId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getShareReservationsByExtIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get tickets for a reservation. <p><strong>OperationId:</strong>getTickets</p>
     * Get tickets
     */
    getTicketsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getTickets.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getTickets.');
            }
            const queryParameters = {};
            if (requestParameters.packageCode !== undefined) {
                queryParameters['packageCode'] = requestParameters.packageCode;
            }
            if (requestParameters.retrieveIssuedOnly !== undefined) {
                queryParameters['retrieveIssuedOnly'] = requestParameters.retrieveIssuedOnly;
            }
            if (requestParameters.retrieveNotIssuedOnly !== undefined) {
                queryParameters['retrieveNotIssuedOnly'] = requestParameters.retrieveNotIssuedOnly;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/tickets`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TicketsFromJSON)(jsonValue));
        });
    }
    /**
     * Get tickets for a reservation. <p><strong>OperationId:</strong>getTickets</p>
     * Get tickets
     */
    getTickets(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTicketsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to perform a Inquiry for Reservation tickets. <p><strong>OperationId:</strong>getTicketsInquiry</p>
     * Inquiry for Reservation tickets
     */
    getTicketsInquiryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getTicketsInquiry.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getTicketsInquiry.');
            }
            const queryParameters = {};
            if (requestParameters.ticketId !== undefined) {
                queryParameters['ticketId'] = requestParameters.ticketId;
            }
            if (requestParameters.ticketIdType !== undefined) {
                queryParameters['ticketIdType'] = requestParameters.ticketIdType;
            }
            if (requestParameters.packageCode) {
                queryParameters['packageCode'] = requestParameters.packageCode;
            }
            if (requestParameters.reservationProductId !== undefined) {
                queryParameters['reservationProductId'] = requestParameters.reservationProductId;
            }
            if (requestParameters.reservationProductIdType !== undefined) {
                queryParameters['reservationProductIdType'] = requestParameters.reservationProductIdType;
            }
            if (requestParameters.ticketNumberId !== undefined) {
                queryParameters['ticketNumberId'] = requestParameters.ticketNumberId;
            }
            if (requestParameters.ticketNumberIdType !== undefined) {
                queryParameters['ticketNumberIdType'] = requestParameters.ticketNumberIdType;
            }
            if (requestParameters.ticketIssueDate) {
                queryParameters['ticketIssueDate'] = requestParameters.ticketIssueDate;
            }
            if (requestParameters.ticketConsumptionDate) {
                queryParameters['ticketConsumptionDate'] = requestParameters.ticketConsumptionDate;
            }
            if (requestParameters.ticketRateCode) {
                queryParameters['ticketRateCode'] = requestParameters.ticketRateCode;
            }
            if (requestParameters.ticketStatus) {
                queryParameters['ticketStatus'] = requestParameters.ticketStatus;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/tickets/inquiry`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TicketsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to perform a Inquiry for Reservation tickets. <p><strong>OperationId:</strong>getTicketsInquiry</p>
     * Inquiry for Reservation tickets
     */
    getTicketsInquiry(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTicketsInquiryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get traces for a Reservation. <p><strong>OperationId:</strong>getTracesByReservation</p>
     * Get traces for a Reservation
     */
    getTracesByReservationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getTracesByReservation.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getTracesByReservation.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/traces`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TracesFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get traces for a Reservation. <p><strong>OperationId:</strong>getTracesByReservation</p>
     * Get traces for a Reservation
     */
    getTracesByReservation(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTracesByReservationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will fetch the traces for a Room. <p><strong>OperationId:</strong>getTracesByRoom</p>
     * Get traces for a Room
     */
    getTracesByRoomRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
                throw new runtime.RequiredError('roomId', 'Required parameter requestParameters.roomId was null or undefined when calling getTracesByRoom.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getTracesByRoom.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rooms/{roomId}/traces`.replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TracesFromJSON)(jsonValue));
        });
    }
    /**
     * This API will fetch the traces for a Room. <p><strong>OperationId:</strong>getTracesByRoom</p>
     * Get traces for a Room
     */
    getTracesByRoom(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTracesByRoomRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Transaction Diversions. <p><strong>OperationId:</strong>getTransactionDiversions</p>
     * Get Transaction Diversions
     */
    getTransactionDiversionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getTransactionDiversions.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getTransactionDiversions.');
            }
            const queryParameters = {};
            if (requestParameters.transactionDiversionCodes) {
                queryParameters['transactionDiversionCodes'] = requestParameters.transactionDiversionCodes;
            }
            if (requestParameters.includeDailyDetails !== undefined) {
                queryParameters['includeDailyDetails'] = requestParameters.includeDailyDetails;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/transactionDiversions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TransactionDiversionsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Transaction Diversions. <p><strong>OperationId:</strong>getTransactionDiversions</p>
     * Get Transaction Diversions
     */
    getTransactionDiversions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTransactionDiversionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to fetch Reservations Eligible for an Upgrade. <p><strong>OperationId:</strong>getUpgradeEligibilityReservations</p>
     * Fetch Reservations Eligible for an Upgrade
     */
    getUpgradeEligibilityReservationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getUpgradeEligibilityReservations.');
            }
            const queryParameters = {};
            if (requestParameters.arrivalEndDate !== undefined) {
                queryParameters['arrivalEndDate'] = requestParameters.arrivalEndDate;
            }
            if (requestParameters.arrivalStartDate !== undefined) {
                queryParameters['arrivalStartDate'] = requestParameters.arrivalStartDate;
            }
            if (requestParameters.membershipType !== undefined) {
                queryParameters['membershipType'] = requestParameters.membershipType;
            }
            if (requestParameters.externalReferenceType !== undefined) {
                queryParameters['externalReferenceType'] = requestParameters.externalReferenceType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/upgradeEligibleReservations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UpgradeEligibilityReservationsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to fetch Reservations Eligible for an Upgrade. <p><strong>OperationId:</strong>getUpgradeEligibilityReservations</p>
     * Fetch Reservations Eligible for an Upgrade
     */
    getUpgradeEligibilityReservations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUpgradeEligibilityReservationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to merge multiple reservations. <p><strong>OperationId:</strong>mergeReservations</p>
     * Merge multiple Reservations
     */
    mergeReservationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling mergeReservations.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling mergeReservations.');
            }
            if (requestParameters.reservationsToMerge === null || requestParameters.reservationsToMerge === undefined) {
                throw new runtime.RequiredError('reservationsToMerge', 'Required parameter requestParameters.reservationsToMerge was null or undefined when calling mergeReservations.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/mergeReservations`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationsToMergeToJSON)(requestParameters.reservationsToMerge),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MergeReservationsStatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to merge multiple reservations. <p><strong>OperationId:</strong>mergeReservations</p>
     * Merge multiple Reservations
     */
    mergeReservations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.mergeReservationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Break Reservation lock on a reservation. <p><strong>OperationId:</strong>postBreakReservationLock</p>
     * Break Reservation lock
     */
    postBreakReservationLockRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postBreakReservationLock.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postBreakReservationLock.');
            }
            if (requestParameters.reservationLock === null || requestParameters.reservationLock === undefined) {
                throw new runtime.RequiredError('reservationLock', 'Required parameter requestParameters.reservationLock was null or undefined when calling postBreakReservationLock.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/locks/break`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationLockToJSON)(requestParameters.reservationLock),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Break Reservation lock on a reservation. <p><strong>OperationId:</strong>postBreakReservationLock</p>
     * Break Reservation lock
     */
    postBreakReservationLock(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postBreakReservationLockRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create or updates multiple alerts for multiple reservations in bulk. <p><strong>OperationId:</strong>postBulkReservationAlerts</p>
     * Create Bulk Reservation Alerts
     */
    postBulkReservationAlertsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postBulkReservationAlerts.');
            }
            if (requestParameters.reservationAlerts === null || requestParameters.reservationAlerts === undefined) {
                throw new runtime.RequiredError('reservationAlerts', 'Required parameter requestParameters.reservationAlerts was null or undefined when calling postBulkReservationAlerts.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/alerts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationAlertsToJSON)(requestParameters.reservationAlerts),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Create or updates multiple alerts for multiple reservations in bulk. <p><strong>OperationId:</strong>postBulkReservationAlerts</p>
     * Create Bulk Reservation Alerts
     */
    postBulkReservationAlerts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postBulkReservationAlertsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to request a new call or make updates to an existing call.<p><strong>OperationId:</strong>postCall</p>
     * Register calls
     */
    postCallRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.registerCall === null || requestParameters.registerCall === undefined) {
                throw new runtime.RequiredError('registerCall', 'Required parameter requestParameters.registerCall was null or undefined when calling postCall.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/calls`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RegisterCallToJSON)(requestParameters.registerCall),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RegisterCallFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to request a new call or make updates to an existing call.<p><strong>OperationId:</strong>postCall</p>
     * Register calls
     */
    postCall(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCallRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this if a guest would like to cancel their reservation.  You will receive a cancellation number in the response. <p><strong>OperationId:</strong>postCancelReservation</p>
     * Cancel Reservation by ID
     */
    postCancelReservationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postCancelReservation.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postCancelReservation.');
            }
            if (requestParameters.cancelReservation === null || requestParameters.cancelReservation === undefined) {
                throw new runtime.RequiredError('cancelReservation', 'Required parameter requestParameters.cancelReservation was null or undefined when calling postCancelReservation.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/cancellations`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PostCancelReservationRequestToJSON)(requestParameters.cancelReservation),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CancelReservationDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this if a guest would like to cancel their reservation.  You will receive a cancellation number in the response. <p><strong>OperationId:</strong>postCancelReservation</p>
     * Cancel Reservation by ID
     */
    postCancelReservation(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCancelReservationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this if a guest would like to cancel their reservation.  You will receive a cancellation number in the response. <p><strong>OperationId:</strong>postCancelReservationByExtId</p>
     * Cancel Reservation by ID
     */
    postCancelReservationByExtIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationExternalId === null || requestParameters.reservationExternalId === undefined) {
                throw new runtime.RequiredError('reservationExternalId', 'Required parameter requestParameters.reservationExternalId was null or undefined when calling postCancelReservationByExtId.');
            }
            if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
                throw new runtime.RequiredError('externalSystemCode', 'Required parameter requestParameters.externalSystemCode was null or undefined when calling postCancelReservationByExtId.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postCancelReservationByExtId.');
            }
            if (requestParameters.cancelReservation === null || requestParameters.cancelReservation === undefined) {
                throw new runtime.RequiredError('cancelReservation', 'Required parameter requestParameters.cancelReservation was null or undefined when calling postCancelReservationByExtId.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/cancellations`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CancelReservationToJSON)(requestParameters.cancelReservation),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CancelReservationDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this if a guest would like to cancel their reservation.  You will receive a cancellation number in the response. <p><strong>OperationId:</strong>postCancelReservationByExtId</p>
     * Cancel Reservation by ID
     */
    postCancelReservationByExtId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCancelReservationByExtIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API can be used to  cancel multiple reservations. <p><strong>OperationId:</strong>postCancelReservations</p>
     * Cancel Reservations
     */
    postCancelReservationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postCancelReservations.');
            }
            if (requestParameters.cancelReservations === null || requestParameters.cancelReservations === undefined) {
                throw new runtime.RequiredError('cancelReservations', 'Required parameter requestParameters.cancelReservations was null or undefined when calling postCancelReservations.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/cancellations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CancelReservationsToJSON)(requestParameters.cancelReservations),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API can be used to  cancel multiple reservations. <p><strong>OperationId:</strong>postCancelReservations</p>
     * Cancel Reservations
     */
    postCancelReservations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCancelReservationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to cancel reservations including multiple share reservations with single request. You will receive cancellation numbers in the response. <p><strong>OperationId:</strong>postCancelShareReservation</p>
     * Cancel reservations
     */
    postCancelShareReservationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postCancelShareReservation.');
            }
            if (requestParameters.cancelReservation === null || requestParameters.cancelReservation === undefined) {
                throw new runtime.RequiredError('cancelReservation', 'Required parameter requestParameters.cancelReservation was null or undefined when calling postCancelShareReservation.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/reservationCancellations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CancelReservationToJSON)(requestParameters.cancelReservation),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CancelReservationDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to cancel reservations including multiple share reservations with single request. You will receive cancellation numbers in the response. <p><strong>OperationId:</strong>postCancelShareReservation</p>
     * Cancel reservations
     */
    postCancelShareReservation(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCancelShareReservationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new cancellation policy for a property. <p><strong>OperationId:</strong>postCancellationPolicy</p>
     * Create a Cancellation policy
     */
    postCancellationPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postCancellationPolicy.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postCancellationPolicy.');
            }
            if (requestParameters.reservationCancellationPolicyCriteria === null || requestParameters.reservationCancellationPolicyCriteria === undefined) {
                throw new runtime.RequiredError('reservationCancellationPolicyCriteria', 'Required parameter requestParameters.reservationCancellationPolicyCriteria was null or undefined when calling postCancellationPolicy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/cancellationPolicies`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationCancellationPolicyCriteriaToJSON)(requestParameters.reservationCancellationPolicyCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new cancellation policy for a property. <p><strong>OperationId:</strong>postCancellationPolicy</p>
     * Create a Cancellation policy
     */
    postCancellationPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCancellationPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservations</p>
     * Combine Share Reservations
     */
    postCombineShareReservationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postCombineShareReservations.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postCombineShareReservations.');
            }
            if (requestParameters.combineShareReservations === null || requestParameters.combineShareReservations === undefined) {
                throw new runtime.RequiredError('combineShareReservations', 'Required parameter requestParameters.combineShareReservations was null or undefined when calling postCombineShareReservations.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/shares`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CombineShareReservationsToJSON)(requestParameters.combineShareReservations),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CombineShareReservationsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservations</p>
     * Combine Share Reservations
     */
    postCombineShareReservations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCombineShareReservationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservationsByExtId</p>
     * Combine Share Reservations
     */
    postCombineShareReservationsByExtIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationExternalId === null || requestParameters.reservationExternalId === undefined) {
                throw new runtime.RequiredError('reservationExternalId', 'Required parameter requestParameters.reservationExternalId was null or undefined when calling postCombineShareReservationsByExtId.');
            }
            if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
                throw new runtime.RequiredError('externalSystemCode', 'Required parameter requestParameters.externalSystemCode was null or undefined when calling postCombineShareReservationsByExtId.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postCombineShareReservationsByExtId.');
            }
            if (requestParameters.combineShareReservations === null || requestParameters.combineShareReservations === undefined) {
                throw new runtime.RequiredError('combineShareReservations', 'Required parameter requestParameters.combineShareReservations was null or undefined when calling postCombineShareReservationsByExtId.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/shares`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CombineShareReservationsToJSON)(requestParameters.combineShareReservations),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CombineShareReservationsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservationsByExtId</p>
     * Combine Share Reservations
     */
    postCombineShareReservationsByExtId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCombineShareReservationsByExtIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a confirmation letter for a property. <p><strong>OperationId:</strong>postConfirmationLetters</p>
     * Create the confirmation letters
     */
    postConfirmationLettersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postConfirmationLetters.');
            }
            if (requestParameters.confirmationLetters === null || requestParameters.confirmationLetters === undefined) {
                throw new runtime.RequiredError('confirmationLetters', 'Required parameter requestParameters.confirmationLetters was null or undefined when calling postConfirmationLetters.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/confirmationLetters`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ConfirmationLettersToJSON)(requestParameters.confirmationLetters),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ConfirmationLettersDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Create a confirmation letter for a property. <p><strong>OperationId:</strong>postConfirmationLetters</p>
     * Create the confirmation letters
     */
    postConfirmationLetters(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postConfirmationLettersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create deposit policy for a property. This policy can then be used for reservations. <p><strong>OperationId:</strong>postDepositPolicy</p>
     * Create deposit policy
     */
    postDepositPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postDepositPolicy.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postDepositPolicy.');
            }
            if (requestParameters.reservationDepositPolicyCriteria === null || requestParameters.reservationDepositPolicyCriteria === undefined) {
                throw new runtime.RequiredError('reservationDepositPolicyCriteria', 'Required parameter requestParameters.reservationDepositPolicyCriteria was null or undefined when calling postDepositPolicy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/depositPolicies`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationDepositPolicyCriteriaToJSON)(requestParameters.reservationDepositPolicyCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Create deposit policy for a property. This policy can then be used for reservations. <p><strong>OperationId:</strong>postDepositPolicy</p>
     * Create deposit policy
     */
    postDepositPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postDepositPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create the Reservation Ecoupons. <p><strong>OperationId:</strong>postECoupons</p>
     * Create Reservation ECoupon
     */
    postECouponsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postECoupons.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postECoupons.');
            }
            if (requestParameters.eCouponsInfo === null || requestParameters.eCouponsInfo === undefined) {
                throw new runtime.RequiredError('eCouponsInfo', 'Required parameter requestParameters.eCouponsInfo was null or undefined when calling postECoupons.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/eCoupons`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ECouponsInfoToJSON)(requestParameters.eCouponsInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Create the Reservation Ecoupons. <p><strong>OperationId:</strong>postECoupons</p>
     * Create Reservation ECoupon
     */
    postECoupons(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postECouponsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create guest message for a guest reservation. <p><strong>OperationId:</strong>postGuestMessages</p>
     * Create guest messages
     */
    postGuestMessagesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postGuestMessages.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postGuestMessages.');
            }
            if (requestParameters.createGuestMessages === null || requestParameters.createGuestMessages === undefined) {
                throw new runtime.RequiredError('createGuestMessages', 'Required parameter requestParameters.createGuestMessages was null or undefined when calling postGuestMessages.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/guestMessages`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CreateGuestMessagesToJSON)(requestParameters.createGuestMessages),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GuestMessagesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Create guest message for a guest reservation. <p><strong>OperationId:</strong>postGuestMessages</p>
     * Create guest messages
     */
    postGuestMessages(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postGuestMessagesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to issue Reservation tickets. <p><strong>OperationId:</strong>postIssueTickets</p>
     * Issue Reservation tickets
     */
    postIssueTicketsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postIssueTickets.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postIssueTickets.');
            }
            if (requestParameters.ticketsInfo === null || requestParameters.ticketsInfo === undefined) {
                throw new runtime.RequiredError('ticketsInfo', 'Required parameter requestParameters.ticketsInfo was null or undefined when calling postIssueTickets.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/tickets/issue`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TicketsInfoToJSON)(requestParameters.ticketsInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to issue Reservation tickets. <p><strong>OperationId:</strong>postIssueTickets</p>
     * Issue Reservation tickets
     */
    postIssueTickets(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postIssueTicketsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a master account for a reservation. <p><strong>OperationId:</strong>postMasterAccount</p>
     * Create a Master Account
     */
    postMasterAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postMasterAccount.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postMasterAccount.');
            }
            if (requestParameters.masterAccount === null || requestParameters.masterAccount === undefined) {
                throw new runtime.RequiredError('masterAccount', 'Required parameter requestParameters.masterAccount was null or undefined when calling postMasterAccount.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/masterAccount`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MasterAccountToJSON)(requestParameters.masterAccount),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Create a master account for a reservation. <p><strong>OperationId:</strong>postMasterAccount</p>
     * Create a Master Account
     */
    postMasterAccount(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postMasterAccountRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add a payment method to a reservation. <p><strong>OperationId:</strong>postPaymentMethods</p>
     * Create a payment method
     */
    postPaymentMethodsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postPaymentMethods.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postPaymentMethods.');
            }
            if (requestParameters.reservationPaymentMethods === null || requestParameters.reservationPaymentMethods === undefined) {
                throw new runtime.RequiredError('reservationPaymentMethods', 'Required parameter requestParameters.reservationPaymentMethods was null or undefined when calling postPaymentMethods.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/paymentMethods`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationPaymentMethodsToJSON)(requestParameters.reservationPaymentMethods),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add a payment method to a reservation. <p><strong>OperationId:</strong>postPaymentMethods</p>
     * Create a payment method
     */
    postPaymentMethods(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postPaymentMethodsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This will allow you to set a reservation as a pre-registered guest.  The API request requires the guests confirmation number and you can optionally include arrival time.  The behavior of the API will be dependent upon the Pre-registration rules configured for the hotel in OPERA Cloud administration. <p><strong>OperationId:</strong>postPreCheckInReservation</p>
     * Pre-Checkin a Reservation
     */
    postPreCheckInReservationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postPreCheckInReservation.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postPreCheckInReservation.');
            }
            if (requestParameters.preCheckInReservation === null || requestParameters.preCheckInReservation === undefined) {
                throw new runtime.RequiredError('preCheckInReservation', 'Required parameter requestParameters.preCheckInReservation was null or undefined when calling postPreCheckInReservation.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/preCheckIn`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PostPreCheckInReservationRequestToJSON)(requestParameters.preCheckInReservation),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This will allow you to set a reservation as a pre-registered guest.  The API request requires the guests confirmation number and you can optionally include arrival time.  The behavior of the API will be dependent upon the Pre-registration rules configured for the hotel in OPERA Cloud administration. <p><strong>OperationId:</strong>postPreCheckInReservation</p>
     * Pre-Checkin a Reservation
     */
    postPreCheckInReservation(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postPreCheckInReservationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this to create a new reservation for a hA12:F24otel.  Generally, you would search for a hotel\'s availability and rates before proceeding to use postReservation.  There are many fields in postReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postReservation. <p><strong>OperationId:</strong>postReservation</p>
     * Create Reservation
     */
    postReservationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postReservation.');
            }
            if (requestParameters.createReservation === null || requestParameters.createReservation === undefined) {
                throw new runtime.RequiredError('createReservation', 'Required parameter requestParameters.createReservation was null or undefined when calling postReservation.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PostReservationRequestToJSON)(requestParameters.createReservation),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CreateReservationTypeFromJSON)(jsonValue));
        });
    }
    /**
     * Use this to create a new reservation for a hA12:F24otel.  Generally, you would search for a hotel\'s availability and rates before proceeding to use postReservation.  There are many fields in postReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postReservation. <p><strong>OperationId:</strong>postReservation</p>
     * Create Reservation
     */
    postReservation(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postReservationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this to create a new reservation for a block, you must know the block Code to create this reservation.  In order to post a successful block reservation, please ensure you use the ListOfValues API\'s to know the hotel\'s codes; such as Address Type, Country Code,  Titles, preferenceCodes etc. <p><strong>OperationId:</strong>postReservationByBlock</p>
     * Create Reservation for a Block
     */
    postReservationByBlockRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling postReservationByBlock.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postReservationByBlock.');
            }
            if (requestParameters.createReservation === null || requestParameters.createReservation === undefined) {
                throw new runtime.RequiredError('createReservation', 'Required parameter requestParameters.createReservation was null or undefined when calling postReservationByBlock.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/blocks/{blockId}/reservations`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PostReservationByBlockRequestToJSON)(requestParameters.createReservation),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this to create a new reservation for a block, you must know the block Code to create this reservation.  In order to post a successful block reservation, please ensure you use the ListOfValues API\'s to know the hotel\'s codes; such as Address Type, Country Code,  Titles, preferenceCodes etc. <p><strong>OperationId:</strong>postReservationByBlock</p>
     * Create Reservation for a Block
     */
    postReservationByBlock(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postReservationByBlockRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Attach a certificate to Reservation. <p><strong>OperationId:</strong>postReservationCertificate</p>
     * Attach Certificate
     */
    postReservationCertificateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postReservationCertificate.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postReservationCertificate.');
            }
            if (requestParameters.attachCertificate === null || requestParameters.attachCertificate === undefined) {
                throw new runtime.RequiredError('attachCertificate', 'Required parameter requestParameters.attachCertificate was null or undefined when calling postReservationCertificate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/certificates`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AttachCertificateToJSON)(requestParameters.attachCertificate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Attach a certificate to Reservation. <p><strong>OperationId:</strong>postReservationCertificate</p>
     * Attach Certificate
     */
    postReservationCertificate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postReservationCertificateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Copy a Reservation. <p><strong>OperationId:</strong>postReservationCopy</p>
     * Copy a Reservation
     */
    postReservationCopyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postReservationCopy.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postReservationCopy.');
            }
            if (requestParameters.copyReservation === null || requestParameters.copyReservation === undefined) {
                throw new runtime.RequiredError('copyReservation', 'Required parameter requestParameters.copyReservation was null or undefined when calling postReservationCopy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/copy`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CopyReservationToJSON)(requestParameters.copyReservation),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Copy a Reservation. <p><strong>OperationId:</strong>postReservationCopy</p>
     * Copy a Reservation
     */
    postReservationCopy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postReservationCopyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinks</p>
     * Link Reservations
     */
    postReservationLinksRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postReservationLinks.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postReservationLinks.');
            }
            if (requestParameters.linkReservationsCriteria === null || requestParameters.linkReservationsCriteria === undefined) {
                throw new runtime.RequiredError('linkReservationsCriteria', 'Required parameter requestParameters.linkReservationsCriteria was null or undefined when calling postReservationLinks.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/linkedReservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PostReservationLinksRequestToJSON)(requestParameters.linkReservationsCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinks</p>
     * Link Reservations
     */
    postReservationLinks(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postReservationLinksRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinksByChain</p>
     * Link Reservations By Chain
     */
    postReservationLinksByChainRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postReservationLinksByChain.');
            }
            if (requestParameters.linkReservationsCriteria === null || requestParameters.linkReservationsCriteria === undefined) {
                throw new runtime.RequiredError('linkReservationsCriteria', 'Required parameter requestParameters.linkReservationsCriteria was null or undefined when calling postReservationLinksByChain.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/reservations/linkedReservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LinkReservationsCriteriaToJSON)(requestParameters.linkReservationsCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinksByChain</p>
     * Link Reservations By Chain
     */
    postReservationLinksByChain(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postReservationLinksByChainRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinksByExtId</p>
     * Link Reservations
     */
    postReservationLinksByExtIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationExternalId === null || requestParameters.reservationExternalId === undefined) {
                throw new runtime.RequiredError('reservationExternalId', 'Required parameter requestParameters.reservationExternalId was null or undefined when calling postReservationLinksByExtId.');
            }
            if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
                throw new runtime.RequiredError('externalSystemCode', 'Required parameter requestParameters.externalSystemCode was null or undefined when calling postReservationLinksByExtId.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postReservationLinksByExtId.');
            }
            if (requestParameters.linkReservationsCriteria === null || requestParameters.linkReservationsCriteria === undefined) {
                throw new runtime.RequiredError('linkReservationsCriteria', 'Required parameter requestParameters.linkReservationsCriteria was null or undefined when calling postReservationLinksByExtId.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/linkedReservations/{reservationExternalId}`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.LinkReservationsCriteriaToJSON)(requestParameters.linkReservationsCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinksByExtId</p>
     * Link Reservations
     */
    postReservationLinksByExtId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postReservationLinksByExtIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create Guest Locater for a list of Reservations. <p><strong>OperationId:</strong>postReservationLocators</p>
     * Create Reservation Guest Locator
     */
    postReservationLocatorsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postReservationLocators.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postReservationLocators.');
            }
            if (requestParameters.reservationLocatorsDetailsInfo === null || requestParameters.reservationLocatorsDetailsInfo === undefined) {
                throw new runtime.RequiredError('reservationLocatorsDetailsInfo', 'Required parameter requestParameters.reservationLocatorsDetailsInfo was null or undefined when calling postReservationLocators.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/guestLocators`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationLocatorsDetailsInfoToJSON)(requestParameters.reservationLocatorsDetailsInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationLocatorsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Create Guest Locater for a list of Reservations. <p><strong>OperationId:</strong>postReservationLocators</p>
     * Create Reservation Guest Locator
     */
    postReservationLocators(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postReservationLocatorsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Add a membership to an existing reservation. <p><strong>OperationId:</strong>postReservationMembership</p>
     * Create a Reservation membership
     */
    postReservationMembershipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postReservationMembership.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postReservationMembership.');
            }
            if (requestParameters.reservationMembership === null || requestParameters.reservationMembership === undefined) {
                throw new runtime.RequiredError('reservationMembership', 'Required parameter requestParameters.reservationMembership was null or undefined when calling postReservationMembership.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/memberships`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationMembershipToJSON)(requestParameters.reservationMembership),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Add a membership to an existing reservation. <p><strong>OperationId:</strong>postReservationMembership</p>
     * Create a Reservation membership
     */
    postReservationMembership(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postReservationMembershipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to add packages to a reservation. <p><strong>OperationId:</strong>postReservationPackage</p>
     * Add a package to a Reservation
     */
    postReservationPackageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postReservationPackage.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postReservationPackage.');
            }
            if (requestParameters.reservationPackagesInfo === null || requestParameters.reservationPackagesInfo === undefined) {
                throw new runtime.RequiredError('reservationPackagesInfo', 'Required parameter requestParameters.reservationPackagesInfo was null or undefined when calling postReservationPackage.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/packages`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationPackagesInfoToJSON)(requestParameters.reservationPackagesInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to add packages to a reservation. <p><strong>OperationId:</strong>postReservationPackage</p>
     * Add a package to a Reservation
     */
    postReservationPackage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postReservationPackageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will add a preference to a Reservation.  <p><strong>OperationId:</strong>postReservationPreference</p>
     * Add a preference to a Reservation
     */
    postReservationPreferenceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postReservationPreference.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postReservationPreference.');
            }
            if (requestParameters.reservationPreferenceInfo === null || requestParameters.reservationPreferenceInfo === undefined) {
                throw new runtime.RequiredError('reservationPreferenceInfo', 'Required parameter requestParameters.reservationPreferenceInfo was null or undefined when calling postReservationPreference.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/preferences`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationPreferenceInfoToJSON)(requestParameters.reservationPreferenceInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API will add a preference to a Reservation.  <p><strong>OperationId:</strong>postReservationPreference</p>
     * Add a preference to a Reservation
     */
    postReservationPreference(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postReservationPreferenceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Reserve Reservation inventory items. <p><strong>OperationId:</strong>postReserveInventoryItems</p>
     * Reserve Reservation inventory items
     */
    postReserveInventoryItemsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postReserveInventoryItems.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postReserveInventoryItems.');
            }
            if (requestParameters.reserveInventoryItems === null || requestParameters.reserveInventoryItems === undefined) {
                throw new runtime.RequiredError('reserveInventoryItems', 'Required parameter requestParameters.reserveInventoryItems was null or undefined when calling postReserveInventoryItems.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/inventoryItems`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReserveInventoryItemsToJSON)(requestParameters.reserveInventoryItems),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Reserve Reservation inventory items. <p><strong>OperationId:</strong>postReserveInventoryItems</p>
     * Reserve Reservation inventory items
     */
    postReserveInventoryItems(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postReserveInventoryItemsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to reverse a deposit policy on a specified reservation. <p><strong>OperationId:</strong>postReverseDepositPolicy</p>
     * Reverse a deposit policy
     */
    postReverseDepositPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.policyId === null || requestParameters.policyId === undefined) {
                throw new runtime.RequiredError('policyId', 'Required parameter requestParameters.policyId was null or undefined when calling postReverseDepositPolicy.');
            }
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postReverseDepositPolicy.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postReverseDepositPolicy.');
            }
            if (requestParameters.reverseDepositPolicy === null || requestParameters.reverseDepositPolicy === undefined) {
                throw new runtime.RequiredError('reverseDepositPolicy', 'Required parameter requestParameters.reverseDepositPolicy was null or undefined when calling postReverseDepositPolicy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/reverseDepositPolicy/{policyId}`.replace(`{${"policyId"}}`, encodeURIComponent(String(requestParameters.policyId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReverseDepositPolicyToJSON)(requestParameters.reverseDepositPolicy),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to reverse a deposit policy on a specified reservation. <p><strong>OperationId:</strong>postReverseDepositPolicy</p>
     * Reverse a deposit policy
     */
    postReverseDepositPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postReverseDepositPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create routing instructions on a reservation. It requires a reservation ID, which can be fetched using getReservations. <p><strong>OperationId:</strong>postRoutingInstructions</p>
     * Create routing instructions for a reservation
     */
    postRoutingInstructionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postRoutingInstructions.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postRoutingInstructions.');
            }
            if (requestParameters.reservationRoutingCriteria === null || requestParameters.reservationRoutingCriteria === undefined) {
                throw new runtime.RequiredError('reservationRoutingCriteria', 'Required parameter requestParameters.reservationRoutingCriteria was null or undefined when calling postRoutingInstructions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationRoutingCriteriaToJSON)(requestParameters.reservationRoutingCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create routing instructions on a reservation. It requires a reservation ID, which can be fetched using getReservations. <p><strong>OperationId:</strong>postRoutingInstructions</p>
     * Create routing instructions for a reservation
     */
    postRoutingInstructions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postRoutingInstructionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create routing instructions on a reservation. <p><strong>OperationId:</strong>postRoutingInstructionsByExtId</p>
     * Create routing instructions
     */
    postRoutingInstructionsByExtIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationExternalId === null || requestParameters.reservationExternalId === undefined) {
                throw new runtime.RequiredError('reservationExternalId', 'Required parameter requestParameters.reservationExternalId was null or undefined when calling postRoutingInstructionsByExtId.');
            }
            if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
                throw new runtime.RequiredError('externalSystemCode', 'Required parameter requestParameters.externalSystemCode was null or undefined when calling postRoutingInstructionsByExtId.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postRoutingInstructionsByExtId.');
            }
            if (requestParameters.reservationRoutingCriteria === null || requestParameters.reservationRoutingCriteria === undefined) {
                throw new runtime.RequiredError('reservationRoutingCriteria', 'Required parameter requestParameters.reservationRoutingCriteria was null or undefined when calling postRoutingInstructionsByExtId.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/routingInstructions`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationRoutingCriteriaToJSON)(requestParameters.reservationRoutingCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create routing instructions on a reservation. <p><strong>OperationId:</strong>postRoutingInstructionsByExtId</p>
     * Create routing instructions
     */
    postRoutingInstructionsByExtId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postRoutingInstructionsByExtIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create sell message configuration for a property. <p><strong>OperationId:</strong>postSellMessageConfig</p>
     * Create sell message
     */
    postSellMessageConfigRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postSellMessageConfig.');
            }
            if (requestParameters.sellMessageConfig === null || requestParameters.sellMessageConfig === undefined) {
                throw new runtime.RequiredError('sellMessageConfig', 'Required parameter requestParameters.sellMessageConfig was null or undefined when calling postSellMessageConfig.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/sellMessages/config`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SellMessageConfigToJSON)(requestParameters.sellMessageConfig),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Create sell message configuration for a property. <p><strong>OperationId:</strong>postSellMessageConfig</p>
     * Create sell message
     */
    postSellMessageConfig(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postSellMessageConfigRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create sell message configuration. <p><strong>OperationId:</strong>postSellMessageConfigByChain</p>
     * Create sell message by chain
     */
    postSellMessageConfigByChainRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sellMessageConfig === null || requestParameters.sellMessageConfig === undefined) {
                throw new runtime.RequiredError('sellMessageConfig', 'Required parameter requestParameters.sellMessageConfig was null or undefined when calling postSellMessageConfigByChain.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/sellMessages/config`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SellMessageConfigToJSON)(requestParameters.sellMessageConfig),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Create sell message configuration. <p><strong>OperationId:</strong>postSellMessageConfigByChain</p>
     * Create sell message by chain
     */
    postSellMessageConfigByChain(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postSellMessageConfigByChainRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create tickets on a reservation. <p><strong>OperationId:</strong>postTickets</p>
     * Create tickets
     */
    postTicketsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postTickets.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postTickets.');
            }
            if (requestParameters.ticketsInfo === null || requestParameters.ticketsInfo === undefined) {
                throw new runtime.RequiredError('ticketsInfo', 'Required parameter requestParameters.ticketsInfo was null or undefined when calling postTickets.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/tickets`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TicketsInfoToJSON)(requestParameters.ticketsInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create tickets on a reservation. <p><strong>OperationId:</strong>postTickets</p>
     * Create tickets
     */
    postTickets(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postTicketsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Transaction Diversions. <p><strong>OperationId:</strong>postTransactionDiversions</p>
     * Create Transaction Diversions
     */
    postTransactionDiversionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postTransactionDiversions.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postTransactionDiversions.');
            }
            if (requestParameters.transactionDiversionsInfo === null || requestParameters.transactionDiversionsInfo === undefined) {
                throw new runtime.RequiredError('transactionDiversionsInfo', 'Required parameter requestParameters.transactionDiversionsInfo was null or undefined when calling postTransactionDiversions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/transactionDiversions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransactionDiversionsInfoToJSON)(requestParameters.transactionDiversionsInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Transaction Diversions. <p><strong>OperationId:</strong>postTransactionDiversions</p>
     * Create Transaction Diversions
     */
    postTransactionDiversions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postTransactionDiversionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Register turnaways for a property. <p><strong>OperationId:</strong>postTurnawayReservation</p>
     * Register Turnaway
     */
    postTurnawayReservationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postTurnawayReservation.');
            }
            if (requestParameters.registerTurnaway === null || requestParameters.registerTurnaway === undefined) {
                throw new runtime.RequiredError('registerTurnaway', 'Required parameter requestParameters.registerTurnaway was null or undefined when calling postTurnawayReservation.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/turnaways`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RegisterTurnawayToJSON)(requestParameters.registerTurnaway),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Register turnaways for a property. <p><strong>OperationId:</strong>postTurnawayReservation</p>
     * Register Turnaway
     */
    postTurnawayReservation(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postTurnawayReservationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to upsell a reservation in OPERA.  You would need to already know the upsell rules that are available for this reservation - you can do this by using the getUpsell API. <p><strong>OperationId:</strong>postUpsellReservation</p>
     * Upsell a Reservation
     */
    postUpsellReservationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling postUpsellReservation.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postUpsellReservation.');
            }
            if (requestParameters.upsellReservation === null || requestParameters.upsellReservation === undefined) {
                throw new runtime.RequiredError('upsellReservation', 'Required parameter requestParameters.upsellReservation was null or undefined when calling postUpsellReservation.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/upsell`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PostUpsellReservationRequestToJSON)(requestParameters.upsellReservation),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to upsell a reservation in OPERA.  You would need to already know the upsell rules that are available for this reservation - you can do this by using the getUpsell API. <p><strong>OperationId:</strong>postUpsellReservation</p>
     * Upsell a Reservation
     */
    postUpsellReservation(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postUpsellReservationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Acquire Reservation Lock. <p><strong>OperationId:</strong>putAcquireReservationLock</p>
     * Acquire Reservation Lock
     */
    putAcquireReservationLockRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putAcquireReservationLock.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putAcquireReservationLock.');
            }
            if (requestParameters.reservationLock === null || requestParameters.reservationLock === undefined) {
                throw new runtime.RequiredError('reservationLock', 'Required parameter requestParameters.reservationLock was null or undefined when calling putAcquireReservationLock.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/locks`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationLockToJSON)(requestParameters.reservationLock),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationLockDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Acquire Reservation Lock. <p><strong>OperationId:</strong>putAcquireReservationLock</p>
     * Acquire Reservation Lock
     */
    putAcquireReservationLock(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putAcquireReservationLockRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API performs a validation before separating share reservations. <p><strong>OperationId:</strong>putBreakShareValidations</p>
     * Validate before breaking a share Reservation
     */
    putBreakShareValidationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putBreakShareValidations.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putBreakShareValidations.');
            }
            if (requestParameters.breakShareValidations === null || requestParameters.breakShareValidations === undefined) {
                throw new runtime.RequiredError('breakShareValidations', 'Required parameter requestParameters.breakShareValidations was null or undefined when calling putBreakShareValidations.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/breakshares/action/validate`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BreakShareValidationsToJSON)(requestParameters.breakShareValidations),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BreakShareValidationsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API performs a validation before separating share reservations. <p><strong>OperationId:</strong>putBreakShareValidations</p>
     * Validate before breaking a share Reservation
     */
    putBreakShareValidations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putBreakShareValidationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Change cancellation policy that is configured for a property. <p><strong>OperationId:</strong>putCancellationPolicy</p>
     * Change a Cancellation policy
     */
    putCancellationPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putCancellationPolicy.');
            }
            if (requestParameters.reservationCancellationPolicyCriteria === null || requestParameters.reservationCancellationPolicyCriteria === undefined) {
                throw new runtime.RequiredError('reservationCancellationPolicyCriteria', 'Required parameter requestParameters.reservationCancellationPolicyCriteria was null or undefined when calling putCancellationPolicy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cancellationPolicies`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationCancellationPolicyCriteriaToJSON)(requestParameters.reservationCancellationPolicyCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationCancellationPolicyCriteriaFromJSON)(jsonValue));
        });
    }
    /**
     * Change cancellation policy that is configured for a property. <p><strong>OperationId:</strong>putCancellationPolicy</p>
     * Change a Cancellation policy
     */
    putCancellationPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putCancellationPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Validate before combining Reservations for shares. <p><strong>OperationId:</strong>putCombineShareValidations</p>
     * Combine Share Validations
     */
    putCombineShareValidationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putCombineShareValidations.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putCombineShareValidations.');
            }
            if (requestParameters.combineShareValidations === null || requestParameters.combineShareValidations === undefined) {
                throw new runtime.RequiredError('combineShareValidations', 'Required parameter requestParameters.combineShareValidations was null or undefined when calling putCombineShareValidations.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/combineshares/action/validate`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CombineShareValidationsToJSON)(requestParameters.combineShareValidations),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CombineShareValidationsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Validate before combining Reservations for shares. <p><strong>OperationId:</strong>putCombineShareValidations</p>
     * Combine Share Validations
     */
    putCombineShareValidations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putCombineShareValidationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Compute the cancellation policies for a reservation. <p><strong>OperationId:</strong>putComputeCancellationPolicies</p>
     * Compute the cancellation policies
     */
    putComputeCancellationPoliciesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putComputeCancellationPolicies.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putComputeCancellationPolicies.');
            }
            if (requestParameters.computeCancellationPolicies === null || requestParameters.computeCancellationPolicies === undefined) {
                throw new runtime.RequiredError('computeCancellationPolicies', 'Required parameter requestParameters.computeCancellationPolicies was null or undefined when calling putComputeCancellationPolicies.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/cancellationPolicies`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ComputeCancellationPoliciesToJSON)(requestParameters.computeCancellationPolicies),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ComputeCancellationPoliciesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Compute the cancellation policies for a reservation. <p><strong>OperationId:</strong>putComputeCancellationPolicies</p>
     * Compute the cancellation policies
     */
    putComputeCancellationPolicies(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putComputeCancellationPoliciesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Computes the deposit policies. <p><strong>OperationId:</strong>putComputeDepositPolicies</p>
     * Computes the deposit policies
     */
    putComputeDepositPoliciesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putComputeDepositPolicies.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putComputeDepositPolicies.');
            }
            if (requestParameters.computeDepositPolicies === null || requestParameters.computeDepositPolicies === undefined) {
                throw new runtime.RequiredError('computeDepositPolicies', 'Required parameter requestParameters.computeDepositPolicies was null or undefined when calling putComputeDepositPolicies.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/depositPolicies`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ComputeDepositPoliciesToJSON)(requestParameters.computeDepositPolicies),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ComputeDepositPoliciesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Computes the deposit policies. <p><strong>OperationId:</strong>putComputeDepositPolicies</p>
     * Computes the deposit policies
     */
    putComputeDepositPolicies(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putComputeDepositPoliciesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Change deposit policy which already exists for a property. <p><strong>OperationId:</strong>putDepositPolicy</p>
     * Change deposit policy
     */
    putDepositPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putDepositPolicy.');
            }
            if (requestParameters.reservationDepositPolicyCriteria === null || requestParameters.reservationDepositPolicyCriteria === undefined) {
                throw new runtime.RequiredError('reservationDepositPolicyCriteria', 'Required parameter requestParameters.reservationDepositPolicyCriteria was null or undefined when calling putDepositPolicy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/depositPolicies`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationDepositPolicyCriteriaToJSON)(requestParameters.reservationDepositPolicyCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChangeDepositPolicyDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Change deposit policy which already exists for a property. <p><strong>OperationId:</strong>putDepositPolicy</p>
     * Change deposit policy
     */
    putDepositPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putDepositPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Change the Reservation Ecoupons. <p><strong>OperationId:</strong>putECoupons</p>
     * Change Reservation Ecoupon
     */
    putECouponsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putECoupons.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putECoupons.');
            }
            if (requestParameters.eCouponsInfo === null || requestParameters.eCouponsInfo === undefined) {
                throw new runtime.RequiredError('eCouponsInfo', 'Required parameter requestParameters.eCouponsInfo was null or undefined when calling putECoupons.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/eCoupons`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ECouponsInfoToJSON)(requestParameters.eCouponsInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ECouponsFromJSON)(jsonValue));
        });
    }
    /**
     * Change the Reservation Ecoupons. <p><strong>OperationId:</strong>putECoupons</p>
     * Change Reservation Ecoupon
     */
    putECoupons(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putECouponsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Change guest Message on a reservation. <p><strong>OperationId:</strong>putGuestMessages</p>
     * Change guest Message
     */
    putGuestMessagesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.guestMessageId === null || requestParameters.guestMessageId === undefined) {
                throw new runtime.RequiredError('guestMessageId', 'Required parameter requestParameters.guestMessageId was null or undefined when calling putGuestMessages.');
            }
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putGuestMessages.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putGuestMessages.');
            }
            if (requestParameters.changeGuestMessages === null || requestParameters.changeGuestMessages === undefined) {
                throw new runtime.RequiredError('changeGuestMessages', 'Required parameter requestParameters.changeGuestMessages was null or undefined when calling putGuestMessages.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/guestMessages/{guestMessageId}`.replace(`{${"guestMessageId"}}`, encodeURIComponent(String(requestParameters.guestMessageId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChangeGuestMessagesToJSON)(requestParameters.changeGuestMessages),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChangeGuestMessagesFromJSON)(jsonValue));
        });
    }
    /**
     * Change guest Message on a reservation. <p><strong>OperationId:</strong>putGuestMessages</p>
     * Change guest Message
     */
    putGuestMessages(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putGuestMessagesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Change a master account on a reservation. <p><strong>OperationId:</strong>putMasterAccount</p>
     * Change a Master Account
     */
    putMasterAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putMasterAccount.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putMasterAccount.');
            }
            if (requestParameters.masterAccount === null || requestParameters.masterAccount === undefined) {
                throw new runtime.RequiredError('masterAccount', 'Required parameter requestParameters.masterAccount was null or undefined when calling putMasterAccount.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/masterAccount`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MasterAccountToJSON)(requestParameters.masterAccount),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MasterAccountSummaryFromJSON)(jsonValue));
        });
    }
    /**
     * Change a master account on a reservation. <p><strong>OperationId:</strong>putMasterAccount</p>
     * Change a Master Account
     */
    putMasterAccount(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putMasterAccountRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will update an existing payment method on a reservation. <p><strong>OperationId:</strong>putPaymentMethods</p>
     * Change a payment method
     */
    putPaymentMethodsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putPaymentMethods.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putPaymentMethods.');
            }
            if (requestParameters.reservationPaymentMethods === null || requestParameters.reservationPaymentMethods === undefined) {
                throw new runtime.RequiredError('reservationPaymentMethods', 'Required parameter requestParameters.reservationPaymentMethods was null or undefined when calling putPaymentMethods.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/paymentMethods`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationPaymentMethodsToJSON)(requestParameters.reservationPaymentMethods),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationPaymentMethodsFromJSON)(jsonValue));
        });
    }
    /**
     * This API will update an existing payment method on a reservation. <p><strong>OperationId:</strong>putPaymentMethods</p>
     * Change a payment method
     */
    putPaymentMethods(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putPaymentMethodsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to reinstate a cancelled reservation. <p><strong>OperationId:</strong>putReinstateReservation</p>
     * Reinstate a Reservation
     */
    putReinstateReservationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putReinstateReservation.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putReinstateReservation.');
            }
            if (requestParameters.reinstateReservation === null || requestParameters.reinstateReservation === undefined) {
                throw new runtime.RequiredError('reinstateReservation', 'Required parameter requestParameters.reinstateReservation was null or undefined when calling putReinstateReservation.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/cancellations`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReinstateReservationToJSON)(requestParameters.reinstateReservation),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReinstateReservationDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to reinstate a cancelled reservation. <p><strong>OperationId:</strong>putReinstateReservation</p>
     * Reinstate a Reservation
     */
    putReinstateReservation(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putReinstateReservationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to reinstate a cancelled reservation. <p><strong>OperationId:</strong>putReinstateReservationByExtId</p>
     * Reinstate a Reservation
     */
    putReinstateReservationByExtIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationExternalId === null || requestParameters.reservationExternalId === undefined) {
                throw new runtime.RequiredError('reservationExternalId', 'Required parameter requestParameters.reservationExternalId was null or undefined when calling putReinstateReservationByExtId.');
            }
            if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
                throw new runtime.RequiredError('externalSystemCode', 'Required parameter requestParameters.externalSystemCode was null or undefined when calling putReinstateReservationByExtId.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putReinstateReservationByExtId.');
            }
            if (requestParameters.reinstateReservation === null || requestParameters.reinstateReservation === undefined) {
                throw new runtime.RequiredError('reinstateReservation', 'Required parameter requestParameters.reinstateReservation was null or undefined when calling putReinstateReservationByExtId.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/cancellations`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReinstateReservationToJSON)(requestParameters.reinstateReservation),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReinstateReservationDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to reinstate a cancelled reservation. <p><strong>OperationId:</strong>putReinstateReservationByExtId</p>
     * Reinstate a Reservation
     */
    putReinstateReservationByExtId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putReinstateReservationByExtIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this to update an existing reservation for a hotel, such as adding comments, changing the number of guests.   There are many fields in putReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use putReservation. <p><strong>OperationId:</strong>putReservation</p>
     * Update Reservation by ID
     */
    putReservationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putReservation.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putReservation.');
            }
            if (requestParameters.changeReservation === null || requestParameters.changeReservation === undefined) {
                throw new runtime.RequiredError('changeReservation', 'Required parameter requestParameters.changeReservation was null or undefined when calling putReservation.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PutReservationRequestToJSON)(requestParameters.changeReservation),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChangeReservationDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this to update an existing reservation for a hotel, such as adding comments, changing the number of guests.   There are many fields in putReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use putReservation. <p><strong>OperationId:</strong>putReservation</p>
     * Update Reservation by ID
     */
    putReservation(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putReservationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this to update an existing reservation for a hotel, such as adding comments, changing the number of guests.   There are many fields in putReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use putReservation. <p><strong>OperationId:</strong>putReservationByExtId</p>
     * Update Reservation by ID
     */
    putReservationByExtIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationExternalId === null || requestParameters.reservationExternalId === undefined) {
                throw new runtime.RequiredError('reservationExternalId', 'Required parameter requestParameters.reservationExternalId was null or undefined when calling putReservationByExtId.');
            }
            if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
                throw new runtime.RequiredError('externalSystemCode', 'Required parameter requestParameters.externalSystemCode was null or undefined when calling putReservationByExtId.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putReservationByExtId.');
            }
            if (requestParameters.changeReservation === null || requestParameters.changeReservation === undefined) {
                throw new runtime.RequiredError('changeReservation', 'Required parameter requestParameters.changeReservation was null or undefined when calling putReservationByExtId.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChangeReservationToJSON)(requestParameters.changeReservation),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChangeReservationDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this to update an existing reservation for a hotel, such as adding comments, changing the number of guests.   There are many fields in putReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use putReservation. <p><strong>OperationId:</strong>putReservationByExtId</p>
     * Update Reservation by ID
     */
    putReservationByExtId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putReservationByExtIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Validate daily rate details change. <p><strong>OperationId:</strong>putReservationDailyRateDetailValidation</p>
     * Validate daily rate details change
     */
    putReservationDailyRateDetailValidationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putReservationDailyRateDetailValidation.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putReservationDailyRateDetailValidation.');
            }
            if (requestParameters.reservationDailyRateDetail === null || requestParameters.reservationDailyRateDetail === undefined) {
                throw new runtime.RequiredError('reservationDailyRateDetail', 'Required parameter requestParameters.reservationDailyRateDetail was null or undefined when calling putReservationDailyRateDetailValidation.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/dailyRates/action/validate`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationDailyRateDetailToJSON)(requestParameters.reservationDailyRateDetail),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationDailyRateDetailDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Validate daily rate details change. <p><strong>OperationId:</strong>putReservationDailyRateDetailValidation</p>
     * Validate daily rate details change
     */
    putReservationDailyRateDetailValidation(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putReservationDailyRateDetailValidationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Validate Reservation header change. <p><strong>OperationId:</strong>putReservationHeaderValidation</p>
     * Validate Reservation header change
     */
    putReservationHeaderValidationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putReservationHeaderValidation.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putReservationHeaderValidation.');
            }
            if (requestParameters.reservationDailyRateDetail === null || requestParameters.reservationDailyRateDetail === undefined) {
                throw new runtime.RequiredError('reservationDailyRateDetail', 'Required parameter requestParameters.reservationDailyRateDetail was null or undefined when calling putReservationHeaderValidation.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/header/action/validate`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationDailyRateDetailToJSON)(requestParameters.reservationDailyRateDetail),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationDailyRateDetailDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Validate Reservation header change. <p><strong>OperationId:</strong>putReservationHeaderValidation</p>
     * Validate Reservation header change
     */
    putReservationHeaderValidation(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putReservationHeaderValidationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API can be used to move a reservation to a different hotel. <p><strong>OperationId:</strong>putReservationHotelMove</p>
     * Move the Reservation
     */
    putReservationHotelMoveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putReservationHotelMove.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putReservationHotelMove.');
            }
            if (requestParameters.moveReservationHotel === null || requestParameters.moveReservationHotel === undefined) {
                throw new runtime.RequiredError('moveReservationHotel', 'Required parameter requestParameters.moveReservationHotel was null or undefined when calling putReservationHotelMove.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/move`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MoveReservationHotelToJSON)(requestParameters.moveReservationHotel),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MoveReservationHotelDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API can be used to move a reservation to a different hotel. <p><strong>OperationId:</strong>putReservationHotelMove</p>
     * Move the Reservation
     */
    putReservationHotelMove(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putReservationHotelMoveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Extend Reservation Lock. <p><strong>OperationId:</strong>putReservationLock</p>
     * Extend Reservation Lock
     */
    putReservationLockRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.lockHandle === null || requestParameters.lockHandle === undefined) {
                throw new runtime.RequiredError('lockHandle', 'Required parameter requestParameters.lockHandle was null or undefined when calling putReservationLock.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putReservationLock.');
            }
            if (requestParameters.extendReservationLock === null || requestParameters.extendReservationLock === undefined) {
                throw new runtime.RequiredError('extendReservationLock', 'Required parameter requestParameters.extendReservationLock was null or undefined when calling putReservationLock.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/locks/{lockHandle}`.replace(`{${"lockHandle"}}`, encodeURIComponent(String(requestParameters.lockHandle))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ExtendReservationLockToJSON)(requestParameters.extendReservationLock),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ExtendReservationLockDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Extend Reservation Lock. <p><strong>OperationId:</strong>putReservationLock</p>
     * Extend Reservation Lock
     */
    putReservationLock(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putReservationLockRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to update existing packages on a reservation. <p><strong>OperationId:</strong>putReservationPackage</p>
     * Update a package on a Reservation
     */
    putReservationPackageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putReservationPackage.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putReservationPackage.');
            }
            if (requestParameters.reservationPackagesInfo === null || requestParameters.reservationPackagesInfo === undefined) {
                throw new runtime.RequiredError('reservationPackagesInfo', 'Required parameter requestParameters.reservationPackagesInfo was null or undefined when calling putReservationPackage.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/packages`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationPackagesInfoToJSON)(requestParameters.reservationPackagesInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationPackagesInfoFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to update existing packages on a reservation. <p><strong>OperationId:</strong>putReservationPackage</p>
     * Update a package on a Reservation
     */
    putReservationPackage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putReservationPackageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to update the preferences that exist on a reservation. <p><strong>OperationId:</strong>putReservationPreference</p>
     * Change a Reservation Preference
     */
    putReservationPreferenceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.preferenceCode === null || requestParameters.preferenceCode === undefined) {
                throw new runtime.RequiredError('preferenceCode', 'Required parameter requestParameters.preferenceCode was null or undefined when calling putReservationPreference.');
            }
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putReservationPreference.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putReservationPreference.');
            }
            if (requestParameters.reservationPreferenceInfo === null || requestParameters.reservationPreferenceInfo === undefined) {
                throw new runtime.RequiredError('reservationPreferenceInfo', 'Required parameter requestParameters.reservationPreferenceInfo was null or undefined when calling putReservationPreference.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/preferences/{preferenceCode}`.replace(`{${"preferenceCode"}}`, encodeURIComponent(String(requestParameters.preferenceCode))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationPreferenceInfoToJSON)(requestParameters.reservationPreferenceInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationPreferenceDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to update the preferences that exist on a reservation. <p><strong>OperationId:</strong>putReservationPreference</p>
     * Change a Reservation Preference
     */
    putReservationPreference(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putReservationPreferenceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to set Upgrade Eligibility for Reservations. <p><strong>OperationId:</strong>putReservationsUpgradeEligibility</p>
     * Set Upgrade Eligibility for Reservations
     */
    putReservationsUpgradeEligibilityRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putReservationsUpgradeEligibility.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putReservationsUpgradeEligibility.');
            }
            if (requestParameters.reservationsUpgradeEligibility === null || requestParameters.reservationsUpgradeEligibility === undefined) {
                throw new runtime.RequiredError('reservationsUpgradeEligibility', 'Required parameter requestParameters.reservationsUpgradeEligibility was null or undefined when calling putReservationsUpgradeEligibility.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/upgradeEligibleReservations`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservationsUpgradeEligibilityToJSON)(requestParameters.reservationsUpgradeEligibility),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservationsUpgradeEligibilityDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to set Upgrade Eligibility for Reservations. <p><strong>OperationId:</strong>putReservationsUpgradeEligibility</p>
     * Set Upgrade Eligibility for Reservations
     */
    putReservationsUpgradeEligibility(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putReservationsUpgradeEligibilityRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Change the Inventory Items reserved for the Reservation. <p><strong>OperationId:</strong>putReservedInventoryItems</p>
     * Change reserved Inventory Items
     */
    putReservedInventoryItemsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putReservedInventoryItems.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putReservedInventoryItems.');
            }
            if (requestParameters.reservedInventoryItemsInfo === null || requestParameters.reservedInventoryItemsInfo === undefined) {
                throw new runtime.RequiredError('reservedInventoryItemsInfo', 'Required parameter requestParameters.reservedInventoryItemsInfo was null or undefined when calling putReservedInventoryItems.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/inventoryItems`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ReservedInventoryItemsInfoToJSON)(requestParameters.reservedInventoryItemsInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ReservedInventoryItemsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Change the Inventory Items reserved for the Reservation. <p><strong>OperationId:</strong>putReservedInventoryItems</p>
     * Change reserved Inventory Items
     */
    putReservedInventoryItems(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putReservedInventoryItemsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Change guest messages for Reservation. <p><strong>OperationId:</strong>putResvGuestMessages</p>
     * Change Reservation Guest Messages
     */
    putResvGuestMessagesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putResvGuestMessages.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putResvGuestMessages.');
            }
            if (requestParameters.changeResvGuestMessages === null || requestParameters.changeResvGuestMessages === undefined) {
                throw new runtime.RequiredError('changeResvGuestMessages', 'Required parameter requestParameters.changeResvGuestMessages was null or undefined when calling putResvGuestMessages.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/guestMessages`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChangeResvGuestMessagesToJSON)(requestParameters.changeResvGuestMessages),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChangeResvGuestMessagesFromJSON)(jsonValue));
        });
    }
    /**
     * Change guest messages for Reservation. <p><strong>OperationId:</strong>putResvGuestMessages</p>
     * Change Reservation Guest Messages
     */
    putResvGuestMessages(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putResvGuestMessagesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Change routing instructions on an existing reservation. <p><strong>OperationId:</strong>putRoutingInstructions</p>
     * Change routing instructions
     */
    putRoutingInstructionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putRoutingInstructions.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putRoutingInstructions.');
            }
            if (requestParameters.routingInstructionsInfo === null || requestParameters.routingInstructionsInfo === undefined) {
                throw new runtime.RequiredError('routingInstructionsInfo', 'Required parameter requestParameters.routingInstructionsInfo was null or undefined when calling putRoutingInstructions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RoutingInstructionsInfoToJSON)(requestParameters.routingInstructionsInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Change routing instructions on an existing reservation. <p><strong>OperationId:</strong>putRoutingInstructions</p>
     * Change routing instructions
     */
    putRoutingInstructions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putRoutingInstructionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Change routing instructions on an existing reservation. <p><strong>OperationId:</strong>putRoutingInstructionsByExtId</p>
     * Change routing instructions
     */
    putRoutingInstructionsByExtIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationExternalId === null || requestParameters.reservationExternalId === undefined) {
                throw new runtime.RequiredError('reservationExternalId', 'Required parameter requestParameters.reservationExternalId was null or undefined when calling putRoutingInstructionsByExtId.');
            }
            if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
                throw new runtime.RequiredError('externalSystemCode', 'Required parameter requestParameters.externalSystemCode was null or undefined when calling putRoutingInstructionsByExtId.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putRoutingInstructionsByExtId.');
            }
            if (requestParameters.routingInstructionsInfo === null || requestParameters.routingInstructionsInfo === undefined) {
                throw new runtime.RequiredError('routingInstructionsInfo', 'Required parameter requestParameters.routingInstructionsInfo was null or undefined when calling putRoutingInstructionsByExtId.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/routingInstructions`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RoutingInstructionsInfoToJSON)(requestParameters.routingInstructionsInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Change routing instructions on an existing reservation. <p><strong>OperationId:</strong>putRoutingInstructionsByExtId</p>
     * Change routing instructions
     */
    putRoutingInstructionsByExtId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putRoutingInstructionsByExtIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update the existing sell message configuration for a property. <p><strong>OperationId:</strong>putSellMessageConfig</p>
     * Change sell message
     */
    putSellMessageConfigRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putSellMessageConfig.');
            }
            if (requestParameters.sellMessageConfig === null || requestParameters.sellMessageConfig === undefined) {
                throw new runtime.RequiredError('sellMessageConfig', 'Required parameter requestParameters.sellMessageConfig was null or undefined when calling putSellMessageConfig.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/sellMessages/config`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SellMessageConfigToJSON)(requestParameters.sellMessageConfig),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SellMessageConfigFromJSON)(jsonValue));
        });
    }
    /**
     * Update the existing sell message configuration for a property. <p><strong>OperationId:</strong>putSellMessageConfig</p>
     * Change sell message
     */
    putSellMessageConfig(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putSellMessageConfigRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update the existing sell message configuration. <p><strong>OperationId:</strong>putSellMessageConfigByChain</p>
     * Change sell message by chain
     */
    putSellMessageConfigByChainRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sellMessageConfig === null || requestParameters.sellMessageConfig === undefined) {
                throw new runtime.RequiredError('sellMessageConfig', 'Required parameter requestParameters.sellMessageConfig was null or undefined when calling putSellMessageConfigByChain.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/sellMessages/config`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SellMessageConfigToJSON)(requestParameters.sellMessageConfig),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SellMessageConfigFromJSON)(jsonValue));
        });
    }
    /**
     * Update the existing sell message configuration. <p><strong>OperationId:</strong>putSellMessageConfigByChain</p>
     * Change sell message by chain
     */
    putSellMessageConfigByChain(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putSellMessageConfigByChainRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Change the share amounts of a reservation <p><strong>OperationId:</strong>putShareRateAmount</p>
     * Change Share Rate Amount
     */
    putShareRateAmountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putShareRateAmount.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putShareRateAmount.');
            }
            if (requestParameters.changeShareRateAmount === null || requestParameters.changeShareRateAmount === undefined) {
                throw new runtime.RequiredError('changeShareRateAmount', 'Required parameter requestParameters.changeShareRateAmount was null or undefined when calling putShareRateAmount.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/shareRateAmount`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChangeShareRateAmountToJSON)(requestParameters.changeShareRateAmount),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ShareReservationsFromJSON)(jsonValue));
        });
    }
    /**
     * Change the share amounts of a reservation <p><strong>OperationId:</strong>putShareRateAmount</p>
     * Change Share Rate Amount
     */
    putShareRateAmount(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putShareRateAmountRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Change the guest counts(adults or children) for a Sharing Reservation <p><strong>OperationId:</strong>putSharingGuests</p>
     * Change Sharing Guests
     */
    putSharingGuestsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putSharingGuests.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putSharingGuests.');
            }
            if (requestParameters.changeSharingGuests === null || requestParameters.changeSharingGuests === undefined) {
                throw new runtime.RequiredError('changeSharingGuests', 'Required parameter requestParameters.changeSharingGuests was null or undefined when calling putSharingGuests.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/sharedGuestCount`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChangeSharingGuestsToJSON)(requestParameters.changeSharingGuests),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChangeSharingGuestsFromJSON)(jsonValue));
        });
    }
    /**
     * Change the guest counts(adults or children) for a Sharing Reservation <p><strong>OperationId:</strong>putSharingGuests</p>
     * Change Sharing Guests
     */
    putSharingGuests(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putSharingGuestsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to split a multi room reservation.  This will create a new confirmation number for the split reservation. <p><strong>OperationId:</strong>putSplitMultiRoomReservation</p>
     * Split multi room Reservation
     */
    putSplitMultiRoomReservationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putSplitMultiRoomReservation.');
            }
            if (requestParameters.splitMultiRoomReservation === null || requestParameters.splitMultiRoomReservation === undefined) {
                throw new runtime.RequiredError('splitMultiRoomReservation', 'Required parameter requestParameters.splitMultiRoomReservation was null or undefined when calling putSplitMultiRoomReservation.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/reservations/{reservationId}/split`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SplitMultiRoomReservationToJSON)(requestParameters.splitMultiRoomReservation),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SplitMultiRoomReservationDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to split a multi room reservation.  This will create a new confirmation number for the split reservation. <p><strong>OperationId:</strong>putSplitMultiRoomReservation</p>
     * Split multi room Reservation
     */
    putSplitMultiRoomReservation(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putSplitMultiRoomReservationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to change tickets on a reservation. <p><strong>OperationId:</strong>putTickets</p>
     * Change tickets
     */
    putTicketsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putTickets.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putTickets.');
            }
            if (requestParameters.ticketsInfo === null || requestParameters.ticketsInfo === undefined) {
                throw new runtime.RequiredError('ticketsInfo', 'Required parameter requestParameters.ticketsInfo was null or undefined when calling putTickets.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/tickets`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TicketsInfoToJSON)(requestParameters.ticketsInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TicketsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to change tickets on a reservation. <p><strong>OperationId:</strong>putTickets</p>
     * Change tickets
     */
    putTickets(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putTicketsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to change Transaction Diversions. <p><strong>OperationId:</strong>putTransactionDiversions</p>
     * Change Transaction Diversions
     */
    putTransactionDiversionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putTransactionDiversions.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putTransactionDiversions.');
            }
            if (requestParameters.transactionDiversionsInfo === null || requestParameters.transactionDiversionsInfo === undefined) {
                throw new runtime.RequiredError('transactionDiversionsInfo', 'Required parameter requestParameters.transactionDiversionsInfo was null or undefined when calling putTransactionDiversions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/transactionDiversions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TransactionDiversionsInfoToJSON)(requestParameters.transactionDiversionsInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TransactionDiversionsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to change Transaction Diversions. <p><strong>OperationId:</strong>putTransactionDiversions</p>
     * Change Transaction Diversions
     */
    putTransactionDiversions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putTransactionDiversionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Validate overlapping stay for a reservation <p><strong>OperationId:</strong>putValidateOverlappingStay</p>
     * Check overlapping stay
     */
    putValidateOverlappingStayRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling putValidateOverlappingStay.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putValidateOverlappingStay.');
            }
            if (requestParameters.overlappingStay === null || requestParameters.overlappingStay === undefined) {
                throw new runtime.RequiredError('overlappingStay', 'Required parameter requestParameters.overlappingStay was null or undefined when calling putValidateOverlappingStay.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/stay/action/validate`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.OverlappingStayToJSON)(requestParameters.overlappingStay),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.OverlappingStayDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Validate overlapping stay for a reservation <p><strong>OperationId:</strong>putValidateOverlappingStay</p>
     * Check overlapping stay
     */
    putValidateOverlappingStay(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putValidateOverlappingStayRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Validate overlapping stays <p><strong>OperationId:</strong>putValidateOverlappingStays</p>
     * Check overlapping stay
     */
    putValidateOverlappingStaysRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putValidateOverlappingStays.');
            }
            if (requestParameters.overlappingStay === null || requestParameters.overlappingStay === undefined) {
                throw new runtime.RequiredError('overlappingStay', 'Required parameter requestParameters.overlappingStay was null or undefined when calling putValidateOverlappingStays.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/stay/action/validate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.OverlappingStayToJSON)(requestParameters.overlappingStay),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.OverlappingStayDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Validate overlapping stays <p><strong>OperationId:</strong>putValidateOverlappingStays</p>
     * Check overlapping stay
     */
    putValidateOverlappingStays(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putValidateOverlappingStaysRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to validate either the guarantee type or stay details of a reservation you are about to create. <p><strong>OperationId:</strong>putValidateReservationChanges</p>
     * Validate Reservation Change
     */
    putValidateReservationChangesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putValidateReservationChanges.');
            }
            if (requestParameters.validateReservationChanges === null || requestParameters.validateReservationChanges === undefined) {
                throw new runtime.RequiredError('validateReservationChanges', 'Required parameter requestParameters.validateReservationChanges was null or undefined when calling putValidateReservationChanges.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/validations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PutValidateReservationChangesRequestToJSON)(requestParameters.validateReservationChanges),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ValidateReservationChangesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to validate either the guarantee type or stay details of a reservation you are about to create. <p><strong>OperationId:</strong>putValidateReservationChanges</p>
     * Validate Reservation Change
     */
    putValidateReservationChanges(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putValidateReservationChangesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Validate the rate plan information for a reservation. <p><strong>OperationId:</strong>validateRateInfo</p>
     * Validate rate information
     */
    validateRateInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling validateRateInfo.');
            }
            if (requestParameters.validateRateInfo === null || requestParameters.validateRateInfo === undefined) {
                throw new runtime.RequiredError('validateRateInfo', 'Required parameter requestParameters.validateRateInfo was null or undefined when calling validateRateInfo.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rateInfoValidation`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ValidateRateInfoToJSON)(requestParameters.validateRateInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RateInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Validate the rate plan information for a reservation. <p><strong>OperationId:</strong>validateRateInfo</p>
     * Validate rate information
     */
    validateRateInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.validateRateInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.ReservationApi = ReservationApi;
/**
 * @export
 */
exports.DeletePreCheckInReservationCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
};
/**
 * @export
 */
exports.DeletePreCheckInReservationCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
};
/**
 * @export
 */
exports.DeletePreCheckInReservationProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
};
/**
 * @export
 */
exports.DeletePreCheckInReservationEmailFolioEmailFormatEnum = {
    Html: 'Html',
    Text: 'Text'
};
/**
 * @export
 */
exports.GetAlertNoticesAlertAreaEnum = {
    CheckIn: 'CheckIn',
    CheckOut: 'CheckOut',
    Reservation: 'Reservation',
    Billing: 'Billing',
    InHouse: 'InHouse'
};
/**
 * @export
 */
exports.GetExternalSystemReservationsSearchTypeEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
};
/**
 * @export
 */
exports.GetExternalSystemReservationsOrderByEnum = {
    Nights: 'Nights',
    ArrivalDate: 'ArrivalDate',
    ArrivalDateEtr: 'ArrivalDateETR',
    DepartureDate: 'DepartureDate',
    GuestSurname: 'GuestSurname',
    RateAmount: 'RateAmount',
    RateCode: 'RateCode',
    Room: 'Room',
    RoomType: 'RoomType'
};
/**
 * @export
 */
exports.GetExternalSystemReservationsSortOrderEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
};
/**
 * @export
 */
exports.GetExternalSystemReservationsHousekeepingRoomStatusesEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
};
/**
 * @export
 */
exports.GetExternalSystemReservationsFetchInstructionsEnum = {
    Reservation: 'Reservation',
    ReservationId: 'ReservationID',
    Indicators: 'Indicators',
    Deposits: 'Deposits',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestServiceStatus: 'GuestServiceStatus',
    MasterInfo: 'MasterInfo',
    CancellationInfo: 'CancellationInfo',
    BlockReservations: 'BlockReservations',
    TaxType: 'TaxType',
    GuestDeviceNotification: 'GuestDeviceNotification',
    RoomAssignedByAi: 'RoomAssignedByAI'
};
/**
 * @export
 */
exports.GetExternalSystemReservationsSearchTypesEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
};
/**
 * @export
 */
exports.GetExternalSystemReservationsReservationStatusesEnum = {
    Cancelled: 'Cancelled',
    CheckedOut: 'CheckedOut',
    CheckedIn: 'CheckedIn',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    InHouse: 'InHouse',
    NoShow: 'NoShow',
    WaitList: 'WaitList'
};
/**
 * @export
 */
exports.GetExternalSystemReservationsRoomReadyStatusesEnum = {
    Pending: 'Pending',
    Completed: 'Completed',
    Failed: 'Failed',
    Sent: 'Sent',
    Received: 'Received',
    Cancelled: 'Cancelled',
    PendingAvailability: 'PendingAvailability'
};
/**
 * @export
 */
exports.GetGuestMessagesReservationStatusEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
};
/**
 * @export
 */
exports.GetHotelReservationsDiscrepancyEnum = {
    Skip: 'Skip',
    Sleep: 'Sleep'
};
/**
 * @export
 */
exports.GetHotelReservationsSearchTypeEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot',
    FiscalInfo: 'FiscalInfo'
};
/**
 * @export
 */
exports.GetHotelReservationsOrderByEnum = {
    Nights: 'Nights',
    ArrivalDate: 'ArrivalDate',
    ArrivalDateEtr: 'ArrivalDateETR',
    DepartureDate: 'DepartureDate',
    GuestSurname: 'GuestSurname',
    RateAmount: 'RateAmount',
    RateCode: 'RateCode',
    Room: 'Room',
    RoomType: 'RoomType',
    QueuePriority: 'QueuePriority',
    QueueDurationTime: 'QueueDurationTime'
};
/**
 * @export
 */
exports.GetHotelReservationsSortOrderEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
};
/**
 * @export
 */
exports.GetHotelReservationsHousekeepingRoomStatusesEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
};
/**
 * @export
 */
exports.GetHotelReservationsFetchInstructionsEnum = {
    Reservation: 'Reservation',
    ReservationId: 'ReservationID',
    Indicators: 'Indicators',
    Deposits: 'Deposits',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestServiceStatus: 'GuestServiceStatus',
    MasterInfo: 'MasterInfo',
    CancellationInfo: 'CancellationInfo',
    BlockReservations: 'BlockReservations',
    TaxType: 'TaxType',
    GuestDeviceNotification: 'GuestDeviceNotification',
    RoomAssignedByAi: 'RoomAssignedByAI',
    SwapShiftRooms: 'SwapShiftRooms',
    ReservationPreferences: 'ReservationPreferences',
    FiscalInfo: 'FiscalInfo',
    CommissionsInfo: 'CommissionsInfo'
};
/**
 * @export
 */
exports.GetHotelReservationsAllowedReservationActionsEnum = {
    Cancel: 'Cancel',
    Move: 'Move',
    PreCharge: 'PreCharge',
    PostCharge: 'PostCharge',
    FacilitySchedule: 'FacilitySchedule',
    Upsell: 'Upsell',
    PreCheckIn: 'PreCheckIn',
    PostToNoShowCancel: 'PostToNoShowCancel',
    NoShow: 'NoShow',
    NameChange: 'NameChange',
    Discount: 'Discount',
    HouseKeeping: 'HouseKeeping',
    EnrollToPrimaryMembership: 'EnrollToPrimaryMembership',
    EnrollInProgress: 'EnrollInProgress',
    MemberAwardAttached: 'MemberAwardAttached'
};
/**
 * @export
 */
exports.GetHotelReservationsPeriodicFolioEnum = {
    Weekly: 'Weekly',
    Monthly: 'Monthly',
    Days: 'Days'
};
/**
 * @export
 */
exports.GetHotelReservationsSearchTypesEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
};
/**
 * @export
 */
exports.GetHotelReservationsReservationStatusesEnum = {
    Cancelled: 'Cancelled',
    CheckedOut: 'CheckedOut',
    CheckedIn: 'CheckedIn',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    InHouse: 'InHouse',
    NoShow: 'NoShow',
    WaitList: 'WaitList'
};
/**
 * @export
 */
exports.GetHotelReservationsRoomReadyStatusesEnum = {
    Pending: 'Pending',
    Completed: 'Completed',
    Failed: 'Failed',
    Sent: 'Sent',
    Received: 'Received',
    Cancelled: 'Cancelled',
    PendingAvailability: 'PendingAvailability'
};
/**
 * @export
 */
exports.GetLinkedReservationsFetchInstructionsEnum = {
    Reservation: 'Reservation',
    Comments: 'Comments',
    GuestComments: 'GuestComments',
    Packages: 'Packages',
    InventoryItems: 'InventoryItems',
    ReservationPaymentMethods: 'ReservationPaymentMethods',
    RoutingInstructions: 'RoutingInstructions',
    Preferences: 'Preferences',
    Memberships: 'Memberships',
    Alerts: 'Alerts',
    Traces: 'Traces',
    ConfirmationLetters: 'ConfirmationLetters',
    CallHistory: 'CallHistory',
    FixedCharges: 'FixedCharges',
    GuestMessages: 'GuestMessages',
    ReservationPolicies: 'ReservationPolicies',
    Indicators: 'Indicators',
    LinkedReservations: 'LinkedReservations',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestLastStay: 'GuestLastStay',
    ECoupons: 'ECoupons',
    TrackItItems: 'TrackItItems',
    TotalCostOfStay: 'TotalCostOfStay',
    ReservationAwards: 'ReservationAwards',
    WebRegistrationCards: 'WebRegistrationCards',
    ServiceRequests: 'ServiceRequests',
    ReservationActivities: 'ReservationActivities',
    ScheduledActivities: 'ScheduledActivities',
    PrepaidCards: 'PrepaidCards',
    Shares: 'Shares',
    Attachments: 'Attachments',
    Locators: 'Locators',
    ProfileAwards: 'ProfileAwards',
    TransactionDiversions: 'TransactionDiversions',
    Tickets: 'Tickets',
    GuestMemberships: 'GuestMemberships',
    ECertificates: 'ECertificates',
    UpsellInfo: 'UpsellInfo',
    RoomAssignedByAi: 'RoomAssignedByAI',
    CustomNameValue: 'CustomNameValue',
    CustomChargeExemptions: 'CustomChargeExemptions'
};
/**
 * @export
 */
exports.GetPackageFetchInstructionsEnum = {
    Primary: 'Primary',
    Transaction: 'Transaction',
    Classification: 'Classification',
    Schedule: 'Schedule',
    InventoryItems: 'InventoryItems'
};
/**
 * @export
 */
exports.GetReservationFetchInstructionsEnum = {
    Reservation: 'Reservation',
    Comments: 'Comments',
    ReservationMembershipAwards: 'ReservationMembershipAwards',
    GuestComments: 'GuestComments',
    Packages: 'Packages',
    TotalCostOfStay: 'TotalCostOfStay',
    InventoryItems: 'InventoryItems',
    ReservationPaymentMethods: 'ReservationPaymentMethods',
    RoutingInstructions: 'RoutingInstructions',
    Preferences: 'Preferences',
    Memberships: 'Memberships',
    Alerts: 'Alerts',
    Traces: 'Traces',
    ConfirmationLetters: 'ConfirmationLetters',
    CallHistory: 'CallHistory',
    FixedCharges: 'FixedCharges',
    GuestMessages: 'GuestMessages',
    ReservationPolicies: 'ReservationPolicies',
    Indicators: 'Indicators',
    LinkedReservations: 'LinkedReservations',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestLastStay: 'GuestLastStay',
    ECoupons: 'ECoupons',
    TrackItItems: 'TrackItItems',
    ReservationAwards: 'ReservationAwards',
    WebRegistrationCards: 'WebRegistrationCards',
    ReservationActivities: 'ReservationActivities',
    ScheduledActivities: 'ScheduledActivities',
    PrepaidCards: 'PrepaidCards',
    Attachments: 'Attachments',
    Locators: 'Locators',
    ProfileAwards: 'ProfileAwards',
    TransactionDiversions: 'TransactionDiversions',
    Tickets: 'Tickets',
    GuestMemberships: 'GuestMemberships',
    ECertificates: 'ECertificates',
    UpsellInfo: 'UpsellInfo',
    RoomAssignedByAi: 'RoomAssignedByAI',
    AutoCheckInRoomType: 'AutoCheckInRoomType'
};
/**
 * @export
 */
exports.GetReservationAllowedActionsEnum = {
    Cancel: 'Cancel',
    Move: 'Move',
    PreCharge: 'PreCharge',
    PostCharge: 'PostCharge',
    FacilitySchedule: 'FacilitySchedule',
    Upsell: 'Upsell',
    PreCheckIn: 'PreCheckIn',
    PostToNoShowCancel: 'PostToNoShowCancel',
    NoShow: 'NoShow',
    NameChange: 'NameChange',
    Discount: 'Discount',
    HouseKeeping: 'HouseKeeping',
    EnrollToPrimaryMembership: 'EnrollToPrimaryMembership',
    EnrollInProgress: 'EnrollInProgress',
    MemberAwardAttached: 'MemberAwardAttached',
    UpgradeAwardAttached: 'UpgradeAwardAttached'
};
/**
 * @export
 */
exports.GetReservationByExtIdFetchInstructionsEnum = {
    Reservation: 'Reservation',
    Comments: 'Comments',
    GuestComments: 'GuestComments',
    Packages: 'Packages',
    TotalCostOfStay: 'TotalCostOfStay',
    InventoryItems: 'InventoryItems',
    ReservationPaymentMethods: 'ReservationPaymentMethods',
    RoutingInstructions: 'RoutingInstructions',
    Preferences: 'Preferences',
    Memberships: 'Memberships',
    Alerts: 'Alerts',
    Traces: 'Traces',
    ConfirmationLetters: 'ConfirmationLetters',
    CallHistory: 'CallHistory',
    FixedCharges: 'FixedCharges',
    GuestMessages: 'GuestMessages',
    ReservationPolicies: 'ReservationPolicies',
    Indicators: 'Indicators',
    LinkedReservations: 'LinkedReservations',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestLastStay: 'GuestLastStay',
    ECoupons: 'ECoupons',
    TrackItItems: 'TrackItItems',
    ReservationAwards: 'ReservationAwards',
    WebRegistrationCards: 'WebRegistrationCards',
    ReservationActivities: 'ReservationActivities',
    ScheduledActivities: 'ScheduledActivities',
    PrepaidCards: 'PrepaidCards',
    Shares: 'Shares',
    Attachments: 'Attachments',
    Locators: 'Locators',
    ProfileAwards: 'ProfileAwards',
    TransactionDiversions: 'TransactionDiversions',
    Tickets: 'Tickets',
    GuestMemberships: 'GuestMemberships',
    ECertificates: 'ECertificates',
    UpsellInfo: 'UpsellInfo',
    RoomAssignedByAi: 'RoomAssignedByAI'
};
/**
 * @export
 */
exports.GetReservationByExtIdAllowedActionsEnum = {
    Cancel: 'Cancel',
    Move: 'Move',
    PreCharge: 'PreCharge',
    PostCharge: 'PostCharge',
    FacilitySchedule: 'FacilitySchedule',
    Upsell: 'Upsell',
    PreCheckIn: 'PreCheckIn',
    PostToNoShowCancel: 'PostToNoShowCancel',
    NoShow: 'NoShow',
    NameChange: 'NameChange',
    Discount: 'Discount',
    HouseKeeping: 'HouseKeeping',
    EnrollToPrimaryMembership: 'EnrollToPrimaryMembership',
    EnrollInProgress: 'EnrollInProgress'
};
/**
 * @export
 */
exports.GetReservationIndicatorsCheckInstructionsEnum = {
    HasDepositPolicies: 'HasDepositPolicies',
    HasCancellationPolicies: 'HasCancellationPolicies'
};
/**
 * @export
 */
exports.GetReservationsSearchTypeEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
};
/**
 * @export
 */
exports.GetReservationsOrderByEnum = {
    Nights: 'Nights',
    ArrivalDate: 'ArrivalDate',
    ArrivalDateEtr: 'ArrivalDateETR',
    DepartureDate: 'DepartureDate',
    GuestSurname: 'GuestSurname',
    RateAmount: 'RateAmount',
    RateCode: 'RateCode',
    Room: 'Room',
    RoomType: 'RoomType'
};
/**
 * @export
 */
exports.GetReservationsSortOrderEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
};
/**
 * @export
 */
exports.GetReservationsHousekeepingRoomStatusesEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
};
/**
 * @export
 */
exports.GetReservationsFetchInstructionsEnum = {
    Reservation: 'Reservation',
    ReservationId: 'ReservationID',
    Indicators: 'Indicators',
    Deposits: 'Deposits',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestServiceStatus: 'GuestServiceStatus',
    MasterInfo: 'MasterInfo',
    CancellationInfo: 'CancellationInfo',
    BlockReservations: 'BlockReservations',
    TaxType: 'TaxType',
    GuestDeviceNotification: 'GuestDeviceNotification',
    RoomAssignedByAi: 'RoomAssignedByAI'
};
/**
 * @export
 */
exports.GetReservationsAllowedReservationActionsEnum = {
    Cancel: 'Cancel',
    Move: 'Move',
    PreCharge: 'PreCharge',
    PostCharge: 'PostCharge',
    FacilitySchedule: 'FacilitySchedule',
    Upsell: 'Upsell',
    PreCheckIn: 'PreCheckIn',
    PostToNoShowCancel: 'PostToNoShowCancel',
    NoShow: 'NoShow',
    NameChange: 'NameChange',
    Discount: 'Discount',
    HouseKeeping: 'HouseKeeping',
    EnrollToPrimaryMembership: 'EnrollToPrimaryMembership',
    EnrollInProgress: 'EnrollInProgress',
    MemberAwardAttached: 'MemberAwardAttached'
};
/**
 * @export
 */
exports.GetReservationsSearchTypesEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
};
/**
 * @export
 */
exports.GetReservationsReservationStatusesEnum = {
    Cancelled: 'Cancelled',
    CheckedOut: 'CheckedOut',
    CheckedIn: 'CheckedIn',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    InHouse: 'InHouse',
    NoShow: 'NoShow',
    WaitList: 'WaitList'
};
/**
 * @export
 */
exports.GetReservationsRoomReadyStatusesEnum = {
    Pending: 'Pending',
    Completed: 'Completed',
    Failed: 'Failed',
    Sent: 'Sent',
    Received: 'Received',
    Cancelled: 'Cancelled',
    PendingAvailability: 'PendingAvailability'
};
/**
 * @export
 */
exports.GetReservationsSummaryReservationStatusEnum = {
    Cancelled: 'Cancelled',
    CheckedOut: 'CheckedOut',
    CheckedIn: 'CheckedIn',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    InHouse: 'InHouse',
    NoShow: 'NoShow',
    WaitList: 'WaitList'
};
/**
 * @export
 */
exports.GetReservationsToShareByProfileIdFetchInstructionsEnum = {
    Reservation: 'Reservation',
    Comments: 'Comments',
    GuestComments: 'GuestComments',
    Packages: 'Packages',
    InventoryItems: 'InventoryItems',
    ReservationPaymentMethods: 'ReservationPaymentMethods',
    RoutingInstructions: 'RoutingInstructions',
    Preferences: 'Preferences',
    Memberships: 'Memberships',
    Alerts: 'Alerts',
    Traces: 'Traces',
    ConfirmationLetters: 'ConfirmationLetters',
    CallHistory: 'CallHistory',
    FixedCharges: 'FixedCharges',
    GuestMessages: 'GuestMessages',
    ReservationPolicies: 'ReservationPolicies',
    Indicators: 'Indicators',
    LinkedReservations: 'LinkedReservations',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestLastStay: 'GuestLastStay',
    ECoupons: 'ECoupons',
    TrackItItems: 'TrackItItems',
    TotalCostOfStay: 'TotalCostOfStay',
    ReservationAwards: 'ReservationAwards',
    WebRegistrationCards: 'WebRegistrationCards',
    ServiceRequests: 'ServiceRequests',
    ReservationActivities: 'ReservationActivities',
    ScheduledActivities: 'ScheduledActivities',
    PrepaidCards: 'PrepaidCards',
    Shares: 'Shares',
    Attachments: 'Attachments',
    Locators: 'Locators',
    ProfileAwards: 'ProfileAwards',
    TransactionDiversions: 'TransactionDiversions',
    Tickets: 'Tickets',
    GuestMemberships: 'GuestMemberships',
    ECertificates: 'ECertificates',
    UpsellInfo: 'UpsellInfo',
    RoomAssignedByAi: 'RoomAssignedByAI',
    CustomNameValue: 'CustomNameValue',
    CustomChargeExemptions: 'CustomChargeExemptions'
};
/**
 * @export
 */
exports.GetReservationsToShareByReservationIdFetchInstructionsEnum = {
    Reservation: 'Reservation',
    Comments: 'Comments',
    GuestComments: 'GuestComments',
    Packages: 'Packages',
    InventoryItems: 'InventoryItems',
    ReservationPaymentMethods: 'ReservationPaymentMethods',
    RoutingInstructions: 'RoutingInstructions',
    Preferences: 'Preferences',
    Memberships: 'Memberships',
    Alerts: 'Alerts',
    Traces: 'Traces',
    ConfirmationLetters: 'ConfirmationLetters',
    CallHistory: 'CallHistory',
    FixedCharges: 'FixedCharges',
    GuestMessages: 'GuestMessages',
    ReservationPolicies: 'ReservationPolicies',
    Indicators: 'Indicators',
    LinkedReservations: 'LinkedReservations',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestLastStay: 'GuestLastStay',
    ECoupons: 'ECoupons',
    TrackItItems: 'TrackItItems',
    TotalCostOfStay: 'TotalCostOfStay',
    ReservationAwards: 'ReservationAwards',
    WebRegistrationCards: 'WebRegistrationCards',
    ServiceRequests: 'ServiceRequests',
    ReservationActivities: 'ReservationActivities',
    ScheduledActivities: 'ScheduledActivities',
    PrepaidCards: 'PrepaidCards',
    Shares: 'Shares',
    Attachments: 'Attachments',
    Locators: 'Locators',
    ProfileAwards: 'ProfileAwards',
    TransactionDiversions: 'TransactionDiversions',
    Tickets: 'Tickets',
    GuestMemberships: 'GuestMemberships',
    ECertificates: 'ECertificates',
    UpsellInfo: 'UpsellInfo',
    RoomAssignedByAi: 'RoomAssignedByAI',
    CustomNameValue: 'CustomNameValue',
    CustomChargeExemptions: 'CustomChargeExemptions'
};
/**
 * @export
 */
exports.GetRoomCalendarSortingByEnum = {
    Default: 'Default',
    Room: 'Room',
    RoomType: 'RoomType',
    RoomStatus: 'RoomStatus'
};
/**
 * @export
 */
exports.GetRoomCalendarRoomStatusEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
};
/**
 * @export
 */
exports.GetSellMessagesFetchInstructionsEnum = {
    RateCodes: 'RateCodes',
    RoomTypes: 'RoomTypes'
};
/**
 * @export
 */
exports.GetSellMessagesUsedInModuleEnum = {
    Blocks: 'Blocks',
    Reservations: 'Reservations',
    FunctionDiary: 'FunctionDiary',
    LookToBookSales: 'LookToBookSales',
    GroupRoomsControl: 'GroupRoomsControl'
};
