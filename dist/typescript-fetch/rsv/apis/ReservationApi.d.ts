/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { ActivityLog, Alerts, AttachCertificate, AwardUpgrades, BreakShareValidations, BreakShareValidationsDetails, CallHistory, CallStatistics, CancelReservation, CancelReservationDetails, CancelReservations, CancellationHistory, ChangeDepositPolicyDetails, ChangeGuestMessages, ChangeReservation, ChangeReservationDetails, ChangeResvGuestMessages, ChangeShareRateAmount, ChangeSharingGuests, CheckReservationsDetails, CombineShareReservations, CombineShareReservationsDetails, CombineShareValidations, CombineShareValidationsDetails, ComputeCancellationPolicies, ComputeCancellationPoliciesDetails, ComputeDepositPolicies, ComputeDepositPoliciesDetails, ConfirmationLetters, ConfirmationLettersDetails, CopyReservation, CreateGuestMessages, CreateReservationType, DeliveryHistoryLog, ECoupons, ECouponsInfo, ExtendReservationLock, ExtendReservationLockDetails, FetchReservations, FetchSellMessageConfig, FutureReservationsOrBlocksDetails, GuestMessages, GuestMessagesDetails, InventoryItems, LinkReservationsCriteria, LinkedHotelReservations, LinkedReservationsInfo, MasterAccount, MasterAccountSummary, MergeReservationsStatus, MoveReservationHotel, MoveReservationHotelDetails, OverlappingStay, OverlappingStayDetails, Packages, PostCancelReservationRequest, PostPreCheckInReservationRequest, PostReservationByBlockRequest, PostReservationLinksRequest, PostReservationRequest, PostUpsellReservationRequest, PreArrivalMemberReservationsDetails, PreConfiguredRoutingInstructions, PutReservationRequest, PutValidateReservationChangesRequest, RateInfo, RecentlyAccessedReservations, RegisterCall, RegisterTurnaway, ReinstateReservation, ReinstateReservationDetails, Reservation, ReservationAlerts, ReservationAttachments, ReservationAwards, ReservationCancellationPolicyCriteria, ReservationConfirmationLetters, ReservationDailyRateDetail, ReservationDailyRateDetailDetails, ReservationDepositPolicyCriteria, ReservationExcludedPreferences, ReservationLocators, ReservationLocatorsDetails, ReservationLocatorsDetailsInfo, ReservationLocatorsInfo, ReservationLocatorsStatus, ReservationLock, ReservationLockDetails, ReservationMembership, ReservationPackagesInfo, ReservationPaymentMethods, ReservationPolicies, ReservationPreference, ReservationPreferenceDetails, ReservationPreferenceInfo, ReservationRoutingCriteria, ReservationUpsellInfo, ReservationsDetails, ReservationsSummary, ReservationsToMerge, ReservationsUpgradeEligibility, ReservationsUpgradeEligibilityDetails, ReserveInventoryItems, ReservedInventoryItemsInfo, ReverseDepositPolicy, RoomCalendar, RoutingInstructions, RoutingInstructionsInfo, Script, SellMessageConfig, SellMessages, ShareReservations, SplitMultiRoomReservation, SplitMultiRoomReservationDetails, Status, Tickets, TicketsInfo, Traces, TransactionDiversions, TransactionDiversionsDetails, TransactionDiversionsInfo, UpgradeEligibilityReservations, ValidateRateInfo, ValidateReservationChangesDetails } from '../models/index';
export interface ChangeReservationLocatorsRequest {
    locatorId: string;
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationLocatorsInfo: ReservationLocatorsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteCancellationPolicyRequest {
    reservationId: string;
    hotelId: string;
    policyId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteDepositPolicyRequest {
    reservationId: string;
    hotelId: string;
    policyId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteECouponsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eCouponId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteGuestMessagesRequest {
    guestMessageId: string;
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteMasterAccountRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeletePaymentMethodsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeletePreCheckInReservationRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    resvIDExtension?: number;
    arrivalTime?: string;
    roomNumber?: string;
    guestPreferredCurrency?: string;
    allowMobileViewFolio?: boolean;
    paymentMethodDescription?: Array<string>;
    paymentMethodFolioView?: Array<number>;
    paymentMethod?: Array<string>;
    attachCreditCardToProfile?: boolean;
    cardHolderName?: string;
    cardNumber?: string;
    cardNumberLast4Digits?: string;
    cardNumberMasked?: string;
    cardOrToken?: DeletePreCheckInReservationCardOrTokenEnum;
    cardType?: DeletePreCheckInReservationCardTypeEnum;
    expirationDate?: string;
    expirationDateExpired?: boolean;
    expirationDateMasked?: string;
    processing?: DeletePreCheckInReservationProcessingEnum;
    swiped?: boolean;
    userDefinedCardType?: string;
    cardId?: string;
    cardIdIDExtension?: number;
    cardIdIDContext?: string;
    cardIdType?: string;
    currentAuthorizedAmount?: number;
    authorizedAmountCurrencyCode?: string;
    approvalAmountNeeded?: number;
    approvalAmountCurrencyCode?: string;
    balanceAmount?: number;
    balanceCurrencyCode?: string;
    authorizationRuleCode?: number;
    authorizationRuleAmount?: number;
    authorizationRuleCurrencyCode?: string;
    authorizationRulePercent?: number;
    emailFolio?: boolean;
    emailFolioID?: string;
    emailFolioIDExtension?: number;
    emailFolioIDContext?: string;
    emailFolioIDType?: string;
    emailFolioCreateDateTime?: string;
    emailFolioCreatorID?: string;
    emailFolioEmailAddress?: string;
    emailFolioEmailFormat?: DeletePreCheckInReservationEmailFolioEmailFormatEnum;
    emailFolioLastModifierID?: string;
    emailFolioLastModifyDateTime?: string;
    emailFolioOrderSequence?: number;
    emailFolioPrimaryInd?: boolean;
    emailFolioPurgeDate?: string;
    emailFolioType?: string;
    emailFolioTypeDescription?: string;
    arrivalCarrierCode?: string;
    arrivalDateTime?: string;
    arrivalStationCode?: string;
    arrivalTransportCode?: string;
    arrivalTransportationReqd?: boolean;
    arrivalType?: string;
    arrivalComments?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteRefundTicketsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteReservationAttachmentRequest {
    attachmentId: string;
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteReservationCertificateRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteReservationLinksRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteReservationLinksByChainRequest {
    reservationId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteReservationLinksByExtIdRequest {
    reservationExternalId: string;
    externalSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteReservationLocatorsRequest {
    locatorId: string;
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteReservationLockRequest {
    lockHandle: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteReservationMembershipRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteReservationPackageRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteReservationPreferenceRequest {
    preferenceCode: string;
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteReservedInventoryItemsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteRoutingInstructionsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteSellMessageConfigRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteSellMessageConfigByChainRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    sellMessageConfigId?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteShareReservationRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    overrideInventoryCheck?: boolean;
    overrideMaxOccupancyCheck?: boolean;
    overrideRateAvailabilityCheck?: boolean;
    returnShareReservations?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteShareReservationByExtIdRequest {
    reservationExternalId: string;
    externalSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    overrideInventoryCheck?: boolean;
    overrideMaxOccupancyCheck?: boolean;
    overrideRateAvailabilityCheck?: boolean;
    returnShareReservations?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteTicketsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteTransactionDiversionsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteUpsellRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetAlertNoticesRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    alertArea?: GetAlertNoticesAlertAreaEnum;
    welcomeOffer?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetAwardUpgradesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileId?: string;
    idContext?: string;
    profileIdType?: string;
    membershipType?: string;
    membershipCardNo?: string;
    membershipPoints?: number;
    id?: Array<string>;
    reservationTimeSpanStartDate?: string;
    reservationTimeSpanEndDate?: string;
    reservationTimeSpanDuration?: string;
    numberOfRooms?: number;
    roomType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetAwardsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCallHistoryRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCallStatisticsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    end?: string;
    start?: string;
    domain?: string;
    appUserName?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCancellationHistoryRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelName?: string;
    roomStayStartDate?: string;
    roomStayEndDate?: string;
    roomStayDuration?: string;
    roomClass?: string;
    roomType?: string;
    numberOfRooms?: number;
    roomId?: string;
    ratePlanCode?: string;
    reservationBlockHotelId?: string;
    reservationBlockId?: Array<string>;
    reservationBlockIdType?: Array<string>;
    blockName?: string;
    bookingChannelCode?: string;
    linkCode?: string;
    onHold?: boolean;
    membershipAccountId?: string;
    membershipBonusCode?: string;
    membershipLevel?: string;
    membershipId?: number;
    lastStayDate?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetConfirmationLettersRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    notAttached?: boolean;
    pending?: boolean;
    sent?: boolean;
    createdOnEndDate?: string;
    createdOnStartDate?: string;
    arrivalEndDate?: string;
    arrivalStartDate?: string;
    letterStyleId?: Array<string>;
    letterStyle?: Array<string>;
    letterStyleIdType?: Array<string>;
    reservationGuestId?: string;
    reservationGuestIdType?: string;
    membershipId?: string;
    membershipLevelCode?: Array<string>;
    membershipTypeCode?: Array<string>;
    surname?: string;
    givenName?: string;
    blockHotelId?: string;
    blockId?: Array<string>;
    blockIdType?: Array<string>;
    blockName?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetECouponsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetExternalSystemDeliveryHistoryRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationId?: string;
    reservationIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetExternalSystemReservationsRequest {
    extSystemCode: string;
    externalReferenceList: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    recentlyAccessed?: boolean;
    limit?: number;
    offset?: number;
    searchType?: GetExternalSystemReservationsSearchTypeEnum;
    hotelIds?: Array<string>;
    text?: string;
    arrivalEndDate?: string;
    arrivalStartDate?: string;
    departureEndDate?: string;
    departureStartDate?: string;
    expectedArrivalStartTime?: string;
    expectedArrivalEndTime?: string;
    expectedReturnEndTime?: string;
    expectedReturnStartTime?: string;
    companyNames?: Array<string>;
    travelAgentIds?: Array<string>;
    companyIds?: Array<string>;
    sourceIds?: Array<string>;
    contactIds?: Array<string>;
    groupIds?: Array<string>;
    billingContactIds?: Array<string>;
    profileIds?: Array<string>;
    membershipCardNumber?: string;
    membershipLevels?: Array<string>;
    membershipTypes?: Array<string>;
    surname?: string;
    givenName?: string;
    anyVIPStatus?: boolean;
    vipCodes?: Array<string>;
    guaranteeCode?: string;
    paymentMethod?: string;
    discountApplied?: boolean;
    user?: Array<string>;
    createdBy?: string;
    cancelledByList?: Array<string>;
    cancelledOn?: string;
    ratePlanCodes?: Array<string>;
    sourceCodes?: Array<string>;
    marketCodes?: Array<string>;
    excludeBlockReservations?: boolean;
    blockName?: string;
    blockIds?: Array<string>;
    blockCodes?: Array<string>;
    customReference?: string;
    recordLocator?: string;
    orderBy?: Array<GetExternalSystemReservationsOrderByEnum>;
    sortOrder?: Set<GetExternalSystemReservationsSortOrderEnum>;
    roomAssignedOnly?: boolean;
    roomUnassignedOnly?: boolean;
    roomId?: string;
    roomType?: Array<string>;
    roomFeatures?: Array<string>;
    roomSpecials?: Array<string>;
    roomSmokingPreference?: string;
    roomFloorPreferences?: Array<string>;
    housekeepingRoomStatuses?: Set<GetExternalSystemReservationsHousekeepingRoomStatusesEnum>;
    roomClasses?: Array<string>;
    roomRangeFrom?: string;
    roomRangeTo?: string;
    communication?: string;
    fetchInstructions?: Set<GetExternalSystemReservationsFetchInstructionsEnum>;
    allowPreRegistration?: boolean;
    hasDepositBalance?: boolean;
    hasOpenBalance?: boolean;
    hasOpenFolio?: boolean;
    includeScheduledCheckOut?: boolean;
    linkedOnly?: boolean;
    unlinkedOnly?: boolean;
    actualArrivals?: boolean;
    actualDepartures?: boolean;
    complimentaryReservations?: boolean;
    dayOfArrivalCancels?: boolean;
    dayUse?: boolean;
    earlyDepartures?: boolean;
    expectedArrivals?: boolean;
    expectedDepartures?: boolean;
    extendedStays?: boolean;
    houseUseReservations?: boolean;
    stayovers?: boolean;
    stayDate?: string;
    roomRoutingId?: string;
    excludePseudoRoomReservations?: boolean;
    excludeReservationIds?: Array<string>;
    excludeVIPStatusCodes?: Array<string>;
    excludeSpecials?: Array<string>;
    excludeFloorPreferences?: Array<string>;
    excludeAdvanceCheckedIn?: boolean;
    excludeRoomFeatures?: Array<string>;
    playerId?: string;
    gamingBalanceFrom?: number;
    gamingBalanceTo?: number;
    compAccountingBalanceFrom?: number;
    compAccountingBalanceTo?: number;
    searchTypes?: Set<GetExternalSystemReservationsSearchTypesEnum>;
    reservationStatuses?: Set<GetExternalSystemReservationsReservationStatusesEnum>;
    transportationCodes?: Array<string>;
    roomReadyStatuses?: Set<GetExternalSystemReservationsRoomReadyStatusesEnum>;
    checkoutMessageReceived?: boolean;
    optedForCommunication?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetFutureReservationsOrBlocksRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetGuestMessagesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    reservationId?: string;
    retrieveDeliveredMessages?: boolean;
    room?: string;
    travelAgent?: string;
    company?: string;
    group?: string;
    source?: string;
    reservationStatus?: GetGuestMessagesReservationStatusEnum;
    retrieveUndeliveredMessages?: boolean;
    retrievePrintedMessages?: boolean;
    retrieveTextedMessages?: boolean;
    blockName?: string;
    recipientName?: string;
    confirmationNo?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetHotelReservationsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    keyTrack2?: string;
    discrepancy?: GetHotelReservationsDiscrepancyEnum;
    recentlyAccessed?: boolean;
    limit?: number;
    offset?: number;
    searchType?: GetHotelReservationsSearchTypeEnum;
    text?: string;
    reservationIdList?: Array<string>;
    confirmationNumberList?: Array<string>;
    cancellationNumberList?: Array<string>;
    externalReferenceIds?: Array<string>;
    externalSystemCodes?: Array<string>;
    arrivalEndDate?: string;
    arrivalStartDate?: string;
    departureEndDate?: string;
    departureStartDate?: string;
    stayOnStartDate?: string;
    createdOnStartDate?: string;
    expectedArrivalEndTime?: string;
    expectedArrivalStartTime?: string;
    depositDueEndDate?: string;
    depositDueStartDate?: string;
    expectedReturnEndTime?: string;
    expectedReturnStartTime?: string;
    companyNames?: Array<string>;
    sourceNames?: Array<string>;
    travelAgentNames?: Array<string>;
    groupNames?: Array<string>;
    travelAgentIds?: Array<string>;
    companyIds?: Array<string>;
    sourceIds?: Array<string>;
    contactIds?: Array<string>;
    groupIds?: Array<string>;
    billingContactIds?: Array<string>;
    profileId?: string;
    commissionPaid?: boolean;
    membershipCardNumber?: string;
    membershipLevels?: Array<string>;
    membershipTypes?: Array<string>;
    surname?: string;
    givenName?: string;
    fromName?: string;
    toName?: string;
    anyVIPStatus?: boolean;
    vipCodes?: Array<string>;
    guaranteeCode?: string;
    paymentMethod?: string;
    discountApplied?: boolean;
    user?: Array<string>;
    createdBy?: string;
    cancelledByList?: Array<string>;
    cancelledOn?: string;
    ratePlanCodes?: Array<string>;
    sourceCodes?: Array<string>;
    marketCodes?: Array<string>;
    excludeBlockReservations?: boolean;
    blockCriteriaHotelCode?: string;
    blockName?: string;
    blockIds?: Array<string>;
    blockCodes?: Array<string>;
    customReference?: string;
    recordLocator?: string;
    orderBy?: Array<GetHotelReservationsOrderByEnum>;
    sortOrder?: Set<GetHotelReservationsSortOrderEnum>;
    roomAssignedOnly?: boolean;
    roomUnassignedOnly?: boolean;
    roomId?: string;
    roomType?: Array<string>;
    roomFeatures?: Array<string>;
    roomSpecials?: Array<string>;
    roomSmokingPreference?: string;
    roomFloorPreferences?: Array<string>;
    housekeepingRoomStatuses?: Set<GetHotelReservationsHousekeepingRoomStatusesEnum>;
    roomClasses?: Array<string>;
    roomRangeFrom?: string;
    roomRangeTo?: string;
    communication?: string;
    fetchInstructions?: Set<GetHotelReservationsFetchInstructionsEnum>;
    allowedReservationActions?: Set<GetHotelReservationsAllowedReservationActionsEnum>;
    allowPreRegistration?: boolean;
    excludeNoPost?: boolean;
    excludePMRooms?: boolean;
    hasDepositBalance?: boolean;
    hasOpenBalance?: boolean;
    hasOpenFolio?: boolean;
    includeScheduledCheckOut?: boolean;
    linkedOnly?: boolean;
    unlinkedOnly?: boolean;
    actualArrivals?: boolean;
    actualDepartures?: boolean;
    complimentaryReservations?: boolean;
    dayOfArrivalCancels?: boolean;
    dayUse?: boolean;
    earlyDepartures?: boolean;
    expectedArrivals?: boolean;
    expectedDepartures?: boolean;
    extendedStays?: boolean;
    houseUseReservations?: boolean;
    stayovers?: boolean;
    stayDate?: string;
    roomRoutingId?: string;
    periodicFolio?: GetHotelReservationsPeriodicFolioEnum;
    folioSettlementTypes?: string;
    defaultDays?: boolean;
    excludePseudoRoomReservations?: boolean;
    excludeReservationIds?: Array<string>;
    excludeVIPStatusCodes?: Array<string>;
    excludeSpecials?: Array<string>;
    excludeFloorPreferences?: Array<string>;
    excludeAdvanceCheckedIn?: boolean;
    excludeRoomFeatures?: Array<string>;
    playerId?: string;
    gamingBalanceFrom?: number;
    gamingBalanceTo?: number;
    compAccountingBalanceFrom?: number;
    compAccountingBalanceTo?: number;
    searchTypes?: Set<GetHotelReservationsSearchTypesEnum>;
    reservationStatuses?: Set<GetHotelReservationsReservationStatusesEnum>;
    transportationCodes?: Array<string>;
    roomReadyStatuses?: Set<GetHotelReservationsRoomReadyStatusesEnum>;
    checkoutMessageReceived?: boolean;
    optedForCommunication?: boolean;
    swapShiftRoomReservationId?: string;
    roomSmokingPreferences?: Array<string>;
    roomFeaturePreferences?: Array<string>;
    roomsFloorPreferences?: Array<string>;
    contactNames?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetLinkedReservationsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    additionalReservationId?: Array<string>;
    additionalReservationIdType?: Array<string>;
    fetchInstructions?: Set<GetLinkedReservationsFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetLinkedReservationsSummaryRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    additionalReservationId?: Array<string>;
    additionalReservationIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetPackageRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    postingRhythm?: string;
    productCode?: string;
    ratePlanCode?: string;
    reservationTimeSpanStartDate?: string;
    reservationTimeSpanEndDate?: string;
    packageTimeSpanStartDate?: string;
    packageTimeSpanEndDate?: string;
    packageQuantity?: number;
    packageExcludedQuantity?: number;
    reservationAdults?: number;
    reservationChildren?: number;
    fetchInstructions?: Set<GetPackageFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetPaymentMethodsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeAmounts?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetPreArrivalMemberReservationsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    end?: string;
    start?: string;
    membershipType?: string;
    externalReferenceType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetPreConfiguredRoutingInstructionsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rateCode?: string;
    promotionCodes?: Array<string>;
    guestName?: string;
    guestIds?: Array<string>;
    companyName?: string;
    companyIds?: Array<string>;
    groupName?: string;
    groupIds?: Array<string>;
    travelAgentName?: string;
    travelAgentIds?: Array<string>;
    sourceName?: string;
    sourceIds?: Array<string>;
    contactName?: string;
    contactIds?: Array<string>;
    billingContactName?: string;
    billingContactIds?: Array<string>;
    addresseeName?: string;
    addresseeIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRateInfoRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    currencyCode?: string;
    summaryInfo?: boolean;
    criteriaStartDate?: string;
    criteriaEndDate?: string;
    adults?: number;
    children?: number;
    childAge?: Array<number>;
    bucket1Count?: number;
    bucket2Count?: number;
    bucket3Count?: number;
    bucket4Count?: number;
    bucket5Count?: number;
    detailDate?: string;
    blockId?: string;
    blockIdType?: string;
    id?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    ratePlanCode?: string;
    effectiveRateEnd?: Array<string>;
    effectiveRateStart?: Array<string>;
    roomType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRecentlyAccessedReservationsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReprintTicketsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ticketId?: string;
    ticketIdType?: string;
    packageCode?: Array<string>;
    reservationProductId?: string;
    reservationProductIdType?: string;
    ticketNumberId?: string;
    ticketNumberIdType?: string;
    ticketIssueDate?: Array<string>;
    ticketConsumptionDate?: Array<string>;
    ticketRateCode?: Array<string>;
    ticketStatus?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservationRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetReservationFetchInstructionsEnum>;
    allowedActions?: Set<GetReservationAllowedActionsEnum>;
    markAsRecentlyAccessed?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservationActivityLogRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    activityGroup?: string;
    activityType?: string;
    fromDate?: string;
    toDate?: string;
    searchText?: string;
    userByIdsUserId?: Array<number>;
    userForIdsUserId?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservationAttachmentsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    webRegistrationCard?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservationByExtIdRequest {
    reservationExternalId: string;
    externalSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetReservationByExtIdFetchInstructionsEnum>;
    allowedActions?: Set<GetReservationByExtIdAllowedActionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservationExcludedPreferencesRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    preferenceType?: string;
    preferenceCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservationIndicatorsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationId?: Array<string>;
    checkInstructions?: Set<GetReservationIndicatorsCheckInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservationLocatorsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservationPoliciesRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchDepositPolicies?: boolean;
    fetchCancellationPolicies?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservationPreferenceRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    preferenceTypeCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservationUpsellInfoRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservationsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    recentlyAccessed?: boolean;
    limit?: number;
    offset?: number;
    searchType?: GetReservationsSearchTypeEnum;
    hotelIds?: Array<string>;
    text?: string;
    reservationIdList?: Array<string>;
    confirmationNumberList?: Array<string>;
    cancellationNumberList?: Array<string>;
    externalReferenceIds?: Array<string>;
    externalSystemCodes?: Array<string>;
    arrivalEndDate?: string;
    arrivalStartDate?: string;
    departureEndDate?: string;
    departureStartDate?: string;
    expectedArrivalStartTime?: string;
    expectedArrivalEndTime?: string;
    expectedReturnEndTime?: string;
    expectedReturnStartTime?: string;
    companyNames?: Array<string>;
    sourceNames?: Array<string>;
    travelAgentNames?: Array<string>;
    groupNames?: Array<string>;
    travelAgentIds?: Array<string>;
    companyIds?: Array<string>;
    sourceIds?: Array<string>;
    contactIds?: Array<string>;
    groupIds?: Array<string>;
    billingContactIds?: Array<string>;
    profileIds?: Array<string>;
    membershipCardNumber?: string;
    membershipLevels?: Array<string>;
    membershipTypes?: Array<string>;
    surname?: string;
    givenName?: string;
    anyVIPStatus?: boolean;
    vipCodes?: Array<string>;
    guaranteeCode?: string;
    paymentMethod?: string;
    discountApplied?: boolean;
    user?: Array<string>;
    createdBy?: string;
    cancelledByList?: Array<string>;
    cancelledOn?: string;
    ratePlanCodes?: Array<string>;
    sourceCodes?: Array<string>;
    marketCodes?: Array<string>;
    excludeBlockReservations?: boolean;
    blockName?: string;
    blockIds?: Array<string>;
    blockCodes?: Array<string>;
    customReference?: string;
    recordLocator?: string;
    orderBy?: Array<GetReservationsOrderByEnum>;
    sortOrder?: Set<GetReservationsSortOrderEnum>;
    roomAssignedOnly?: boolean;
    roomUnassignedOnly?: boolean;
    roomId?: string;
    roomType?: Array<string>;
    roomFeatures?: Array<string>;
    roomSpecials?: Array<string>;
    roomSmokingPreference?: string;
    roomFloorPreferences?: Array<string>;
    housekeepingRoomStatuses?: Set<GetReservationsHousekeepingRoomStatusesEnum>;
    roomClasses?: Array<string>;
    roomRangeFrom?: string;
    roomRangeTo?: string;
    communication?: string;
    fetchInstructions?: Set<GetReservationsFetchInstructionsEnum>;
    allowedReservationActions?: Set<GetReservationsAllowedReservationActionsEnum>;
    allowPreRegistration?: boolean;
    hasDepositBalance?: boolean;
    hasOpenBalance?: boolean;
    hasOpenFolio?: boolean;
    includeScheduledCheckOut?: boolean;
    linkedOnly?: boolean;
    unlinkedOnly?: boolean;
    actualArrivals?: boolean;
    actualDepartures?: boolean;
    complimentaryReservations?: boolean;
    dayOfArrivalCancels?: boolean;
    dayUse?: boolean;
    earlyDepartures?: boolean;
    expectedArrivals?: boolean;
    expectedDepartures?: boolean;
    extendedStays?: boolean;
    houseUseReservations?: boolean;
    stayovers?: boolean;
    stayDate?: string;
    roomRoutingId?: string;
    excludePseudoRoomReservations?: boolean;
    excludeReservationIds?: Array<string>;
    excludeVIPStatusCodes?: Array<string>;
    excludeSpecials?: Array<string>;
    excludeFloorPreferences?: Array<string>;
    excludeAdvanceCheckedIn?: boolean;
    excludeRoomFeatures?: Array<string>;
    playerId?: string;
    gamingBalanceFrom?: number;
    gamingBalanceTo?: number;
    compAccountingBalanceFrom?: number;
    compAccountingBalanceTo?: number;
    searchTypes?: Set<GetReservationsSearchTypesEnum>;
    reservationStatuses?: Set<GetReservationsReservationStatusesEnum>;
    transportationCodes?: Array<string>;
    roomReadyStatuses?: Set<GetReservationsRoomReadyStatusesEnum>;
    checkoutMessageReceived?: boolean;
    optedForCommunication?: boolean;
    createdOn?: string;
    stayOn?: string;
    contactNames?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservationsSummaryRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    advancedCheckedIn?: boolean;
    limit?: number;
    offset?: number;
    preRegistered?: boolean;
    arrivalDate?: string;
    departureDate?: string;
    createDateTime?: string;
    cancelledOn?: string;
    folioClosedOn?: string;
    lastName?: string;
    companyId?: number;
    guestNameId?: number;
    reservationStatus?: GetReservationsSummaryReservationStatusEnum;
    confirmationNumber?: string;
    externalReferenceNumber?: string;
    cancellationNumber?: string;
    membershipNumber?: string;
    registeredCardNumber?: string;
    balance?: number;
    roomId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservationsToShareByProfileIdRequest {
    profileIdtoShare: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    superSearch?: string;
    reservationGuestId?: string;
    reservationGuestIdType?: string;
    membershipId?: string;
    membershipLevel?: Array<string>;
    membershipType?: Array<string>;
    surname?: string;
    givenName?: string;
    roomId?: string;
    fetchInstructions?: Set<GetReservationsToShareByProfileIdFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservationsToShareByReservationIdRequest {
    reservationIdtoShare: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    superSearch?: string;
    reservationGuestId?: string;
    reservationGuestIdType?: string;
    membershipId?: string;
    membershipLevel?: Array<string>;
    membershipType?: Array<string>;
    surname?: string;
    givenName?: string;
    roomId?: string;
    fetchInstructions?: Set<GetReservationsToShareByReservationIdFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservedInventoryItemsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRoomCalendarRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    advanceCheckedIn?: boolean;
    assignedRooms?: string;
    componentRooms?: string;
    connectingRoomsOnly?: string;
    dueOut?: string;
    endDate?: string;
    isSortDescending?: boolean;
    pageIndex?: number;
    partiallyAssignedRooms?: string;
    recordsPerPage?: number;
    roomConditions?: string;
    ownerRoomsOnly?: string;
    ownerExclusiveOnly?: string;
    sortingBy?: GetRoomCalendarSortingByEnum;
    includeRoomMoveHistory?: boolean;
    includeComponentRoomBlockOutDates?: boolean;
    startDate?: string;
    unassignedRooms?: string;
    roomId?: Array<string>;
    roomType?: Array<string>;
    roomClass?: Array<string>;
    floor?: Array<string>;
    roomFeature?: Array<string>;
    roomStatus?: Set<GetRoomCalendarRoomStatusEnum>;
    smokingPreference?: Array<string>;
    bedType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRoutingInstructionsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeWindowRouting?: boolean;
    includeRoomRouting?: boolean;
    includeCompRouting?: boolean;
    includeCompRoutingRequests?: boolean;
    effectiveOn?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetScriptRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    languageCode?: string;
    scriptType?: string;
    reservationId?: Array<string>;
    reservationIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetSellMessageConfigRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    message?: string;
    roomType?: Array<string>;
    ratePlanCode?: Array<string>;
    blockId?: Array<string>;
    blockIdType?: Array<string>;
    blockCode?: string;
    languageCode?: string;
    croCode?: string;
    displayDate?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetSellMessageConfigByChainRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    message?: string;
    roomType?: Array<string>;
    ratePlanCode?: Array<string>;
    blockId?: Array<string>;
    blockIdType?: Array<string>;
    blockCode?: string;
    languageCode?: string;
    hotelIds?: Array<string>;
    chainId?: string;
    croCode?: string;
    displayDate?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetSellMessagesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    croCode?: string;
    hotelId?: string;
    criteriaId?: string;
    criteriaIdType?: string;
    limit?: number;
    ratePlanCode?: string;
    roomType?: string;
    stickyFlagYn?: string;
    criteriaType?: string;
    startDate?: string;
    endDate?: string;
    duration?: string;
    fetchInstructions?: Set<GetSellMessagesFetchInstructionsEnum>;
    usedInModule?: GetSellMessagesUsedInModuleEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetShareReservationsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetShareReservationsByExtIdRequest {
    reservationExternalId: string;
    externalSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetTicketsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    packageCode?: string;
    retrieveIssuedOnly?: boolean;
    retrieveNotIssuedOnly?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetTicketsInquiryRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ticketId?: string;
    ticketIdType?: string;
    packageCode?: Array<string>;
    reservationProductId?: string;
    reservationProductIdType?: string;
    ticketNumberId?: string;
    ticketNumberIdType?: string;
    ticketIssueDate?: Array<string>;
    ticketConsumptionDate?: Array<string>;
    ticketRateCode?: Array<string>;
    ticketStatus?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetTracesByReservationRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetTracesByRoomRequest {
    roomId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetTransactionDiversionsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionDiversionCodes?: Array<string>;
    includeDailyDetails?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetUpgradeEligibilityReservationsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    arrivalEndDate?: string;
    arrivalStartDate?: string;
    membershipType?: string;
    externalReferenceType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface MergeReservationsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationsToMerge: ReservationsToMerge;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostBreakReservationLockRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationLock: ReservationLock;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostBulkReservationAlertsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationAlerts: ReservationAlerts;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCallRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    registerCall: RegisterCall;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCancelReservationOperationRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cancelReservation: PostCancelReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCancelReservationByExtIdRequest {
    reservationExternalId: string;
    externalSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cancelReservation: CancelReservation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCancelReservationsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cancelReservations: CancelReservations;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCancelShareReservationRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cancelReservation: CancelReservation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCancellationPolicyRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationCancellationPolicyCriteria: ReservationCancellationPolicyCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCombineShareReservationsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    combineShareReservations: CombineShareReservations;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCombineShareReservationsByExtIdRequest {
    reservationExternalId: string;
    externalSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    combineShareReservations: CombineShareReservations;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostConfirmationLettersRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    confirmationLetters: ConfirmationLetters;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostDepositPolicyRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationDepositPolicyCriteria: ReservationDepositPolicyCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostECouponsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eCouponsInfo: ECouponsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostGuestMessagesRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createGuestMessages: CreateGuestMessages;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostIssueTicketsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ticketsInfo: TicketsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostMasterAccountRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    masterAccount: MasterAccount;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostPaymentMethodsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationPaymentMethods: ReservationPaymentMethods;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostPreCheckInReservationOperationRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    preCheckInReservation: PostPreCheckInReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostReservationOperationRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createReservation: PostReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostReservationByBlockOperationRequest {
    blockId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createReservation: PostReservationByBlockRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostReservationCertificateRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    attachCertificate: AttachCertificate;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostReservationCopyRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    copyReservation: CopyReservation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostReservationLinksOperationRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    linkReservationsCriteria: PostReservationLinksRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostReservationLinksByChainRequest {
    reservationId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    linkReservationsCriteria: LinkReservationsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostReservationLinksByExtIdRequest {
    reservationExternalId: string;
    externalSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    linkReservationsCriteria: LinkReservationsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostReservationLocatorsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationLocatorsDetailsInfo: ReservationLocatorsDetailsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostReservationMembershipRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationMembership: ReservationMembership;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostReservationPackageRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationPackagesInfo: ReservationPackagesInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostReservationPreferenceRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationPreferenceInfo: ReservationPreferenceInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostReserveInventoryItemsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reserveInventoryItems: ReserveInventoryItems;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostReverseDepositPolicyRequest {
    policyId: string;
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reverseDepositPolicy: ReverseDepositPolicy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostRoutingInstructionsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationRoutingCriteria: ReservationRoutingCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostRoutingInstructionsByExtIdRequest {
    reservationExternalId: string;
    externalSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationRoutingCriteria: ReservationRoutingCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostSellMessageConfigRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    sellMessageConfig: SellMessageConfig;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostSellMessageConfigByChainRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    sellMessageConfig: SellMessageConfig;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostTicketsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ticketsInfo: TicketsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostTransactionDiversionsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionDiversionsInfo: TransactionDiversionsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostTurnawayReservationRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    registerTurnaway: RegisterTurnaway;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostUpsellReservationOperationRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    upsellReservation: PostUpsellReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutAcquireReservationLockRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationLock: ReservationLock;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutBreakShareValidationsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    breakShareValidations: BreakShareValidations;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutCancellationPolicyRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationCancellationPolicyCriteria: ReservationCancellationPolicyCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutCombineShareValidationsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    combineShareValidations: CombineShareValidations;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutComputeCancellationPoliciesRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    computeCancellationPolicies: ComputeCancellationPolicies;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutComputeDepositPoliciesRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    computeDepositPolicies: ComputeDepositPolicies;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutDepositPolicyRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationDepositPolicyCriteria: ReservationDepositPolicyCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutECouponsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eCouponsInfo: ECouponsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutGuestMessagesRequest {
    guestMessageId: string;
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeGuestMessages: ChangeGuestMessages;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutMasterAccountRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    masterAccount: MasterAccount;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutPaymentMethodsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationPaymentMethods: ReservationPaymentMethods;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutReinstateReservationRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reinstateReservation: ReinstateReservation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutReinstateReservationByExtIdRequest {
    reservationExternalId: string;
    externalSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reinstateReservation: ReinstateReservation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutReservationOperationRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeReservation: PutReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutReservationByExtIdRequest {
    reservationExternalId: string;
    externalSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeReservation: ChangeReservation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutReservationDailyRateDetailValidationRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationDailyRateDetail: ReservationDailyRateDetail;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutReservationHeaderValidationRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationDailyRateDetail: ReservationDailyRateDetail;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutReservationHotelMoveRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    moveReservationHotel: MoveReservationHotel;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutReservationLockRequest {
    lockHandle: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    extendReservationLock: ExtendReservationLock;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutReservationPackageRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationPackagesInfo: ReservationPackagesInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutReservationPreferenceRequest {
    preferenceCode: string;
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationPreferenceInfo: ReservationPreferenceInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutReservationsUpgradeEligibilityRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationsUpgradeEligibility: ReservationsUpgradeEligibility;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutReservedInventoryItemsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservedInventoryItemsInfo: ReservedInventoryItemsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutResvGuestMessagesRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeResvGuestMessages: ChangeResvGuestMessages;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutRoutingInstructionsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    routingInstructionsInfo: RoutingInstructionsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutRoutingInstructionsByExtIdRequest {
    reservationExternalId: string;
    externalSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    routingInstructionsInfo: RoutingInstructionsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutSellMessageConfigRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    sellMessageConfig: SellMessageConfig;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutSellMessageConfigByChainRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    sellMessageConfig: SellMessageConfig;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutShareRateAmountRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeShareRateAmount: ChangeShareRateAmount;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutSharingGuestsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeSharingGuests: ChangeSharingGuests;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutSplitMultiRoomReservationRequest {
    reservationId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    splitMultiRoomReservation: SplitMultiRoomReservation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutTicketsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ticketsInfo: TicketsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutTransactionDiversionsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionDiversionsInfo: TransactionDiversionsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutValidateOverlappingStayRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    overlappingStay: OverlappingStay;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutValidateOverlappingStaysRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    overlappingStay: OverlappingStay;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutValidateReservationChangesOperationRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    validateReservationChanges: PutValidateReservationChangesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ValidateRateInfoRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    validateRateInfo: ValidateRateInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class ReservationApi extends runtime.BaseAPI {
    /**
     * Change a list of Guest Locater for a Reservation. <p><strong>OperationId:</strong>changeReservationLocators</p>
     * Change Reservation Guest Locators
     */
    changeReservationLocatorsRaw(requestParameters: ChangeReservationLocatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationLocatorsStatus>>;
    /**
     * Change a list of Guest Locater for a Reservation. <p><strong>OperationId:</strong>changeReservationLocators</p>
     * Change Reservation Guest Locators
     */
    changeReservationLocators(requestParameters: ChangeReservationLocatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationLocatorsStatus>;
    /**
     * Delete an existing cancellation policy for a specific hotel. <p><strong>OperationId:</strong>deleteCancellationPolicy</p>
     * Delete a Cancellation policy
     */
    deleteCancellationPolicyRaw(requestParameters: DeleteCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Delete an existing cancellation policy for a specific hotel. <p><strong>OperationId:</strong>deleteCancellationPolicy</p>
     * Delete a Cancellation policy
     */
    deleteCancellationPolicy(requestParameters: DeleteCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Delete deposit policy for a property.   <p><strong>OperationId:</strong>deleteDepositPolicy</p>
     * Delete deposit policy
     */
    deleteDepositPolicyRaw(requestParameters: DeleteDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Delete deposit policy for a property.   <p><strong>OperationId:</strong>deleteDepositPolicy</p>
     * Delete deposit policy
     */
    deleteDepositPolicy(requestParameters: DeleteDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Delete the Reservation Ecoupons. <p><strong>OperationId:</strong>deleteECoupons</p>
     * Delete Reservation ECoupons
     */
    deleteECouponsRaw(requestParameters: DeleteECouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Delete the Reservation Ecoupons. <p><strong>OperationId:</strong>deleteECoupons</p>
     * Delete Reservation ECoupons
     */
    deleteECoupons(requestParameters: DeleteECouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Delete guest messages from a reservation. <p><strong>OperationId:</strong>deleteGuestMessages</p>
     * Delete guest messages
     */
    deleteGuestMessagesRaw(requestParameters: DeleteGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Delete guest messages from a reservation. <p><strong>OperationId:</strong>deleteGuestMessages</p>
     * Delete guest messages
     */
    deleteGuestMessages(requestParameters: DeleteGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Cancel Master account on a reservation. <p><strong>OperationId:</strong>deleteMasterAccount</p>
     * Cancel Master Account
     */
    deleteMasterAccountRaw(requestParameters: DeleteMasterAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Cancel Master account on a reservation. <p><strong>OperationId:</strong>deleteMasterAccount</p>
     * Cancel Master Account
     */
    deleteMasterAccount(requestParameters: DeleteMasterAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete a payment method from a reservation. <p><strong>OperationId:</strong>deletePaymentMethods</p>
     * Delete a payment method
     */
    deletePaymentMethodsRaw(requestParameters: DeletePaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete a payment method from a reservation. <p><strong>OperationId:</strong>deletePaymentMethods</p>
     * Delete a payment method
     */
    deletePaymentMethods(requestParameters: DeletePaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This will cancel or rather revert the pre-checkin action for a guest\'s reservation. The reservation will return to DUEIN status. <p><strong>OperationId:</strong>deletePreCheckInReservation</p>
     * Revert a PreCheckIn Reservation
     */
    deletePreCheckInReservationRaw(requestParameters: DeletePreCheckInReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This will cancel or rather revert the pre-checkin action for a guest\'s reservation. The reservation will return to DUEIN status. <p><strong>OperationId:</strong>deletePreCheckInReservation</p>
     * Revert a PreCheckIn Reservation
     */
    deletePreCheckInReservation(requestParameters: DeletePreCheckInReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to refund Reservation tickets. <p><strong>OperationId:</strong>deleteRefundTickets</p>
     * Refund Reservation tickets
     */
    deleteRefundTicketsRaw(requestParameters: DeleteRefundTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to refund Reservation tickets. <p><strong>OperationId:</strong>deleteRefundTickets</p>
     * Refund Reservation tickets
     */
    deleteRefundTickets(requestParameters: DeleteRefundTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Delete attachments from a Reservation. <p><strong>OperationId:</strong>deleteReservationAttachment</p>
     * Delete Reservation attachments
     */
    deleteReservationAttachmentRaw(requestParameters: DeleteReservationAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Delete attachments from a Reservation. <p><strong>OperationId:</strong>deleteReservationAttachment</p>
     * Delete Reservation attachments
     */
    deleteReservationAttachment(requestParameters: DeleteReservationAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Remove a certification from a reservation. <p><strong>OperationId:</strong>deleteReservationCertificate</p>
     * Detach Certificate
     */
    deleteReservationCertificateRaw(requestParameters: DeleteReservationCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Remove a certification from a reservation. <p><strong>OperationId:</strong>deleteReservationCertificate</p>
     * Detach Certificate
     */
    deleteReservationCertificate(requestParameters: DeleteReservationCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinks</p>
     * Remove Reservation Links
     */
    deleteReservationLinksRaw(requestParameters: DeleteReservationLinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinks</p>
     * Remove Reservation Links
     */
    deleteReservationLinks(requestParameters: DeleteReservationLinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinksByChain</p>
     * Remove Reservation Links By Chain
     */
    deleteReservationLinksByChainRaw(requestParameters: DeleteReservationLinksByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinksByChain</p>
     * Remove Reservation Links By Chain
     */
    deleteReservationLinksByChain(requestParameters: DeleteReservationLinksByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinksByExtId</p>
     * Remove Reservation Links
     */
    deleteReservationLinksByExtIdRaw(requestParameters: DeleteReservationLinksByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinksByExtId</p>
     * Remove Reservation Links
     */
    deleteReservationLinksByExtId(requestParameters: DeleteReservationLinksByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Delete a Guest Locater for a Reservation. <p><strong>OperationId:</strong>deleteReservationLocators</p>
     * Remove Reservation Locators
     */
    deleteReservationLocatorsRaw(requestParameters: DeleteReservationLocatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Delete a Guest Locater for a Reservation. <p><strong>OperationId:</strong>deleteReservationLocators</p>
     * Remove Reservation Locators
     */
    deleteReservationLocators(requestParameters: DeleteReservationLocatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Release Reservation Lock. <p><strong>OperationId:</strong>deleteReservationLock</p>
     * Release Reservation Lock
     */
    deleteReservationLockRaw(requestParameters: DeleteReservationLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Release Reservation Lock. <p><strong>OperationId:</strong>deleteReservationLock</p>
     * Release Reservation Lock
     */
    deleteReservationLock(requestParameters: DeleteReservationLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Delete a membership from an existing reservation. <p><strong>OperationId:</strong>deleteReservationMembership</p>
     * Delete a Reservation membership
     */
    deleteReservationMembershipRaw(requestParameters: DeleteReservationMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Delete a membership from an existing reservation. <p><strong>OperationId:</strong>deleteReservationMembership</p>
     * Delete a Reservation membership
     */
    deleteReservationMembership(requestParameters: DeleteReservationMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API will allow you to delete packages from a reservation. <p><strong>OperationId:</strong>deleteReservationPackage</p>
     * Delete a package from a Reservation
     */
    deleteReservationPackageRaw(requestParameters: DeleteReservationPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API will allow you to delete packages from a reservation. <p><strong>OperationId:</strong>deleteReservationPackage</p>
     * Delete a package from a Reservation
     */
    deleteReservationPackage(requestParameters: DeleteReservationPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to remove a preference that exist on a reservation. <p><strong>OperationId:</strong>deleteReservationPreference</p>
     * Delete a Reservation Preference
     */
    deleteReservationPreferenceRaw(requestParameters: DeleteReservationPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to remove a preference that exist on a reservation. <p><strong>OperationId:</strong>deleteReservationPreference</p>
     * Delete a Reservation Preference
     */
    deleteReservationPreference(requestParameters: DeleteReservationPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Delete the Inventory Items reserved for the Reservation. <p><strong>OperationId:</strong>deleteReservedInventoryItems</p>
     * Delete Reserved Inventory Items
     */
    deleteReservedInventoryItemsRaw(requestParameters: DeleteReservedInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Delete the Inventory Items reserved for the Reservation. <p><strong>OperationId:</strong>deleteReservedInventoryItems</p>
     * Delete Reserved Inventory Items
     */
    deleteReservedInventoryItems(requestParameters: DeleteReservedInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to delete routing instructions from a reservation. <p><strong>OperationId:</strong>deleteRoutingInstructions</p>
     * Delete routing instructions
     * @deprecated
     */
    deleteRoutingInstructionsRaw(requestParameters: DeleteRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to delete routing instructions from a reservation. <p><strong>OperationId:</strong>deleteRoutingInstructions</p>
     * Delete routing instructions
     * @deprecated
     */
    deleteRoutingInstructions(requestParameters: DeleteRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Delete an existing sell message configuration for a property. <p><strong>OperationId:</strong>deleteSellMessageConfig</p>
     * Delete sell message
     */
    deleteSellMessageConfigRaw(requestParameters: DeleteSellMessageConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Delete an existing sell message configuration for a property. <p><strong>OperationId:</strong>deleteSellMessageConfig</p>
     * Delete sell message
     */
    deleteSellMessageConfig(requestParameters: DeleteSellMessageConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Delete an existing sell message configuration. <p><strong>OperationId:</strong>deleteSellMessageConfigByChain</p>
     * Delete sell message by chain
     */
    deleteSellMessageConfigByChainRaw(requestParameters: DeleteSellMessageConfigByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Delete an existing sell message configuration. <p><strong>OperationId:</strong>deleteSellMessageConfigByChain</p>
     * Delete sell message by chain
     */
    deleteSellMessageConfigByChain(requestParameters: DeleteSellMessageConfigByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API can be used to separate the share reservations. <p><strong>OperationId:</strong>deleteShareReservation</p>
     * Separate share Reservations
     */
    deleteShareReservationRaw(requestParameters: DeleteShareReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API can be used to separate the share reservations. <p><strong>OperationId:</strong>deleteShareReservation</p>
     * Separate share Reservations
     */
    deleteShareReservation(requestParameters: DeleteShareReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API can be used to separate the share reservations. <p><strong>OperationId:</strong>deleteShareReservationByExtId</p>
     * Separate share Reservations
     */
    deleteShareReservationByExtIdRaw(requestParameters: DeleteShareReservationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API can be used to separate the share reservations. <p><strong>OperationId:</strong>deleteShareReservationByExtId</p>
     * Separate share Reservations
     */
    deleteShareReservationByExtId(requestParameters: DeleteShareReservationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to delete tickets from a reservation. <p><strong>OperationId:</strong>deleteTickets</p>
     * Delete tickets
     */
    deleteTicketsRaw(requestParameters: DeleteTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to delete tickets from a reservation. <p><strong>OperationId:</strong>deleteTickets</p>
     * Delete tickets
     */
    deleteTickets(requestParameters: DeleteTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to delete Transaction Diversions. <p><strong>OperationId:</strong>deleteTransactionDiversions</p>
     * Delete Transaction Diversions
     */
    deleteTransactionDiversionsRaw(requestParameters: DeleteTransactionDiversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to delete Transaction Diversions. <p><strong>OperationId:</strong>deleteTransactionDiversions</p>
     * Delete Transaction Diversions
     */
    deleteTransactionDiversions(requestParameters: DeleteTransactionDiversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API will enable you to delete an upsell from a reservation. There may be reservation policies that might prevent an upsell from being deleted and as such an appropriate response will be returned. <p><strong>OperationId:</strong>deleteUpsell</p>
     * Delete a Reservation Upsell
     */
    deleteUpsellRaw(requestParameters: DeleteUpsellRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API will enable you to delete an upsell from a reservation. There may be reservation policies that might prevent an upsell from being deleted and as such an appropriate response will be returned. <p><strong>OperationId:</strong>deleteUpsell</p>
     * Delete a Reservation Upsell
     */
    deleteUpsell(requestParameters: DeleteUpsellRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Get the alert notices including global alerts for a reservation. <p><strong>OperationId:</strong>getAlertNotices</p>
     * Fetch Alert Notices
     */
    getAlertNoticesRaw(requestParameters: GetAlertNoticesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alerts>>;
    /**
     * Get the alert notices including global alerts for a reservation. <p><strong>OperationId:</strong>getAlertNotices</p>
     * Fetch Alert Notices
     */
    getAlertNotices(requestParameters: GetAlertNoticesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alerts>;
    /**
     * Get award upgrades for a specific property. <p><strong>OperationId:</strong>getAwardUpgrades</p>
     * Get Award Upgrades
     */
    getAwardUpgradesRaw(requestParameters: GetAwardUpgradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AwardUpgrades>>;
    /**
     * Get award upgrades for a specific property. <p><strong>OperationId:</strong>getAwardUpgrades</p>
     * Get Award Upgrades
     */
    getAwardUpgrades(requestParameters: GetAwardUpgradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AwardUpgrades>;
    /**
     * Get certificates and awards associated with the Reservation. <p><strong>OperationId:</strong>getAwards</p>
     * Fetch Awards
     */
    getAwardsRaw(requestParameters: GetAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationAwards>>;
    /**
     * Get certificates and awards associated with the Reservation. <p><strong>OperationId:</strong>getAwards</p>
     * Fetch Awards
     */
    getAwards(requestParameters: GetAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationAwards>;
    /**
     * Get the Reservation Call History <p><strong>OperationId:</strong>getCallHistory</p>
     * Get the Reservation Call History
     */
    getCallHistoryRaw(requestParameters: GetCallHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CallHistory>>;
    /**
     * Get the Reservation Call History <p><strong>OperationId:</strong>getCallHistory</p>
     * Get the Reservation Call History
     */
    getCallHistory(requestParameters: GetCallHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CallHistory>;
    /**
     * Use this API to get call statistics. <p><strong>OperationId:</strong>getCallStatistics</p>
     * Get call statistics
     */
    getCallStatisticsRaw(requestParameters: GetCallStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CallStatistics>>;
    /**
     * Use this API to get call statistics. <p><strong>OperationId:</strong>getCallStatistics</p>
     * Get call statistics
     */
    getCallStatistics(requestParameters: GetCallStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CallStatistics>;
    /**
     * Get cancellation history for a reservation. <p><strong>OperationId:</strong>getCancellationHistory</p>
     * Get cancellation history
     */
    getCancellationHistoryRaw(requestParameters: GetCancellationHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancellationHistory>>;
    /**
     * Get cancellation history for a reservation. <p><strong>OperationId:</strong>getCancellationHistory</p>
     * Get cancellation history
     */
    getCancellationHistory(requestParameters: GetCancellationHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancellationHistory>;
    /**
     * Get a list of Reservations for which confirmation letters need to be sent. <p><strong>OperationId:</strong>getConfirmationLetters</p>
     * Fetch Confirmation Letters
     */
    getConfirmationLettersRaw(requestParameters: GetConfirmationLettersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationConfirmationLetters>>;
    /**
     * Get a list of Reservations for which confirmation letters need to be sent. <p><strong>OperationId:</strong>getConfirmationLetters</p>
     * Fetch Confirmation Letters
     */
    getConfirmationLetters(requestParameters: GetConfirmationLettersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationConfirmationLetters>;
    /**
     * Get the Reservation Ecoupons. <p><strong>OperationId:</strong>getECoupons</p>
     * Get Reservation Ecoupons
     */
    getECouponsRaw(requestParameters: GetECouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ECoupons>>;
    /**
     * Get the Reservation Ecoupons. <p><strong>OperationId:</strong>getECoupons</p>
     * Get Reservation Ecoupons
     */
    getECoupons(requestParameters: GetECouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ECoupons>;
    /**
     * Get external system delivery history. <p><strong>OperationId:</strong>getExternalSystemDeliveryHistory</p>
     * Get External system delivery history
     */
    getExternalSystemDeliveryHistoryRaw(requestParameters: GetExternalSystemDeliveryHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeliveryHistoryLog>>;
    /**
     * Get external system delivery history. <p><strong>OperationId:</strong>getExternalSystemDeliveryHistory</p>
     * Get External system delivery history
     */
    getExternalSystemDeliveryHistory(requestParameters: GetExternalSystemDeliveryHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeliveryHistoryLog>;
    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getExternalSystemReservations</p>
     * Get Reservations for a hotel
     */
    getExternalSystemReservationsRaw(requestParameters: GetExternalSystemReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationsDetails>>;
    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getExternalSystemReservations</p>
     * Get Reservations for a hotel
     */
    getExternalSystemReservations(requestParameters: GetExternalSystemReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationsDetails>;
    /**
     * Use this API to identify whether there are future reservations or business block for the profile id. <p><strong>OperationId:</strong>getFutureReservationsOrBlocks</p>
     * Get Future Reservations on a profile
     */
    getFutureReservationsOrBlocksRaw(requestParameters: GetFutureReservationsOrBlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FutureReservationsOrBlocksDetails>>;
    /**
     * Use this API to identify whether there are future reservations or business block for the profile id. <p><strong>OperationId:</strong>getFutureReservationsOrBlocks</p>
     * Get Future Reservations on a profile
     */
    getFutureReservationsOrBlocks(requestParameters: GetFutureReservationsOrBlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FutureReservationsOrBlocksDetails>;
    /**
     * Get guest messages which exist on a reservation. <p><strong>OperationId:</strong>getGuestMessages</p>
     * Get guest messages
     */
    getGuestMessagesRaw(requestParameters: GetGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuestMessages>>;
    /**
     * Get guest messages which exist on a reservation. <p><strong>OperationId:</strong>getGuestMessages</p>
     * Get guest messages
     */
    getGuestMessages(requestParameters: GetGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuestMessages>;
    /**
     * Use this API to search reservations in a hotel, filtering by whether they are Day Use, Due In, Checked In, Due Out, Checked Out, Cancelled, No Show and Complimentary or any other of the large selection of search criteria. It also serves as an entry way for changing existing reservation information, canceling reservations, checking in guests, canceling check ins, etc. You can use further query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data.<p><strong>OperationId:</strong>getHotelReservations</p>
     * Get and search for reservations in a hotel
     */
    getHotelReservationsRaw(requestParameters: GetHotelReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationsDetails>>;
    /**
     * Use this API to search reservations in a hotel, filtering by whether they are Day Use, Due In, Checked In, Due Out, Checked Out, Cancelled, No Show and Complimentary or any other of the large selection of search criteria. It also serves as an entry way for changing existing reservation information, canceling reservations, checking in guests, canceling check ins, etc. You can use further query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data.<p><strong>OperationId:</strong>getHotelReservations</p>
     * Get and search for reservations in a hotel
     */
    getHotelReservations(requestParameters: GetHotelReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationsDetails>;
    /**
     * Get linked Reservations for given Reservation. <p><strong>OperationId:</strong>getLinkedReservations</p>
     * Get linked Reservations
     */
    getLinkedReservationsRaw(requestParameters: GetLinkedReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LinkedHotelReservations>>;
    /**
     * Get linked Reservations for given Reservation. <p><strong>OperationId:</strong>getLinkedReservations</p>
     * Get linked Reservations
     */
    getLinkedReservations(requestParameters: GetLinkedReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LinkedHotelReservations>;
    /**
     * Get Reservation summary for linked Reservation of given Reservation id. <p><strong>OperationId:</strong>getLinkedReservationsSummary</p>
     * Get Reservation summary for linked Reservation
     */
    getLinkedReservationsSummaryRaw(requestParameters: GetLinkedReservationsSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LinkedReservationsInfo>>;
    /**
     * Get Reservation summary for linked Reservation of given Reservation id. <p><strong>OperationId:</strong>getLinkedReservationsSummary</p>
     * Get Reservation summary for linked Reservation
     */
    getLinkedReservationsSummary(requestParameters: GetLinkedReservationsSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LinkedReservationsInfo>;
    /**
     * Get the package availability for a hotel code and reservation id <p><strong>OperationId:</strong>getPackage</p>
     * Get Package
     */
    getPackageRaw(requestParameters: GetPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Packages>>;
    /**
     * Get the package availability for a hotel code and reservation id <p><strong>OperationId:</strong>getPackage</p>
     * Get Package
     */
    getPackage(requestParameters: GetPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Packages>;
    /**
     * This API will return the payment method(s) that exist on a reservation. <p><strong>OperationId:</strong>getPaymentMethods</p>
     * Get a payment method
     */
    getPaymentMethodsRaw(requestParameters: GetPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationPaymentMethods>>;
    /**
     * This API will return the payment method(s) that exist on a reservation. <p><strong>OperationId:</strong>getPaymentMethods</p>
     * Get a payment method
     */
    getPaymentMethods(requestParameters: GetPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationPaymentMethods>;
    /**
     * Get preArrival Member Reservations. <p><strong>OperationId:</strong>getPreArrivalMemberReservations</p>
     * Get preArrival Member Reservations
     */
    getPreArrivalMemberReservationsRaw(requestParameters: GetPreArrivalMemberReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PreArrivalMemberReservationsDetails>>;
    /**
     * Get preArrival Member Reservations. <p><strong>OperationId:</strong>getPreArrivalMemberReservations</p>
     * Get preArrival Member Reservations
     */
    getPreArrivalMemberReservations(requestParameters: GetPreArrivalMemberReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PreArrivalMemberReservationsDetails>;
    /**
     * Get preConfigured Routing Instructions. <p><strong>OperationId:</strong>getPreConfiguredRoutingInstructions</p>
     * Get pre-Configured Routing Instructions
     */
    getPreConfiguredRoutingInstructionsRaw(requestParameters: GetPreConfiguredRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PreConfiguredRoutingInstructions>>;
    /**
     * Get preConfigured Routing Instructions. <p><strong>OperationId:</strong>getPreConfiguredRoutingInstructions</p>
     * Get pre-Configured Routing Instructions
     */
    getPreConfiguredRoutingInstructions(requestParameters: GetPreConfiguredRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PreConfiguredRoutingInstructions>;
    /**
     * Use this API to retrieve rate plan information including a breakdown of packages and taxes.<p><strong>OperationId:</strong>getRateInfo</p>
     * Get rate information
     */
    getRateInfoRaw(requestParameters: GetRateInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RateInfo>>;
    /**
     * Use this API to retrieve rate plan information including a breakdown of packages and taxes.<p><strong>OperationId:</strong>getRateInfo</p>
     * Get rate information
     */
    getRateInfo(requestParameters: GetRateInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RateInfo>;
    /**
     * This API will return all recently accessed Reservations. <p><strong>OperationId:</strong>getRecentlyAccessedReservations</p>
     * Get recently accessed Reservations
     */
    getRecentlyAccessedReservationsRaw(requestParameters: GetRecentlyAccessedReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecentlyAccessedReservations>>;
    /**
     * This API will return all recently accessed Reservations. <p><strong>OperationId:</strong>getRecentlyAccessedReservations</p>
     * Get recently accessed Reservations
     */
    getRecentlyAccessedReservations(requestParameters: GetRecentlyAccessedReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecentlyAccessedReservations>;
    /**
     * You can use this API to reprint Reservation tickets. <p><strong>OperationId:</strong>getReprintTickets</p>
     * Reprints Reservation tickets
     */
    getReprintTicketsRaw(requestParameters: GetReprintTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tickets>>;
    /**
     * You can use this API to reprint Reservation tickets. <p><strong>OperationId:</strong>getReprintTickets</p>
     * Reprints Reservation tickets
     */
    getReprintTickets(requestParameters: GetReprintTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tickets>;
    /**
     * Use this API to retrieve a reservation&apos;s detail such as guest&apos;s stay, arrival and departure dates, transportation, room and rate information, preferences, packages, and more using OPERA&apos;s reservationId.<p><strong>OperationId:</strong>getReservation</p>
     * Get reservation by ID
     */
    getReservationRaw(requestParameters: GetReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservation>>;
    /**
     * Use this API to retrieve a reservation&apos;s detail such as guest&apos;s stay, arrival and departure dates, transportation, room and rate information, preferences, packages, and more using OPERA&apos;s reservationId.<p><strong>OperationId:</strong>getReservation</p>
     * Get reservation by ID
     */
    getReservation(requestParameters: GetReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservation>;
    /**
     * Use this API to get the activity log data of reservations being created and managed.<p><strong>OperationId:</strong>getReservationActivityLog</p>
     * Fetch reservation activity log
     */
    getReservationActivityLogRaw(requestParameters: GetReservationActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityLog>>;
    /**
     * Use this API to get the activity log data of reservations being created and managed.<p><strong>OperationId:</strong>getReservationActivityLog</p>
     * Fetch reservation activity log
     */
    getReservationActivityLog(requestParameters: GetReservationActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityLog>;
    /**
     * Get Reservation attachments <p><strong>OperationId:</strong>getReservationAttachments</p>
     * Get Reservation attachments
     */
    getReservationAttachmentsRaw(requestParameters: GetReservationAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationAttachments>>;
    /**
     * Get Reservation attachments <p><strong>OperationId:</strong>getReservationAttachments</p>
     * Get Reservation attachments
     */
    getReservationAttachments(requestParameters: GetReservationAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationAttachments>;
    /**
     * Use this API to get a reservation using the external reference ID associated with the reservation such as a Central Reservation System confirmation number or booking engine confirmation number.<p><strong>OperationId:</strong>getReservationByExtId</p>
     * Get reservation by external ID
     */
    getReservationByExtIdRaw(requestParameters: GetReservationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservation>>;
    /**
     * Use this API to get a reservation using the external reference ID associated with the reservation such as a Central Reservation System confirmation number or booking engine confirmation number.<p><strong>OperationId:</strong>getReservationByExtId</p>
     * Get reservation by external ID
     */
    getReservationByExtId(requestParameters: GetReservationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservation>;
    /**
     * Get the Reservation excluded preferences. <p><strong>OperationId:</strong>getReservationExcludedPreferences</p>
     * Fetch Reservation excluded preferences
     */
    getReservationExcludedPreferencesRaw(requestParameters: GetReservationExcludedPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationExcludedPreferences>>;
    /**
     * Get the Reservation excluded preferences. <p><strong>OperationId:</strong>getReservationExcludedPreferences</p>
     * Fetch Reservation excluded preferences
     */
    getReservationExcludedPreferences(requestParameters: GetReservationExcludedPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationExcludedPreferences>;
    /**
     * Get Reservation indicators. <p><strong>OperationId:</strong>getReservationIndicators</p>
     * Get Reservation indicators
     */
    getReservationIndicatorsRaw(requestParameters: GetReservationIndicatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckReservationsDetails>>;
    /**
     * Get Reservation indicators. <p><strong>OperationId:</strong>getReservationIndicators</p>
     * Get Reservation indicators
     */
    getReservationIndicators(requestParameters: GetReservationIndicatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckReservationsDetails>;
    /**
     * Get the Guest locater for a Reservation. <p><strong>OperationId:</strong>getReservationLocators</p>
     * Fetch Reservation Guest Locator
     */
    getReservationLocatorsRaw(requestParameters: GetReservationLocatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationLocators>>;
    /**
     * Get the Guest locater for a Reservation. <p><strong>OperationId:</strong>getReservationLocators</p>
     * Fetch Reservation Guest Locator
     */
    getReservationLocators(requestParameters: GetReservationLocatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationLocators>;
    /**
     * Use this API to get cancelation and deposit policies for a given reservation.<p><strong>OperationId:</strong>getReservationPolicies</p>
     * Get reservation cancel and deposit policies
     */
    getReservationPoliciesRaw(requestParameters: GetReservationPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationPolicies>>;
    /**
     * Use this API to get cancelation and deposit policies for a given reservation.<p><strong>OperationId:</strong>getReservationPolicies</p>
     * Get reservation cancel and deposit policies
     */
    getReservationPolicies(requestParameters: GetReservationPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationPolicies>;
    /**
     * You can use this API to retrieve the preferences that exist on a reservation. <p><strong>OperationId:</strong>getReservationPreference</p>
     * Get Reservation Preferences
     */
    getReservationPreferenceRaw(requestParameters: GetReservationPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationPreference>>;
    /**
     * You can use this API to retrieve the preferences that exist on a reservation. <p><strong>OperationId:</strong>getReservationPreference</p>
     * Get Reservation Preferences
     */
    getReservationPreference(requestParameters: GetReservationPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationPreference>;
    /**
     * Use this API to retrieve the available upsell offers for a specific reservation. If no upsell options are configured for this hotel or available for this reservation, an appropriate error will be returned. <p><strong>OperationId:</strong>getReservationUpsellInfo</p>
     * Get available Upsell offers
     */
    getReservationUpsellInfoRaw(requestParameters: GetReservationUpsellInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationUpsellInfo>>;
    /**
     * Use this API to retrieve the available upsell offers for a specific reservation. If no upsell options are configured for this hotel or available for this reservation, an appropriate error will be returned. <p><strong>OperationId:</strong>getReservationUpsellInfo</p>
     * Get available Upsell offers
     */
    getReservationUpsellInfo(requestParameters: GetReservationUpsellInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationUpsellInfo>;
    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getReservations</p>
     * Get Reservations for a hotel
     */
    getReservationsRaw(requestParameters: GetReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationsDetails>>;
    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getReservations</p>
     * Get Reservations for a hotel
     */
    getReservations(requestParameters: GetReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationsDetails>;
    /**
     * <p>This operation fetches brief summary for the reservations and also supports the Global Parameter <strong>MAX ROWS FETCH COUNT</strong>.<br>By default this parameter is configured to support an overall fetch of <strong>5000</strong> Records in total, with maximum number of records that can be fetched at a time being <strong>200</strong> (limit). However, this parameter can be updated to support an overall fetch value being a valid number between <strong>1</strong> and <strong>10000</strong> with maximum number of records that can be fetched at a time being same i.e. <strong>200</strong> (limit).</p><p>Requests with an <strong>offset</strong> and <strong>limit</strong> sum exceeding the <strong>MAX ROWS FETCH COUNT</strong> configured would fail the request.</p> <p><strong>OperationId:</strong>getReservationsSummary</p>
     * Get brief summary for Reservations
     */
    getReservationsSummaryRaw(requestParameters: GetReservationsSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationsSummary>>;
    /**
     * <p>This operation fetches brief summary for the reservations and also supports the Global Parameter <strong>MAX ROWS FETCH COUNT</strong>.<br>By default this parameter is configured to support an overall fetch of <strong>5000</strong> Records in total, with maximum number of records that can be fetched at a time being <strong>200</strong> (limit). However, this parameter can be updated to support an overall fetch value being a valid number between <strong>1</strong> and <strong>10000</strong> with maximum number of records that can be fetched at a time being same i.e. <strong>200</strong> (limit).</p><p>Requests with an <strong>offset</strong> and <strong>limit</strong> sum exceeding the <strong>MAX ROWS FETCH COUNT</strong> configured would fail the request.</p> <p><strong>OperationId:</strong>getReservationsSummary</p>
     * Get brief summary for Reservations
     */
    getReservationsSummary(requestParameters: GetReservationsSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationsSummary>;
    /**
     * Get Reservations to share by profile id. <p><strong>OperationId:</strong>getReservationsToShareByProfileId</p>
     * Get Reservations to share
     */
    getReservationsToShareByProfileIdRaw(requestParameters: GetReservationsToShareByProfileIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchReservations>>;
    /**
     * Get Reservations to share by profile id. <p><strong>OperationId:</strong>getReservationsToShareByProfileId</p>
     * Get Reservations to share
     */
    getReservationsToShareByProfileId(requestParameters: GetReservationsToShareByProfileIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchReservations>;
    /**
     * Fetch the reservation that can be shared with an existing reservation. <p><strong>OperationId:</strong>getReservationsToShareByReservationId</p>
     * Get Reservations to share by Reservation id
     */
    getReservationsToShareByReservationIdRaw(requestParameters: GetReservationsToShareByReservationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchReservations>>;
    /**
     * Fetch the reservation that can be shared with an existing reservation. <p><strong>OperationId:</strong>getReservationsToShareByReservationId</p>
     * Get Reservations to share by Reservation id
     */
    getReservationsToShareByReservationId(requestParameters: GetReservationsToShareByReservationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchReservations>;
    /**
     * Get the Inventory Items reserved for the Reservation. <p><strong>OperationId:</strong>getReservedInventoryItems</p>
     * Get Reserved Inventory Items
     */
    getReservedInventoryItemsRaw(requestParameters: GetReservedInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryItems>>;
    /**
     * Get the Inventory Items reserved for the Reservation. <p><strong>OperationId:</strong>getReservedInventoryItems</p>
     * Get Reserved Inventory Items
     */
    getReservedInventoryItems(requestParameters: GetReservedInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryItems>;
    /**
     * Use this API to get the room calendar for a hotel. It fetches inventory detail per rooms, the reservations assigned for a selected date range in the past or future, scheduled Out of Order or Out of Service status, room description, room attributes, room features, connecting room, etc.<p><strong>OperationId:</strong>getRoomCalendar</p>
     * Get the room calendar
     */
    getRoomCalendarRaw(requestParameters: GetRoomCalendarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomCalendar>>;
    /**
     * Use this API to get the room calendar for a hotel. It fetches inventory detail per rooms, the reservations assigned for a selected date range in the past or future, scheduled Out of Order or Out of Service status, room description, room attributes, room features, connecting room, etc.<p><strong>OperationId:</strong>getRoomCalendar</p>
     * Get the room calendar
     */
    getRoomCalendar(requestParameters: GetRoomCalendarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomCalendar>;
    /**
     * Use this API to fetch a reservation\'s routing instructions. It requires a reservation ID, which can be fetched using getReservations. <p><strong>OperationId:</strong>getRoutingInstructions</p>
     * Get routing instructions
     */
    getRoutingInstructionsRaw(requestParameters: GetRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoutingInstructions>>;
    /**
     * Use this API to fetch a reservation\'s routing instructions. It requires a reservation ID, which can be fetched using getReservations. <p><strong>OperationId:</strong>getRoutingInstructions</p>
     * Get routing instructions
     */
    getRoutingInstructions(requestParameters: GetRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoutingInstructions>;
    /**
     * This API will get the script for your property. <p><strong>OperationId:</strong>getScript</p>
     * Get a script
     */
    getScriptRaw(requestParameters: GetScriptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Script>>;
    /**
     * This API will get the script for your property. <p><strong>OperationId:</strong>getScript</p>
     * Get a script
     */
    getScript(requestParameters: GetScriptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Script>;
    /**
     * Fetch the existing sell message configuration for a property. <p><strong>OperationId:</strong>getSellMessageConfig</p>
     * Get sell messages
     */
    getSellMessageConfigRaw(requestParameters: GetSellMessageConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchSellMessageConfig>>;
    /**
     * Fetch the existing sell message configuration for a property. <p><strong>OperationId:</strong>getSellMessageConfig</p>
     * Get sell messages
     */
    getSellMessageConfig(requestParameters: GetSellMessageConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchSellMessageConfig>;
    /**
     * Fetch the existing sell message configuration. <p><strong>OperationId:</strong>getSellMessageConfigByChain</p>
     * Get sell messages by chain
     */
    getSellMessageConfigByChainRaw(requestParameters: GetSellMessageConfigByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchSellMessageConfig>>;
    /**
     * Fetch the existing sell message configuration. <p><strong>OperationId:</strong>getSellMessageConfigByChain</p>
     * Get sell messages by chain
     */
    getSellMessageConfigByChain(requestParameters: GetSellMessageConfigByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchSellMessageConfig>;
    /**
     * Fetch the configured sell messages for a property. <p><strong>OperationId:</strong>getSellMessages</p>
     * Get sell messages
     */
    getSellMessagesRaw(requestParameters: GetSellMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SellMessages>>;
    /**
     * Fetch the configured sell messages for a property. <p><strong>OperationId:</strong>getSellMessages</p>
     * Get sell messages
     */
    getSellMessages(requestParameters: GetSellMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SellMessages>;
    /**
     * This API can be used to retrieve the share reservations that exist on a reservation. <p><strong>OperationId:</strong>getShareReservations</p>
     * Get share Reservations
     */
    getShareReservationsRaw(requestParameters: GetShareReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareReservations>>;
    /**
     * This API can be used to retrieve the share reservations that exist on a reservation. <p><strong>OperationId:</strong>getShareReservations</p>
     * Get share Reservations
     */
    getShareReservations(requestParameters: GetShareReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareReservations>;
    /**
     * This API can be used to retrieve the share reservations that exist on a reservation. <p><strong>OperationId:</strong>getShareReservationsByExtId</p>
     * Get share Reservations
     */
    getShareReservationsByExtIdRaw(requestParameters: GetShareReservationsByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareReservations>>;
    /**
     * This API can be used to retrieve the share reservations that exist on a reservation. <p><strong>OperationId:</strong>getShareReservationsByExtId</p>
     * Get share Reservations
     */
    getShareReservationsByExtId(requestParameters: GetShareReservationsByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareReservations>;
    /**
     * Get tickets for a reservation. <p><strong>OperationId:</strong>getTickets</p>
     * Get tickets
     */
    getTicketsRaw(requestParameters: GetTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tickets>>;
    /**
     * Get tickets for a reservation. <p><strong>OperationId:</strong>getTickets</p>
     * Get tickets
     */
    getTickets(requestParameters: GetTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tickets>;
    /**
     * You can use this API to perform a Inquiry for Reservation tickets. <p><strong>OperationId:</strong>getTicketsInquiry</p>
     * Inquiry for Reservation tickets
     */
    getTicketsInquiryRaw(requestParameters: GetTicketsInquiryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tickets>>;
    /**
     * You can use this API to perform a Inquiry for Reservation tickets. <p><strong>OperationId:</strong>getTicketsInquiry</p>
     * Inquiry for Reservation tickets
     */
    getTicketsInquiry(requestParameters: GetTicketsInquiryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tickets>;
    /**
     * You can use this API to get traces for a Reservation. <p><strong>OperationId:</strong>getTracesByReservation</p>
     * Get traces for a Reservation
     */
    getTracesByReservationRaw(requestParameters: GetTracesByReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Traces>>;
    /**
     * You can use this API to get traces for a Reservation. <p><strong>OperationId:</strong>getTracesByReservation</p>
     * Get traces for a Reservation
     */
    getTracesByReservation(requestParameters: GetTracesByReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Traces>;
    /**
     * This API will fetch the traces for a Room. <p><strong>OperationId:</strong>getTracesByRoom</p>
     * Get traces for a Room
     */
    getTracesByRoomRaw(requestParameters: GetTracesByRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Traces>>;
    /**
     * This API will fetch the traces for a Room. <p><strong>OperationId:</strong>getTracesByRoom</p>
     * Get traces for a Room
     */
    getTracesByRoom(requestParameters: GetTracesByRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Traces>;
    /**
     * You can use this API to get Transaction Diversions. <p><strong>OperationId:</strong>getTransactionDiversions</p>
     * Get Transaction Diversions
     */
    getTransactionDiversionsRaw(requestParameters: GetTransactionDiversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDiversions>>;
    /**
     * You can use this API to get Transaction Diversions. <p><strong>OperationId:</strong>getTransactionDiversions</p>
     * Get Transaction Diversions
     */
    getTransactionDiversions(requestParameters: GetTransactionDiversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDiversions>;
    /**
     * You can use this API to fetch Reservations Eligible for an Upgrade. <p><strong>OperationId:</strong>getUpgradeEligibilityReservations</p>
     * Fetch Reservations Eligible for an Upgrade
     */
    getUpgradeEligibilityReservationsRaw(requestParameters: GetUpgradeEligibilityReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpgradeEligibilityReservations>>;
    /**
     * You can use this API to fetch Reservations Eligible for an Upgrade. <p><strong>OperationId:</strong>getUpgradeEligibilityReservations</p>
     * Fetch Reservations Eligible for an Upgrade
     */
    getUpgradeEligibilityReservations(requestParameters: GetUpgradeEligibilityReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpgradeEligibilityReservations>;
    /**
     * Use this API to merge multiple reservations. <p><strong>OperationId:</strong>mergeReservations</p>
     * Merge multiple Reservations
     */
    mergeReservationsRaw(requestParameters: MergeReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MergeReservationsStatus>>;
    /**
     * Use this API to merge multiple reservations. <p><strong>OperationId:</strong>mergeReservations</p>
     * Merge multiple Reservations
     */
    mergeReservations(requestParameters: MergeReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MergeReservationsStatus>;
    /**
     * Break Reservation lock on a reservation. <p><strong>OperationId:</strong>postBreakReservationLock</p>
     * Break Reservation lock
     */
    postBreakReservationLockRaw(requestParameters: PostBreakReservationLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Break Reservation lock on a reservation. <p><strong>OperationId:</strong>postBreakReservationLock</p>
     * Break Reservation lock
     */
    postBreakReservationLock(requestParameters: PostBreakReservationLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Create or updates multiple alerts for multiple reservations in bulk. <p><strong>OperationId:</strong>postBulkReservationAlerts</p>
     * Create Bulk Reservation Alerts
     */
    postBulkReservationAlertsRaw(requestParameters: PostBulkReservationAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Create or updates multiple alerts for multiple reservations in bulk. <p><strong>OperationId:</strong>postBulkReservationAlerts</p>
     * Create Bulk Reservation Alerts
     */
    postBulkReservationAlerts(requestParameters: PostBulkReservationAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to request a new call or make updates to an existing call.<p><strong>OperationId:</strong>postCall</p>
     * Register calls
     */
    postCallRaw(requestParameters: PostCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterCall>>;
    /**
     * Use this API to request a new call or make updates to an existing call.<p><strong>OperationId:</strong>postCall</p>
     * Register calls
     */
    postCall(requestParameters: PostCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterCall>;
    /**
     * Use this if a guest would like to cancel their reservation.  You will receive a cancellation number in the response. <p><strong>OperationId:</strong>postCancelReservation</p>
     * Cancel Reservation by ID
     */
    postCancelReservationRaw(requestParameters: PostCancelReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancelReservationDetails>>;
    /**
     * Use this if a guest would like to cancel their reservation.  You will receive a cancellation number in the response. <p><strong>OperationId:</strong>postCancelReservation</p>
     * Cancel Reservation by ID
     */
    postCancelReservation(requestParameters: PostCancelReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancelReservationDetails>;
    /**
     * Use this if a guest would like to cancel their reservation.  You will receive a cancellation number in the response. <p><strong>OperationId:</strong>postCancelReservationByExtId</p>
     * Cancel Reservation by ID
     */
    postCancelReservationByExtIdRaw(requestParameters: PostCancelReservationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancelReservationDetails>>;
    /**
     * Use this if a guest would like to cancel their reservation.  You will receive a cancellation number in the response. <p><strong>OperationId:</strong>postCancelReservationByExtId</p>
     * Cancel Reservation by ID
     */
    postCancelReservationByExtId(requestParameters: PostCancelReservationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancelReservationDetails>;
    /**
     * This API can be used to  cancel multiple reservations. <p><strong>OperationId:</strong>postCancelReservations</p>
     * Cancel Reservations
     */
    postCancelReservationsRaw(requestParameters: PostCancelReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API can be used to  cancel multiple reservations. <p><strong>OperationId:</strong>postCancelReservations</p>
     * Cancel Reservations
     */
    postCancelReservations(requestParameters: PostCancelReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to cancel reservations including multiple share reservations with single request. You will receive cancellation numbers in the response. <p><strong>OperationId:</strong>postCancelShareReservation</p>
     * Cancel reservations
     */
    postCancelShareReservationRaw(requestParameters: PostCancelShareReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancelReservationDetails>>;
    /**
     * Use this API to cancel reservations including multiple share reservations with single request. You will receive cancellation numbers in the response. <p><strong>OperationId:</strong>postCancelShareReservation</p>
     * Cancel reservations
     */
    postCancelShareReservation(requestParameters: PostCancelShareReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancelReservationDetails>;
    /**
     * Create a new cancellation policy for a property. <p><strong>OperationId:</strong>postCancellationPolicy</p>
     * Create a Cancellation policy
     */
    postCancellationPolicyRaw(requestParameters: PostCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Create a new cancellation policy for a property. <p><strong>OperationId:</strong>postCancellationPolicy</p>
     * Create a Cancellation policy
     */
    postCancellationPolicy(requestParameters: PostCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservations</p>
     * Combine Share Reservations
     */
    postCombineShareReservationsRaw(requestParameters: PostCombineShareReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CombineShareReservationsDetails>>;
    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservations</p>
     * Combine Share Reservations
     */
    postCombineShareReservations(requestParameters: PostCombineShareReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CombineShareReservationsDetails>;
    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservationsByExtId</p>
     * Combine Share Reservations
     */
    postCombineShareReservationsByExtIdRaw(requestParameters: PostCombineShareReservationsByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CombineShareReservationsDetails>>;
    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservationsByExtId</p>
     * Combine Share Reservations
     */
    postCombineShareReservationsByExtId(requestParameters: PostCombineShareReservationsByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CombineShareReservationsDetails>;
    /**
     * Create a confirmation letter for a property. <p><strong>OperationId:</strong>postConfirmationLetters</p>
     * Create the confirmation letters
     */
    postConfirmationLettersRaw(requestParameters: PostConfirmationLettersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfirmationLettersDetails>>;
    /**
     * Create a confirmation letter for a property. <p><strong>OperationId:</strong>postConfirmationLetters</p>
     * Create the confirmation letters
     */
    postConfirmationLetters(requestParameters: PostConfirmationLettersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfirmationLettersDetails>;
    /**
     * Create deposit policy for a property. This policy can then be used for reservations. <p><strong>OperationId:</strong>postDepositPolicy</p>
     * Create deposit policy
     */
    postDepositPolicyRaw(requestParameters: PostDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Create deposit policy for a property. This policy can then be used for reservations. <p><strong>OperationId:</strong>postDepositPolicy</p>
     * Create deposit policy
     */
    postDepositPolicy(requestParameters: PostDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Create the Reservation Ecoupons. <p><strong>OperationId:</strong>postECoupons</p>
     * Create Reservation ECoupon
     */
    postECouponsRaw(requestParameters: PostECouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Create the Reservation Ecoupons. <p><strong>OperationId:</strong>postECoupons</p>
     * Create Reservation ECoupon
     */
    postECoupons(requestParameters: PostECouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Create guest message for a guest reservation. <p><strong>OperationId:</strong>postGuestMessages</p>
     * Create guest messages
     */
    postGuestMessagesRaw(requestParameters: PostGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuestMessagesDetails>>;
    /**
     * Create guest message for a guest reservation. <p><strong>OperationId:</strong>postGuestMessages</p>
     * Create guest messages
     */
    postGuestMessages(requestParameters: PostGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuestMessagesDetails>;
    /**
     * You can use this API to issue Reservation tickets. <p><strong>OperationId:</strong>postIssueTickets</p>
     * Issue Reservation tickets
     */
    postIssueTicketsRaw(requestParameters: PostIssueTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to issue Reservation tickets. <p><strong>OperationId:</strong>postIssueTickets</p>
     * Issue Reservation tickets
     */
    postIssueTickets(requestParameters: PostIssueTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Create a master account for a reservation. <p><strong>OperationId:</strong>postMasterAccount</p>
     * Create a Master Account
     */
    postMasterAccountRaw(requestParameters: PostMasterAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Create a master account for a reservation. <p><strong>OperationId:</strong>postMasterAccount</p>
     * Create a Master Account
     */
    postMasterAccount(requestParameters: PostMasterAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to add a payment method to a reservation. <p><strong>OperationId:</strong>postPaymentMethods</p>
     * Create a payment method
     */
    postPaymentMethodsRaw(requestParameters: PostPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to add a payment method to a reservation. <p><strong>OperationId:</strong>postPaymentMethods</p>
     * Create a payment method
     */
    postPaymentMethods(requestParameters: PostPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This will allow you to set a reservation as a pre-registered guest.  The API request requires the guests confirmation number and you can optionally include arrival time.  The behavior of the API will be dependent upon the Pre-registration rules configured for the hotel in OPERA Cloud administration. <p><strong>OperationId:</strong>postPreCheckInReservation</p>
     * Pre-Checkin a Reservation
     */
    postPreCheckInReservationRaw(requestParameters: PostPreCheckInReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This will allow you to set a reservation as a pre-registered guest.  The API request requires the guests confirmation number and you can optionally include arrival time.  The behavior of the API will be dependent upon the Pre-registration rules configured for the hotel in OPERA Cloud administration. <p><strong>OperationId:</strong>postPreCheckInReservation</p>
     * Pre-Checkin a Reservation
     */
    postPreCheckInReservation(requestParameters: PostPreCheckInReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this to create a new reservation for a hA12:F24otel.  Generally, you would search for a hotel\'s availability and rates before proceeding to use postReservation.  There are many fields in postReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postReservation. <p><strong>OperationId:</strong>postReservation</p>
     * Create Reservation
     */
    postReservationRaw(requestParameters: PostReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateReservationType>>;
    /**
     * Use this to create a new reservation for a hA12:F24otel.  Generally, you would search for a hotel\'s availability and rates before proceeding to use postReservation.  There are many fields in postReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postReservation. <p><strong>OperationId:</strong>postReservation</p>
     * Create Reservation
     */
    postReservation(requestParameters: PostReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateReservationType>;
    /**
     * Use this to create a new reservation for a block, you must know the block Code to create this reservation.  In order to post a successful block reservation, please ensure you use the ListOfValues API\'s to know the hotel\'s codes; such as Address Type, Country Code,  Titles, preferenceCodes etc. <p><strong>OperationId:</strong>postReservationByBlock</p>
     * Create Reservation for a Block
     */
    postReservationByBlockRaw(requestParameters: PostReservationByBlockOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this to create a new reservation for a block, you must know the block Code to create this reservation.  In order to post a successful block reservation, please ensure you use the ListOfValues API\'s to know the hotel\'s codes; such as Address Type, Country Code,  Titles, preferenceCodes etc. <p><strong>OperationId:</strong>postReservationByBlock</p>
     * Create Reservation for a Block
     */
    postReservationByBlock(requestParameters: PostReservationByBlockOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Attach a certificate to Reservation. <p><strong>OperationId:</strong>postReservationCertificate</p>
     * Attach Certificate
     */
    postReservationCertificateRaw(requestParameters: PostReservationCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Attach a certificate to Reservation. <p><strong>OperationId:</strong>postReservationCertificate</p>
     * Attach Certificate
     */
    postReservationCertificate(requestParameters: PostReservationCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Copy a Reservation. <p><strong>OperationId:</strong>postReservationCopy</p>
     * Copy a Reservation
     */
    postReservationCopyRaw(requestParameters: PostReservationCopyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Copy a Reservation. <p><strong>OperationId:</strong>postReservationCopy</p>
     * Copy a Reservation
     */
    postReservationCopy(requestParameters: PostReservationCopyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinks</p>
     * Link Reservations
     */
    postReservationLinksRaw(requestParameters: PostReservationLinksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinks</p>
     * Link Reservations
     */
    postReservationLinks(requestParameters: PostReservationLinksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinksByChain</p>
     * Link Reservations By Chain
     */
    postReservationLinksByChainRaw(requestParameters: PostReservationLinksByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinksByChain</p>
     * Link Reservations By Chain
     */
    postReservationLinksByChain(requestParameters: PostReservationLinksByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinksByExtId</p>
     * Link Reservations
     */
    postReservationLinksByExtIdRaw(requestParameters: PostReservationLinksByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinksByExtId</p>
     * Link Reservations
     */
    postReservationLinksByExtId(requestParameters: PostReservationLinksByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Create Guest Locater for a list of Reservations. <p><strong>OperationId:</strong>postReservationLocators</p>
     * Create Reservation Guest Locator
     */
    postReservationLocatorsRaw(requestParameters: PostReservationLocatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationLocatorsDetails>>;
    /**
     * Create Guest Locater for a list of Reservations. <p><strong>OperationId:</strong>postReservationLocators</p>
     * Create Reservation Guest Locator
     */
    postReservationLocators(requestParameters: PostReservationLocatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationLocatorsDetails>;
    /**
     * Add a membership to an existing reservation. <p><strong>OperationId:</strong>postReservationMembership</p>
     * Create a Reservation membership
     */
    postReservationMembershipRaw(requestParameters: PostReservationMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Add a membership to an existing reservation. <p><strong>OperationId:</strong>postReservationMembership</p>
     * Create a Reservation membership
     */
    postReservationMembership(requestParameters: PostReservationMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API will allow you to add packages to a reservation. <p><strong>OperationId:</strong>postReservationPackage</p>
     * Add a package to a Reservation
     */
    postReservationPackageRaw(requestParameters: PostReservationPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API will allow you to add packages to a reservation. <p><strong>OperationId:</strong>postReservationPackage</p>
     * Add a package to a Reservation
     */
    postReservationPackage(requestParameters: PostReservationPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API will add a preference to a Reservation.  <p><strong>OperationId:</strong>postReservationPreference</p>
     * Add a preference to a Reservation
     */
    postReservationPreferenceRaw(requestParameters: PostReservationPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API will add a preference to a Reservation.  <p><strong>OperationId:</strong>postReservationPreference</p>
     * Add a preference to a Reservation
     */
    postReservationPreference(requestParameters: PostReservationPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Reserve Reservation inventory items. <p><strong>OperationId:</strong>postReserveInventoryItems</p>
     * Reserve Reservation inventory items
     */
    postReserveInventoryItemsRaw(requestParameters: PostReserveInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Reserve Reservation inventory items. <p><strong>OperationId:</strong>postReserveInventoryItems</p>
     * Reserve Reservation inventory items
     */
    postReserveInventoryItems(requestParameters: PostReserveInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to reverse a deposit policy on a specified reservation. <p><strong>OperationId:</strong>postReverseDepositPolicy</p>
     * Reverse a deposit policy
     */
    postReverseDepositPolicyRaw(requestParameters: PostReverseDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to reverse a deposit policy on a specified reservation. <p><strong>OperationId:</strong>postReverseDepositPolicy</p>
     * Reverse a deposit policy
     */
    postReverseDepositPolicy(requestParameters: PostReverseDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to create routing instructions on a reservation. It requires a reservation ID, which can be fetched using getReservations. <p><strong>OperationId:</strong>postRoutingInstructions</p>
     * Create routing instructions for a reservation
     */
    postRoutingInstructionsRaw(requestParameters: PostRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to create routing instructions on a reservation. It requires a reservation ID, which can be fetched using getReservations. <p><strong>OperationId:</strong>postRoutingInstructions</p>
     * Create routing instructions for a reservation
     */
    postRoutingInstructions(requestParameters: PostRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to create routing instructions on a reservation. <p><strong>OperationId:</strong>postRoutingInstructionsByExtId</p>
     * Create routing instructions
     */
    postRoutingInstructionsByExtIdRaw(requestParameters: PostRoutingInstructionsByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to create routing instructions on a reservation. <p><strong>OperationId:</strong>postRoutingInstructionsByExtId</p>
     * Create routing instructions
     */
    postRoutingInstructionsByExtId(requestParameters: PostRoutingInstructionsByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Create sell message configuration for a property. <p><strong>OperationId:</strong>postSellMessageConfig</p>
     * Create sell message
     */
    postSellMessageConfigRaw(requestParameters: PostSellMessageConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Create sell message configuration for a property. <p><strong>OperationId:</strong>postSellMessageConfig</p>
     * Create sell message
     */
    postSellMessageConfig(requestParameters: PostSellMessageConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Create sell message configuration. <p><strong>OperationId:</strong>postSellMessageConfigByChain</p>
     * Create sell message by chain
     */
    postSellMessageConfigByChainRaw(requestParameters: PostSellMessageConfigByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Create sell message configuration. <p><strong>OperationId:</strong>postSellMessageConfigByChain</p>
     * Create sell message by chain
     */
    postSellMessageConfigByChain(requestParameters: PostSellMessageConfigByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to create tickets on a reservation. <p><strong>OperationId:</strong>postTickets</p>
     * Create tickets
     */
    postTicketsRaw(requestParameters: PostTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to create tickets on a reservation. <p><strong>OperationId:</strong>postTickets</p>
     * Create tickets
     */
    postTickets(requestParameters: PostTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to create Transaction Diversions. <p><strong>OperationId:</strong>postTransactionDiversions</p>
     * Create Transaction Diversions
     */
    postTransactionDiversionsRaw(requestParameters: PostTransactionDiversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to create Transaction Diversions. <p><strong>OperationId:</strong>postTransactionDiversions</p>
     * Create Transaction Diversions
     */
    postTransactionDiversions(requestParameters: PostTransactionDiversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Register turnaways for a property. <p><strong>OperationId:</strong>postTurnawayReservation</p>
     * Register Turnaway
     */
    postTurnawayReservationRaw(requestParameters: PostTurnawayReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Register turnaways for a property. <p><strong>OperationId:</strong>postTurnawayReservation</p>
     * Register Turnaway
     */
    postTurnawayReservation(requestParameters: PostTurnawayReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API will allow you to upsell a reservation in OPERA.  You would need to already know the upsell rules that are available for this reservation - you can do this by using the getUpsell API. <p><strong>OperationId:</strong>postUpsellReservation</p>
     * Upsell a Reservation
     */
    postUpsellReservationRaw(requestParameters: PostUpsellReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API will allow you to upsell a reservation in OPERA.  You would need to already know the upsell rules that are available for this reservation - you can do this by using the getUpsell API. <p><strong>OperationId:</strong>postUpsellReservation</p>
     * Upsell a Reservation
     */
    postUpsellReservation(requestParameters: PostUpsellReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Acquire Reservation Lock. <p><strong>OperationId:</strong>putAcquireReservationLock</p>
     * Acquire Reservation Lock
     */
    putAcquireReservationLockRaw(requestParameters: PutAcquireReservationLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationLockDetails>>;
    /**
     * Acquire Reservation Lock. <p><strong>OperationId:</strong>putAcquireReservationLock</p>
     * Acquire Reservation Lock
     */
    putAcquireReservationLock(requestParameters: PutAcquireReservationLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationLockDetails>;
    /**
     * This API performs a validation before separating share reservations. <p><strong>OperationId:</strong>putBreakShareValidations</p>
     * Validate before breaking a share Reservation
     */
    putBreakShareValidationsRaw(requestParameters: PutBreakShareValidationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BreakShareValidationsDetails>>;
    /**
     * This API performs a validation before separating share reservations. <p><strong>OperationId:</strong>putBreakShareValidations</p>
     * Validate before breaking a share Reservation
     */
    putBreakShareValidations(requestParameters: PutBreakShareValidationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BreakShareValidationsDetails>;
    /**
     * Change cancellation policy that is configured for a property. <p><strong>OperationId:</strong>putCancellationPolicy</p>
     * Change a Cancellation policy
     */
    putCancellationPolicyRaw(requestParameters: PutCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationCancellationPolicyCriteria>>;
    /**
     * Change cancellation policy that is configured for a property. <p><strong>OperationId:</strong>putCancellationPolicy</p>
     * Change a Cancellation policy
     */
    putCancellationPolicy(requestParameters: PutCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationCancellationPolicyCriteria>;
    /**
     * Validate before combining Reservations for shares. <p><strong>OperationId:</strong>putCombineShareValidations</p>
     * Combine Share Validations
     */
    putCombineShareValidationsRaw(requestParameters: PutCombineShareValidationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CombineShareValidationsDetails>>;
    /**
     * Validate before combining Reservations for shares. <p><strong>OperationId:</strong>putCombineShareValidations</p>
     * Combine Share Validations
     */
    putCombineShareValidations(requestParameters: PutCombineShareValidationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CombineShareValidationsDetails>;
    /**
     * Compute the cancellation policies for a reservation. <p><strong>OperationId:</strong>putComputeCancellationPolicies</p>
     * Compute the cancellation policies
     */
    putComputeCancellationPoliciesRaw(requestParameters: PutComputeCancellationPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComputeCancellationPoliciesDetails>>;
    /**
     * Compute the cancellation policies for a reservation. <p><strong>OperationId:</strong>putComputeCancellationPolicies</p>
     * Compute the cancellation policies
     */
    putComputeCancellationPolicies(requestParameters: PutComputeCancellationPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComputeCancellationPoliciesDetails>;
    /**
     * Computes the deposit policies. <p><strong>OperationId:</strong>putComputeDepositPolicies</p>
     * Computes the deposit policies
     */
    putComputeDepositPoliciesRaw(requestParameters: PutComputeDepositPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComputeDepositPoliciesDetails>>;
    /**
     * Computes the deposit policies. <p><strong>OperationId:</strong>putComputeDepositPolicies</p>
     * Computes the deposit policies
     */
    putComputeDepositPolicies(requestParameters: PutComputeDepositPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComputeDepositPoliciesDetails>;
    /**
     * Change deposit policy which already exists for a property. <p><strong>OperationId:</strong>putDepositPolicy</p>
     * Change deposit policy
     */
    putDepositPolicyRaw(requestParameters: PutDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeDepositPolicyDetails>>;
    /**
     * Change deposit policy which already exists for a property. <p><strong>OperationId:</strong>putDepositPolicy</p>
     * Change deposit policy
     */
    putDepositPolicy(requestParameters: PutDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeDepositPolicyDetails>;
    /**
     * Change the Reservation Ecoupons. <p><strong>OperationId:</strong>putECoupons</p>
     * Change Reservation Ecoupon
     */
    putECouponsRaw(requestParameters: PutECouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ECoupons>>;
    /**
     * Change the Reservation Ecoupons. <p><strong>OperationId:</strong>putECoupons</p>
     * Change Reservation Ecoupon
     */
    putECoupons(requestParameters: PutECouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ECoupons>;
    /**
     * Change guest Message on a reservation. <p><strong>OperationId:</strong>putGuestMessages</p>
     * Change guest Message
     */
    putGuestMessagesRaw(requestParameters: PutGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeGuestMessages>>;
    /**
     * Change guest Message on a reservation. <p><strong>OperationId:</strong>putGuestMessages</p>
     * Change guest Message
     */
    putGuestMessages(requestParameters: PutGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeGuestMessages>;
    /**
     * Change a master account on a reservation. <p><strong>OperationId:</strong>putMasterAccount</p>
     * Change a Master Account
     */
    putMasterAccountRaw(requestParameters: PutMasterAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MasterAccountSummary>>;
    /**
     * Change a master account on a reservation. <p><strong>OperationId:</strong>putMasterAccount</p>
     * Change a Master Account
     */
    putMasterAccount(requestParameters: PutMasterAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MasterAccountSummary>;
    /**
     * This API will update an existing payment method on a reservation. <p><strong>OperationId:</strong>putPaymentMethods</p>
     * Change a payment method
     */
    putPaymentMethodsRaw(requestParameters: PutPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationPaymentMethods>>;
    /**
     * This API will update an existing payment method on a reservation. <p><strong>OperationId:</strong>putPaymentMethods</p>
     * Change a payment method
     */
    putPaymentMethods(requestParameters: PutPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationPaymentMethods>;
    /**
     * Use this API to reinstate a cancelled reservation. <p><strong>OperationId:</strong>putReinstateReservation</p>
     * Reinstate a Reservation
     */
    putReinstateReservationRaw(requestParameters: PutReinstateReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReinstateReservationDetails>>;
    /**
     * Use this API to reinstate a cancelled reservation. <p><strong>OperationId:</strong>putReinstateReservation</p>
     * Reinstate a Reservation
     */
    putReinstateReservation(requestParameters: PutReinstateReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReinstateReservationDetails>;
    /**
     * Use this API to reinstate a cancelled reservation. <p><strong>OperationId:</strong>putReinstateReservationByExtId</p>
     * Reinstate a Reservation
     */
    putReinstateReservationByExtIdRaw(requestParameters: PutReinstateReservationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReinstateReservationDetails>>;
    /**
     * Use this API to reinstate a cancelled reservation. <p><strong>OperationId:</strong>putReinstateReservationByExtId</p>
     * Reinstate a Reservation
     */
    putReinstateReservationByExtId(requestParameters: PutReinstateReservationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReinstateReservationDetails>;
    /**
     * Use this to update an existing reservation for a hotel, such as adding comments, changing the number of guests.   There are many fields in putReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use putReservation. <p><strong>OperationId:</strong>putReservation</p>
     * Update Reservation by ID
     */
    putReservationRaw(requestParameters: PutReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeReservationDetails>>;
    /**
     * Use this to update an existing reservation for a hotel, such as adding comments, changing the number of guests.   There are many fields in putReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use putReservation. <p><strong>OperationId:</strong>putReservation</p>
     * Update Reservation by ID
     */
    putReservation(requestParameters: PutReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeReservationDetails>;
    /**
     * Use this to update an existing reservation for a hotel, such as adding comments, changing the number of guests.   There are many fields in putReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use putReservation. <p><strong>OperationId:</strong>putReservationByExtId</p>
     * Update Reservation by ID
     */
    putReservationByExtIdRaw(requestParameters: PutReservationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeReservationDetails>>;
    /**
     * Use this to update an existing reservation for a hotel, such as adding comments, changing the number of guests.   There are many fields in putReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use putReservation. <p><strong>OperationId:</strong>putReservationByExtId</p>
     * Update Reservation by ID
     */
    putReservationByExtId(requestParameters: PutReservationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeReservationDetails>;
    /**
     * Validate daily rate details change. <p><strong>OperationId:</strong>putReservationDailyRateDetailValidation</p>
     * Validate daily rate details change
     */
    putReservationDailyRateDetailValidationRaw(requestParameters: PutReservationDailyRateDetailValidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationDailyRateDetailDetails>>;
    /**
     * Validate daily rate details change. <p><strong>OperationId:</strong>putReservationDailyRateDetailValidation</p>
     * Validate daily rate details change
     */
    putReservationDailyRateDetailValidation(requestParameters: PutReservationDailyRateDetailValidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationDailyRateDetailDetails>;
    /**
     * Validate Reservation header change. <p><strong>OperationId:</strong>putReservationHeaderValidation</p>
     * Validate Reservation header change
     */
    putReservationHeaderValidationRaw(requestParameters: PutReservationHeaderValidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationDailyRateDetailDetails>>;
    /**
     * Validate Reservation header change. <p><strong>OperationId:</strong>putReservationHeaderValidation</p>
     * Validate Reservation header change
     */
    putReservationHeaderValidation(requestParameters: PutReservationHeaderValidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationDailyRateDetailDetails>;
    /**
     * This API can be used to move a reservation to a different hotel. <p><strong>OperationId:</strong>putReservationHotelMove</p>
     * Move the Reservation
     */
    putReservationHotelMoveRaw(requestParameters: PutReservationHotelMoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MoveReservationHotelDetails>>;
    /**
     * This API can be used to move a reservation to a different hotel. <p><strong>OperationId:</strong>putReservationHotelMove</p>
     * Move the Reservation
     */
    putReservationHotelMove(requestParameters: PutReservationHotelMoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MoveReservationHotelDetails>;
    /**
     * Extend Reservation Lock. <p><strong>OperationId:</strong>putReservationLock</p>
     * Extend Reservation Lock
     */
    putReservationLockRaw(requestParameters: PutReservationLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtendReservationLockDetails>>;
    /**
     * Extend Reservation Lock. <p><strong>OperationId:</strong>putReservationLock</p>
     * Extend Reservation Lock
     */
    putReservationLock(requestParameters: PutReservationLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtendReservationLockDetails>;
    /**
     * This API will allow you to update existing packages on a reservation. <p><strong>OperationId:</strong>putReservationPackage</p>
     * Update a package on a Reservation
     */
    putReservationPackageRaw(requestParameters: PutReservationPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationPackagesInfo>>;
    /**
     * This API will allow you to update existing packages on a reservation. <p><strong>OperationId:</strong>putReservationPackage</p>
     * Update a package on a Reservation
     */
    putReservationPackage(requestParameters: PutReservationPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationPackagesInfo>;
    /**
     * You can use this API to update the preferences that exist on a reservation. <p><strong>OperationId:</strong>putReservationPreference</p>
     * Change a Reservation Preference
     */
    putReservationPreferenceRaw(requestParameters: PutReservationPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationPreferenceDetails>>;
    /**
     * You can use this API to update the preferences that exist on a reservation. <p><strong>OperationId:</strong>putReservationPreference</p>
     * Change a Reservation Preference
     */
    putReservationPreference(requestParameters: PutReservationPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationPreferenceDetails>;
    /**
     * You can use this API to set Upgrade Eligibility for Reservations. <p><strong>OperationId:</strong>putReservationsUpgradeEligibility</p>
     * Set Upgrade Eligibility for Reservations
     */
    putReservationsUpgradeEligibilityRaw(requestParameters: PutReservationsUpgradeEligibilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationsUpgradeEligibilityDetails>>;
    /**
     * You can use this API to set Upgrade Eligibility for Reservations. <p><strong>OperationId:</strong>putReservationsUpgradeEligibility</p>
     * Set Upgrade Eligibility for Reservations
     */
    putReservationsUpgradeEligibility(requestParameters: PutReservationsUpgradeEligibilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationsUpgradeEligibilityDetails>;
    /**
     * Change the Inventory Items reserved for the Reservation. <p><strong>OperationId:</strong>putReservedInventoryItems</p>
     * Change reserved Inventory Items
     */
    putReservedInventoryItemsRaw(requestParameters: PutReservedInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservedInventoryItemsInfo>>;
    /**
     * Change the Inventory Items reserved for the Reservation. <p><strong>OperationId:</strong>putReservedInventoryItems</p>
     * Change reserved Inventory Items
     */
    putReservedInventoryItems(requestParameters: PutReservedInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservedInventoryItemsInfo>;
    /**
     * Change guest messages for Reservation. <p><strong>OperationId:</strong>putResvGuestMessages</p>
     * Change Reservation Guest Messages
     */
    putResvGuestMessagesRaw(requestParameters: PutResvGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeResvGuestMessages>>;
    /**
     * Change guest messages for Reservation. <p><strong>OperationId:</strong>putResvGuestMessages</p>
     * Change Reservation Guest Messages
     */
    putResvGuestMessages(requestParameters: PutResvGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeResvGuestMessages>;
    /**
     * Change routing instructions on an existing reservation. <p><strong>OperationId:</strong>putRoutingInstructions</p>
     * Change routing instructions
     */
    putRoutingInstructionsRaw(requestParameters: PutRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Change routing instructions on an existing reservation. <p><strong>OperationId:</strong>putRoutingInstructions</p>
     * Change routing instructions
     */
    putRoutingInstructions(requestParameters: PutRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Change routing instructions on an existing reservation. <p><strong>OperationId:</strong>putRoutingInstructionsByExtId</p>
     * Change routing instructions
     */
    putRoutingInstructionsByExtIdRaw(requestParameters: PutRoutingInstructionsByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Change routing instructions on an existing reservation. <p><strong>OperationId:</strong>putRoutingInstructionsByExtId</p>
     * Change routing instructions
     */
    putRoutingInstructionsByExtId(requestParameters: PutRoutingInstructionsByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Update the existing sell message configuration for a property. <p><strong>OperationId:</strong>putSellMessageConfig</p>
     * Change sell message
     */
    putSellMessageConfigRaw(requestParameters: PutSellMessageConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SellMessageConfig>>;
    /**
     * Update the existing sell message configuration for a property. <p><strong>OperationId:</strong>putSellMessageConfig</p>
     * Change sell message
     */
    putSellMessageConfig(requestParameters: PutSellMessageConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SellMessageConfig>;
    /**
     * Update the existing sell message configuration. <p><strong>OperationId:</strong>putSellMessageConfigByChain</p>
     * Change sell message by chain
     */
    putSellMessageConfigByChainRaw(requestParameters: PutSellMessageConfigByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SellMessageConfig>>;
    /**
     * Update the existing sell message configuration. <p><strong>OperationId:</strong>putSellMessageConfigByChain</p>
     * Change sell message by chain
     */
    putSellMessageConfigByChain(requestParameters: PutSellMessageConfigByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SellMessageConfig>;
    /**
     * Change the share amounts of a reservation <p><strong>OperationId:</strong>putShareRateAmount</p>
     * Change Share Rate Amount
     */
    putShareRateAmountRaw(requestParameters: PutShareRateAmountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareReservations>>;
    /**
     * Change the share amounts of a reservation <p><strong>OperationId:</strong>putShareRateAmount</p>
     * Change Share Rate Amount
     */
    putShareRateAmount(requestParameters: PutShareRateAmountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareReservations>;
    /**
     * Change the guest counts(adults or children) for a Sharing Reservation <p><strong>OperationId:</strong>putSharingGuests</p>
     * Change Sharing Guests
     */
    putSharingGuestsRaw(requestParameters: PutSharingGuestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeSharingGuests>>;
    /**
     * Change the guest counts(adults or children) for a Sharing Reservation <p><strong>OperationId:</strong>putSharingGuests</p>
     * Change Sharing Guests
     */
    putSharingGuests(requestParameters: PutSharingGuestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeSharingGuests>;
    /**
     * You can use this API to split a multi room reservation.  This will create a new confirmation number for the split reservation. <p><strong>OperationId:</strong>putSplitMultiRoomReservation</p>
     * Split multi room Reservation
     */
    putSplitMultiRoomReservationRaw(requestParameters: PutSplitMultiRoomReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SplitMultiRoomReservationDetails>>;
    /**
     * You can use this API to split a multi room reservation.  This will create a new confirmation number for the split reservation. <p><strong>OperationId:</strong>putSplitMultiRoomReservation</p>
     * Split multi room Reservation
     */
    putSplitMultiRoomReservation(requestParameters: PutSplitMultiRoomReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SplitMultiRoomReservationDetails>;
    /**
     * Use this API to change tickets on a reservation. <p><strong>OperationId:</strong>putTickets</p>
     * Change tickets
     */
    putTicketsRaw(requestParameters: PutTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tickets>>;
    /**
     * Use this API to change tickets on a reservation. <p><strong>OperationId:</strong>putTickets</p>
     * Change tickets
     */
    putTickets(requestParameters: PutTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tickets>;
    /**
     * You can use this API to change Transaction Diversions. <p><strong>OperationId:</strong>putTransactionDiversions</p>
     * Change Transaction Diversions
     */
    putTransactionDiversionsRaw(requestParameters: PutTransactionDiversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDiversionsDetails>>;
    /**
     * You can use this API to change Transaction Diversions. <p><strong>OperationId:</strong>putTransactionDiversions</p>
     * Change Transaction Diversions
     */
    putTransactionDiversions(requestParameters: PutTransactionDiversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDiversionsDetails>;
    /**
     * Validate overlapping stay for a reservation <p><strong>OperationId:</strong>putValidateOverlappingStay</p>
     * Check overlapping stay
     */
    putValidateOverlappingStayRaw(requestParameters: PutValidateOverlappingStayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OverlappingStayDetails>>;
    /**
     * Validate overlapping stay for a reservation <p><strong>OperationId:</strong>putValidateOverlappingStay</p>
     * Check overlapping stay
     */
    putValidateOverlappingStay(requestParameters: PutValidateOverlappingStayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OverlappingStayDetails>;
    /**
     * Validate overlapping stays <p><strong>OperationId:</strong>putValidateOverlappingStays</p>
     * Check overlapping stay
     */
    putValidateOverlappingStaysRaw(requestParameters: PutValidateOverlappingStaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OverlappingStayDetails>>;
    /**
     * Validate overlapping stays <p><strong>OperationId:</strong>putValidateOverlappingStays</p>
     * Check overlapping stay
     */
    putValidateOverlappingStays(requestParameters: PutValidateOverlappingStaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OverlappingStayDetails>;
    /**
     * Use this API to validate either the guarantee type or stay details of a reservation you are about to create. <p><strong>OperationId:</strong>putValidateReservationChanges</p>
     * Validate Reservation Change
     */
    putValidateReservationChangesRaw(requestParameters: PutValidateReservationChangesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ValidateReservationChangesDetails>>;
    /**
     * Use this API to validate either the guarantee type or stay details of a reservation you are about to create. <p><strong>OperationId:</strong>putValidateReservationChanges</p>
     * Validate Reservation Change
     */
    putValidateReservationChanges(requestParameters: PutValidateReservationChangesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ValidateReservationChangesDetails>;
    /**
     * Validate the rate plan information for a reservation. <p><strong>OperationId:</strong>validateRateInfo</p>
     * Validate rate information
     */
    validateRateInfoRaw(requestParameters: ValidateRateInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RateInfo>>;
    /**
     * Validate the rate plan information for a reservation. <p><strong>OperationId:</strong>validateRateInfo</p>
     * Validate rate information
     */
    validateRateInfo(requestParameters: ValidateRateInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RateInfo>;
}
/**
 * @export
 */
export declare const DeletePreCheckInReservationCardOrTokenEnum: {
    readonly CardNumber: "CardNumber";
    readonly Token: "Token";
};
export type DeletePreCheckInReservationCardOrTokenEnum = typeof DeletePreCheckInReservationCardOrTokenEnum[keyof typeof DeletePreCheckInReservationCardOrTokenEnum];
/**
 * @export
 */
export declare const DeletePreCheckInReservationCardTypeEnum: {
    readonly Ab: "Ab";
    readonly Am: "Am";
    readonly Ax: "Ax";
    readonly Cb: "Cb";
    readonly Dc: "Dc";
    readonly Ds: "Ds";
    readonly Dt: "Dt";
    readonly Ec: "Ec";
    readonly Er: "Er";
    readonly Jc: "Jc";
    readonly Jl: "Jl";
    readonly Mc: "Mc";
    readonly Nb: "Nb";
    readonly So: "So";
    readonly St: "St";
    readonly Sw: "Sw";
    readonly Va: "Va";
    readonly Xy: "Xy";
    readonly Zz: "Zz";
    readonly Cp: "Cp";
    readonly Cu: "Cu";
};
export type DeletePreCheckInReservationCardTypeEnum = typeof DeletePreCheckInReservationCardTypeEnum[keyof typeof DeletePreCheckInReservationCardTypeEnum];
/**
 * @export
 */
export declare const DeletePreCheckInReservationProcessingEnum: {
    readonly Eft: "Eft";
    readonly Manual: "Manual";
};
export type DeletePreCheckInReservationProcessingEnum = typeof DeletePreCheckInReservationProcessingEnum[keyof typeof DeletePreCheckInReservationProcessingEnum];
/**
 * @export
 */
export declare const DeletePreCheckInReservationEmailFolioEmailFormatEnum: {
    readonly Html: "Html";
    readonly Text: "Text";
};
export type DeletePreCheckInReservationEmailFolioEmailFormatEnum = typeof DeletePreCheckInReservationEmailFolioEmailFormatEnum[keyof typeof DeletePreCheckInReservationEmailFolioEmailFormatEnum];
/**
 * @export
 */
export declare const GetAlertNoticesAlertAreaEnum: {
    readonly CheckIn: "CheckIn";
    readonly CheckOut: "CheckOut";
    readonly Reservation: "Reservation";
    readonly Billing: "Billing";
    readonly InHouse: "InHouse";
};
export type GetAlertNoticesAlertAreaEnum = typeof GetAlertNoticesAlertAreaEnum[keyof typeof GetAlertNoticesAlertAreaEnum];
/**
 * @export
 */
export declare const GetExternalSystemReservationsSearchTypeEnum: {
    readonly Any: "Any";
    readonly DayUse: "DayUse";
    readonly Arrival: "Arrival";
    readonly Arrived: "Arrived";
    readonly Departure: "Departure";
    readonly WaitList: "WaitList";
    readonly Cancellation: "Cancellation";
    readonly CheckedOut: "CheckedOut";
    readonly NoShow: "NoShow";
    readonly Complimentary: "Complimentary";
    readonly InHouse: "InHouse";
    readonly PostStayPendingBalance: "PostStayPendingBalance";
    readonly PreRegistered: "PreRegistered";
    readonly PostToRoom: "PostToRoom";
    readonly OpenFolio: "OpenFolio";
    readonly ScheduledCheckOut: "ScheduledCheckOut";
    readonly Queued: "Queued";
    readonly MobileCheckout: "MobileCheckout";
    readonly RegisteredAndInHouse: "RegisteredAndInHouse";
    readonly ResvBlockTraces: "ResvBlockTraces";
    readonly GuestMessages: "GuestMessages";
    readonly MassCancellation: "MassCancellation";
    readonly Operator: "Operator";
    readonly Turndown: "Turndown";
    readonly WalkIn: "WalkIn";
    readonly AdvanceCheckedIn: "AdvanceCheckedIn";
    readonly OpenBalance: "OpenBalance";
    readonly AutoFolioSettlement: "AutoFolioSettlement";
    readonly Routing: "Routing";
    readonly PlayerSnapshot: "PlayerSnapshot";
};
export type GetExternalSystemReservationsSearchTypeEnum = typeof GetExternalSystemReservationsSearchTypeEnum[keyof typeof GetExternalSystemReservationsSearchTypeEnum];
/**
 * @export
 */
export declare const GetExternalSystemReservationsOrderByEnum: {
    readonly Nights: "Nights";
    readonly ArrivalDate: "ArrivalDate";
    readonly ArrivalDateEtr: "ArrivalDateETR";
    readonly DepartureDate: "DepartureDate";
    readonly GuestSurname: "GuestSurname";
    readonly RateAmount: "RateAmount";
    readonly RateCode: "RateCode";
    readonly Room: "Room";
    readonly RoomType: "RoomType";
};
export type GetExternalSystemReservationsOrderByEnum = typeof GetExternalSystemReservationsOrderByEnum[keyof typeof GetExternalSystemReservationsOrderByEnum];
/**
 * @export
 */
export declare const GetExternalSystemReservationsSortOrderEnum: {
    readonly Asc: "Asc";
    readonly Desc: "Desc";
};
export type GetExternalSystemReservationsSortOrderEnum = typeof GetExternalSystemReservationsSortOrderEnum[keyof typeof GetExternalSystemReservationsSortOrderEnum];
/**
 * @export
 */
export declare const GetExternalSystemReservationsHousekeepingRoomStatusesEnum: {
    readonly Clean: "Clean";
    readonly Dirty: "Dirty";
    readonly Pickup: "Pickup";
    readonly Inspected: "Inspected";
    readonly OutOfOrder: "OutOfOrder";
    readonly OutOfService: "OutOfService";
};
export type GetExternalSystemReservationsHousekeepingRoomStatusesEnum = typeof GetExternalSystemReservationsHousekeepingRoomStatusesEnum[keyof typeof GetExternalSystemReservationsHousekeepingRoomStatusesEnum];
/**
 * @export
 */
export declare const GetExternalSystemReservationsFetchInstructionsEnum: {
    readonly Reservation: "Reservation";
    readonly ReservationId: "ReservationID";
    readonly Indicators: "Indicators";
    readonly Deposits: "Deposits";
    readonly RevenuesAndBalances: "RevenuesAndBalances";
    readonly GuestServiceStatus: "GuestServiceStatus";
    readonly MasterInfo: "MasterInfo";
    readonly CancellationInfo: "CancellationInfo";
    readonly BlockReservations: "BlockReservations";
    readonly TaxType: "TaxType";
    readonly GuestDeviceNotification: "GuestDeviceNotification";
    readonly RoomAssignedByAi: "RoomAssignedByAI";
};
export type GetExternalSystemReservationsFetchInstructionsEnum = typeof GetExternalSystemReservationsFetchInstructionsEnum[keyof typeof GetExternalSystemReservationsFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetExternalSystemReservationsSearchTypesEnum: {
    readonly Any: "Any";
    readonly DayUse: "DayUse";
    readonly Arrival: "Arrival";
    readonly Arrived: "Arrived";
    readonly Departure: "Departure";
    readonly WaitList: "WaitList";
    readonly Cancellation: "Cancellation";
    readonly CheckedOut: "CheckedOut";
    readonly NoShow: "NoShow";
    readonly Complimentary: "Complimentary";
    readonly InHouse: "InHouse";
    readonly PostStayPendingBalance: "PostStayPendingBalance";
    readonly PreRegistered: "PreRegistered";
    readonly PostToRoom: "PostToRoom";
    readonly OpenFolio: "OpenFolio";
    readonly ScheduledCheckOut: "ScheduledCheckOut";
    readonly Queued: "Queued";
    readonly MobileCheckout: "MobileCheckout";
    readonly RegisteredAndInHouse: "RegisteredAndInHouse";
    readonly ResvBlockTraces: "ResvBlockTraces";
    readonly GuestMessages: "GuestMessages";
    readonly MassCancellation: "MassCancellation";
    readonly Operator: "Operator";
    readonly Turndown: "Turndown";
    readonly WalkIn: "WalkIn";
    readonly AdvanceCheckedIn: "AdvanceCheckedIn";
    readonly OpenBalance: "OpenBalance";
    readonly AutoFolioSettlement: "AutoFolioSettlement";
    readonly Routing: "Routing";
    readonly PlayerSnapshot: "PlayerSnapshot";
};
export type GetExternalSystemReservationsSearchTypesEnum = typeof GetExternalSystemReservationsSearchTypesEnum[keyof typeof GetExternalSystemReservationsSearchTypesEnum];
/**
 * @export
 */
export declare const GetExternalSystemReservationsReservationStatusesEnum: {
    readonly Cancelled: "Cancelled";
    readonly CheckedOut: "CheckedOut";
    readonly CheckedIn: "CheckedIn";
    readonly DueIn: "DueIn";
    readonly DueOut: "DueOut";
    readonly InHouse: "InHouse";
    readonly NoShow: "NoShow";
    readonly WaitList: "WaitList";
};
export type GetExternalSystemReservationsReservationStatusesEnum = typeof GetExternalSystemReservationsReservationStatusesEnum[keyof typeof GetExternalSystemReservationsReservationStatusesEnum];
/**
 * @export
 */
export declare const GetExternalSystemReservationsRoomReadyStatusesEnum: {
    readonly Pending: "Pending";
    readonly Completed: "Completed";
    readonly Failed: "Failed";
    readonly Sent: "Sent";
    readonly Received: "Received";
    readonly Cancelled: "Cancelled";
    readonly PendingAvailability: "PendingAvailability";
};
export type GetExternalSystemReservationsRoomReadyStatusesEnum = typeof GetExternalSystemReservationsRoomReadyStatusesEnum[keyof typeof GetExternalSystemReservationsRoomReadyStatusesEnum];
/**
 * @export
 */
export declare const GetGuestMessagesReservationStatusEnum: {
    readonly Any: "Any";
    readonly DayUse: "DayUse";
    readonly Arrival: "Arrival";
    readonly Arrived: "Arrived";
    readonly Departure: "Departure";
    readonly WaitList: "WaitList";
    readonly Cancellation: "Cancellation";
    readonly CheckedOut: "CheckedOut";
    readonly NoShow: "NoShow";
    readonly Complimentary: "Complimentary";
    readonly InHouse: "InHouse";
    readonly PostStayPendingBalance: "PostStayPendingBalance";
    readonly PreRegistered: "PreRegistered";
    readonly PostToRoom: "PostToRoom";
    readonly OpenFolio: "OpenFolio";
    readonly ScheduledCheckOut: "ScheduledCheckOut";
    readonly Queued: "Queued";
    readonly MobileCheckout: "MobileCheckout";
    readonly RegisteredAndInHouse: "RegisteredAndInHouse";
    readonly ResvBlockTraces: "ResvBlockTraces";
    readonly GuestMessages: "GuestMessages";
    readonly MassCancellation: "MassCancellation";
    readonly Operator: "Operator";
    readonly Turndown: "Turndown";
    readonly WalkIn: "WalkIn";
    readonly AdvanceCheckedIn: "AdvanceCheckedIn";
    readonly OpenBalance: "OpenBalance";
    readonly AutoFolioSettlement: "AutoFolioSettlement";
    readonly Routing: "Routing";
    readonly PlayerSnapshot: "PlayerSnapshot";
};
export type GetGuestMessagesReservationStatusEnum = typeof GetGuestMessagesReservationStatusEnum[keyof typeof GetGuestMessagesReservationStatusEnum];
/**
 * @export
 */
export declare const GetHotelReservationsDiscrepancyEnum: {
    readonly Skip: "Skip";
    readonly Sleep: "Sleep";
};
export type GetHotelReservationsDiscrepancyEnum = typeof GetHotelReservationsDiscrepancyEnum[keyof typeof GetHotelReservationsDiscrepancyEnum];
/**
 * @export
 */
export declare const GetHotelReservationsSearchTypeEnum: {
    readonly Any: "Any";
    readonly DayUse: "DayUse";
    readonly Arrival: "Arrival";
    readonly Arrived: "Arrived";
    readonly Departure: "Departure";
    readonly WaitList: "WaitList";
    readonly Cancellation: "Cancellation";
    readonly CheckedOut: "CheckedOut";
    readonly NoShow: "NoShow";
    readonly Complimentary: "Complimentary";
    readonly InHouse: "InHouse";
    readonly PostStayPendingBalance: "PostStayPendingBalance";
    readonly PreRegistered: "PreRegistered";
    readonly PostToRoom: "PostToRoom";
    readonly OpenFolio: "OpenFolio";
    readonly ScheduledCheckOut: "ScheduledCheckOut";
    readonly Queued: "Queued";
    readonly MobileCheckout: "MobileCheckout";
    readonly RegisteredAndInHouse: "RegisteredAndInHouse";
    readonly ResvBlockTraces: "ResvBlockTraces";
    readonly GuestMessages: "GuestMessages";
    readonly MassCancellation: "MassCancellation";
    readonly Operator: "Operator";
    readonly Turndown: "Turndown";
    readonly WalkIn: "WalkIn";
    readonly AdvanceCheckedIn: "AdvanceCheckedIn";
    readonly OpenBalance: "OpenBalance";
    readonly AutoFolioSettlement: "AutoFolioSettlement";
    readonly Routing: "Routing";
    readonly PlayerSnapshot: "PlayerSnapshot";
    readonly FiscalInfo: "FiscalInfo";
};
export type GetHotelReservationsSearchTypeEnum = typeof GetHotelReservationsSearchTypeEnum[keyof typeof GetHotelReservationsSearchTypeEnum];
/**
 * @export
 */
export declare const GetHotelReservationsOrderByEnum: {
    readonly Nights: "Nights";
    readonly ArrivalDate: "ArrivalDate";
    readonly ArrivalDateEtr: "ArrivalDateETR";
    readonly DepartureDate: "DepartureDate";
    readonly GuestSurname: "GuestSurname";
    readonly RateAmount: "RateAmount";
    readonly RateCode: "RateCode";
    readonly Room: "Room";
    readonly RoomType: "RoomType";
    readonly QueuePriority: "QueuePriority";
    readonly QueueDurationTime: "QueueDurationTime";
};
export type GetHotelReservationsOrderByEnum = typeof GetHotelReservationsOrderByEnum[keyof typeof GetHotelReservationsOrderByEnum];
/**
 * @export
 */
export declare const GetHotelReservationsSortOrderEnum: {
    readonly Asc: "Asc";
    readonly Desc: "Desc";
};
export type GetHotelReservationsSortOrderEnum = typeof GetHotelReservationsSortOrderEnum[keyof typeof GetHotelReservationsSortOrderEnum];
/**
 * @export
 */
export declare const GetHotelReservationsHousekeepingRoomStatusesEnum: {
    readonly Clean: "Clean";
    readonly Dirty: "Dirty";
    readonly Pickup: "Pickup";
    readonly Inspected: "Inspected";
    readonly OutOfOrder: "OutOfOrder";
    readonly OutOfService: "OutOfService";
};
export type GetHotelReservationsHousekeepingRoomStatusesEnum = typeof GetHotelReservationsHousekeepingRoomStatusesEnum[keyof typeof GetHotelReservationsHousekeepingRoomStatusesEnum];
/**
 * @export
 */
export declare const GetHotelReservationsFetchInstructionsEnum: {
    readonly Reservation: "Reservation";
    readonly ReservationId: "ReservationID";
    readonly Indicators: "Indicators";
    readonly Deposits: "Deposits";
    readonly RevenuesAndBalances: "RevenuesAndBalances";
    readonly GuestServiceStatus: "GuestServiceStatus";
    readonly MasterInfo: "MasterInfo";
    readonly CancellationInfo: "CancellationInfo";
    readonly BlockReservations: "BlockReservations";
    readonly TaxType: "TaxType";
    readonly GuestDeviceNotification: "GuestDeviceNotification";
    readonly RoomAssignedByAi: "RoomAssignedByAI";
    readonly SwapShiftRooms: "SwapShiftRooms";
    readonly ReservationPreferences: "ReservationPreferences";
    readonly FiscalInfo: "FiscalInfo";
    readonly CommissionsInfo: "CommissionsInfo";
};
export type GetHotelReservationsFetchInstructionsEnum = typeof GetHotelReservationsFetchInstructionsEnum[keyof typeof GetHotelReservationsFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetHotelReservationsAllowedReservationActionsEnum: {
    readonly Cancel: "Cancel";
    readonly Move: "Move";
    readonly PreCharge: "PreCharge";
    readonly PostCharge: "PostCharge";
    readonly FacilitySchedule: "FacilitySchedule";
    readonly Upsell: "Upsell";
    readonly PreCheckIn: "PreCheckIn";
    readonly PostToNoShowCancel: "PostToNoShowCancel";
    readonly NoShow: "NoShow";
    readonly NameChange: "NameChange";
    readonly Discount: "Discount";
    readonly HouseKeeping: "HouseKeeping";
    readonly EnrollToPrimaryMembership: "EnrollToPrimaryMembership";
    readonly EnrollInProgress: "EnrollInProgress";
    readonly MemberAwardAttached: "MemberAwardAttached";
};
export type GetHotelReservationsAllowedReservationActionsEnum = typeof GetHotelReservationsAllowedReservationActionsEnum[keyof typeof GetHotelReservationsAllowedReservationActionsEnum];
/**
 * @export
 */
export declare const GetHotelReservationsPeriodicFolioEnum: {
    readonly Weekly: "Weekly";
    readonly Monthly: "Monthly";
    readonly Days: "Days";
};
export type GetHotelReservationsPeriodicFolioEnum = typeof GetHotelReservationsPeriodicFolioEnum[keyof typeof GetHotelReservationsPeriodicFolioEnum];
/**
 * @export
 */
export declare const GetHotelReservationsSearchTypesEnum: {
    readonly Any: "Any";
    readonly DayUse: "DayUse";
    readonly Arrival: "Arrival";
    readonly Arrived: "Arrived";
    readonly Departure: "Departure";
    readonly WaitList: "WaitList";
    readonly Cancellation: "Cancellation";
    readonly CheckedOut: "CheckedOut";
    readonly NoShow: "NoShow";
    readonly Complimentary: "Complimentary";
    readonly InHouse: "InHouse";
    readonly PostStayPendingBalance: "PostStayPendingBalance";
    readonly PreRegistered: "PreRegistered";
    readonly PostToRoom: "PostToRoom";
    readonly OpenFolio: "OpenFolio";
    readonly ScheduledCheckOut: "ScheduledCheckOut";
    readonly Queued: "Queued";
    readonly MobileCheckout: "MobileCheckout";
    readonly RegisteredAndInHouse: "RegisteredAndInHouse";
    readonly ResvBlockTraces: "ResvBlockTraces";
    readonly GuestMessages: "GuestMessages";
    readonly MassCancellation: "MassCancellation";
    readonly Operator: "Operator";
    readonly Turndown: "Turndown";
    readonly WalkIn: "WalkIn";
    readonly AdvanceCheckedIn: "AdvanceCheckedIn";
    readonly OpenBalance: "OpenBalance";
    readonly AutoFolioSettlement: "AutoFolioSettlement";
    readonly Routing: "Routing";
    readonly PlayerSnapshot: "PlayerSnapshot";
};
export type GetHotelReservationsSearchTypesEnum = typeof GetHotelReservationsSearchTypesEnum[keyof typeof GetHotelReservationsSearchTypesEnum];
/**
 * @export
 */
export declare const GetHotelReservationsReservationStatusesEnum: {
    readonly Cancelled: "Cancelled";
    readonly CheckedOut: "CheckedOut";
    readonly CheckedIn: "CheckedIn";
    readonly DueIn: "DueIn";
    readonly DueOut: "DueOut";
    readonly InHouse: "InHouse";
    readonly NoShow: "NoShow";
    readonly WaitList: "WaitList";
};
export type GetHotelReservationsReservationStatusesEnum = typeof GetHotelReservationsReservationStatusesEnum[keyof typeof GetHotelReservationsReservationStatusesEnum];
/**
 * @export
 */
export declare const GetHotelReservationsRoomReadyStatusesEnum: {
    readonly Pending: "Pending";
    readonly Completed: "Completed";
    readonly Failed: "Failed";
    readonly Sent: "Sent";
    readonly Received: "Received";
    readonly Cancelled: "Cancelled";
    readonly PendingAvailability: "PendingAvailability";
};
export type GetHotelReservationsRoomReadyStatusesEnum = typeof GetHotelReservationsRoomReadyStatusesEnum[keyof typeof GetHotelReservationsRoomReadyStatusesEnum];
/**
 * @export
 */
export declare const GetLinkedReservationsFetchInstructionsEnum: {
    readonly Reservation: "Reservation";
    readonly Comments: "Comments";
    readonly GuestComments: "GuestComments";
    readonly Packages: "Packages";
    readonly InventoryItems: "InventoryItems";
    readonly ReservationPaymentMethods: "ReservationPaymentMethods";
    readonly RoutingInstructions: "RoutingInstructions";
    readonly Preferences: "Preferences";
    readonly Memberships: "Memberships";
    readonly Alerts: "Alerts";
    readonly Traces: "Traces";
    readonly ConfirmationLetters: "ConfirmationLetters";
    readonly CallHistory: "CallHistory";
    readonly FixedCharges: "FixedCharges";
    readonly GuestMessages: "GuestMessages";
    readonly ReservationPolicies: "ReservationPolicies";
    readonly Indicators: "Indicators";
    readonly LinkedReservations: "LinkedReservations";
    readonly RevenuesAndBalances: "RevenuesAndBalances";
    readonly GuestLastStay: "GuestLastStay";
    readonly ECoupons: "ECoupons";
    readonly TrackItItems: "TrackItItems";
    readonly TotalCostOfStay: "TotalCostOfStay";
    readonly ReservationAwards: "ReservationAwards";
    readonly WebRegistrationCards: "WebRegistrationCards";
    readonly ServiceRequests: "ServiceRequests";
    readonly ReservationActivities: "ReservationActivities";
    readonly ScheduledActivities: "ScheduledActivities";
    readonly PrepaidCards: "PrepaidCards";
    readonly Shares: "Shares";
    readonly Attachments: "Attachments";
    readonly Locators: "Locators";
    readonly ProfileAwards: "ProfileAwards";
    readonly TransactionDiversions: "TransactionDiversions";
    readonly Tickets: "Tickets";
    readonly GuestMemberships: "GuestMemberships";
    readonly ECertificates: "ECertificates";
    readonly UpsellInfo: "UpsellInfo";
    readonly RoomAssignedByAi: "RoomAssignedByAI";
    readonly CustomNameValue: "CustomNameValue";
    readonly CustomChargeExemptions: "CustomChargeExemptions";
};
export type GetLinkedReservationsFetchInstructionsEnum = typeof GetLinkedReservationsFetchInstructionsEnum[keyof typeof GetLinkedReservationsFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetPackageFetchInstructionsEnum: {
    readonly Primary: "Primary";
    readonly Transaction: "Transaction";
    readonly Classification: "Classification";
    readonly Schedule: "Schedule";
    readonly InventoryItems: "InventoryItems";
};
export type GetPackageFetchInstructionsEnum = typeof GetPackageFetchInstructionsEnum[keyof typeof GetPackageFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetReservationFetchInstructionsEnum: {
    readonly Reservation: "Reservation";
    readonly Comments: "Comments";
    readonly ReservationMembershipAwards: "ReservationMembershipAwards";
    readonly GuestComments: "GuestComments";
    readonly Packages: "Packages";
    readonly TotalCostOfStay: "TotalCostOfStay";
    readonly InventoryItems: "InventoryItems";
    readonly ReservationPaymentMethods: "ReservationPaymentMethods";
    readonly RoutingInstructions: "RoutingInstructions";
    readonly Preferences: "Preferences";
    readonly Memberships: "Memberships";
    readonly Alerts: "Alerts";
    readonly Traces: "Traces";
    readonly ConfirmationLetters: "ConfirmationLetters";
    readonly CallHistory: "CallHistory";
    readonly FixedCharges: "FixedCharges";
    readonly GuestMessages: "GuestMessages";
    readonly ReservationPolicies: "ReservationPolicies";
    readonly Indicators: "Indicators";
    readonly LinkedReservations: "LinkedReservations";
    readonly RevenuesAndBalances: "RevenuesAndBalances";
    readonly GuestLastStay: "GuestLastStay";
    readonly ECoupons: "ECoupons";
    readonly TrackItItems: "TrackItItems";
    readonly ReservationAwards: "ReservationAwards";
    readonly WebRegistrationCards: "WebRegistrationCards";
    readonly ReservationActivities: "ReservationActivities";
    readonly ScheduledActivities: "ScheduledActivities";
    readonly PrepaidCards: "PrepaidCards";
    readonly Attachments: "Attachments";
    readonly Locators: "Locators";
    readonly ProfileAwards: "ProfileAwards";
    readonly TransactionDiversions: "TransactionDiversions";
    readonly Tickets: "Tickets";
    readonly GuestMemberships: "GuestMemberships";
    readonly ECertificates: "ECertificates";
    readonly UpsellInfo: "UpsellInfo";
    readonly RoomAssignedByAi: "RoomAssignedByAI";
    readonly AutoCheckInRoomType: "AutoCheckInRoomType";
};
export type GetReservationFetchInstructionsEnum = typeof GetReservationFetchInstructionsEnum[keyof typeof GetReservationFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetReservationAllowedActionsEnum: {
    readonly Cancel: "Cancel";
    readonly Move: "Move";
    readonly PreCharge: "PreCharge";
    readonly PostCharge: "PostCharge";
    readonly FacilitySchedule: "FacilitySchedule";
    readonly Upsell: "Upsell";
    readonly PreCheckIn: "PreCheckIn";
    readonly PostToNoShowCancel: "PostToNoShowCancel";
    readonly NoShow: "NoShow";
    readonly NameChange: "NameChange";
    readonly Discount: "Discount";
    readonly HouseKeeping: "HouseKeeping";
    readonly EnrollToPrimaryMembership: "EnrollToPrimaryMembership";
    readonly EnrollInProgress: "EnrollInProgress";
    readonly MemberAwardAttached: "MemberAwardAttached";
    readonly UpgradeAwardAttached: "UpgradeAwardAttached";
};
export type GetReservationAllowedActionsEnum = typeof GetReservationAllowedActionsEnum[keyof typeof GetReservationAllowedActionsEnum];
/**
 * @export
 */
export declare const GetReservationByExtIdFetchInstructionsEnum: {
    readonly Reservation: "Reservation";
    readonly Comments: "Comments";
    readonly GuestComments: "GuestComments";
    readonly Packages: "Packages";
    readonly TotalCostOfStay: "TotalCostOfStay";
    readonly InventoryItems: "InventoryItems";
    readonly ReservationPaymentMethods: "ReservationPaymentMethods";
    readonly RoutingInstructions: "RoutingInstructions";
    readonly Preferences: "Preferences";
    readonly Memberships: "Memberships";
    readonly Alerts: "Alerts";
    readonly Traces: "Traces";
    readonly ConfirmationLetters: "ConfirmationLetters";
    readonly CallHistory: "CallHistory";
    readonly FixedCharges: "FixedCharges";
    readonly GuestMessages: "GuestMessages";
    readonly ReservationPolicies: "ReservationPolicies";
    readonly Indicators: "Indicators";
    readonly LinkedReservations: "LinkedReservations";
    readonly RevenuesAndBalances: "RevenuesAndBalances";
    readonly GuestLastStay: "GuestLastStay";
    readonly ECoupons: "ECoupons";
    readonly TrackItItems: "TrackItItems";
    readonly ReservationAwards: "ReservationAwards";
    readonly WebRegistrationCards: "WebRegistrationCards";
    readonly ReservationActivities: "ReservationActivities";
    readonly ScheduledActivities: "ScheduledActivities";
    readonly PrepaidCards: "PrepaidCards";
    readonly Shares: "Shares";
    readonly Attachments: "Attachments";
    readonly Locators: "Locators";
    readonly ProfileAwards: "ProfileAwards";
    readonly TransactionDiversions: "TransactionDiversions";
    readonly Tickets: "Tickets";
    readonly GuestMemberships: "GuestMemberships";
    readonly ECertificates: "ECertificates";
    readonly UpsellInfo: "UpsellInfo";
    readonly RoomAssignedByAi: "RoomAssignedByAI";
};
export type GetReservationByExtIdFetchInstructionsEnum = typeof GetReservationByExtIdFetchInstructionsEnum[keyof typeof GetReservationByExtIdFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetReservationByExtIdAllowedActionsEnum: {
    readonly Cancel: "Cancel";
    readonly Move: "Move";
    readonly PreCharge: "PreCharge";
    readonly PostCharge: "PostCharge";
    readonly FacilitySchedule: "FacilitySchedule";
    readonly Upsell: "Upsell";
    readonly PreCheckIn: "PreCheckIn";
    readonly PostToNoShowCancel: "PostToNoShowCancel";
    readonly NoShow: "NoShow";
    readonly NameChange: "NameChange";
    readonly Discount: "Discount";
    readonly HouseKeeping: "HouseKeeping";
    readonly EnrollToPrimaryMembership: "EnrollToPrimaryMembership";
    readonly EnrollInProgress: "EnrollInProgress";
};
export type GetReservationByExtIdAllowedActionsEnum = typeof GetReservationByExtIdAllowedActionsEnum[keyof typeof GetReservationByExtIdAllowedActionsEnum];
/**
 * @export
 */
export declare const GetReservationIndicatorsCheckInstructionsEnum: {
    readonly HasDepositPolicies: "HasDepositPolicies";
    readonly HasCancellationPolicies: "HasCancellationPolicies";
};
export type GetReservationIndicatorsCheckInstructionsEnum = typeof GetReservationIndicatorsCheckInstructionsEnum[keyof typeof GetReservationIndicatorsCheckInstructionsEnum];
/**
 * @export
 */
export declare const GetReservationsSearchTypeEnum: {
    readonly Any: "Any";
    readonly DayUse: "DayUse";
    readonly Arrival: "Arrival";
    readonly Arrived: "Arrived";
    readonly Departure: "Departure";
    readonly WaitList: "WaitList";
    readonly Cancellation: "Cancellation";
    readonly CheckedOut: "CheckedOut";
    readonly NoShow: "NoShow";
    readonly Complimentary: "Complimentary";
    readonly InHouse: "InHouse";
    readonly PostStayPendingBalance: "PostStayPendingBalance";
    readonly PreRegistered: "PreRegistered";
    readonly PostToRoom: "PostToRoom";
    readonly OpenFolio: "OpenFolio";
    readonly ScheduledCheckOut: "ScheduledCheckOut";
    readonly Queued: "Queued";
    readonly MobileCheckout: "MobileCheckout";
    readonly RegisteredAndInHouse: "RegisteredAndInHouse";
    readonly ResvBlockTraces: "ResvBlockTraces";
    readonly GuestMessages: "GuestMessages";
    readonly MassCancellation: "MassCancellation";
    readonly Operator: "Operator";
    readonly Turndown: "Turndown";
    readonly WalkIn: "WalkIn";
    readonly AdvanceCheckedIn: "AdvanceCheckedIn";
    readonly OpenBalance: "OpenBalance";
    readonly AutoFolioSettlement: "AutoFolioSettlement";
    readonly Routing: "Routing";
    readonly PlayerSnapshot: "PlayerSnapshot";
};
export type GetReservationsSearchTypeEnum = typeof GetReservationsSearchTypeEnum[keyof typeof GetReservationsSearchTypeEnum];
/**
 * @export
 */
export declare const GetReservationsOrderByEnum: {
    readonly Nights: "Nights";
    readonly ArrivalDate: "ArrivalDate";
    readonly ArrivalDateEtr: "ArrivalDateETR";
    readonly DepartureDate: "DepartureDate";
    readonly GuestSurname: "GuestSurname";
    readonly RateAmount: "RateAmount";
    readonly RateCode: "RateCode";
    readonly Room: "Room";
    readonly RoomType: "RoomType";
};
export type GetReservationsOrderByEnum = typeof GetReservationsOrderByEnum[keyof typeof GetReservationsOrderByEnum];
/**
 * @export
 */
export declare const GetReservationsSortOrderEnum: {
    readonly Asc: "Asc";
    readonly Desc: "Desc";
};
export type GetReservationsSortOrderEnum = typeof GetReservationsSortOrderEnum[keyof typeof GetReservationsSortOrderEnum];
/**
 * @export
 */
export declare const GetReservationsHousekeepingRoomStatusesEnum: {
    readonly Clean: "Clean";
    readonly Dirty: "Dirty";
    readonly Pickup: "Pickup";
    readonly Inspected: "Inspected";
    readonly OutOfOrder: "OutOfOrder";
    readonly OutOfService: "OutOfService";
};
export type GetReservationsHousekeepingRoomStatusesEnum = typeof GetReservationsHousekeepingRoomStatusesEnum[keyof typeof GetReservationsHousekeepingRoomStatusesEnum];
/**
 * @export
 */
export declare const GetReservationsFetchInstructionsEnum: {
    readonly Reservation: "Reservation";
    readonly ReservationId: "ReservationID";
    readonly Indicators: "Indicators";
    readonly Deposits: "Deposits";
    readonly RevenuesAndBalances: "RevenuesAndBalances";
    readonly GuestServiceStatus: "GuestServiceStatus";
    readonly MasterInfo: "MasterInfo";
    readonly CancellationInfo: "CancellationInfo";
    readonly BlockReservations: "BlockReservations";
    readonly TaxType: "TaxType";
    readonly GuestDeviceNotification: "GuestDeviceNotification";
    readonly RoomAssignedByAi: "RoomAssignedByAI";
};
export type GetReservationsFetchInstructionsEnum = typeof GetReservationsFetchInstructionsEnum[keyof typeof GetReservationsFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetReservationsAllowedReservationActionsEnum: {
    readonly Cancel: "Cancel";
    readonly Move: "Move";
    readonly PreCharge: "PreCharge";
    readonly PostCharge: "PostCharge";
    readonly FacilitySchedule: "FacilitySchedule";
    readonly Upsell: "Upsell";
    readonly PreCheckIn: "PreCheckIn";
    readonly PostToNoShowCancel: "PostToNoShowCancel";
    readonly NoShow: "NoShow";
    readonly NameChange: "NameChange";
    readonly Discount: "Discount";
    readonly HouseKeeping: "HouseKeeping";
    readonly EnrollToPrimaryMembership: "EnrollToPrimaryMembership";
    readonly EnrollInProgress: "EnrollInProgress";
    readonly MemberAwardAttached: "MemberAwardAttached";
};
export type GetReservationsAllowedReservationActionsEnum = typeof GetReservationsAllowedReservationActionsEnum[keyof typeof GetReservationsAllowedReservationActionsEnum];
/**
 * @export
 */
export declare const GetReservationsSearchTypesEnum: {
    readonly Any: "Any";
    readonly DayUse: "DayUse";
    readonly Arrival: "Arrival";
    readonly Arrived: "Arrived";
    readonly Departure: "Departure";
    readonly WaitList: "WaitList";
    readonly Cancellation: "Cancellation";
    readonly CheckedOut: "CheckedOut";
    readonly NoShow: "NoShow";
    readonly Complimentary: "Complimentary";
    readonly InHouse: "InHouse";
    readonly PostStayPendingBalance: "PostStayPendingBalance";
    readonly PreRegistered: "PreRegistered";
    readonly PostToRoom: "PostToRoom";
    readonly OpenFolio: "OpenFolio";
    readonly ScheduledCheckOut: "ScheduledCheckOut";
    readonly Queued: "Queued";
    readonly MobileCheckout: "MobileCheckout";
    readonly RegisteredAndInHouse: "RegisteredAndInHouse";
    readonly ResvBlockTraces: "ResvBlockTraces";
    readonly GuestMessages: "GuestMessages";
    readonly MassCancellation: "MassCancellation";
    readonly Operator: "Operator";
    readonly Turndown: "Turndown";
    readonly WalkIn: "WalkIn";
    readonly AdvanceCheckedIn: "AdvanceCheckedIn";
    readonly OpenBalance: "OpenBalance";
    readonly AutoFolioSettlement: "AutoFolioSettlement";
    readonly Routing: "Routing";
    readonly PlayerSnapshot: "PlayerSnapshot";
};
export type GetReservationsSearchTypesEnum = typeof GetReservationsSearchTypesEnum[keyof typeof GetReservationsSearchTypesEnum];
/**
 * @export
 */
export declare const GetReservationsReservationStatusesEnum: {
    readonly Cancelled: "Cancelled";
    readonly CheckedOut: "CheckedOut";
    readonly CheckedIn: "CheckedIn";
    readonly DueIn: "DueIn";
    readonly DueOut: "DueOut";
    readonly InHouse: "InHouse";
    readonly NoShow: "NoShow";
    readonly WaitList: "WaitList";
};
export type GetReservationsReservationStatusesEnum = typeof GetReservationsReservationStatusesEnum[keyof typeof GetReservationsReservationStatusesEnum];
/**
 * @export
 */
export declare const GetReservationsRoomReadyStatusesEnum: {
    readonly Pending: "Pending";
    readonly Completed: "Completed";
    readonly Failed: "Failed";
    readonly Sent: "Sent";
    readonly Received: "Received";
    readonly Cancelled: "Cancelled";
    readonly PendingAvailability: "PendingAvailability";
};
export type GetReservationsRoomReadyStatusesEnum = typeof GetReservationsRoomReadyStatusesEnum[keyof typeof GetReservationsRoomReadyStatusesEnum];
/**
 * @export
 */
export declare const GetReservationsSummaryReservationStatusEnum: {
    readonly Cancelled: "Cancelled";
    readonly CheckedOut: "CheckedOut";
    readonly CheckedIn: "CheckedIn";
    readonly DueIn: "DueIn";
    readonly DueOut: "DueOut";
    readonly InHouse: "InHouse";
    readonly NoShow: "NoShow";
    readonly WaitList: "WaitList";
};
export type GetReservationsSummaryReservationStatusEnum = typeof GetReservationsSummaryReservationStatusEnum[keyof typeof GetReservationsSummaryReservationStatusEnum];
/**
 * @export
 */
export declare const GetReservationsToShareByProfileIdFetchInstructionsEnum: {
    readonly Reservation: "Reservation";
    readonly Comments: "Comments";
    readonly GuestComments: "GuestComments";
    readonly Packages: "Packages";
    readonly InventoryItems: "InventoryItems";
    readonly ReservationPaymentMethods: "ReservationPaymentMethods";
    readonly RoutingInstructions: "RoutingInstructions";
    readonly Preferences: "Preferences";
    readonly Memberships: "Memberships";
    readonly Alerts: "Alerts";
    readonly Traces: "Traces";
    readonly ConfirmationLetters: "ConfirmationLetters";
    readonly CallHistory: "CallHistory";
    readonly FixedCharges: "FixedCharges";
    readonly GuestMessages: "GuestMessages";
    readonly ReservationPolicies: "ReservationPolicies";
    readonly Indicators: "Indicators";
    readonly LinkedReservations: "LinkedReservations";
    readonly RevenuesAndBalances: "RevenuesAndBalances";
    readonly GuestLastStay: "GuestLastStay";
    readonly ECoupons: "ECoupons";
    readonly TrackItItems: "TrackItItems";
    readonly TotalCostOfStay: "TotalCostOfStay";
    readonly ReservationAwards: "ReservationAwards";
    readonly WebRegistrationCards: "WebRegistrationCards";
    readonly ServiceRequests: "ServiceRequests";
    readonly ReservationActivities: "ReservationActivities";
    readonly ScheduledActivities: "ScheduledActivities";
    readonly PrepaidCards: "PrepaidCards";
    readonly Shares: "Shares";
    readonly Attachments: "Attachments";
    readonly Locators: "Locators";
    readonly ProfileAwards: "ProfileAwards";
    readonly TransactionDiversions: "TransactionDiversions";
    readonly Tickets: "Tickets";
    readonly GuestMemberships: "GuestMemberships";
    readonly ECertificates: "ECertificates";
    readonly UpsellInfo: "UpsellInfo";
    readonly RoomAssignedByAi: "RoomAssignedByAI";
    readonly CustomNameValue: "CustomNameValue";
    readonly CustomChargeExemptions: "CustomChargeExemptions";
};
export type GetReservationsToShareByProfileIdFetchInstructionsEnum = typeof GetReservationsToShareByProfileIdFetchInstructionsEnum[keyof typeof GetReservationsToShareByProfileIdFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetReservationsToShareByReservationIdFetchInstructionsEnum: {
    readonly Reservation: "Reservation";
    readonly Comments: "Comments";
    readonly GuestComments: "GuestComments";
    readonly Packages: "Packages";
    readonly InventoryItems: "InventoryItems";
    readonly ReservationPaymentMethods: "ReservationPaymentMethods";
    readonly RoutingInstructions: "RoutingInstructions";
    readonly Preferences: "Preferences";
    readonly Memberships: "Memberships";
    readonly Alerts: "Alerts";
    readonly Traces: "Traces";
    readonly ConfirmationLetters: "ConfirmationLetters";
    readonly CallHistory: "CallHistory";
    readonly FixedCharges: "FixedCharges";
    readonly GuestMessages: "GuestMessages";
    readonly ReservationPolicies: "ReservationPolicies";
    readonly Indicators: "Indicators";
    readonly LinkedReservations: "LinkedReservations";
    readonly RevenuesAndBalances: "RevenuesAndBalances";
    readonly GuestLastStay: "GuestLastStay";
    readonly ECoupons: "ECoupons";
    readonly TrackItItems: "TrackItItems";
    readonly TotalCostOfStay: "TotalCostOfStay";
    readonly ReservationAwards: "ReservationAwards";
    readonly WebRegistrationCards: "WebRegistrationCards";
    readonly ServiceRequests: "ServiceRequests";
    readonly ReservationActivities: "ReservationActivities";
    readonly ScheduledActivities: "ScheduledActivities";
    readonly PrepaidCards: "PrepaidCards";
    readonly Shares: "Shares";
    readonly Attachments: "Attachments";
    readonly Locators: "Locators";
    readonly ProfileAwards: "ProfileAwards";
    readonly TransactionDiversions: "TransactionDiversions";
    readonly Tickets: "Tickets";
    readonly GuestMemberships: "GuestMemberships";
    readonly ECertificates: "ECertificates";
    readonly UpsellInfo: "UpsellInfo";
    readonly RoomAssignedByAi: "RoomAssignedByAI";
    readonly CustomNameValue: "CustomNameValue";
    readonly CustomChargeExemptions: "CustomChargeExemptions";
};
export type GetReservationsToShareByReservationIdFetchInstructionsEnum = typeof GetReservationsToShareByReservationIdFetchInstructionsEnum[keyof typeof GetReservationsToShareByReservationIdFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetRoomCalendarSortingByEnum: {
    readonly Default: "Default";
    readonly Room: "Room";
    readonly RoomType: "RoomType";
    readonly RoomStatus: "RoomStatus";
};
export type GetRoomCalendarSortingByEnum = typeof GetRoomCalendarSortingByEnum[keyof typeof GetRoomCalendarSortingByEnum];
/**
 * @export
 */
export declare const GetRoomCalendarRoomStatusEnum: {
    readonly Clean: "Clean";
    readonly Dirty: "Dirty";
    readonly Pickup: "Pickup";
    readonly Inspected: "Inspected";
    readonly OutOfOrder: "OutOfOrder";
    readonly OutOfService: "OutOfService";
};
export type GetRoomCalendarRoomStatusEnum = typeof GetRoomCalendarRoomStatusEnum[keyof typeof GetRoomCalendarRoomStatusEnum];
/**
 * @export
 */
export declare const GetSellMessagesFetchInstructionsEnum: {
    readonly RateCodes: "RateCodes";
    readonly RoomTypes: "RoomTypes";
};
export type GetSellMessagesFetchInstructionsEnum = typeof GetSellMessagesFetchInstructionsEnum[keyof typeof GetSellMessagesFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetSellMessagesUsedInModuleEnum: {
    readonly Blocks: "Blocks";
    readonly Reservations: "Reservations";
    readonly FunctionDiary: "FunctionDiary";
    readonly LookToBookSales: "LookToBookSales";
    readonly GroupRoomsControl: "GroupRoomsControl";
};
export type GetSellMessagesUsedInModuleEnum = typeof GetSellMessagesUsedInModuleEnum[keyof typeof GetSellMessagesUsedInModuleEnum];
