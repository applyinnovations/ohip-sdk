/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActivityLog,
  CancelReservationDetails,
  ChangeReservationDetails,
  CombineShareReservationsDetails,
  ExceptionDetailType,
  PostCallRequest,
  PostCancelReservationRequest,
  PostCombineShareReservationsByExtIdRequest,
  PostDepositPolicyRequest,
  PostPreCheckInReservationRequest,
  PostReservationByBlockRequest,
  PostReservationLinksByChainRequest,
  PostReservationLinksRequest,
  PostReservationRequest,
  PostUpsellReservationRequest,
  PutPaymentMethodsRequest,
  PutReinstateReservationRequest,
  PutReservationRequest,
  PutValidateReservationChangesRequest,
  RateInfo,
  RegisterCall,
  ReinstateReservationDetails,
  Reservation,
  ReservationPaymentMethods,
  ReservationPolicies,
  ReservationUpsellInfo,
  ReservationsDetails,
  Status,
  ValidateReservationChangesDetails,
} from '../models';
import {
    ActivityLogFromJSON,
    ActivityLogToJSON,
    CancelReservationDetailsFromJSON,
    CancelReservationDetailsToJSON,
    ChangeReservationDetailsFromJSON,
    ChangeReservationDetailsToJSON,
    CombineShareReservationsDetailsFromJSON,
    CombineShareReservationsDetailsToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    PostCallRequestFromJSON,
    PostCallRequestToJSON,
    PostCancelReservationRequestFromJSON,
    PostCancelReservationRequestToJSON,
    PostCombineShareReservationsByExtIdRequestFromJSON,
    PostCombineShareReservationsByExtIdRequestToJSON,
    PostDepositPolicyRequestFromJSON,
    PostDepositPolicyRequestToJSON,
    PostPreCheckInReservationRequestFromJSON,
    PostPreCheckInReservationRequestToJSON,
    PostReservationByBlockRequestFromJSON,
    PostReservationByBlockRequestToJSON,
    PostReservationLinksByChainRequestFromJSON,
    PostReservationLinksByChainRequestToJSON,
    PostReservationLinksRequestFromJSON,
    PostReservationLinksRequestToJSON,
    PostReservationRequestFromJSON,
    PostReservationRequestToJSON,
    PostUpsellReservationRequestFromJSON,
    PostUpsellReservationRequestToJSON,
    PutPaymentMethodsRequestFromJSON,
    PutPaymentMethodsRequestToJSON,
    PutReinstateReservationRequestFromJSON,
    PutReinstateReservationRequestToJSON,
    PutReservationRequestFromJSON,
    PutReservationRequestToJSON,
    PutValidateReservationChangesRequestFromJSON,
    PutValidateReservationChangesRequestToJSON,
    RateInfoFromJSON,
    RateInfoToJSON,
    RegisterCallFromJSON,
    RegisterCallToJSON,
    ReinstateReservationDetailsFromJSON,
    ReinstateReservationDetailsToJSON,
    ReservationFromJSON,
    ReservationToJSON,
    ReservationPaymentMethodsFromJSON,
    ReservationPaymentMethodsToJSON,
    ReservationPoliciesFromJSON,
    ReservationPoliciesToJSON,
    ReservationUpsellInfoFromJSON,
    ReservationUpsellInfoToJSON,
    ReservationsDetailsFromJSON,
    ReservationsDetailsToJSON,
    StatusFromJSON,
    StatusToJSON,
    ValidateReservationChangesDetailsFromJSON,
    ValidateReservationChangesDetailsToJSON,
} from '../models';

export interface DeletePreCheckInReservationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    resvIDExtension?: number;
    arrivalTime?: string;
    roomNumber?: string;
    guestPreferredCurrency?: string;
    allowMobileViewFolio?: boolean;
    paymentMethodDescription?: Array<string>;
    paymentMethodFolioView?: Array<number>;
    paymentMethod?: Array<string>;
    attachCreditCardToProfile?: boolean;
    cardHolderName?: string;
    cardNumber?: string;
    cardNumberLast4Digits?: string;
    cardNumberMasked?: string;
    cardOrToken?: DeletePreCheckInReservationCardOrTokenEnum;
    cardType?: DeletePreCheckInReservationCardTypeEnum;
    expirationDate?: Date;
    expirationDateExpired?: boolean;
    expirationDateMasked?: string;
    processing?: DeletePreCheckInReservationProcessingEnum;
    swiped?: boolean;
    userDefinedCardType?: string;
    cardId?: string;
    cardIdIDExtension?: number;
    cardIdIDContext?: string;
    cardIdType?: string;
    currentAuthorizedAmount?: number;
    authorizedAmountCurrencyCode?: string;
    approvalAmountNeeded?: number;
    approvalAmountCurrencyCode?: string;
    balanceAmount?: number;
    balanceCurrencyCode?: string;
    authorizationRuleCode?: number;
    authorizationRuleAmount?: number;
    authorizationRuleCurrencyCode?: string;
    authorizationRulePercent?: number;
    emailFolio?: boolean;
    emailFolioID?: string;
    emailFolioIDExtension?: number;
    emailFolioIDContext?: string;
    emailFolioIDType?: string;
    emailFolioCreateDateTime?: string;
    emailFolioCreatorID?: string;
    emailFolioEmailAddress?: string;
    emailFolioEmailFormat?: DeletePreCheckInReservationEmailFolioEmailFormatEnum;
    emailFolioLastModifierID?: string;
    emailFolioLastModifyDateTime?: string;
    emailFolioOrderSequence?: number;
    emailFolioPrimaryInd?: boolean;
    emailFolioPurgeDate?: Date;
    emailFolioType?: string;
    emailFolioTypeDescription?: string;
    arrivalCarrierCode?: string;
    arrivalDateTime?: string;
    arrivalStationCode?: string;
    arrivalTransportCode?: string;
    arrivalTransportationReqd?: boolean;
    arrivalType?: string;
    arrivalComments?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteReservationLinksRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetExternalSystemReservationsRequest {
    extSystemCode?: string;
    externalReferenceList?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    recentlyAccessed?: boolean;
    limit?: number;
    offset?: number;
    searchType?: GetExternalSystemReservationsSearchTypeEnum;
    hotelIds?: Array<string>;
    text?: string;
    arrivalEndDate?: Date;
    arrivalStartDate?: Date;
    departureEndDate?: Date;
    departureStartDate?: Date;
    expectedArrivalStartTime?: string;
    expectedArrivalEndTime?: string;
    expectedReturnEndTime?: string;
    expectedReturnStartTime?: string;
    companyNames?: Array<string>;
    travelAgentIds?: Array<string>;
    companyIds?: Array<string>;
    sourceIds?: Array<string>;
    contactIds?: Array<string>;
    groupIds?: Array<string>;
    billingContactIds?: Array<string>;
    profileIds?: Array<string>;
    membershipCardNumber?: string;
    membershipLevels?: Array<string>;
    membershipTypes?: Array<string>;
    surname?: string;
    givenName?: string;
    anyVIPStatus?: boolean;
    vipCodes?: Array<string>;
    guaranteeCode?: string;
    paymentMethod?: string;
    discountApplied?: boolean;
    user?: Array<string>;
    createdBy?: string;
    cancelledByList?: Array<string>;
    cancelledOn?: Date;
    ratePlanCodes?: Array<string>;
    sourceCodes?: Array<string>;
    marketCodes?: Array<string>;
    excludeBlockReservations?: boolean;
    blockName?: string;
    blockIds?: Array<string>;
    blockCodes?: Array<string>;
    customReference?: string;
    recordLocator?: string;
    orderBy?: Array<GetExternalSystemReservationsOrderByEnum>;
    sortOrder?: Set<GetExternalSystemReservationsSortOrderEnum>;
    roomAssignedOnly?: boolean;
    roomUnassignedOnly?: boolean;
    roomId?: string;
    roomType?: Array<string>;
    roomFeatures?: Array<string>;
    roomSpecials?: Array<string>;
    roomSmokingPreference?: string;
    roomFloorPreferences?: Array<string>;
    housekeepingRoomStatuses?: Set<GetExternalSystemReservationsHousekeepingRoomStatusesEnum>;
    roomClasses?: Array<string>;
    roomRangeFrom?: string;
    roomRangeTo?: string;
    communication?: string;
    fetchInstructions?: Set<GetExternalSystemReservationsFetchInstructionsEnum>;
    allowPreRegistration?: boolean;
    hasDepositBalance?: boolean;
    hasOpenBalance?: boolean;
    hasOpenFolio?: boolean;
    includeScheduledCheckOut?: boolean;
    linkedOnly?: boolean;
    unlinkedOnly?: boolean;
    actualArrivals?: boolean;
    actualDepartures?: boolean;
    complimentaryReservations?: boolean;
    dayOfArrivalCancels?: boolean;
    dayUse?: boolean;
    earlyDepartures?: boolean;
    expectedArrivals?: boolean;
    expectedDepartures?: boolean;
    extendedStays?: boolean;
    houseUseReservations?: boolean;
    stayovers?: boolean;
    stayDate?: Date;
    roomRoutingId?: string;
    excludePseudoRoomReservations?: boolean;
    excludeReservationIds?: Array<string>;
    excludeVIPStatusCodes?: Array<string>;
    excludeSpecials?: Array<string>;
    excludeFloorPreferences?: Array<string>;
    excludeAdvanceCheckedIn?: boolean;
    playerId?: string;
    gamingBalanceFrom?: number;
    gamingBalanceTo?: number;
    compAccountingBalanceFrom?: number;
    compAccountingBalanceTo?: number;
    searchTypes?: Set<GetExternalSystemReservationsSearchTypesEnum>;
    reservationStatuses?: Set<GetExternalSystemReservationsReservationStatusesEnum>;
    transportationCodes?: Array<string>;
    roomReadyStatuses?: Set<GetExternalSystemReservationsRoomReadyStatusesEnum>;
    checkoutMessageReceived?: boolean;
    optedForCommunication?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelReservationsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    discrepancy?: GetHotelReservationsDiscrepancyEnum;
    recentlyAccessed?: boolean;
    limit?: number;
    offset?: number;
    searchType?: GetHotelReservationsSearchTypeEnum;
    text?: string;
    reservationIdList?: Array<string>;
    confirmationNumberList?: Array<string>;
    cancellationNumberList?: Array<string>;
    externalReferenceIds?: Array<string>;
    externalSystemCodes?: Array<string>;
    arrivalEndDate?: Date;
    arrivalStartDate?: Date;
    departureEndDate?: Date;
    departureStartDate?: Date;
    stayOnStartDate?: Date;
    createdOnStartDate?: Date;
    expectedArrivalEndTime?: string;
    expectedArrivalStartTime?: string;
    depositDueEndDate?: Date;
    depositDueStartDate?: Date;
    expectedReturnEndTime?: string;
    expectedReturnStartTime?: string;
    companyNames?: Array<string>;
    sourceNames?: Array<string>;
    travelAgentNames?: Array<string>;
    groupNames?: Array<string>;
    travelAgentIds?: Array<string>;
    companyIds?: Array<string>;
    sourceIds?: Array<string>;
    contactIds?: Array<string>;
    groupIds?: Array<string>;
    billingContactIds?: Array<string>;
    profileId?: string;
    membershipCardNumber?: string;
    membershipLevels?: Array<string>;
    membershipTypes?: Array<string>;
    surname?: string;
    givenName?: string;
    fromName?: string;
    toName?: string;
    anyVIPStatus?: boolean;
    vipCodes?: Array<string>;
    guaranteeCode?: string;
    paymentMethod?: string;
    discountApplied?: boolean;
    user?: Array<string>;
    createdBy?: string;
    cancelledByList?: Array<string>;
    cancelledOn?: Date;
    ratePlanCodes?: Array<string>;
    sourceCodes?: Array<string>;
    marketCodes?: Array<string>;
    excludeBlockReservations?: boolean;
    blockCriteriaHotelCode?: string;
    blockName?: string;
    blockIds?: Array<string>;
    blockCodes?: Array<string>;
    customReference?: string;
    recordLocator?: string;
    orderBy?: Array<GetHotelReservationsOrderByEnum>;
    sortOrder?: Set<GetHotelReservationsSortOrderEnum>;
    roomAssignedOnly?: boolean;
    roomUnassignedOnly?: boolean;
    roomId?: string;
    roomType?: Array<string>;
    roomFeatures?: Array<string>;
    roomSpecials?: Array<string>;
    roomSmokingPreference?: string;
    roomFloorPreferences?: Array<string>;
    housekeepingRoomStatuses?: Set<GetHotelReservationsHousekeepingRoomStatusesEnum>;
    roomClasses?: Array<string>;
    roomRangeFrom?: string;
    roomRangeTo?: string;
    communication?: string;
    fetchInstructions?: Set<GetHotelReservationsFetchInstructionsEnum>;
    allowedReservationActions?: Set<GetHotelReservationsAllowedReservationActionsEnum>;
    allowPreRegistration?: boolean;
    excludeNoPost?: boolean;
    excludePMRooms?: boolean;
    hasDepositBalance?: boolean;
    hasOpenBalance?: boolean;
    hasOpenFolio?: boolean;
    includeScheduledCheckOut?: boolean;
    linkedOnly?: boolean;
    unlinkedOnly?: boolean;
    actualArrivals?: boolean;
    actualDepartures?: boolean;
    complimentaryReservations?: boolean;
    dayOfArrivalCancels?: boolean;
    dayUse?: boolean;
    earlyDepartures?: boolean;
    expectedArrivals?: boolean;
    expectedDepartures?: boolean;
    extendedStays?: boolean;
    houseUseReservations?: boolean;
    stayovers?: boolean;
    stayDate?: Date;
    roomRoutingId?: string;
    periodicFolio?: GetHotelReservationsPeriodicFolioEnum;
    folioSettlementTypes?: string;
    defaultDays?: boolean;
    excludePseudoRoomReservations?: boolean;
    excludeReservationIds?: Array<string>;
    excludeVIPStatusCodes?: Array<string>;
    excludeSpecials?: Array<string>;
    excludeFloorPreferences?: Array<string>;
    excludeAdvanceCheckedIn?: boolean;
    playerId?: string;
    gamingBalanceFrom?: number;
    gamingBalanceTo?: number;
    compAccountingBalanceFrom?: number;
    compAccountingBalanceTo?: number;
    searchTypes?: Set<GetHotelReservationsSearchTypesEnum>;
    reservationStatuses?: Set<GetHotelReservationsReservationStatusesEnum>;
    transportationCodes?: Array<string>;
    roomReadyStatuses?: Set<GetHotelReservationsRoomReadyStatusesEnum>;
    checkoutMessageReceived?: boolean;
    optedForCommunication?: boolean;
    swapShiftRoomReservationId?: string;
    roomSmokingPreferences?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPaymentMethodsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeAmounts?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRateInfoRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    currencyCode?: string;
    summaryInfo?: boolean;
    criteriaStartDate?: Date;
    criteriaEndDate?: Date;
    adults?: number;
    children?: number;
    childAge?: Array<number>;
    bucket1Count?: number;
    bucket2Count?: number;
    bucket3Count?: number;
    bucket4Count?: number;
    bucket5Count?: number;
    detailDate?: Date;
    blockId?: string;
    blockIdType?: string;
    id?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    ratePlanCode?: string;
    effectiveRateEnd?: Array<Date>;
    effectiveRateStart?: Array<Date>;
    roomType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetReservationFetchInstructionsEnum>;
    allowedActions?: Set<GetReservationAllowedActionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationActivityLogRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    activityGroup?: string;
    activityType?: string;
    fromDate?: Date;
    toDate?: Date;
    searchText?: string;
    userByIdsUserId?: Array<number>;
    userForIdsUserId?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationByExtIdRequest {
    reservationExternalId?: string;
    externalSystemCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetReservationByExtIdFetchInstructionsEnum>;
    allowedActions?: Set<GetReservationByExtIdAllowedActionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationPoliciesRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchDepositPolicies?: boolean;
    fetchCancellationPolicies?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationUpsellInfoRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    recentlyAccessed?: boolean;
    limit?: number;
    offset?: number;
    searchType?: GetReservationsSearchTypeEnum;
    hotelIds?: Array<string>;
    text?: string;
    reservationIdList?: Array<string>;
    confirmationNumberList?: Array<string>;
    cancellationNumberList?: Array<string>;
    externalReferenceIds?: Array<string>;
    externalSystemCodes?: Array<string>;
    arrivalEndDate?: Date;
    arrivalStartDate?: Date;
    departureEndDate?: Date;
    departureStartDate?: Date;
    expectedArrivalStartTime?: string;
    expectedArrivalEndTime?: string;
    expectedReturnEndTime?: string;
    expectedReturnStartTime?: string;
    companyNames?: Array<string>;
    travelAgentIds?: Array<string>;
    companyIds?: Array<string>;
    sourceIds?: Array<string>;
    contactIds?: Array<string>;
    groupIds?: Array<string>;
    billingContactIds?: Array<string>;
    profileIds?: Array<string>;
    membershipCardNumber?: string;
    membershipLevels?: Array<string>;
    membershipTypes?: Array<string>;
    surname?: string;
    givenName?: string;
    anyVIPStatus?: boolean;
    vipCodes?: Array<string>;
    guaranteeCode?: string;
    paymentMethod?: string;
    discountApplied?: boolean;
    user?: Array<string>;
    createdBy?: string;
    cancelledByList?: Array<string>;
    cancelledOn?: Date;
    ratePlanCodes?: Array<string>;
    sourceCodes?: Array<string>;
    marketCodes?: Array<string>;
    excludeBlockReservations?: boolean;
    blockName?: string;
    blockIds?: Array<string>;
    blockCodes?: Array<string>;
    customReference?: string;
    recordLocator?: string;
    orderBy?: Array<GetReservationsOrderByEnum>;
    sortOrder?: Set<GetReservationsSortOrderEnum>;
    roomAssignedOnly?: boolean;
    roomUnassignedOnly?: boolean;
    roomId?: string;
    roomType?: Array<string>;
    roomFeatures?: Array<string>;
    roomSpecials?: Array<string>;
    roomSmokingPreference?: string;
    roomFloorPreferences?: Array<string>;
    housekeepingRoomStatuses?: Set<GetReservationsHousekeepingRoomStatusesEnum>;
    roomClasses?: Array<string>;
    roomRangeFrom?: string;
    roomRangeTo?: string;
    communication?: string;
    fetchInstructions?: Set<GetReservationsFetchInstructionsEnum>;
    allowPreRegistration?: boolean;
    hasDepositBalance?: boolean;
    hasOpenBalance?: boolean;
    hasOpenFolio?: boolean;
    includeScheduledCheckOut?: boolean;
    linkedOnly?: boolean;
    unlinkedOnly?: boolean;
    actualArrivals?: boolean;
    actualDepartures?: boolean;
    complimentaryReservations?: boolean;
    dayOfArrivalCancels?: boolean;
    dayUse?: boolean;
    earlyDepartures?: boolean;
    expectedArrivals?: boolean;
    expectedDepartures?: boolean;
    extendedStays?: boolean;
    houseUseReservations?: boolean;
    stayovers?: boolean;
    stayDate?: Date;
    roomRoutingId?: string;
    excludePseudoRoomReservations?: boolean;
    excludeReservationIds?: Array<string>;
    excludeVIPStatusCodes?: Array<string>;
    excludeSpecials?: Array<string>;
    excludeFloorPreferences?: Array<string>;
    excludeAdvanceCheckedIn?: boolean;
    playerId?: string;
    gamingBalanceFrom?: number;
    gamingBalanceTo?: number;
    compAccountingBalanceFrom?: number;
    compAccountingBalanceTo?: number;
    searchTypes?: Set<GetReservationsSearchTypesEnum>;
    reservationStatuses?: Set<GetReservationsReservationStatusesEnum>;
    transportationCodes?: Array<string>;
    roomReadyStatuses?: Set<GetReservationsRoomReadyStatusesEnum>;
    checkoutMessageReceived?: boolean;
    optedForCommunication?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCallOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    registerCall?: PostCallRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCancelReservationOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cancelReservation?: PostCancelReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCombineShareReservationsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    combineShareReservations?: PostCombineShareReservationsByExtIdRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCombineShareReservationsByExtIdOperationRequest {
    reservationExternalId?: string;
    externalSystemCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    combineShareReservations?: PostCombineShareReservationsByExtIdRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostDepositPolicyOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationDepositPolicyCriteria?: PostDepositPolicyRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPreCheckInReservationOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    preCheckInReservation?: PostPreCheckInReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostReservationOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createReservation?: PostReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostReservationByBlockOperationRequest {
    blockId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createReservation?: PostReservationByBlockRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostReservationLinksOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    linkReservationsCriteria?: PostReservationLinksRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostReservationLinksByChainOperationRequest {
    reservationId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    linkReservationsCriteria?: PostReservationLinksByChainRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostUpsellReservationOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    upsellReservation?: PostUpsellReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutPaymentMethodsOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationPaymentMethods?: PutPaymentMethodsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutReinstateReservationOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reinstateReservation?: PutReinstateReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutReservationOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeReservation?: PutReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutValidateReservationChangesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    validateReservationChanges?: PutValidateReservationChangesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ReservationApi extends runtime.BaseAPI {

    /**
     * This will cancel or rather revert the pre-checkin action for a guest\'s reservation. The reservation will return to DUEIN status. <p><strong>OperationId:</strong>deletePreCheckInReservation</p>
     * Revert a PreCheckIn Reservation
     */
    async deletePreCheckInReservationRaw(requestParameters: DeletePreCheckInReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.resvIDExtension !== undefined) {
            queryParameters['resvIDExtension'] = requestParameters.resvIDExtension;
        }

        if (requestParameters.arrivalTime !== undefined) {
            queryParameters['arrivalTime'] = requestParameters.arrivalTime;
        }

        if (requestParameters.roomNumber !== undefined) {
            queryParameters['roomNumber'] = requestParameters.roomNumber;
        }

        if (requestParameters.guestPreferredCurrency !== undefined) {
            queryParameters['guestPreferredCurrency'] = requestParameters.guestPreferredCurrency;
        }

        if (requestParameters.allowMobileViewFolio !== undefined) {
            queryParameters['allowMobileViewFolio'] = requestParameters.allowMobileViewFolio;
        }

        if (requestParameters.paymentMethodDescription) {
            queryParameters['paymentMethodDescription'] = requestParameters.paymentMethodDescription;
        }

        if (requestParameters.paymentMethodFolioView) {
            queryParameters['paymentMethodFolioView'] = requestParameters.paymentMethodFolioView;
        }

        if (requestParameters.paymentMethod) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }

        if (requestParameters.attachCreditCardToProfile !== undefined) {
            queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
        }

        if (requestParameters.cardHolderName !== undefined) {
            queryParameters['cardHolderName'] = requestParameters.cardHolderName;
        }

        if (requestParameters.cardNumber !== undefined) {
            queryParameters['cardNumber'] = requestParameters.cardNumber;
        }

        if (requestParameters.cardNumberLast4Digits !== undefined) {
            queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
        }

        if (requestParameters.cardNumberMasked !== undefined) {
            queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
        }

        if (requestParameters.cardOrToken !== undefined) {
            queryParameters['cardOrToken'] = requestParameters.cardOrToken;
        }

        if (requestParameters.cardType !== undefined) {
            queryParameters['cardType'] = requestParameters.cardType;
        }

        if (requestParameters.expirationDate !== undefined) {
            queryParameters['expirationDate'] = (requestParameters.expirationDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.expirationDateExpired !== undefined) {
            queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
        }

        if (requestParameters.expirationDateMasked !== undefined) {
            queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
        }

        if (requestParameters.processing !== undefined) {
            queryParameters['processing'] = requestParameters.processing;
        }

        if (requestParameters.swiped !== undefined) {
            queryParameters['swiped'] = requestParameters.swiped;
        }

        if (requestParameters.userDefinedCardType !== undefined) {
            queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
        }

        if (requestParameters.cardId !== undefined) {
            queryParameters['cardId'] = requestParameters.cardId;
        }

        if (requestParameters.cardIdIDExtension !== undefined) {
            queryParameters['cardIdIDExtension'] = requestParameters.cardIdIDExtension;
        }

        if (requestParameters.cardIdIDContext !== undefined) {
            queryParameters['cardIdIDContext'] = requestParameters.cardIdIDContext;
        }

        if (requestParameters.cardIdType !== undefined) {
            queryParameters['cardIdType'] = requestParameters.cardIdType;
        }

        if (requestParameters.currentAuthorizedAmount !== undefined) {
            queryParameters['currentAuthorizedAmount'] = requestParameters.currentAuthorizedAmount;
        }

        if (requestParameters.authorizedAmountCurrencyCode !== undefined) {
            queryParameters['authorizedAmountCurrencyCode'] = requestParameters.authorizedAmountCurrencyCode;
        }

        if (requestParameters.approvalAmountNeeded !== undefined) {
            queryParameters['approvalAmountNeeded'] = requestParameters.approvalAmountNeeded;
        }

        if (requestParameters.approvalAmountCurrencyCode !== undefined) {
            queryParameters['approvalAmountCurrencyCode'] = requestParameters.approvalAmountCurrencyCode;
        }

        if (requestParameters.balanceAmount !== undefined) {
            queryParameters['balanceAmount'] = requestParameters.balanceAmount;
        }

        if (requestParameters.balanceCurrencyCode !== undefined) {
            queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
        }

        if (requestParameters.authorizationRuleCode !== undefined) {
            queryParameters['authorizationRuleCode'] = requestParameters.authorizationRuleCode;
        }

        if (requestParameters.authorizationRuleAmount !== undefined) {
            queryParameters['authorizationRuleAmount'] = requestParameters.authorizationRuleAmount;
        }

        if (requestParameters.authorizationRuleCurrencyCode !== undefined) {
            queryParameters['authorizationRuleCurrencyCode'] = requestParameters.authorizationRuleCurrencyCode;
        }

        if (requestParameters.authorizationRulePercent !== undefined) {
            queryParameters['authorizationRulePercent'] = requestParameters.authorizationRulePercent;
        }

        if (requestParameters.emailFolio !== undefined) {
            queryParameters['emailFolio'] = requestParameters.emailFolio;
        }

        if (requestParameters.emailFolioID !== undefined) {
            queryParameters['emailFolioID'] = requestParameters.emailFolioID;
        }

        if (requestParameters.emailFolioIDExtension !== undefined) {
            queryParameters['emailFolioIDExtension'] = requestParameters.emailFolioIDExtension;
        }

        if (requestParameters.emailFolioIDContext !== undefined) {
            queryParameters['emailFolioIDContext'] = requestParameters.emailFolioIDContext;
        }

        if (requestParameters.emailFolioIDType !== undefined) {
            queryParameters['emailFolioIDType'] = requestParameters.emailFolioIDType;
        }

        if (requestParameters.emailFolioCreateDateTime !== undefined) {
            queryParameters['emailFolioCreateDateTime'] = requestParameters.emailFolioCreateDateTime;
        }

        if (requestParameters.emailFolioCreatorID !== undefined) {
            queryParameters['emailFolioCreatorID'] = requestParameters.emailFolioCreatorID;
        }

        if (requestParameters.emailFolioEmailAddress !== undefined) {
            queryParameters['emailFolioEmailAddress'] = requestParameters.emailFolioEmailAddress;
        }

        if (requestParameters.emailFolioEmailFormat !== undefined) {
            queryParameters['emailFolioEmailFormat'] = requestParameters.emailFolioEmailFormat;
        }

        if (requestParameters.emailFolioLastModifierID !== undefined) {
            queryParameters['emailFolioLastModifierID'] = requestParameters.emailFolioLastModifierID;
        }

        if (requestParameters.emailFolioLastModifyDateTime !== undefined) {
            queryParameters['emailFolioLastModifyDateTime'] = requestParameters.emailFolioLastModifyDateTime;
        }

        if (requestParameters.emailFolioOrderSequence !== undefined) {
            queryParameters['emailFolioOrderSequence'] = requestParameters.emailFolioOrderSequence;
        }

        if (requestParameters.emailFolioPrimaryInd !== undefined) {
            queryParameters['emailFolioPrimaryInd'] = requestParameters.emailFolioPrimaryInd;
        }

        if (requestParameters.emailFolioPurgeDate !== undefined) {
            queryParameters['emailFolioPurgeDate'] = (requestParameters.emailFolioPurgeDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.emailFolioType !== undefined) {
            queryParameters['emailFolioType'] = requestParameters.emailFolioType;
        }

        if (requestParameters.emailFolioTypeDescription !== undefined) {
            queryParameters['emailFolioTypeDescription'] = requestParameters.emailFolioTypeDescription;
        }

        if (requestParameters.arrivalCarrierCode !== undefined) {
            queryParameters['arrivalCarrierCode'] = requestParameters.arrivalCarrierCode;
        }

        if (requestParameters.arrivalDateTime !== undefined) {
            queryParameters['arrivalDateTime'] = requestParameters.arrivalDateTime;
        }

        if (requestParameters.arrivalStationCode !== undefined) {
            queryParameters['arrivalStationCode'] = requestParameters.arrivalStationCode;
        }

        if (requestParameters.arrivalTransportCode !== undefined) {
            queryParameters['arrivalTransportCode'] = requestParameters.arrivalTransportCode;
        }

        if (requestParameters.arrivalTransportationReqd !== undefined) {
            queryParameters['arrivalTransportationReqd'] = requestParameters.arrivalTransportationReqd;
        }

        if (requestParameters.arrivalType !== undefined) {
            queryParameters['arrivalType'] = requestParameters.arrivalType;
        }

        if (requestParameters.arrivalComments !== undefined) {
            queryParameters['arrivalComments'] = requestParameters.arrivalComments;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/preCheckIn`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This will cancel or rather revert the pre-checkin action for a guest\'s reservation. The reservation will return to DUEIN status. <p><strong>OperationId:</strong>deletePreCheckInReservation</p>
     * Revert a PreCheckIn Reservation
     */
    async deletePreCheckInReservation(requestParameters: DeletePreCheckInReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deletePreCheckInReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinks</p>
     * Remove Reservation Links
     */
    async deleteReservationLinksRaw(requestParameters: DeleteReservationLinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/linkedReservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinks</p>
     * Remove Reservation Links
     */
    async deleteReservationLinks(requestParameters: DeleteReservationLinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteReservationLinksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getExternalSystemReservations</p>
     * Get Reservations for a hotel
     */
    async getExternalSystemReservationsRaw(requestParameters: GetExternalSystemReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.externalReferenceList) {
            queryParameters['externalReferenceList'] = requestParameters.externalReferenceList;
        }

        if (requestParameters.recentlyAccessed !== undefined) {
            queryParameters['recentlyAccessed'] = requestParameters.recentlyAccessed;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.searchType !== undefined) {
            queryParameters['searchType'] = requestParameters.searchType;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.text !== undefined) {
            queryParameters['text'] = requestParameters.text;
        }

        if (requestParameters.arrivalEndDate !== undefined) {
            queryParameters['arrivalEndDate'] = (requestParameters.arrivalEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.arrivalStartDate !== undefined) {
            queryParameters['arrivalStartDate'] = (requestParameters.arrivalStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.departureEndDate !== undefined) {
            queryParameters['departureEndDate'] = (requestParameters.departureEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.departureStartDate !== undefined) {
            queryParameters['departureStartDate'] = (requestParameters.departureStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.expectedArrivalStartTime !== undefined) {
            queryParameters['expectedArrivalStartTime'] = requestParameters.expectedArrivalStartTime;
        }

        if (requestParameters.expectedArrivalEndTime !== undefined) {
            queryParameters['expectedArrivalEndTime'] = requestParameters.expectedArrivalEndTime;
        }

        if (requestParameters.expectedReturnEndTime !== undefined) {
            queryParameters['expectedReturnEndTime'] = requestParameters.expectedReturnEndTime;
        }

        if (requestParameters.expectedReturnStartTime !== undefined) {
            queryParameters['expectedReturnStartTime'] = requestParameters.expectedReturnStartTime;
        }

        if (requestParameters.companyNames) {
            queryParameters['companyNames'] = requestParameters.companyNames;
        }

        if (requestParameters.travelAgentIds) {
            queryParameters['travelAgentIds'] = requestParameters.travelAgentIds;
        }

        if (requestParameters.companyIds) {
            queryParameters['companyIds'] = requestParameters.companyIds;
        }

        if (requestParameters.sourceIds) {
            queryParameters['sourceIds'] = requestParameters.sourceIds;
        }

        if (requestParameters.contactIds) {
            queryParameters['contactIds'] = requestParameters.contactIds;
        }

        if (requestParameters.groupIds) {
            queryParameters['groupIds'] = requestParameters.groupIds;
        }

        if (requestParameters.billingContactIds) {
            queryParameters['billingContactIds'] = requestParameters.billingContactIds;
        }

        if (requestParameters.profileIds) {
            queryParameters['profileIds'] = requestParameters.profileIds;
        }

        if (requestParameters.membershipCardNumber !== undefined) {
            queryParameters['membershipCardNumber'] = requestParameters.membershipCardNumber;
        }

        if (requestParameters.membershipLevels) {
            queryParameters['membershipLevels'] = requestParameters.membershipLevels;
        }

        if (requestParameters.membershipTypes) {
            queryParameters['membershipTypes'] = requestParameters.membershipTypes;
        }

        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.anyVIPStatus !== undefined) {
            queryParameters['anyVIPStatus'] = requestParameters.anyVIPStatus;
        }

        if (requestParameters.vipCodes) {
            queryParameters['vipCodes'] = requestParameters.vipCodes;
        }

        if (requestParameters.guaranteeCode !== undefined) {
            queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
        }

        if (requestParameters.paymentMethod !== undefined) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }

        if (requestParameters.discountApplied !== undefined) {
            queryParameters['discountApplied'] = requestParameters.discountApplied;
        }

        if (requestParameters.user) {
            queryParameters['user'] = requestParameters.user;
        }

        if (requestParameters.createdBy !== undefined) {
            queryParameters['createdBy'] = requestParameters.createdBy;
        }

        if (requestParameters.cancelledByList) {
            queryParameters['cancelledByList'] = requestParameters.cancelledByList;
        }

        if (requestParameters.cancelledOn !== undefined) {
            queryParameters['cancelledOn'] = (requestParameters.cancelledOn as any).toISOString().substr(0,10);
        }

        if (requestParameters.ratePlanCodes) {
            queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
        }

        if (requestParameters.sourceCodes) {
            queryParameters['sourceCodes'] = requestParameters.sourceCodes;
        }

        if (requestParameters.marketCodes) {
            queryParameters['marketCodes'] = requestParameters.marketCodes;
        }

        if (requestParameters.excludeBlockReservations !== undefined) {
            queryParameters['excludeBlockReservations'] = requestParameters.excludeBlockReservations;
        }

        if (requestParameters.blockName !== undefined) {
            queryParameters['blockName'] = requestParameters.blockName;
        }

        if (requestParameters.blockIds) {
            queryParameters['blockIds'] = requestParameters.blockIds;
        }

        if (requestParameters.blockCodes) {
            queryParameters['blockCodes'] = requestParameters.blockCodes;
        }

        if (requestParameters.customReference !== undefined) {
            queryParameters['customReference'] = requestParameters.customReference;
        }

        if (requestParameters.recordLocator !== undefined) {
            queryParameters['recordLocator'] = requestParameters.recordLocator;
        }

        if (requestParameters.orderBy) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.sortOrder) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.roomAssignedOnly !== undefined) {
            queryParameters['roomAssignedOnly'] = requestParameters.roomAssignedOnly;
        }

        if (requestParameters.roomUnassignedOnly !== undefined) {
            queryParameters['roomUnassignedOnly'] = requestParameters.roomUnassignedOnly;
        }

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.roomFeatures) {
            queryParameters['roomFeatures'] = requestParameters.roomFeatures;
        }

        if (requestParameters.roomSpecials) {
            queryParameters['roomSpecials'] = requestParameters.roomSpecials;
        }

        if (requestParameters.roomSmokingPreference !== undefined) {
            queryParameters['roomSmokingPreference'] = requestParameters.roomSmokingPreference;
        }

        if (requestParameters.roomFloorPreferences) {
            queryParameters['roomFloorPreferences'] = requestParameters.roomFloorPreferences;
        }

        if (requestParameters.housekeepingRoomStatuses) {
            queryParameters['housekeepingRoomStatuses'] = requestParameters.housekeepingRoomStatuses;
        }

        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }

        if (requestParameters.roomRangeFrom !== undefined) {
            queryParameters['roomRangeFrom'] = requestParameters.roomRangeFrom;
        }

        if (requestParameters.roomRangeTo !== undefined) {
            queryParameters['roomRangeTo'] = requestParameters.roomRangeTo;
        }

        if (requestParameters.communication !== undefined) {
            queryParameters['communication'] = requestParameters.communication;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.allowPreRegistration !== undefined) {
            queryParameters['allowPreRegistration'] = requestParameters.allowPreRegistration;
        }

        if (requestParameters.hasDepositBalance !== undefined) {
            queryParameters['hasDepositBalance'] = requestParameters.hasDepositBalance;
        }

        if (requestParameters.hasOpenBalance !== undefined) {
            queryParameters['hasOpenBalance'] = requestParameters.hasOpenBalance;
        }

        if (requestParameters.hasOpenFolio !== undefined) {
            queryParameters['hasOpenFolio'] = requestParameters.hasOpenFolio;
        }

        if (requestParameters.includeScheduledCheckOut !== undefined) {
            queryParameters['includeScheduledCheckOut'] = requestParameters.includeScheduledCheckOut;
        }

        if (requestParameters.linkedOnly !== undefined) {
            queryParameters['linkedOnly'] = requestParameters.linkedOnly;
        }

        if (requestParameters.unlinkedOnly !== undefined) {
            queryParameters['unlinkedOnly'] = requestParameters.unlinkedOnly;
        }

        if (requestParameters.actualArrivals !== undefined) {
            queryParameters['actualArrivals'] = requestParameters.actualArrivals;
        }

        if (requestParameters.actualDepartures !== undefined) {
            queryParameters['actualDepartures'] = requestParameters.actualDepartures;
        }

        if (requestParameters.complimentaryReservations !== undefined) {
            queryParameters['complimentaryReservations'] = requestParameters.complimentaryReservations;
        }

        if (requestParameters.dayOfArrivalCancels !== undefined) {
            queryParameters['dayOfArrivalCancels'] = requestParameters.dayOfArrivalCancels;
        }

        if (requestParameters.dayUse !== undefined) {
            queryParameters['dayUse'] = requestParameters.dayUse;
        }

        if (requestParameters.earlyDepartures !== undefined) {
            queryParameters['earlyDepartures'] = requestParameters.earlyDepartures;
        }

        if (requestParameters.expectedArrivals !== undefined) {
            queryParameters['expectedArrivals'] = requestParameters.expectedArrivals;
        }

        if (requestParameters.expectedDepartures !== undefined) {
            queryParameters['expectedDepartures'] = requestParameters.expectedDepartures;
        }

        if (requestParameters.extendedStays !== undefined) {
            queryParameters['extendedStays'] = requestParameters.extendedStays;
        }

        if (requestParameters.houseUseReservations !== undefined) {
            queryParameters['houseUseReservations'] = requestParameters.houseUseReservations;
        }

        if (requestParameters.stayovers !== undefined) {
            queryParameters['stayovers'] = requestParameters.stayovers;
        }

        if (requestParameters.stayDate !== undefined) {
            queryParameters['stayDate'] = (requestParameters.stayDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomRoutingId !== undefined) {
            queryParameters['roomRoutingId'] = requestParameters.roomRoutingId;
        }

        if (requestParameters.excludePseudoRoomReservations !== undefined) {
            queryParameters['excludePseudoRoomReservations'] = requestParameters.excludePseudoRoomReservations;
        }

        if (requestParameters.excludeReservationIds) {
            queryParameters['excludeReservationIds'] = requestParameters.excludeReservationIds;
        }

        if (requestParameters.excludeVIPStatusCodes) {
            queryParameters['excludeVIPStatusCodes'] = requestParameters.excludeVIPStatusCodes;
        }

        if (requestParameters.excludeSpecials) {
            queryParameters['excludeSpecials'] = requestParameters.excludeSpecials;
        }

        if (requestParameters.excludeFloorPreferences) {
            queryParameters['excludeFloorPreferences'] = requestParameters.excludeFloorPreferences;
        }

        if (requestParameters.excludeAdvanceCheckedIn !== undefined) {
            queryParameters['excludeAdvanceCheckedIn'] = requestParameters.excludeAdvanceCheckedIn;
        }

        if (requestParameters.playerId !== undefined) {
            queryParameters['playerId'] = requestParameters.playerId;
        }

        if (requestParameters.gamingBalanceFrom !== undefined) {
            queryParameters['gamingBalanceFrom'] = requestParameters.gamingBalanceFrom;
        }

        if (requestParameters.gamingBalanceTo !== undefined) {
            queryParameters['gamingBalanceTo'] = requestParameters.gamingBalanceTo;
        }

        if (requestParameters.compAccountingBalanceFrom !== undefined) {
            queryParameters['compAccountingBalanceFrom'] = requestParameters.compAccountingBalanceFrom;
        }

        if (requestParameters.compAccountingBalanceTo !== undefined) {
            queryParameters['compAccountingBalanceTo'] = requestParameters.compAccountingBalanceTo;
        }

        if (requestParameters.searchTypes) {
            queryParameters['searchTypes'] = requestParameters.searchTypes;
        }

        if (requestParameters.reservationStatuses) {
            queryParameters['reservationStatuses'] = requestParameters.reservationStatuses;
        }

        if (requestParameters.transportationCodes) {
            queryParameters['transportationCodes'] = requestParameters.transportationCodes;
        }

        if (requestParameters.roomReadyStatuses) {
            queryParameters['roomReadyStatuses'] = requestParameters.roomReadyStatuses;
        }

        if (requestParameters.checkoutMessageReceived !== undefined) {
            queryParameters['checkoutMessageReceived'] = requestParameters.checkoutMessageReceived;
        }

        if (requestParameters.optedForCommunication !== undefined) {
            queryParameters['optedForCommunication'] = requestParameters.optedForCommunication;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/reservations`.replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationsDetailsFromJSON(jsonValue));
    }

    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getExternalSystemReservations</p>
     * Get Reservations for a hotel
     */
    async getExternalSystemReservations(requestParameters: GetExternalSystemReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationsDetails> {
        const response = await this.getExternalSystemReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to search reservations in a hotel, filtering by whether they are Day Use, Due In, Checked In, Due Out, Checked Out, Cancelled, No Show and Complimentary or any other of the large selection of search criteria. It also serves as an entry way for changing existing reservation information, canceling reservations, checking in guests, canceling check ins, etc. You can use further query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data.<p><strong>OperationId:</strong>getHotelReservations</p>
     * Get and search for reservations in a hotel
     */
    async getHotelReservationsRaw(requestParameters: GetHotelReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.discrepancy !== undefined) {
            queryParameters['discrepancy'] = requestParameters.discrepancy;
        }

        if (requestParameters.recentlyAccessed !== undefined) {
            queryParameters['recentlyAccessed'] = requestParameters.recentlyAccessed;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.searchType !== undefined) {
            queryParameters['searchType'] = requestParameters.searchType;
        }

        if (requestParameters.text !== undefined) {
            queryParameters['text'] = requestParameters.text;
        }

        if (requestParameters.reservationIdList) {
            queryParameters['reservationIdList'] = requestParameters.reservationIdList;
        }

        if (requestParameters.confirmationNumberList) {
            queryParameters['confirmationNumberList'] = requestParameters.confirmationNumberList;
        }

        if (requestParameters.cancellationNumberList) {
            queryParameters['cancellationNumberList'] = requestParameters.cancellationNumberList;
        }

        if (requestParameters.externalReferenceIds) {
            queryParameters['externalReferenceIds'] = requestParameters.externalReferenceIds;
        }

        if (requestParameters.externalSystemCodes) {
            queryParameters['externalSystemCodes'] = requestParameters.externalSystemCodes;
        }

        if (requestParameters.arrivalEndDate !== undefined) {
            queryParameters['arrivalEndDate'] = (requestParameters.arrivalEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.arrivalStartDate !== undefined) {
            queryParameters['arrivalStartDate'] = (requestParameters.arrivalStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.departureEndDate !== undefined) {
            queryParameters['departureEndDate'] = (requestParameters.departureEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.departureStartDate !== undefined) {
            queryParameters['departureStartDate'] = (requestParameters.departureStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.stayOnStartDate !== undefined) {
            queryParameters['stayOnStartDate'] = (requestParameters.stayOnStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.createdOnStartDate !== undefined) {
            queryParameters['createdOnStartDate'] = (requestParameters.createdOnStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.expectedArrivalEndTime !== undefined) {
            queryParameters['expectedArrivalEndTime'] = requestParameters.expectedArrivalEndTime;
        }

        if (requestParameters.expectedArrivalStartTime !== undefined) {
            queryParameters['expectedArrivalStartTime'] = requestParameters.expectedArrivalStartTime;
        }

        if (requestParameters.depositDueEndDate !== undefined) {
            queryParameters['depositDueEndDate'] = (requestParameters.depositDueEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.depositDueStartDate !== undefined) {
            queryParameters['depositDueStartDate'] = (requestParameters.depositDueStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.expectedReturnEndTime !== undefined) {
            queryParameters['expectedReturnEndTime'] = requestParameters.expectedReturnEndTime;
        }

        if (requestParameters.expectedReturnStartTime !== undefined) {
            queryParameters['expectedReturnStartTime'] = requestParameters.expectedReturnStartTime;
        }

        if (requestParameters.companyNames) {
            queryParameters['companyNames'] = requestParameters.companyNames;
        }

        if (requestParameters.sourceNames) {
            queryParameters['sourceNames'] = requestParameters.sourceNames;
        }

        if (requestParameters.travelAgentNames) {
            queryParameters['travelAgentNames'] = requestParameters.travelAgentNames;
        }

        if (requestParameters.groupNames) {
            queryParameters['groupNames'] = requestParameters.groupNames;
        }

        if (requestParameters.travelAgentIds) {
            queryParameters['travelAgentIds'] = requestParameters.travelAgentIds;
        }

        if (requestParameters.companyIds) {
            queryParameters['companyIds'] = requestParameters.companyIds;
        }

        if (requestParameters.sourceIds) {
            queryParameters['sourceIds'] = requestParameters.sourceIds;
        }

        if (requestParameters.contactIds) {
            queryParameters['contactIds'] = requestParameters.contactIds;
        }

        if (requestParameters.groupIds) {
            queryParameters['groupIds'] = requestParameters.groupIds;
        }

        if (requestParameters.billingContactIds) {
            queryParameters['billingContactIds'] = requestParameters.billingContactIds;
        }

        if (requestParameters.profileId !== undefined) {
            queryParameters['profileId'] = requestParameters.profileId;
        }

        if (requestParameters.membershipCardNumber !== undefined) {
            queryParameters['membershipCardNumber'] = requestParameters.membershipCardNumber;
        }

        if (requestParameters.membershipLevels) {
            queryParameters['membershipLevels'] = requestParameters.membershipLevels;
        }

        if (requestParameters.membershipTypes) {
            queryParameters['membershipTypes'] = requestParameters.membershipTypes;
        }

        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.fromName !== undefined) {
            queryParameters['fromName'] = requestParameters.fromName;
        }

        if (requestParameters.toName !== undefined) {
            queryParameters['toName'] = requestParameters.toName;
        }

        if (requestParameters.anyVIPStatus !== undefined) {
            queryParameters['anyVIPStatus'] = requestParameters.anyVIPStatus;
        }

        if (requestParameters.vipCodes) {
            queryParameters['vipCodes'] = requestParameters.vipCodes;
        }

        if (requestParameters.guaranteeCode !== undefined) {
            queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
        }

        if (requestParameters.paymentMethod !== undefined) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }

        if (requestParameters.discountApplied !== undefined) {
            queryParameters['discountApplied'] = requestParameters.discountApplied;
        }

        if (requestParameters.user) {
            queryParameters['user'] = requestParameters.user;
        }

        if (requestParameters.createdBy !== undefined) {
            queryParameters['createdBy'] = requestParameters.createdBy;
        }

        if (requestParameters.cancelledByList) {
            queryParameters['cancelledByList'] = requestParameters.cancelledByList;
        }

        if (requestParameters.cancelledOn !== undefined) {
            queryParameters['cancelledOn'] = (requestParameters.cancelledOn as any).toISOString().substr(0,10);
        }

        if (requestParameters.ratePlanCodes) {
            queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
        }

        if (requestParameters.sourceCodes) {
            queryParameters['sourceCodes'] = requestParameters.sourceCodes;
        }

        if (requestParameters.marketCodes) {
            queryParameters['marketCodes'] = requestParameters.marketCodes;
        }

        if (requestParameters.excludeBlockReservations !== undefined) {
            queryParameters['excludeBlockReservations'] = requestParameters.excludeBlockReservations;
        }

        if (requestParameters.blockCriteriaHotelCode !== undefined) {
            queryParameters['blockCriteriaHotelCode'] = requestParameters.blockCriteriaHotelCode;
        }

        if (requestParameters.blockName !== undefined) {
            queryParameters['blockName'] = requestParameters.blockName;
        }

        if (requestParameters.blockIds) {
            queryParameters['blockIds'] = requestParameters.blockIds;
        }

        if (requestParameters.blockCodes) {
            queryParameters['blockCodes'] = requestParameters.blockCodes;
        }

        if (requestParameters.customReference !== undefined) {
            queryParameters['customReference'] = requestParameters.customReference;
        }

        if (requestParameters.recordLocator !== undefined) {
            queryParameters['recordLocator'] = requestParameters.recordLocator;
        }

        if (requestParameters.orderBy) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.sortOrder) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.roomAssignedOnly !== undefined) {
            queryParameters['roomAssignedOnly'] = requestParameters.roomAssignedOnly;
        }

        if (requestParameters.roomUnassignedOnly !== undefined) {
            queryParameters['roomUnassignedOnly'] = requestParameters.roomUnassignedOnly;
        }

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.roomFeatures) {
            queryParameters['roomFeatures'] = requestParameters.roomFeatures;
        }

        if (requestParameters.roomSpecials) {
            queryParameters['roomSpecials'] = requestParameters.roomSpecials;
        }

        if (requestParameters.roomSmokingPreference !== undefined) {
            queryParameters['roomSmokingPreference'] = requestParameters.roomSmokingPreference;
        }

        if (requestParameters.roomFloorPreferences) {
            queryParameters['roomFloorPreferences'] = requestParameters.roomFloorPreferences;
        }

        if (requestParameters.housekeepingRoomStatuses) {
            queryParameters['housekeepingRoomStatuses'] = requestParameters.housekeepingRoomStatuses;
        }

        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }

        if (requestParameters.roomRangeFrom !== undefined) {
            queryParameters['roomRangeFrom'] = requestParameters.roomRangeFrom;
        }

        if (requestParameters.roomRangeTo !== undefined) {
            queryParameters['roomRangeTo'] = requestParameters.roomRangeTo;
        }

        if (requestParameters.communication !== undefined) {
            queryParameters['communication'] = requestParameters.communication;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.allowedReservationActions) {
            queryParameters['allowedReservationActions'] = requestParameters.allowedReservationActions;
        }

        if (requestParameters.allowPreRegistration !== undefined) {
            queryParameters['allowPreRegistration'] = requestParameters.allowPreRegistration;
        }

        if (requestParameters.excludeNoPost !== undefined) {
            queryParameters['excludeNoPost'] = requestParameters.excludeNoPost;
        }

        if (requestParameters.excludePMRooms !== undefined) {
            queryParameters['excludePMRooms'] = requestParameters.excludePMRooms;
        }

        if (requestParameters.hasDepositBalance !== undefined) {
            queryParameters['hasDepositBalance'] = requestParameters.hasDepositBalance;
        }

        if (requestParameters.hasOpenBalance !== undefined) {
            queryParameters['hasOpenBalance'] = requestParameters.hasOpenBalance;
        }

        if (requestParameters.hasOpenFolio !== undefined) {
            queryParameters['hasOpenFolio'] = requestParameters.hasOpenFolio;
        }

        if (requestParameters.includeScheduledCheckOut !== undefined) {
            queryParameters['includeScheduledCheckOut'] = requestParameters.includeScheduledCheckOut;
        }

        if (requestParameters.linkedOnly !== undefined) {
            queryParameters['linkedOnly'] = requestParameters.linkedOnly;
        }

        if (requestParameters.unlinkedOnly !== undefined) {
            queryParameters['unlinkedOnly'] = requestParameters.unlinkedOnly;
        }

        if (requestParameters.actualArrivals !== undefined) {
            queryParameters['actualArrivals'] = requestParameters.actualArrivals;
        }

        if (requestParameters.actualDepartures !== undefined) {
            queryParameters['actualDepartures'] = requestParameters.actualDepartures;
        }

        if (requestParameters.complimentaryReservations !== undefined) {
            queryParameters['complimentaryReservations'] = requestParameters.complimentaryReservations;
        }

        if (requestParameters.dayOfArrivalCancels !== undefined) {
            queryParameters['dayOfArrivalCancels'] = requestParameters.dayOfArrivalCancels;
        }

        if (requestParameters.dayUse !== undefined) {
            queryParameters['dayUse'] = requestParameters.dayUse;
        }

        if (requestParameters.earlyDepartures !== undefined) {
            queryParameters['earlyDepartures'] = requestParameters.earlyDepartures;
        }

        if (requestParameters.expectedArrivals !== undefined) {
            queryParameters['expectedArrivals'] = requestParameters.expectedArrivals;
        }

        if (requestParameters.expectedDepartures !== undefined) {
            queryParameters['expectedDepartures'] = requestParameters.expectedDepartures;
        }

        if (requestParameters.extendedStays !== undefined) {
            queryParameters['extendedStays'] = requestParameters.extendedStays;
        }

        if (requestParameters.houseUseReservations !== undefined) {
            queryParameters['houseUseReservations'] = requestParameters.houseUseReservations;
        }

        if (requestParameters.stayovers !== undefined) {
            queryParameters['stayovers'] = requestParameters.stayovers;
        }

        if (requestParameters.stayDate !== undefined) {
            queryParameters['stayDate'] = (requestParameters.stayDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomRoutingId !== undefined) {
            queryParameters['roomRoutingId'] = requestParameters.roomRoutingId;
        }

        if (requestParameters.periodicFolio !== undefined) {
            queryParameters['periodicFolio'] = requestParameters.periodicFolio;
        }

        if (requestParameters.folioSettlementTypes !== undefined) {
            queryParameters['folioSettlementTypes'] = requestParameters.folioSettlementTypes;
        }

        if (requestParameters.defaultDays !== undefined) {
            queryParameters['defaultDays'] = requestParameters.defaultDays;
        }

        if (requestParameters.excludePseudoRoomReservations !== undefined) {
            queryParameters['excludePseudoRoomReservations'] = requestParameters.excludePseudoRoomReservations;
        }

        if (requestParameters.excludeReservationIds) {
            queryParameters['excludeReservationIds'] = requestParameters.excludeReservationIds;
        }

        if (requestParameters.excludeVIPStatusCodes) {
            queryParameters['excludeVIPStatusCodes'] = requestParameters.excludeVIPStatusCodes;
        }

        if (requestParameters.excludeSpecials) {
            queryParameters['excludeSpecials'] = requestParameters.excludeSpecials;
        }

        if (requestParameters.excludeFloorPreferences) {
            queryParameters['excludeFloorPreferences'] = requestParameters.excludeFloorPreferences;
        }

        if (requestParameters.excludeAdvanceCheckedIn !== undefined) {
            queryParameters['excludeAdvanceCheckedIn'] = requestParameters.excludeAdvanceCheckedIn;
        }

        if (requestParameters.playerId !== undefined) {
            queryParameters['playerId'] = requestParameters.playerId;
        }

        if (requestParameters.gamingBalanceFrom !== undefined) {
            queryParameters['gamingBalanceFrom'] = requestParameters.gamingBalanceFrom;
        }

        if (requestParameters.gamingBalanceTo !== undefined) {
            queryParameters['gamingBalanceTo'] = requestParameters.gamingBalanceTo;
        }

        if (requestParameters.compAccountingBalanceFrom !== undefined) {
            queryParameters['compAccountingBalanceFrom'] = requestParameters.compAccountingBalanceFrom;
        }

        if (requestParameters.compAccountingBalanceTo !== undefined) {
            queryParameters['compAccountingBalanceTo'] = requestParameters.compAccountingBalanceTo;
        }

        if (requestParameters.searchTypes) {
            queryParameters['searchTypes'] = requestParameters.searchTypes;
        }

        if (requestParameters.reservationStatuses) {
            queryParameters['reservationStatuses'] = requestParameters.reservationStatuses;
        }

        if (requestParameters.transportationCodes) {
            queryParameters['transportationCodes'] = requestParameters.transportationCodes;
        }

        if (requestParameters.roomReadyStatuses) {
            queryParameters['roomReadyStatuses'] = requestParameters.roomReadyStatuses;
        }

        if (requestParameters.checkoutMessageReceived !== undefined) {
            queryParameters['checkoutMessageReceived'] = requestParameters.checkoutMessageReceived;
        }

        if (requestParameters.optedForCommunication !== undefined) {
            queryParameters['optedForCommunication'] = requestParameters.optedForCommunication;
        }

        if (requestParameters.swapShiftRoomReservationId !== undefined) {
            queryParameters['swapShiftRoomReservationId'] = requestParameters.swapShiftRoomReservationId;
        }

        if (requestParameters.roomSmokingPreferences) {
            queryParameters['roomSmokingPreferences'] = requestParameters.roomSmokingPreferences;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to search reservations in a hotel, filtering by whether they are Day Use, Due In, Checked In, Due Out, Checked Out, Cancelled, No Show and Complimentary or any other of the large selection of search criteria. It also serves as an entry way for changing existing reservation information, canceling reservations, checking in guests, canceling check ins, etc. You can use further query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data.<p><strong>OperationId:</strong>getHotelReservations</p>
     * Get and search for reservations in a hotel
     */
    async getHotelReservations(requestParameters: GetHotelReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationsDetails> {
        const response = await this.getHotelReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will return the payment method(s) that exist on a reservation. <p><strong>OperationId:</strong>getPaymentMethods</p>
     * Get a payment method 
     */
    async getPaymentMethodsRaw(requestParameters: GetPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationPaymentMethods>> {
        const queryParameters: any = {};

        if (requestParameters.includeAmounts !== undefined) {
            queryParameters['includeAmounts'] = requestParameters.includeAmounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/paymentMethods`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationPaymentMethodsFromJSON(jsonValue));
    }

    /**
     * This API will return the payment method(s) that exist on a reservation. <p><strong>OperationId:</strong>getPaymentMethods</p>
     * Get a payment method 
     */
    async getPaymentMethods(requestParameters: GetPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationPaymentMethods> {
        const response = await this.getPaymentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve rate plan information including a breakdown of packages and taxes.<p><strong>OperationId:</strong>getRateInfo</p>
     * Get rate information
     */
    async getRateInfoRaw(requestParameters: GetRateInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RateInfo>> {
        const queryParameters: any = {};

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        if (requestParameters.summaryInfo !== undefined) {
            queryParameters['summaryInfo'] = requestParameters.summaryInfo;
        }

        if (requestParameters.criteriaStartDate !== undefined) {
            queryParameters['criteriaStartDate'] = (requestParameters.criteriaStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.criteriaEndDate !== undefined) {
            queryParameters['criteriaEndDate'] = (requestParameters.criteriaEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.adults !== undefined) {
            queryParameters['adults'] = requestParameters.adults;
        }

        if (requestParameters.children !== undefined) {
            queryParameters['children'] = requestParameters.children;
        }

        if (requestParameters.childAge) {
            queryParameters['childAge'] = requestParameters.childAge;
        }

        if (requestParameters.bucket1Count !== undefined) {
            queryParameters['bucket1Count'] = requestParameters.bucket1Count;
        }

        if (requestParameters.bucket2Count !== undefined) {
            queryParameters['bucket2Count'] = requestParameters.bucket2Count;
        }

        if (requestParameters.bucket3Count !== undefined) {
            queryParameters['bucket3Count'] = requestParameters.bucket3Count;
        }

        if (requestParameters.bucket4Count !== undefined) {
            queryParameters['bucket4Count'] = requestParameters.bucket4Count;
        }

        if (requestParameters.bucket5Count !== undefined) {
            queryParameters['bucket5Count'] = requestParameters.bucket5Count;
        }

        if (requestParameters.detailDate !== undefined) {
            queryParameters['detailDate'] = (requestParameters.detailDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.blockId !== undefined) {
            queryParameters['blockId'] = requestParameters.blockId;
        }

        if (requestParameters.blockIdType !== undefined) {
            queryParameters['blockIdType'] = requestParameters.blockIdType;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.ratePlanCode !== undefined) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.effectiveRateEnd) {
            queryParameters['effectiveRateEnd'] = requestParameters.effectiveRateEnd;
        }

        if (requestParameters.effectiveRateStart) {
            queryParameters['effectiveRateStart'] = requestParameters.effectiveRateStart;
        }

        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/rateInfo`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RateInfoFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve rate plan information including a breakdown of packages and taxes.<p><strong>OperationId:</strong>getRateInfo</p>
     * Get rate information
     */
    async getRateInfo(requestParameters: GetRateInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RateInfo> {
        const response = await this.getRateInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve a reservation&apos;s detail such as guest&apos;s stay, arrival and departure dates, transportation, room and rate information, preferences, packages, and more using OPERA&apos;s reservationId.<p><strong>OperationId:</strong>getReservation</p>
     * Get reservation by ID
     */
    async getReservationRaw(requestParameters: GetReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservation>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.allowedActions) {
            queryParameters['allowedActions'] = requestParameters.allowedActions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve a reservation&apos;s detail such as guest&apos;s stay, arrival and departure dates, transportation, room and rate information, preferences, packages, and more using OPERA&apos;s reservationId.<p><strong>OperationId:</strong>getReservation</p>
     * Get reservation by ID
     */
    async getReservation(requestParameters: GetReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservation> {
        const response = await this.getReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get the activity log data of reservations being created and managed.<p><strong>OperationId:</strong>getReservationActivityLog</p>
     * Fetch reservation activity log
     */
    async getReservationActivityLogRaw(requestParameters: GetReservationActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityLog>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.activityGroup !== undefined) {
            queryParameters['activityGroup'] = requestParameters.activityGroup;
        }

        if (requestParameters.activityType !== undefined) {
            queryParameters['activityType'] = requestParameters.activityType;
        }

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = (requestParameters.fromDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.toDate !== undefined) {
            queryParameters['toDate'] = (requestParameters.toDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.searchText !== undefined) {
            queryParameters['searchText'] = requestParameters.searchText;
        }

        if (requestParameters.userByIdsUserId) {
            queryParameters['userByIdsUserId'] = requestParameters.userByIdsUserId;
        }

        if (requestParameters.userForIdsUserId) {
            queryParameters['userForIdsUserId'] = requestParameters.userForIdsUserId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/activityLog`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityLogFromJSON(jsonValue));
    }

    /**
     * Use this API to get the activity log data of reservations being created and managed.<p><strong>OperationId:</strong>getReservationActivityLog</p>
     * Fetch reservation activity log
     */
    async getReservationActivityLog(requestParameters: GetReservationActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityLog> {
        const response = await this.getReservationActivityLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get a reservation using the external reference ID associated with the reservation such as a Central Reservation System confirmation number or booking engine confirmation number.<p><strong>OperationId:</strong>getReservationByExtId</p>
     * Get reservation by external ID
     */
    async getReservationByExtIdRaw(requestParameters: GetReservationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservation>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.allowedActions) {
            queryParameters['allowedActions'] = requestParameters.allowedActions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationFromJSON(jsonValue));
    }

    /**
     * Use this API to get a reservation using the external reference ID associated with the reservation such as a Central Reservation System confirmation number or booking engine confirmation number.<p><strong>OperationId:</strong>getReservationByExtId</p>
     * Get reservation by external ID
     */
    async getReservationByExtId(requestParameters: GetReservationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservation> {
        const response = await this.getReservationByExtIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get cancelation and deposit policies for a given reservation.<p><strong>OperationId:</strong>getReservationPolicies</p>
     * Get reservation cancel and deposit policies
     */
    async getReservationPoliciesRaw(requestParameters: GetReservationPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationPolicies>> {
        const queryParameters: any = {};

        if (requestParameters.fetchDepositPolicies !== undefined) {
            queryParameters['fetchDepositPolicies'] = requestParameters.fetchDepositPolicies;
        }

        if (requestParameters.fetchCancellationPolicies !== undefined) {
            queryParameters['fetchCancellationPolicies'] = requestParameters.fetchCancellationPolicies;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/policies`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationPoliciesFromJSON(jsonValue));
    }

    /**
     * Use this API to get cancelation and deposit policies for a given reservation.<p><strong>OperationId:</strong>getReservationPolicies</p>
     * Get reservation cancel and deposit policies
     */
    async getReservationPolicies(requestParameters: GetReservationPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationPolicies> {
        const response = await this.getReservationPoliciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve the available upsell offers for a specific reservation. If no upsell options are configured for this hotel or available for this reservation, an appropriate error will be returned. <p><strong>OperationId:</strong>getReservationUpsellInfo</p>
     * Get available Upsell offers
     */
    async getReservationUpsellInfoRaw(requestParameters: GetReservationUpsellInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationUpsellInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/upsell`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationUpsellInfoFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve the available upsell offers for a specific reservation. If no upsell options are configured for this hotel or available for this reservation, an appropriate error will be returned. <p><strong>OperationId:</strong>getReservationUpsellInfo</p>
     * Get available Upsell offers
     */
    async getReservationUpsellInfo(requestParameters: GetReservationUpsellInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationUpsellInfo> {
        const response = await this.getReservationUpsellInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getReservations</p>
     * Get Reservations for a hotel
     */
    async getReservationsRaw(requestParameters: GetReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.recentlyAccessed !== undefined) {
            queryParameters['recentlyAccessed'] = requestParameters.recentlyAccessed;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.searchType !== undefined) {
            queryParameters['searchType'] = requestParameters.searchType;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.text !== undefined) {
            queryParameters['text'] = requestParameters.text;
        }

        if (requestParameters.reservationIdList) {
            queryParameters['reservationIdList'] = requestParameters.reservationIdList;
        }

        if (requestParameters.confirmationNumberList) {
            queryParameters['confirmationNumberList'] = requestParameters.confirmationNumberList;
        }

        if (requestParameters.cancellationNumberList) {
            queryParameters['cancellationNumberList'] = requestParameters.cancellationNumberList;
        }

        if (requestParameters.externalReferenceIds) {
            queryParameters['externalReferenceIds'] = requestParameters.externalReferenceIds;
        }

        if (requestParameters.externalSystemCodes) {
            queryParameters['externalSystemCodes'] = requestParameters.externalSystemCodes;
        }

        if (requestParameters.arrivalEndDate !== undefined) {
            queryParameters['arrivalEndDate'] = (requestParameters.arrivalEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.arrivalStartDate !== undefined) {
            queryParameters['arrivalStartDate'] = (requestParameters.arrivalStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.departureEndDate !== undefined) {
            queryParameters['departureEndDate'] = (requestParameters.departureEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.departureStartDate !== undefined) {
            queryParameters['departureStartDate'] = (requestParameters.departureStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.expectedArrivalStartTime !== undefined) {
            queryParameters['expectedArrivalStartTime'] = requestParameters.expectedArrivalStartTime;
        }

        if (requestParameters.expectedArrivalEndTime !== undefined) {
            queryParameters['expectedArrivalEndTime'] = requestParameters.expectedArrivalEndTime;
        }

        if (requestParameters.expectedReturnEndTime !== undefined) {
            queryParameters['expectedReturnEndTime'] = requestParameters.expectedReturnEndTime;
        }

        if (requestParameters.expectedReturnStartTime !== undefined) {
            queryParameters['expectedReturnStartTime'] = requestParameters.expectedReturnStartTime;
        }

        if (requestParameters.companyNames) {
            queryParameters['companyNames'] = requestParameters.companyNames;
        }

        if (requestParameters.travelAgentIds) {
            queryParameters['travelAgentIds'] = requestParameters.travelAgentIds;
        }

        if (requestParameters.companyIds) {
            queryParameters['companyIds'] = requestParameters.companyIds;
        }

        if (requestParameters.sourceIds) {
            queryParameters['sourceIds'] = requestParameters.sourceIds;
        }

        if (requestParameters.contactIds) {
            queryParameters['contactIds'] = requestParameters.contactIds;
        }

        if (requestParameters.groupIds) {
            queryParameters['groupIds'] = requestParameters.groupIds;
        }

        if (requestParameters.billingContactIds) {
            queryParameters['billingContactIds'] = requestParameters.billingContactIds;
        }

        if (requestParameters.profileIds) {
            queryParameters['profileIds'] = requestParameters.profileIds;
        }

        if (requestParameters.membershipCardNumber !== undefined) {
            queryParameters['membershipCardNumber'] = requestParameters.membershipCardNumber;
        }

        if (requestParameters.membershipLevels) {
            queryParameters['membershipLevels'] = requestParameters.membershipLevels;
        }

        if (requestParameters.membershipTypes) {
            queryParameters['membershipTypes'] = requestParameters.membershipTypes;
        }

        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.anyVIPStatus !== undefined) {
            queryParameters['anyVIPStatus'] = requestParameters.anyVIPStatus;
        }

        if (requestParameters.vipCodes) {
            queryParameters['vipCodes'] = requestParameters.vipCodes;
        }

        if (requestParameters.guaranteeCode !== undefined) {
            queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
        }

        if (requestParameters.paymentMethod !== undefined) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }

        if (requestParameters.discountApplied !== undefined) {
            queryParameters['discountApplied'] = requestParameters.discountApplied;
        }

        if (requestParameters.user) {
            queryParameters['user'] = requestParameters.user;
        }

        if (requestParameters.createdBy !== undefined) {
            queryParameters['createdBy'] = requestParameters.createdBy;
        }

        if (requestParameters.cancelledByList) {
            queryParameters['cancelledByList'] = requestParameters.cancelledByList;
        }

        if (requestParameters.cancelledOn !== undefined) {
            queryParameters['cancelledOn'] = (requestParameters.cancelledOn as any).toISOString().substr(0,10);
        }

        if (requestParameters.ratePlanCodes) {
            queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
        }

        if (requestParameters.sourceCodes) {
            queryParameters['sourceCodes'] = requestParameters.sourceCodes;
        }

        if (requestParameters.marketCodes) {
            queryParameters['marketCodes'] = requestParameters.marketCodes;
        }

        if (requestParameters.excludeBlockReservations !== undefined) {
            queryParameters['excludeBlockReservations'] = requestParameters.excludeBlockReservations;
        }

        if (requestParameters.blockName !== undefined) {
            queryParameters['blockName'] = requestParameters.blockName;
        }

        if (requestParameters.blockIds) {
            queryParameters['blockIds'] = requestParameters.blockIds;
        }

        if (requestParameters.blockCodes) {
            queryParameters['blockCodes'] = requestParameters.blockCodes;
        }

        if (requestParameters.customReference !== undefined) {
            queryParameters['customReference'] = requestParameters.customReference;
        }

        if (requestParameters.recordLocator !== undefined) {
            queryParameters['recordLocator'] = requestParameters.recordLocator;
        }

        if (requestParameters.orderBy) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.sortOrder) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.roomAssignedOnly !== undefined) {
            queryParameters['roomAssignedOnly'] = requestParameters.roomAssignedOnly;
        }

        if (requestParameters.roomUnassignedOnly !== undefined) {
            queryParameters['roomUnassignedOnly'] = requestParameters.roomUnassignedOnly;
        }

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.roomFeatures) {
            queryParameters['roomFeatures'] = requestParameters.roomFeatures;
        }

        if (requestParameters.roomSpecials) {
            queryParameters['roomSpecials'] = requestParameters.roomSpecials;
        }

        if (requestParameters.roomSmokingPreference !== undefined) {
            queryParameters['roomSmokingPreference'] = requestParameters.roomSmokingPreference;
        }

        if (requestParameters.roomFloorPreferences) {
            queryParameters['roomFloorPreferences'] = requestParameters.roomFloorPreferences;
        }

        if (requestParameters.housekeepingRoomStatuses) {
            queryParameters['housekeepingRoomStatuses'] = requestParameters.housekeepingRoomStatuses;
        }

        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }

        if (requestParameters.roomRangeFrom !== undefined) {
            queryParameters['roomRangeFrom'] = requestParameters.roomRangeFrom;
        }

        if (requestParameters.roomRangeTo !== undefined) {
            queryParameters['roomRangeTo'] = requestParameters.roomRangeTo;
        }

        if (requestParameters.communication !== undefined) {
            queryParameters['communication'] = requestParameters.communication;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.allowPreRegistration !== undefined) {
            queryParameters['allowPreRegistration'] = requestParameters.allowPreRegistration;
        }

        if (requestParameters.hasDepositBalance !== undefined) {
            queryParameters['hasDepositBalance'] = requestParameters.hasDepositBalance;
        }

        if (requestParameters.hasOpenBalance !== undefined) {
            queryParameters['hasOpenBalance'] = requestParameters.hasOpenBalance;
        }

        if (requestParameters.hasOpenFolio !== undefined) {
            queryParameters['hasOpenFolio'] = requestParameters.hasOpenFolio;
        }

        if (requestParameters.includeScheduledCheckOut !== undefined) {
            queryParameters['includeScheduledCheckOut'] = requestParameters.includeScheduledCheckOut;
        }

        if (requestParameters.linkedOnly !== undefined) {
            queryParameters['linkedOnly'] = requestParameters.linkedOnly;
        }

        if (requestParameters.unlinkedOnly !== undefined) {
            queryParameters['unlinkedOnly'] = requestParameters.unlinkedOnly;
        }

        if (requestParameters.actualArrivals !== undefined) {
            queryParameters['actualArrivals'] = requestParameters.actualArrivals;
        }

        if (requestParameters.actualDepartures !== undefined) {
            queryParameters['actualDepartures'] = requestParameters.actualDepartures;
        }

        if (requestParameters.complimentaryReservations !== undefined) {
            queryParameters['complimentaryReservations'] = requestParameters.complimentaryReservations;
        }

        if (requestParameters.dayOfArrivalCancels !== undefined) {
            queryParameters['dayOfArrivalCancels'] = requestParameters.dayOfArrivalCancels;
        }

        if (requestParameters.dayUse !== undefined) {
            queryParameters['dayUse'] = requestParameters.dayUse;
        }

        if (requestParameters.earlyDepartures !== undefined) {
            queryParameters['earlyDepartures'] = requestParameters.earlyDepartures;
        }

        if (requestParameters.expectedArrivals !== undefined) {
            queryParameters['expectedArrivals'] = requestParameters.expectedArrivals;
        }

        if (requestParameters.expectedDepartures !== undefined) {
            queryParameters['expectedDepartures'] = requestParameters.expectedDepartures;
        }

        if (requestParameters.extendedStays !== undefined) {
            queryParameters['extendedStays'] = requestParameters.extendedStays;
        }

        if (requestParameters.houseUseReservations !== undefined) {
            queryParameters['houseUseReservations'] = requestParameters.houseUseReservations;
        }

        if (requestParameters.stayovers !== undefined) {
            queryParameters['stayovers'] = requestParameters.stayovers;
        }

        if (requestParameters.stayDate !== undefined) {
            queryParameters['stayDate'] = (requestParameters.stayDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomRoutingId !== undefined) {
            queryParameters['roomRoutingId'] = requestParameters.roomRoutingId;
        }

        if (requestParameters.excludePseudoRoomReservations !== undefined) {
            queryParameters['excludePseudoRoomReservations'] = requestParameters.excludePseudoRoomReservations;
        }

        if (requestParameters.excludeReservationIds) {
            queryParameters['excludeReservationIds'] = requestParameters.excludeReservationIds;
        }

        if (requestParameters.excludeVIPStatusCodes) {
            queryParameters['excludeVIPStatusCodes'] = requestParameters.excludeVIPStatusCodes;
        }

        if (requestParameters.excludeSpecials) {
            queryParameters['excludeSpecials'] = requestParameters.excludeSpecials;
        }

        if (requestParameters.excludeFloorPreferences) {
            queryParameters['excludeFloorPreferences'] = requestParameters.excludeFloorPreferences;
        }

        if (requestParameters.excludeAdvanceCheckedIn !== undefined) {
            queryParameters['excludeAdvanceCheckedIn'] = requestParameters.excludeAdvanceCheckedIn;
        }

        if (requestParameters.playerId !== undefined) {
            queryParameters['playerId'] = requestParameters.playerId;
        }

        if (requestParameters.gamingBalanceFrom !== undefined) {
            queryParameters['gamingBalanceFrom'] = requestParameters.gamingBalanceFrom;
        }

        if (requestParameters.gamingBalanceTo !== undefined) {
            queryParameters['gamingBalanceTo'] = requestParameters.gamingBalanceTo;
        }

        if (requestParameters.compAccountingBalanceFrom !== undefined) {
            queryParameters['compAccountingBalanceFrom'] = requestParameters.compAccountingBalanceFrom;
        }

        if (requestParameters.compAccountingBalanceTo !== undefined) {
            queryParameters['compAccountingBalanceTo'] = requestParameters.compAccountingBalanceTo;
        }

        if (requestParameters.searchTypes) {
            queryParameters['searchTypes'] = requestParameters.searchTypes;
        }

        if (requestParameters.reservationStatuses) {
            queryParameters['reservationStatuses'] = requestParameters.reservationStatuses;
        }

        if (requestParameters.transportationCodes) {
            queryParameters['transportationCodes'] = requestParameters.transportationCodes;
        }

        if (requestParameters.roomReadyStatuses) {
            queryParameters['roomReadyStatuses'] = requestParameters.roomReadyStatuses;
        }

        if (requestParameters.checkoutMessageReceived !== undefined) {
            queryParameters['checkoutMessageReceived'] = requestParameters.checkoutMessageReceived;
        }

        if (requestParameters.optedForCommunication !== undefined) {
            queryParameters['optedForCommunication'] = requestParameters.optedForCommunication;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/reservations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationsDetailsFromJSON(jsonValue));
    }

    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getReservations</p>
     * Get Reservations for a hotel
     */
    async getReservations(requestParameters: GetReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationsDetails> {
        const response = await this.getReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to request a new call or make updates to an existing call.<p><strong>OperationId:</strong>postCall</p>
     * Register calls
     */
    async postCallRaw(requestParameters: PostCallOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterCall>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/calls`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCallRequestToJSON(requestParameters.registerCall),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterCallFromJSON(jsonValue));
    }

    /**
     * Use this API to request a new call or make updates to an existing call.<p><strong>OperationId:</strong>postCall</p>
     * Register calls
     */
    async postCall(requestParameters: PostCallOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterCall> {
        const response = await this.postCallRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this if a guest would like to cancel their reservation.  You will receive a cancellation number in the response. <p><strong>OperationId:</strong>postCancelReservation</p>
     * Cancel Reservation by ID
     */
    async postCancelReservationRaw(requestParameters: PostCancelReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancelReservationDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/cancellations`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCancelReservationRequestToJSON(requestParameters.cancelReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CancelReservationDetailsFromJSON(jsonValue));
    }

    /**
     * Use this if a guest would like to cancel their reservation.  You will receive a cancellation number in the response. <p><strong>OperationId:</strong>postCancelReservation</p>
     * Cancel Reservation by ID
     */
    async postCancelReservation(requestParameters: PostCancelReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancelReservationDetails> {
        const response = await this.postCancelReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservations</p>
     * Combine Share Reservations
     */
    async postCombineShareReservationsRaw(requestParameters: PostCombineShareReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CombineShareReservationsDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/shares`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCombineShareReservationsByExtIdRequestToJSON(requestParameters.combineShareReservations),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CombineShareReservationsDetailsFromJSON(jsonValue));
    }

    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservations</p>
     * Combine Share Reservations
     */
    async postCombineShareReservations(requestParameters: PostCombineShareReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CombineShareReservationsDetails> {
        const response = await this.postCombineShareReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservationsByExtId</p>
     * Combine Share Reservations
     */
    async postCombineShareReservationsByExtIdRaw(requestParameters: PostCombineShareReservationsByExtIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CombineShareReservationsDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/shares`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCombineShareReservationsByExtIdRequestToJSON(requestParameters.combineShareReservations),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CombineShareReservationsDetailsFromJSON(jsonValue));
    }

    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservationsByExtId</p>
     * Combine Share Reservations
     */
    async postCombineShareReservationsByExtId(requestParameters: PostCombineShareReservationsByExtIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CombineShareReservationsDetails> {
        const response = await this.postCombineShareReservationsByExtIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create deposit policy for a property. This policy can then be used for reservations. <p><strong>OperationId:</strong>postDepositPolicy</p>
     * Create deposit policy
     */
    async postDepositPolicyRaw(requestParameters: PostDepositPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/depositPolicies`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostDepositPolicyRequestToJSON(requestParameters.reservationDepositPolicyCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create deposit policy for a property. This policy can then be used for reservations. <p><strong>OperationId:</strong>postDepositPolicy</p>
     * Create deposit policy
     */
    async postDepositPolicy(requestParameters: PostDepositPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postDepositPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will allow you to set a reservation as a pre-registered guest.  The API request requires the guests confirmation number and you can optionally include arrival time.  The behavior of the API will be dependent upon the Pre-registration rules configured for the hotel in OPERA Cloud administration. <p><strong>OperationId:</strong>postPreCheckInReservation</p>
     * Pre-Checkin a Reservation
     */
    async postPreCheckInReservationRaw(requestParameters: PostPreCheckInReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/preCheckIn`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostPreCheckInReservationRequestToJSON(requestParameters.preCheckInReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This will allow you to set a reservation as a pre-registered guest.  The API request requires the guests confirmation number and you can optionally include arrival time.  The behavior of the API will be dependent upon the Pre-registration rules configured for the hotel in OPERA Cloud administration. <p><strong>OperationId:</strong>postPreCheckInReservation</p>
     * Pre-Checkin a Reservation
     */
    async postPreCheckInReservation(requestParameters: PostPreCheckInReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPreCheckInReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this to create a new reservation for a hA12:F24otel.  Generally, you would search for a hotel\'s availability and rates before proceeding to use postReservation.  There are many fields in postReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postReservation. <p><strong>OperationId:</strong>postReservation</p>
     * Create Reservation
     */
    async postReservationRaw(requestParameters: PostReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostReservationRequestToJSON(requestParameters.createReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this to create a new reservation for a hA12:F24otel.  Generally, you would search for a hotel\'s availability and rates before proceeding to use postReservation.  There are many fields in postReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postReservation. <p><strong>OperationId:</strong>postReservation</p>
     * Create Reservation
     */
    async postReservation(requestParameters: PostReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this to create a new reservation for a block, you must know the block Code to create this reservation.  In order to post a successful block reservation, please ensure you use the ListOfValues API\'s to know the hotel\'s codes; such as Address Type, Country Code,  Titles, preferenceCodes etc. <p><strong>OperationId:</strong>postReservationByBlock</p>
     * Create Reservation for a Block
     */
    async postReservationByBlockRaw(requestParameters: PostReservationByBlockOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/blocks/{blockId}/reservations`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostReservationByBlockRequestToJSON(requestParameters.createReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this to create a new reservation for a block, you must know the block Code to create this reservation.  In order to post a successful block reservation, please ensure you use the ListOfValues API\'s to know the hotel\'s codes; such as Address Type, Country Code,  Titles, preferenceCodes etc. <p><strong>OperationId:</strong>postReservationByBlock</p>
     * Create Reservation for a Block
     */
    async postReservationByBlock(requestParameters: PostReservationByBlockOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postReservationByBlockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinks</p>
     * Link Reservations
     */
    async postReservationLinksRaw(requestParameters: PostReservationLinksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/linkedReservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostReservationLinksRequestToJSON(requestParameters.linkReservationsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinks</p>
     * Link Reservations
     */
    async postReservationLinks(requestParameters: PostReservationLinksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postReservationLinksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinksByChain</p>
     * Link Reservations By Chain
     */
    async postReservationLinksByChainRaw(requestParameters: PostReservationLinksByChainOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/reservations/linkedReservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostReservationLinksByChainRequestToJSON(requestParameters.linkReservationsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinksByChain</p>
     * Link Reservations By Chain
     */
    async postReservationLinksByChain(requestParameters: PostReservationLinksByChainOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postReservationLinksByChainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to upsell a reservation in OPERA.  You would need to already know the upsell rules that are available for this reservation - you can do this by using the getUpsell API. <p><strong>OperationId:</strong>postUpsellReservation</p>
     * Upsell a Reservation
     */
    async postUpsellReservationRaw(requestParameters: PostUpsellReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/upsell`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostUpsellReservationRequestToJSON(requestParameters.upsellReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will allow you to upsell a reservation in OPERA.  You would need to already know the upsell rules that are available for this reservation - you can do this by using the getUpsell API. <p><strong>OperationId:</strong>postUpsellReservation</p>
     * Upsell a Reservation
     */
    async postUpsellReservation(requestParameters: PostUpsellReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postUpsellReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will update an existing payment method on a reservation. <p><strong>OperationId:</strong>putPaymentMethods</p>
     * Change a payment method 
     */
    async putPaymentMethodsRaw(requestParameters: PutPaymentMethodsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationPaymentMethods>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/paymentMethods`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutPaymentMethodsRequestToJSON(requestParameters.reservationPaymentMethods),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationPaymentMethodsFromJSON(jsonValue));
    }

    /**
     * This API will update an existing payment method on a reservation. <p><strong>OperationId:</strong>putPaymentMethods</p>
     * Change a payment method 
     */
    async putPaymentMethods(requestParameters: PutPaymentMethodsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationPaymentMethods> {
        const response = await this.putPaymentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to reinstate a cancelled reservation. <p><strong>OperationId:</strong>putReinstateReservation</p>
     * Reinstate a Reservation
     */
    async putReinstateReservationRaw(requestParameters: PutReinstateReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReinstateReservationDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/cancellations`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutReinstateReservationRequestToJSON(requestParameters.reinstateReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReinstateReservationDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to reinstate a cancelled reservation. <p><strong>OperationId:</strong>putReinstateReservation</p>
     * Reinstate a Reservation
     */
    async putReinstateReservation(requestParameters: PutReinstateReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReinstateReservationDetails> {
        const response = await this.putReinstateReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this to update an existing reservation for a hotel, such as adding comments, changing the number of guests.   There are many fields in putReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use putReservation. <p><strong>OperationId:</strong>putReservation</p>
     * Update Reservation by ID
     */
    async putReservationRaw(requestParameters: PutReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeReservationDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutReservationRequestToJSON(requestParameters.changeReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangeReservationDetailsFromJSON(jsonValue));
    }

    /**
     * Use this to update an existing reservation for a hotel, such as adding comments, changing the number of guests.   There are many fields in putReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use putReservation. <p><strong>OperationId:</strong>putReservation</p>
     * Update Reservation by ID
     */
    async putReservation(requestParameters: PutReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeReservationDetails> {
        const response = await this.putReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to validate either the guarantee type or stay details of a reservation you are about to create. <p><strong>OperationId:</strong>putValidateReservationChanges</p>
     * Validate Reservation Change
     */
    async putValidateReservationChangesRaw(requestParameters: PutValidateReservationChangesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ValidateReservationChangesDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/validations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutValidateReservationChangesRequestToJSON(requestParameters.validateReservationChanges),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidateReservationChangesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to validate either the guarantee type or stay details of a reservation you are about to create. <p><strong>OperationId:</strong>putValidateReservationChanges</p>
     * Validate Reservation Change
     */
    async putValidateReservationChanges(requestParameters: PutValidateReservationChangesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ValidateReservationChangesDetails> {
        const response = await this.putValidateReservationChangesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const DeletePreCheckInReservationCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
} as const;
export type DeletePreCheckInReservationCardOrTokenEnum = typeof DeletePreCheckInReservationCardOrTokenEnum[keyof typeof DeletePreCheckInReservationCardOrTokenEnum];
/**
 * @export
 */
export const DeletePreCheckInReservationCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
} as const;
export type DeletePreCheckInReservationCardTypeEnum = typeof DeletePreCheckInReservationCardTypeEnum[keyof typeof DeletePreCheckInReservationCardTypeEnum];
/**
 * @export
 */
export const DeletePreCheckInReservationProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
} as const;
export type DeletePreCheckInReservationProcessingEnum = typeof DeletePreCheckInReservationProcessingEnum[keyof typeof DeletePreCheckInReservationProcessingEnum];
/**
 * @export
 */
export const DeletePreCheckInReservationEmailFolioEmailFormatEnum = {
    Html: 'Html',
    Text: 'Text'
} as const;
export type DeletePreCheckInReservationEmailFolioEmailFormatEnum = typeof DeletePreCheckInReservationEmailFolioEmailFormatEnum[keyof typeof DeletePreCheckInReservationEmailFolioEmailFormatEnum];
/**
 * @export
 */
export const GetExternalSystemReservationsSearchTypeEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
} as const;
export type GetExternalSystemReservationsSearchTypeEnum = typeof GetExternalSystemReservationsSearchTypeEnum[keyof typeof GetExternalSystemReservationsSearchTypeEnum];
/**
 * @export
 */
export const GetExternalSystemReservationsOrderByEnum = {
    Nights: 'Nights',
    ArrivalDate: 'ArrivalDate',
    ArrivalDateEtr: 'ArrivalDateETR',
    DepartureDate: 'DepartureDate',
    GuestSurname: 'GuestSurname',
    RateAmount: 'RateAmount',
    RateCode: 'RateCode',
    Room: 'Room',
    RoomType: 'RoomType'
} as const;
export type GetExternalSystemReservationsOrderByEnum = typeof GetExternalSystemReservationsOrderByEnum[keyof typeof GetExternalSystemReservationsOrderByEnum];
/**
 * @export
 */
export const GetExternalSystemReservationsSortOrderEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
} as const;
export type GetExternalSystemReservationsSortOrderEnum = typeof GetExternalSystemReservationsSortOrderEnum[keyof typeof GetExternalSystemReservationsSortOrderEnum];
/**
 * @export
 */
export const GetExternalSystemReservationsHousekeepingRoomStatusesEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
} as const;
export type GetExternalSystemReservationsHousekeepingRoomStatusesEnum = typeof GetExternalSystemReservationsHousekeepingRoomStatusesEnum[keyof typeof GetExternalSystemReservationsHousekeepingRoomStatusesEnum];
/**
 * @export
 */
export const GetExternalSystemReservationsFetchInstructionsEnum = {
    Reservation: 'Reservation',
    ReservationId: 'ReservationID',
    Indicators: 'Indicators',
    Deposits: 'Deposits',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestServiceStatus: 'GuestServiceStatus',
    MasterInfo: 'MasterInfo',
    CancellationInfo: 'CancellationInfo',
    BlockReservations: 'BlockReservations',
    TaxType: 'TaxType',
    GuestDeviceNotification: 'GuestDeviceNotification',
    RoomAssignedByAi: 'RoomAssignedByAI'
} as const;
export type GetExternalSystemReservationsFetchInstructionsEnum = typeof GetExternalSystemReservationsFetchInstructionsEnum[keyof typeof GetExternalSystemReservationsFetchInstructionsEnum];
/**
 * @export
 */
export const GetExternalSystemReservationsSearchTypesEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
} as const;
export type GetExternalSystemReservationsSearchTypesEnum = typeof GetExternalSystemReservationsSearchTypesEnum[keyof typeof GetExternalSystemReservationsSearchTypesEnum];
/**
 * @export
 */
export const GetExternalSystemReservationsReservationStatusesEnum = {
    Cancelled: 'Cancelled',
    CheckedOut: 'CheckedOut',
    CheckedIn: 'CheckedIn',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    InHouse: 'InHouse',
    NoShow: 'NoShow',
    WaitList: 'WaitList'
} as const;
export type GetExternalSystemReservationsReservationStatusesEnum = typeof GetExternalSystemReservationsReservationStatusesEnum[keyof typeof GetExternalSystemReservationsReservationStatusesEnum];
/**
 * @export
 */
export const GetExternalSystemReservationsRoomReadyStatusesEnum = {
    Pending: 'Pending',
    Completed: 'Completed',
    Failed: 'Failed',
    Sent: 'Sent',
    Received: 'Received',
    Cancelled: 'Cancelled',
    PendingAvailability: 'PendingAvailability'
} as const;
export type GetExternalSystemReservationsRoomReadyStatusesEnum = typeof GetExternalSystemReservationsRoomReadyStatusesEnum[keyof typeof GetExternalSystemReservationsRoomReadyStatusesEnum];
/**
 * @export
 */
export const GetHotelReservationsDiscrepancyEnum = {
    Skip: 'Skip',
    Sleep: 'Sleep'
} as const;
export type GetHotelReservationsDiscrepancyEnum = typeof GetHotelReservationsDiscrepancyEnum[keyof typeof GetHotelReservationsDiscrepancyEnum];
/**
 * @export
 */
export const GetHotelReservationsSearchTypeEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
} as const;
export type GetHotelReservationsSearchTypeEnum = typeof GetHotelReservationsSearchTypeEnum[keyof typeof GetHotelReservationsSearchTypeEnum];
/**
 * @export
 */
export const GetHotelReservationsOrderByEnum = {
    Nights: 'Nights',
    ArrivalDate: 'ArrivalDate',
    ArrivalDateEtr: 'ArrivalDateETR',
    DepartureDate: 'DepartureDate',
    GuestSurname: 'GuestSurname',
    RateAmount: 'RateAmount',
    RateCode: 'RateCode',
    Room: 'Room',
    RoomType: 'RoomType'
} as const;
export type GetHotelReservationsOrderByEnum = typeof GetHotelReservationsOrderByEnum[keyof typeof GetHotelReservationsOrderByEnum];
/**
 * @export
 */
export const GetHotelReservationsSortOrderEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
} as const;
export type GetHotelReservationsSortOrderEnum = typeof GetHotelReservationsSortOrderEnum[keyof typeof GetHotelReservationsSortOrderEnum];
/**
 * @export
 */
export const GetHotelReservationsHousekeepingRoomStatusesEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
} as const;
export type GetHotelReservationsHousekeepingRoomStatusesEnum = typeof GetHotelReservationsHousekeepingRoomStatusesEnum[keyof typeof GetHotelReservationsHousekeepingRoomStatusesEnum];
/**
 * @export
 */
export const GetHotelReservationsFetchInstructionsEnum = {
    Reservation: 'Reservation',
    ReservationId: 'ReservationID',
    Indicators: 'Indicators',
    Deposits: 'Deposits',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestServiceStatus: 'GuestServiceStatus',
    MasterInfo: 'MasterInfo',
    CancellationInfo: 'CancellationInfo',
    BlockReservations: 'BlockReservations',
    TaxType: 'TaxType',
    GuestDeviceNotification: 'GuestDeviceNotification',
    RoomAssignedByAi: 'RoomAssignedByAI',
    SwapShiftRooms: 'SwapShiftRooms'
} as const;
export type GetHotelReservationsFetchInstructionsEnum = typeof GetHotelReservationsFetchInstructionsEnum[keyof typeof GetHotelReservationsFetchInstructionsEnum];
/**
 * @export
 */
export const GetHotelReservationsAllowedReservationActionsEnum = {
    Cancel: 'Cancel',
    Move: 'Move',
    PreCharge: 'PreCharge',
    PostCharge: 'PostCharge',
    FacilitySchedule: 'FacilitySchedule',
    Upsell: 'Upsell',
    PreCheckIn: 'PreCheckIn',
    PostToNoShowCancel: 'PostToNoShowCancel',
    NoShow: 'NoShow',
    NameChange: 'NameChange',
    Discount: 'Discount',
    HouseKeeping: 'HouseKeeping',
    EnrollToPrimaryMembership: 'EnrollToPrimaryMembership',
    EnrollInProgress: 'EnrollInProgress'
} as const;
export type GetHotelReservationsAllowedReservationActionsEnum = typeof GetHotelReservationsAllowedReservationActionsEnum[keyof typeof GetHotelReservationsAllowedReservationActionsEnum];
/**
 * @export
 */
export const GetHotelReservationsPeriodicFolioEnum = {
    Weekly: 'Weekly',
    Monthly: 'Monthly',
    Days: 'Days'
} as const;
export type GetHotelReservationsPeriodicFolioEnum = typeof GetHotelReservationsPeriodicFolioEnum[keyof typeof GetHotelReservationsPeriodicFolioEnum];
/**
 * @export
 */
export const GetHotelReservationsSearchTypesEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
} as const;
export type GetHotelReservationsSearchTypesEnum = typeof GetHotelReservationsSearchTypesEnum[keyof typeof GetHotelReservationsSearchTypesEnum];
/**
 * @export
 */
export const GetHotelReservationsReservationStatusesEnum = {
    Cancelled: 'Cancelled',
    CheckedOut: 'CheckedOut',
    CheckedIn: 'CheckedIn',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    InHouse: 'InHouse',
    NoShow: 'NoShow',
    WaitList: 'WaitList'
} as const;
export type GetHotelReservationsReservationStatusesEnum = typeof GetHotelReservationsReservationStatusesEnum[keyof typeof GetHotelReservationsReservationStatusesEnum];
/**
 * @export
 */
export const GetHotelReservationsRoomReadyStatusesEnum = {
    Pending: 'Pending',
    Completed: 'Completed',
    Failed: 'Failed',
    Sent: 'Sent',
    Received: 'Received',
    Cancelled: 'Cancelled',
    PendingAvailability: 'PendingAvailability'
} as const;
export type GetHotelReservationsRoomReadyStatusesEnum = typeof GetHotelReservationsRoomReadyStatusesEnum[keyof typeof GetHotelReservationsRoomReadyStatusesEnum];
/**
 * @export
 */
export const GetReservationFetchInstructionsEnum = {
    Reservation: 'Reservation',
    Comments: 'Comments',
    GuestComments: 'GuestComments',
    Packages: 'Packages',
    TotalCostOfStay: 'TotalCostOfStay',
    InventoryItems: 'InventoryItems',
    ReservationPaymentMethods: 'ReservationPaymentMethods',
    RoutingInstructions: 'RoutingInstructions',
    Preferences: 'Preferences',
    Memberships: 'Memberships',
    Alerts: 'Alerts',
    Traces: 'Traces',
    ConfirmationLetters: 'ConfirmationLetters',
    CallHistory: 'CallHistory',
    FixedCharges: 'FixedCharges',
    GuestMessages: 'GuestMessages',
    ReservationPolicies: 'ReservationPolicies',
    Indicators: 'Indicators',
    LinkedReservations: 'LinkedReservations',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestLastStay: 'GuestLastStay',
    ECoupons: 'ECoupons',
    TrackItItems: 'TrackItItems',
    ReservationAwards: 'ReservationAwards',
    WebRegistrationCards: 'WebRegistrationCards',
    ReservationActivities: 'ReservationActivities',
    ScheduledActivities: 'ScheduledActivities',
    PrepaidCards: 'PrepaidCards',
    Shares: 'Shares',
    Attachments: 'Attachments',
    Locators: 'Locators',
    ProfileAwards: 'ProfileAwards',
    TransactionDiversions: 'TransactionDiversions',
    Tickets: 'Tickets',
    GuestMemberships: 'GuestMemberships',
    ECertificates: 'ECertificates',
    UpsellInfo: 'UpsellInfo',
    RoomAssignedByAi: 'RoomAssignedByAI'
} as const;
export type GetReservationFetchInstructionsEnum = typeof GetReservationFetchInstructionsEnum[keyof typeof GetReservationFetchInstructionsEnum];
/**
 * @export
 */
export const GetReservationAllowedActionsEnum = {
    Cancel: 'Cancel',
    Move: 'Move',
    PreCharge: 'PreCharge',
    PostCharge: 'PostCharge',
    FacilitySchedule: 'FacilitySchedule',
    Upsell: 'Upsell',
    PreCheckIn: 'PreCheckIn',
    PostToNoShowCancel: 'PostToNoShowCancel',
    NoShow: 'NoShow',
    NameChange: 'NameChange',
    Discount: 'Discount',
    HouseKeeping: 'HouseKeeping',
    EnrollToPrimaryMembership: 'EnrollToPrimaryMembership',
    EnrollInProgress: 'EnrollInProgress'
} as const;
export type GetReservationAllowedActionsEnum = typeof GetReservationAllowedActionsEnum[keyof typeof GetReservationAllowedActionsEnum];
/**
 * @export
 */
export const GetReservationByExtIdFetchInstructionsEnum = {
    Reservation: 'Reservation',
    Comments: 'Comments',
    GuestComments: 'GuestComments',
    Packages: 'Packages',
    TotalCostOfStay: 'TotalCostOfStay',
    InventoryItems: 'InventoryItems',
    ReservationPaymentMethods: 'ReservationPaymentMethods',
    RoutingInstructions: 'RoutingInstructions',
    Preferences: 'Preferences',
    Memberships: 'Memberships',
    Alerts: 'Alerts',
    Traces: 'Traces',
    ConfirmationLetters: 'ConfirmationLetters',
    CallHistory: 'CallHistory',
    FixedCharges: 'FixedCharges',
    GuestMessages: 'GuestMessages',
    ReservationPolicies: 'ReservationPolicies',
    Indicators: 'Indicators',
    LinkedReservations: 'LinkedReservations',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestLastStay: 'GuestLastStay',
    ECoupons: 'ECoupons',
    TrackItItems: 'TrackItItems',
    ReservationAwards: 'ReservationAwards',
    WebRegistrationCards: 'WebRegistrationCards',
    ReservationActivities: 'ReservationActivities',
    ScheduledActivities: 'ScheduledActivities',
    PrepaidCards: 'PrepaidCards',
    Shares: 'Shares',
    Attachments: 'Attachments',
    Locators: 'Locators',
    ProfileAwards: 'ProfileAwards',
    TransactionDiversions: 'TransactionDiversions',
    Tickets: 'Tickets',
    GuestMemberships: 'GuestMemberships',
    ECertificates: 'ECertificates',
    UpsellInfo: 'UpsellInfo',
    RoomAssignedByAi: 'RoomAssignedByAI'
} as const;
export type GetReservationByExtIdFetchInstructionsEnum = typeof GetReservationByExtIdFetchInstructionsEnum[keyof typeof GetReservationByExtIdFetchInstructionsEnum];
/**
 * @export
 */
export const GetReservationByExtIdAllowedActionsEnum = {
    Cancel: 'Cancel',
    Move: 'Move',
    PreCharge: 'PreCharge',
    PostCharge: 'PostCharge',
    FacilitySchedule: 'FacilitySchedule',
    Upsell: 'Upsell',
    PreCheckIn: 'PreCheckIn',
    PostToNoShowCancel: 'PostToNoShowCancel',
    NoShow: 'NoShow',
    NameChange: 'NameChange',
    Discount: 'Discount',
    HouseKeeping: 'HouseKeeping',
    EnrollToPrimaryMembership: 'EnrollToPrimaryMembership',
    EnrollInProgress: 'EnrollInProgress'
} as const;
export type GetReservationByExtIdAllowedActionsEnum = typeof GetReservationByExtIdAllowedActionsEnum[keyof typeof GetReservationByExtIdAllowedActionsEnum];
/**
 * @export
 */
export const GetReservationsSearchTypeEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
} as const;
export type GetReservationsSearchTypeEnum = typeof GetReservationsSearchTypeEnum[keyof typeof GetReservationsSearchTypeEnum];
/**
 * @export
 */
export const GetReservationsOrderByEnum = {
    Nights: 'Nights',
    ArrivalDate: 'ArrivalDate',
    ArrivalDateEtr: 'ArrivalDateETR',
    DepartureDate: 'DepartureDate',
    GuestSurname: 'GuestSurname',
    RateAmount: 'RateAmount',
    RateCode: 'RateCode',
    Room: 'Room',
    RoomType: 'RoomType'
} as const;
export type GetReservationsOrderByEnum = typeof GetReservationsOrderByEnum[keyof typeof GetReservationsOrderByEnum];
/**
 * @export
 */
export const GetReservationsSortOrderEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
} as const;
export type GetReservationsSortOrderEnum = typeof GetReservationsSortOrderEnum[keyof typeof GetReservationsSortOrderEnum];
/**
 * @export
 */
export const GetReservationsHousekeepingRoomStatusesEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
} as const;
export type GetReservationsHousekeepingRoomStatusesEnum = typeof GetReservationsHousekeepingRoomStatusesEnum[keyof typeof GetReservationsHousekeepingRoomStatusesEnum];
/**
 * @export
 */
export const GetReservationsFetchInstructionsEnum = {
    Reservation: 'Reservation',
    ReservationId: 'ReservationID',
    Indicators: 'Indicators',
    Deposits: 'Deposits',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestServiceStatus: 'GuestServiceStatus',
    MasterInfo: 'MasterInfo',
    CancellationInfo: 'CancellationInfo',
    BlockReservations: 'BlockReservations',
    TaxType: 'TaxType',
    GuestDeviceNotification: 'GuestDeviceNotification',
    RoomAssignedByAi: 'RoomAssignedByAI'
} as const;
export type GetReservationsFetchInstructionsEnum = typeof GetReservationsFetchInstructionsEnum[keyof typeof GetReservationsFetchInstructionsEnum];
/**
 * @export
 */
export const GetReservationsSearchTypesEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
} as const;
export type GetReservationsSearchTypesEnum = typeof GetReservationsSearchTypesEnum[keyof typeof GetReservationsSearchTypesEnum];
/**
 * @export
 */
export const GetReservationsReservationStatusesEnum = {
    Cancelled: 'Cancelled',
    CheckedOut: 'CheckedOut',
    CheckedIn: 'CheckedIn',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    InHouse: 'InHouse',
    NoShow: 'NoShow',
    WaitList: 'WaitList'
} as const;
export type GetReservationsReservationStatusesEnum = typeof GetReservationsReservationStatusesEnum[keyof typeof GetReservationsReservationStatusesEnum];
/**
 * @export
 */
export const GetReservationsRoomReadyStatusesEnum = {
    Pending: 'Pending',
    Completed: 'Completed',
    Failed: 'Failed',
    Sent: 'Sent',
    Received: 'Received',
    Cancelled: 'Cancelled',
    PendingAvailability: 'PendingAvailability'
} as const;
export type GetReservationsRoomReadyStatusesEnum = typeof GetReservationsRoomReadyStatusesEnum[keyof typeof GetReservationsRoomReadyStatusesEnum];
