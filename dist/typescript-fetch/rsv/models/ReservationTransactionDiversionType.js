"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReservationTransactionDiversionTypeToJSON = exports.ReservationTransactionDiversionTypeFromJSONTyped = exports.ReservationTransactionDiversionTypeFromJSON = exports.instanceOfReservationTransactionDiversionType = void 0;
const runtime_1 = require("../runtime");
const CodeDescriptionType_1 = require("./CodeDescriptionType");
const CommentInfoType_1 = require("./CommentInfoType");
const MembershipTypeLevelType_1 = require("./MembershipTypeLevelType");
const ThresholdDetailsType_1 = require("./ThresholdDetailsType");
const TransactionDiversionDailyDetailType_1 = require("./TransactionDiversionDailyDetailType");
const TransactionDiversionRuleLevelType_1 = require("./TransactionDiversionRuleLevelType");
const TransactionDiversionRuleTypeType_1 = require("./TransactionDiversionRuleTypeType");
/**
 * Check if a given object implements the ReservationTransactionDiversionType interface.
 */
function instanceOfReservationTransactionDiversionType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfReservationTransactionDiversionType = instanceOfReservationTransactionDiversionType;
function ReservationTransactionDiversionTypeFromJSON(json) {
    return ReservationTransactionDiversionTypeFromJSONTyped(json, false);
}
exports.ReservationTransactionDiversionTypeFromJSON = ReservationTransactionDiversionTypeFromJSON;
function ReservationTransactionDiversionTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'code': !(0, runtime_1.exists)(json, 'code') ? undefined : json['code'],
        'dailyDetails': !(0, runtime_1.exists)(json, 'dailyDetails') ? undefined : (json['dailyDetails'].map(TransactionDiversionDailyDetailType_1.TransactionDiversionDailyDetailTypeFromJSON)),
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'displaySequence': !(0, runtime_1.exists)(json, 'displaySequence') ? undefined : json['displaySequence'],
        'diverted': !(0, runtime_1.exists)(json, 'diverted') ? undefined : json['diverted'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'inactive': !(0, runtime_1.exists)(json, 'inactive') ? undefined : json['inactive'],
        'level': !(0, runtime_1.exists)(json, 'level') ? undefined : (0, TransactionDiversionRuleLevelType_1.TransactionDiversionRuleLevelTypeFromJSON)(json['level']),
        'membership': !(0, runtime_1.exists)(json, 'membership') ? undefined : (0, MembershipTypeLevelType_1.MembershipTypeLevelTypeFromJSON)(json['membership']),
        'notes': !(0, runtime_1.exists)(json, 'notes') ? undefined : (0, CommentInfoType_1.CommentInfoTypeFromJSON)(json['notes']),
        'posted': !(0, runtime_1.exists)(json, 'posted') ? undefined : json['posted'],
        'targetRoom': !(0, runtime_1.exists)(json, 'targetRoom') ? undefined : json['targetRoom'],
        'thresholds': !(0, runtime_1.exists)(json, 'thresholds') ? undefined : (0, ThresholdDetailsType_1.ThresholdDetailsTypeFromJSON)(json['thresholds']),
        'transactionCodes': !(0, runtime_1.exists)(json, 'transactionCodes') ? undefined : (json['transactionCodes'].map(CodeDescriptionType_1.CodeDescriptionTypeFromJSON)),
        'type': !(0, runtime_1.exists)(json, 'type') ? undefined : (0, TransactionDiversionRuleTypeType_1.TransactionDiversionRuleTypeTypeFromJSON)(json['type']),
        'vipCode': !(0, runtime_1.exists)(json, 'vipCode') ? undefined : json['vipCode'],
    };
}
exports.ReservationTransactionDiversionTypeFromJSONTyped = ReservationTransactionDiversionTypeFromJSONTyped;
function ReservationTransactionDiversionTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'code': value.code,
        'dailyDetails': value.dailyDetails === undefined ? undefined : (value.dailyDetails.map(TransactionDiversionDailyDetailType_1.TransactionDiversionDailyDetailTypeToJSON)),
        'description': value.description,
        'displaySequence': value.displaySequence,
        'diverted': value.diverted,
        'hotelId': value.hotelId,
        'inactive': value.inactive,
        'level': (0, TransactionDiversionRuleLevelType_1.TransactionDiversionRuleLevelTypeToJSON)(value.level),
        'membership': (0, MembershipTypeLevelType_1.MembershipTypeLevelTypeToJSON)(value.membership),
        'notes': (0, CommentInfoType_1.CommentInfoTypeToJSON)(value.notes),
        'posted': value.posted,
        'targetRoom': value.targetRoom,
        'thresholds': (0, ThresholdDetailsType_1.ThresholdDetailsTypeToJSON)(value.thresholds),
        'transactionCodes': value.transactionCodes === undefined ? undefined : (value.transactionCodes.map(CodeDescriptionType_1.CodeDescriptionTypeToJSON)),
        'type': (0, TransactionDiversionRuleTypeType_1.TransactionDiversionRuleTypeTypeToJSON)(value.type),
        'vipCode': value.vipCode,
    };
}
exports.ReservationTransactionDiversionTypeToJSON = ReservationTransactionDiversionTypeToJSON;
