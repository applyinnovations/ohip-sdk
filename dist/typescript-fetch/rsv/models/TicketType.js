"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TicketTypeToJSON = exports.TicketTypeFromJSONTyped = exports.TicketTypeFromJSON = exports.instanceOfTicketType = void 0;
const runtime_1 = require("../runtime");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the TicketType interface.
 */
function instanceOfTicketType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfTicketType = instanceOfTicketType;
function TicketTypeFromJSON(json) {
    return TicketTypeFromJSONTyped(json, false);
}
exports.TicketTypeFromJSON = TicketTypeFromJSON;
function TicketTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'consumptionDate': !(0, runtime_1.exists)(json, 'consumptionDate') ? undefined : json['consumptionDate'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'issueDate': !(0, runtime_1.exists)(json, 'issueDate') ? undefined : json['issueDate'],
        'packageCode': !(0, runtime_1.exists)(json, 'packageCode') ? undefined : json['packageCode'],
        'price': !(0, runtime_1.exists)(json, 'price') ? undefined : json['price'],
        'quantity': !(0, runtime_1.exists)(json, 'quantity') ? undefined : json['quantity'],
        'rateCode': !(0, runtime_1.exists)(json, 'rateCode') ? undefined : json['rateCode'],
        'reference': !(0, runtime_1.exists)(json, 'reference') ? undefined : json['reference'],
        'reservationProductId': !(0, runtime_1.exists)(json, 'reservationProductId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['reservationProductId']),
        'status': !(0, runtime_1.exists)(json, 'status') ? undefined : json['status'],
        'statusDescription': !(0, runtime_1.exists)(json, 'statusDescription') ? undefined : json['statusDescription'],
        'ticketId': !(0, runtime_1.exists)(json, 'ticketId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['ticketId']),
        'ticketNumber': !(0, runtime_1.exists)(json, 'ticketNumber') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['ticketNumber']),
    };
}
exports.TicketTypeFromJSONTyped = TicketTypeFromJSONTyped;
function TicketTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'consumptionDate': value.consumptionDate,
        'description': value.description,
        'issueDate': value.issueDate,
        'packageCode': value.packageCode,
        'price': value.price,
        'quantity': value.quantity,
        'rateCode': value.rateCode,
        'reference': value.reference,
        'reservationProductId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.reservationProductId),
        'status': value.status,
        'statusDescription': value.statusDescription,
        'ticketId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.ticketId),
        'ticketNumber': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.ticketNumber),
    };
}
exports.TicketTypeToJSON = TicketTypeToJSON;
