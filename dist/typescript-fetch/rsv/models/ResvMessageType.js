"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResvMessageTypeToJSON = exports.ResvMessageTypeFromJSONTyped = exports.ResvMessageTypeFromJSON = exports.instanceOfResvMessageType = void 0;
const runtime_1 = require("../runtime");
const BlockId_1 = require("./BlockId");
const ReservationId_1 = require("./ReservationId");
const TypeOfMessageType_1 = require("./TypeOfMessageType");
/**
 * Check if a given object implements the ResvMessageType interface.
 */
function instanceOfResvMessageType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfResvMessageType = instanceOfResvMessageType;
function ResvMessageTypeFromJSON(json) {
    return ResvMessageTypeFromJSONTyped(json, false);
}
exports.ResvMessageTypeFromJSON = ResvMessageTypeFromJSON;
function ResvMessageTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'arrivalDate': !(0, runtime_1.exists)(json, 'arrivalDate') ? undefined : json['arrivalDate'],
        'blockCode': !(0, runtime_1.exists)(json, 'blockCode') ? undefined : json['blockCode'],
        'blockId': !(0, runtime_1.exists)(json, 'blockId') ? undefined : (0, BlockId_1.BlockIdFromJSON)(json['blockId']),
        'confirmationNo': !(0, runtime_1.exists)(json, 'confirmationNo') ? undefined : json['confirmationNo'],
        'departureDate': !(0, runtime_1.exists)(json, 'departureDate') ? undefined : json['departureDate'],
        'guaranteeCode': !(0, runtime_1.exists)(json, 'guaranteeCode') ? undefined : json['guaranteeCode'],
        'guestNameId': !(0, runtime_1.exists)(json, 'guestNameId') ? undefined : json['guestNameId'],
        'messageDate': !(0, runtime_1.exists)(json, 'messageDate') ? undefined : json['messageDate'],
        'messageText': !(0, runtime_1.exists)(json, 'messageText') ? undefined : json['messageText'],
        'noOfNights': !(0, runtime_1.exists)(json, 'noOfNights') ? undefined : json['noOfNights'],
        'operator': !(0, runtime_1.exists)(json, 'operator') ? undefined : json['operator'],
        'recipient': !(0, runtime_1.exists)(json, 'recipient') ? undefined : json['recipient'],
        'reservationId': !(0, runtime_1.exists)(json, 'reservationId') ? undefined : (0, ReservationId_1.ReservationIdFromJSON)(json['reservationId']),
        'reservationStatus': !(0, runtime_1.exists)(json, 'reservationStatus') ? undefined : json['reservationStatus'],
        'roomId': !(0, runtime_1.exists)(json, 'roomId') ? undefined : json['roomId'],
        'roomStatus': !(0, runtime_1.exists)(json, 'roomStatus') ? undefined : json['roomStatus'],
        'typeOfMessage': !(0, runtime_1.exists)(json, 'typeOfMessage') ? undefined : (0, TypeOfMessageType_1.TypeOfMessageTypeFromJSON)(json['typeOfMessage']),
    };
}
exports.ResvMessageTypeFromJSONTyped = ResvMessageTypeFromJSONTyped;
function ResvMessageTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'arrivalDate': value.arrivalDate,
        'blockCode': value.blockCode,
        'blockId': (0, BlockId_1.BlockIdToJSON)(value.blockId),
        'confirmationNo': value.confirmationNo,
        'departureDate': value.departureDate,
        'guaranteeCode': value.guaranteeCode,
        'guestNameId': value.guestNameId,
        'messageDate': value.messageDate,
        'messageText': value.messageText,
        'noOfNights': value.noOfNights,
        'operator': value.operator,
        'recipient': value.recipient,
        'reservationId': (0, ReservationId_1.ReservationIdToJSON)(value.reservationId),
        'reservationStatus': value.reservationStatus,
        'roomId': value.roomId,
        'roomStatus': value.roomStatus,
        'typeOfMessage': (0, TypeOfMessageType_1.TypeOfMessageTypeToJSON)(value.typeOfMessage),
    };
}
exports.ResvMessageTypeToJSON = ResvMessageTypeToJSON;
