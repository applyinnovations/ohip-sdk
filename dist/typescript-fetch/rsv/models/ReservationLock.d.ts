/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { InstanceLink } from './InstanceLink';
import type { ReservationId } from './ReservationId';
import type { WarningType } from './WarningType';
/**
 * Operation for requesting a lock on a reservation.
 * @export
 * @interface ReservationLock
 */
export interface ReservationLock {
    /**
     *
     * @type {ReservationId}
     * @memberof ReservationLock
     */
    reservationId?: ReservationId;
    /**
     * Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
     * @type {string}
     * @memberof ReservationLock
     */
    hotelId?: string;
    /**
     * If true, the operation will try to break the existing lock if the requesting user is the same as the owner of the lock.
     * @type {boolean}
     * @memberof ReservationLock
     */
    overrideIfLockedByRequestingUser?: boolean;
    /**
     * An identifier representing the record lock for the reservation under process.When passed,then it will verify that if the lock is still valid and return same lock handle.Else it will create new lock.
     * @type {number}
     * @memberof ReservationLock
     */
    lockHandle?: number;
    /**
     *
     * @type {Array<InstanceLink>}
     * @memberof ReservationLock
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof ReservationLock
     */
    warnings?: Array<WarningType>;
}
/**
 * Check if a given object implements the ReservationLock interface.
 */
export declare function instanceOfReservationLock(value: object): boolean;
export declare function ReservationLockFromJSON(json: any): ReservationLock;
export declare function ReservationLockFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationLock;
export declare function ReservationLockToJSON(value?: ReservationLock | null): any;
