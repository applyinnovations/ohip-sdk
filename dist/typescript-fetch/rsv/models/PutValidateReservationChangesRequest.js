"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PutValidateReservationChangesRequestToJSON = exports.PutValidateReservationChangesRequestFromJSONTyped = exports.PutValidateReservationChangesRequestFromJSON = exports.instanceOfPutValidateReservationChangesRequest = void 0;
const runtime_1 = require("../runtime");
const HotelReservationType_1 = require("./HotelReservationType");
const InstanceLink_1 = require("./InstanceLink");
const TimeSpanType_1 = require("./TimeSpanType");
const ValidateReservationChangesInstructions_1 = require("./ValidateReservationChangesInstructions");
const WarningType_1 = require("./WarningType");
/**
 * Check if a given object implements the PutValidateReservationChangesRequest interface.
 */
function instanceOfPutValidateReservationChangesRequest(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfPutValidateReservationChangesRequest = instanceOfPutValidateReservationChangesRequest;
function PutValidateReservationChangesRequestFromJSON(json) {
    return PutValidateReservationChangesRequestFromJSONTyped(json, false);
}
exports.PutValidateReservationChangesRequestFromJSON = PutValidateReservationChangesRequestFromJSON;
function PutValidateReservationChangesRequestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'instructions': !(0, runtime_1.exists)(json, 'instructions') ? undefined : (0, ValidateReservationChangesInstructions_1.ValidateReservationChangesInstructionsFromJSON)(json['instructions']),
        'links': !(0, runtime_1.exists)(json, 'links') ? undefined : (json['links'].map(InstanceLink_1.InstanceLinkFromJSON)),
        'reservation': !(0, runtime_1.exists)(json, 'reservation') ? undefined : (0, HotelReservationType_1.HotelReservationTypeFromJSON)(json['reservation']),
        'timeSpan': !(0, runtime_1.exists)(json, 'timeSpan') ? undefined : (0, TimeSpanType_1.TimeSpanTypeFromJSON)(json['timeSpan']),
        'warnings': !(0, runtime_1.exists)(json, 'warnings') ? undefined : (json['warnings'].map(WarningType_1.WarningTypeFromJSON)),
    };
}
exports.PutValidateReservationChangesRequestFromJSONTyped = PutValidateReservationChangesRequestFromJSONTyped;
function PutValidateReservationChangesRequestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'instructions': (0, ValidateReservationChangesInstructions_1.ValidateReservationChangesInstructionsToJSON)(value.instructions),
        'links': value.links === undefined ? undefined : (value.links.map(InstanceLink_1.InstanceLinkToJSON)),
        'reservation': (0, HotelReservationType_1.HotelReservationTypeToJSON)(value.reservation),
        'timeSpan': (0, TimeSpanType_1.TimeSpanTypeToJSON)(value.timeSpan),
        'warnings': value.warnings === undefined ? undefined : (value.warnings.map(WarningType_1.WarningTypeToJSON)),
    };
}
exports.PutValidateReservationChangesRequestToJSON = PutValidateReservationChangesRequestToJSON;
