/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CompanyType } from './CompanyType';
import type { CustomerType } from './CustomerType';
import type { ECertificateType } from './ECertificateType';
import type { ImageSetType } from './ImageSetType';
import type { LastStayInfoType } from './LastStayInfoType';
import type { ProfileCashieringType } from './ProfileCashieringType';
import type { ProfileCommissionType } from './ProfileCommissionType';
import type { ProfileRestrictions } from './ProfileRestrictions';
import type { ProfileStatusType } from './ProfileStatusType';
import type { ProfileTypeAddresses } from './ProfileTypeAddresses';
import type { ProfileTypeComments } from './ProfileTypeComments';
import type { ProfileTypeEmails } from './ProfileTypeEmails';
import type { ProfileTypePreferenceCollection } from './ProfileTypePreferenceCollection';
import type { ProfileTypeProfileDeliveryMethods } from './ProfileTypeProfileDeliveryMethods';
import type { ProfileTypeProfileMemberships } from './ProfileTypeProfileMemberships';
import type { ProfileTypeRelationships } from './ProfileTypeRelationships';
import type { ProfileTypeRelationshipsSummary } from './ProfileTypeRelationshipsSummary';
import type { ProfileTypeRoomOwnershipsList } from './ProfileTypeRoomOwnershipsList';
import type { ProfileTypeTelephones } from './ProfileTypeTelephones';
import type { ProfileTypeType } from './ProfileTypeType';
import type { ProfileTypeURLs } from './ProfileTypeURLs';
import type { ReservationHistoryFutureInfoType } from './ReservationHistoryFutureInfoType';
import type { ReservationStayHistoryFutureInfoType } from './ReservationStayHistoryFutureInfoType';
import type { UserDefinedFieldsType } from './UserDefinedFieldsType';
/**
 * Type provides the detailed information about the profile and its children.
 * @export
 * @interface ProfileType
 */
export interface ProfileType {
    /**
     *
     * @type {ProfileTypeAddresses}
     * @memberof ProfileType
     */
    addresses?: ProfileTypeAddresses;
    /**
     *
     * @type {ProfileCashieringType}
     * @memberof ProfileType
     */
    cashiering?: ProfileCashieringType;
    /**
     *
     * @type {ProfileTypeComments}
     * @memberof ProfileType
     */
    comments?: ProfileTypeComments;
    /**
     * Contains commission related details for the profile.
     * @type {Array<ProfileCommissionType>}
     * @memberof ProfileType
     */
    commissionInfoList?: Array<ProfileCommissionType>;
    /**
     *
     * @type {CompanyType}
     * @memberof ProfileType
     */
    company?: CompanyType;
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof ProfileType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof ProfileType
     */
    creatorId?: string;
    /**
     *
     * @type {CustomerType}
     * @memberof ProfileType
     */
    customer?: CustomerType;
    /**
     * List of e-certificates for the profile.
     * @type {Array<ECertificateType>}
     * @memberof ProfileType
     */
    eCertificates?: Array<ECertificateType>;
    /**
     * Eligible for Fiscal Folio/Payload generation.
     * @type {string}
     * @memberof ProfileType
     */
    eligibleForFiscalFolio?: string;
    /**
     *
     * @type {ProfileTypeEmails}
     * @memberof ProfileType
     */
    emails?: ProfileTypeEmails;
    /**
     * Populates true if the profile has commission configured false otherwise.
     * @type {boolean}
     * @memberof ProfileType
     */
    hasCommission?: boolean;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof ProfileType
     */
    lastModifierId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof ProfileType
     */
    lastModifyDateTime?: string;
    /**
     *
     * @type {LastStayInfoType}
     * @memberof ProfileType
     */
    lastStayInfo?: LastStayInfoType;
    /**
     * Mark this profile as recently accessed.
     * @type {boolean}
     * @memberof ProfileType
     */
    markAsRecentlyAccessed?: boolean;
    /**
     * "true" setting marks the profile to be kept from being purged, once the profile is marked inactive.
     * @type {boolean}
     * @memberof ProfileType
     */
    markForHistory?: boolean;
    /**
     * Owner Code associated to the profile.
     * @type {string}
     * @memberof ProfileType
     */
    ownerCode?: string;
    /**
     *
     * @type {ProfileTypePreferenceCollection}
     * @memberof ProfileType
     */
    preferenceCollection?: ProfileTypePreferenceCollection;
    /**
     *
     * @type {ProfileTypeProfileDeliveryMethods}
     * @memberof ProfileType
     */
    profileDeliveryMethods?: ProfileTypeProfileDeliveryMethods;
    /**
     *
     * @type {ImageSetType}
     * @memberof ProfileType
     */
    profileImage?: ImageSetType;
    /**
     *
     * @type {ProfileTypeProfileMemberships}
     * @memberof ProfileType
     */
    profileMemberships?: ProfileTypeProfileMemberships;
    /**
     *
     * @type {ProfileRestrictions}
     * @memberof ProfileType
     */
    profileRestrictions?: ProfileRestrictions;
    /**
     *
     * @type {ProfileTypeType}
     * @memberof ProfileType
     */
    profileType?: ProfileTypeType;
    /**
     * What level this profile is protected.
     * @type {string}
     * @memberof ProfileType
     */
    protectedBy?: string;
    /**
     * Hotel which this profile is registered with. This attribute is not used for configuration.
     * @type {string}
     * @memberof ProfileType
     */
    registeredProperty?: string;
    /**
     *
     * @type {ProfileTypeRelationships}
     * @memberof ProfileType
     */
    relationships?: ProfileTypeRelationships;
    /**
     *
     * @type {ProfileTypeRelationshipsSummary}
     * @memberof ProfileType
     */
    relationshipsSummary?: ProfileTypeRelationshipsSummary;
    /**
     * Hotel which this profile is to be registered. This attribute is only used during creation of profile.
     * @type {string}
     * @memberof ProfileType
     */
    requestForHotel?: string;
    /**
     *
     * @type {ReservationHistoryFutureInfoType}
     * @memberof ProfileType
     */
    reservationInfoList?: ReservationHistoryFutureInfoType;
    /**
     *
     * @type {ProfileTypeRoomOwnershipsList}
     * @memberof ProfileType
     */
    roomOwnershipsList?: ProfileTypeRoomOwnershipsList;
    /**
     * Flag to show inactive Room Owners.
     * @type {boolean}
     * @memberof ProfileType
     */
    showInactiveRoomOwners?: boolean;
    /**
     *
     * @type {ProfileStatusType}
     * @memberof ProfileType
     */
    statusCode?: ProfileStatusType;
    /**
     *
     * @type {ReservationStayHistoryFutureInfoType}
     * @memberof ProfileType
     */
    stayReservationInfoList?: ReservationStayHistoryFutureInfoType;
    /**
     *
     * @type {ProfileTypeTelephones}
     * @memberof ProfileType
     */
    telephones?: ProfileTypeTelephones;
    /**
     * Trace Code associated to the profile.
     * @type {string}
     * @memberof ProfileType
     */
    traceCode?: string;
    /**
     *
     * @type {ProfileTypeURLs}
     * @memberof ProfileType
     */
    uRLs?: ProfileTypeURLs;
    /**
     *
     * @type {UserDefinedFieldsType}
     * @memberof ProfileType
     */
    userDefinedFields?: UserDefinedFieldsType;
}
/**
 * Check if a given object implements the ProfileType interface.
 */
export declare function instanceOfProfileType(value: object): boolean;
export declare function ProfileTypeFromJSON(json: any): ProfileType;
export declare function ProfileTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProfileType;
export declare function ProfileTypeToJSON(value?: ProfileType | null): any;
