/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DateRangeType } from './DateRangeType';
import {
    DateRangeTypeFromJSON,
    DateRangeTypeFromJSONTyped,
    DateRangeTypeToJSON,
} from './DateRangeType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Authorizer Information
 * @export
 * @interface CompAccountingType
 */
export interface CompAccountingType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CompAccountingType
     */
    authorizerId?: UniqueIDType;
    /**
     * Application user name of the authorizer
     * @type {string}
     * @memberof CompAccountingType
     */
    authorizerUserName?: string;
    /**
     * Full name of the authorizer.
     * @type {string}
     * @memberof CompAccountingType
     */
    authorizerName?: string;
    /**
     * Rate code of the authorizer.
     * @type {string}
     * @memberof CompAccountingType
     */
    authorizerRateCode?: string;
    /**
     * Indicates whether user has the choice to have reservation inherit rate code from the authorizer.
     * @type {boolean}
     * @memberof CompAccountingType
     */
    inheritAuthorizerRateCode?: boolean;
    /**
     * AR Account Number of the authorizer
     * @type {string}
     * @memberof CompAccountingType
     */
    aRNumber?: string;
    /**
     * The Comp Type for this Account. Used when using the Comp types functionality
     * @type {string}
     * @memberof CompAccountingType
     */
    compTypeCode?: string;
    /**
     * The coupon or voucher number used by the external gaming system to track postings made to this routing.
     * @type {string}
     * @memberof CompAccountingType
     */
    compVoucherNo?: string;
    /**
     * 
     * @type {DateRangeType}
     * @memberof CompAccountingType
     */
    dateRange?: DateRangeType;
    /**
     * Membership number
     * @type {string}
     * @memberof CompAccountingType
     */
    membershipId?: string;
    /**
     * Unique Id of membership
     * @type {number}
     * @memberof CompAccountingType
     */
    membershipIdNo?: number;
    /**
     * Name displayed on the membership card
     * @type {string}
     * @memberof CompAccountingType
     */
    membershipNameOnCard?: string;
}

/**
 * Check if a given object implements the CompAccountingType interface.
 */
export function instanceOfCompAccountingType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CompAccountingTypeFromJSON(json: any): CompAccountingType {
    return CompAccountingTypeFromJSONTyped(json, false);
}

export function CompAccountingTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CompAccountingType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'authorizerId': !exists(json, 'authorizerId') ? undefined : UniqueIDTypeFromJSON(json['authorizerId']),
        'authorizerUserName': !exists(json, 'authorizerUserName') ? undefined : json['authorizerUserName'],
        'authorizerName': !exists(json, 'authorizerName') ? undefined : json['authorizerName'],
        'authorizerRateCode': !exists(json, 'authorizerRateCode') ? undefined : json['authorizerRateCode'],
        'inheritAuthorizerRateCode': !exists(json, 'inheritAuthorizerRateCode') ? undefined : json['inheritAuthorizerRateCode'],
        'aRNumber': !exists(json, 'aRNumber') ? undefined : json['aRNumber'],
        'compTypeCode': !exists(json, 'compTypeCode') ? undefined : json['compTypeCode'],
        'compVoucherNo': !exists(json, 'compVoucherNo') ? undefined : json['compVoucherNo'],
        'dateRange': !exists(json, 'dateRange') ? undefined : DateRangeTypeFromJSON(json['dateRange']),
        'membershipId': !exists(json, 'membershipId') ? undefined : json['membershipId'],
        'membershipIdNo': !exists(json, 'membershipIdNo') ? undefined : json['membershipIdNo'],
        'membershipNameOnCard': !exists(json, 'membershipNameOnCard') ? undefined : json['membershipNameOnCard'],
    };
}

export function CompAccountingTypeToJSON(value?: CompAccountingType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'authorizerId': UniqueIDTypeToJSON(value.authorizerId),
        'authorizerUserName': value.authorizerUserName,
        'authorizerName': value.authorizerName,
        'authorizerRateCode': value.authorizerRateCode,
        'inheritAuthorizerRateCode': value.inheritAuthorizerRateCode,
        'aRNumber': value.aRNumber,
        'compTypeCode': value.compTypeCode,
        'compVoucherNo': value.compVoucherNo,
        'dateRange': DateRangeTypeToJSON(value.dateRange),
        'membershipId': value.membershipId,
        'membershipIdNo': value.membershipIdNo,
        'membershipNameOnCard': value.membershipNameOnCard,
    };
}

