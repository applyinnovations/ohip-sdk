"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceRequestToJSON = exports.ServiceRequestFromJSONTyped = exports.ServiceRequestFromJSON = exports.instanceOfServiceRequest = void 0;
const runtime_1 = require("../runtime");
const CodeDescriptionType_1 = require("./CodeDescriptionType");
const ProfileId_1 = require("./ProfileId");
const ServiceRequestStatusType_1 = require("./ServiceRequestStatusType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the ServiceRequest interface.
 */
function instanceOfServiceRequest(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfServiceRequest = instanceOfServiceRequest;
function ServiceRequestFromJSON(json) {
    return ServiceRequestFromJSONTyped(json, false);
}
exports.ServiceRequestFromJSON = ServiceRequestFromJSON;
function ServiceRequestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'action': !(0, runtime_1.exists)(json, 'action') ? undefined : json['action'],
        'code': !(0, runtime_1.exists)(json, 'code') ? undefined : json['code'],
        'comment': !(0, runtime_1.exists)(json, 'comment') ? undefined : json['comment'],
        'department': !(0, runtime_1.exists)(json, 'department') ? undefined : (0, CodeDescriptionType_1.CodeDescriptionTypeFromJSON)(json['department']),
        'guestName': !(0, runtime_1.exists)(json, 'guestName') ? undefined : json['guestName'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'priority': !(0, runtime_1.exists)(json, 'priority') ? undefined : json['priority'],
        'profileId': !(0, runtime_1.exists)(json, 'profileId') ? undefined : (0, ProfileId_1.ProfileIdFromJSON)(json['profileId']),
        'reservationIdList': !(0, runtime_1.exists)(json, 'reservationIdList') ? undefined : (json['reservationIdList'].map(UniqueIDType_1.UniqueIDTypeFromJSON)),
        'room': !(0, runtime_1.exists)(json, 'room') ? undefined : json['room'],
        'status': !(0, runtime_1.exists)(json, 'status') ? undefined : (0, ServiceRequestStatusType_1.ServiceRequestStatusTypeFromJSON)(json['status']),
    };
}
exports.ServiceRequestFromJSONTyped = ServiceRequestFromJSONTyped;
function ServiceRequestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'action': value.action,
        'code': value.code,
        'comment': value.comment,
        'department': (0, CodeDescriptionType_1.CodeDescriptionTypeToJSON)(value.department),
        'guestName': value.guestName,
        'hotelId': value.hotelId,
        'priority': value.priority,
        'profileId': (0, ProfileId_1.ProfileIdToJSON)(value.profileId),
        'reservationIdList': value.reservationIdList === undefined ? undefined : (value.reservationIdList.map(UniqueIDType_1.UniqueIDTypeToJSON)),
        'room': value.room,
        'status': (0, ServiceRequestStatusType_1.ServiceRequestStatusTypeToJSON)(value.status),
    };
}
exports.ServiceRequestToJSON = ServiceRequestToJSON;
