/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Information regarding why reservation is being /has been waitlisted.
 * @export
 * @interface WaitlistResType
 */
export interface WaitlistResType {
    /**
     * Waitlist Reason Description.
     * @type {string}
     * @memberof WaitlistResType
     */
    reasonDescription?: string;
    /**
     * Waitlist priority Description.
     * @type {string}
     * @memberof WaitlistResType
     */
    priorityDescription?: string;
    /**
     * Description why the reservation is being /has been waitlisted.
     * @type {string}
     * @memberof WaitlistResType
     */
    description?: string;
    /**
     * Waitlist Reason Code.
     * @type {string}
     * @memberof WaitlistResType
     */
    reasonCode?: string;
    /**
     * Waitlist Priority Code.
     * @type {string}
     * @memberof WaitlistResType
     */
    priorityCode?: string;
    /**
     * Guest telephone number.
     * @type {string}
     * @memberof WaitlistResType
     */
    telephone?: string;
}

/**
 * Check if a given object implements the WaitlistResType interface.
 */
export function instanceOfWaitlistResType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function WaitlistResTypeFromJSON(json: any): WaitlistResType {
    return WaitlistResTypeFromJSONTyped(json, false);
}

export function WaitlistResTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): WaitlistResType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'reasonDescription': !exists(json, 'reasonDescription') ? undefined : json['reasonDescription'],
        'priorityDescription': !exists(json, 'priorityDescription') ? undefined : json['priorityDescription'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'reasonCode': !exists(json, 'reasonCode') ? undefined : json['reasonCode'],
        'priorityCode': !exists(json, 'priorityCode') ? undefined : json['priorityCode'],
        'telephone': !exists(json, 'telephone') ? undefined : json['telephone'],
    };
}

export function WaitlistResTypeToJSON(value?: WaitlistResType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'reasonDescription': value.reasonDescription,
        'priorityDescription': value.priorityDescription,
        'description': value.description,
        'reasonCode': value.reasonCode,
        'priorityCode': value.priorityCode,
        'telephone': value.telephone,
    };
}

