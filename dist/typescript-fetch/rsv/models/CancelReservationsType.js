"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CancelReservationsTypeToJSON = exports.CancelReservationsTypeFromJSONTyped = exports.CancelReservationsTypeFromJSON = exports.instanceOfCancelReservationsType = void 0;
const runtime_1 = require("../runtime");
const CancelReservationsInstructionsType_1 = require("./CancelReservationsInstructionsType");
const CancellationReasonType_1 = require("./CancellationReasonType");
const Reservations_1 = require("./Reservations");
/**
 * Check if a given object implements the CancelReservationsType interface.
 */
function instanceOfCancelReservationsType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCancelReservationsType = instanceOfCancelReservationsType;
function CancelReservationsTypeFromJSON(json) {
    return CancelReservationsTypeFromJSONTyped(json, false);
}
exports.CancelReservationsTypeFromJSON = CancelReservationsTypeFromJSON;
function CancelReservationsTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cancelInstructions': !(0, runtime_1.exists)(json, 'cancelInstructions') ? undefined : (0, CancelReservationsInstructionsType_1.CancelReservationsInstructionsTypeFromJSON)(json['cancelInstructions']),
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'reason': !(0, runtime_1.exists)(json, 'reason') ? undefined : (0, CancellationReasonType_1.CancellationReasonTypeFromJSON)(json['reason']),
        'reservations': !(0, runtime_1.exists)(json, 'reservations') ? undefined : (0, Reservations_1.ReservationsFromJSON)(json['reservations']),
    };
}
exports.CancelReservationsTypeFromJSONTyped = CancelReservationsTypeFromJSONTyped;
function CancelReservationsTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cancelInstructions': (0, CancelReservationsInstructionsType_1.CancelReservationsInstructionsTypeToJSON)(value.cancelInstructions),
        'hotelId': value.hotelId,
        'reason': (0, CancellationReasonType_1.CancellationReasonTypeToJSON)(value.reason),
        'reservations': (0, Reservations_1.ReservationsToJSON)(value.reservations),
    };
}
exports.CancelReservationsTypeToJSON = CancelReservationsTypeToJSON;
