"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerTypeToJSON = exports.CustomerTypeFromJSONTyped = exports.CustomerTypeFromJSON = exports.instanceOfCustomerType = void 0;
const runtime_1 = require("../runtime");
const AnonymizationType_1 = require("./AnonymizationType");
const CustomerTypeIdentifications_1 = require("./CustomerTypeIdentifications");
const PersonNameType_1 = require("./PersonNameType");
/**
 * Check if a given object implements the CustomerType interface.
 */
function instanceOfCustomerType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCustomerType = instanceOfCustomerType;
function CustomerTypeFromJSON(json) {
    return CustomerTypeFromJSONTyped(json, false);
}
exports.CustomerTypeFromJSON = CustomerTypeFromJSON;
function CustomerTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'personName': !(0, runtime_1.exists)(json, 'personName') ? undefined : (json['personName'].map(PersonNameType_1.PersonNameTypeFromJSON)),
        'anonymization': !(0, runtime_1.exists)(json, 'anonymization') ? undefined : (0, AnonymizationType_1.AnonymizationTypeFromJSON)(json['anonymization']),
        'identifications': !(0, runtime_1.exists)(json, 'identifications') ? undefined : (0, CustomerTypeIdentifications_1.CustomerTypeIdentificationsFromJSON)(json['identifications']),
        'gender': !(0, runtime_1.exists)(json, 'gender') ? undefined : json['gender'],
        'birthDate': !(0, runtime_1.exists)(json, 'birthDate') ? undefined : json['birthDate'],
        'birthDateMasked': !(0, runtime_1.exists)(json, 'birthDateMasked') ? undefined : json['birthDateMasked'],
        'language': !(0, runtime_1.exists)(json, 'language') ? undefined : json['language'],
        'nationality': !(0, runtime_1.exists)(json, 'nationality') ? undefined : json['nationality'],
        'nationalityDescription': !(0, runtime_1.exists)(json, 'nationalityDescription') ? undefined : json['nationalityDescription'],
        'customerValue': !(0, runtime_1.exists)(json, 'customerValue') ? undefined : json['customerValue'],
        'creditRating': !(0, runtime_1.exists)(json, 'creditRating') ? undefined : json['creditRating'],
        'vipStatus': !(0, runtime_1.exists)(json, 'vipStatus') ? undefined : json['vipStatus'],
        'vipDescription': !(0, runtime_1.exists)(json, 'vipDescription') ? undefined : json['vipDescription'],
        'birthPlace': !(0, runtime_1.exists)(json, 'birthPlace') ? undefined : json['birthPlace'],
        'privateProfile': !(0, runtime_1.exists)(json, 'privateProfile') ? undefined : json['privateProfile'],
        'blacklist': !(0, runtime_1.exists)(json, 'blacklist') ? undefined : json['blacklist'],
    };
}
exports.CustomerTypeFromJSONTyped = CustomerTypeFromJSONTyped;
function CustomerTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'personName': value.personName === undefined ? undefined : (value.personName.map(PersonNameType_1.PersonNameTypeToJSON)),
        'anonymization': (0, AnonymizationType_1.AnonymizationTypeToJSON)(value.anonymization),
        'identifications': (0, CustomerTypeIdentifications_1.CustomerTypeIdentificationsToJSON)(value.identifications),
        'gender': value.gender,
        'birthDate': value.birthDate,
        'birthDateMasked': value.birthDateMasked,
        'language': value.language,
        'nationality': value.nationality,
        'nationalityDescription': value.nationalityDescription,
        'customerValue': value.customerValue,
        'creditRating': value.creditRating,
        'vipStatus': value.vipStatus,
        'vipDescription': value.vipDescription,
        'birthPlace': value.birthPlace,
        'privateProfile': value.privateProfile,
        'blacklist': value.blacklist,
    };
}
exports.CustomerTypeToJSON = CustomerTypeToJSON;
