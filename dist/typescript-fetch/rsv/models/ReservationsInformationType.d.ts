/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CompanyDetails } from './CompanyDetails';
import type { DistinctIDType } from './DistinctIDType';
import type { ExternalReferenceType } from './ExternalReferenceType';
import type { GroupDetails } from './GroupDetails';
import type { GuestDetails } from './GuestDetails';
import type { MembershipDetails } from './MembershipDetails';
import type { ReservationDates } from './ReservationDates';
import type { TravelAgentDetails } from './TravelAgentDetails';
/**
 * Reservations Information.
 * @export
 * @interface ReservationsInformationType
 */
export interface ReservationsInformationType {
    /**
     * Property code.
     * @type {string}
     * @memberof ReservationsInformationType
     */
    hotelId?: string;
    /**
     * Unique identifiers for both internal and external systems Eg: ReservationId, ConfirmationNumber, CancellationNumber, ExternalReferenceNumber etc
     * @type {Array<DistinctIDType>}
     * @memberof ReservationsInformationType
     */
    reservationIdList?: Array<DistinctIDType>;
    /**
     * This type contains unique information of external reference.
     * @type {Array<ExternalReferenceType>}
     * @memberof ReservationsInformationType
     */
    externalReferences?: Array<ExternalReferenceType>;
    /**
     *
     * @type {GuestDetails}
     * @memberof ReservationsInformationType
     */
    guestDetails?: GuestDetails;
    /**
     *
     * @type {ReservationDates}
     * @memberof ReservationsInformationType
     */
    reservationDates?: ReservationDates;
    /**
     *
     * @type {CompanyDetails}
     * @memberof ReservationsInformationType
     */
    companyDetails?: CompanyDetails;
    /**
     *
     * @type {TravelAgentDetails}
     * @memberof ReservationsInformationType
     */
    travelAgentDetails?: TravelAgentDetails;
    /**
     *
     * @type {GroupDetails}
     * @memberof ReservationsInformationType
     */
    groupDetails?: GroupDetails;
    /**
     * Unique identifiers for Blocks. Eg: BlockId, BlockCode
     * @type {Array<DistinctIDType>}
     * @memberof ReservationsInformationType
     */
    blockIdList?: Array<DistinctIDType>;
    /**
     *
     * @type {MembershipDetails}
     * @memberof ReservationsInformationType
     */
    membershipDetails?: MembershipDetails;
    /**
     * Total number of adults.
     * @type {number}
     * @memberof ReservationsInformationType
     */
    adults?: number;
    /**
     * Number of children.
     * @type {number}
     * @memberof ReservationsInformationType
     */
    children?: number;
    /**
     * Number of rooms.
     * @type {number}
     * @memberof ReservationsInformationType
     */
    noOfRooms?: number;
    /**
     * Total share amount.
     * @type {number}
     * @memberof ReservationsInformationType
     */
    amount?: number;
    /**
     * Balance.
     * @type {number}
     * @memberof ReservationsInformationType
     */
    balance?: number;
    /**
     * Rate code used for the reservation.
     * @type {string}
     * @memberof ReservationsInformationType
     */
    rateCode?: string;
    /**
     * Currency code.
     * @type {string}
     * @memberof ReservationsInformationType
     */
    currencyCode?: string;
    /**
     * Reservation status.
     * @type {string}
     * @memberof ReservationsInformationType
     */
    reservationStatus?: string;
    /**
     * Computed reservation status.
     * @type {string}
     * @memberof ReservationsInformationType
     */
    computedReservationStatus?: string;
    /**
     * Internal User ID used to create reservation.
     * @type {string}
     * @memberof ReservationsInformationType
     */
    creatorId?: string;
    /**
     * Internal User ID used to update the reservation details.
     * @type {string}
     * @memberof ReservationsInformationType
     */
    lastModifierId?: string;
    /**
     * Reservation guarantee code.
     * @type {string}
     * @memberof ReservationsInformationType
     */
    guaranteeCode?: string;
    /**
     * Payment method used for the reservation.
     * @type {string}
     * @memberof ReservationsInformationType
     */
    paymentType?: string;
    /**
     * Number of Nights
     * @type {number}
     * @memberof ReservationsInformationType
     */
    nights?: number;
    /**
     * Promotion Code for the Reservation.
     * @type {string}
     * @memberof ReservationsInformationType
     */
    promotionCode?: string;
    /**
     * Room Number.
     * @type {string}
     * @memberof ReservationsInformationType
     */
    roomId?: string;
    /**
     * Source of the created reservation.
     * @type {string}
     * @memberof ReservationsInformationType
     */
    sourceCode?: string;
    /**
     * Channel used to create the reservation.
     * @type {string}
     * @memberof ReservationsInformationType
     */
    originCode?: string;
    /**
     * Market code of the reservation.
     * @type {string}
     * @memberof ReservationsInformationType
     */
    marketCode?: string;
    /**
     * Arrival Time of reservation.
     * @type {string}
     * @memberof ReservationsInformationType
     */
    arrivalTime?: string;
    /**
     * Departure Time of reservation.
     * @type {string}
     * @memberof ReservationsInformationType
     */
    departureTime?: string;
    /**
     * Room Type.
     * @type {string}
     * @memberof ReservationsInformationType
     */
    roomType?: string;
    /**
     * Booked Room Type.
     * @type {string}
     * @memberof ReservationsInformationType
     */
    bookedRoomType?: string;
    /**
     * VIP Status.
     * @type {string}
     * @memberof ReservationsInformationType
     */
    vipStatus?: string;
    /**
     * Party code.
     * @type {string}
     * @memberof ReservationsInformationType
     */
    linkCode?: string;
    /**
     * Registration card number.
     * @type {string}
     * @memberof ReservationsInformationType
     */
    registrationCardNumber?: string;
    /**
     * Indicates whether the reservation is pre-registered for internet check-in or not.
     * @type {boolean}
     * @memberof ReservationsInformationType
     */
    preRegistered?: boolean;
    /**
     * Indicates if the reservation has performed an Advance Check In.
     * @type {boolean}
     * @memberof ReservationsInformationType
     */
    advancedCheckedIn?: boolean;
    /**
     * Indicates if the reservation is shared or not.
     * @type {boolean}
     * @memberof ReservationsInformationType
     */
    shared?: boolean;
}
/**
 * Check if a given object implements the ReservationsInformationType interface.
 */
export declare function instanceOfReservationsInformationType(value: object): boolean;
export declare function ReservationsInformationTypeFromJSON(json: any): ReservationsInformationType;
export declare function ReservationsInformationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationsInformationType;
export declare function ReservationsInformationTypeToJSON(value?: ReservationsInformationType | null): any;
