"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReservationsInformationTypeToJSON = exports.ReservationsInformationTypeFromJSONTyped = exports.ReservationsInformationTypeFromJSON = exports.instanceOfReservationsInformationType = void 0;
const runtime_1 = require("../runtime");
const CompanyDetails_1 = require("./CompanyDetails");
const DistinctIDType_1 = require("./DistinctIDType");
const ExternalReferenceType_1 = require("./ExternalReferenceType");
const GroupDetails_1 = require("./GroupDetails");
const GuestDetails_1 = require("./GuestDetails");
const MembershipDetails_1 = require("./MembershipDetails");
const ReservationDates_1 = require("./ReservationDates");
const TravelAgentDetails_1 = require("./TravelAgentDetails");
/**
 * Check if a given object implements the ReservationsInformationType interface.
 */
function instanceOfReservationsInformationType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfReservationsInformationType = instanceOfReservationsInformationType;
function ReservationsInformationTypeFromJSON(json) {
    return ReservationsInformationTypeFromJSONTyped(json, false);
}
exports.ReservationsInformationTypeFromJSON = ReservationsInformationTypeFromJSON;
function ReservationsInformationTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'reservationIdList': !(0, runtime_1.exists)(json, 'reservationIdList') ? undefined : (json['reservationIdList'].map(DistinctIDType_1.DistinctIDTypeFromJSON)),
        'externalReferences': !(0, runtime_1.exists)(json, 'externalReferences') ? undefined : (json['externalReferences'].map(ExternalReferenceType_1.ExternalReferenceTypeFromJSON)),
        'guestDetails': !(0, runtime_1.exists)(json, 'guestDetails') ? undefined : (0, GuestDetails_1.GuestDetailsFromJSON)(json['guestDetails']),
        'reservationDates': !(0, runtime_1.exists)(json, 'reservationDates') ? undefined : (0, ReservationDates_1.ReservationDatesFromJSON)(json['reservationDates']),
        'companyDetails': !(0, runtime_1.exists)(json, 'companyDetails') ? undefined : (0, CompanyDetails_1.CompanyDetailsFromJSON)(json['companyDetails']),
        'travelAgentDetails': !(0, runtime_1.exists)(json, 'travelAgentDetails') ? undefined : (0, TravelAgentDetails_1.TravelAgentDetailsFromJSON)(json['travelAgentDetails']),
        'groupDetails': !(0, runtime_1.exists)(json, 'groupDetails') ? undefined : (0, GroupDetails_1.GroupDetailsFromJSON)(json['groupDetails']),
        'blockIdList': !(0, runtime_1.exists)(json, 'blockIdList') ? undefined : (json['blockIdList'].map(DistinctIDType_1.DistinctIDTypeFromJSON)),
        'membershipDetails': !(0, runtime_1.exists)(json, 'membershipDetails') ? undefined : (0, MembershipDetails_1.MembershipDetailsFromJSON)(json['membershipDetails']),
        'adults': !(0, runtime_1.exists)(json, 'adults') ? undefined : json['adults'],
        'children': !(0, runtime_1.exists)(json, 'children') ? undefined : json['children'],
        'noOfRooms': !(0, runtime_1.exists)(json, 'noOfRooms') ? undefined : json['noOfRooms'],
        'amount': !(0, runtime_1.exists)(json, 'amount') ? undefined : json['amount'],
        'balance': !(0, runtime_1.exists)(json, 'balance') ? undefined : json['balance'],
        'rateCode': !(0, runtime_1.exists)(json, 'rateCode') ? undefined : json['rateCode'],
        'currencyCode': !(0, runtime_1.exists)(json, 'currencyCode') ? undefined : json['currencyCode'],
        'reservationStatus': !(0, runtime_1.exists)(json, 'reservationStatus') ? undefined : json['reservationStatus'],
        'computedReservationStatus': !(0, runtime_1.exists)(json, 'computedReservationStatus') ? undefined : json['computedReservationStatus'],
        'creatorId': !(0, runtime_1.exists)(json, 'creatorId') ? undefined : json['creatorId'],
        'lastModifierId': !(0, runtime_1.exists)(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'guaranteeCode': !(0, runtime_1.exists)(json, 'guaranteeCode') ? undefined : json['guaranteeCode'],
        'paymentType': !(0, runtime_1.exists)(json, 'paymentType') ? undefined : json['paymentType'],
        'nights': !(0, runtime_1.exists)(json, 'nights') ? undefined : json['nights'],
        'promotionCode': !(0, runtime_1.exists)(json, 'promotionCode') ? undefined : json['promotionCode'],
        'roomId': !(0, runtime_1.exists)(json, 'roomId') ? undefined : json['roomId'],
        'sourceCode': !(0, runtime_1.exists)(json, 'sourceCode') ? undefined : json['sourceCode'],
        'originCode': !(0, runtime_1.exists)(json, 'originCode') ? undefined : json['originCode'],
        'marketCode': !(0, runtime_1.exists)(json, 'marketCode') ? undefined : json['marketCode'],
        'arrivalTime': !(0, runtime_1.exists)(json, 'arrivalTime') ? undefined : json['arrivalTime'],
        'departureTime': !(0, runtime_1.exists)(json, 'departureTime') ? undefined : json['departureTime'],
        'roomType': !(0, runtime_1.exists)(json, 'roomType') ? undefined : json['roomType'],
        'bookedRoomType': !(0, runtime_1.exists)(json, 'bookedRoomType') ? undefined : json['bookedRoomType'],
        'vipStatus': !(0, runtime_1.exists)(json, 'vipStatus') ? undefined : json['vipStatus'],
        'linkCode': !(0, runtime_1.exists)(json, 'linkCode') ? undefined : json['linkCode'],
        'registrationCardNumber': !(0, runtime_1.exists)(json, 'registrationCardNumber') ? undefined : json['registrationCardNumber'],
        'preRegistered': !(0, runtime_1.exists)(json, 'preRegistered') ? undefined : json['preRegistered'],
        'advancedCheckedIn': !(0, runtime_1.exists)(json, 'advancedCheckedIn') ? undefined : json['advancedCheckedIn'],
        'shared': !(0, runtime_1.exists)(json, 'shared') ? undefined : json['shared'],
    };
}
exports.ReservationsInformationTypeFromJSONTyped = ReservationsInformationTypeFromJSONTyped;
function ReservationsInformationTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'reservationIdList': value.reservationIdList === undefined ? undefined : (value.reservationIdList.map(DistinctIDType_1.DistinctIDTypeToJSON)),
        'externalReferences': value.externalReferences === undefined ? undefined : (value.externalReferences.map(ExternalReferenceType_1.ExternalReferenceTypeToJSON)),
        'guestDetails': (0, GuestDetails_1.GuestDetailsToJSON)(value.guestDetails),
        'reservationDates': (0, ReservationDates_1.ReservationDatesToJSON)(value.reservationDates),
        'companyDetails': (0, CompanyDetails_1.CompanyDetailsToJSON)(value.companyDetails),
        'travelAgentDetails': (0, TravelAgentDetails_1.TravelAgentDetailsToJSON)(value.travelAgentDetails),
        'groupDetails': (0, GroupDetails_1.GroupDetailsToJSON)(value.groupDetails),
        'blockIdList': value.blockIdList === undefined ? undefined : (value.blockIdList.map(DistinctIDType_1.DistinctIDTypeToJSON)),
        'membershipDetails': (0, MembershipDetails_1.MembershipDetailsToJSON)(value.membershipDetails),
        'adults': value.adults,
        'children': value.children,
        'noOfRooms': value.noOfRooms,
        'amount': value.amount,
        'balance': value.balance,
        'rateCode': value.rateCode,
        'currencyCode': value.currencyCode,
        'reservationStatus': value.reservationStatus,
        'computedReservationStatus': value.computedReservationStatus,
        'creatorId': value.creatorId,
        'lastModifierId': value.lastModifierId,
        'guaranteeCode': value.guaranteeCode,
        'paymentType': value.paymentType,
        'nights': value.nights,
        'promotionCode': value.promotionCode,
        'roomId': value.roomId,
        'sourceCode': value.sourceCode,
        'originCode': value.originCode,
        'marketCode': value.marketCode,
        'arrivalTime': value.arrivalTime,
        'departureTime': value.departureTime,
        'roomType': value.roomType,
        'bookedRoomType': value.bookedRoomType,
        'vipStatus': value.vipStatus,
        'linkCode': value.linkCode,
        'registrationCardNumber': value.registrationCardNumber,
        'preRegistered': value.preRegistered,
        'advancedCheckedIn': value.advancedCheckedIn,
        'shared': value.shared,
    };
}
exports.ReservationsInformationTypeToJSON = ReservationsInformationTypeToJSON;
