"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeliveryHistoryTypeToJSON = exports.DeliveryHistoryTypeFromJSONTyped = exports.DeliveryHistoryTypeFromJSON = exports.instanceOfDeliveryHistoryType = void 0;
const runtime_1 = require("../runtime");
const DeliveryMethodType_1 = require("./DeliveryMethodType");
const StatusType_1 = require("./StatusType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the DeliveryHistoryType interface.
 */
function instanceOfDeliveryHistoryType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfDeliveryHistoryType = instanceOfDeliveryHistoryType;
function DeliveryHistoryTypeFromJSON(json) {
    return DeliveryHistoryTypeFromJSONTyped(json, false);
}
exports.DeliveryHistoryTypeFromJSON = DeliveryHistoryTypeFromJSON;
function DeliveryHistoryTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'createDateTime': !(0, runtime_1.exists)(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !(0, runtime_1.exists)(json, 'creatorId') ? undefined : json['creatorId'],
        'deliveryDate': !(0, runtime_1.exists)(json, 'deliveryDate') ? undefined : json['deliveryDate'],
        'deliveryId': !(0, runtime_1.exists)(json, 'deliveryId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['deliveryId']),
        'deliveryMethod': !(0, runtime_1.exists)(json, 'deliveryMethod') ? undefined : (0, DeliveryMethodType_1.DeliveryMethodTypeFromJSON)(json['deliveryMethod']),
        'deliveryStatus': !(0, runtime_1.exists)(json, 'deliveryStatus') ? undefined : (0, StatusType_1.StatusTypeFromJSON)(json['deliveryStatus']),
        'errorDescription': !(0, runtime_1.exists)(json, 'errorDescription') ? undefined : json['errorDescription'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'interfaceId': !(0, runtime_1.exists)(json, 'interfaceId') ? undefined : json['interfaceId'],
        'lastModifierId': !(0, runtime_1.exists)(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'lastModifyDateTime': !(0, runtime_1.exists)(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'purgeDate': !(0, runtime_1.exists)(json, 'purgeDate') ? undefined : json['purgeDate'],
        'resvNameId': !(0, runtime_1.exists)(json, 'resvNameId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['resvNameId']),
        'retryCount': !(0, runtime_1.exists)(json, 'retryCount') ? undefined : json['retryCount'],
    };
}
exports.DeliveryHistoryTypeFromJSONTyped = DeliveryHistoryTypeFromJSONTyped;
function DeliveryHistoryTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'deliveryDate': value.deliveryDate,
        'deliveryId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.deliveryId),
        'deliveryMethod': (0, DeliveryMethodType_1.DeliveryMethodTypeToJSON)(value.deliveryMethod),
        'deliveryStatus': (0, StatusType_1.StatusTypeToJSON)(value.deliveryStatus),
        'errorDescription': value.errorDescription,
        'hotelId': value.hotelId,
        'interfaceId': value.interfaceId,
        'lastModifierId': value.lastModifierId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'purgeDate': value.purgeDate,
        'resvNameId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.resvNameId),
        'retryCount': value.retryCount,
    };
}
exports.DeliveryHistoryTypeToJSON = DeliveryHistoryTypeToJSON;
