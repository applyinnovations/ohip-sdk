"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PutReinstateReservationByExtIdRequestToJSON = exports.PutReinstateReservationByExtIdRequestFromJSONTyped = exports.PutReinstateReservationByExtIdRequestFromJSON = exports.instanceOfPutReinstateReservationByExtIdRequest = void 0;
const runtime_1 = require("../runtime");
const EffectiveRatesType_1 = require("./EffectiveRatesType");
const HotelReservationType_1 = require("./HotelReservationType");
const Links_1 = require("./Links");
const ReservationIdList_1 = require("./ReservationIdList");
const UniqueIDListType_1 = require("./UniqueIDListType");
const WarningsType_1 = require("./WarningsType");
/**
 * Check if a given object implements the PutReinstateReservationByExtIdRequest interface.
 */
function instanceOfPutReinstateReservationByExtIdRequest(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfPutReinstateReservationByExtIdRequest = instanceOfPutReinstateReservationByExtIdRequest;
function PutReinstateReservationByExtIdRequestFromJSON(json) {
    return PutReinstateReservationByExtIdRequestFromJSONTyped(json, false);
}
exports.PutReinstateReservationByExtIdRequestFromJSON = PutReinstateReservationByExtIdRequestFromJSON;
function PutReinstateReservationByExtIdRequestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'additionalReservationIdList': !(0, runtime_1.exists)(json, 'additionalReservationIdList') ? undefined : (0, UniqueIDListType_1.UniqueIDListTypeFromJSON)(json['additionalReservationIdList']),
        'effectiveRates': !(0, runtime_1.exists)(json, 'effectiveRates') ? undefined : (0, EffectiveRatesType_1.EffectiveRatesTypeFromJSON)(json['effectiveRates']),
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'links': !(0, runtime_1.exists)(json, 'links') ? undefined : (0, Links_1.LinksFromJSON)(json['links']),
        'overrideInventory': !(0, runtime_1.exists)(json, 'overrideInventory') ? undefined : json['overrideInventory'],
        'overrideRates': !(0, runtime_1.exists)(json, 'overrideRates') ? undefined : json['overrideRates'],
        'overrideRoomAllocation': !(0, runtime_1.exists)(json, 'overrideRoomAllocation') ? undefined : json['overrideRoomAllocation'],
        'overrideRoomOutOfService': !(0, runtime_1.exists)(json, 'overrideRoomOutOfService') ? undefined : json['overrideRoomOutOfService'],
        'reservation': !(0, runtime_1.exists)(json, 'reservation') ? undefined : (0, HotelReservationType_1.HotelReservationTypeFromJSON)(json['reservation']),
        'reservationIdList': !(0, runtime_1.exists)(json, 'reservationIdList') ? undefined : (0, ReservationIdList_1.ReservationIdListFromJSON)(json['reservationIdList']),
        'reservationLockHandle': !(0, runtime_1.exists)(json, 'reservationLockHandle') ? undefined : json['reservationLockHandle'],
        'warnings': !(0, runtime_1.exists)(json, 'warnings') ? undefined : (0, WarningsType_1.WarningsTypeFromJSON)(json['warnings']),
    };
}
exports.PutReinstateReservationByExtIdRequestFromJSONTyped = PutReinstateReservationByExtIdRequestFromJSONTyped;
function PutReinstateReservationByExtIdRequestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'additionalReservationIdList': (0, UniqueIDListType_1.UniqueIDListTypeToJSON)(value.additionalReservationIdList),
        'effectiveRates': (0, EffectiveRatesType_1.EffectiveRatesTypeToJSON)(value.effectiveRates),
        'hotelId': value.hotelId,
        'links': (0, Links_1.LinksToJSON)(value.links),
        'overrideInventory': value.overrideInventory,
        'overrideRates': value.overrideRates,
        'overrideRoomAllocation': value.overrideRoomAllocation,
        'overrideRoomOutOfService': value.overrideRoomOutOfService,
        'reservation': (0, HotelReservationType_1.HotelReservationTypeToJSON)(value.reservation),
        'reservationIdList': (0, ReservationIdList_1.ReservationIdListToJSON)(value.reservationIdList),
        'reservationLockHandle': value.reservationLockHandle,
        'warnings': (0, WarningsType_1.WarningsTypeToJSON)(value.warnings),
    };
}
exports.PutReinstateReservationByExtIdRequestToJSON = PutReinstateReservationByExtIdRequestToJSON;
