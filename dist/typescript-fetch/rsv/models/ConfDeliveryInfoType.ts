/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConfDeliveryMethod } from './ConfDeliveryMethod';
import {
    ConfDeliveryMethodFromJSON,
    ConfDeliveryMethodFromJSONTyped,
    ConfDeliveryMethodToJSON,
} from './ConfDeliveryMethod';
import type { SentConfirmationStatus } from './SentConfirmationStatus';
import {
    SentConfirmationStatusFromJSON,
    SentConfirmationStatusFromJSONTyped,
    SentConfirmationStatusToJSON,
} from './SentConfirmationStatus';

/**
 * 
 * @export
 * @interface ConfDeliveryInfoType
 */
export interface ConfDeliveryInfoType {
    /**
     * 
     * @type {ConfDeliveryMethod}
     * @memberof ConfDeliveryInfoType
     */
    communicationType?: ConfDeliveryMethod;
    /**
     * 
     * @type {SentConfirmationStatus}
     * @memberof ConfDeliveryInfoType
     */
    lastStatus?: SentConfirmationStatus;
    /**
     * Date of last attempt to send confirmation letter.
     * @type {string}
     * @memberof ConfDeliveryInfoType
     */
    lastAttempted?: string;
    /**
     * Number of success letter sent.
     * @type {number}
     * @memberof ConfDeliveryInfoType
     */
    successfulTries?: number;
}

/**
 * Check if a given object implements the ConfDeliveryInfoType interface.
 */
export function instanceOfConfDeliveryInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConfDeliveryInfoTypeFromJSON(json: any): ConfDeliveryInfoType {
    return ConfDeliveryInfoTypeFromJSONTyped(json, false);
}

export function ConfDeliveryInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfDeliveryInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'communicationType': !exists(json, 'communicationType') ? undefined : ConfDeliveryMethodFromJSON(json['communicationType']),
        'lastStatus': !exists(json, 'lastStatus') ? undefined : SentConfirmationStatusFromJSON(json['lastStatus']),
        'lastAttempted': !exists(json, 'lastAttempted') ? undefined : json['lastAttempted'],
        'successfulTries': !exists(json, 'successfulTries') ? undefined : json['successfulTries'],
    };
}

export function ConfDeliveryInfoTypeToJSON(value?: ConfDeliveryInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'communicationType': ConfDeliveryMethodToJSON(value.communicationType),
        'lastStatus': SentConfirmationStatusToJSON(value.lastStatus),
        'lastAttempted': value.lastAttempted,
        'successfulTries': value.successfulTries,
    };
}

