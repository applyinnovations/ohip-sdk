/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FacilitySchedulerOptionType } from './FacilitySchedulerOptionType';
import {
    FacilitySchedulerOptionTypeFromJSON,
    FacilitySchedulerOptionTypeFromJSONTyped,
    FacilitySchedulerOptionTypeToJSON,
} from './FacilitySchedulerOptionType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Instructions for Changing a Reservation.
 * @export
 * @interface ChangeInstructionType
 */
export interface ChangeInstructionType {
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof ChangeInstructionType
     */
    shareReservations?: Array<UniqueIDType>;
    /**
     * Indicates whether package prices will be updated with the latest configurations.
     * @type {boolean}
     * @memberof ChangeInstructionType
     */
    updatePackagePrice?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChangeInstructionType
     */
    changeAllShares?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChangeInstructionType
     */
    overrideInventory?: boolean;
    /**
     * 
     * @type {FacilitySchedulerOptionType}
     * @memberof ChangeInstructionType
     */
    facilitySchedulerOption?: FacilitySchedulerOptionType;
}

/**
 * Check if a given object implements the ChangeInstructionType interface.
 */
export function instanceOfChangeInstructionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChangeInstructionTypeFromJSON(json: any): ChangeInstructionType {
    return ChangeInstructionTypeFromJSONTyped(json, false);
}

export function ChangeInstructionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChangeInstructionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'shareReservations': !exists(json, 'shareReservations') ? undefined : ((json['shareReservations'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'updatePackagePrice': !exists(json, 'updatePackagePrice') ? undefined : json['updatePackagePrice'],
        'changeAllShares': !exists(json, 'changeAllShares') ? undefined : json['changeAllShares'],
        'overrideInventory': !exists(json, 'overrideInventory') ? undefined : json['overrideInventory'],
        'facilitySchedulerOption': !exists(json, 'facilitySchedulerOption') ? undefined : FacilitySchedulerOptionTypeFromJSON(json['facilitySchedulerOption']),
    };
}

export function ChangeInstructionTypeToJSON(value?: ChangeInstructionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'shareReservations': value.shareReservations === undefined ? undefined : ((value.shareReservations as Array<any>).map(UniqueIDTypeToJSON)),
        'updatePackagePrice': value.updatePackagePrice,
        'changeAllShares': value.changeAllShares,
        'overrideInventory': value.overrideInventory,
        'facilitySchedulerOption': FacilitySchedulerOptionTypeToJSON(value.facilitySchedulerOption),
    };
}

