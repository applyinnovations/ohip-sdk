"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoomCalendarResTypeToJSON = exports.RoomCalendarResTypeFromJSONTyped = exports.RoomCalendarResTypeFromJSON = exports.instanceOfRoomCalendarResType = void 0;
const runtime_1 = require("../runtime");
const AdvanceCheckInType_1 = require("./AdvanceCheckInType");
const DateTimeSpanType_1 = require("./DateTimeSpanType");
const LinkedReservationType_1 = require("./LinkedReservationType");
const PMSResStatusType_1 = require("./PMSResStatusType");
const ResGuaranteeType_1 = require("./ResGuaranteeType");
const ReservationRoomOwnershipType_1 = require("./ReservationRoomOwnershipType");
const RoomCalendarDisplayType_1 = require("./RoomCalendarDisplayType");
const RoomMoveDetailType_1 = require("./RoomMoveDetailType");
const ScheduledRoomMoveDetailType_1 = require("./ScheduledRoomMoveDetailType");
const UniqueIDType_1 = require("./UniqueIDType");
const VIPStatusType_1 = require("./VIPStatusType");
/**
 * Check if a given object implements the RoomCalendarResType interface.
 */
function instanceOfRoomCalendarResType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfRoomCalendarResType = instanceOfRoomCalendarResType;
function RoomCalendarResTypeFromJSON(json) {
    return RoomCalendarResTypeFromJSONTyped(json, false);
}
exports.RoomCalendarResTypeFromJSON = RoomCalendarResTypeFromJSON;
function RoomCalendarResTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'reservationIdList': !(0, runtime_1.exists)(json, 'reservationIdList') ? undefined : (json['reservationIdList'].map(UniqueIDType_1.UniqueIDTypeFromJSON)),
        'dateTimeSpan': !(0, runtime_1.exists)(json, 'dateTimeSpan') ? undefined : (0, DateTimeSpanType_1.DateTimeSpanTypeFromJSON)(json['dateTimeSpan']),
        'givenName': !(0, runtime_1.exists)(json, 'givenName') ? undefined : json['givenName'],
        'surname': !(0, runtime_1.exists)(json, 'surname') ? undefined : json['surname'],
        'title': !(0, runtime_1.exists)(json, 'title') ? undefined : json['title'],
        'vipStatus': !(0, runtime_1.exists)(json, 'vipStatus') ? undefined : (0, VIPStatusType_1.VIPStatusTypeFromJSON)(json['vipStatus']),
        'guarantee': !(0, runtime_1.exists)(json, 'guarantee') ? undefined : (0, ResGuaranteeType_1.ResGuaranteeTypeFromJSON)(json['guarantee']),
        'noOfRooms': !(0, runtime_1.exists)(json, 'noOfRooms') ? undefined : json['noOfRooms'],
        'roomScheduleDisplay': !(0, runtime_1.exists)(json, 'roomScheduleDisplay') ? undefined : (0, RoomCalendarDisplayType_1.RoomCalendarDisplayTypeFromJSON)(json['roomScheduleDisplay']),
        'roomNumberLocked': !(0, runtime_1.exists)(json, 'roomNumberLocked') ? undefined : json['roomNumberLocked'],
        'advanceCheckIn': !(0, runtime_1.exists)(json, 'advanceCheckIn') ? undefined : (0, AdvanceCheckInType_1.AdvanceCheckInTypeFromJSON)(json['advanceCheckIn']),
        'roomMoveHistory': !(0, runtime_1.exists)(json, 'roomMoveHistory') ? undefined : (json['roomMoveHistory'].map(RoomMoveDetailType_1.RoomMoveDetailTypeFromJSON)),
        'scheduledRoomMove': !(0, runtime_1.exists)(json, 'scheduledRoomMove') ? undefined : (0, ScheduledRoomMoveDetailType_1.ScheduledRoomMoveDetailTypeFromJSON)(json['scheduledRoomMove']),
        'reservationStatus': !(0, runtime_1.exists)(json, 'reservationStatus') ? undefined : (0, PMSResStatusType_1.PMSResStatusTypeFromJSON)(json['reservationStatus']),
        'hasLinkedReservations': !(0, runtime_1.exists)(json, 'hasLinkedReservations') ? undefined : (0, LinkedReservationType_1.LinkedReservationTypeFromJSON)(json['hasLinkedReservations']),
        'backToBackReservation': !(0, runtime_1.exists)(json, 'backToBackReservation') ? undefined : json['backToBackReservation'],
        'assignedByAI': !(0, runtime_1.exists)(json, 'assignedByAI') ? undefined : json['assignedByAI'],
        'upgradedByAI': !(0, runtime_1.exists)(json, 'upgradedByAI') ? undefined : json['upgradedByAI'],
        'roomOwnershipType': !(0, runtime_1.exists)(json, 'roomOwnershipType') ? undefined : (0, ReservationRoomOwnershipType_1.ReservationRoomOwnershipTypeFromJSON)(json['roomOwnershipType']),
    };
}
exports.RoomCalendarResTypeFromJSONTyped = RoomCalendarResTypeFromJSONTyped;
function RoomCalendarResTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'reservationIdList': value.reservationIdList === undefined ? undefined : (value.reservationIdList.map(UniqueIDType_1.UniqueIDTypeToJSON)),
        'dateTimeSpan': (0, DateTimeSpanType_1.DateTimeSpanTypeToJSON)(value.dateTimeSpan),
        'givenName': value.givenName,
        'surname': value.surname,
        'title': value.title,
        'vipStatus': (0, VIPStatusType_1.VIPStatusTypeToJSON)(value.vipStatus),
        'guarantee': (0, ResGuaranteeType_1.ResGuaranteeTypeToJSON)(value.guarantee),
        'noOfRooms': value.noOfRooms,
        'roomScheduleDisplay': (0, RoomCalendarDisplayType_1.RoomCalendarDisplayTypeToJSON)(value.roomScheduleDisplay),
        'roomNumberLocked': value.roomNumberLocked,
        'advanceCheckIn': (0, AdvanceCheckInType_1.AdvanceCheckInTypeToJSON)(value.advanceCheckIn),
        'roomMoveHistory': value.roomMoveHistory === undefined ? undefined : (value.roomMoveHistory.map(RoomMoveDetailType_1.RoomMoveDetailTypeToJSON)),
        'scheduledRoomMove': (0, ScheduledRoomMoveDetailType_1.ScheduledRoomMoveDetailTypeToJSON)(value.scheduledRoomMove),
        'reservationStatus': (0, PMSResStatusType_1.PMSResStatusTypeToJSON)(value.reservationStatus),
        'hasLinkedReservations': (0, LinkedReservationType_1.LinkedReservationTypeToJSON)(value.hasLinkedReservations),
        'backToBackReservation': value.backToBackReservation,
        'assignedByAI': value.assignedByAI,
        'upgradedByAI': value.upgradedByAI,
        'roomOwnershipType': (0, ReservationRoomOwnershipType_1.ReservationRoomOwnershipTypeToJSON)(value.roomOwnershipType),
    };
}
exports.RoomCalendarResTypeToJSON = RoomCalendarResTypeToJSON;
