"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GuestDetailsToJSON = exports.GuestDetailsFromJSONTyped = exports.GuestDetailsFromJSON = exports.instanceOfGuestDetails = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the GuestDetails interface.
 */
function instanceOfGuestDetails(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfGuestDetails = instanceOfGuestDetails;
function GuestDetailsFromJSON(json) {
    return GuestDetailsFromJSONTyped(json, false);
}
exports.GuestDetailsFromJSON = GuestDetailsFromJSON;
function GuestDetailsFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'alternateFirstName': !(0, runtime_1.exists)(json, 'alternateFirstName') ? undefined : json['alternateFirstName'],
        'alternateLastName': !(0, runtime_1.exists)(json, 'alternateLastName') ? undefined : json['alternateLastName'],
        'alternateSalutation': !(0, runtime_1.exists)(json, 'alternateSalutation') ? undefined : json['alternateSalutation'],
        'emailAddress': !(0, runtime_1.exists)(json, 'emailAddress') ? undefined : json['emailAddress'],
        'firstName': !(0, runtime_1.exists)(json, 'firstName') ? undefined : json['firstName'],
        'guestNameId': !(0, runtime_1.exists)(json, 'guestNameId') ? undefined : json['guestNameId'],
        'guestTitle': !(0, runtime_1.exists)(json, 'guestTitle') ? undefined : json['guestTitle'],
        'lastName': !(0, runtime_1.exists)(json, 'lastName') ? undefined : json['lastName'],
        'phoneNumber': !(0, runtime_1.exists)(json, 'phoneNumber') ? undefined : json['phoneNumber'],
    };
}
exports.GuestDetailsFromJSONTyped = GuestDetailsFromJSONTyped;
function GuestDetailsToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'alternateFirstName': value.alternateFirstName,
        'alternateLastName': value.alternateLastName,
        'alternateSalutation': value.alternateSalutation,
        'emailAddress': value.emailAddress,
        'firstName': value.firstName,
        'guestNameId': value.guestNameId,
        'guestTitle': value.guestTitle,
        'lastName': value.lastName,
        'phoneNumber': value.phoneNumber,
    };
}
exports.GuestDetailsToJSON = GuestDetailsToJSON;
