"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CombineShareReservationsTypeShareToReservationToJSON = exports.CombineShareReservationsTypeShareToReservationFromJSONTyped = exports.CombineShareReservationsTypeShareToReservationFromJSON = exports.instanceOfCombineShareReservationsTypeShareToReservation = void 0;
const runtime_1 = require("../runtime");
const DailyRateType_1 = require("./DailyRateType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the CombineShareReservationsTypeShareToReservation interface.
 */
function instanceOfCombineShareReservationsTypeShareToReservation(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCombineShareReservationsTypeShareToReservation = instanceOfCombineShareReservationsTypeShareToReservation;
function CombineShareReservationsTypeShareToReservationFromJSON(json) {
    return CombineShareReservationsTypeShareToReservationFromJSONTyped(json, false);
}
exports.CombineShareReservationsTypeShareToReservationFromJSON = CombineShareReservationsTypeShareToReservationFromJSON;
function CombineShareReservationsTypeShareToReservationFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'reservationIdList': !(0, runtime_1.exists)(json, 'reservationIdList') ? undefined : (json['reservationIdList'].map(UniqueIDType_1.UniqueIDTypeFromJSON)),
        'dailyRates': !(0, runtime_1.exists)(json, 'dailyRates') ? undefined : (json['dailyRates'].map(DailyRateType_1.DailyRateTypeFromJSON)),
    };
}
exports.CombineShareReservationsTypeShareToReservationFromJSONTyped = CombineShareReservationsTypeShareToReservationFromJSONTyped;
function CombineShareReservationsTypeShareToReservationToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'reservationIdList': value.reservationIdList === undefined ? undefined : (value.reservationIdList.map(UniqueIDType_1.UniqueIDTypeToJSON)),
        'dailyRates': value.dailyRates === undefined ? undefined : (value.dailyRates.map(DailyRateType_1.DailyRateTypeToJSON)),
    };
}
exports.CombineShareReservationsTypeShareToReservationToJSON = CombineShareReservationsTypeShareToReservationToJSON;
