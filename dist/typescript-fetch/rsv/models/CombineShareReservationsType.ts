/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CombineShareFromProfileType } from './CombineShareFromProfileType';
import {
    CombineShareFromProfileTypeFromJSON,
    CombineShareFromProfileTypeFromJSONTyped,
    CombineShareFromProfileTypeToJSON,
} from './CombineShareFromProfileType';
import type { CombineShareInstructionType } from './CombineShareInstructionType';
import {
    CombineShareInstructionTypeFromJSON,
    CombineShareInstructionTypeFromJSONTyped,
    CombineShareInstructionTypeToJSON,
} from './CombineShareInstructionType';
import type { CombineShareReservationsTypeFetchInstructions } from './CombineShareReservationsTypeFetchInstructions';
import {
    CombineShareReservationsTypeFetchInstructionsFromJSON,
    CombineShareReservationsTypeFetchInstructionsFromJSONTyped,
    CombineShareReservationsTypeFetchInstructionsToJSON,
} from './CombineShareReservationsTypeFetchInstructions';
import type { CombineShareReservationsTypeShareToReservation } from './CombineShareReservationsTypeShareToReservation';
import {
    CombineShareReservationsTypeShareToReservationFromJSON,
    CombineShareReservationsTypeShareToReservationFromJSONTyped,
    CombineShareReservationsTypeShareToReservationToJSON,
} from './CombineShareReservationsTypeShareToReservation';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Record Type for Combining Share Reservations.
 * @export
 * @interface CombineShareReservationsType
 */
export interface CombineShareReservationsType {
    /**
     * 
     * @type {CombineShareInstructionType}
     * @memberof CombineShareReservationsType
     */
    combineShareInstruction?: CombineShareInstructionType;
    /**
     * Opera Hotel/Resort code for the Combine Share Reservations request.
     * @type {string}
     * @memberof CombineShareReservationsType
     */
    hotelId?: string;
    /**
     * 
     * @type {CombineShareReservationsTypeShareToReservation}
     * @memberof CombineShareReservationsType
     */
    shareToReservation?: CombineShareReservationsTypeShareToReservation;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CombineShareReservationsType
     */
    existingReservationId?: UniqueIDType;
    /**
     * Type for the profile information to create a new share reservation. This is used to create sharers from profiles.
     * @type {Array<CombineShareFromProfileType>}
     * @memberof CombineShareReservationsType
     */
    newReservations?: Array<CombineShareFromProfileType>;
    /**
     * 
     * @type {CombineShareReservationsTypeFetchInstructions}
     * @memberof CombineShareReservationsType
     */
    fetchInstructions?: CombineShareReservationsTypeFetchInstructions;
}

/**
 * Check if a given object implements the CombineShareReservationsType interface.
 */
export function instanceOfCombineShareReservationsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CombineShareReservationsTypeFromJSON(json: any): CombineShareReservationsType {
    return CombineShareReservationsTypeFromJSONTyped(json, false);
}

export function CombineShareReservationsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CombineShareReservationsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'combineShareInstruction': !exists(json, 'combineShareInstruction') ? undefined : CombineShareInstructionTypeFromJSON(json['combineShareInstruction']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'shareToReservation': !exists(json, 'shareToReservation') ? undefined : CombineShareReservationsTypeShareToReservationFromJSON(json['shareToReservation']),
        'existingReservationId': !exists(json, 'existingReservationId') ? undefined : UniqueIDTypeFromJSON(json['existingReservationId']),
        'newReservations': !exists(json, 'newReservations') ? undefined : ((json['newReservations'] as Array<any>).map(CombineShareFromProfileTypeFromJSON)),
        'fetchInstructions': !exists(json, 'fetchInstructions') ? undefined : CombineShareReservationsTypeFetchInstructionsFromJSON(json['fetchInstructions']),
    };
}

export function CombineShareReservationsTypeToJSON(value?: CombineShareReservationsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'combineShareInstruction': CombineShareInstructionTypeToJSON(value.combineShareInstruction),
        'hotelId': value.hotelId,
        'shareToReservation': CombineShareReservationsTypeShareToReservationToJSON(value.shareToReservation),
        'existingReservationId': UniqueIDTypeToJSON(value.existingReservationId),
        'newReservations': value.newReservations === undefined ? undefined : ((value.newReservations as Array<any>).map(CombineShareFromProfileTypeToJSON)),
        'fetchInstructions': CombineShareReservationsTypeFetchInstructionsToJSON(value.fetchInstructions),
    };
}

