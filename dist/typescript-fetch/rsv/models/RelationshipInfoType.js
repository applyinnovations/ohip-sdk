"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationshipInfoTypeToJSON = exports.RelationshipInfoTypeFromJSONTyped = exports.RelationshipInfoTypeFromJSON = exports.instanceOfRelationshipInfoType = void 0;
const runtime_1 = require("../runtime");
const RelationshipProfileType_1 = require("./RelationshipProfileType");
/**
 * Check if a given object implements the RelationshipInfoType interface.
 */
function instanceOfRelationshipInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfRelationshipInfoType = instanceOfRelationshipInfoType;
function RelationshipInfoTypeFromJSON(json) {
    return RelationshipInfoTypeFromJSONTyped(json, false);
}
exports.RelationshipInfoTypeFromJSON = RelationshipInfoTypeFromJSON;
function RelationshipInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': !(0, runtime_1.exists)(json, 'id') ? undefined : json['id'],
        'relation': !(0, runtime_1.exists)(json, 'relation') ? undefined : json['relation'],
        'relationDescription': !(0, runtime_1.exists)(json, 'relationDescription') ? undefined : json['relationDescription'],
        'relationshipProfile': !(0, runtime_1.exists)(json, 'relationshipProfile') ? undefined : (0, RelationshipProfileType_1.RelationshipProfileTypeFromJSON)(json['relationshipProfile']),
        'targetRelation': !(0, runtime_1.exists)(json, 'targetRelation') ? undefined : json['targetRelation'],
        'targetRelationDescription': !(0, runtime_1.exists)(json, 'targetRelationDescription') ? undefined : json['targetRelationDescription'],
    };
}
exports.RelationshipInfoTypeFromJSONTyped = RelationshipInfoTypeFromJSONTyped;
function RelationshipInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'relation': value.relation,
        'relationDescription': value.relationDescription,
        'relationshipProfile': (0, RelationshipProfileType_1.RelationshipProfileTypeToJSON)(value.relationshipProfile),
        'targetRelation': value.targetRelation,
        'targetRelationDescription': value.targetRelationDescription,
    };
}
exports.RelationshipInfoTypeToJSON = RelationshipInfoTypeToJSON;
