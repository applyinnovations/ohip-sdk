/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AdvanceCheckInType } from './AdvanceCheckInType';
import type { AlertType } from './AlertType';
import type { AttachmentType } from './AttachmentType';
import type { AwardType } from './AwardType';
import type { CallType } from './CallType';
import type { CateringResInfoType } from './CateringResInfoType';
import type { ChangeInstructionType } from './ChangeInstructionType';
import type { CommentInfoType } from './CommentInfoType';
import type { CompAuthorizerInfoType } from './CompAuthorizerInfoType';
import type { ConfirmationType } from './ConfirmationType';
import type { CustomChargeExemptionType } from './CustomChargeExemptionType';
import type { ECouponType } from './ECouponType';
import type { ExternalReferenceType } from './ExternalReferenceType';
import type { FetchActivityBookingsType } from './FetchActivityBookingsType';
import type { FixedChargeType } from './FixedChargeType';
import type { FolioShortInfoType } from './FolioShortInfoType';
import type { GuestMessageType } from './GuestMessageType';
import type { HotelReservationInstructionTypeResponseInstructions } from './HotelReservationInstructionTypeResponseInstructions';
import type { HotelReservationTraceType } from './HotelReservationTraceType';
import type { HotelReservationTypeCancellation } from './HotelReservationTypeCancellation';
import type { HotelReservationTypeReservationProfiles } from './HotelReservationTypeReservationProfiles';
import type { HotelReservationTypeTransactionDiversions } from './HotelReservationTypeTransactionDiversions';
import type { HotelReservationsType } from './HotelReservationsType';
import type { IndicatorType } from './IndicatorType';
import type { LinkedReservationsInfoType } from './LinkedReservationsInfoType';
import type { MembershipType } from './MembershipType';
import type { NameValueDetailType } from './NameValueDetailType';
import type { OverrideInstructionType } from './OverrideInstructionType';
import type { PMSResStatusType } from './PMSResStatusType';
import type { PreferenceTypeType } from './PreferenceTypeType';
import type { PrepaidCardType } from './PrepaidCardType';
import type { ResAccessRestrictionType } from './ResAccessRestrictionType';
import type { ResCashieringType } from './ResCashieringType';
import type { ResCommunicationType } from './ResCommunicationType';
import type { ResGuestAdditionalInfoType } from './ResGuestAdditionalInfoType';
import type { ResGuestType } from './ResGuestType';
import type { ResHousekeepingType } from './ResHousekeepingType';
import type { ResInventoryItemsType } from './ResInventoryItemsType';
import type { ResSharedGuestInfoType } from './ResSharedGuestInfoType';
import type { ResStatClassificationType } from './ResStatClassificationType';
import type { ReservationAllowedActionType } from './ReservationAllowedActionType';
import type { ReservationECertificateType } from './ReservationECertificateType';
import type { ReservationLocatorType } from './ReservationLocatorType';
import type { ReservationMembershipType } from './ReservationMembershipType';
import type { ReservationPackageType } from './ReservationPackageType';
import type { ReservationPaymentMethodType } from './ReservationPaymentMethodType';
import type { ReservationPoliciesType } from './ReservationPoliciesType';
import type { ReservationQueueInformationType } from './ReservationQueueInformationType';
import type { RoomStayType } from './RoomStayType';
import type { RoutingInfoType } from './RoutingInfoType';
import type { ServiceRequest } from './ServiceRequest';
import type { SourceOfSaleType } from './SourceOfSaleType';
import type { TicketType } from './TicketType';
import type { TrackItItemType } from './TrackItItemType';
import type { UniqueIDType } from './UniqueIDType';
import type { UserDefinedFieldsType } from './UserDefinedFieldsType';
import type { WaitlistResType } from './WaitlistResType';
/**
 * The Reservation class contains the current reservation being created or altered.
 * @export
 * @interface HotelReservationInstructionType
 */
export interface HotelReservationInstructionType {
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof HotelReservationInstructionType
     */
    reservationIdList?: Array<UniqueIDType>;
    /**
     * This type contains unique information of external reference.
     * @type {Array<ExternalReferenceType>}
     * @memberof HotelReservationInstructionType
     */
    externalReferences?: Array<ExternalReferenceType>;
    /**
     * Information regarding associated reservations to the reservation.
     * @type {object}
     * @memberof HotelReservationInstructionType
     */
    associatedReservations?: object;
    /**
     *
     * @type {SourceOfSaleType}
     * @memberof HotelReservationInstructionType
     */
    sourceOfSale?: SourceOfSaleType;
    /**
     *
     * @type {RoomStayType}
     * @memberof HotelReservationInstructionType
     */
    roomStay?: RoomStayType;
    /**
     *
     * @type {CompAuthorizerInfoType}
     * @memberof HotelReservationInstructionType
     */
    compAuthorizer?: CompAuthorizerInfoType;
    /**
     * Collection of guests associated with the reservation.
     * @type {Array<ResGuestType>}
     * @memberof HotelReservationInstructionType
     */
    reservationGuests?: Array<ResGuestType>;
    /**
     * Collection of shared guest reservations.
     * @type {Array<ResSharedGuestInfoType>}
     * @memberof HotelReservationInstructionType
     */
    sharedGuests?: Array<ResSharedGuestInfoType>;
    /**
     *
     * @type {ResGuestAdditionalInfoType}
     * @memberof HotelReservationInstructionType
     */
    additionalGuestInfo?: ResGuestAdditionalInfoType;
    /**
     *
     * @type {HotelReservationTypeReservationProfiles}
     * @memberof HotelReservationInstructionType
     */
    reservationProfiles?: HotelReservationTypeReservationProfiles;
    /**
     *
     * @type {ResCommunicationType}
     * @memberof HotelReservationInstructionType
     */
    reservationCommunication?: ResCommunicationType;
    /**
     * List of awards.
     * @type {Array<AwardType>}
     * @memberof HotelReservationInstructionType
     */
    reservationAwards?: Array<AwardType>;
    /**
     *
     * @type {Array<TrackItItemType>}
     * @memberof HotelReservationInstructionType
     */
    trackItItems?: Array<TrackItItemType>;
    /**
     *
     * @type {HotelReservationsType}
     * @memberof HotelReservationInstructionType
     */
    shares?: HotelReservationsType;
    /**
     * Holds the Locator Information.
     * @type {Array<ReservationLocatorType>}
     * @memberof HotelReservationInstructionType
     */
    locators?: Array<ReservationLocatorType>;
    /**
     * Attachment List.
     * @type {Array<AttachmentType>}
     * @memberof HotelReservationInstructionType
     */
    attachments?: Array<AttachmentType>;
    /**
     * Attachment List.
     * @type {Array<AttachmentType>}
     * @memberof HotelReservationInstructionType
     */
    webRegistrationCards?: Array<AttachmentType>;
    /**
     * Service request.
     * @type {Array<ServiceRequest>}
     * @memberof HotelReservationInstructionType
     */
    serviceRequests?: Array<ServiceRequest>;
    /**
     * Criteria for fetching Activity Bookings.
     * @type {Array<FetchActivityBookingsType>}
     * @memberof HotelReservationInstructionType
     */
    reservationActivities?: Array<FetchActivityBookingsType>;
    /**
     * Criteria for fetching Activity Bookings.
     * @type {Array<FetchActivityBookingsType>}
     * @memberof HotelReservationInstructionType
     */
    scheduledActivities?: Array<FetchActivityBookingsType>;
    /**
     * Holds fixed charge detail.
     * @type {Array<PrepaidCardType>}
     * @memberof HotelReservationInstructionType
     */
    prepaidCards?: Array<PrepaidCardType>;
    /**
     * List of awards.
     * @type {Array<AwardType>}
     * @memberof HotelReservationInstructionType
     */
    profileAwards?: Array<AwardType>;
    /**
     * A Service object represents a non-room product provided to guests. Service products may have associated inventory and charges.
     * @type {Array<ReservationPackageType>}
     * @memberof HotelReservationInstructionType
     */
    reservationPackages?: Array<ReservationPackageType>;
    /**
     *
     * @type {ResInventoryItemsType}
     * @memberof HotelReservationInstructionType
     */
    inventoryItems?: ResInventoryItemsType;
    /**
     * List of Notes for the Guest related to the reservation.
     * @type {Array<CommentInfoType>}
     * @memberof HotelReservationInstructionType
     */
    comments?: Array<CommentInfoType>;
    /**
     * List of Notes for the Guest related to the profile.
     * @type {Array<CommentInfoType>}
     * @memberof HotelReservationInstructionType
     */
    guestComments?: Array<CommentInfoType>;
    /**
     * List of Memberships for the Guest related to the reservation.
     * @type {Array<MembershipType>}
     * @memberof HotelReservationInstructionType
     */
    guestMemberships?: Array<MembershipType>;
    /**
     * Collection of reservation preferences.
     * @type {Array<PreferenceTypeType>}
     * @memberof HotelReservationInstructionType
     */
    preferenceCollection?: Array<PreferenceTypeType>;
    /**
     * List of reservation memberships.
     * @type {Array<ReservationMembershipType>}
     * @memberof HotelReservationInstructionType
     */
    reservationMemberships?: Array<ReservationMembershipType>;
    /**
     * Defines reservation payment methods.
     * @type {Array<ReservationPaymentMethodType>}
     * @memberof HotelReservationInstructionType
     */
    reservationPaymentMethods?: Array<ReservationPaymentMethodType>;
    /**
     * A routing info object can either be of type Folio OR of type Room with its corresponding instructions.
     * @type {Array<RoutingInfoType>}
     * @memberof HotelReservationInstructionType
     */
    routingInstructions?: Array<RoutingInfoType>;
    /**
     *
     * @type {ReservationPoliciesType}
     * @memberof HotelReservationInstructionType
     */
    reservationPolicies?: ReservationPoliciesType;
    /**
     *
     * @type {ResCashieringType}
     * @memberof HotelReservationInstructionType
     */
    cashiering?: ResCashieringType;
    /**
     *
     * @type {ResHousekeepingType}
     * @memberof HotelReservationInstructionType
     */
    housekeeping?: ResHousekeepingType;
    /**
     *
     * @type {LinkedReservationsInfoType}
     * @memberof HotelReservationInstructionType
     */
    linkedReservation?: LinkedReservationsInfoType;
    /**
     *
     * @type {boolean}
     * @memberof HotelReservationInstructionType
     */
    extSystemSync?: boolean;
    /**
     *
     * @type {UserDefinedFieldsType}
     * @memberof HotelReservationInstructionType
     */
    userDefinedFields?: UserDefinedFieldsType;
    /**
     * Collection of lamp indicators.
     * @type {Array<IndicatorType>}
     * @memberof HotelReservationInstructionType
     */
    reservationIndicators?: Array<IndicatorType>;
    /**
     *
     * @type {WaitlistResType}
     * @memberof HotelReservationInstructionType
     */
    waitlist?: WaitlistResType;
    /**
     *
     * @type {HotelReservationTypeCancellation}
     * @memberof HotelReservationInstructionType
     */
    cancellation?: HotelReservationTypeCancellation;
    /**
     *
     * @type {CateringResInfoType}
     * @memberof HotelReservationInstructionType
     */
    catering?: CateringResInfoType;
    /**
     *
     * @type {ResStatClassificationType}
     * @memberof HotelReservationInstructionType
     */
    statisticalClassification?: ResStatClassificationType;
    /**
     * List of alerts.
     * @type {Array<AlertType>}
     * @memberof HotelReservationInstructionType
     */
    alerts?: Array<AlertType>;
    /**
     * List of Reservation Traces.
     * @type {Array<HotelReservationTraceType>}
     * @memberof HotelReservationInstructionType
     */
    traces?: Array<HotelReservationTraceType>;
    /**
     * List of confirmation letters.
     * @type {Array<ConfirmationType>}
     * @memberof HotelReservationInstructionType
     */
    confirmationLetters?: Array<ConfirmationType>;
    /**
     * Holds call information.
     * @type {Array<CallType>}
     * @memberof HotelReservationInstructionType
     */
    callHistory?: Array<CallType>;
    /**
     * Holds fixed charge detail.
     * @type {Array<FixedChargeType>}
     * @memberof HotelReservationInstructionType
     */
    fixedCharges?: Array<FixedChargeType>;
    /**
     * Holds the Message Information
     * @type {Array<GuestMessageType>}
     * @memberof HotelReservationInstructionType
     */
    guestMessages?: Array<GuestMessageType>;
    /**
     * An id representing the record lock for this reservation. When passed, update operation will verify that this lock is still valid.
     * @type {number}
     * @memberof HotelReservationInstructionType
     */
    lockHandle?: number;
    /**
     * List of override actions done.
     * @type {Array<OverrideInstructionType>}
     * @memberof HotelReservationInstructionType
     */
    overrideInstructions?: Array<OverrideInstructionType>;
    /**
     *
     * @type {ReservationQueueInformationType}
     * @memberof HotelReservationInstructionType
     */
    queue?: ReservationQueueInformationType;
    /**
     * Allowed action.
     * @type {Array<ReservationAllowedActionType>}
     * @memberof HotelReservationInstructionType
     */
    allowedActions?: Array<ReservationAllowedActionType>;
    /**
     * Collection of ECouponType object.
     * @type {Array<ECouponType>}
     * @memberof HotelReservationInstructionType
     */
    eCoupons?: Array<ECouponType>;
    /**
     *
     * @type {HotelReservationTypeTransactionDiversions}
     * @memberof HotelReservationInstructionType
     */
    transactionDiversions?: HotelReservationTypeTransactionDiversions;
    /**
     *
     * @type {AdvanceCheckInType}
     * @memberof HotelReservationInstructionType
     */
    advanceCheckIn?: AdvanceCheckInType;
    /**
     * Collection of TicketType objects.
     * @type {Array<TicketType>}
     * @memberof HotelReservationInstructionType
     */
    tickets?: Array<TicketType>;
    /**
     * Configurable Access Restriction Message for Excluded Block or Rate Code.
     * @type {string}
     * @memberof HotelReservationInstructionType
     */
    accessRestrictionMessage?: string;
    /**
     * Collection of ECertificateType object.
     * @type {Array<ReservationECertificateType>}
     * @memberof HotelReservationInstructionType
     */
    eCertificates?: Array<ReservationECertificateType>;
    /**
     *
     * @type {NameValueDetailType}
     * @memberof HotelReservationInstructionType
     */
    customNameValueDetail?: NameValueDetailType;
    /**
     * List of Custom Charge Exemptions.
     * @type {Array<CustomChargeExemptionType>}
     * @memberof HotelReservationInstructionType
     */
    customChargeExemptionDetails?: Array<CustomChargeExemptionType>;
    /**
     * This type contains a list of generated bills for a reservation.
     * @type {Array<FolioShortInfoType>}
     * @memberof HotelReservationInstructionType
     */
    folios?: Array<FolioShortInfoType>;
    /**
     * This flag will force to borrow from house if borrow required for number of rooms requested, this will only applicable when reservation is attached to a Block.
     * @type {boolean}
     * @memberof HotelReservationInstructionType
     */
    autoBorrowFromHouse?: boolean;
    /**
     * Forcefully override the create/update action on the Reservation. For real-time CRS interfaces, this element is used as force selling indicator in case of Create or Update Reservation
     * @type {boolean}
     * @memberof HotelReservationInstructionType
     */
    overrideExternalChecks?: boolean;
    /**
     *
     * @type {string}
     * @memberof HotelReservationInstructionType
     */
    hotelId?: string;
    /**
     * Boolean True if this reservation is reserving rooms. False if it is only reserving services.
     * @type {boolean}
     * @memberof HotelReservationInstructionType
     */
    roomStayReservation?: boolean;
    /**
     *
     * @type {PMSResStatusType}
     * @memberof HotelReservationInstructionType
     */
    reservationStatus?: PMSResStatusType;
    /**
     *
     * @type {PMSResStatusType}
     * @memberof HotelReservationInstructionType
     */
    computedReservationStatus?: PMSResStatusType;
    /**
     * When true, indicates the reservation is for a guest that walks-in without a reservation. When false, the reservation is not a walk-in.
     * @type {boolean}
     * @memberof HotelReservationInstructionType
     */
    walkIn?: boolean;
    /**
     * Indicates whether to show the rate or not on a printed document which includes the rate.
     * @type {boolean}
     * @memberof HotelReservationInstructionType
     */
    printRate?: boolean;
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof HotelReservationInstructionType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof HotelReservationInstructionType
     */
    creatorId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof HotelReservationInstructionType
     */
    lastModifyDateTime?: string;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof HotelReservationInstructionType
     */
    lastModifierId?: string;
    /**
     * Date an item will be purged from a database (e.g., from a live database to an archive).
     * @type {string}
     * @memberof HotelReservationInstructionType
     */
    purgeDate?: string;
    /**
     * Business Date when the reservation was created.
     * @type {string}
     * @memberof HotelReservationInstructionType
     */
    createBusinessDate?: string;
    /**
     * Business Date when the reservation was last reinstated.
     * @type {string}
     * @memberof HotelReservationInstructionType
     */
    reinstateDate?: string;
    /**
     * Party/PartyCode when reservation is part of a party(a small group).
     * @type {string}
     * @memberof HotelReservationInstructionType
     */
    party?: string;
    /**
     * Name Of the Resort/Hotel for the primary enrollment
     * @type {string}
     * @memberof HotelReservationInstructionType
     */
    primaryEnrollmentResort?: string;
    /**
     * Name of the Chain for the primary enrollment
     * @type {string}
     * @memberof HotelReservationInstructionType
     */
    primaryEnrollmentChain?: string;
    /**
     * Custom Reference to identify reservation.
     * @type {string}
     * @memberof HotelReservationInstructionType
     */
    customReference?: string;
    /**
     * The color to display this reservation on room grid displays.
     * @type {string}
     * @memberof HotelReservationInstructionType
     */
    displayColor?: string;
    /**
     * Mark this reservation as recently accessed.
     * @type {boolean}
     * @memberof HotelReservationInstructionType
     */
    markAsRecentlyAccessed?: boolean;
    /**
     * Indicates to Override the Room Inventory Check if applicable.
     * @type {boolean}
     * @memberof HotelReservationInstructionType
     */
    overrideInventoryCheck?: boolean;
    /**
     *
     * @type {ResAccessRestrictionType}
     * @memberof HotelReservationInstructionType
     */
    accessRestriction?: ResAccessRestrictionType;
    /**
     * Is the reservation pre-registered.
     * @type {boolean}
     * @memberof HotelReservationInstructionType
     */
    preRegistered?: boolean;
    /**
     * Indicates whether the reservation is eligible for upgrade.
     * @type {boolean}
     * @memberof HotelReservationInstructionType
     */
    upgradeEligible?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof HotelReservationInstructionType
     */
    overrideBlockRestriction?: boolean;
    /**
     * Flag to allow auto checkin
     * @type {boolean}
     * @memberof HotelReservationInstructionType
     */
    allowAutoCheckin?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof HotelReservationInstructionType
     */
    hasOpenFolio?: boolean;
    /**
     * Flag containing true or false value for reservation to be eligible for self-checkout by guest using mobile device . Pass the 'true' or 'false' values when creating / modifying reservation to indicate whether a reservation is eligible for mobile checkout yes / no. Upon fetch, the current state of the flag will show true or false.
     * @type {boolean}
     * @memberof HotelReservationInstructionType
     */
    allowMobileCheckout?: boolean;
    /**
     * Attribute AllowMobileViewFolio is set to true when the reservation is eligible for viewing folio using mobile device.
     * @type {boolean}
     * @memberof HotelReservationInstructionType
     */
    allowMobileViewFolio?: boolean;
    /**
     * Flag containing true or false value for reservation to be eligible for prior check in by guest using mobile device . Pass the 'true' or 'false' values when creating / modifying reservation to indicate whether a reservation is eligible for mobile check in yes / no. Upon fetch, the current state of the flag will show true or false.
     * @type {boolean}
     * @memberof HotelReservationInstructionType
     */
    allowPreRegistration?: boolean;
    /**
     * Flag containing true or false value to determine if the guest has opted for communications pertaining to this reservation.Pass the 'true' or 'false' values when creating / modifying reservation to indicate whether a reservation is marked for communication. Upon fetch, the current state of the flag will show true or false.
     * @type {boolean}
     * @memberof HotelReservationInstructionType
     */
    optedForCommunication?: boolean;
    /**
     * This attribute represents Hotel charge card number. This number is generated automatically in OPERA when a reservation is created in OPERA. It is part of a functionality that provide the guest with the convenience of placing all their charges directly on their reservation folio.
     * @type {string}
     * @memberof HotelReservationInstructionType
     */
    chargeCardNumber?: string;
    /**
     * Indicates to Override the Room Out Of Service Check if applicable.
     * @type {boolean}
     * @memberof HotelReservationInstructionType
     */
    overrideOutOfServiceCheck?: boolean;
    /**
     * Override the rotation room that is next in the sequence with the room currently assigned to this reservation. This is applicable when Room Rotation OPERA Control is active.
     * @type {boolean}
     * @memberof HotelReservationInstructionType
     */
    overrideRotationRoom?: boolean;
    /**
     * Override the room ownership of the room currently assigned to this reservation. This is applicable when Room Rotation OPERA Control is active.
     * @type {boolean}
     * @memberof HotelReservationInstructionType
     */
    overrideRoomOwnership?: boolean;
    /**
     *
     * @type {HotelReservationInstructionTypeResponseInstructions}
     * @memberof HotelReservationInstructionType
     */
    responseInstructions?: HotelReservationInstructionTypeResponseInstructions;
    /**
     *
     * @type {ChangeInstructionType}
     * @memberof HotelReservationInstructionType
     */
    changeInstrunctions?: ChangeInstructionType;
    /**
     * This flag indicates true/false. When this is true, it will allow to override the room feature preference validation while assigning rooms. The Reservation Room Features OPERA Control will determine which room feature preferences will be validated. When Reservation Room Features is on, the validation will be against the Room Feature preferences attached to the reservation. If the parameter is off, the validation will be against the room feature preferences attached to the profile. This is applicable when the Room Feature Validation OPERA Control is on.
     * @type {boolean}
     * @memberof HotelReservationInstructionType
     */
    overrideRoomFeatures?: boolean;
    /**
     * Indicates if this joining reservation should route all transactions to the 'Share To' reservation when including Share Reservations Instructions.
     * @type {boolean}
     * @memberof HotelReservationInstructionType
     */
    routeAllTransactionsToShare?: boolean;
}
/**
 * Check if a given object implements the HotelReservationInstructionType interface.
 */
export declare function instanceOfHotelReservationInstructionType(value: object): boolean;
export declare function HotelReservationInstructionTypeFromJSON(json: any): HotelReservationInstructionType;
export declare function HotelReservationInstructionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelReservationInstructionType;
export declare function HotelReservationInstructionTypeToJSON(value?: HotelReservationInstructionType | null): any;
