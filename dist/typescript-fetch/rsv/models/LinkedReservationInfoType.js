"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkedReservationInfoTypeToJSON = exports.LinkedReservationInfoTypeFromJSONTyped = exports.LinkedReservationInfoTypeFromJSON = exports.instanceOfLinkedReservationInfoType = void 0;
const runtime_1 = require("../runtime");
const BackToBackResSequenceType_1 = require("./BackToBackResSequenceType");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const LinkedReservationType_1 = require("./LinkedReservationType");
const PMSResStatusType_1 = require("./PMSResStatusType");
const ProfileId_1 = require("./ProfileId");
const ResGuaranteeType_1 = require("./ResGuaranteeType");
const ReservationAllowedActionType_1 = require("./ReservationAllowedActionType");
const ReservationBlockType_1 = require("./ReservationBlockType");
const TimeSpanType_1 = require("./TimeSpanType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the LinkedReservationInfoType interface.
 */
function instanceOfLinkedReservationInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfLinkedReservationInfoType = instanceOfLinkedReservationInfoType;
function LinkedReservationInfoTypeFromJSON(json) {
    return LinkedReservationInfoTypeFromJSONTyped(json, false);
}
exports.LinkedReservationInfoTypeFromJSON = LinkedReservationInfoTypeFromJSON;
function LinkedReservationInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'reservationIdList': !(0, runtime_1.exists)(json, 'reservationIdList') ? undefined : (json['reservationIdList'].map(UniqueIDType_1.UniqueIDTypeFromJSON)),
        'timeSpan': !(0, runtime_1.exists)(json, 'timeSpan') ? undefined : (0, TimeSpanType_1.TimeSpanTypeFromJSON)(json['timeSpan']),
        'givenName': !(0, runtime_1.exists)(json, 'givenName') ? undefined : json['givenName'],
        'surname': !(0, runtime_1.exists)(json, 'surname') ? undefined : json['surname'],
        'title': !(0, runtime_1.exists)(json, 'title') ? undefined : json['title'],
        'roomType': !(0, runtime_1.exists)(json, 'roomType') ? undefined : json['roomType'],
        'room': !(0, runtime_1.exists)(json, 'room') ? undefined : json['room'],
        'ratePlanCode': !(0, runtime_1.exists)(json, 'ratePlanCode') ? undefined : json['ratePlanCode'],
        'rate': !(0, runtime_1.exists)(json, 'rate') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['rate']),
        'guarantee': !(0, runtime_1.exists)(json, 'guarantee') ? undefined : (0, ResGuaranteeType_1.ResGuaranteeTypeFromJSON)(json['guarantee']),
        'balance': !(0, runtime_1.exists)(json, 'balance') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['balance']),
        'reservationBlock': !(0, runtime_1.exists)(json, 'reservationBlock') ? undefined : (0, ReservationBlockType_1.ReservationBlockTypeFromJSON)(json['reservationBlock']),
        'displayColor': !(0, runtime_1.exists)(json, 'displayColor') ? undefined : json['displayColor'],
        'allowedActions': !(0, runtime_1.exists)(json, 'allowedActions') ? undefined : (json['allowedActions'].map(ReservationAllowedActionType_1.ReservationAllowedActionTypeFromJSON)),
        'reservationStatus': !(0, runtime_1.exists)(json, 'reservationStatus') ? undefined : (0, PMSResStatusType_1.PMSResStatusTypeFromJSON)(json['reservationStatus']),
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'linkReservationType': !(0, runtime_1.exists)(json, 'linkReservationType') ? undefined : (0, LinkedReservationType_1.LinkedReservationTypeFromJSON)(json['linkReservationType']),
        'reverseCheckInAllowed': !(0, runtime_1.exists)(json, 'reverseCheckInAllowed') ? undefined : json['reverseCheckInAllowed'],
        'roomNumberLocked': !(0, runtime_1.exists)(json, 'roomNumberLocked') ? undefined : json['roomNumberLocked'],
        'suppressRate': !(0, runtime_1.exists)(json, 'suppressRate') ? undefined : json['suppressRate'],
        'adultCount': !(0, runtime_1.exists)(json, 'adultCount') ? undefined : json['adultCount'],
        'childCount': !(0, runtime_1.exists)(json, 'childCount') ? undefined : json['childCount'],
        'backToBack': !(0, runtime_1.exists)(json, 'backToBack') ? undefined : json['backToBack'],
        'profileId': !(0, runtime_1.exists)(json, 'profileId') ? undefined : (0, ProfileId_1.ProfileIdFromJSON)(json['profileId']),
        'backToBackSequence': !(0, runtime_1.exists)(json, 'backToBackSequence') ? undefined : (0, BackToBackResSequenceType_1.BackToBackResSequenceTypeFromJSON)(json['backToBackSequence']),
        'shared': !(0, runtime_1.exists)(json, 'shared') ? undefined : json['shared'],
        'backToBackGroupId': !(0, runtime_1.exists)(json, 'backToBackGroupId') ? undefined : json['backToBackGroupId'],
    };
}
exports.LinkedReservationInfoTypeFromJSONTyped = LinkedReservationInfoTypeFromJSONTyped;
function LinkedReservationInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'reservationIdList': value.reservationIdList === undefined ? undefined : (value.reservationIdList.map(UniqueIDType_1.UniqueIDTypeToJSON)),
        'timeSpan': (0, TimeSpanType_1.TimeSpanTypeToJSON)(value.timeSpan),
        'givenName': value.givenName,
        'surname': value.surname,
        'title': value.title,
        'roomType': value.roomType,
        'room': value.room,
        'ratePlanCode': value.ratePlanCode,
        'rate': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.rate),
        'guarantee': (0, ResGuaranteeType_1.ResGuaranteeTypeToJSON)(value.guarantee),
        'balance': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.balance),
        'reservationBlock': (0, ReservationBlockType_1.ReservationBlockTypeToJSON)(value.reservationBlock),
        'displayColor': value.displayColor,
        'allowedActions': value.allowedActions === undefined ? undefined : (value.allowedActions.map(ReservationAllowedActionType_1.ReservationAllowedActionTypeToJSON)),
        'reservationStatus': (0, PMSResStatusType_1.PMSResStatusTypeToJSON)(value.reservationStatus),
        'hotelId': value.hotelId,
        'linkReservationType': (0, LinkedReservationType_1.LinkedReservationTypeToJSON)(value.linkReservationType),
        'reverseCheckInAllowed': value.reverseCheckInAllowed,
        'roomNumberLocked': value.roomNumberLocked,
        'suppressRate': value.suppressRate,
        'adultCount': value.adultCount,
        'childCount': value.childCount,
        'backToBack': value.backToBack,
        'profileId': (0, ProfileId_1.ProfileIdToJSON)(value.profileId),
        'backToBackSequence': (0, BackToBackResSequenceType_1.BackToBackResSequenceTypeToJSON)(value.backToBackSequence),
        'shared': value.shared,
        'backToBackGroupId': value.backToBackGroupId,
    };
}
exports.LinkedReservationInfoTypeToJSON = LinkedReservationInfoTypeToJSON;
