"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoutingInstructionsInfoCriteriaToJSON = exports.RoutingInstructionsInfoCriteriaFromJSONTyped = exports.RoutingInstructionsInfoCriteriaFromJSON = exports.instanceOfRoutingInstructionsInfoCriteria = void 0;
const runtime_1 = require("../runtime");
const ReservationId_1 = require("./ReservationId");
const RoutingInfoType_1 = require("./RoutingInfoType");
const RoutingInstructionsInfoCriteriaComp_1 = require("./RoutingInstructionsInfoCriteriaComp");
const RoutingInstructionsInfoCriteriaFolio_1 = require("./RoutingInstructionsInfoCriteriaFolio");
const RoutingInstructionsInfoCriteriaRequest_1 = require("./RoutingInstructionsInfoCriteriaRequest");
const RoutingInstructionsInfoCriteriaRoom_1 = require("./RoutingInstructionsInfoCriteriaRoom");
/**
 * Check if a given object implements the RoutingInstructionsInfoCriteria interface.
 */
function instanceOfRoutingInstructionsInfoCriteria(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfRoutingInstructionsInfoCriteria = instanceOfRoutingInstructionsInfoCriteria;
function RoutingInstructionsInfoCriteriaFromJSON(json) {
    return RoutingInstructionsInfoCriteriaFromJSONTyped(json, false);
}
exports.RoutingInstructionsInfoCriteriaFromJSON = RoutingInstructionsInfoCriteriaFromJSON;
function RoutingInstructionsInfoCriteriaFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'folio': !(0, runtime_1.exists)(json, 'folio') ? undefined : (0, RoutingInstructionsInfoCriteriaFolio_1.RoutingInstructionsInfoCriteriaFolioFromJSON)(json['folio']),
        'room': !(0, runtime_1.exists)(json, 'room') ? undefined : (0, RoutingInstructionsInfoCriteriaRoom_1.RoutingInstructionsInfoCriteriaRoomFromJSON)(json['room']),
        'comp': !(0, runtime_1.exists)(json, 'comp') ? undefined : (0, RoutingInstructionsInfoCriteriaComp_1.RoutingInstructionsInfoCriteriaCompFromJSON)(json['comp']),
        'request': !(0, runtime_1.exists)(json, 'request') ? undefined : (0, RoutingInstructionsInfoCriteriaRequest_1.RoutingInstructionsInfoCriteriaRequestFromJSON)(json['request']),
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'reservationId': !(0, runtime_1.exists)(json, 'reservationId') ? undefined : (0, ReservationId_1.ReservationIdFromJSON)(json['reservationId']),
        'refreshFolio': !(0, runtime_1.exists)(json, 'refreshFolio') ? undefined : json['refreshFolio'],
        'retrievePostingsForRoomRouting': !(0, runtime_1.exists)(json, 'retrievePostingsForRoomRouting') ? undefined : json['retrievePostingsForRoomRouting'],
        'newRoutingInfo': !(0, runtime_1.exists)(json, 'newRoutingInfo') ? undefined : (0, RoutingInfoType_1.RoutingInfoTypeFromJSON)(json['newRoutingInfo']),
    };
}
exports.RoutingInstructionsInfoCriteriaFromJSONTyped = RoutingInstructionsInfoCriteriaFromJSONTyped;
function RoutingInstructionsInfoCriteriaToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'folio': (0, RoutingInstructionsInfoCriteriaFolio_1.RoutingInstructionsInfoCriteriaFolioToJSON)(value.folio),
        'room': (0, RoutingInstructionsInfoCriteriaRoom_1.RoutingInstructionsInfoCriteriaRoomToJSON)(value.room),
        'comp': (0, RoutingInstructionsInfoCriteriaComp_1.RoutingInstructionsInfoCriteriaCompToJSON)(value.comp),
        'request': (0, RoutingInstructionsInfoCriteriaRequest_1.RoutingInstructionsInfoCriteriaRequestToJSON)(value.request),
        'hotelId': value.hotelId,
        'reservationId': (0, ReservationId_1.ReservationIdToJSON)(value.reservationId),
        'refreshFolio': value.refreshFolio,
        'retrievePostingsForRoomRouting': value.retrievePostingsForRoomRouting,
        'newRoutingInfo': (0, RoutingInfoType_1.RoutingInfoTypeToJSON)(value.newRoutingInfo),
    };
}
exports.RoutingInstructionsInfoCriteriaToJSON = RoutingInstructionsInfoCriteriaToJSON;
