"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationshipProfileTypeToJSON = exports.RelationshipProfileTypeFromJSONTyped = exports.RelationshipProfileTypeFromJSON = exports.instanceOfRelationshipProfileType = void 0;
const runtime_1 = require("../runtime");
const AddressInfoType_1 = require("./AddressInfoType");
const CompanyType_1 = require("./CompanyType");
const CustomerType_1 = require("./CustomerType");
const EmailInfoType_1 = require("./EmailInfoType");
const OwnerType_1 = require("./OwnerType");
const ProfileStatusType_1 = require("./ProfileStatusType");
const ProfileTypeType_1 = require("./ProfileTypeType");
const TelephoneInfoType_1 = require("./TelephoneInfoType");
const URLInfoType_1 = require("./URLInfoType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the RelationshipProfileType interface.
 */
function instanceOfRelationshipProfileType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfRelationshipProfileType = instanceOfRelationshipProfileType;
function RelationshipProfileTypeFromJSON(json) {
    return RelationshipProfileTypeFromJSONTyped(json, false);
}
exports.RelationshipProfileTypeFromJSON = RelationshipProfileTypeFromJSON;
function RelationshipProfileTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'address': !(0, runtime_1.exists)(json, 'address') ? undefined : (0, AddressInfoType_1.AddressInfoTypeFromJSON)(json['address']),
        'company': !(0, runtime_1.exists)(json, 'company') ? undefined : (0, CompanyType_1.CompanyTypeFromJSON)(json['company']),
        'customer': !(0, runtime_1.exists)(json, 'customer') ? undefined : (0, CustomerType_1.CustomerTypeFromJSON)(json['customer']),
        'email': !(0, runtime_1.exists)(json, 'email') ? undefined : (0, EmailInfoType_1.EmailInfoTypeFromJSON)(json['email']),
        'id': !(0, runtime_1.exists)(json, 'id') ? undefined : json['id'],
        'primary': !(0, runtime_1.exists)(json, 'primary') ? undefined : json['primary'],
        'primaryOwner': !(0, runtime_1.exists)(json, 'primaryOwner') ? undefined : (0, OwnerType_1.OwnerTypeFromJSON)(json['primaryOwner']),
        'profileIdList': !(0, runtime_1.exists)(json, 'profileIdList') ? undefined : (json['profileIdList'].map(UniqueIDType_1.UniqueIDTypeFromJSON)),
        'profileType': !(0, runtime_1.exists)(json, 'profileType') ? undefined : (0, ProfileTypeType_1.ProfileTypeTypeFromJSON)(json['profileType']),
        'statusCode': !(0, runtime_1.exists)(json, 'statusCode') ? undefined : (0, ProfileStatusType_1.ProfileStatusTypeFromJSON)(json['statusCode']),
        'telephone': !(0, runtime_1.exists)(json, 'telephone') ? undefined : (0, TelephoneInfoType_1.TelephoneInfoTypeFromJSON)(json['telephone']),
        'uRLs': !(0, runtime_1.exists)(json, 'uRLs') ? undefined : (0, URLInfoType_1.URLInfoTypeFromJSON)(json['uRLs']),
    };
}
exports.RelationshipProfileTypeFromJSONTyped = RelationshipProfileTypeFromJSONTyped;
function RelationshipProfileTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'address': (0, AddressInfoType_1.AddressInfoTypeToJSON)(value.address),
        'company': (0, CompanyType_1.CompanyTypeToJSON)(value.company),
        'customer': (0, CustomerType_1.CustomerTypeToJSON)(value.customer),
        'email': (0, EmailInfoType_1.EmailInfoTypeToJSON)(value.email),
        'id': value.id,
        'primary': value.primary,
        'primaryOwner': (0, OwnerType_1.OwnerTypeToJSON)(value.primaryOwner),
        'profileIdList': value.profileIdList === undefined ? undefined : (value.profileIdList.map(UniqueIDType_1.UniqueIDTypeToJSON)),
        'profileType': (0, ProfileTypeType_1.ProfileTypeTypeToJSON)(value.profileType),
        'statusCode': (0, ProfileStatusType_1.ProfileStatusTypeToJSON)(value.statusCode),
        'telephone': (0, TelephoneInfoType_1.TelephoneInfoTypeToJSON)(value.telephone),
        'uRLs': (0, URLInfoType_1.URLInfoTypeToJSON)(value.uRLs),
    };
}
exports.RelationshipProfileTypeToJSON = RelationshipProfileTypeToJSON;
