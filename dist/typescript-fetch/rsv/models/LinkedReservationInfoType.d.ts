/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { BackToBackResSequenceType } from './BackToBackResSequenceType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import type { LinkedReservationType } from './LinkedReservationType';
import type { PMSResStatusType } from './PMSResStatusType';
import type { ProfileId } from './ProfileId';
import type { ResGuaranteeType } from './ResGuaranteeType';
import type { ReservationAllowedActionType } from './ReservationAllowedActionType';
import type { ReservationBlockType } from './ReservationBlockType';
import type { TimeSpanType } from './TimeSpanType';
import type { UniqueIDType } from './UniqueIDType';
/**
 *
 * @export
 * @interface LinkedReservationInfoType
 */
export interface LinkedReservationInfoType {
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof LinkedReservationInfoType
     */
    reservationIdList?: Array<UniqueIDType>;
    /**
     *
     * @type {TimeSpanType}
     * @memberof LinkedReservationInfoType
     */
    timeSpan?: TimeSpanType;
    /**
     *
     * @type {string}
     * @memberof LinkedReservationInfoType
     */
    givenName?: string;
    /**
     *
     * @type {string}
     * @memberof LinkedReservationInfoType
     */
    surname?: string;
    /**
     *
     * @type {string}
     * @memberof LinkedReservationInfoType
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof LinkedReservationInfoType
     */
    roomType?: string;
    /**
     *
     * @type {string}
     * @memberof LinkedReservationInfoType
     */
    room?: string;
    /**
     *
     * @type {string}
     * @memberof LinkedReservationInfoType
     */
    ratePlanCode?: string;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof LinkedReservationInfoType
     */
    rate?: CurrencyAmountType;
    /**
     *
     * @type {ResGuaranteeType}
     * @memberof LinkedReservationInfoType
     */
    guarantee?: ResGuaranteeType;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof LinkedReservationInfoType
     */
    balance?: CurrencyAmountType;
    /**
     *
     * @type {ReservationBlockType}
     * @memberof LinkedReservationInfoType
     */
    reservationBlock?: ReservationBlockType;
    /**
     *
     * @type {string}
     * @memberof LinkedReservationInfoType
     */
    displayColor?: string;
    /**
     * Allowed action.
     * @type {Array<ReservationAllowedActionType>}
     * @memberof LinkedReservationInfoType
     */
    allowedActions?: Array<ReservationAllowedActionType>;
    /**
     *
     * @type {PMSResStatusType}
     * @memberof LinkedReservationInfoType
     */
    reservationStatus?: PMSResStatusType;
    /**
     *
     * @type {string}
     * @memberof LinkedReservationInfoType
     */
    hotelId?: string;
    /**
     *
     * @type {LinkedReservationType}
     * @memberof LinkedReservationInfoType
     */
    linkReservationType?: LinkedReservationType;
    /**
     * This attribute is to verify if reverse check-in is allowed for the reservation.
     * @type {boolean}
     * @memberof LinkedReservationInfoType
     */
    reverseCheckInAllowed?: boolean;
    /**
     * This attribute is to verify if room number is locked for the reservation. When true the room number cannot be changed
     * @type {boolean}
     * @memberof LinkedReservationInfoType
     */
    roomNumberLocked?: boolean;
    /**
     * This attribute checks if rate is suppressed or not in order to properly show strike through.
     * @type {boolean}
     * @memberof LinkedReservationInfoType
     */
    suppressRate?: boolean;
    /**
     * Number of adults of the reservation.
     * @type {number}
     * @memberof LinkedReservationInfoType
     */
    adultCount?: number;
    /**
     * Number of children of the reservation.
     * @type {number}
     * @memberof LinkedReservationInfoType
     */
    childCount?: number;
    /**
     * This attribute indicates if the linked reservation is marked as Back to Back or not.
     * @type {boolean}
     * @memberof LinkedReservationInfoType
     */
    backToBack?: boolean;
    /**
     *
     * @type {ProfileId}
     * @memberof LinkedReservationInfoType
     */
    profileId?: ProfileId;
    /**
     *
     * @type {BackToBackResSequenceType}
     * @memberof LinkedReservationInfoType
     */
    backToBackSequence?: BackToBackResSequenceType;
    /**
     * This attribute indicates if the linked reservation is a shared reservation or not.
     * @type {boolean}
     * @memberof LinkedReservationInfoType
     */
    shared?: boolean;
    /**
     * This attribute represents a common identifier for a subgroup of linked reservations marked as Back to Back in a group of linked reservations.
     * @type {string}
     * @memberof LinkedReservationInfoType
     */
    backToBackGroupId?: string;
}
/**
 * Check if a given object implements the LinkedReservationInfoType interface.
 */
export declare function instanceOfLinkedReservationInfoType(value: object): boolean;
export declare function LinkedReservationInfoTypeFromJSON(json: any): LinkedReservationInfoType;
export declare function LinkedReservationInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): LinkedReservationInfoType;
export declare function LinkedReservationInfoTypeToJSON(value?: LinkedReservationInfoType | null): any;
