"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpsellInfoTypeOriginalInfoToJSON = exports.UpsellInfoTypeOriginalInfoFromJSONTyped = exports.UpsellInfoTypeOriginalInfoFromJSON = exports.instanceOfUpsellInfoTypeOriginalInfo = void 0;
const runtime_1 = require("../runtime");
const CodeDescriptionType_1 = require("./CodeDescriptionType");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
/**
 * Check if a given object implements the UpsellInfoTypeOriginalInfo interface.
 */
function instanceOfUpsellInfoTypeOriginalInfo(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfUpsellInfoTypeOriginalInfo = instanceOfUpsellInfoTypeOriginalInfo;
function UpsellInfoTypeOriginalInfoFromJSON(json) {
    return UpsellInfoTypeOriginalInfoFromJSONTyped(json, false);
}
exports.UpsellInfoTypeOriginalInfoFromJSON = UpsellInfoTypeOriginalInfoFromJSON;
function UpsellInfoTypeOriginalInfoFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'rateCode': !(0, runtime_1.exists)(json, 'rateCode') ? undefined : json['rateCode'],
        'totalAmount': !(0, runtime_1.exists)(json, 'totalAmount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['totalAmount']),
        'roomType': !(0, runtime_1.exists)(json, 'roomType') ? undefined : (0, CodeDescriptionType_1.CodeDescriptionTypeFromJSON)(json['roomType']),
        'nights': !(0, runtime_1.exists)(json, 'nights') ? undefined : json['nights'],
    };
}
exports.UpsellInfoTypeOriginalInfoFromJSONTyped = UpsellInfoTypeOriginalInfoFromJSONTyped;
function UpsellInfoTypeOriginalInfoToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'rateCode': value.rateCode,
        'totalAmount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.totalAmount),
        'roomType': (0, CodeDescriptionType_1.CodeDescriptionTypeToJSON)(value.roomType),
        'nights': value.nights,
    };
}
exports.UpsellInfoTypeOriginalInfoToJSON = UpsellInfoTypeOriginalInfoToJSON;
