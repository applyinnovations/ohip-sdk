/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CancellationReasonType } from './CancellationReasonType';
import {
    CancellationReasonTypeFromJSON,
    CancellationReasonTypeFromJSONTyped,
    CancellationReasonTypeToJSON,
} from './CancellationReasonType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * 
 * @export
 * @interface CancellationActivityType
 */
export interface CancellationActivityType {
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof CancellationActivityType
     */
    cancellationIdList?: Array<UniqueIDType>;
    /**
     * 
     * @type {Date}
     * @memberof CancellationActivityType
     */
    cxlDate?: Date;
    /**
     * 
     * @type {CancellationReasonType}
     * @memberof CancellationActivityType
     */
    reason?: CancellationReasonType;
    /**
     * 
     * @type {number}
     * @memberof CancellationActivityType
     */
    userId?: number;
    /**
     * 
     * @type {string}
     * @memberof CancellationActivityType
     */
    userName?: string;
}

/**
 * Check if a given object implements the CancellationActivityType interface.
 */
export function instanceOfCancellationActivityType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CancellationActivityTypeFromJSON(json: any): CancellationActivityType {
    return CancellationActivityTypeFromJSONTyped(json, false);
}

export function CancellationActivityTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CancellationActivityType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cancellationIdList': !exists(json, 'cancellationIdList') ? undefined : ((json['cancellationIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'cxlDate': !exists(json, 'cxlDate') ? undefined : (new Date(json['cxlDate'])),
        'reason': !exists(json, 'reason') ? undefined : CancellationReasonTypeFromJSON(json['reason']),
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'userName': !exists(json, 'userName') ? undefined : json['userName'],
    };
}

export function CancellationActivityTypeToJSON(value?: CancellationActivityType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cancellationIdList': value.cancellationIdList === undefined ? undefined : ((value.cancellationIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'cxlDate': value.cxlDate === undefined ? undefined : (value.cxlDate.toISOString().substr(0,10)),
        'reason': CancellationReasonTypeToJSON(value.reason),
        'userId': value.userId,
        'userName': value.userName,
    };
}

