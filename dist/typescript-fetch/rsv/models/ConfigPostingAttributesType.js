"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigPostingAttributesTypeToJSON = exports.ConfigPostingAttributesTypeFromJSONTyped = exports.ConfigPostingAttributesTypeFromJSON = exports.instanceOfConfigPostingAttributesType = void 0;
const runtime_1 = require("../runtime");
const PackageCalculationRuleType_1 = require("./PackageCalculationRuleType");
const PackagePostingRhythmType_1 = require("./PackagePostingRhythmType");
const PkgInventoryItemType_1 = require("./PkgInventoryItemType");
/**
 * Check if a given object implements the ConfigPostingAttributesType interface.
 */
function instanceOfConfigPostingAttributesType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfConfigPostingAttributesType = instanceOfConfigPostingAttributesType;
function ConfigPostingAttributesTypeFromJSON(json) {
    return ConfigPostingAttributesTypeFromJSONTyped(json, false);
}
exports.ConfigPostingAttributesTypeFromJSON = ConfigPostingAttributesTypeFromJSON;
function ConfigPostingAttributesTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'addToRate': !(0, runtime_1.exists)(json, 'addToRate') ? undefined : json['addToRate'],
        'printSeparateLine': !(0, runtime_1.exists)(json, 'printSeparateLine') ? undefined : json['printSeparateLine'],
        'sellSeparate': !(0, runtime_1.exists)(json, 'sellSeparate') ? undefined : json['sellSeparate'],
        'postNextDay': !(0, runtime_1.exists)(json, 'postNextDay') ? undefined : json['postNextDay'],
        'forecastNextDay': !(0, runtime_1.exists)(json, 'forecastNextDay') ? undefined : json['forecastNextDay'],
        'formula': !(0, runtime_1.exists)(json, 'formula') ? undefined : json['formula'],
        'startTime': !(0, runtime_1.exists)(json, 'startTime') ? undefined : json['startTime'],
        'endTime': !(0, runtime_1.exists)(json, 'endTime') ? undefined : json['endTime'],
        'catering': !(0, runtime_1.exists)(json, 'catering') ? undefined : json['catering'],
        'postingRhythm': !(0, runtime_1.exists)(json, 'postingRhythm') ? undefined : (0, PackagePostingRhythmType_1.PackagePostingRhythmTypeFromJSON)(json['postingRhythm']),
        'priceCalculationRule': !(0, runtime_1.exists)(json, 'priceCalculationRule') ? undefined : (0, PackageCalculationRuleType_1.PackageCalculationRuleTypeFromJSON)(json['priceCalculationRule']),
        'ticket': !(0, runtime_1.exists)(json, 'ticket') ? undefined : json['ticket'],
        'inventoryItems': !(0, runtime_1.exists)(json, 'inventoryItems') ? undefined : (json['inventoryItems'].map(PkgInventoryItemType_1.PkgInventoryItemTypeFromJSON)),
        'calculatedPrice': !(0, runtime_1.exists)(json, 'calculatedPrice') ? undefined : json['calculatedPrice'],
    };
}
exports.ConfigPostingAttributesTypeFromJSONTyped = ConfigPostingAttributesTypeFromJSONTyped;
function ConfigPostingAttributesTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'addToRate': value.addToRate,
        'printSeparateLine': value.printSeparateLine,
        'sellSeparate': value.sellSeparate,
        'postNextDay': value.postNextDay,
        'forecastNextDay': value.forecastNextDay,
        'formula': value.formula,
        'startTime': value.startTime,
        'endTime': value.endTime,
        'catering': value.catering,
        'postingRhythm': (0, PackagePostingRhythmType_1.PackagePostingRhythmTypeToJSON)(value.postingRhythm),
        'priceCalculationRule': (0, PackageCalculationRuleType_1.PackageCalculationRuleTypeToJSON)(value.priceCalculationRule),
        'ticket': value.ticket,
        'inventoryItems': value.inventoryItems === undefined ? undefined : (value.inventoryItems.map(PkgInventoryItemType_1.PkgInventoryItemTypeToJSON)),
        'calculatedPrice': value.calculatedPrice,
    };
}
exports.ConfigPostingAttributesTypeToJSON = ConfigPostingAttributesTypeToJSON;
