"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FetchActivityBookingsTypeToJSON = exports.FetchActivityBookingsTypeFromJSONTyped = exports.FetchActivityBookingsTypeFromJSON = exports.instanceOfFetchActivityBookingsType = void 0;
const runtime_1 = require("../runtime");
const ActivityListInner_1 = require("./ActivityListInner");
const AddressType_1 = require("./AddressType");
const PersonNameType_1 = require("./PersonNameType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the FetchActivityBookingsType interface.
 */
function instanceOfFetchActivityBookingsType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfFetchActivityBookingsType = instanceOfFetchActivityBookingsType;
function FetchActivityBookingsTypeFromJSON(json) {
    return FetchActivityBookingsTypeFromJSONTyped(json, false);
}
exports.FetchActivityBookingsTypeFromJSON = FetchActivityBookingsTypeFromJSON;
function FetchActivityBookingsTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'profileId': !(0, runtime_1.exists)(json, 'profileId') ? undefined : (json['profileId'].map(UniqueIDType_1.UniqueIDTypeFromJSON)),
        'personName': !(0, runtime_1.exists)(json, 'personName') ? undefined : (0, PersonNameType_1.PersonNameTypeFromJSON)(json['personName']),
        'address': !(0, runtime_1.exists)(json, 'address') ? undefined : (0, AddressType_1.AddressTypeFromJSON)(json['address']),
        'activities': !(0, runtime_1.exists)(json, 'activities') ? undefined : (json['activities'].map(ActivityListInner_1.ActivityListInnerFromJSON)),
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
    };
}
exports.FetchActivityBookingsTypeFromJSONTyped = FetchActivityBookingsTypeFromJSONTyped;
function FetchActivityBookingsTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'profileId': value.profileId === undefined ? undefined : (value.profileId.map(UniqueIDType_1.UniqueIDTypeToJSON)),
        'personName': (0, PersonNameType_1.PersonNameTypeToJSON)(value.personName),
        'address': (0, AddressType_1.AddressTypeToJSON)(value.address),
        'activities': value.activities === undefined ? undefined : (value.activities.map(ActivityListInner_1.ActivityListInnerToJSON)),
        'hotelId': value.hotelId,
    };
}
exports.FetchActivityBookingsTypeToJSON = FetchActivityBookingsTypeToJSON;
