/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { BlockId } from './BlockId';
import type { ReservationId } from './ReservationId';
import type { TypeOfMessageType } from './TypeOfMessageType';
/**
 * Holds the Message Information
 * @export
 * @interface ResvMessageType
 */
export interface ResvMessageType {
    /**
     * Message Content
     * @type {string}
     * @memberof ResvMessageType
     */
    messageText?: string;
    /**
     * Date the message was created
     * @type {string}
     * @memberof ResvMessageType
     */
    messageDate?: string;
    /**
     *
     * @type {TypeOfMessageType}
     * @memberof ResvMessageType
     */
    typeOfMessage?: TypeOfMessageType;
    /**
     * Recipient of the Message
     * @type {string}
     * @memberof ResvMessageType
     */
    recipient?: string;
    /**
     * User who created the Message
     * @type {string}
     * @memberof ResvMessageType
     */
    operator?: string;
    /**
     *
     * @type {ReservationId}
     * @memberof ResvMessageType
     */
    reservationId?: ReservationId;
    /**
     * Display room number if it has been assigned.
     * @type {string}
     * @memberof ResvMessageType
     */
    roomId?: string;
    /**
     * Status of the reservation.
     * @type {string}
     * @memberof ResvMessageType
     */
    reservationStatus?: string;
    /**
     * shows the number of nights for the reservation.
     * @type {number}
     * @memberof ResvMessageType
     */
    noOfNights?: number;
    /**
     * shows the Id of the Guest.
     * @type {number}
     * @memberof ResvMessageType
     */
    guestNameId?: number;
    /**
     * Display the departure date of the guest.
     * @type {string}
     * @memberof ResvMessageType
     */
    departureDate?: string;
    /**
     * Display the arrival date of the guest.
     * @type {string}
     * @memberof ResvMessageType
     */
    arrivalDate?: string;
    /**
     * Confirmation number of the reservation.
     * @type {string}
     * @memberof ResvMessageType
     */
    confirmationNo?: string;
    /**
     * Display the block code associated with the reservation.
     * @type {string}
     * @memberof ResvMessageType
     */
    blockCode?: string;
    /**
     * Guarantee Code.
     * @type {string}
     * @memberof ResvMessageType
     */
    guaranteeCode?: string;
    /**
     *
     * @type {BlockId}
     * @memberof ResvMessageType
     */
    blockId?: BlockId;
    /**
     * Display the status of the Room.
     * @type {string}
     * @memberof ResvMessageType
     */
    roomStatus?: string;
}
/**
 * Check if a given object implements the ResvMessageType interface.
 */
export declare function instanceOfResvMessageType(value: object): boolean;
export declare function ResvMessageTypeFromJSON(json: any): ResvMessageType;
export declare function ResvMessageTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResvMessageType;
export declare function ResvMessageTypeToJSON(value?: ResvMessageType | null): any;
