/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthorizerInfoType } from './AuthorizerInfoType';
import {
    AuthorizerInfoTypeFromJSON,
    AuthorizerInfoTypeFromJSONTyped,
    AuthorizerInfoTypeToJSON,
} from './AuthorizerInfoType';
import type { PromoCodeCompRoutingTypeDuration } from './PromoCodeCompRoutingTypeDuration';
import {
    PromoCodeCompRoutingTypeDurationFromJSON,
    PromoCodeCompRoutingTypeDurationFromJSONTyped,
    PromoCodeCompRoutingTypeDurationToJSON,
} from './PromoCodeCompRoutingTypeDuration';

/**
 * Promotion Code Complimentary Routing limit can be one of the three: Credit Limit, Percetage Limit, Covers Limit
 * @export
 * @interface PromoCodeCompRoutingType
 */
export interface PromoCodeCompRoutingType {
    /**
     * 
     * @type {AuthorizerInfoType}
     * @memberof PromoCodeCompRoutingType
     */
    authorizerInfo?: AuthorizerInfoType;
    /**
     * User Defined Comments. Used for promotion code Complimentary Routing.
     * @type {string}
     * @memberof PromoCodeCompRoutingType
     */
    comments?: string;
    /**
     * Flag to indicate that pre approval is required for promotion code complimentary routing .
     * @type {boolean}
     * @memberof PromoCodeCompRoutingType
     */
    compPreApprovalRequired?: boolean;
    /**
     * Number of covers for this promotion code complimentary routing instruction.
     * @type {number}
     * @memberof PromoCodeCompRoutingType
     */
    covers?: number;
    /**
     * Allowable credit amount for this promotion code complimentary routing instruction. Null value means no limit, 0 equals zero.
     * @type {number}
     * @memberof PromoCodeCompRoutingType
     */
    creditLimit?: number;
    /**
     * 
     * @type {PromoCodeCompRoutingTypeDuration}
     * @memberof PromoCodeCompRoutingType
     */
    duration?: PromoCodeCompRoutingTypeDuration;
    /**
     * The folio number where it is applied for promotion code complimentary routing.
     * @type {number}
     * @memberof PromoCodeCompRoutingType
     */
    folioNo?: number;
    /**
     * Membership number for promotion code complimentary routing
     * @type {string}
     * @memberof PromoCodeCompRoutingType
     */
    membershipId?: string;
    /**
     * The promotion code complimentary routing limit percentage allowed for this routing instruction.
     * @type {number}
     * @memberof PromoCodeCompRoutingType
     */
    percentageLimit?: number;
    /**
     * Promotion code for Complimentary Routing
     * @type {string}
     * @memberof PromoCodeCompRoutingType
     */
    promotionCode?: string;
    /**
     * Flag to indicate to prompt the Authorizer for promotion code complimentary routing.
     * @type {boolean}
     * @memberof PromoCodeCompRoutingType
     */
    promptForAuthorizer?: boolean;
}

/**
 * Check if a given object implements the PromoCodeCompRoutingType interface.
 */
export function instanceOfPromoCodeCompRoutingType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PromoCodeCompRoutingTypeFromJSON(json: any): PromoCodeCompRoutingType {
    return PromoCodeCompRoutingTypeFromJSONTyped(json, false);
}

export function PromoCodeCompRoutingTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PromoCodeCompRoutingType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'authorizerInfo': !exists(json, 'authorizerInfo') ? undefined : AuthorizerInfoTypeFromJSON(json['authorizerInfo']),
        'comments': !exists(json, 'comments') ? undefined : json['comments'],
        'compPreApprovalRequired': !exists(json, 'compPreApprovalRequired') ? undefined : json['compPreApprovalRequired'],
        'covers': !exists(json, 'covers') ? undefined : json['covers'],
        'creditLimit': !exists(json, 'creditLimit') ? undefined : json['creditLimit'],
        'duration': !exists(json, 'duration') ? undefined : PromoCodeCompRoutingTypeDurationFromJSON(json['duration']),
        'folioNo': !exists(json, 'folioNo') ? undefined : json['folioNo'],
        'membershipId': !exists(json, 'membershipId') ? undefined : json['membershipId'],
        'percentageLimit': !exists(json, 'percentageLimit') ? undefined : json['percentageLimit'],
        'promotionCode': !exists(json, 'promotionCode') ? undefined : json['promotionCode'],
        'promptForAuthorizer': !exists(json, 'promptForAuthorizer') ? undefined : json['promptForAuthorizer'],
    };
}

export function PromoCodeCompRoutingTypeToJSON(value?: PromoCodeCompRoutingType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'authorizerInfo': AuthorizerInfoTypeToJSON(value.authorizerInfo),
        'comments': value.comments,
        'compPreApprovalRequired': value.compPreApprovalRequired,
        'covers': value.covers,
        'creditLimit': value.creditLimit,
        'duration': PromoCodeCompRoutingTypeDurationToJSON(value.duration),
        'folioNo': value.folioNo,
        'membershipId': value.membershipId,
        'percentageLimit': value.percentageLimit,
        'promotionCode': value.promotionCode,
        'promptForAuthorizer': value.promptForAuthorizer,
    };
}

