/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AssociateCommissionAgentToReservationsRequest, AssociateCommissionAgentToReservationsStatus, BankAccountsDetails, CalculateCommissionsRequest, CalculateCommissionsStatus, ChangeCommissionCheckRequest, ChangeCommissionPaymentActivityByRangeRequest, ChangeCommissionRequest, CommissionCheckStatus, CommissionDetails, CommissionNotesDetails, CommissionPaymentActivityByRangeStatus, CommissionPaymentDetails, CommissionPaymentsActivityDetails, CommissionStatus, CommissionsDetails, ProcessCommissionPaymentsRequest, ProcessCommissionPaymentsStatus, RecalculateCommissionOnCodeChangeRequest, RecalculateCommissionOnCodeChangeStatus, ReprintCommissionCheckByRangeRequest, ReprintCommissionCheckByRangeStatus, SetProcessingInstructionsRequest, Status } from '../models';
export interface AssociateCommissionAgentToReservationsOperationRequest {
    commissionAgentId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    associateCommissionAgentToReservations?: AssociateCommissionAgentToReservationsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface CalculateCommissionsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    calculateCommissions?: CalculateCommissionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ChangeCommissionOperationRequest {
    commissionId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    commissionToBeChanged?: ChangeCommissionRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ChangeCommissionCheckOperationRequest {
    bankAccountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    commissionCheckToBeChanged?: ChangeCommissionCheckRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ChangeCommissionPaymentActivityByRangeOperationRequest {
    bankAccountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    commissionPaymentActivityByRangeToBeChanged?: ChangeCommissionPaymentActivityByRangeRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DiscardCommissionChecksRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    bankAccountId?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    batchId?: string;
    batchIdIdExtension?: number;
    batchIdIdContext?: string;
    batchIdType?: string;
    fromCheck?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBankAccountsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    bankName?: string;
    bankAccountNo?: string;
    currency?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCommissionRequest {
    commissionId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCommissionNotesRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCommissionPaymentDetailsRequest {
    hotelId?: string;
    reservationId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCommissionPaymentsActivityRequest {
    bankAccountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    batchId?: string;
    batchIdIdExtension?: number;
    batchIdIdContext?: string;
    batchIdType?: string;
    fileName?: string;
    payee?: string;
    checkNo?: number;
    status?: Set<GetCommissionPaymentsActivityStatusEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCommissionsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    bankAccountId?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    agentId?: string;
    agentIdIdExtension?: number;
    agentIdIdContext?: string;
    agentIdType?: string;
    resvNameId?: string;
    resvNameIdIdExtension?: number;
    resvNameIdIdContext?: string;
    resvNameIdType?: string;
    commissionId?: string;
    commissionIdIdExtension?: number;
    commissionIdIdContext?: string;
    commissionIdType?: string;
    batchId?: string;
    batchIdIdExtension?: number;
    batchIdIdContext?: string;
    batchIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservationsForCommissionsRequest {
    hotelId?: string;
    bankAccountId?: string;
    agentId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    guestName?: string;
    confirmationNo?: string;
    reservationStatus?: Set<GetReservationsForCommissionsReservationStatusEnum>;
    accountReceivableOffset?: boolean;
    onHold?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetTravelAgentsForCommissionsRequest {
    hotelId?: string;
    bankAccountId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ProcessCommissionPaymentsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    processCommissionPayments?: ProcessCommissionPaymentsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface RecalculateCommissionOnCodeChangeOperationRequest {
    commissionCode?: string;
    commissionId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    recalculateCommissionOnCodeChange?: RecalculateCommissionOnCodeChangeRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface RemoveCommissionRequest {
    commissionId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    detachDescription?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface RemoveCommissionAgentFromReservationsRequest {
    commissionAgentId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    commissionAgentType?: RemoveCommissionAgentFromReservationsCommissionAgentTypeEnum;
    idExtension?: number;
    idContext?: string;
    type?: string;
    reservationId?: Array<string>;
    reservationIdIdExtension?: Array<number>;
    reservationIdIdContext?: Array<string>;
    reservationIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ReprintCommissionCheckByRangeOperationRequest {
    bankAccountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reprintCommissionCheckByRange?: ReprintCommissionCheckByRangeRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface SetProcessingInstructionsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    setProcessingInstructions?: SetProcessingInstructionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class CommissionsApi extends runtime.BaseAPI {
    /**
     *  <p><strong>OperationId:</strong>associateCommissionAgentToReservations</p>
     * Operation to associate commission agent to reservations.
     */
    associateCommissionAgentToReservationsRaw(requestParameters: AssociateCommissionAgentToReservationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssociateCommissionAgentToReservationsStatus>>;
    /**
     *  <p><strong>OperationId:</strong>associateCommissionAgentToReservations</p>
     * Operation to associate commission agent to reservations.
     */
    associateCommissionAgentToReservations(requestParameters: AssociateCommissionAgentToReservationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssociateCommissionAgentToReservationsStatus>;
    /**
     *  <p><strong>OperationId:</strong>calculateCommissions</p>
     * Operation to calculate commissions.
     */
    calculateCommissionsRaw(requestParameters: CalculateCommissionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CalculateCommissionsStatus>>;
    /**
     *  <p><strong>OperationId:</strong>calculateCommissions</p>
     * Operation to calculate commissions.
     */
    calculateCommissions(requestParameters: CalculateCommissionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CalculateCommissionsStatus>;
    /**
     *  <p><strong>OperationId:</strong>changeCommission</p>
     * Operation to change commission.
     */
    changeCommissionRaw(requestParameters: ChangeCommissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionStatus>>;
    /**
     *  <p><strong>OperationId:</strong>changeCommission</p>
     * Operation to change commission.
     */
    changeCommission(requestParameters: ChangeCommissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionStatus>;
    /**
     *  <p><strong>OperationId:</strong>changeCommissionCheck</p>
     * Operation to change commission check.
     */
    changeCommissionCheckRaw(requestParameters: ChangeCommissionCheckOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionCheckStatus>>;
    /**
     *  <p><strong>OperationId:</strong>changeCommissionCheck</p>
     * Operation to change commission check.
     */
    changeCommissionCheck(requestParameters: ChangeCommissionCheckOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionCheckStatus>;
    /**
     *  <p><strong>OperationId:</strong>changeCommissionPaymentActivityByRange</p>
     * Operation to change commission payment activity by range.
     */
    changeCommissionPaymentActivityByRangeRaw(requestParameters: ChangeCommissionPaymentActivityByRangeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionPaymentActivityByRangeStatus>>;
    /**
     *  <p><strong>OperationId:</strong>changeCommissionPaymentActivityByRange</p>
     * Operation to change commission payment activity by range.
     */
    changeCommissionPaymentActivityByRange(requestParameters: ChangeCommissionPaymentActivityByRangeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionPaymentActivityByRangeStatus>;
    /**
     *  <p><strong>OperationId:</strong>discardCommissionChecks</p>
     * Operation to discard commission checks.
     */
    discardCommissionChecksRaw(requestParameters: DiscardCommissionChecksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>discardCommissionChecks</p>
     * Operation to discard commission checks.
     */
    discardCommissionChecks(requestParameters: DiscardCommissionChecksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>getBankAccounts</p>
     * Operation to fetch bank accounts.
     */
    getBankAccountsRaw(requestParameters: GetBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountsDetails>>;
    /**
     *  <p><strong>OperationId:</strong>getBankAccounts</p>
     * Operation to fetch bank accounts.
     */
    getBankAccounts(requestParameters: GetBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountsDetails>;
    /**
     *  <p><strong>OperationId:</strong>getCommission</p>
     * Operation to fetch commission.
     */
    getCommissionRaw(requestParameters: GetCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionDetails>>;
    /**
     *  <p><strong>OperationId:</strong>getCommission</p>
     * Operation to fetch commission.
     */
    getCommission(requestParameters: GetCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionDetails>;
    /**
     *  <p><strong>OperationId:</strong>getCommissionNotes</p>
     * Operation to fetch commission notes.
     */
    getCommissionNotesRaw(requestParameters: GetCommissionNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionNotesDetails>>;
    /**
     *  <p><strong>OperationId:</strong>getCommissionNotes</p>
     * Operation to fetch commission notes.
     */
    getCommissionNotes(requestParameters: GetCommissionNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionNotesDetails>;
    /**
     * You can use this API to fetch commission payment details. <p><strong>OperationId:</strong>getCommissionPaymentDetails</p>
     * Fetch Commission Payment Details
     */
    getCommissionPaymentDetailsRaw(requestParameters: GetCommissionPaymentDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionPaymentDetails>>;
    /**
     * You can use this API to fetch commission payment details. <p><strong>OperationId:</strong>getCommissionPaymentDetails</p>
     * Fetch Commission Payment Details
     */
    getCommissionPaymentDetails(requestParameters: GetCommissionPaymentDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionPaymentDetails>;
    /**
     *  <p><strong>OperationId:</strong>getCommissionPaymentsActivity</p>
     * Operation to fetch commission payments activity.
     */
    getCommissionPaymentsActivityRaw(requestParameters: GetCommissionPaymentsActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionPaymentsActivityDetails>>;
    /**
     *  <p><strong>OperationId:</strong>getCommissionPaymentsActivity</p>
     * Operation to fetch commission payments activity.
     */
    getCommissionPaymentsActivity(requestParameters: GetCommissionPaymentsActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionPaymentsActivityDetails>;
    /**
     *  <p><strong>OperationId:</strong>getCommissions</p>
     * Operation to fetch commissions.
     */
    getCommissionsRaw(requestParameters: GetCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionsDetails>>;
    /**
     *  <p><strong>OperationId:</strong>getCommissions</p>
     * Operation to fetch commissions.
     */
    getCommissions(requestParameters: GetCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionsDetails>;
    /**
     *  <p><strong>OperationId:</strong>getReservationsForCommissions</p>
     * Operation to fetch Reservations for Commissions associated to a Travel Agent
     */
    getReservationsForCommissionsRaw(requestParameters: GetReservationsForCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionsDetails>>;
    /**
     *  <p><strong>OperationId:</strong>getReservationsForCommissions</p>
     * Operation to fetch Reservations for Commissions associated to a Travel Agent
     */
    getReservationsForCommissions(requestParameters: GetReservationsForCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionsDetails>;
    /**
     *  <p><strong>OperationId:</strong>getTravelAgentsForCommissions</p>
     * Operation to fetch Travel Agents associated with commissions for the given bank Account.
     */
    getTravelAgentsForCommissionsRaw(requestParameters: GetTravelAgentsForCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionsDetails>>;
    /**
     *  <p><strong>OperationId:</strong>getTravelAgentsForCommissions</p>
     * Operation to fetch Travel Agents associated with commissions for the given bank Account.
     */
    getTravelAgentsForCommissions(requestParameters: GetTravelAgentsForCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionsDetails>;
    /**
     *  <p><strong>OperationId:</strong>processCommissionPayments</p>
     * Operation to process commission payments.
     */
    processCommissionPaymentsRaw(requestParameters: ProcessCommissionPaymentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessCommissionPaymentsStatus>>;
    /**
     *  <p><strong>OperationId:</strong>processCommissionPayments</p>
     * Operation to process commission payments.
     */
    processCommissionPayments(requestParameters: ProcessCommissionPaymentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessCommissionPaymentsStatus>;
    /**
     *  <p><strong>OperationId:</strong>recalculateCommissionOnCodeChange</p>
     * Operation to recalculate commission on code change.
     */
    recalculateCommissionOnCodeChangeRaw(requestParameters: RecalculateCommissionOnCodeChangeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecalculateCommissionOnCodeChangeStatus>>;
    /**
     *  <p><strong>OperationId:</strong>recalculateCommissionOnCodeChange</p>
     * Operation to recalculate commission on code change.
     */
    recalculateCommissionOnCodeChange(requestParameters: RecalculateCommissionOnCodeChangeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecalculateCommissionOnCodeChangeStatus>;
    /**
     *  <p><strong>OperationId:</strong>removeCommission</p>
     * Operation to remove commission.
     */
    removeCommissionRaw(requestParameters: RemoveCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>removeCommission</p>
     * Operation to remove commission.
     */
    removeCommission(requestParameters: RemoveCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>removeCommissionAgentFromReservations</p>
     * Operation to remove commission agent from reservations.
     */
    removeCommissionAgentFromReservationsRaw(requestParameters: RemoveCommissionAgentFromReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>removeCommissionAgentFromReservations</p>
     * Operation to remove commission agent from reservations.
     */
    removeCommissionAgentFromReservations(requestParameters: RemoveCommissionAgentFromReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>reprintCommissionCheckByRange</p>
     * Operation to reprint commission check by range.
     */
    reprintCommissionCheckByRangeRaw(requestParameters: ReprintCommissionCheckByRangeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReprintCommissionCheckByRangeStatus>>;
    /**
     *  <p><strong>OperationId:</strong>reprintCommissionCheckByRange</p>
     * Operation to reprint commission check by range.
     */
    reprintCommissionCheckByRange(requestParameters: ReprintCommissionCheckByRangeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReprintCommissionCheckByRangeStatus>;
    /**
     *  <p><strong>OperationId:</strong>setProcessingInstructions</p>
     * Operation to set processing instructions.
     */
    setProcessingInstructionsRaw(requestParameters: SetProcessingInstructionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>setProcessingInstructions</p>
     * Operation to set processing instructions.
     */
    setProcessingInstructions(requestParameters: SetProcessingInstructionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
}
/**
 * @export
 */
export declare const GetCommissionPaymentsActivityStatusEnum: {
    readonly Outstanding: "Outstanding";
    readonly Reconciled: "Reconciled";
    readonly Unpresented: "Unpresented";
    readonly Void: "Void";
    readonly Failed: "Failed";
};
export type GetCommissionPaymentsActivityStatusEnum = typeof GetCommissionPaymentsActivityStatusEnum[keyof typeof GetCommissionPaymentsActivityStatusEnum];
/**
 * @export
 */
export declare const GetReservationsForCommissionsReservationStatusEnum: {
    readonly Cancelled: "Cancelled";
    readonly CheckedOut: "CheckedOut";
    readonly NoShow: "NoShow";
};
export type GetReservationsForCommissionsReservationStatusEnum = typeof GetReservationsForCommissionsReservationStatusEnum[keyof typeof GetReservationsForCommissionsReservationStatusEnum];
/**
 * @export
 */
export declare const RemoveCommissionAgentFromReservationsCommissionAgentTypeEnum: {
    readonly Agent: "Agent";
    readonly Source: "Source";
};
export type RemoveCommissionAgentFromReservationsCommissionAgentTypeEnum = typeof RemoveCommissionAgentFromReservationsCommissionAgentTypeEnum[keyof typeof RemoveCommissionAgentFromReservationsCommissionAgentTypeEnum];
