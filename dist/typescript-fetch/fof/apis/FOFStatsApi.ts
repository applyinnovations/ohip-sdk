/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionDetailType,
  ReservationQueueStatistics,
  Statistics,
  TaskSheetStatistics,
} from '../models';
import {
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    ReservationQueueStatisticsFromJSON,
    ReservationQueueStatisticsToJSON,
    StatisticsFromJSON,
    StatisticsToJSON,
    TaskSheetStatisticsFromJSON,
    TaskSheetStatisticsToJSON,
} from '../models';

export interface GetFrontOfficeStatisticsRequest {
    statisticsCode?: GetFrontOfficeStatisticsStatisticsCodeEnum;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    date?: Date;
    metric?: Set<GetFrontOfficeStatisticsMetricEnum>;
    parameterNames?: Array<string>;
    parameterValues?: Array<string>;
    roomClasses?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFrontOfficeStatisticsWithDateRangeRequest {
    statisticsCode?: GetFrontOfficeStatisticsWithDateRangeStatisticsCodeEnum;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    endDate?: Date;
    date?: Date;
    metric?: Set<GetFrontOfficeStatisticsWithDateRangeMetricEnum>;
    parameterNames?: Array<string>;
    parameterValues?: Array<string>;
    roomClasses?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationQueueStatisticsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTaskSheetStatisticsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeAllAssignedTasks?: boolean;
    includeTaskSheetsDetails?: boolean;
    taskCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class FOFStatsApi extends runtime.BaseAPI {

    /**
     * Use this API to return front office statistics for a specific hotel based on search criteria such as statisticsCode, hotelId, date, parameterNames, parameterValues, room Classes.<p><strong>OperationId:</strong>getFrontOfficeStatistics</p>
     * Get front office statistics
     */
    async getFrontOfficeStatisticsRaw(requestParameters: GetFrontOfficeStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Statistics>> {
        const queryParameters: any = {};

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = (requestParameters.date as any).toISOString().substr(0,10);
        }

        if (requestParameters.metric) {
            queryParameters['metric'] = requestParameters.metric;
        }

        if (requestParameters.parameterNames) {
            queryParameters['parameterNames'] = requestParameters.parameterNames;
        }

        if (requestParameters.parameterValues) {
            queryParameters['parameterValues'] = requestParameters.parameterValues;
        }

        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/frontOfficeStatistics/{statisticsCode}`.replace(`{${"statisticsCode"}}`, encodeURIComponent(String(requestParameters.statisticsCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatisticsFromJSON(jsonValue));
    }

    /**
     * Use this API to return front office statistics for a specific hotel based on search criteria such as statisticsCode, hotelId, date, parameterNames, parameterValues, room Classes.<p><strong>OperationId:</strong>getFrontOfficeStatistics</p>
     * Get front office statistics
     */
    async getFrontOfficeStatistics(requestParameters: GetFrontOfficeStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Statistics> {
        const response = await this.getFrontOfficeStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is useful to retrieve statistics regarding front office operations <p><strong>OperationId:</strong>getFrontOfficeStatisticsWithDateRange</p>
     * Get front office Statistics
     */
    async getFrontOfficeStatisticsWithDateRangeRaw(requestParameters: GetFrontOfficeStatisticsWithDateRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Statistics>> {
        const queryParameters: any = {};

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = (requestParameters.date as any).toISOString().substr(0,10);
        }

        if (requestParameters.metric) {
            queryParameters['metric'] = requestParameters.metric;
        }

        if (requestParameters.parameterNames) {
            queryParameters['parameterNames'] = requestParameters.parameterNames;
        }

        if (requestParameters.parameterValues) {
            queryParameters['parameterValues'] = requestParameters.parameterValues;
        }

        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/frontOfficeStatisticsRange/{statisticsCode}`.replace(`{${"statisticsCode"}}`, encodeURIComponent(String(requestParameters.statisticsCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatisticsFromJSON(jsonValue));
    }

    /**
     * This API is useful to retrieve statistics regarding front office operations <p><strong>OperationId:</strong>getFrontOfficeStatisticsWithDateRange</p>
     * Get front office Statistics
     */
    async getFrontOfficeStatisticsWithDateRange(requestParameters: GetFrontOfficeStatisticsWithDateRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Statistics> {
        const response = await this.getFrontOfficeStatisticsWithDateRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return reservation queue statistics for a specific property.<p><strong>OperationId:</strong>getReservationQueueStatistics</p>
     * Get hotel reservation queue statistics
     */
    async getReservationQueueStatisticsRaw(requestParameters: GetReservationQueueStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationQueueStatistics>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/queueReservationsStatistics`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationQueueStatisticsFromJSON(jsonValue));
    }

    /**
     * Use this API to return reservation queue statistics for a specific property.<p><strong>OperationId:</strong>getReservationQueueStatistics</p>
     * Get hotel reservation queue statistics
     */
    async getReservationQueueStatistics(requestParameters: GetReservationQueueStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationQueueStatistics> {
        const response = await this.getReservationQueueStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This Api will get the housekeeping statistics for your property. <p><strong>OperationId:</strong>getTaskSheetStatistics</p>
     * Get housekeeping statistics
     */
    async getTaskSheetStatisticsRaw(requestParameters: GetTaskSheetStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskSheetStatistics>> {
        const queryParameters: any = {};

        if (requestParameters.includeAllAssignedTasks !== undefined) {
            queryParameters['includeAllAssignedTasks'] = requestParameters.includeAllAssignedTasks;
        }

        if (requestParameters.includeTaskSheetsDetails !== undefined) {
            queryParameters['includeTaskSheetsDetails'] = requestParameters.includeTaskSheetsDetails;
        }

        if (requestParameters.taskCode !== undefined) {
            queryParameters['taskCode'] = requestParameters.taskCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/houseKeepingStatistics`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskSheetStatisticsFromJSON(jsonValue));
    }

    /**
     * This Api will get the housekeeping statistics for your property. <p><strong>OperationId:</strong>getTaskSheetStatistics</p>
     * Get housekeeping statistics
     */
    async getTaskSheetStatistics(requestParameters: GetTaskSheetStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskSheetStatistics> {
        const response = await this.getTaskSheetStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetFrontOfficeStatisticsStatisticsCodeEnum = {
    AdvanceCheckIn: 'AdvanceCheckIn',
    AiRoomAssignment: 'AIRoomAssignment',
    AvailableRooms: 'AvailableRooms',
    CheckIns: 'CheckIns',
    CheckOuts: 'CheckOuts',
    ComplimentaryOrHouseUse: 'ComplimentaryOrHouseUse',
    DailyProjection: 'DailyProjection',
    HouseSummary: 'HouseSummary',
    HouseSummaryMonthToDate: 'HouseSummaryMonthToDate',
    HouseSummaryYearToDate: 'HouseSummaryYearToDate',
    InHouse: 'InHouse',
    LastHourStatus: 'LastHourStatus',
    ReservationActivity: 'ReservationActivity',
    ReservationActivityDaily: 'ReservationActivityDaily',
    ReservationActivityMonthToDate: 'ReservationActivityMonthToDate',
    ReservationActivityYearToDate: 'ReservationActivityYearToDate',
    ReservationsCancellationsToday: 'ReservationsCancellationsToday',
    ReservationStatistics: 'ReservationStatistics',
    RoomMaintenance: 'RoomMaintenance',
    RoomStatus: 'RoomStatus',
    Turndown: 'Turndown',
    VipGuests: 'VIPGuests',
    CompRouting: 'CompRouting'
} as const;
export type GetFrontOfficeStatisticsStatisticsCodeEnum = typeof GetFrontOfficeStatisticsStatisticsCodeEnum[keyof typeof GetFrontOfficeStatisticsStatisticsCodeEnum];
/**
 * @export
 */
export const GetFrontOfficeStatisticsMetricEnum = {
    AdultsDeparted: 'AdultsDeparted',
    AdultsExpectedCheckedOut: 'AdultsExpectedCheckedOut',
    AdultsInHouse: 'AdultsInHouse',
    ArrivalAiAssgnMemberResvs: 'ArrivalAIAssgnMemberResvs',
    ArrivalAiAssgnOverridden: 'ArrivalAIAssgnOverridden',
    ArrivalAiAssgnResvs: 'ArrivalAIAssgnResvs',
    ArrivalAiAssgnVipResvs: 'ArrivalAIAssgnVIPResvs',
    ArrivalAiUpgResvs: 'ArrivalAIUpgResvs',
    ArrivalManualAssgnResvs: 'ArrivalManualAssgnResvs',
    ArrivalMemberResvs: 'ArrivalMemberResvs',
    ArrivalResvs: 'ArrivalResvs',
    ArrivalsActualPersons: 'ArrivalsActualPersons',
    ArrivalsActualRooms: 'ArrivalsActualRooms',
    ArrivalsActualVip: 'ArrivalsActualVIP',
    ArrivalsExpectedPersons: 'ArrivalsExpectedPersons',
    ArrivalsExpectedPersonsMadeToday: 'ArrivalsExpectedPersonsMadeToday',
    ArrivalsExpectedRooms: 'ArrivalsExpectedRooms',
    ArrivalsExpectedRoomsMadeToday: 'ArrivalsExpectedRoomsMadeToday',
    ArrivalsExpectedVip: 'ArrivalsExpectedVIP',
    ArrivalsExpectedVipMadeToday: 'ArrivalsExpectedVIPMadeToday',
    ArrivalsInLastHour: 'ArrivalsInLastHour',
    ArrivalsTotal: 'ArrivalsTotal',
    ArrivalUnallocResvs: 'ArrivalUnallocResvs',
    ArrivalVipResvs: 'ArrivalVIPResvs',
    AverageCheckInTime: 'AverageCheckInTime',
    AverageRoomRevenue: 'AverageRoomRevenue',
    BlockAdvanceCheckedInCurrent: 'BlockAdvanceCheckedInCurrent',
    BlockAdvanceCheckedInInhouse: 'BlockAdvanceCheckedInInhouse',
    BlockAdvanceCheckedInTotal: 'BlockAdvanceCheckedInTotal',
    BlocksNotPickedUp: 'BlocksNotPickedUp',
    CanceledOnArrivalPersons: 'CanceledOnArrivalPersons',
    CanceledOnArrivalRooms: 'CanceledOnArrivalRooms',
    CanceledOnArrivalVip: 'CanceledOnArrivalVIP',
    CancellationsTotal: 'CancellationsTotal',
    CheckedInsTotal: 'CheckedInsTotal',
    CheckedOutsTotal: 'CheckedOutsTotal',
    ChildrenDeparted: 'ChildrenDeparted',
    ChildrenExpectedCheckedOut: 'ChildrenExpectedCheckedOut',
    ChildrenInHouse: 'ChildrenInHouse',
    CleanAssigned: 'CleanAssigned',
    CleanedRooms: 'CleanedRooms',
    CleanOccupied: 'CleanOccupied',
    CleanVacant: 'CleanVacant',
    ComplimentaryArrivalPersons: 'ComplimentaryArrivalPersons',
    ComplimentaryArrivalRooms: 'ComplimentaryArrivalRooms',
    ComplimentaryArrivalVip: 'ComplimentaryArrivalVIP',
    ComplimentaryDeparturePersons: 'ComplimentaryDeparturePersons',
    ComplimentaryDepartureRooms: 'ComplimentaryDepartureRooms',
    ComplimentaryDepartureVip: 'ComplimentaryDepartureVIP',
    ComplimentaryStayoverPersons: 'ComplimentaryStayoverPersons',
    ComplimentaryStayoverRooms: 'ComplimentaryStayoverRooms',
    ComplimentaryStayoverVip: 'ComplimentaryStayoverVIP',
    CurrentAveWaitTime: 'CurrentAveWaitTime',
    DayUsePersons: 'DayUsePersons',
    DayUseRooms: 'DayUseRooms',
    DayUseVip: 'DayUseVIP',
    DeparturesActualPersons: 'DeparturesActualPersons',
    DeparturesActualRooms: 'DeparturesActualRooms',
    DeparturesActualVip: 'DeparturesActualVIP',
    DeparturesExpectedPersons: 'DeparturesExpectedPersons',
    DeparturesExpectedRooms: 'DeparturesExpectedRooms',
    DeparturesExpectedVip: 'DeparturesExpectedVIP',
    DeparturesInLastHour: 'DeparturesInLastHour',
    DeparturesTotal: 'DeparturesTotal',
    DirtyAssigned: 'DirtyAssigned',
    DirtyOccupied: 'DirtyOccupied',
    DirtyVacant: 'DirtyVacant',
    EarlyDeparturesPersons: 'EarlyDeparturesPersons',
    EarlyDeparturesRooms: 'EarlyDeparturesRooms',
    EarlyDeparturesVip: 'EarlyDeparturesVIP',
    ExpectedCheckInsTotal: 'ExpectedCheckInsTotal',
    ExpectedCheckOutsTotal: 'ExpectedCheckOutsTotal',
    ExtendedStaysPersons: 'ExtendedStaysPersons',
    ExtendedStaysRooms: 'ExtendedStaysRooms',
    ExtendedStaysVip: 'ExtendedStaysVIP',
    GroupAndBlockPersons: 'GroupAndBlockPersons',
    GroupAndBlockRooms: 'GroupAndBlockRooms',
    GroupAndBlockVip: 'GroupAndBlockVIP',
    HouseUseArrivalPersons: 'HouseUseArrivalPersons',
    HouseUseArrivalRooms: 'HouseUseArrivalRooms',
    HouseUseArrivalVip: 'HouseUseArrivalVIP',
    HouseUseDeparturePersons: 'HouseUseDeparturePersons',
    HouseUseDepartureRooms: 'HouseUseDepartureRooms',
    HouseUseDepartureVip: 'HouseUseDepartureVIP',
    HouseUseStayoverPersons: 'HouseUseStayoverPersons',
    HouseUseStayoverRooms: 'HouseUseStayoverRooms',
    HouseUseStayoverVip: 'HouseUseStayoverVIP',
    IndividualAdvanceCheckedInCurrent: 'IndividualAdvanceCheckedInCurrent',
    IndividualAdvanceCheckedInInhouse: 'IndividualAdvanceCheckedInInhouse',
    IndividualAdvanceCheckedInTotal: 'IndividualAdvanceCheckedInTotal',
    IndividualPersons: 'IndividualPersons',
    IndividualRooms: 'IndividualRooms',
    IndividualVip: 'IndividualVIP',
    InHouse: 'InHouse',
    InHouseBlocksTotal: 'InHouseBlocksTotal',
    InHouseRooms: 'InHouseRooms',
    InspectedAssigned: 'InspectedAssigned',
    InspectedOccupied: 'InspectedOccupied',
    InspectedRooms: 'InspectedRooms',
    InspectedVacant: 'InspectedVacant',
    MaxOccupancyPercentage: 'MaxOccupancyPercentage',
    MaxOccupiedTonightPersons: 'MaxOccupiedTonightPersons',
    MaxOccupiedTonightRooms: 'MaxOccupiedTonightRooms',
    MaxOccupiedTonightVip: 'MaxOccupiedTonightVIP',
    MaxPercentageOccupiedTonightRooms: 'MaxPercentageOccupiedTonightRooms',
    MinAvailableTonightRooms: 'MinAvailableTonightRooms',
    NewReservationsTotal: 'NewReservationsTotal',
    OpenFolioTotal: 'OpenFolioTotal',
    OutOfOrderAssigned: 'OutOfOrderAssigned',
    OutOfOrderOccupied: 'OutOfOrderOccupied',
    OutOfOrderVacant: 'OutOfOrderVacant',
    OutOfServiceAssigned: 'OutOfServiceAssigned',
    OutOfServiceOccupied: 'OutOfServiceOccupied',
    OutOfServiceVacant: 'OutOfServiceVacant',
    PercentRoomsOccupied: 'PercentRoomsOccupied',
    PickupAssigned: 'PickupAssigned',
    PickupOccupied: 'PickupOccupied',
    PickupVacant: 'PickupVacant',
    PreRegisteredTotal: 'PreRegisteredTotal',
    QueueRooms: 'QueueRooms',
    RevPar: 'RevPar',
    RoomMaintenanceResolvedTotal: 'RoomMaintenanceResolvedTotal',
    RoomMaintenanceUnResolvedTotal: 'RoomMaintenanceUnResolvedTotal',
    RoomRevenue: 'RoomRevenue',
    ScheduledCheckOutsTotal: 'ScheduledCheckOutsTotal',
    SkipRooms: 'SkipRooms',
    SleepRooms: 'SleepRooms',
    Stayover: 'Stayover',
    StayoverPersons: 'StayoverPersons',
    StayoverRooms: 'StayoverRooms',
    StayoverVip: 'StayoverVIP',
    TotalOutOfOrder: 'TotalOutOfOrder',
    TotalOutOfService: 'TotalOutOfService',
    TotalPhysicalRooms: 'TotalPhysicalRooms',
    TotalRevenue: 'TotalRevenue',
    TotalRoomsReserved: 'TotalRoomsReserved',
    TotalRoomsToSell: 'TotalRoomsToSell',
    TurndownCompletedRequired: 'TurndownCompletedRequired',
    TurndownNotRequired: 'TurndownNotRequired',
    TurndownRequired: 'TurndownRequired',
    TurndownTotal: 'TurndownTotal',
    VipGuestsArriving: 'VIPGuestsArriving',
    VipGuestsDeparting: 'VIPGuestsDeparting',
    VipGuestsTotal: 'VIPGuestsTotal',
    VipPreRegisteredTotal: 'VIPPreRegisteredTotal',
    VipTurndownTotal: 'VIPTurndownTotal',
    WalkInPersons: 'WalkInPersons',
    WalkInRooms: 'WalkInRooms',
    ApprovedCompPostings: 'ApprovedCompPostings',
    StagedCompPostings: 'StagedCompPostings',
    DeclinedCompPostings: 'DeclinedCompPostings',
    CompRoutingInstructionsRequests: 'CompRoutingInstructionsRequests',
    WalkInVip: 'WalkInVIP'
} as const;
export type GetFrontOfficeStatisticsMetricEnum = typeof GetFrontOfficeStatisticsMetricEnum[keyof typeof GetFrontOfficeStatisticsMetricEnum];
/**
 * @export
 */
export const GetFrontOfficeStatisticsWithDateRangeStatisticsCodeEnum = {
    ReservationActivityDaily: 'ReservationActivityDaily'
} as const;
export type GetFrontOfficeStatisticsWithDateRangeStatisticsCodeEnum = typeof GetFrontOfficeStatisticsWithDateRangeStatisticsCodeEnum[keyof typeof GetFrontOfficeStatisticsWithDateRangeStatisticsCodeEnum];
/**
 * @export
 */
export const GetFrontOfficeStatisticsWithDateRangeMetricEnum = {
    AdultsDeparted: 'AdultsDeparted',
    AdultsExpectedCheckedOut: 'AdultsExpectedCheckedOut',
    AdultsInHouse: 'AdultsInHouse',
    ArrivalAiAssgnMemberResvs: 'ArrivalAIAssgnMemberResvs',
    ArrivalAiAssgnOverridden: 'ArrivalAIAssgnOverridden',
    ArrivalAiAssgnResvs: 'ArrivalAIAssgnResvs',
    ArrivalAiAssgnVipResvs: 'ArrivalAIAssgnVIPResvs',
    ArrivalAiUpgResvs: 'ArrivalAIUpgResvs',
    ArrivalManualAssgnResvs: 'ArrivalManualAssgnResvs',
    ArrivalMemberResvs: 'ArrivalMemberResvs',
    ArrivalResvs: 'ArrivalResvs',
    ArrivalsActualPersons: 'ArrivalsActualPersons',
    ArrivalsActualRooms: 'ArrivalsActualRooms',
    ArrivalsActualVip: 'ArrivalsActualVIP',
    ArrivalsExpectedPersons: 'ArrivalsExpectedPersons',
    ArrivalsExpectedPersonsMadeToday: 'ArrivalsExpectedPersonsMadeToday',
    ArrivalsExpectedRooms: 'ArrivalsExpectedRooms',
    ArrivalsExpectedRoomsMadeToday: 'ArrivalsExpectedRoomsMadeToday',
    ArrivalsExpectedVip: 'ArrivalsExpectedVIP',
    ArrivalsExpectedVipMadeToday: 'ArrivalsExpectedVIPMadeToday',
    ArrivalsInLastHour: 'ArrivalsInLastHour',
    ArrivalsTotal: 'ArrivalsTotal',
    ArrivalUnallocResvs: 'ArrivalUnallocResvs',
    ArrivalVipResvs: 'ArrivalVIPResvs',
    AverageCheckInTime: 'AverageCheckInTime',
    AverageRoomRevenue: 'AverageRoomRevenue',
    BlockAdvanceCheckedInCurrent: 'BlockAdvanceCheckedInCurrent',
    BlockAdvanceCheckedInInhouse: 'BlockAdvanceCheckedInInhouse',
    BlockAdvanceCheckedInTotal: 'BlockAdvanceCheckedInTotal',
    BlocksNotPickedUp: 'BlocksNotPickedUp',
    CanceledOnArrivalPersons: 'CanceledOnArrivalPersons',
    CanceledOnArrivalRooms: 'CanceledOnArrivalRooms',
    CanceledOnArrivalVip: 'CanceledOnArrivalVIP',
    CancellationsTotal: 'CancellationsTotal',
    CheckedInsTotal: 'CheckedInsTotal',
    CheckedOutsTotal: 'CheckedOutsTotal',
    ChildrenDeparted: 'ChildrenDeparted',
    ChildrenExpectedCheckedOut: 'ChildrenExpectedCheckedOut',
    ChildrenInHouse: 'ChildrenInHouse',
    CleanAssigned: 'CleanAssigned',
    CleanedRooms: 'CleanedRooms',
    CleanOccupied: 'CleanOccupied',
    CleanVacant: 'CleanVacant',
    ComplimentaryArrivalPersons: 'ComplimentaryArrivalPersons',
    ComplimentaryArrivalRooms: 'ComplimentaryArrivalRooms',
    ComplimentaryArrivalVip: 'ComplimentaryArrivalVIP',
    ComplimentaryDeparturePersons: 'ComplimentaryDeparturePersons',
    ComplimentaryDepartureRooms: 'ComplimentaryDepartureRooms',
    ComplimentaryDepartureVip: 'ComplimentaryDepartureVIP',
    ComplimentaryStayoverPersons: 'ComplimentaryStayoverPersons',
    ComplimentaryStayoverRooms: 'ComplimentaryStayoverRooms',
    ComplimentaryStayoverVip: 'ComplimentaryStayoverVIP',
    CurrentAveWaitTime: 'CurrentAveWaitTime',
    DayUsePersons: 'DayUsePersons',
    DayUseRooms: 'DayUseRooms',
    DayUseVip: 'DayUseVIP',
    DeparturesActualPersons: 'DeparturesActualPersons',
    DeparturesActualRooms: 'DeparturesActualRooms',
    DeparturesActualVip: 'DeparturesActualVIP',
    DeparturesExpectedPersons: 'DeparturesExpectedPersons',
    DeparturesExpectedRooms: 'DeparturesExpectedRooms',
    DeparturesExpectedVip: 'DeparturesExpectedVIP',
    DeparturesInLastHour: 'DeparturesInLastHour',
    DeparturesTotal: 'DeparturesTotal',
    DirtyAssigned: 'DirtyAssigned',
    DirtyOccupied: 'DirtyOccupied',
    DirtyVacant: 'DirtyVacant',
    EarlyDeparturesPersons: 'EarlyDeparturesPersons',
    EarlyDeparturesRooms: 'EarlyDeparturesRooms',
    EarlyDeparturesVip: 'EarlyDeparturesVIP',
    ExpectedCheckInsTotal: 'ExpectedCheckInsTotal',
    ExpectedCheckOutsTotal: 'ExpectedCheckOutsTotal',
    ExtendedStaysPersons: 'ExtendedStaysPersons',
    ExtendedStaysRooms: 'ExtendedStaysRooms',
    ExtendedStaysVip: 'ExtendedStaysVIP',
    GroupAndBlockPersons: 'GroupAndBlockPersons',
    GroupAndBlockRooms: 'GroupAndBlockRooms',
    GroupAndBlockVip: 'GroupAndBlockVIP',
    HouseUseArrivalPersons: 'HouseUseArrivalPersons',
    HouseUseArrivalRooms: 'HouseUseArrivalRooms',
    HouseUseArrivalVip: 'HouseUseArrivalVIP',
    HouseUseDeparturePersons: 'HouseUseDeparturePersons',
    HouseUseDepartureRooms: 'HouseUseDepartureRooms',
    HouseUseDepartureVip: 'HouseUseDepartureVIP',
    HouseUseStayoverPersons: 'HouseUseStayoverPersons',
    HouseUseStayoverRooms: 'HouseUseStayoverRooms',
    HouseUseStayoverVip: 'HouseUseStayoverVIP',
    IndividualAdvanceCheckedInCurrent: 'IndividualAdvanceCheckedInCurrent',
    IndividualAdvanceCheckedInInhouse: 'IndividualAdvanceCheckedInInhouse',
    IndividualAdvanceCheckedInTotal: 'IndividualAdvanceCheckedInTotal',
    IndividualPersons: 'IndividualPersons',
    IndividualRooms: 'IndividualRooms',
    IndividualVip: 'IndividualVIP',
    InHouse: 'InHouse',
    InHouseBlocksTotal: 'InHouseBlocksTotal',
    InHouseRooms: 'InHouseRooms',
    InspectedAssigned: 'InspectedAssigned',
    InspectedOccupied: 'InspectedOccupied',
    InspectedRooms: 'InspectedRooms',
    InspectedVacant: 'InspectedVacant',
    MaxOccupancyPercentage: 'MaxOccupancyPercentage',
    MaxOccupiedTonightPersons: 'MaxOccupiedTonightPersons',
    MaxOccupiedTonightRooms: 'MaxOccupiedTonightRooms',
    MaxOccupiedTonightVip: 'MaxOccupiedTonightVIP',
    MaxPercentageOccupiedTonightRooms: 'MaxPercentageOccupiedTonightRooms',
    MinAvailableTonightRooms: 'MinAvailableTonightRooms',
    NewReservationsTotal: 'NewReservationsTotal',
    OpenFolioTotal: 'OpenFolioTotal',
    OutOfOrderAssigned: 'OutOfOrderAssigned',
    OutOfOrderOccupied: 'OutOfOrderOccupied',
    OutOfOrderVacant: 'OutOfOrderVacant',
    OutOfServiceAssigned: 'OutOfServiceAssigned',
    OutOfServiceOccupied: 'OutOfServiceOccupied',
    OutOfServiceVacant: 'OutOfServiceVacant',
    PercentRoomsOccupied: 'PercentRoomsOccupied',
    PickupAssigned: 'PickupAssigned',
    PickupOccupied: 'PickupOccupied',
    PickupVacant: 'PickupVacant',
    PreRegisteredTotal: 'PreRegisteredTotal',
    QueueRooms: 'QueueRooms',
    RevPar: 'RevPar',
    RoomMaintenanceResolvedTotal: 'RoomMaintenanceResolvedTotal',
    RoomMaintenanceUnResolvedTotal: 'RoomMaintenanceUnResolvedTotal',
    RoomRevenue: 'RoomRevenue',
    ScheduledCheckOutsTotal: 'ScheduledCheckOutsTotal',
    SkipRooms: 'SkipRooms',
    SleepRooms: 'SleepRooms',
    Stayover: 'Stayover',
    StayoverPersons: 'StayoverPersons',
    StayoverRooms: 'StayoverRooms',
    StayoverVip: 'StayoverVIP',
    TotalOutOfOrder: 'TotalOutOfOrder',
    TotalOutOfService: 'TotalOutOfService',
    TotalPhysicalRooms: 'TotalPhysicalRooms',
    TotalRevenue: 'TotalRevenue',
    TotalRoomsReserved: 'TotalRoomsReserved',
    TotalRoomsToSell: 'TotalRoomsToSell',
    TurndownCompletedRequired: 'TurndownCompletedRequired',
    TurndownNotRequired: 'TurndownNotRequired',
    TurndownRequired: 'TurndownRequired',
    TurndownTotal: 'TurndownTotal',
    VipGuestsArriving: 'VIPGuestsArriving',
    VipGuestsDeparting: 'VIPGuestsDeparting',
    VipGuestsTotal: 'VIPGuestsTotal',
    VipPreRegisteredTotal: 'VIPPreRegisteredTotal',
    VipTurndownTotal: 'VIPTurndownTotal',
    WalkInPersons: 'WalkInPersons',
    WalkInRooms: 'WalkInRooms',
    ApprovedCompPostings: 'ApprovedCompPostings',
    StagedCompPostings: 'StagedCompPostings',
    DeclinedCompPostings: 'DeclinedCompPostings',
    CompRoutingInstructionsRequests: 'CompRoutingInstructionsRequests',
    WalkInVip: 'WalkInVIP'
} as const;
export type GetFrontOfficeStatisticsWithDateRangeMetricEnum = typeof GetFrontOfficeStatisticsWithDateRangeMetricEnum[keyof typeof GetFrontOfficeStatisticsWithDateRangeMetricEnum];
