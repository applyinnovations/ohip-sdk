/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssociateCommissionAgentToReservationsRequest,
  AssociateCommissionAgentToReservationsStatus,
  BankAccountsDetails,
  CalculateCommissionsRequest,
  CalculateCommissionsStatus,
  ChangeCommissionCheckRequest,
  ChangeCommissionPaymentActivityByRangeRequest,
  ChangeCommissionRequest,
  CommissionCheckStatus,
  CommissionDetails,
  CommissionNotesDetails,
  CommissionPaymentActivityByRangeStatus,
  CommissionPaymentDetails,
  CommissionPaymentsActivityDetails,
  CommissionStatus,
  CommissionsDetails,
  ExceptionDetailType,
  ProcessCommissionPaymentsRequest,
  ProcessCommissionPaymentsStatus,
  RecalculateCommissionOnCodeChangeRequest,
  RecalculateCommissionOnCodeChangeStatus,
  ReprintCommissionCheckByRangeRequest,
  ReprintCommissionCheckByRangeStatus,
  SetProcessingInstructionsRequest,
  Status,
} from '../models';
import {
    AssociateCommissionAgentToReservationsRequestFromJSON,
    AssociateCommissionAgentToReservationsRequestToJSON,
    AssociateCommissionAgentToReservationsStatusFromJSON,
    AssociateCommissionAgentToReservationsStatusToJSON,
    BankAccountsDetailsFromJSON,
    BankAccountsDetailsToJSON,
    CalculateCommissionsRequestFromJSON,
    CalculateCommissionsRequestToJSON,
    CalculateCommissionsStatusFromJSON,
    CalculateCommissionsStatusToJSON,
    ChangeCommissionCheckRequestFromJSON,
    ChangeCommissionCheckRequestToJSON,
    ChangeCommissionPaymentActivityByRangeRequestFromJSON,
    ChangeCommissionPaymentActivityByRangeRequestToJSON,
    ChangeCommissionRequestFromJSON,
    ChangeCommissionRequestToJSON,
    CommissionCheckStatusFromJSON,
    CommissionCheckStatusToJSON,
    CommissionDetailsFromJSON,
    CommissionDetailsToJSON,
    CommissionNotesDetailsFromJSON,
    CommissionNotesDetailsToJSON,
    CommissionPaymentActivityByRangeStatusFromJSON,
    CommissionPaymentActivityByRangeStatusToJSON,
    CommissionPaymentDetailsFromJSON,
    CommissionPaymentDetailsToJSON,
    CommissionPaymentsActivityDetailsFromJSON,
    CommissionPaymentsActivityDetailsToJSON,
    CommissionStatusFromJSON,
    CommissionStatusToJSON,
    CommissionsDetailsFromJSON,
    CommissionsDetailsToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    ProcessCommissionPaymentsRequestFromJSON,
    ProcessCommissionPaymentsRequestToJSON,
    ProcessCommissionPaymentsStatusFromJSON,
    ProcessCommissionPaymentsStatusToJSON,
    RecalculateCommissionOnCodeChangeRequestFromJSON,
    RecalculateCommissionOnCodeChangeRequestToJSON,
    RecalculateCommissionOnCodeChangeStatusFromJSON,
    RecalculateCommissionOnCodeChangeStatusToJSON,
    ReprintCommissionCheckByRangeRequestFromJSON,
    ReprintCommissionCheckByRangeRequestToJSON,
    ReprintCommissionCheckByRangeStatusFromJSON,
    ReprintCommissionCheckByRangeStatusToJSON,
    SetProcessingInstructionsRequestFromJSON,
    SetProcessingInstructionsRequestToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models';

export interface AssociateCommissionAgentToReservationsOperationRequest {
    commissionAgentId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    associateCommissionAgentToReservations?: AssociateCommissionAgentToReservationsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CalculateCommissionsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    calculateCommissions?: CalculateCommissionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeCommissionOperationRequest {
    commissionId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    commissionToBeChanged?: ChangeCommissionRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeCommissionCheckOperationRequest {
    bankAccountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    commissionCheckToBeChanged?: ChangeCommissionCheckRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeCommissionPaymentActivityByRangeOperationRequest {
    bankAccountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    commissionPaymentActivityByRangeToBeChanged?: ChangeCommissionPaymentActivityByRangeRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DiscardCommissionChecksRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    bankAccountId?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    batchId?: string;
    batchIdIdExtension?: number;
    batchIdIdContext?: string;
    batchIdType?: string;
    fromCheck?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBankAccountsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    bankName?: string;
    bankAccountNo?: string;
    currency?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCommissionRequest {
    commissionId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCommissionNotesRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCommissionPaymentDetailsRequest {
    hotelId?: string;
    reservationId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCommissionPaymentsActivityRequest {
    bankAccountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    batchId?: string;
    batchIdIdExtension?: number;
    batchIdIdContext?: string;
    batchIdType?: string;
    fileName?: string;
    payee?: string;
    checkNo?: number;
    status?: Set<GetCommissionPaymentsActivityStatusEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCommissionsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    bankAccountId?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    agentId?: string;
    agentIdIdExtension?: number;
    agentIdIdContext?: string;
    agentIdType?: string;
    resvNameId?: string;
    resvNameIdIdExtension?: number;
    resvNameIdIdContext?: string;
    resvNameIdType?: string;
    commissionId?: string;
    commissionIdIdExtension?: number;
    commissionIdIdContext?: string;
    commissionIdType?: string;
    batchId?: string;
    batchIdIdExtension?: number;
    batchIdIdContext?: string;
    batchIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationsForCommissionsRequest {
    hotelId?: string;
    bankAccountId?: string;
    agentId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    guestName?: string;
    confirmationNo?: string;
    reservationStatus?: Set<GetReservationsForCommissionsReservationStatusEnum>;
    accountReceivableOffset?: boolean;
    onHold?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTravelAgentsForCommissionsRequest {
    hotelId?: string;
    bankAccountId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ProcessCommissionPaymentsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    processCommissionPayments?: ProcessCommissionPaymentsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RecalculateCommissionOnCodeChangeOperationRequest {
    commissionCode?: string;
    commissionId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    recalculateCommissionOnCodeChange?: RecalculateCommissionOnCodeChangeRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveCommissionRequest {
    commissionId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    detachDescription?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveCommissionAgentFromReservationsRequest {
    commissionAgentId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    commissionAgentType?: RemoveCommissionAgentFromReservationsCommissionAgentTypeEnum;
    idExtension?: number;
    idContext?: string;
    type?: string;
    reservationId?: Array<string>;
    reservationIdIdExtension?: Array<number>;
    reservationIdIdContext?: Array<string>;
    reservationIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ReprintCommissionCheckByRangeOperationRequest {
    bankAccountId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reprintCommissionCheckByRange?: ReprintCommissionCheckByRangeRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SetProcessingInstructionsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    setProcessingInstructions?: SetProcessingInstructionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class CommissionsApi extends runtime.BaseAPI {

    /**
     *  <p><strong>OperationId:</strong>associateCommissionAgentToReservations</p>
     * Operation to associate commission agent to reservations.
     */
    async associateCommissionAgentToReservationsRaw(requestParameters: AssociateCommissionAgentToReservationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssociateCommissionAgentToReservationsStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissionAgent/{commissionAgentId}/commissions`.replace(`{${"commissionAgentId"}}`, encodeURIComponent(String(requestParameters.commissionAgentId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AssociateCommissionAgentToReservationsRequestToJSON(requestParameters.associateCommissionAgentToReservations),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssociateCommissionAgentToReservationsStatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>associateCommissionAgentToReservations</p>
     * Operation to associate commission agent to reservations.
     */
    async associateCommissionAgentToReservations(requestParameters: AssociateCommissionAgentToReservationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssociateCommissionAgentToReservationsStatus> {
        const response = await this.associateCommissionAgentToReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>calculateCommissions</p>
     * Operation to calculate commissions.
     */
    async calculateCommissionsRaw(requestParameters: CalculateCommissionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CalculateCommissionsStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CalculateCommissionsRequestToJSON(requestParameters.calculateCommissions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CalculateCommissionsStatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>calculateCommissions</p>
     * Operation to calculate commissions.
     */
    async calculateCommissions(requestParameters: CalculateCommissionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CalculateCommissionsStatus> {
        const response = await this.calculateCommissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>changeCommission</p>
     * Operation to change commission.
     */
    async changeCommissionRaw(requestParameters: ChangeCommissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissions/{commissionId}`.replace(`{${"commissionId"}}`, encodeURIComponent(String(requestParameters.commissionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeCommissionRequestToJSON(requestParameters.commissionToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommissionStatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>changeCommission</p>
     * Operation to change commission.
     */
    async changeCommission(requestParameters: ChangeCommissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionStatus> {
        const response = await this.changeCommissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>changeCommissionCheck</p>
     * Operation to change commission check.
     */
    async changeCommissionCheckRaw(requestParameters: ChangeCommissionCheckOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionCheckStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bankAccounts/{bankAccountId}/commissionChecks`.replace(`{${"bankAccountId"}}`, encodeURIComponent(String(requestParameters.bankAccountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeCommissionCheckRequestToJSON(requestParameters.commissionCheckToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommissionCheckStatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>changeCommissionCheck</p>
     * Operation to change commission check.
     */
    async changeCommissionCheck(requestParameters: ChangeCommissionCheckOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionCheckStatus> {
        const response = await this.changeCommissionCheckRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>changeCommissionPaymentActivityByRange</p>
     * Operation to change commission payment activity by range.
     */
    async changeCommissionPaymentActivityByRangeRaw(requestParameters: ChangeCommissionPaymentActivityByRangeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionPaymentActivityByRangeStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bankAccounts/{bankAccountId}/commissionPayments`.replace(`{${"bankAccountId"}}`, encodeURIComponent(String(requestParameters.bankAccountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeCommissionPaymentActivityByRangeRequestToJSON(requestParameters.commissionPaymentActivityByRangeToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommissionPaymentActivityByRangeStatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>changeCommissionPaymentActivityByRange</p>
     * Operation to change commission payment activity by range.
     */
    async changeCommissionPaymentActivityByRange(requestParameters: ChangeCommissionPaymentActivityByRangeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionPaymentActivityByRangeStatus> {
        const response = await this.changeCommissionPaymentActivityByRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>discardCommissionChecks</p>
     * Operation to discard commission checks.
     */
    async discardCommissionChecksRaw(requestParameters: DiscardCommissionChecksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.bankAccountId !== undefined) {
            queryParameters['bankAccountId'] = requestParameters.bankAccountId;
        }

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.batchId !== undefined) {
            queryParameters['BatchId'] = requestParameters.batchId;
        }

        if (requestParameters.batchIdIdExtension !== undefined) {
            queryParameters['batchIdIdExtension'] = requestParameters.batchIdIdExtension;
        }

        if (requestParameters.batchIdIdContext !== undefined) {
            queryParameters['batchIdIdContext'] = requestParameters.batchIdIdContext;
        }

        if (requestParameters.batchIdType !== undefined) {
            queryParameters['batchIdType'] = requestParameters.batchIdType;
        }

        if (requestParameters.fromCheck !== undefined) {
            queryParameters['fromCheck'] = requestParameters.fromCheck;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissionChecks`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>discardCommissionChecks</p>
     * Operation to discard commission checks.
     */
    async discardCommissionChecks(requestParameters: DiscardCommissionChecksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.discardCommissionChecksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getBankAccounts</p>
     * Operation to fetch bank accounts.
     */
    async getBankAccountsRaw(requestParameters: GetBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.bankName !== undefined) {
            queryParameters['bankName'] = requestParameters.bankName;
        }

        if (requestParameters.bankAccountNo !== undefined) {
            queryParameters['bankAccountNo'] = requestParameters.bankAccountNo;
        }

        if (requestParameters.currency !== undefined) {
            queryParameters['currency'] = requestParameters.currency;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bankAccounts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankAccountsDetailsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getBankAccounts</p>
     * Operation to fetch bank accounts.
     */
    async getBankAccounts(requestParameters: GetBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountsDetails> {
        const response = await this.getBankAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getCommission</p>
     * Operation to fetch commission.
     */
    async getCommissionRaw(requestParameters: GetCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionDetails>> {
        const queryParameters: any = {};

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissions/{commissionId}`.replace(`{${"commissionId"}}`, encodeURIComponent(String(requestParameters.commissionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommissionDetailsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getCommission</p>
     * Operation to fetch commission.
     */
    async getCommission(requestParameters: GetCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionDetails> {
        const response = await this.getCommissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getCommissionNotes</p>
     * Operation to fetch commission notes.
     */
    async getCommissionNotesRaw(requestParameters: GetCommissionNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionNotesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/commissionNotes`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommissionNotesDetailsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getCommissionNotes</p>
     * Operation to fetch commission notes.
     */
    async getCommissionNotes(requestParameters: GetCommissionNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionNotesDetails> {
        const response = await this.getCommissionNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to fetch commission payment details. <p><strong>OperationId:</strong>getCommissionPaymentDetails</p>
     * Fetch Commission Payment Details
     */
    async getCommissionPaymentDetailsRaw(requestParameters: GetCommissionPaymentDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionPaymentDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/commissionPaymentDetails`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommissionPaymentDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to fetch commission payment details. <p><strong>OperationId:</strong>getCommissionPaymentDetails</p>
     * Fetch Commission Payment Details
     */
    async getCommissionPaymentDetails(requestParameters: GetCommissionPaymentDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionPaymentDetails> {
        const response = await this.getCommissionPaymentDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getCommissionPaymentsActivity</p>
     * Operation to fetch commission payments activity.
     */
    async getCommissionPaymentsActivityRaw(requestParameters: GetCommissionPaymentsActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionPaymentsActivityDetails>> {
        const queryParameters: any = {};

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.batchId !== undefined) {
            queryParameters['batchId'] = requestParameters.batchId;
        }

        if (requestParameters.batchIdIdExtension !== undefined) {
            queryParameters['batchIdIdExtension'] = requestParameters.batchIdIdExtension;
        }

        if (requestParameters.batchIdIdContext !== undefined) {
            queryParameters['batchIdIdContext'] = requestParameters.batchIdIdContext;
        }

        if (requestParameters.batchIdType !== undefined) {
            queryParameters['batchIdType'] = requestParameters.batchIdType;
        }

        if (requestParameters.fileName !== undefined) {
            queryParameters['fileName'] = requestParameters.fileName;
        }

        if (requestParameters.payee !== undefined) {
            queryParameters['payee'] = requestParameters.payee;
        }

        if (requestParameters.checkNo !== undefined) {
            queryParameters['checkNo'] = requestParameters.checkNo;
        }

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bankAccounts/{bankAccountId}/commissionPayments`.replace(`{${"bankAccountId"}}`, encodeURIComponent(String(requestParameters.bankAccountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommissionPaymentsActivityDetailsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getCommissionPaymentsActivity</p>
     * Operation to fetch commission payments activity.
     */
    async getCommissionPaymentsActivity(requestParameters: GetCommissionPaymentsActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionPaymentsActivityDetails> {
        const response = await this.getCommissionPaymentsActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getCommissions</p>
     * Operation to fetch commissions.
     */
    async getCommissionsRaw(requestParameters: GetCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.bankAccountId !== undefined) {
            queryParameters['bankAccountId'] = requestParameters.bankAccountId;
        }

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.agentId !== undefined) {
            queryParameters['agentId'] = requestParameters.agentId;
        }

        if (requestParameters.agentIdIdExtension !== undefined) {
            queryParameters['agentIdIdExtension'] = requestParameters.agentIdIdExtension;
        }

        if (requestParameters.agentIdIdContext !== undefined) {
            queryParameters['agentIdIdContext'] = requestParameters.agentIdIdContext;
        }

        if (requestParameters.agentIdType !== undefined) {
            queryParameters['agentIdType'] = requestParameters.agentIdType;
        }

        if (requestParameters.resvNameId !== undefined) {
            queryParameters['resvNameId'] = requestParameters.resvNameId;
        }

        if (requestParameters.resvNameIdIdExtension !== undefined) {
            queryParameters['resvNameIdIdExtension'] = requestParameters.resvNameIdIdExtension;
        }

        if (requestParameters.resvNameIdIdContext !== undefined) {
            queryParameters['resvNameIdIdContext'] = requestParameters.resvNameIdIdContext;
        }

        if (requestParameters.resvNameIdType !== undefined) {
            queryParameters['resvNameIdType'] = requestParameters.resvNameIdType;
        }

        if (requestParameters.commissionId !== undefined) {
            queryParameters['commissionId'] = requestParameters.commissionId;
        }

        if (requestParameters.commissionIdIdExtension !== undefined) {
            queryParameters['commissionIdIdExtension'] = requestParameters.commissionIdIdExtension;
        }

        if (requestParameters.commissionIdIdContext !== undefined) {
            queryParameters['commissionIdIdContext'] = requestParameters.commissionIdIdContext;
        }

        if (requestParameters.commissionIdType !== undefined) {
            queryParameters['commissionIdType'] = requestParameters.commissionIdType;
        }

        if (requestParameters.batchId !== undefined) {
            queryParameters['batchId'] = requestParameters.batchId;
        }

        if (requestParameters.batchIdIdExtension !== undefined) {
            queryParameters['batchIdIdExtension'] = requestParameters.batchIdIdExtension;
        }

        if (requestParameters.batchIdIdContext !== undefined) {
            queryParameters['batchIdIdContext'] = requestParameters.batchIdIdContext;
        }

        if (requestParameters.batchIdType !== undefined) {
            queryParameters['batchIdType'] = requestParameters.batchIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommissionsDetailsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getCommissions</p>
     * Operation to fetch commissions.
     */
    async getCommissions(requestParameters: GetCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionsDetails> {
        const response = await this.getCommissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getReservationsForCommissions</p>
     * Operation to fetch Reservations for Commissions associated to a Travel Agent
     */
    async getReservationsForCommissionsRaw(requestParameters: GetReservationsForCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.guestName !== undefined) {
            queryParameters['guestName'] = requestParameters.guestName;
        }

        if (requestParameters.confirmationNo !== undefined) {
            queryParameters['confirmationNo'] = requestParameters.confirmationNo;
        }

        if (requestParameters.reservationStatus) {
            queryParameters['reservationStatus'] = requestParameters.reservationStatus;
        }

        if (requestParameters.accountReceivableOffset !== undefined) {
            queryParameters['accountReceivableOffset'] = requestParameters.accountReceivableOffset;
        }

        if (requestParameters.onHold !== undefined) {
            queryParameters['onHold'] = requestParameters.onHold;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bankAccounts/{bankAccountId}/agents/{agentId}/reservationsForCommissions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"bankAccountId"}}`, encodeURIComponent(String(requestParameters.bankAccountId))).replace(`{${"agentId"}}`, encodeURIComponent(String(requestParameters.agentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommissionsDetailsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getReservationsForCommissions</p>
     * Operation to fetch Reservations for Commissions associated to a Travel Agent
     */
    async getReservationsForCommissions(requestParameters: GetReservationsForCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionsDetails> {
        const response = await this.getReservationsForCommissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getTravelAgentsForCommissions</p>
     * Operation to fetch Travel Agents associated with commissions for the given bank Account.
     */
    async getTravelAgentsForCommissionsRaw(requestParameters: GetTravelAgentsForCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionsDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bankAccounts/{bankAccountId}/travelAgentsForCommissions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"bankAccountId"}}`, encodeURIComponent(String(requestParameters.bankAccountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommissionsDetailsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getTravelAgentsForCommissions</p>
     * Operation to fetch Travel Agents associated with commissions for the given bank Account.
     */
    async getTravelAgentsForCommissions(requestParameters: GetTravelAgentsForCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionsDetails> {
        const response = await this.getTravelAgentsForCommissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>processCommissionPayments</p>
     * Operation to process commission payments.
     */
    async processCommissionPaymentsRaw(requestParameters: ProcessCommissionPaymentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessCommissionPaymentsStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissionPayments`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessCommissionPaymentsRequestToJSON(requestParameters.processCommissionPayments),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessCommissionPaymentsStatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>processCommissionPayments</p>
     * Operation to process commission payments.
     */
    async processCommissionPayments(requestParameters: ProcessCommissionPaymentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessCommissionPaymentsStatus> {
        const response = await this.processCommissionPaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>recalculateCommissionOnCodeChange</p>
     * Operation to recalculate commission on code change.
     */
    async recalculateCommissionOnCodeChangeRaw(requestParameters: RecalculateCommissionOnCodeChangeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecalculateCommissionOnCodeChangeStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissions/{commissionId}/commissionCodes/{commissionCode}/recalculate`.replace(`{${"commissionCode"}}`, encodeURIComponent(String(requestParameters.commissionCode))).replace(`{${"commissionId"}}`, encodeURIComponent(String(requestParameters.commissionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RecalculateCommissionOnCodeChangeRequestToJSON(requestParameters.recalculateCommissionOnCodeChange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecalculateCommissionOnCodeChangeStatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>recalculateCommissionOnCodeChange</p>
     * Operation to recalculate commission on code change.
     */
    async recalculateCommissionOnCodeChange(requestParameters: RecalculateCommissionOnCodeChangeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecalculateCommissionOnCodeChangeStatus> {
        const response = await this.recalculateCommissionOnCodeChangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>removeCommission</p>
     * Operation to remove commission.
     */
    async removeCommissionRaw(requestParameters: RemoveCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.detachDescription !== undefined) {
            queryParameters['detachDescription'] = requestParameters.detachDescription;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissions/{commissionId}`.replace(`{${"commissionId"}}`, encodeURIComponent(String(requestParameters.commissionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>removeCommission</p>
     * Operation to remove commission.
     */
    async removeCommission(requestParameters: RemoveCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeCommissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>removeCommissionAgentFromReservations</p>
     * Operation to remove commission agent from reservations.
     */
    async removeCommissionAgentFromReservationsRaw(requestParameters: RemoveCommissionAgentFromReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.commissionAgentType !== undefined) {
            queryParameters['commissionAgentType'] = requestParameters.commissionAgentType;
        }

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.reservationId) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.reservationIdIdExtension) {
            queryParameters['reservationIdIdExtension'] = requestParameters.reservationIdIdExtension;
        }

        if (requestParameters.reservationIdIdContext) {
            queryParameters['reservationIdIdContext'] = requestParameters.reservationIdIdContext;
        }

        if (requestParameters.reservationIdType) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissionAgent/{commissionAgentId}/commissions`.replace(`{${"commissionAgentId"}}`, encodeURIComponent(String(requestParameters.commissionAgentId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>removeCommissionAgentFromReservations</p>
     * Operation to remove commission agent from reservations.
     */
    async removeCommissionAgentFromReservations(requestParameters: RemoveCommissionAgentFromReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeCommissionAgentFromReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>reprintCommissionCheckByRange</p>
     * Operation to reprint commission check by range.
     */
    async reprintCommissionCheckByRangeRaw(requestParameters: ReprintCommissionCheckByRangeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReprintCommissionCheckByRangeStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bankAccounts/{bankAccountId}/reprintCommission`.replace(`{${"bankAccountId"}}`, encodeURIComponent(String(requestParameters.bankAccountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReprintCommissionCheckByRangeRequestToJSON(requestParameters.reprintCommissionCheckByRange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReprintCommissionCheckByRangeStatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>reprintCommissionCheckByRange</p>
     * Operation to reprint commission check by range.
     */
    async reprintCommissionCheckByRange(requestParameters: ReprintCommissionCheckByRangeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReprintCommissionCheckByRangeStatus> {
        const response = await this.reprintCommissionCheckByRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>setProcessingInstructions</p>
     * Operation to set processing instructions.
     */
    async setProcessingInstructionsRaw(requestParameters: SetProcessingInstructionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissions/instructions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetProcessingInstructionsRequestToJSON(requestParameters.setProcessingInstructions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>setProcessingInstructions</p>
     * Operation to set processing instructions.
     */
    async setProcessingInstructions(requestParameters: SetProcessingInstructionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.setProcessingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCommissionPaymentsActivityStatusEnum = {
    Outstanding: 'Outstanding',
    Reconciled: 'Reconciled',
    Unpresented: 'Unpresented',
    Void: 'Void',
    Failed: 'Failed'
} as const;
export type GetCommissionPaymentsActivityStatusEnum = typeof GetCommissionPaymentsActivityStatusEnum[keyof typeof GetCommissionPaymentsActivityStatusEnum];
/**
 * @export
 */
export const GetReservationsForCommissionsReservationStatusEnum = {
    Cancelled: 'Cancelled',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow'
} as const;
export type GetReservationsForCommissionsReservationStatusEnum = typeof GetReservationsForCommissionsReservationStatusEnum[keyof typeof GetReservationsForCommissionsReservationStatusEnum];
/**
 * @export
 */
export const RemoveCommissionAgentFromReservationsCommissionAgentTypeEnum = {
    Agent: 'Agent',
    Source: 'Source'
} as const;
export type RemoveCommissionAgentFromReservationsCommissionAgentTypeEnum = typeof RemoveCommissionAgentFromReservationsCommissionAgentTypeEnum[keyof typeof RemoveCommissionAgentFromReservationsCommissionAgentTypeEnum];
