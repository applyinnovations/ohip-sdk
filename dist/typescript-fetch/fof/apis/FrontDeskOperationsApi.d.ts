/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { ActivityLog, AdvanceCheckInReservation, AiraLastRunStatusInfo, AssignedRoom, AutoAssignRoom, AutoAssignedRoom, BatchCCAuth, BatchCCAuthToProcess, ChangedWakeUpCalls, CheckedinReservation, DailyDocket, DeliverQueueRoomsTextMessage, FloorPlans, HoldRooms, HotelRooms, LinkedReservations, MassAdvanceCheckInReservations, MassCheckInReservations, MoveInHouseGuest, MovedInHouseGuest, PostCheckInRequest, QueueReservation, QueueRoomsTextMessage, QueuedRoomsTextMessage, ReservationInterface, ReservationQueuePriority, ReservationQueuePriorityNumber, ReservationsInQueue, ReservationsInfo, ResvForBatchCCAut, Room, RoomInterfaceStatus, RoomKey, RoomKeyDetails, RoomKeyInfo, RoomKeyInterfaceDetails, RoomKeyMultipleGuests, RoomKeyStatus, RoomMoveHistory, RoomsAI, ServiceRequestsInfo, ShiftRooms, ShortReservation, Status, SuggestedRooms, SwapRooms, UnAssignRoomCriteria, UnAssignedRoom, UpdateRoomKeys, VerifiedCheckinReservation, WakeUpCalls } from '../models/index';
export interface AddReservationToQueueRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    queueReservation: QueueReservation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface AssignRoomsAIRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomsAI: RoomsAI;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface AutoAssignRoomRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    autoAssignRoom: AutoAssignRoom;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface AutoUnAssignRoomRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: Array<string>;
    idExtension?: Array<number>;
    type?: Array<string>;
    includeDepartureRooms?: boolean;
    limit?: number;
    offset?: number;
    roomNumberWildcard?: string;
    useAIRoomAssignment?: boolean;
    useAssociatedProfilePreferences?: boolean;
    hotelRoomStatus?: Set<AutoUnAssignRoomHotelRoomStatusEnum>;
    hotelFORoomStatus?: Set<AutoUnAssignRoomHotelFORoomStatusEnum>;
    fromRoomNumber?: string;
    toRoomNumber?: string;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    roomType?: Array<string>;
    roomClass?: string;
    floor?: string;
    includeDueOut?: boolean;
    departureTime?: string;
    code?: Array<string>;
    description?: Array<string>;
    orderSequence?: Array<number>;
    quantity?: Array<number>;
    smokingPreference?: string;
    includeAllRoomConditions?: boolean;
    includeComponentRooms?: boolean;
    includePseudoRooms?: boolean;
    includeOORoomCheck?: boolean;
    connectingRoomsOnly?: boolean;
    reservationIdId?: string;
    reservationIdIdExtension?: number;
    idContext?: string;
    reservationIdType?: string;
    pseudoRoomsOnly?: boolean;
    includeAttendentInRoom?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteAdvanceCheckInRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteAssignRoomRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    unAssignRoomCriteria: UnAssignRoomCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteCheckinRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomStatus?: DeleteCheckinRoomStatusEnum;
    unassignRoom?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteDailyDocketRequest {
    docketId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteReservationFromQueueRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteRoomKeyRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteServiceRequestsRequest {
    serviceRequestId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteWakeUpCallRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    callTime?: Array<string>;
    followUpCallTime?: Array<string>;
    startDate?: Date;
    newCallTime?: Array<string>;
    newFollowUpCallTime?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeliverQueueRoomsTextMessageRequest {
    messageType: string;
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    deliverQueueRoomsTextMessage: DeliverQueueRoomsTextMessage;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface FetchAiraLastRunStatusRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetDailyDocketRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    docketDate?: Date;
    department?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetFloorPlansRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    room?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetFulfillmentActivityLogRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    module?: GetFulfillmentActivityLogModuleEnum;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    activityGroup?: string;
    activityType?: string;
    fromDate?: Date;
    toDate?: Date;
    searchText?: string;
    userByIds?: Array<number>;
    userForIds?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetHotelRoomsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    roomNumberWildcard?: string;
    hotelRoomStatus?: Set<GetHotelRoomsHotelRoomStatusEnum>;
    hotelFORoomStatus?: Set<GetHotelRoomsHotelFORoomStatusEnum>;
    fromRoomNumber?: string;
    toRoomNumber?: string;
    hotelRoomStartDate?: Date;
    hotelRoomEndDate?: Date;
    duration?: string;
    roomType?: Array<string>;
    roomClass?: string;
    floor?: string;
    includeDueOut?: boolean;
    departureTime?: string;
    roomFeatureCode?: Array<string>;
    description?: Array<string>;
    orderSequence?: Array<number>;
    quantity?: Array<number>;
    smokingPreference?: string;
    includeAllRoomConditions?: boolean;
    includeComponentRooms?: boolean;
    includePseudoRooms?: boolean;
    includeOORoomCheck?: boolean;
    connectingRoomsOnly?: boolean;
    reservationId?: string;
    reservationIdContext?: string;
    reservationIdType?: string;
    pseudoRoomsOnly?: boolean;
    includeAttendentInRoom?: boolean;
    includeRotationRoom?: boolean;
    ownerRoomsOnly?: boolean;
    ownerExclusiveRoomsOnly?: boolean;
    perfectFitRoomsOnly?: boolean;
    orderBy?: GetHotelRoomsOrderByEnum;
    unitGradeCodes?: Array<string>;
    ownerExclusiveRoomProfileId?: string;
    excludeRoomFeatures?: Array<string>;
    excludeFloorPreferences?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetLinkedReservationsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    additionalReservationId?: Array<string>;
    additionalReservationIdContext?: Array<string>;
    additionalReservationIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetQueueRoomsTextMessageRequest {
    messageType: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationId?: string;
    reservationIdContext?: string;
    reservationIdType?: string;
    mobileNumber?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservationSummariesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    searchType?: GetReservationSummariesSearchTypeEnum;
    reservationId?: Array<string>;
    reservationIdContext?: Array<string>;
    reservationIdType?: Array<string>;
    blockId?: Array<string>;
    blockIdContext?: Array<string>;
    blockIdType?: Array<string>;
    arrivalEnd?: Date;
    arrivalStart?: Date;
    departureEnd?: Date;
    departureStart?: Date;
    stayOnEnd?: Date;
    stayOnStart?: Date;
    createdOnEnd?: Date;
    createOnStart?: Date;
    depositDateEnd?: Date;
    depositDateStart?: Date;
    dateCriteriaExpectedArrivalEndTime?: string;
    dateCriteriaExpectedArrivalStartTime?: string;
    depositDueDateEnd?: Date;
    depositDueDateStart?: Date;
    expectedReturnEndTime?: string;
    expectedReturnStartTime?: string;
    membershipNumber?: string;
    anyVIPStatus?: boolean;
    vipStatusCodes?: Array<string>;
    roomId?: string;
    lastName?: string;
    firstName?: string;
    blockCode?: string;
    companyName?: string;
    travelAgentName?: string;
    creditCardNumber?: string;
    customReference?: string;
    externalReference?: string;
    attributeName?: Set<GetReservationSummariesAttributeNameEnum>;
    orderType?: Set<GetReservationSummariesOrderTypeEnum>;
    expectedArrivalEndTime?: Date;
    expectedArrivalStartTime?: Date;
    roomTypes?: Array<string>;
    roomStatuses?: Set<GetReservationSummariesRoomStatusesEnum>;
    paymentMethod?: Array<string>;
    indicator?: Set<GetReservationSummariesIndicatorEnum>;
    fetchSummaryInstructions?: Set<GetReservationSummariesFetchSummaryInstructionsEnum>;
    allowedAction?: Set<GetReservationSummariesAllowedActionEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservationsForBillingRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    searchType?: GetReservationsForBillingSearchTypeEnum;
    multipleHotelsSearchList?: Array<string>;
    superSearch?: string;
    reservationId?: Array<string>;
    reservationIdContext?: Array<string>;
    reservationIdType?: Array<string>;
    nights?: number;
    arrivalEnd?: Date;
    arrivalStart?: Date;
    departureEnd?: Date;
    departureStart?: Date;
    reservationProfileType?: Set<GetReservationsForBillingReservationProfileTypeEnum>;
    attachedProfileName?: Array<string>;
    attachedProfileId?: Array<string>;
    attachedProfileIdContext?: Array<string>;
    attachedProfileIdType?: Array<string>;
    resGuestId?: string;
    resGuestIdContext?: string;
    resGuestIdType?: string;
    membershipId?: string;
    membershipLevelCodes?: Array<string>;
    membershipTypeCodes?: Array<string>;
    surname?: string;
    givenName?: string;
    cityName?: string;
    postalCode?: string;
    state?: string;
    countryCode?: string;
    streetAddress?: string;
    bookingChannelCode?: string;
    blockHotelId?: string;
    blockId?: Array<string>;
    blockIdContext?: Array<string>;
    blockIdType?: Array<string>;
    recordLocator?: string;
    orderByAttributeName?: Array<string>;
    orderType?: Set<GetReservationsForBillingOrderTypeEnum>;
    roomId?: string;
    roomType?: Array<string>;
    fetchInstructions?: Set<GetReservationsForBillingFetchInstructionsEnum>;
    excludeNoPost?: boolean;
    excludePMRooms?: boolean;
    hasOpenFolio?: boolean;
    excludedReservationIds?: Array<string>;
    excludedReservationIdsContext?: Array<string>;
    excludedReservationIdsType?: Array<string>;
    advanceCheckedIn?: boolean;
    searchTypesSearchType?: Set<GetReservationsForBillingSearchTypesSearchTypeEnum>;
    reservationStatus?: Set<GetReservationsForBillingReservationStatusEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetReservationsInQueueRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomClassCodes?: Array<string>;
    roomTypeCodes?: Array<string>;
    roomNumberWildCard?: string;
    guestNameWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetResvForBatchCCAuthRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestName?: string;
    room?: string;
    cardType?: Set<GetResvForBatchCCAuthCardTypeEnum>;
    userDefinedCardType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRoomInterfaceStatusRequest {
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    interfaceName?: string;
    interfaceType?: GetRoomInterfaceStatusInterfaceTypeEnum;
    logo?: string;
    machineName?: string;
    status?: GetRoomInterfaceStatusStatusEnum;
    activeFlag?: boolean;
    code?: Array<string>;
    blockId?: string;
    blockIdContext?: string;
    blockIdType?: string;
    roomId?: string;
    lastName?: string;
    firstName?: string;
    reservationIds?: Array<string>;
    reservationIdsContext?: Array<string>;
    reservationIdsType?: Array<string>;
    arrivalEnd?: Date;
    arrivalStart?: Date;
    expectedArrivalEndTime?: string;
    expectedArrivalStartTime?: string;
    specialCodes?: Array<string>;
    floorCodes?: Array<string>;
    roomFeatureCodes?: Array<string>;
    roomClassCodes?: Array<string>;
    roomStatus?: Set<GetRoomInterfaceStatusRoomStatusEnum>;
    guaranteeCode?: string;
    reservationStatus?: Set<GetRoomInterfaceStatusReservationStatusEnum>;
    includeLinkedReservations?: boolean;
    includeBlocks?: boolean;
    orderBy?: GetRoomInterfaceStatusOrderByEnum;
    orderType?: GetRoomInterfaceStatusOrderTypeEnum;
    expectedReturnEndTime?: string;
    expectedReturnStartTime?: string;
    advanceCheckedIn?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRoomKeyInterfaceDetailsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomNumbersCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRoomKeysRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRoomMoveHistoryRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationIdContext?: string;
    reservationIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetServiceRequestsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    code?: Array<string>;
    status?: Set<GetServiceRequestsStatusEnum>;
    priorityCodes?: Array<string>;
    departmentCodes?: Array<string>;
    reservationId?: string;
    reservationIdContext?: string;
    reservationIdType?: string;
    profileId?: string;
    profileIdContext?: string;
    profileIdType?: string;
    room?: string;
    creationEndDate?: Date;
    creationStartDate?: Date;
    closedEndDate?: Date;
    closedStartDate?: Date;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetSuggestedRoomsRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomType?: string;
    startDate?: Date;
    nights?: number;
    suggestedRoomsInstructions?: Set<GetSuggestedRoomsSuggestedRoomsInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetWakeUpCallRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchCancelled?: boolean;
    fetchCompleted?: boolean;
    fetchNoAnswer?: boolean;
    fetchPending?: boolean;
    idExtension?: number;
    reservationIdContext?: string;
    reservationIdType?: string;
    beginDate?: Date;
    endDate?: Date;
    beginTime?: string;
    endTime?: string;
    room?: Array<string>;
    blockId?: string;
    guestName?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface MoveInHouseGuestRequest {
    roomId: string;
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    moveInHouseGuest: MoveInHouseGuest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PlaceRoomsOnHoldRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    holdRooms: HoldRooms;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostAdvanceCheckInRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    advanceCheckInReservation: AdvanceCheckInReservation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCheckInOperationRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservation: PostCheckInRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostDailyDocketRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    dailyDocket: DailyDocket;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostMassAdvanceCheckInRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    massAdvanceCheckInReservations: MassAdvanceCheckInReservations;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostMassCheckInRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    massCheckInReservations: MassCheckInReservations;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostRoomAssignmentRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    room: Room;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostRoomKeyRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomKey: RoomKey;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostServiceRequestsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    serviceRequestsInfo: ServiceRequestsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostWakeUpCallRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    wakeUpCalls: WakeUpCalls;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ProcessBatchCCAuthRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    batchCCAuth: BatchCCAuth;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutDailyDocketRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    dailyDocket: DailyDocket;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutReservationQueuePriorityRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationQueuePriorityNumber: ReservationQueuePriorityNumber;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutRoomInterfaceStatusRequest {
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationInterface: ReservationInterface;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutRoomKeysRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomKeys: RoomKeyMultipleGuests;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutServiceRequestsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    serviceRequestsInfo: ServiceRequestsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutWakeUpCallRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    wakeUpCalls: WakeUpCalls;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ReadRoomKeyRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    encoderTerminal?: string;
    encoderId?: string;
    encoderIdContext?: string;
    encoderIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ReleaseRoomsOnHoldRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    holdRooms: HoldRooms;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ShiftRoomsRequest {
    hotelId: string;
    sourceReservationId: string;
    targetReservationId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    shiftRooms: ShiftRooms;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface SwapRoomsRequest {
    hotelId: string;
    sourceReservationId: string;
    targetReservationId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    swapRooms: SwapRooms;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface VerifyCheckinReservationRequest {
    reservationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    verifyCheckinInstructions?: Set<VerifyCheckinReservationVerifyCheckinInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class FrontDeskOperationsApi extends runtime.BaseAPI {
    /**
     * Using this API you can assign reservations to the reservation queue if the guest\'s room is not ready for assignment or if there are no available rooms of the room type attached to the reservation. Housekeeping staff can use the Queue Rooms functionality to determine if there are guests waiting to check in to a particular room or type of room; if there are, the queue list can provide guidance in determining which rooms need attention first. <p><strong>OperationId:</strong>addReservationToQueue</p>
     * Add reservation to queue
     */
    addReservationToQueueRaw(requestParameters: AddReservationToQueueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationQueuePriority>>;
    /**
     * Using this API you can assign reservations to the reservation queue if the guest\'s room is not ready for assignment or if there are no available rooms of the room type attached to the reservation. Housekeeping staff can use the Queue Rooms functionality to determine if there are guests waiting to check in to a particular room or type of room; if there are, the queue list can provide guidance in determining which rooms need attention first. <p><strong>OperationId:</strong>addReservationToQueue</p>
     * Add reservation to queue
     */
    addReservationToQueue(requestParameters: AddReservationToQueueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationQueuePriority>;
    /**
     * This API runs AI Room Assignment and allocates rooms to incoming reservations. <p><strong>OperationId:</strong>assignRoomsAI</p>
     * AI Assign Rooms
     */
    assignRoomsAIRaw(requestParameters: AssignRoomsAIRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API runs AI Room Assignment and allocates rooms to incoming reservations. <p><strong>OperationId:</strong>assignRoomsAI</p>
     * AI Assign Rooms
     */
    assignRoomsAI(requestParameters: AssignRoomsAIRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API can be used to assign the room automatically. <p><strong>OperationId:</strong>autoAssignRoom</p>
     * Assign the room automatically
     */
    autoAssignRoomRaw(requestParameters: AutoAssignRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AutoAssignedRoom>>;
    /**
     * This API can be used to assign the room automatically. <p><strong>OperationId:</strong>autoAssignRoom</p>
     * Assign the room automatically
     */
    autoAssignRoom(requestParameters: AutoAssignRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AutoAssignedRoom>;
    /**
     * This API can be used to auto unassign a room. <p><strong>OperationId:</strong>autoUnAssignRoom</p>
     * Auto unassign room
     */
    autoUnAssignRoomRaw(requestParameters: AutoUnAssignRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API can be used to auto unassign a room. <p><strong>OperationId:</strong>autoUnAssignRoom</p>
     * Auto unassign room
     */
    autoUnAssignRoom(requestParameters: AutoUnAssignRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Reverse an advance check in for a reservation. <p><strong>OperationId:</strong>deleteAdvanceCheckIn</p>
     * Reverse Advance Checkin
     */
    deleteAdvanceCheckInRaw(requestParameters: DeleteAdvanceCheckInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Reverse an advance check in for a reservation. <p><strong>OperationId:</strong>deleteAdvanceCheckIn</p>
     * Reverse Advance Checkin
     */
    deleteAdvanceCheckIn(requestParameters: DeleteAdvanceCheckInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API will allow you to remove an assigned room from a reservation in reserved status. <p><strong>OperationId:</strong>deleteAssignRoom</p>
     * Remove an assigned room
     */
    deleteAssignRoomRaw(requestParameters: DeleteAssignRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnAssignedRoom>>;
    /**
     * This API will allow you to remove an assigned room from a reservation in reserved status. <p><strong>OperationId:</strong>deleteAssignRoom</p>
     * Remove an assigned room
     */
    deleteAssignRoom(requestParameters: DeleteAssignRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnAssignedRoom>;
    /**
     * Use this API to revert a reservation that has been checked in.  This will return the reservation to a Due in/Arrival status. <p><strong>OperationId:</strong>deleteCheckin</p>
     * Revert a checked-in Reservation
     */
    deleteCheckinRaw(requestParameters: DeleteCheckinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to revert a reservation that has been checked in.  This will return the reservation to a Due in/Arrival status. <p><strong>OperationId:</strong>deleteCheckin</p>
     * Revert a checked-in Reservation
     */
    deleteCheckin(requestParameters: DeleteCheckinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete a Daily Docket. <p><strong>OperationId:</strong>deleteDailyDocket</p>
     * Delete Daily Docket
     */
    deleteDailyDocketRaw(requestParameters: DeleteDailyDocketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete a Daily Docket. <p><strong>OperationId:</strong>deleteDailyDocket</p>
     * Delete Daily Docket
     */
    deleteDailyDocket(requestParameters: DeleteDailyDocketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to remove a reservation that is already set as a Queued Reservation. <p><strong>OperationId:</strong>deleteReservationFromQueue</p>
     * Delete reservation from queue
     */
    deleteReservationFromQueueRaw(requestParameters: DeleteReservationFromQueueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to remove a reservation that is already set as a Queued Reservation. <p><strong>OperationId:</strong>deleteReservationFromQueue</p>
     * Delete reservation from queue
     */
    deleteReservationFromQueue(requestParameters: DeleteReservationFromQueueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API will delete room keys on a reservation. <p><strong>OperationId:</strong>deleteRoomKey</p>
     * Delete room key
     */
    deleteRoomKeyRaw(requestParameters: DeleteRoomKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API will delete room keys on a reservation. <p><strong>OperationId:</strong>deleteRoomKey</p>
     * Delete room key
     */
    deleteRoomKey(requestParameters: DeleteRoomKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete any service requests that exist on a reservation. <p><strong>OperationId:</strong>deleteServiceRequests</p>
     * Delete Service Requests
     */
    deleteServiceRequestsRaw(requestParameters: DeleteServiceRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete any service requests that exist on a reservation. <p><strong>OperationId:</strong>deleteServiceRequests</p>
     * Delete Service Requests
     */
    deleteServiceRequests(requestParameters: DeleteServiceRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to cancel a wake up call on a reservation. <p><strong>OperationId:</strong>deleteWakeUpCall</p>
     * Delete Wake Up Call
     */
    deleteWakeUpCallRaw(requestParameters: DeleteWakeUpCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to cancel a wake up call on a reservation. <p><strong>OperationId:</strong>deleteWakeUpCall</p>
     * Delete Wake Up Call
     */
    deleteWakeUpCall(requestParameters: DeleteWakeUpCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API will deliver Queue rooms text message. <p><strong>OperationId:</strong>deliverQueueRoomsTextMessage</p>
     * Deliver Queue rooms text message
     */
    deliverQueueRoomsTextMessageRaw(requestParameters: DeliverQueueRoomsTextMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueueRoomsTextMessage>>;
    /**
     * This API will deliver Queue rooms text message. <p><strong>OperationId:</strong>deliverQueueRoomsTextMessage</p>
     * Deliver Queue rooms text message
     */
    deliverQueueRoomsTextMessage(requestParameters: DeliverQueueRoomsTextMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueueRoomsTextMessage>;
    /**
     * This API fetches the last run status of an Automated Intelligence Room Assignment. <p><strong>OperationId:</strong>fetchAiraLastRunStatus</p>
     * Automated Intelligence Room Assignment last run status
     */
    fetchAiraLastRunStatusRaw(requestParameters: FetchAiraLastRunStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AiraLastRunStatusInfo>>;
    /**
     * This API fetches the last run status of an Automated Intelligence Room Assignment. <p><strong>OperationId:</strong>fetchAiraLastRunStatus</p>
     * Automated Intelligence Room Assignment last run status
     */
    fetchAiraLastRunStatus(requestParameters: FetchAiraLastRunStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AiraLastRunStatusInfo>;
    /**
     * Use this API to fetch Daily Dockets. <p><strong>OperationId:</strong>getDailyDocket</p>
     * Get Daily Docket
     */
    getDailyDocketRaw(requestParameters: GetDailyDocketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DailyDocket>>;
    /**
     * Use this API to fetch Daily Dockets. <p><strong>OperationId:</strong>getDailyDocket</p>
     * Get Daily Docket
     */
    getDailyDocket(requestParameters: GetDailyDocketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DailyDocket>;
    /**
     * Use this API to get Floor Plans for a property. Floor Plans provide a graphical layout of floors, rooms, and other physical features such as stairways, HVAC closets, elevators, and more <p><strong>OperationId:</strong>getFloorPlans</p>
     * Get floor plans
     */
    getFloorPlansRaw(requestParameters: GetFloorPlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FloorPlans>>;
    /**
     * Use this API to get Floor Plans for a property. Floor Plans provide a graphical layout of floors, rooms, and other physical features such as stairways, HVAC closets, elevators, and more <p><strong>OperationId:</strong>getFloorPlans</p>
     * Get floor plans
     */
    getFloorPlans(requestParameters: GetFloorPlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FloorPlans>;
    /**
     * You can use this API to get the fullfillment activity log. <p><strong>OperationId:</strong>getFulfillmentActivityLog</p>
     * Get the fullfillment activity log
     */
    getFulfillmentActivityLogRaw(requestParameters: GetFulfillmentActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityLog>>;
    /**
     * You can use this API to get the fullfillment activity log. <p><strong>OperationId:</strong>getFulfillmentActivityLog</p>
     * Get the fullfillment activity log
     */
    getFulfillmentActivityLog(requestParameters: GetFulfillmentActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityLog>;
    /**
     * Use this API to return available rooms based on search criteria such as hotelId, hotelRoomStatus, roomType, roomFeatureCode,etc.<p><strong>OperationId:</strong>getHotelRooms</p>
     * Get hotel available rooms
     */
    getHotelRoomsRaw(requestParameters: GetHotelRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelRooms>>;
    /**
     * Use this API to return available rooms based on search criteria such as hotelId, hotelRoomStatus, roomType, roomFeatureCode,etc.<p><strong>OperationId:</strong>getHotelRooms</p>
     * Get hotel available rooms
     */
    getHotelRooms(requestParameters: GetHotelRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelRooms>;
    /**
     * Use this API to view the reservations  that are linked to the specified reservation. <p><strong>OperationId:</strong>getLinkedReservations</p>
     * Get linked reservations
     */
    getLinkedReservationsRaw(requestParameters: GetLinkedReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LinkedReservations>>;
    /**
     * Use this API to view the reservations  that are linked to the specified reservation. <p><strong>OperationId:</strong>getLinkedReservations</p>
     * Get linked reservations
     */
    getLinkedReservations(requestParameters: GetLinkedReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LinkedReservations>;
    /**
     * You can use this API to get Queue room text message. <p><strong>OperationId:</strong>getQueueRoomsTextMessage</p>
     * Get Queue room text message
     */
    getQueueRoomsTextMessageRaw(requestParameters: GetQueueRoomsTextMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueuedRoomsTextMessage>>;
    /**
     * You can use this API to get Queue room text message. <p><strong>OperationId:</strong>getQueueRoomsTextMessage</p>
     * Get Queue room text message
     */
    getQueueRoomsTextMessage(requestParameters: GetQueueRoomsTextMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueuedRoomsTextMessage>;
    /**
     * Use this API to return reservation summaries for a specific property based on search criteria such as reservationId, blockId, arrivalStart, membershipNumber, roomId, etc.<p><strong>OperationId:</strong>getReservationSummaries</p>
     * Get hotel reservation summaries
     */
    getReservationSummariesRaw(requestParameters: GetReservationSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShortReservation>>;
    /**
     * Use this API to return reservation summaries for a specific property based on search criteria such as reservationId, blockId, arrivalStart, membershipNumber, roomId, etc.<p><strong>OperationId:</strong>getReservationSummaries</p>
     * Get hotel reservation summaries
     */
    getReservationSummaries(requestParameters: GetReservationSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShortReservation>;
    /**
     * You can use this API to fetch the reservations for billing. <p><strong>OperationId:</strong>getReservationsForBilling</p>
     * Get Reservations for billing
     */
    getReservationsForBillingRaw(requestParameters: GetReservationsForBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationsInfo>>;
    /**
     * You can use this API to fetch the reservations for billing. <p><strong>OperationId:</strong>getReservationsForBilling</p>
     * Get Reservations for billing
     */
    getReservationsForBilling(requestParameters: GetReservationsForBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationsInfo>;
    /**
     * Fetch all current reservations that are Queued Reservations.  These reservations are guests that have arrived at the hotel, but their room isn\'t ready, so they\'re sitting in a queue.  <p><strong>OperationId:</strong>getReservationsInQueue</p>
     * Get the reservation in queue
     */
    getReservationsInQueueRaw(requestParameters: GetReservationsInQueueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationsInQueue>>;
    /**
     * Fetch all current reservations that are Queued Reservations.  These reservations are guests that have arrived at the hotel, but their room isn\'t ready, so they\'re sitting in a queue.  <p><strong>OperationId:</strong>getReservationsInQueue</p>
     * Get the reservation in queue
     */
    getReservationsInQueue(requestParameters: GetReservationsInQueueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationsInQueue>;
    /**
     * This API is used to get reservations for batch CC Authorization. <p><strong>OperationId:</strong>getResvForBatchCCAuth</p>
     * Get resrvation for batch CCAuth
     */
    getResvForBatchCCAuthRaw(requestParameters: GetResvForBatchCCAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResvForBatchCCAut>>;
    /**
     * This API is used to get reservations for batch CC Authorization. <p><strong>OperationId:</strong>getResvForBatchCCAuth</p>
     * Get resrvation for batch CCAuth
     */
    getResvForBatchCCAuth(requestParameters: GetResvForBatchCCAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResvForBatchCCAut>;
    /**
     * This Api will getch the room interface status. <p><strong>OperationId:</strong>getRoomInterfaceStatus</p>
     * Get room interface status
     */
    getRoomInterfaceStatusRaw(requestParameters: GetRoomInterfaceStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomInterfaceStatus>>;
    /**
     * This Api will getch the room interface status. <p><strong>OperationId:</strong>getRoomInterfaceStatus</p>
     * Get room interface status
     */
    getRoomInterfaceStatus(requestParameters: GetRoomInterfaceStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomInterfaceStatus>;
    /**
     * You can use thie API to get key encoder interface configuration details. <p><strong>OperationId:</strong>getRoomKeyInterfaceDetails</p>
     * Get key encoder interface configuration details
     */
    getRoomKeyInterfaceDetailsRaw(requestParameters: GetRoomKeyInterfaceDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomKeyInterfaceDetails>>;
    /**
     * You can use thie API to get key encoder interface configuration details. <p><strong>OperationId:</strong>getRoomKeyInterfaceDetails</p>
     * Get key encoder interface configuration details
     */
    getRoomKeyInterfaceDetails(requestParameters: GetRoomKeyInterfaceDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomKeyInterfaceDetails>;
    /**
     * You can use this API to retrieve any existing room key information for a reservation. <p><strong>OperationId:</strong>getRoomKeys</p>
     * Fetch the room keys
     */
    getRoomKeysRaw(requestParameters: GetRoomKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomKeyInfo>>;
    /**
     * You can use this API to retrieve any existing room key information for a reservation. <p><strong>OperationId:</strong>getRoomKeys</p>
     * Fetch the room keys
     */
    getRoomKeys(requestParameters: GetRoomKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomKeyInfo>;
    /**
     * This API will return the history of room change/room moves for a specified reservation. <p><strong>OperationId:</strong>getRoomMoveHistory</p>
     * Get room move history of a reservation
     */
    getRoomMoveHistoryRaw(requestParameters: GetRoomMoveHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomMoveHistory>>;
    /**
     * This API will return the history of room change/room moves for a specified reservation. <p><strong>OperationId:</strong>getRoomMoveHistory</p>
     * Get room move history of a reservation
     */
    getRoomMoveHistory(requestParameters: GetRoomMoveHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomMoveHistory>;
    /**
     * Use this API to retrieve any service requests that exist on a reservation. <p><strong>OperationId:</strong>getServiceRequests</p>
     * Get Service Requests
     */
    getServiceRequestsRaw(requestParameters: GetServiceRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceRequestsInfo>>;
    /**
     * Use this API to retrieve any service requests that exist on a reservation. <p><strong>OperationId:</strong>getServiceRequests</p>
     * Get Service Requests
     */
    getServiceRequests(requestParameters: GetServiceRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceRequestsInfo>;
    /**
     * You can use this API to fetch the suggested rooms. <p><strong>OperationId:</strong>getSuggestedRooms</p>
     * Get Suggested Rooms
     */
    getSuggestedRoomsRaw(requestParameters: GetSuggestedRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuggestedRooms>>;
    /**
     * You can use this API to fetch the suggested rooms. <p><strong>OperationId:</strong>getSuggestedRooms</p>
     * Get Suggested Rooms
     */
    getSuggestedRooms(requestParameters: GetSuggestedRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuggestedRooms>;
    /**
     * Use thisAPI to get existing wake up call on an in-house reservation. <p><strong>OperationId:</strong>getWakeUpCall</p>
     * Get Wake Up Call
     */
    getWakeUpCallRaw(requestParameters: GetWakeUpCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WakeUpCalls>>;
    /**
     * Use thisAPI to get existing wake up call on an in-house reservation. <p><strong>OperationId:</strong>getWakeUpCall</p>
     * Get Wake Up Call
     */
    getWakeUpCall(requestParameters: GetWakeUpCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WakeUpCalls>;
    /**
     * This API will allow you to change rooms for an in-house guest. <p><strong>OperationId:</strong>moveInHouseGuest</p>
     * Move in-house guest
     */
    moveInHouseGuestRaw(requestParameters: MoveInHouseGuestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MovedInHouseGuest>>;
    /**
     * This API will allow you to change rooms for an in-house guest. <p><strong>OperationId:</strong>moveInHouseGuest</p>
     * Move in-house guest
     */
    moveInHouseGuest(requestParameters: MoveInHouseGuestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MovedInHouseGuest>;
    /**
     * You can use this API to place Rooms On Hold. <p><strong>OperationId:</strong>placeRoomsOnHold</p>
     * Place Rooms On Hold
     */
    placeRoomsOnHoldRaw(requestParameters: PlaceRoomsOnHoldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to place Rooms On Hold. <p><strong>OperationId:</strong>placeRoomsOnHold</p>
     * Place Rooms On Hold
     */
    placeRoomsOnHold(requestParameters: PlaceRoomsOnHoldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * At times, when guests arrive to the property prior to a room being ready, you can flag a reservation as Advance Checked In for arrivals due in on the current business date. This enables guests to post charges to their reservation folio prior to check in, and helps the rooms management team prioritize room cleaning and assignment. Individual reservations (including Walk In reservations, Pre Registered reservations, and reservations that are in Queue) and group block reservations can be Advance Checked In. <p><strong>OperationId:</strong>postAdvanceCheckIn</p>
     * Advance checkin a reservation
     */
    postAdvanceCheckInRaw(requestParameters: PostAdvanceCheckInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * At times, when guests arrive to the property prior to a room being ready, you can flag a reservation as Advance Checked In for arrivals due in on the current business date. This enables guests to post charges to their reservation folio prior to check in, and helps the rooms management team prioritize room cleaning and assignment. Individual reservations (including Walk In reservations, Pre Registered reservations, and reservations that are in Queue) and group block reservations can be Advance Checked In. <p><strong>OperationId:</strong>postAdvanceCheckIn</p>
     * Advance checkin a reservation
     */
    postAdvanceCheckIn(requestParameters: PostAdvanceCheckInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to check in a guest reservation.  The reservation needs to be \'due in\' status.  The API also provides an option to select an available room. <p><strong>OperationId:</strong>postCheckIn</p>
     * Checks in a guest
     */
    postCheckInRaw(requestParameters: PostCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckedinReservation>>;
    /**
     * Use this API to check in a guest reservation.  The reservation needs to be \'due in\' status.  The API also provides an option to select an available room. <p><strong>OperationId:</strong>postCheckIn</p>
     * Checks in a guest
     */
    postCheckIn(requestParameters: PostCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckedinReservation>;
    /**
     * Use this API to create a Daily Docket. <p><strong>OperationId:</strong>postDailyDocket</p>
     * Create Daily Docket
     */
    postDailyDocketRaw(requestParameters: PostDailyDocketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to create a Daily Docket. <p><strong>OperationId:</strong>postDailyDocket</p>
     * Create Daily Docket
     */
    postDailyDocket(requestParameters: PostDailyDocketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to perform a mass advance checkin for reservations. <p><strong>OperationId:</strong>postMassAdvanceCheckIn</p>
     * Mass Advance Check in Reservations
     */
    postMassAdvanceCheckInRaw(requestParameters: PostMassAdvanceCheckInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to perform a mass advance checkin for reservations. <p><strong>OperationId:</strong>postMassAdvanceCheckIn</p>
     * Mass Advance Check in Reservations
     */
    postMassAdvanceCheckIn(requestParameters: PostMassAdvanceCheckInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to perform a mass Checkin for reservations. <p><strong>OperationId:</strong>postMassCheckIn</p>
     * Mass checkin reservations
     */
    postMassCheckInRaw(requestParameters: PostMassCheckInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to perform a mass Checkin for reservations. <p><strong>OperationId:</strong>postMassCheckIn</p>
     * Mass checkin reservations
     */
    postMassCheckIn(requestParameters: PostMassCheckInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API will allow you to assign a room to a reservation in reserved status. Override instructions are available to assign a room despite warnings returned in the response message. <p><strong>OperationId:</strong>postRoomAssignment</p>
     * Assign a Room to a Reservation
     */
    postRoomAssignmentRaw(requestParameters: PostRoomAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssignedRoom>>;
    /**
     * This API will allow you to assign a room to a reservation in reserved status. Override instructions are available to assign a room despite warnings returned in the response message. <p><strong>OperationId:</strong>postRoomAssignment</p>
     * Assign a Room to a Reservation
     */
    postRoomAssignment(requestParameters: PostRoomAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssignedRoom>;
    /**
     * You can use this API to create a room key request for a reservation to the active Door Locking System Property Interface. <p><strong>OperationId:</strong>postRoomKey</p>
     * Requests room key(s)
     */
    postRoomKeyRaw(requestParameters: PostRoomKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomKeyDetails>>;
    /**
     * You can use this API to create a room key request for a reservation to the active Door Locking System Property Interface. <p><strong>OperationId:</strong>postRoomKey</p>
     * Requests room key(s)
     */
    postRoomKey(requestParameters: PostRoomKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomKeyDetails>;
    /**
     * Service Request functionality provides the ability to define, track and report Service Requests on a reservation.  They go through a preset flow including creating the request, completing it and then following up on the resolution with the guest. <p><strong>OperationId:</strong>postServiceRequests</p>
     * Create Service Requests
     */
    postServiceRequestsRaw(requestParameters: PostServiceRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Service Request functionality provides the ability to define, track and report Service Requests on a reservation.  They go through a preset flow including creating the request, completing it and then following up on the resolution with the guest. <p><strong>OperationId:</strong>postServiceRequests</p>
     * Create Service Requests
     */
    postServiceRequests(requestParameters: PostServiceRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can set, view, and cancel wake up call for individual reservations. The reservation must be in-house (checked-in) status to set a wake up call. <p><strong>OperationId:</strong>postWakeUpCall</p>
     * Create Wake Up Call
     */
    postWakeUpCallRaw(requestParameters: PostWakeUpCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can set, view, and cancel wake up call for individual reservations. The reservation must be in-house (checked-in) status to set a wake up call. <p><strong>OperationId:</strong>postWakeUpCall</p>
     * Create Wake Up Call
     */
    postWakeUpCall(requestParameters: PostWakeUpCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API is used to process batch CC Authorization. <p><strong>OperationId:</strong>processBatchCCAuth</p>
     * Process batch CC Auth
     */
    processBatchCCAuthRaw(requestParameters: ProcessBatchCCAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BatchCCAuthToProcess>>;
    /**
     * This API is used to process batch CC Authorization. <p><strong>OperationId:</strong>processBatchCCAuth</p>
     * Process batch CC Auth
     */
    processBatchCCAuth(requestParameters: ProcessBatchCCAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BatchCCAuthToProcess>;
    /**
     * Use this API to change Daily Docket. <p><strong>OperationId:</strong>putDailyDocket</p>
     * Change Daily Docket
     */
    putDailyDocketRaw(requestParameters: PutDailyDocketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to change Daily Docket. <p><strong>OperationId:</strong>putDailyDocket</p>
     * Change Daily Docket
     */
    putDailyDocket(requestParameters: PutDailyDocketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API can be used to change the resrevations Queue Priority. <p><strong>OperationId:</strong>putReservationQueuePriority</p>
     * Change the reservation queue priority
     */
    putReservationQueuePriorityRaw(requestParameters: PutReservationQueuePriorityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationQueuePriority>>;
    /**
     * This API can be used to change the resrevations Queue Priority. <p><strong>OperationId:</strong>putReservationQueuePriority</p>
     * Change the reservation queue priority
     */
    putReservationQueuePriority(requestParameters: PutReservationQueuePriorityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationQueuePriority>;
    /**
     * You can use this API to change room interface status. <p><strong>OperationId:</strong>putRoomInterfaceStatus</p>
     * Change room interface status
     */
    putRoomInterfaceStatusRaw(requestParameters: PutRoomInterfaceStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to change room interface status. <p><strong>OperationId:</strong>putRoomInterfaceStatus</p>
     * Change room interface status
     */
    putRoomInterfaceStatus(requestParameters: PutRoomInterfaceStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * When MUTIPLE_GUEST_KEY is active this methods can be used to update information on the room keys such as balance amount and keyOptions. reservationId and hotelId are required path parameters. The body parameter roomKeys includes information about the encoder, room, key type, key validity, key options  and   guests information for multiple keys
     * Update room keys.
     */
    putRoomKeysRaw(requestParameters: PutRoomKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateRoomKeys>>;
    /**
     * When MUTIPLE_GUEST_KEY is active this methods can be used to update information on the room keys such as balance amount and keyOptions. reservationId and hotelId are required path parameters. The body parameter roomKeys includes information about the encoder, room, key type, key validity, key options  and   guests information for multiple keys
     * Update room keys.
     */
    putRoomKeys(requestParameters: PutRoomKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateRoomKeys>;
    /**
     * Use this API to modify any service requests that exist on a reservation. <p><strong>OperationId:</strong>putServiceRequests</p>
     * Change Service Requests
     */
    putServiceRequestsRaw(requestParameters: PutServiceRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to modify any service requests that exist on a reservation. <p><strong>OperationId:</strong>putServiceRequests</p>
     * Change Service Requests
     */
    putServiceRequests(requestParameters: PutServiceRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Update an existing wake up call.  Wake up call can only be added to in-house reservations. <p><strong>OperationId:</strong>putWakeUpCall</p>
     * Change Wake Up Call
     */
    putWakeUpCallRaw(requestParameters: PutWakeUpCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedWakeUpCalls>>;
    /**
     * Update an existing wake up call.  Wake up call can only be added to in-house reservations. <p><strong>OperationId:</strong>putWakeUpCall</p>
     * Change Wake Up Call
     */
    putWakeUpCall(requestParameters: PutWakeUpCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedWakeUpCalls>;
    /**
     * This API can be used to read the Room Key. <p><strong>OperationId:</strong>readRoomKey</p>
     * Read room key
     */
    readRoomKeyRaw(requestParameters: ReadRoomKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomKeyStatus>>;
    /**
     * This API can be used to read the Room Key. <p><strong>OperationId:</strong>readRoomKey</p>
     * Read room key
     */
    readRoomKey(requestParameters: ReadRoomKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomKeyStatus>;
    /**
     * You can use this API to release Rooms On Hold. <p><strong>OperationId:</strong>releaseRoomsOnHold</p>
     * Release Rooms On Hold
     */
    releaseRoomsOnHoldRaw(requestParameters: ReleaseRoomsOnHoldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to release Rooms On Hold. <p><strong>OperationId:</strong>releaseRoomsOnHold</p>
     * Release Rooms On Hold
     */
    releaseRoomsOnHold(requestParameters: ReleaseRoomsOnHoldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API will allow you to quickly shift rooms for two reservations. <p><strong>OperationId:</strong>shiftRooms</p>
     * Operation for Shift Rooms between two reservations
     */
    shiftRoomsRaw(requestParameters: ShiftRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API will allow you to quickly shift rooms for two reservations. <p><strong>OperationId:</strong>shiftRooms</p>
     * Operation for Shift Rooms between two reservations
     */
    shiftRooms(requestParameters: ShiftRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API will allow you to quickly swap rooms for two reservations. <p><strong>OperationId:</strong>swapRooms</p>
     * Operation for Swap/Shift Rooms between two reservations
     */
    swapRoomsRaw(requestParameters: SwapRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API will allow you to quickly swap rooms for two reservations. <p><strong>OperationId:</strong>swapRooms</p>
     * Operation for Swap/Shift Rooms between two reservations
     */
    swapRooms(requestParameters: SwapRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to verify checkin reservations. <p><strong>OperationId:</strong>verifyCheckinReservation</p>
     * Verify checkin reservation
     */
    verifyCheckinReservationRaw(requestParameters: VerifyCheckinReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerifiedCheckinReservation>>;
    /**
     * Use this API to verify checkin reservations. <p><strong>OperationId:</strong>verifyCheckinReservation</p>
     * Verify checkin reservation
     */
    verifyCheckinReservation(requestParameters: VerifyCheckinReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerifiedCheckinReservation>;
}
/**
 * @export
 */
export declare const AutoUnAssignRoomHotelRoomStatusEnum: {
    readonly Clean: "Clean";
    readonly Dirty: "Dirty";
    readonly Pickup: "Pickup";
    readonly Inspected: "Inspected";
    readonly OutOfOrder: "OutOfOrder";
    readonly OutOfService: "OutOfService";
};
export type AutoUnAssignRoomHotelRoomStatusEnum = typeof AutoUnAssignRoomHotelRoomStatusEnum[keyof typeof AutoUnAssignRoomHotelRoomStatusEnum];
/**
 * @export
 */
export declare const AutoUnAssignRoomHotelFORoomStatusEnum: {
    readonly Vacant: "Vacant";
    readonly Occupied: "Occupied";
};
export type AutoUnAssignRoomHotelFORoomStatusEnum = typeof AutoUnAssignRoomHotelFORoomStatusEnum[keyof typeof AutoUnAssignRoomHotelFORoomStatusEnum];
/**
 * @export
 */
export declare const DeleteCheckinRoomStatusEnum: {
    readonly Clean: "Clean";
    readonly Dirty: "Dirty";
    readonly Pickup: "Pickup";
    readonly Inspected: "Inspected";
    readonly OutOfOrder: "OutOfOrder";
    readonly OutOfService: "OutOfService";
};
export type DeleteCheckinRoomStatusEnum = typeof DeleteCheckinRoomStatusEnum[keyof typeof DeleteCheckinRoomStatusEnum];
/**
 * @export
 */
export declare const GetFulfillmentActivityLogModuleEnum: {
    readonly Reservation: "Reservation";
    readonly Contract: "Contract";
    readonly Allotment: "Allotment";
    readonly Outlookview: "Outlookview";
    readonly Profile: "Profile";
    readonly Accountreceivables: "Accountreceivables";
    readonly GdsConvRateCodes: "GdsConvRateCodes";
    readonly RateCode: "RateCode";
    readonly Billing: "Billing";
    readonly Activity: "Activity";
};
export type GetFulfillmentActivityLogModuleEnum = typeof GetFulfillmentActivityLogModuleEnum[keyof typeof GetFulfillmentActivityLogModuleEnum];
/**
 * @export
 */
export declare const GetHotelRoomsHotelRoomStatusEnum: {
    readonly Clean: "Clean";
    readonly Dirty: "Dirty";
    readonly Pickup: "Pickup";
    readonly Inspected: "Inspected";
    readonly OutOfOrder: "OutOfOrder";
    readonly OutOfService: "OutOfService";
};
export type GetHotelRoomsHotelRoomStatusEnum = typeof GetHotelRoomsHotelRoomStatusEnum[keyof typeof GetHotelRoomsHotelRoomStatusEnum];
/**
 * @export
 */
export declare const GetHotelRoomsHotelFORoomStatusEnum: {
    readonly Vacant: "Vacant";
    readonly Occupied: "Occupied";
};
export type GetHotelRoomsHotelFORoomStatusEnum = typeof GetHotelRoomsHotelFORoomStatusEnum[keyof typeof GetHotelRoomsHotelFORoomStatusEnum];
/**
 * @export
 */
export declare const GetHotelRoomsOrderByEnum: {
    readonly ForecastRotationPoints: "ForecastRotationPoints";
};
export type GetHotelRoomsOrderByEnum = typeof GetHotelRoomsOrderByEnum[keyof typeof GetHotelRoomsOrderByEnum];
/**
 * @export
 */
export declare const GetReservationSummariesSearchTypeEnum: {
    readonly Any: "Any";
    readonly DayUse: "DayUse";
    readonly Arrival: "Arrival";
    readonly Arrived: "Arrived";
    readonly Departure: "Departure";
    readonly WaitList: "WaitList";
    readonly Cancellation: "Cancellation";
    readonly CheckedOut: "CheckedOut";
    readonly NoShow: "NoShow";
    readonly Complimentary: "Complimentary";
    readonly InHouse: "InHouse";
    readonly PostStayPendingBalance: "PostStayPendingBalance";
    readonly PreRegistered: "PreRegistered";
    readonly PostToRoom: "PostToRoom";
    readonly OpenFolio: "OpenFolio";
    readonly ScheduledCheckOut: "ScheduledCheckOut";
    readonly Queued: "Queued";
    readonly MobileCheckout: "MobileCheckout";
    readonly RegisteredAndInHouse: "RegisteredAndInHouse";
    readonly ResvBlockTraces: "ResvBlockTraces";
    readonly GuestMessages: "GuestMessages";
    readonly MassCancellation: "MassCancellation";
    readonly Operator: "Operator";
    readonly Turndown: "Turndown";
    readonly WalkIn: "WalkIn";
    readonly AdvanceCheckedIn: "AdvanceCheckedIn";
    readonly OpenBalance: "OpenBalance";
    readonly AutoFolioSettlement: "AutoFolioSettlement";
    readonly Routing: "Routing";
    readonly PlayerSnapshot: "PlayerSnapshot";
};
export type GetReservationSummariesSearchTypeEnum = typeof GetReservationSummariesSearchTypeEnum[keyof typeof GetReservationSummariesSearchTypeEnum];
/**
 * @export
 */
export declare const GetReservationSummariesAttributeNameEnum: {
    readonly Room: "Room";
    readonly Name: "Name";
    readonly ArrivalTime: "ArrivalTime";
    readonly DepartureTime: "DepartureTime";
    readonly ArrivalDate: "ArrivalDate";
    readonly DepartureDate: "DepartureDate";
};
export type GetReservationSummariesAttributeNameEnum = typeof GetReservationSummariesAttributeNameEnum[keyof typeof GetReservationSummariesAttributeNameEnum];
/**
 * @export
 */
export declare const GetReservationSummariesOrderTypeEnum: {
    readonly Asc: "Asc";
    readonly Desc: "Desc";
};
export type GetReservationSummariesOrderTypeEnum = typeof GetReservationSummariesOrderTypeEnum[keyof typeof GetReservationSummariesOrderTypeEnum];
/**
 * @export
 */
export declare const GetReservationSummariesRoomStatusesEnum: {
    readonly Clean: "Clean";
    readonly Dirty: "Dirty";
    readonly Pickup: "Pickup";
    readonly Inspected: "Inspected";
    readonly OutOfOrder: "OutOfOrder";
    readonly OutOfService: "OutOfService";
};
export type GetReservationSummariesRoomStatusesEnum = typeof GetReservationSummariesRoomStatusesEnum[keyof typeof GetReservationSummariesRoomStatusesEnum];
/**
 * @export
 */
export declare const GetReservationSummariesIndicatorEnum: {
    readonly Package: "Package";
    readonly Message: "Message";
    readonly Attachments: "Attachments";
    readonly Share: "Share";
    readonly Routing: "Routing";
    readonly Itinerary: "Itinerary";
    readonly Trace: "Trace";
    readonly ServiceRequests: "ServiceRequests";
    readonly Locator: "Locator";
    readonly Comment: "Comment";
    readonly AuthorizedBilling: "AuthorizedBilling";
    readonly StayRevenue: "StayRevenue";
    readonly Preference: "Preference";
    readonly ProfileNote: "ProfileNote";
    readonly NoPost: "NoPost";
    readonly DepositCancellation: "DepositCancellation";
    readonly FixedCharge: "FixedCharge";
    readonly RateChange: "RateChange";
    readonly QmsTask: "QmsTask";
    readonly Activity: "Activity";
    readonly Queue: "Queue";
    readonly Member: "Member";
    readonly CancelReason: "CancelReason";
    readonly Extension: "Extension";
    readonly OpenFolio: "OpenFolio";
    readonly PreStay: "PreStay";
    readonly PostStay: "PostStay";
    readonly WakeUpCall: "WakeUpCall";
    readonly Alert: "Alert";
    readonly ExternalQms: "ExternalQms";
    readonly Transport: "Transport";
    readonly TrackIt: "TrackIt";
    readonly Award: "Award";
    readonly ItemInventory: "ItemInventory";
    readonly Waitlist: "Waitlist";
    readonly HistoryFuture: "HistoryFuture";
    readonly Communication: "Communication";
    readonly PrepaidCards: "PrepaidCards";
    readonly WebRegistrationCards: "WebRegistrationCards";
};
export type GetReservationSummariesIndicatorEnum = typeof GetReservationSummariesIndicatorEnum[keyof typeof GetReservationSummariesIndicatorEnum];
/**
 * @export
 */
export declare const GetReservationSummariesFetchSummaryInstructionsEnum: {
    readonly ReservationPaymentMethods: "ReservationPaymentMethods";
    readonly RoomDetails: "RoomDetails";
    readonly BlockReservationDetails: "BlockReservationDetails";
};
export type GetReservationSummariesFetchSummaryInstructionsEnum = typeof GetReservationSummariesFetchSummaryInstructionsEnum[keyof typeof GetReservationSummariesFetchSummaryInstructionsEnum];
/**
 * @export
 */
export declare const GetReservationSummariesAllowedActionEnum: {
    readonly Cancel: "Cancel";
    readonly Move: "Move";
    readonly PreCharge: "PreCharge";
    readonly PostCharge: "PostCharge";
    readonly FacilitySchedule: "FacilitySchedule";
    readonly Upsell: "Upsell";
    readonly PreCheckIn: "PreCheckIn";
    readonly PostToNoShowCancel: "PostToNoShowCancel";
    readonly NoShow: "NoShow";
    readonly NameChange: "NameChange";
    readonly Discount: "Discount";
    readonly HouseKeeping: "HouseKeeping";
    readonly EnrollToPrimaryMembership: "EnrollToPrimaryMembership";
    readonly EnrollInProgress: "EnrollInProgress";
};
export type GetReservationSummariesAllowedActionEnum = typeof GetReservationSummariesAllowedActionEnum[keyof typeof GetReservationSummariesAllowedActionEnum];
/**
 * @export
 */
export declare const GetReservationsForBillingSearchTypeEnum: {
    readonly Any: "Any";
    readonly DayUse: "DayUse";
    readonly Arrival: "Arrival";
    readonly Arrived: "Arrived";
    readonly Departure: "Departure";
    readonly WaitList: "WaitList";
    readonly Cancellation: "Cancellation";
    readonly CheckedOut: "CheckedOut";
    readonly NoShow: "NoShow";
    readonly Complimentary: "Complimentary";
    readonly InHouse: "InHouse";
    readonly PostStayPendingBalance: "PostStayPendingBalance";
    readonly PreRegistered: "PreRegistered";
    readonly PostToRoom: "PostToRoom";
    readonly OpenFolio: "OpenFolio";
    readonly ScheduledCheckOut: "ScheduledCheckOut";
    readonly Queued: "Queued";
    readonly MobileCheckout: "MobileCheckout";
    readonly RegisteredAndInHouse: "RegisteredAndInHouse";
    readonly ResvBlockTraces: "ResvBlockTraces";
    readonly GuestMessages: "GuestMessages";
    readonly MassCancellation: "MassCancellation";
    readonly Operator: "Operator";
    readonly Turndown: "Turndown";
    readonly WalkIn: "WalkIn";
    readonly AdvanceCheckedIn: "AdvanceCheckedIn";
    readonly OpenBalance: "OpenBalance";
    readonly AutoFolioSettlement: "AutoFolioSettlement";
    readonly Routing: "Routing";
    readonly PlayerSnapshot: "PlayerSnapshot";
};
export type GetReservationsForBillingSearchTypeEnum = typeof GetReservationsForBillingSearchTypeEnum[keyof typeof GetReservationsForBillingSearchTypeEnum];
/**
 * @export
 */
export declare const GetReservationsForBillingReservationProfileTypeEnum: {
    readonly Guest: "Guest";
    readonly Company: "Company";
    readonly Group: "Group";
    readonly TravelAgent: "TravelAgent";
    readonly Source: "Source";
    readonly ReservationContact: "ReservationContact";
    readonly BillingContact: "BillingContact";
    readonly Addressee: "Addressee";
};
export type GetReservationsForBillingReservationProfileTypeEnum = typeof GetReservationsForBillingReservationProfileTypeEnum[keyof typeof GetReservationsForBillingReservationProfileTypeEnum];
/**
 * @export
 */
export declare const GetReservationsForBillingOrderTypeEnum: {
    readonly Asc: "Asc";
    readonly Desc: "Desc";
};
export type GetReservationsForBillingOrderTypeEnum = typeof GetReservationsForBillingOrderTypeEnum[keyof typeof GetReservationsForBillingOrderTypeEnum];
/**
 * @export
 */
export declare const GetReservationsForBillingFetchInstructionsEnum: {
    readonly Reservation: "Reservation";
    readonly ReservationId: "ReservationID";
    readonly Indicators: "Indicators";
    readonly Deposits: "Deposits";
    readonly RevenuesAndBalances: "RevenuesAndBalances";
    readonly GuestServiceStatus: "GuestServiceStatus";
    readonly MasterInfo: "MasterInfo";
    readonly CancellationInfo: "CancellationInfo";
    readonly BlockReservations: "BlockReservations";
    readonly TaxType: "TaxType";
    readonly GuestDeviceNotification: "GuestDeviceNotification";
    readonly RoomAssignedByAi: "RoomAssignedByAI";
};
export type GetReservationsForBillingFetchInstructionsEnum = typeof GetReservationsForBillingFetchInstructionsEnum[keyof typeof GetReservationsForBillingFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetReservationsForBillingSearchTypesSearchTypeEnum: {
    readonly Any: "Any";
    readonly DayUse: "DayUse";
    readonly Arrival: "Arrival";
    readonly Arrived: "Arrived";
    readonly Departure: "Departure";
    readonly WaitList: "WaitList";
    readonly Cancellation: "Cancellation";
    readonly CheckedOut: "CheckedOut";
    readonly NoShow: "NoShow";
    readonly Complimentary: "Complimentary";
    readonly InHouse: "InHouse";
    readonly PostStayPendingBalance: "PostStayPendingBalance";
    readonly PreRegistered: "PreRegistered";
    readonly PostToRoom: "PostToRoom";
    readonly OpenFolio: "OpenFolio";
    readonly ScheduledCheckOut: "ScheduledCheckOut";
    readonly Queued: "Queued";
    readonly MobileCheckout: "MobileCheckout";
    readonly RegisteredAndInHouse: "RegisteredAndInHouse";
    readonly ResvBlockTraces: "ResvBlockTraces";
    readonly GuestMessages: "GuestMessages";
    readonly MassCancellation: "MassCancellation";
    readonly Operator: "Operator";
    readonly Turndown: "Turndown";
    readonly WalkIn: "WalkIn";
    readonly AdvanceCheckedIn: "AdvanceCheckedIn";
    readonly OpenBalance: "OpenBalance";
    readonly AutoFolioSettlement: "AutoFolioSettlement";
    readonly Routing: "Routing";
    readonly PlayerSnapshot: "PlayerSnapshot";
};
export type GetReservationsForBillingSearchTypesSearchTypeEnum = typeof GetReservationsForBillingSearchTypesSearchTypeEnum[keyof typeof GetReservationsForBillingSearchTypesSearchTypeEnum];
/**
 * @export
 */
export declare const GetReservationsForBillingReservationStatusEnum: {
    readonly Cancelled: "Cancelled";
    readonly CheckedOut: "CheckedOut";
    readonly CheckedIn: "CheckedIn";
    readonly DueIn: "DueIn";
    readonly DueOut: "DueOut";
    readonly InHouse: "InHouse";
    readonly NoShow: "NoShow";
    readonly WaitList: "WaitList";
};
export type GetReservationsForBillingReservationStatusEnum = typeof GetReservationsForBillingReservationStatusEnum[keyof typeof GetReservationsForBillingReservationStatusEnum];
/**
 * @export
 */
export declare const GetResvForBatchCCAuthCardTypeEnum: {
    readonly Ab: "Ab";
    readonly Am: "Am";
    readonly Ax: "Ax";
    readonly Cb: "Cb";
    readonly Dc: "Dc";
    readonly Ds: "Ds";
    readonly Dt: "Dt";
    readonly Ec: "Ec";
    readonly Er: "Er";
    readonly Jc: "Jc";
    readonly Jl: "Jl";
    readonly Mc: "Mc";
    readonly Nb: "Nb";
    readonly So: "So";
    readonly St: "St";
    readonly Sw: "Sw";
    readonly Va: "Va";
    readonly Xy: "Xy";
    readonly Zz: "Zz";
    readonly Cp: "Cp";
    readonly Cu: "Cu";
};
export type GetResvForBatchCCAuthCardTypeEnum = typeof GetResvForBatchCCAuthCardTypeEnum[keyof typeof GetResvForBatchCCAuthCardTypeEnum];
/**
 * @export
 */
export declare const GetRoomInterfaceStatusInterfaceTypeEnum: {
    readonly Bms: "Bms";
    readonly Cas: "Cas";
    readonly Ccw: "Ccw";
    readonly Dls: "Dls";
    readonly Eft: "Eft";
    readonly Exp: "Exp";
    readonly Mak: "Mak";
    readonly Mbs: "Mbs";
    readonly Msc: "Msc";
    readonly Pbx: "Pbx";
    readonly Pos: "Pos";
    readonly Svs: "Svs";
    readonly Tik: "Tik";
    readonly Vid: "Vid";
    readonly Vms: "Vms";
    readonly Www: "Www";
    readonly Xml: "Xml";
};
export type GetRoomInterfaceStatusInterfaceTypeEnum = typeof GetRoomInterfaceStatusInterfaceTypeEnum[keyof typeof GetRoomInterfaceStatusInterfaceTypeEnum];
/**
 * @export
 */
export declare const GetRoomInterfaceStatusStatusEnum: {
    readonly Stopped: "Stopped";
    readonly Running: "Running";
    readonly Waiting: "Waiting";
    readonly StopInitiated: "StopInitiated";
    readonly StartInitiated: "StartInitiated";
    readonly RebootInitiated: "RebootInitiated";
    readonly Other: "Other";
};
export type GetRoomInterfaceStatusStatusEnum = typeof GetRoomInterfaceStatusStatusEnum[keyof typeof GetRoomInterfaceStatusStatusEnum];
/**
 * @export
 */
export declare const GetRoomInterfaceStatusRoomStatusEnum: {
    readonly Clean: "Clean";
    readonly Dirty: "Dirty";
    readonly Pickup: "Pickup";
    readonly Inspected: "Inspected";
    readonly OutOfOrder: "OutOfOrder";
    readonly OutOfService: "OutOfService";
};
export type GetRoomInterfaceStatusRoomStatusEnum = typeof GetRoomInterfaceStatusRoomStatusEnum[keyof typeof GetRoomInterfaceStatusRoomStatusEnum];
/**
 * @export
 */
export declare const GetRoomInterfaceStatusReservationStatusEnum: {
    readonly Cancelled: "Cancelled";
    readonly CheckedOut: "CheckedOut";
    readonly CheckedIn: "CheckedIn";
    readonly DueIn: "DueIn";
    readonly DueOut: "DueOut";
    readonly InHouse: "InHouse";
    readonly NoShow: "NoShow";
    readonly WaitList: "WaitList";
};
export type GetRoomInterfaceStatusReservationStatusEnum = typeof GetRoomInterfaceStatusReservationStatusEnum[keyof typeof GetRoomInterfaceStatusReservationStatusEnum];
/**
 * @export
 */
export declare const GetRoomInterfaceStatusOrderByEnum: {
    readonly RoomNo: "RoomNo";
    readonly Name: "Name";
    readonly ArrivalDateEtr: "ArrivalDateETR";
    readonly ArrivalDate: "ArrivalDate";
};
export type GetRoomInterfaceStatusOrderByEnum = typeof GetRoomInterfaceStatusOrderByEnum[keyof typeof GetRoomInterfaceStatusOrderByEnum];
/**
 * @export
 */
export declare const GetRoomInterfaceStatusOrderTypeEnum: {
    readonly Asc: "Asc";
    readonly Desc: "Desc";
};
export type GetRoomInterfaceStatusOrderTypeEnum = typeof GetRoomInterfaceStatusOrderTypeEnum[keyof typeof GetRoomInterfaceStatusOrderTypeEnum];
/**
 * @export
 */
export declare const GetServiceRequestsStatusEnum: {
    readonly Open: "Open";
    readonly PendingFollowUp: "PendingFollowUp";
    readonly Closed: "Closed";
    readonly DoNotDisturb: "DoNotDisturb";
    readonly MakeUpRoom: "MakeUpRoom";
};
export type GetServiceRequestsStatusEnum = typeof GetServiceRequestsStatusEnum[keyof typeof GetServiceRequestsStatusEnum];
/**
 * @export
 */
export declare const GetSuggestedRoomsSuggestedRoomsInstructionsEnum: {
    readonly ComponentRoom: "ComponentRoom";
};
export type GetSuggestedRoomsSuggestedRoomsInstructionsEnum = typeof GetSuggestedRoomsSuggestedRoomsInstructionsEnum[keyof typeof GetSuggestedRoomsSuggestedRoomsInstructionsEnum];
/**
 * @export
 */
export declare const VerifyCheckinReservationVerifyCheckinInstructionsEnum: {
    readonly AuthorizationInfo: "AuthorizationInfo";
    readonly ExcludeRoomSuggestion: "ExcludeRoomSuggestion";
};
export type VerifyCheckinReservationVerifyCheckinInstructionsEnum = typeof VerifyCheckinReservationVerifyCheckinInstructionsEnum[keyof typeof VerifyCheckinReservationVerifyCheckinInstructionsEnum];
