/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActivityLog,
  AddReservationToQueueRequest,
  AiraLastRunStatusInfo,
  AssignRoomsAIRequest,
  AssignedRoom,
  AutoAssignRoomRequest,
  AutoRoomAssignType,
  BatchCCAuthToProcess,
  ChangedWakeUpCalls,
  CheckedinReservation,
  DailyDocket,
  DeleteAssignRoomRequest,
  DeliverQueueRoomsTextMessageRequest,
  ExceptionDetailType,
  FloorPlans,
  HotelRooms,
  LinkedReservations,
  MoveInHouseGuestRequest,
  MovedInHouseGuest,
  PlaceRoomsOnHoldRequest,
  PostAdvanceCheckInRequest,
  PostCheckInRequest,
  PostMassAdvanceCheckInRequest,
  PostMassCheckInRequest,
  PostRoomAssignmentRequest,
  PostRoomKeyRequest,
  ProcessBatchCCAuthRequest,
  PutDailyDocketRequest,
  PutReservationQueuePriorityRequest,
  PutRoomInterfaceStatusRequest,
  PutServiceRequestsRequest,
  PutWakeUpCallRequest,
  QueueRoomsTextMessage,
  QueuedRoomsTextMessage,
  ReservationQueuePriority,
  ReservationsInQueue,
  ReservationsInfo,
  ResvForBatchCCAut,
  RoomInterfaceStatus,
  RoomKeyDetails,
  RoomKeyInfo,
  RoomKeyInterfaceDetails,
  RoomKeyMultipleGuests,
  RoomKeyStatus,
  RoomMoveHistory,
  ServiceRequestsInfo,
  ShiftRoomsRequest,
  ShortReservation,
  Status,
  SuggestedRooms,
  SwapRoomsRequest,
  UnAssignedRoom,
  UpdateRoomKeys,
  VerifiedCheckinReservation,
  WakeUpCalls,
} from '../models';
import {
    ActivityLogFromJSON,
    ActivityLogToJSON,
    AddReservationToQueueRequestFromJSON,
    AddReservationToQueueRequestToJSON,
    AiraLastRunStatusInfoFromJSON,
    AiraLastRunStatusInfoToJSON,
    AssignRoomsAIRequestFromJSON,
    AssignRoomsAIRequestToJSON,
    AssignedRoomFromJSON,
    AssignedRoomToJSON,
    AutoAssignRoomRequestFromJSON,
    AutoAssignRoomRequestToJSON,
    AutoRoomAssignTypeFromJSON,
    AutoRoomAssignTypeToJSON,
    BatchCCAuthToProcessFromJSON,
    BatchCCAuthToProcessToJSON,
    ChangedWakeUpCallsFromJSON,
    ChangedWakeUpCallsToJSON,
    CheckedinReservationFromJSON,
    CheckedinReservationToJSON,
    DailyDocketFromJSON,
    DailyDocketToJSON,
    DeleteAssignRoomRequestFromJSON,
    DeleteAssignRoomRequestToJSON,
    DeliverQueueRoomsTextMessageRequestFromJSON,
    DeliverQueueRoomsTextMessageRequestToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    FloorPlansFromJSON,
    FloorPlansToJSON,
    HotelRoomsFromJSON,
    HotelRoomsToJSON,
    LinkedReservationsFromJSON,
    LinkedReservationsToJSON,
    MoveInHouseGuestRequestFromJSON,
    MoveInHouseGuestRequestToJSON,
    MovedInHouseGuestFromJSON,
    MovedInHouseGuestToJSON,
    PlaceRoomsOnHoldRequestFromJSON,
    PlaceRoomsOnHoldRequestToJSON,
    PostAdvanceCheckInRequestFromJSON,
    PostAdvanceCheckInRequestToJSON,
    PostCheckInRequestFromJSON,
    PostCheckInRequestToJSON,
    PostMassAdvanceCheckInRequestFromJSON,
    PostMassAdvanceCheckInRequestToJSON,
    PostMassCheckInRequestFromJSON,
    PostMassCheckInRequestToJSON,
    PostRoomAssignmentRequestFromJSON,
    PostRoomAssignmentRequestToJSON,
    PostRoomKeyRequestFromJSON,
    PostRoomKeyRequestToJSON,
    ProcessBatchCCAuthRequestFromJSON,
    ProcessBatchCCAuthRequestToJSON,
    PutDailyDocketRequestFromJSON,
    PutDailyDocketRequestToJSON,
    PutReservationQueuePriorityRequestFromJSON,
    PutReservationQueuePriorityRequestToJSON,
    PutRoomInterfaceStatusRequestFromJSON,
    PutRoomInterfaceStatusRequestToJSON,
    PutServiceRequestsRequestFromJSON,
    PutServiceRequestsRequestToJSON,
    PutWakeUpCallRequestFromJSON,
    PutWakeUpCallRequestToJSON,
    QueueRoomsTextMessageFromJSON,
    QueueRoomsTextMessageToJSON,
    QueuedRoomsTextMessageFromJSON,
    QueuedRoomsTextMessageToJSON,
    ReservationQueuePriorityFromJSON,
    ReservationQueuePriorityToJSON,
    ReservationsInQueueFromJSON,
    ReservationsInQueueToJSON,
    ReservationsInfoFromJSON,
    ReservationsInfoToJSON,
    ResvForBatchCCAutFromJSON,
    ResvForBatchCCAutToJSON,
    RoomInterfaceStatusFromJSON,
    RoomInterfaceStatusToJSON,
    RoomKeyDetailsFromJSON,
    RoomKeyDetailsToJSON,
    RoomKeyInfoFromJSON,
    RoomKeyInfoToJSON,
    RoomKeyInterfaceDetailsFromJSON,
    RoomKeyInterfaceDetailsToJSON,
    RoomKeyMultipleGuestsFromJSON,
    RoomKeyMultipleGuestsToJSON,
    RoomKeyStatusFromJSON,
    RoomKeyStatusToJSON,
    RoomMoveHistoryFromJSON,
    RoomMoveHistoryToJSON,
    ServiceRequestsInfoFromJSON,
    ServiceRequestsInfoToJSON,
    ShiftRoomsRequestFromJSON,
    ShiftRoomsRequestToJSON,
    ShortReservationFromJSON,
    ShortReservationToJSON,
    StatusFromJSON,
    StatusToJSON,
    SuggestedRoomsFromJSON,
    SuggestedRoomsToJSON,
    SwapRoomsRequestFromJSON,
    SwapRoomsRequestToJSON,
    UnAssignedRoomFromJSON,
    UnAssignedRoomToJSON,
    UpdateRoomKeysFromJSON,
    UpdateRoomKeysToJSON,
    VerifiedCheckinReservationFromJSON,
    VerifiedCheckinReservationToJSON,
    WakeUpCallsFromJSON,
    WakeUpCallsToJSON,
} from '../models';

export interface AddReservationToQueueOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    queueReservation?: AddReservationToQueueRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface AssignRoomsAIOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomsAI?: AssignRoomsAIRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface AutoAssignRoomOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    autoAssignRoom?: AutoAssignRoomRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface AutoUnAssignRoomRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: Array<string>;
    idExtension?: Array<number>;
    type?: Array<string>;
    includeDepartureRooms?: boolean;
    limit?: number;
    offset?: number;
    roomNumberWildcard?: string;
    useAIRoomAssignment?: boolean;
    useAssociatedProfilePreferences?: boolean;
    hotelRoomStatus?: Set<AutoUnAssignRoomHotelRoomStatusEnum>;
    hotelFORoomStatus?: Set<AutoUnAssignRoomHotelFORoomStatusEnum>;
    fromRoomNumber?: string;
    toRoomNumber?: string;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    roomType?: Array<string>;
    roomClass?: string;
    floor?: string;
    includeDueOut?: boolean;
    departureTime?: string;
    code?: Array<string>;
    description?: Array<string>;
    orderSequence?: Array<number>;
    quantity?: Array<number>;
    smokingPreference?: string;
    includeAllRoomConditions?: boolean;
    includeComponentRooms?: boolean;
    includePseudoRooms?: boolean;
    includeOORoomCheck?: boolean;
    connectingRoomsOnly?: boolean;
    reservationIdId?: string;
    reservationIdIdExtension?: number;
    idContext?: string;
    reservationIdType?: string;
    pseudoRoomsOnly?: boolean;
    includeAttendentInRoom?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAdvanceCheckInRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAssignRoomOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    unAssignRoomCriteria?: DeleteAssignRoomRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCheckinRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomStatus?: DeleteCheckinRoomStatusEnum;
    unassignRoom?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteDailyDocketRequest {
    docketId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteReservationFromQueueRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRoomKeyRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteServiceRequestsRequest {
    serviceRequestId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteWakeUpCallRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    callTime?: Array<string>;
    followUpCallTime?: Array<string>;
    startDate?: Date;
    newCallTime?: Array<string>;
    newFollowUpCallTime?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeliverQueueRoomsTextMessageOperationRequest {
    messageType?: string;
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    deliverQueueRoomsTextMessage?: DeliverQueueRoomsTextMessageRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface FetchAiraLastRunStatusRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDailyDocketRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    docketDate?: Date;
    department?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFloorPlansRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    room?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFulfillmentActivityLogRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    module?: GetFulfillmentActivityLogModuleEnum;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    activityGroup?: string;
    activityType?: string;
    fromDate?: Date;
    toDate?: Date;
    searchText?: string;
    userByIds?: Array<number>;
    userForIds?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelRoomsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    roomNumberWildcard?: string;
    hotelRoomStatus?: Set<GetHotelRoomsHotelRoomStatusEnum>;
    hotelFORoomStatus?: Set<GetHotelRoomsHotelFORoomStatusEnum>;
    fromRoomNumber?: string;
    toRoomNumber?: string;
    hotelRoomStartDate?: Date;
    hotelRoomEndDate?: Date;
    duration?: string;
    roomType?: Array<string>;
    roomClass?: string;
    floor?: string;
    includeDueOut?: boolean;
    departureTime?: string;
    roomFeatureCode?: Array<string>;
    description?: Array<string>;
    orderSequence?: Array<number>;
    quantity?: Array<number>;
    smokingPreference?: string;
    includeAllRoomConditions?: boolean;
    includeComponentRooms?: boolean;
    includePseudoRooms?: boolean;
    includeOORoomCheck?: boolean;
    connectingRoomsOnly?: boolean;
    reservationId?: string;
    reservationIdContext?: string;
    reservationIdType?: string;
    pseudoRoomsOnly?: boolean;
    includeAttendentInRoom?: boolean;
    includeRotationRoom?: boolean;
    ownerRoomsOnly?: boolean;
    ownerExclusiveRoomsOnly?: boolean;
    perfectFitRoomsOnly?: boolean;
    orderBy?: GetHotelRoomsOrderByEnum;
    unitGradeCodes?: Array<string>;
    ownerExclusiveRoomProfileId?: string;
    excludeRoomFeatures?: Array<string>;
    excludeFloorPreferences?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetLinkedReservationsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    additionalReservationId?: Array<string>;
    additionalReservationIdContext?: Array<string>;
    additionalReservationIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetQueueRoomsTextMessageRequest {
    messageType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationId?: string;
    reservationIdContext?: string;
    reservationIdType?: string;
    mobileNumber?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationSummariesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    searchType?: GetReservationSummariesSearchTypeEnum;
    reservationId?: Array<string>;
    reservationIdContext?: Array<string>;
    reservationIdType?: Array<string>;
    blockId?: Array<string>;
    blockIdContext?: Array<string>;
    blockIdType?: Array<string>;
    arrivalEnd?: Date;
    arrivalStart?: Date;
    departureEnd?: Date;
    departureStart?: Date;
    stayOnEnd?: Date;
    stayOnStart?: Date;
    createdOnEnd?: Date;
    createOnStart?: Date;
    depositDateEnd?: Date;
    depositDateStart?: Date;
    dateCriteriaExpectedArrivalEndTime?: string;
    dateCriteriaExpectedArrivalStartTime?: string;
    depositDueDateEnd?: Date;
    depositDueDateStart?: Date;
    expectedReturnEndTime?: string;
    expectedReturnStartTime?: string;
    membershipNumber?: string;
    anyVIPStatus?: boolean;
    vipStatusCodes?: Array<string>;
    roomId?: string;
    lastName?: string;
    firstName?: string;
    blockCode?: string;
    companyName?: string;
    travelAgentName?: string;
    creditCardNumber?: string;
    customReference?: string;
    externalReference?: string;
    attributeName?: Set<GetReservationSummariesAttributeNameEnum>;
    orderType?: Set<GetReservationSummariesOrderTypeEnum>;
    expectedArrivalEndTime?: Date;
    expectedArrivalStartTime?: Date;
    roomTypes?: Array<string>;
    roomStatuses?: Set<GetReservationSummariesRoomStatusesEnum>;
    paymentMethod?: Array<string>;
    indicator?: Set<GetReservationSummariesIndicatorEnum>;
    fetchSummaryInstructions?: Set<GetReservationSummariesFetchSummaryInstructionsEnum>;
    allowedAction?: Set<GetReservationSummariesAllowedActionEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationsForBillingRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    searchType?: GetReservationsForBillingSearchTypeEnum;
    multipleHotelsSearchList?: Array<string>;
    superSearch?: string;
    reservationId?: Array<string>;
    reservationIdContext?: Array<string>;
    reservationIdType?: Array<string>;
    nights?: number;
    arrivalEnd?: Date;
    arrivalStart?: Date;
    departureEnd?: Date;
    departureStart?: Date;
    reservationProfileType?: Set<GetReservationsForBillingReservationProfileTypeEnum>;
    attachedProfileName?: Array<string>;
    attachedProfileId?: Array<string>;
    attachedProfileIdContext?: Array<string>;
    attachedProfileIdType?: Array<string>;
    resGuestId?: string;
    resGuestIdContext?: string;
    resGuestIdType?: string;
    membershipId?: string;
    membershipLevelCodes?: Array<string>;
    membershipTypeCodes?: Array<string>;
    surname?: string;
    givenName?: string;
    cityName?: string;
    postalCode?: string;
    state?: string;
    countryCode?: string;
    streetAddress?: string;
    bookingChannelCode?: string;
    blockHotelId?: string;
    blockId?: Array<string>;
    blockIdContext?: Array<string>;
    blockIdType?: Array<string>;
    recordLocator?: string;
    orderByAttributeName?: Array<string>;
    orderType?: Set<GetReservationsForBillingOrderTypeEnum>;
    roomId?: string;
    roomType?: Array<string>;
    fetchInstructions?: Set<GetReservationsForBillingFetchInstructionsEnum>;
    excludeNoPost?: boolean;
    excludePMRooms?: boolean;
    hasOpenFolio?: boolean;
    excludedReservationIds?: Array<string>;
    excludedReservationIdsContext?: Array<string>;
    excludedReservationIdsType?: Array<string>;
    advanceCheckedIn?: boolean;
    searchTypesSearchType?: Set<GetReservationsForBillingSearchTypesSearchTypeEnum>;
    reservationStatus?: Set<GetReservationsForBillingReservationStatusEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationsInQueueRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomClassCodes?: Array<string>;
    roomTypeCodes?: Array<string>;
    roomNumberWildCard?: string;
    guestNameWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetResvForBatchCCAuthRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestName?: string;
    room?: string;
    cardType?: Set<GetResvForBatchCCAuthCardTypeEnum>;
    userDefinedCardType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomInterfaceStatusRequest {
    interfaceId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    interfaceName?: string;
    interfaceType?: GetRoomInterfaceStatusInterfaceTypeEnum;
    logo?: string;
    machineName?: string;
    status?: GetRoomInterfaceStatusStatusEnum;
    activeFlag?: boolean;
    code?: Array<string>;
    blockId?: string;
    blockIdContext?: string;
    blockIdType?: string;
    roomId?: string;
    lastName?: string;
    firstName?: string;
    reservationIds?: Array<string>;
    reservationIdsContext?: Array<string>;
    reservationIdsType?: Array<string>;
    arrivalEnd?: Date;
    arrivalStart?: Date;
    expectedArrivalEndTime?: string;
    expectedArrivalStartTime?: string;
    specialCodes?: Array<string>;
    floorCodes?: Array<string>;
    roomFeatureCodes?: Array<string>;
    roomClassCodes?: Array<string>;
    roomStatus?: Set<GetRoomInterfaceStatusRoomStatusEnum>;
    guaranteeCode?: string;
    reservationStatus?: Set<GetRoomInterfaceStatusReservationStatusEnum>;
    includeLinkedReservations?: boolean;
    includeBlocks?: boolean;
    orderBy?: GetRoomInterfaceStatusOrderByEnum;
    orderType?: GetRoomInterfaceStatusOrderTypeEnum;
    expectedReturnEndTime?: string;
    expectedReturnStartTime?: string;
    advanceCheckedIn?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomKeyInterfaceDetailsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomNumbersCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomKeysRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomMoveHistoryRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationIdContext?: string;
    reservationIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetServiceRequestsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    code?: Array<string>;
    status?: Set<GetServiceRequestsStatusEnum>;
    priorityCodes?: Array<string>;
    departmentCodes?: Array<string>;
    reservationId?: string;
    reservationIdContext?: string;
    reservationIdType?: string;
    profileId?: string;
    profileIdContext?: string;
    profileIdType?: string;
    room?: string;
    creationEndDate?: Date;
    creationStartDate?: Date;
    closedEndDate?: Date;
    closedStartDate?: Date;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSuggestedRoomsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomType?: string;
    startDate?: Date;
    nights?: number;
    suggestedRoomsInstructions?: Set<GetSuggestedRoomsSuggestedRoomsInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetWakeUpCallRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchCancelled?: boolean;
    fetchCompleted?: boolean;
    fetchNoAnswer?: boolean;
    fetchPending?: boolean;
    idExtension?: number;
    reservationIdContext?: string;
    reservationIdType?: string;
    beginDate?: Date;
    endDate?: Date;
    beginTime?: string;
    endTime?: string;
    room?: Array<string>;
    blockId?: string;
    guestName?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface MoveInHouseGuestOperationRequest {
    roomId?: string;
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    moveInHouseGuest?: MoveInHouseGuestRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PlaceRoomsOnHoldOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    holdRooms?: PlaceRoomsOnHoldRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAdvanceCheckInOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    advanceCheckInReservation?: PostAdvanceCheckInRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCheckInOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservation?: PostCheckInRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostDailyDocketRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    dailyDocket?: PutDailyDocketRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMassAdvanceCheckInOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    massAdvanceCheckInReservations?: PostMassAdvanceCheckInRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMassCheckInOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    massCheckInReservations?: PostMassCheckInRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRoomAssignmentOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    room?: PostRoomAssignmentRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRoomKeyOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomKey?: PostRoomKeyRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostServiceRequestsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    serviceRequestsInfo?: PutServiceRequestsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostWakeUpCallRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    wakeUpCalls?: PutWakeUpCallRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ProcessBatchCCAuthOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    batchCCAuth?: ProcessBatchCCAuthRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutDailyDocketOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    dailyDocket?: PutDailyDocketRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutReservationQueuePriorityOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationQueuePriorityNumber?: PutReservationQueuePriorityRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoomInterfaceStatusOperationRequest {
    interfaceId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationInterface?: PutRoomInterfaceStatusRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoomKeysRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomKeys?: RoomKeyMultipleGuests;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutServiceRequestsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    serviceRequestsInfo?: PutServiceRequestsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutWakeUpCallOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    wakeUpCalls?: PutWakeUpCallRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ReadRoomKeyRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    encoderTerminal?: string;
    encoderId?: string;
    encoderIdContext?: string;
    encoderIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ReleaseRoomsOnHoldRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    holdRooms?: PlaceRoomsOnHoldRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ShiftRoomsOperationRequest {
    hotelId?: string;
    sourceReservationId?: string;
    targetReservationId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    shiftRooms?: ShiftRoomsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SwapRoomsOperationRequest {
    hotelId?: string;
    sourceReservationId?: string;
    targetReservationId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    swapRooms?: SwapRoomsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface VerifyCheckinReservationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    verifyCheckinInstructions?: Set<VerifyCheckinReservationVerifyCheckinInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class FrontDeskOperationsApi extends runtime.BaseAPI {

    /**
     * Using this API you can assign reservations to the reservation queue if the guest\'s room is not ready for assignment or if there are no available rooms of the room type attached to the reservation. Housekeeping staff can use the Queue Rooms functionality to determine if there are guests waiting to check in to a particular room or type of room; if there are, the queue list can provide guidance in determining which rooms need attention first. <p><strong>OperationId:</strong>addReservationToQueue</p>
     * Add reservation to queue
     */
    async addReservationToQueueRaw(requestParameters: AddReservationToQueueOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationQueuePriority>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/queuedReservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddReservationToQueueRequestToJSON(requestParameters.queueReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationQueuePriorityFromJSON(jsonValue));
    }

    /**
     * Using this API you can assign reservations to the reservation queue if the guest\'s room is not ready for assignment or if there are no available rooms of the room type attached to the reservation. Housekeeping staff can use the Queue Rooms functionality to determine if there are guests waiting to check in to a particular room or type of room; if there are, the queue list can provide guidance in determining which rooms need attention first. <p><strong>OperationId:</strong>addReservationToQueue</p>
     * Add reservation to queue
     */
    async addReservationToQueue(requestParameters: AddReservationToQueueOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationQueuePriority> {
        const response = await this.addReservationToQueueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API runs AI Room Assignment and allocates rooms to incoming reservations. <p><strong>OperationId:</strong>assignRoomsAI</p>
     * AI Assign Rooms
     */
    async assignRoomsAIRaw(requestParameters: AssignRoomsAIOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/ai/rooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignRoomsAIRequestToJSON(requestParameters.roomsAI),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API runs AI Room Assignment and allocates rooms to incoming reservations. <p><strong>OperationId:</strong>assignRoomsAI</p>
     * AI Assign Rooms
     */
    async assignRoomsAI(requestParameters: AssignRoomsAIOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.assignRoomsAIRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API can be used to assign the room automatically. <p><strong>OperationId:</strong>autoAssignRoom</p>
     * Assign the room automatically
     */
    async autoAssignRoomRaw(requestParameters: AutoAssignRoomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AutoRoomAssignType>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/autoRoomAssignments`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AutoAssignRoomRequestToJSON(requestParameters.autoAssignRoom),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AutoRoomAssignTypeFromJSON));
    }

    /**
     * This API can be used to assign the room automatically. <p><strong>OperationId:</strong>autoAssignRoom</p>
     * Assign the room automatically
     */
    async autoAssignRoom(requestParameters: AutoAssignRoomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AutoRoomAssignType>> {
        const response = await this.autoAssignRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API can be used to auto unassign a room. <p><strong>OperationId:</strong>autoUnAssignRoom</p>
     * Auto unassign room
     */
    async autoUnAssignRoomRaw(requestParameters: AutoUnAssignRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idExtension) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.includeDepartureRooms !== undefined) {
            queryParameters['includeDepartureRooms'] = requestParameters.includeDepartureRooms;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.roomNumberWildcard !== undefined) {
            queryParameters['roomNumberWildcard'] = requestParameters.roomNumberWildcard;
        }

        if (requestParameters.useAIRoomAssignment !== undefined) {
            queryParameters['useAIRoomAssignment'] = requestParameters.useAIRoomAssignment;
        }

        if (requestParameters.useAssociatedProfilePreferences !== undefined) {
            queryParameters['useAssociatedProfilePreferences'] = requestParameters.useAssociatedProfilePreferences;
        }

        if (requestParameters.hotelRoomStatus) {
            queryParameters['hotelRoomStatus'] = requestParameters.hotelRoomStatus;
        }

        if (requestParameters.hotelFORoomStatus) {
            queryParameters['hotelFORoomStatus'] = requestParameters.hotelFORoomStatus;
        }

        if (requestParameters.fromRoomNumber !== undefined) {
            queryParameters['fromRoomNumber'] = requestParameters.fromRoomNumber;
        }

        if (requestParameters.toRoomNumber !== undefined) {
            queryParameters['toRoomNumber'] = requestParameters.toRoomNumber;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.roomClass !== undefined) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }

        if (requestParameters.floor !== undefined) {
            queryParameters['floor'] = requestParameters.floor;
        }

        if (requestParameters.includeDueOut !== undefined) {
            queryParameters['includeDueOut'] = requestParameters.includeDueOut;
        }

        if (requestParameters.departureTime !== undefined) {
            queryParameters['departureTime'] = requestParameters.departureTime;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.description) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.orderSequence) {
            queryParameters['orderSequence'] = requestParameters.orderSequence;
        }

        if (requestParameters.quantity) {
            queryParameters['quantity'] = requestParameters.quantity;
        }

        if (requestParameters.smokingPreference !== undefined) {
            queryParameters['smokingPreference'] = requestParameters.smokingPreference;
        }

        if (requestParameters.includeAllRoomConditions !== undefined) {
            queryParameters['includeAllRoomConditions'] = requestParameters.includeAllRoomConditions;
        }

        if (requestParameters.includeComponentRooms !== undefined) {
            queryParameters['includeComponentRooms'] = requestParameters.includeComponentRooms;
        }

        if (requestParameters.includePseudoRooms !== undefined) {
            queryParameters['includePseudoRooms'] = requestParameters.includePseudoRooms;
        }

        if (requestParameters.includeOORoomCheck !== undefined) {
            queryParameters['includeOORoomCheck'] = requestParameters.includeOORoomCheck;
        }

        if (requestParameters.connectingRoomsOnly !== undefined) {
            queryParameters['connectingRoomsOnly'] = requestParameters.connectingRoomsOnly;
        }

        if (requestParameters.reservationIdId !== undefined) {
            queryParameters['reservationIdId'] = requestParameters.reservationIdId;
        }

        if (requestParameters.reservationIdIdExtension !== undefined) {
            queryParameters['reservationIdIdExtension'] = requestParameters.reservationIdIdExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        if (requestParameters.pseudoRoomsOnly !== undefined) {
            queryParameters['pseudoRoomsOnly'] = requestParameters.pseudoRoomsOnly;
        }

        if (requestParameters.includeAttendentInRoom !== undefined) {
            queryParameters['includeAttendentInRoom'] = requestParameters.includeAttendentInRoom;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/autoRoomAssignments`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API can be used to auto unassign a room. <p><strong>OperationId:</strong>autoUnAssignRoom</p>
     * Auto unassign room
     */
    async autoUnAssignRoom(requestParameters: AutoUnAssignRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.autoUnAssignRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reverse an advance check in for a reservation. <p><strong>OperationId:</strong>deleteAdvanceCheckIn</p>
     * Reverse Advance Checkin 
     */
    async deleteAdvanceCheckInRaw(requestParameters: DeleteAdvanceCheckInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/advanceCheckIns`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Reverse an advance check in for a reservation. <p><strong>OperationId:</strong>deleteAdvanceCheckIn</p>
     * Reverse Advance Checkin 
     */
    async deleteAdvanceCheckIn(requestParameters: DeleteAdvanceCheckInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAdvanceCheckInRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to remove an assigned room from a reservation in reserved status. <p><strong>OperationId:</strong>deleteAssignRoom</p>
     * Remove an assigned room
     */
    async deleteAssignRoomRaw(requestParameters: DeleteAssignRoomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnAssignedRoom>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/rooms`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteAssignRoomRequestToJSON(requestParameters.unAssignRoomCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnAssignedRoomFromJSON(jsonValue));
    }

    /**
     * This API will allow you to remove an assigned room from a reservation in reserved status. <p><strong>OperationId:</strong>deleteAssignRoom</p>
     * Remove an assigned room
     */
    async deleteAssignRoom(requestParameters: DeleteAssignRoomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnAssignedRoom> {
        const response = await this.deleteAssignRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to revert a reservation that has been checked in.  This will return the reservation to a Due in/Arrival status. <p><strong>OperationId:</strong>deleteCheckin</p>
     * Revert a checked-in Reservation
     */
    async deleteCheckinRaw(requestParameters: DeleteCheckinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.roomStatus !== undefined) {
            queryParameters['roomStatus'] = requestParameters.roomStatus;
        }

        if (requestParameters.unassignRoom !== undefined) {
            queryParameters['unassignRoom'] = requestParameters.unassignRoom;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/checkIns`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to revert a reservation that has been checked in.  This will return the reservation to a Due in/Arrival status. <p><strong>OperationId:</strong>deleteCheckin</p>
     * Revert a checked-in Reservation
     */
    async deleteCheckin(requestParameters: DeleteCheckinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCheckinRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete a Daily Docket. <p><strong>OperationId:</strong>deleteDailyDocket</p>
     * Delete Daily Docket 
     */
    async deleteDailyDocketRaw(requestParameters: DeleteDailyDocketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/dailyDocket/{docketId}`.replace(`{${"docketId"}}`, encodeURIComponent(String(requestParameters.docketId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete a Daily Docket. <p><strong>OperationId:</strong>deleteDailyDocket</p>
     * Delete Daily Docket 
     */
    async deleteDailyDocket(requestParameters: DeleteDailyDocketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteDailyDocketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to remove a reservation that is already set as a Queued Reservation. <p><strong>OperationId:</strong>deleteReservationFromQueue</p>
     * Delete reservation from queue
     */
    async deleteReservationFromQueueRaw(requestParameters: DeleteReservationFromQueueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/queuedReservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to remove a reservation that is already set as a Queued Reservation. <p><strong>OperationId:</strong>deleteReservationFromQueue</p>
     * Delete reservation from queue
     */
    async deleteReservationFromQueue(requestParameters: DeleteReservationFromQueueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteReservationFromQueueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will delete room keys on a reservation. <p><strong>OperationId:</strong>deleteRoomKey</p>
     * Delete room key
     */
    async deleteRoomKeyRaw(requestParameters: DeleteRoomKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/roomKeys`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will delete room keys on a reservation. <p><strong>OperationId:</strong>deleteRoomKey</p>
     * Delete room key
     */
    async deleteRoomKey(requestParameters: DeleteRoomKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRoomKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete any service requests that exist on a reservation. <p><strong>OperationId:</strong>deleteServiceRequests</p>
     * Delete Service Requests
     */
    async deleteServiceRequestsRaw(requestParameters: DeleteServiceRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/serviceRequests/{serviceRequestId}`.replace(`{${"serviceRequestId"}}`, encodeURIComponent(String(requestParameters.serviceRequestId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete any service requests that exist on a reservation. <p><strong>OperationId:</strong>deleteServiceRequests</p>
     * Delete Service Requests
     */
    async deleteServiceRequests(requestParameters: DeleteServiceRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteServiceRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to cancel a wake up call on a reservation. <p><strong>OperationId:</strong>deleteWakeUpCall</p>
     * Delete Wake Up Call
     */
    async deleteWakeUpCallRaw(requestParameters: DeleteWakeUpCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.callTime) {
            queryParameters['callTime'] = requestParameters.callTime;
        }

        if (requestParameters.followUpCallTime) {
            queryParameters['followUpCallTime'] = requestParameters.followUpCallTime;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.newCallTime) {
            queryParameters['newCallTime'] = requestParameters.newCallTime;
        }

        if (requestParameters.newFollowUpCallTime) {
            queryParameters['newFollowUpCallTime'] = requestParameters.newFollowUpCallTime;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/wakeUpCalls`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to cancel a wake up call on a reservation. <p><strong>OperationId:</strong>deleteWakeUpCall</p>
     * Delete Wake Up Call
     */
    async deleteWakeUpCall(requestParameters: DeleteWakeUpCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteWakeUpCallRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will deliver Queue rooms text message. <p><strong>OperationId:</strong>deliverQueueRoomsTextMessage</p>
     * Deliver Queue rooms text message
     */
    async deliverQueueRoomsTextMessageRaw(requestParameters: DeliverQueueRoomsTextMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueueRoomsTextMessage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/textMessages/{messageType}`.replace(`{${"messageType"}}`, encodeURIComponent(String(requestParameters.messageType))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DeliverQueueRoomsTextMessageRequestToJSON(requestParameters.deliverQueueRoomsTextMessage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueueRoomsTextMessageFromJSON(jsonValue));
    }

    /**
     * This API will deliver Queue rooms text message. <p><strong>OperationId:</strong>deliverQueueRoomsTextMessage</p>
     * Deliver Queue rooms text message
     */
    async deliverQueueRoomsTextMessage(requestParameters: DeliverQueueRoomsTextMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueueRoomsTextMessage> {
        const response = await this.deliverQueueRoomsTextMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API fetches the last run status of an Automated Intelligence Room Assignment. <p><strong>OperationId:</strong>fetchAiraLastRunStatus</p>
     * Automated Intelligence Room Assignment last run status
     */
    async fetchAiraLastRunStatusRaw(requestParameters: FetchAiraLastRunStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AiraLastRunStatusInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/ai/rooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AiraLastRunStatusInfoFromJSON(jsonValue));
    }

    /**
     * This API fetches the last run status of an Automated Intelligence Room Assignment. <p><strong>OperationId:</strong>fetchAiraLastRunStatus</p>
     * Automated Intelligence Room Assignment last run status
     */
    async fetchAiraLastRunStatus(requestParameters: FetchAiraLastRunStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AiraLastRunStatusInfo> {
        const response = await this.fetchAiraLastRunStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to fetch Daily Dockets. <p><strong>OperationId:</strong>getDailyDocket</p>
     * Get Daily Docket
     */
    async getDailyDocketRaw(requestParameters: GetDailyDocketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DailyDocket>> {
        const queryParameters: any = {};

        if (requestParameters.docketDate !== undefined) {
            queryParameters['docketDate'] = (requestParameters.docketDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.department !== undefined) {
            queryParameters['department'] = requestParameters.department;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/dailyDocket`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DailyDocketFromJSON(jsonValue));
    }

    /**
     * Use this API to fetch Daily Dockets. <p><strong>OperationId:</strong>getDailyDocket</p>
     * Get Daily Docket
     */
    async getDailyDocket(requestParameters: GetDailyDocketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DailyDocket> {
        const response = await this.getDailyDocketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Floor Plans for a property. Floor Plans provide a graphical layout of floors, rooms, and other physical features such as stairways, HVAC closets, elevators, and more <p><strong>OperationId:</strong>getFloorPlans</p>
     * Get floor plans
     */
    async getFloorPlansRaw(requestParameters: GetFloorPlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FloorPlans>> {
        const queryParameters: any = {};

        if (requestParameters.room !== undefined) {
            queryParameters['room'] = requestParameters.room;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/floorPlans`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FloorPlansFromJSON(jsonValue));
    }

    /**
     * Use this API to get Floor Plans for a property. Floor Plans provide a graphical layout of floors, rooms, and other physical features such as stairways, HVAC closets, elevators, and more <p><strong>OperationId:</strong>getFloorPlans</p>
     * Get floor plans
     */
    async getFloorPlans(requestParameters: GetFloorPlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FloorPlans> {
        const response = await this.getFloorPlansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get the fullfillment activity log. <p><strong>OperationId:</strong>getFulfillmentActivityLog</p>
     * Get the fullfillment activity log
     */
    async getFulfillmentActivityLogRaw(requestParameters: GetFulfillmentActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityLog>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.module !== undefined) {
            queryParameters['module'] = requestParameters.module;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.activityGroup !== undefined) {
            queryParameters['activityGroup'] = requestParameters.activityGroup;
        }

        if (requestParameters.activityType !== undefined) {
            queryParameters['activityType'] = requestParameters.activityType;
        }

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = (requestParameters.fromDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.toDate !== undefined) {
            queryParameters['toDate'] = (requestParameters.toDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.searchText !== undefined) {
            queryParameters['searchText'] = requestParameters.searchText;
        }

        if (requestParameters.userByIds) {
            queryParameters['userByIds'] = requestParameters.userByIds;
        }

        if (requestParameters.userForIds) {
            queryParameters['userForIds'] = requestParameters.userForIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/fulfillmentActivityLogs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityLogFromJSON(jsonValue));
    }

    /**
     * You can use this API to get the fullfillment activity log. <p><strong>OperationId:</strong>getFulfillmentActivityLog</p>
     * Get the fullfillment activity log
     */
    async getFulfillmentActivityLog(requestParameters: GetFulfillmentActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityLog> {
        const response = await this.getFulfillmentActivityLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return available rooms based on search criteria such as hotelId, hotelRoomStatus, roomType, roomFeatureCode,etc.<p><strong>OperationId:</strong>getHotelRooms</p>
     * Get hotel available rooms
     */
    async getHotelRoomsRaw(requestParameters: GetHotelRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelRooms>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.roomNumberWildcard !== undefined) {
            queryParameters['roomNumberWildcard'] = requestParameters.roomNumberWildcard;
        }

        if (requestParameters.hotelRoomStatus) {
            queryParameters['hotelRoomStatus'] = requestParameters.hotelRoomStatus;
        }

        if (requestParameters.hotelFORoomStatus) {
            queryParameters['hotelFORoomStatus'] = requestParameters.hotelFORoomStatus;
        }

        if (requestParameters.fromRoomNumber !== undefined) {
            queryParameters['fromRoomNumber'] = requestParameters.fromRoomNumber;
        }

        if (requestParameters.toRoomNumber !== undefined) {
            queryParameters['toRoomNumber'] = requestParameters.toRoomNumber;
        }

        if (requestParameters.hotelRoomStartDate !== undefined) {
            queryParameters['hotelRoomStartDate'] = (requestParameters.hotelRoomStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.hotelRoomEndDate !== undefined) {
            queryParameters['hotelRoomEndDate'] = (requestParameters.hotelRoomEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.roomClass !== undefined) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }

        if (requestParameters.floor !== undefined) {
            queryParameters['floor'] = requestParameters.floor;
        }

        if (requestParameters.includeDueOut !== undefined) {
            queryParameters['includeDueOut'] = requestParameters.includeDueOut;
        }

        if (requestParameters.departureTime !== undefined) {
            queryParameters['departureTime'] = requestParameters.departureTime;
        }

        if (requestParameters.roomFeatureCode) {
            queryParameters['roomFeatureCode'] = requestParameters.roomFeatureCode;
        }

        if (requestParameters.description) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.orderSequence) {
            queryParameters['orderSequence'] = requestParameters.orderSequence;
        }

        if (requestParameters.quantity) {
            queryParameters['quantity'] = requestParameters.quantity;
        }

        if (requestParameters.smokingPreference !== undefined) {
            queryParameters['smokingPreference'] = requestParameters.smokingPreference;
        }

        if (requestParameters.includeAllRoomConditions !== undefined) {
            queryParameters['includeAllRoomConditions'] = requestParameters.includeAllRoomConditions;
        }

        if (requestParameters.includeComponentRooms !== undefined) {
            queryParameters['includeComponentRooms'] = requestParameters.includeComponentRooms;
        }

        if (requestParameters.includePseudoRooms !== undefined) {
            queryParameters['includePseudoRooms'] = requestParameters.includePseudoRooms;
        }

        if (requestParameters.includeOORoomCheck !== undefined) {
            queryParameters['includeOORoomCheck'] = requestParameters.includeOORoomCheck;
        }

        if (requestParameters.connectingRoomsOnly !== undefined) {
            queryParameters['connectingRoomsOnly'] = requestParameters.connectingRoomsOnly;
        }

        if (requestParameters.reservationId !== undefined) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.reservationIdContext !== undefined) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }

        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        if (requestParameters.pseudoRoomsOnly !== undefined) {
            queryParameters['pseudoRoomsOnly'] = requestParameters.pseudoRoomsOnly;
        }

        if (requestParameters.includeAttendentInRoom !== undefined) {
            queryParameters['includeAttendentInRoom'] = requestParameters.includeAttendentInRoom;
        }

        if (requestParameters.includeRotationRoom !== undefined) {
            queryParameters['includeRotationRoom'] = requestParameters.includeRotationRoom;
        }

        if (requestParameters.ownerRoomsOnly !== undefined) {
            queryParameters['ownerRoomsOnly'] = requestParameters.ownerRoomsOnly;
        }

        if (requestParameters.ownerExclusiveRoomsOnly !== undefined) {
            queryParameters['ownerExclusiveRoomsOnly'] = requestParameters.ownerExclusiveRoomsOnly;
        }

        if (requestParameters.perfectFitRoomsOnly !== undefined) {
            queryParameters['perfectFitRoomsOnly'] = requestParameters.perfectFitRoomsOnly;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.unitGradeCodes) {
            queryParameters['unitGradeCodes'] = requestParameters.unitGradeCodes;
        }

        if (requestParameters.ownerExclusiveRoomProfileId !== undefined) {
            queryParameters['ownerExclusiveRoomProfileId'] = requestParameters.ownerExclusiveRoomProfileId;
        }

        if (requestParameters.excludeRoomFeatures) {
            queryParameters['excludeRoomFeatures'] = requestParameters.excludeRoomFeatures;
        }

        if (requestParameters.excludeFloorPreferences) {
            queryParameters['excludeFloorPreferences'] = requestParameters.excludeFloorPreferences;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelRoomsFromJSON(jsonValue));
    }

    /**
     * Use this API to return available rooms based on search criteria such as hotelId, hotelRoomStatus, roomType, roomFeatureCode,etc.<p><strong>OperationId:</strong>getHotelRooms</p>
     * Get hotel available rooms
     */
    async getHotelRooms(requestParameters: GetHotelRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelRooms> {
        const response = await this.getHotelRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to view the reservations  that are linked to the specified reservation. <p><strong>OperationId:</strong>getLinkedReservations</p>
     * Get linked reservations
     */
    async getLinkedReservationsRaw(requestParameters: GetLinkedReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LinkedReservations>> {
        const queryParameters: any = {};

        if (requestParameters.additionalReservationId) {
            queryParameters['additionalReservationId'] = requestParameters.additionalReservationId;
        }

        if (requestParameters.additionalReservationIdContext) {
            queryParameters['additionalReservationIdContext'] = requestParameters.additionalReservationIdContext;
        }

        if (requestParameters.additionalReservationIdType) {
            queryParameters['additionalReservationIdType'] = requestParameters.additionalReservationIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/linked`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkedReservationsFromJSON(jsonValue));
    }

    /**
     * Use this API to view the reservations  that are linked to the specified reservation. <p><strong>OperationId:</strong>getLinkedReservations</p>
     * Get linked reservations
     */
    async getLinkedReservations(requestParameters: GetLinkedReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LinkedReservations> {
        const response = await this.getLinkedReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Queue room text message. <p><strong>OperationId:</strong>getQueueRoomsTextMessage</p>
     * Get Queue room text message
     */
    async getQueueRoomsTextMessageRaw(requestParameters: GetQueueRoomsTextMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueuedRoomsTextMessage>> {
        const queryParameters: any = {};

        if (requestParameters.reservationId !== undefined) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.reservationIdContext !== undefined) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }

        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        if (requestParameters.mobileNumber !== undefined) {
            queryParameters['mobileNumber'] = requestParameters.mobileNumber;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/textMessages/{messageType}`.replace(`{${"messageType"}}`, encodeURIComponent(String(requestParameters.messageType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueuedRoomsTextMessageFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Queue room text message. <p><strong>OperationId:</strong>getQueueRoomsTextMessage</p>
     * Get Queue room text message
     */
    async getQueueRoomsTextMessage(requestParameters: GetQueueRoomsTextMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueuedRoomsTextMessage> {
        const response = await this.getQueueRoomsTextMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return reservation summaries for a specific property based on search criteria such as reservationId, blockId, arrivalStart, membershipNumber, roomId, etc.<p><strong>OperationId:</strong>getReservationSummaries</p>
     * Get hotel reservation summaries
     */
    async getReservationSummariesRaw(requestParameters: GetReservationSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShortReservation>> {
        const queryParameters: any = {};

        if (requestParameters.searchType !== undefined) {
            queryParameters['searchType'] = requestParameters.searchType;
        }

        if (requestParameters.reservationId) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.reservationIdContext) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }

        if (requestParameters.reservationIdType) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        if (requestParameters.blockId) {
            queryParameters['blockId'] = requestParameters.blockId;
        }

        if (requestParameters.blockIdContext) {
            queryParameters['blockIdContext'] = requestParameters.blockIdContext;
        }

        if (requestParameters.blockIdType) {
            queryParameters['blockIdType'] = requestParameters.blockIdType;
        }

        if (requestParameters.arrivalEnd !== undefined) {
            queryParameters['arrivalEnd'] = (requestParameters.arrivalEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.arrivalStart !== undefined) {
            queryParameters['arrivalStart'] = (requestParameters.arrivalStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.departureEnd !== undefined) {
            queryParameters['departureEnd'] = (requestParameters.departureEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.departureStart !== undefined) {
            queryParameters['departureStart'] = (requestParameters.departureStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.stayOnEnd !== undefined) {
            queryParameters['stayOnEnd'] = (requestParameters.stayOnEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.stayOnStart !== undefined) {
            queryParameters['stayOnStart'] = (requestParameters.stayOnStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.createdOnEnd !== undefined) {
            queryParameters['createdOnEnd'] = (requestParameters.createdOnEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.createOnStart !== undefined) {
            queryParameters['createOnStart'] = (requestParameters.createOnStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.depositDateEnd !== undefined) {
            queryParameters['depositDateEnd'] = (requestParameters.depositDateEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.depositDateStart !== undefined) {
            queryParameters['depositDateStart'] = (requestParameters.depositDateStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.dateCriteriaExpectedArrivalEndTime !== undefined) {
            queryParameters['dateCriteriaExpectedArrivalEndTime'] = requestParameters.dateCriteriaExpectedArrivalEndTime;
        }

        if (requestParameters.dateCriteriaExpectedArrivalStartTime !== undefined) {
            queryParameters['dateCriteriaExpectedArrivalStartTime'] = requestParameters.dateCriteriaExpectedArrivalStartTime;
        }

        if (requestParameters.depositDueDateEnd !== undefined) {
            queryParameters['depositDueDateEnd'] = (requestParameters.depositDueDateEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.depositDueDateStart !== undefined) {
            queryParameters['depositDueDateStart'] = (requestParameters.depositDueDateStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.expectedReturnEndTime !== undefined) {
            queryParameters['expectedReturnEndTime'] = requestParameters.expectedReturnEndTime;
        }

        if (requestParameters.expectedReturnStartTime !== undefined) {
            queryParameters['expectedReturnStartTime'] = requestParameters.expectedReturnStartTime;
        }

        if (requestParameters.membershipNumber !== undefined) {
            queryParameters['membershipNumber'] = requestParameters.membershipNumber;
        }

        if (requestParameters.anyVIPStatus !== undefined) {
            queryParameters['anyVIPStatus'] = requestParameters.anyVIPStatus;
        }

        if (requestParameters.vipStatusCodes) {
            queryParameters['vipStatusCodes'] = requestParameters.vipStatusCodes;
        }

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.lastName !== undefined) {
            queryParameters['lastName'] = requestParameters.lastName;
        }

        if (requestParameters.firstName !== undefined) {
            queryParameters['firstName'] = requestParameters.firstName;
        }

        if (requestParameters.blockCode !== undefined) {
            queryParameters['blockCode'] = requestParameters.blockCode;
        }

        if (requestParameters.companyName !== undefined) {
            queryParameters['companyName'] = requestParameters.companyName;
        }

        if (requestParameters.travelAgentName !== undefined) {
            queryParameters['travelAgentName'] = requestParameters.travelAgentName;
        }

        if (requestParameters.creditCardNumber !== undefined) {
            queryParameters['creditCardNumber'] = requestParameters.creditCardNumber;
        }

        if (requestParameters.customReference !== undefined) {
            queryParameters['customReference'] = requestParameters.customReference;
        }

        if (requestParameters.externalReference !== undefined) {
            queryParameters['externalReference'] = requestParameters.externalReference;
        }

        if (requestParameters.attributeName) {
            queryParameters['attributeName'] = requestParameters.attributeName;
        }

        if (requestParameters.orderType) {
            queryParameters['orderType'] = requestParameters.orderType;
        }

        if (requestParameters.expectedArrivalEndTime !== undefined) {
            queryParameters['expectedArrivalEndTime'] = (requestParameters.expectedArrivalEndTime as any).toISOString().substr(0,10);
        }

        if (requestParameters.expectedArrivalStartTime !== undefined) {
            queryParameters['expectedArrivalStartTime'] = (requestParameters.expectedArrivalStartTime as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomTypes) {
            queryParameters['roomTypes'] = requestParameters.roomTypes;
        }

        if (requestParameters.roomStatuses) {
            queryParameters['roomStatuses'] = requestParameters.roomStatuses;
        }

        if (requestParameters.paymentMethod) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }

        if (requestParameters.indicator) {
            queryParameters['indicator'] = requestParameters.indicator;
        }

        if (requestParameters.fetchSummaryInstructions) {
            queryParameters['fetchSummaryInstructions'] = requestParameters.fetchSummaryInstructions;
        }

        if (requestParameters.allowedAction) {
            queryParameters['allowedAction'] = requestParameters.allowedAction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservationSummaries`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShortReservationFromJSON(jsonValue));
    }

    /**
     * Use this API to return reservation summaries for a specific property based on search criteria such as reservationId, blockId, arrivalStart, membershipNumber, roomId, etc.<p><strong>OperationId:</strong>getReservationSummaries</p>
     * Get hotel reservation summaries
     */
    async getReservationSummaries(requestParameters: GetReservationSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShortReservation> {
        const response = await this.getReservationSummariesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to fetch the reservations for billing. <p><strong>OperationId:</strong>getReservationsForBilling</p>
     * Get Reservations for billing
     */
    async getReservationsForBillingRaw(requestParameters: GetReservationsForBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationsInfo>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.searchType !== undefined) {
            queryParameters['searchType'] = requestParameters.searchType;
        }

        if (requestParameters.multipleHotelsSearchList) {
            queryParameters['multipleHotelsSearchList'] = requestParameters.multipleHotelsSearchList;
        }

        if (requestParameters.superSearch !== undefined) {
            queryParameters['superSearch'] = requestParameters.superSearch;
        }

        if (requestParameters.reservationId) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.reservationIdContext) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }

        if (requestParameters.reservationIdType) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        if (requestParameters.nights !== undefined) {
            queryParameters['nights'] = requestParameters.nights;
        }

        if (requestParameters.arrivalEnd !== undefined) {
            queryParameters['arrivalEnd'] = (requestParameters.arrivalEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.arrivalStart !== undefined) {
            queryParameters['arrivalStart'] = (requestParameters.arrivalStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.departureEnd !== undefined) {
            queryParameters['departureEnd'] = (requestParameters.departureEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.departureStart !== undefined) {
            queryParameters['departureStart'] = (requestParameters.departureStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.reservationProfileType) {
            queryParameters['reservationProfileType'] = requestParameters.reservationProfileType;
        }

        if (requestParameters.attachedProfileName) {
            queryParameters['attachedProfileName'] = requestParameters.attachedProfileName;
        }

        if (requestParameters.attachedProfileId) {
            queryParameters['attachedProfileId'] = requestParameters.attachedProfileId;
        }

        if (requestParameters.attachedProfileIdContext) {
            queryParameters['attachedProfileIdContext'] = requestParameters.attachedProfileIdContext;
        }

        if (requestParameters.attachedProfileIdType) {
            queryParameters['attachedProfileIdType'] = requestParameters.attachedProfileIdType;
        }

        if (requestParameters.resGuestId !== undefined) {
            queryParameters['resGuestId'] = requestParameters.resGuestId;
        }

        if (requestParameters.resGuestIdContext !== undefined) {
            queryParameters['resGuestIdContext'] = requestParameters.resGuestIdContext;
        }

        if (requestParameters.resGuestIdType !== undefined) {
            queryParameters['resGuestIdType'] = requestParameters.resGuestIdType;
        }

        if (requestParameters.membershipId !== undefined) {
            queryParameters['membershipId'] = requestParameters.membershipId;
        }

        if (requestParameters.membershipLevelCodes) {
            queryParameters['membershipLevelCodes'] = requestParameters.membershipLevelCodes;
        }

        if (requestParameters.membershipTypeCodes) {
            queryParameters['membershipTypeCodes'] = requestParameters.membershipTypeCodes;
        }

        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.cityName !== undefined) {
            queryParameters['cityName'] = requestParameters.cityName;
        }

        if (requestParameters.postalCode !== undefined) {
            queryParameters['postalCode'] = requestParameters.postalCode;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.countryCode !== undefined) {
            queryParameters['countryCode'] = requestParameters.countryCode;
        }

        if (requestParameters.streetAddress !== undefined) {
            queryParameters['streetAddress'] = requestParameters.streetAddress;
        }

        if (requestParameters.bookingChannelCode !== undefined) {
            queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
        }

        if (requestParameters.blockHotelId !== undefined) {
            queryParameters['blockHotelId'] = requestParameters.blockHotelId;
        }

        if (requestParameters.blockId) {
            queryParameters['blockId'] = requestParameters.blockId;
        }

        if (requestParameters.blockIdContext) {
            queryParameters['blockIdContext'] = requestParameters.blockIdContext;
        }

        if (requestParameters.blockIdType) {
            queryParameters['blockIdType'] = requestParameters.blockIdType;
        }

        if (requestParameters.recordLocator !== undefined) {
            queryParameters['recordLocator'] = requestParameters.recordLocator;
        }

        if (requestParameters.orderByAttributeName) {
            queryParameters['orderByAttributeName'] = requestParameters.orderByAttributeName;
        }

        if (requestParameters.orderType) {
            queryParameters['orderType'] = requestParameters.orderType;
        }

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.excludeNoPost !== undefined) {
            queryParameters['excludeNoPost'] = requestParameters.excludeNoPost;
        }

        if (requestParameters.excludePMRooms !== undefined) {
            queryParameters['excludePMRooms'] = requestParameters.excludePMRooms;
        }

        if (requestParameters.hasOpenFolio !== undefined) {
            queryParameters['hasOpenFolio'] = requestParameters.hasOpenFolio;
        }

        if (requestParameters.excludedReservationIds) {
            queryParameters['excludedReservationIds'] = requestParameters.excludedReservationIds;
        }

        if (requestParameters.excludedReservationIdsContext) {
            queryParameters['excludedReservationIdsContext'] = requestParameters.excludedReservationIdsContext;
        }

        if (requestParameters.excludedReservationIdsType) {
            queryParameters['excludedReservationIdsType'] = requestParameters.excludedReservationIdsType;
        }

        if (requestParameters.advanceCheckedIn !== undefined) {
            queryParameters['advanceCheckedIn'] = requestParameters.advanceCheckedIn;
        }

        if (requestParameters.searchTypesSearchType) {
            queryParameters['searchTypesSearchType'] = requestParameters.searchTypesSearchType;
        }

        if (requestParameters.reservationStatus) {
            queryParameters['reservationStatus'] = requestParameters.reservationStatus;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/billingReservations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationsInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to fetch the reservations for billing. <p><strong>OperationId:</strong>getReservationsForBilling</p>
     * Get Reservations for billing
     */
    async getReservationsForBilling(requestParameters: GetReservationsForBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationsInfo> {
        const response = await this.getReservationsForBillingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch all current reservations that are Queued Reservations.  These reservations are guests that have arrived at the hotel, but their room isn\'t ready, so they\'re sitting in a queue.  <p><strong>OperationId:</strong>getReservationsInQueue</p>
     * Get the reservation in queue
     */
    async getReservationsInQueueRaw(requestParameters: GetReservationsInQueueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationsInQueue>> {
        const queryParameters: any = {};

        if (requestParameters.roomClassCodes) {
            queryParameters['roomClassCodes'] = requestParameters.roomClassCodes;
        }

        if (requestParameters.roomTypeCodes) {
            queryParameters['roomTypeCodes'] = requestParameters.roomTypeCodes;
        }

        if (requestParameters.roomNumberWildCard !== undefined) {
            queryParameters['roomNumberWildCard'] = requestParameters.roomNumberWildCard;
        }

        if (requestParameters.guestNameWildCard !== undefined) {
            queryParameters['guestNameWildCard'] = requestParameters.guestNameWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/queuedReservations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationsInQueueFromJSON(jsonValue));
    }

    /**
     * Fetch all current reservations that are Queued Reservations.  These reservations are guests that have arrived at the hotel, but their room isn\'t ready, so they\'re sitting in a queue.  <p><strong>OperationId:</strong>getReservationsInQueue</p>
     * Get the reservation in queue
     */
    async getReservationsInQueue(requestParameters: GetReservationsInQueueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationsInQueue> {
        const response = await this.getReservationsInQueueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is used to get reservations for batch CC Authorization. <p><strong>OperationId:</strong>getResvForBatchCCAuth</p>
     * Get resrvation for batch CCAuth
     */
    async getResvForBatchCCAuthRaw(requestParameters: GetResvForBatchCCAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResvForBatchCCAut>> {
        const queryParameters: any = {};

        if (requestParameters.guestName !== undefined) {
            queryParameters['guestName'] = requestParameters.guestName;
        }

        if (requestParameters.room !== undefined) {
            queryParameters['room'] = requestParameters.room;
        }

        if (requestParameters.cardType) {
            queryParameters['cardType'] = requestParameters.cardType;
        }

        if (requestParameters.userDefinedCardType) {
            queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/authorizationReservations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResvForBatchCCAutFromJSON(jsonValue));
    }

    /**
     * This API is used to get reservations for batch CC Authorization. <p><strong>OperationId:</strong>getResvForBatchCCAuth</p>
     * Get resrvation for batch CCAuth
     */
    async getResvForBatchCCAuth(requestParameters: GetResvForBatchCCAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResvForBatchCCAut> {
        const response = await this.getResvForBatchCCAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This Api will getch the room interface status. <p><strong>OperationId:</strong>getRoomInterfaceStatus</p>
     * Get room interface status
     */
    async getRoomInterfaceStatusRaw(requestParameters: GetRoomInterfaceStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomInterfaceStatus>> {
        const queryParameters: any = {};

        if (requestParameters.interfaceName !== undefined) {
            queryParameters['interfaceName'] = requestParameters.interfaceName;
        }

        if (requestParameters.interfaceType !== undefined) {
            queryParameters['interfaceType'] = requestParameters.interfaceType;
        }

        if (requestParameters.logo !== undefined) {
            queryParameters['logo'] = requestParameters.logo;
        }

        if (requestParameters.machineName !== undefined) {
            queryParameters['machineName'] = requestParameters.machineName;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.activeFlag !== undefined) {
            queryParameters['activeFlag'] = requestParameters.activeFlag;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.blockId !== undefined) {
            queryParameters['blockId'] = requestParameters.blockId;
        }

        if (requestParameters.blockIdContext !== undefined) {
            queryParameters['blockIdContext'] = requestParameters.blockIdContext;
        }

        if (requestParameters.blockIdType !== undefined) {
            queryParameters['blockIdType'] = requestParameters.blockIdType;
        }

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.lastName !== undefined) {
            queryParameters['lastName'] = requestParameters.lastName;
        }

        if (requestParameters.firstName !== undefined) {
            queryParameters['firstName'] = requestParameters.firstName;
        }

        if (requestParameters.reservationIds) {
            queryParameters['reservationIds'] = requestParameters.reservationIds;
        }

        if (requestParameters.reservationIdsContext) {
            queryParameters['reservationIdsContext'] = requestParameters.reservationIdsContext;
        }

        if (requestParameters.reservationIdsType) {
            queryParameters['reservationIdsType'] = requestParameters.reservationIdsType;
        }

        if (requestParameters.arrivalEnd !== undefined) {
            queryParameters['arrivalEnd'] = (requestParameters.arrivalEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.arrivalStart !== undefined) {
            queryParameters['arrivalStart'] = (requestParameters.arrivalStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.expectedArrivalEndTime !== undefined) {
            queryParameters['expectedArrivalEndTime'] = requestParameters.expectedArrivalEndTime;
        }

        if (requestParameters.expectedArrivalStartTime !== undefined) {
            queryParameters['expectedArrivalStartTime'] = requestParameters.expectedArrivalStartTime;
        }

        if (requestParameters.specialCodes) {
            queryParameters['specialCodes'] = requestParameters.specialCodes;
        }

        if (requestParameters.floorCodes) {
            queryParameters['floorCodes'] = requestParameters.floorCodes;
        }

        if (requestParameters.roomFeatureCodes) {
            queryParameters['roomFeatureCodes'] = requestParameters.roomFeatureCodes;
        }

        if (requestParameters.roomClassCodes) {
            queryParameters['roomClassCodes'] = requestParameters.roomClassCodes;
        }

        if (requestParameters.roomStatus) {
            queryParameters['roomStatus'] = requestParameters.roomStatus;
        }

        if (requestParameters.guaranteeCode !== undefined) {
            queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
        }

        if (requestParameters.reservationStatus) {
            queryParameters['reservationStatus'] = requestParameters.reservationStatus;
        }

        if (requestParameters.includeLinkedReservations !== undefined) {
            queryParameters['includeLinkedReservations'] = requestParameters.includeLinkedReservations;
        }

        if (requestParameters.includeBlocks !== undefined) {
            queryParameters['includeBlocks'] = requestParameters.includeBlocks;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderType !== undefined) {
            queryParameters['orderType'] = requestParameters.orderType;
        }

        if (requestParameters.expectedReturnEndTime !== undefined) {
            queryParameters['expectedReturnEndTime'] = requestParameters.expectedReturnEndTime;
        }

        if (requestParameters.expectedReturnStartTime !== undefined) {
            queryParameters['expectedReturnStartTime'] = requestParameters.expectedReturnStartTime;
        }

        if (requestParameters.advanceCheckedIn !== undefined) {
            queryParameters['advanceCheckedIn'] = requestParameters.advanceCheckedIn;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/roomStatuses`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomInterfaceStatusFromJSON(jsonValue));
    }

    /**
     * This Api will getch the room interface status. <p><strong>OperationId:</strong>getRoomInterfaceStatus</p>
     * Get room interface status
     */
    async getRoomInterfaceStatus(requestParameters: GetRoomInterfaceStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomInterfaceStatus> {
        const response = await this.getRoomInterfaceStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use thie API to get key encoder interface configuration details. <p><strong>OperationId:</strong>getRoomKeyInterfaceDetails</p>
     * Get key encoder interface configuration details
     */
    async getRoomKeyInterfaceDetailsRaw(requestParameters: GetRoomKeyInterfaceDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomKeyInterfaceDetails>> {
        const queryParameters: any = {};

        if (requestParameters.roomNumbersCode) {
            queryParameters['roomNumbersCode'] = requestParameters.roomNumbersCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/keyInterfaces`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomKeyInterfaceDetailsFromJSON(jsonValue));
    }

    /**
     * You can use thie API to get key encoder interface configuration details. <p><strong>OperationId:</strong>getRoomKeyInterfaceDetails</p>
     * Get key encoder interface configuration details
     */
    async getRoomKeyInterfaceDetails(requestParameters: GetRoomKeyInterfaceDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomKeyInterfaceDetails> {
        const response = await this.getRoomKeyInterfaceDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to retrieve any existing room key information for a reservation. <p><strong>OperationId:</strong>getRoomKeys</p>
     * Fetch the room keys
     */
    async getRoomKeysRaw(requestParameters: GetRoomKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomKeyInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/roomKeys`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomKeyInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to retrieve any existing room key information for a reservation. <p><strong>OperationId:</strong>getRoomKeys</p>
     * Fetch the room keys
     */
    async getRoomKeys(requestParameters: GetRoomKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomKeyInfo> {
        const response = await this.getRoomKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will return the history of room change/room moves for a specified reservation. <p><strong>OperationId:</strong>getRoomMoveHistory</p>
     * Get room move history of a reservation
     */
    async getRoomMoveHistoryRaw(requestParameters: GetRoomMoveHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomMoveHistory>> {
        const queryParameters: any = {};

        if (requestParameters.reservationIdContext !== undefined) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }

        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/roomMoveHistory`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomMoveHistoryFromJSON(jsonValue));
    }

    /**
     * This API will return the history of room change/room moves for a specified reservation. <p><strong>OperationId:</strong>getRoomMoveHistory</p>
     * Get room move history of a reservation
     */
    async getRoomMoveHistory(requestParameters: GetRoomMoveHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomMoveHistory> {
        const response = await this.getRoomMoveHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve any service requests that exist on a reservation. <p><strong>OperationId:</strong>getServiceRequests</p>
     * Get Service Requests
     */
    async getServiceRequestsRaw(requestParameters: GetServiceRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceRequestsInfo>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.priorityCodes) {
            queryParameters['priorityCodes'] = requestParameters.priorityCodes;
        }

        if (requestParameters.departmentCodes) {
            queryParameters['departmentCodes'] = requestParameters.departmentCodes;
        }

        if (requestParameters.reservationId !== undefined) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.reservationIdContext !== undefined) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }

        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        if (requestParameters.profileId !== undefined) {
            queryParameters['profileId'] = requestParameters.profileId;
        }

        if (requestParameters.profileIdContext !== undefined) {
            queryParameters['profileIdContext'] = requestParameters.profileIdContext;
        }

        if (requestParameters.profileIdType !== undefined) {
            queryParameters['profileIdType'] = requestParameters.profileIdType;
        }

        if (requestParameters.room !== undefined) {
            queryParameters['room'] = requestParameters.room;
        }

        if (requestParameters.creationEndDate !== undefined) {
            queryParameters['creationEndDate'] = (requestParameters.creationEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.creationStartDate !== undefined) {
            queryParameters['creationStartDate'] = (requestParameters.creationStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.closedEndDate !== undefined) {
            queryParameters['closedEndDate'] = (requestParameters.closedEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.closedStartDate !== undefined) {
            queryParameters['closedStartDate'] = (requestParameters.closedStartDate as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/serviceRequests`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceRequestsInfoFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve any service requests that exist on a reservation. <p><strong>OperationId:</strong>getServiceRequests</p>
     * Get Service Requests
     */
    async getServiceRequests(requestParameters: GetServiceRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceRequestsInfo> {
        const response = await this.getServiceRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to fetch the suggested rooms. <p><strong>OperationId:</strong>getSuggestedRooms</p>
     * Get Suggested Rooms
     */
    async getSuggestedRoomsRaw(requestParameters: GetSuggestedRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuggestedRooms>> {
        const queryParameters: any = {};

        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.nights !== undefined) {
            queryParameters['nights'] = requestParameters.nights;
        }

        if (requestParameters.suggestedRoomsInstructions) {
            queryParameters['suggestedRoomsInstructions'] = requestParameters.suggestedRoomsInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/suggestedRooms`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuggestedRoomsFromJSON(jsonValue));
    }

    /**
     * You can use this API to fetch the suggested rooms. <p><strong>OperationId:</strong>getSuggestedRooms</p>
     * Get Suggested Rooms
     */
    async getSuggestedRooms(requestParameters: GetSuggestedRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuggestedRooms> {
        const response = await this.getSuggestedRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use thisAPI to get existing wake up call on an in-house reservation. <p><strong>OperationId:</strong>getWakeUpCall</p>
     * Get Wake Up Call
     */
    async getWakeUpCallRaw(requestParameters: GetWakeUpCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WakeUpCalls>> {
        const queryParameters: any = {};

        if (requestParameters.fetchCancelled !== undefined) {
            queryParameters['fetchCancelled'] = requestParameters.fetchCancelled;
        }

        if (requestParameters.fetchCompleted !== undefined) {
            queryParameters['fetchCompleted'] = requestParameters.fetchCompleted;
        }

        if (requestParameters.fetchNoAnswer !== undefined) {
            queryParameters['fetchNoAnswer'] = requestParameters.fetchNoAnswer;
        }

        if (requestParameters.fetchPending !== undefined) {
            queryParameters['fetchPending'] = requestParameters.fetchPending;
        }

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.reservationIdContext !== undefined) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }

        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        if (requestParameters.beginDate !== undefined) {
            queryParameters['beginDate'] = (requestParameters.beginDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.beginTime !== undefined) {
            queryParameters['beginTime'] = requestParameters.beginTime;
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['endTime'] = requestParameters.endTime;
        }

        if (requestParameters.room) {
            queryParameters['room'] = requestParameters.room;
        }

        if (requestParameters.blockId !== undefined) {
            queryParameters['blockId'] = requestParameters.blockId;
        }

        if (requestParameters.guestName !== undefined) {
            queryParameters['guestName'] = requestParameters.guestName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/wakeUpCalls`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WakeUpCallsFromJSON(jsonValue));
    }

    /**
     * Use thisAPI to get existing wake up call on an in-house reservation. <p><strong>OperationId:</strong>getWakeUpCall</p>
     * Get Wake Up Call
     */
    async getWakeUpCall(requestParameters: GetWakeUpCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WakeUpCalls> {
        const response = await this.getWakeUpCallRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to change rooms for an in-house guest. <p><strong>OperationId:</strong>moveInHouseGuest</p>
     * Move in-house guest
     */
    async moveInHouseGuestRaw(requestParameters: MoveInHouseGuestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MovedInHouseGuest>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/rooms/{roomId}/roomMoves`.replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MoveInHouseGuestRequestToJSON(requestParameters.moveInHouseGuest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MovedInHouseGuestFromJSON(jsonValue));
    }

    /**
     * This API will allow you to change rooms for an in-house guest. <p><strong>OperationId:</strong>moveInHouseGuest</p>
     * Move in-house guest
     */
    async moveInHouseGuest(requestParameters: MoveInHouseGuestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MovedInHouseGuest> {
        const response = await this.moveInHouseGuestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to place Rooms On Hold. <p><strong>OperationId:</strong>placeRoomsOnHold</p>
     * Place Rooms On Hold
     */
    async placeRoomsOnHoldRaw(requestParameters: PlaceRoomsOnHoldOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/onHold`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlaceRoomsOnHoldRequestToJSON(requestParameters.holdRooms),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to place Rooms On Hold. <p><strong>OperationId:</strong>placeRoomsOnHold</p>
     * Place Rooms On Hold
     */
    async placeRoomsOnHold(requestParameters: PlaceRoomsOnHoldOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.placeRoomsOnHoldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * At times, when guests arrive to the property prior to a room being ready, you can flag a reservation as Advance Checked In for arrivals due in on the current business date. This enables guests to post charges to their reservation folio prior to check in, and helps the rooms management team prioritize room cleaning and assignment. Individual reservations (including Walk In reservations, Pre Registered reservations, and reservations that are in Queue) and group block reservations can be Advance Checked In. <p><strong>OperationId:</strong>postAdvanceCheckIn</p>
     * Advance checkin a reservation
     */
    async postAdvanceCheckInRaw(requestParameters: PostAdvanceCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/advanceCheckIns`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAdvanceCheckInRequestToJSON(requestParameters.advanceCheckInReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * At times, when guests arrive to the property prior to a room being ready, you can flag a reservation as Advance Checked In for arrivals due in on the current business date. This enables guests to post charges to their reservation folio prior to check in, and helps the rooms management team prioritize room cleaning and assignment. Individual reservations (including Walk In reservations, Pre Registered reservations, and reservations that are in Queue) and group block reservations can be Advance Checked In. <p><strong>OperationId:</strong>postAdvanceCheckIn</p>
     * Advance checkin a reservation
     */
    async postAdvanceCheckIn(requestParameters: PostAdvanceCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAdvanceCheckInRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to check in a guest reservation.  The reservation needs to be \'due in\' status.  The API also provides an option to select an available room. <p><strong>OperationId:</strong>postCheckIn</p>
     * Checks in a guest
     */
    async postCheckInRaw(requestParameters: PostCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckedinReservation>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/checkIns`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCheckInRequestToJSON(requestParameters.reservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckedinReservationFromJSON(jsonValue));
    }

    /**
     * Use this API to check in a guest reservation.  The reservation needs to be \'due in\' status.  The API also provides an option to select an available room. <p><strong>OperationId:</strong>postCheckIn</p>
     * Checks in a guest
     */
    async postCheckIn(requestParameters: PostCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckedinReservation> {
        const response = await this.postCheckInRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a Daily Docket. <p><strong>OperationId:</strong>postDailyDocket</p>
     * Create Daily Docket 
     */
    async postDailyDocketRaw(requestParameters: PostDailyDocketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/dailyDocket`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutDailyDocketRequestToJSON(requestParameters.dailyDocket),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a Daily Docket. <p><strong>OperationId:</strong>postDailyDocket</p>
     * Create Daily Docket 
     */
    async postDailyDocket(requestParameters: PostDailyDocketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postDailyDocketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to perform a mass advance checkin for reservations. <p><strong>OperationId:</strong>postMassAdvanceCheckIn</p>
     * Mass Advance Check in Reservations
     */
    async postMassAdvanceCheckInRaw(requestParameters: PostMassAdvanceCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/massAdvanceCheckIns`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostMassAdvanceCheckInRequestToJSON(requestParameters.massAdvanceCheckInReservations),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to perform a mass advance checkin for reservations. <p><strong>OperationId:</strong>postMassAdvanceCheckIn</p>
     * Mass Advance Check in Reservations
     */
    async postMassAdvanceCheckIn(requestParameters: PostMassAdvanceCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMassAdvanceCheckInRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to perform a mass Checkin for reservations. <p><strong>OperationId:</strong>postMassCheckIn</p>
     * Mass checkin reservations
     */
    async postMassCheckInRaw(requestParameters: PostMassCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/massCheckIns`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostMassCheckInRequestToJSON(requestParameters.massCheckInReservations),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to perform a mass Checkin for reservations. <p><strong>OperationId:</strong>postMassCheckIn</p>
     * Mass checkin reservations
     */
    async postMassCheckIn(requestParameters: PostMassCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMassCheckInRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to assign a room to a reservation in reserved status. Override instructions are available to assign a room despite warnings returned in the response message. <p><strong>OperationId:</strong>postRoomAssignment</p>
     * Assign a Room to a Reservation
     */
    async postRoomAssignmentRaw(requestParameters: PostRoomAssignmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssignedRoom>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/roomAssignments`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRoomAssignmentRequestToJSON(requestParameters.room),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssignedRoomFromJSON(jsonValue));
    }

    /**
     * This API will allow you to assign a room to a reservation in reserved status. Override instructions are available to assign a room despite warnings returned in the response message. <p><strong>OperationId:</strong>postRoomAssignment</p>
     * Assign a Room to a Reservation
     */
    async postRoomAssignment(requestParameters: PostRoomAssignmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssignedRoom> {
        const response = await this.postRoomAssignmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create a room key request for a reservation to the active Door Locking System Property Interface. <p><strong>OperationId:</strong>postRoomKey</p>
     * Requests room key(s)
     */
    async postRoomKeyRaw(requestParameters: PostRoomKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomKeyDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/roomKeys`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRoomKeyRequestToJSON(requestParameters.roomKey),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomKeyDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to create a room key request for a reservation to the active Door Locking System Property Interface. <p><strong>OperationId:</strong>postRoomKey</p>
     * Requests room key(s)
     */
    async postRoomKey(requestParameters: PostRoomKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomKeyDetails> {
        const response = await this.postRoomKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Service Request functionality provides the ability to define, track and report Service Requests on a reservation.  They go through a preset flow including creating the request, completing it and then following up on the resolution with the guest. <p><strong>OperationId:</strong>postServiceRequests</p>
     * Create Service Requests
     */
    async postServiceRequestsRaw(requestParameters: PostServiceRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/serviceRequests`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutServiceRequestsRequestToJSON(requestParameters.serviceRequestsInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Service Request functionality provides the ability to define, track and report Service Requests on a reservation.  They go through a preset flow including creating the request, completing it and then following up on the resolution with the guest. <p><strong>OperationId:</strong>postServiceRequests</p>
     * Create Service Requests
     */
    async postServiceRequests(requestParameters: PostServiceRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postServiceRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can set, view, and cancel wake up call for individual reservations. The reservation must be in-house (checked-in) status to set a wake up call. <p><strong>OperationId:</strong>postWakeUpCall</p>
     * Create Wake Up Call
     */
    async postWakeUpCallRaw(requestParameters: PostWakeUpCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/wakeUpCalls`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutWakeUpCallRequestToJSON(requestParameters.wakeUpCalls),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can set, view, and cancel wake up call for individual reservations. The reservation must be in-house (checked-in) status to set a wake up call. <p><strong>OperationId:</strong>postWakeUpCall</p>
     * Create Wake Up Call
     */
    async postWakeUpCall(requestParameters: PostWakeUpCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postWakeUpCallRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is used to process batch CC Authorization. <p><strong>OperationId:</strong>processBatchCCAuth</p>
     * Process batch CC Auth
     */
    async processBatchCCAuthRaw(requestParameters: ProcessBatchCCAuthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BatchCCAuthToProcess>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/batchReservationAuthorizations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessBatchCCAuthRequestToJSON(requestParameters.batchCCAuth),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BatchCCAuthToProcessFromJSON(jsonValue));
    }

    /**
     * This API is used to process batch CC Authorization. <p><strong>OperationId:</strong>processBatchCCAuth</p>
     * Process batch CC Auth
     */
    async processBatchCCAuth(requestParameters: ProcessBatchCCAuthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BatchCCAuthToProcess> {
        const response = await this.processBatchCCAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to change Daily Docket. <p><strong>OperationId:</strong>putDailyDocket</p>
     * Change Daily Docket 
     */
    async putDailyDocketRaw(requestParameters: PutDailyDocketOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/dailyDocket`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutDailyDocketRequestToJSON(requestParameters.dailyDocket),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to change Daily Docket. <p><strong>OperationId:</strong>putDailyDocket</p>
     * Change Daily Docket 
     */
    async putDailyDocket(requestParameters: PutDailyDocketOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putDailyDocketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API can be used to change the resrevations Queue Priority. <p><strong>OperationId:</strong>putReservationQueuePriority</p>
     * Change the reservation queue priority
     */
    async putReservationQueuePriorityRaw(requestParameters: PutReservationQueuePriorityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationQueuePriority>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/priority`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutReservationQueuePriorityRequestToJSON(requestParameters.reservationQueuePriorityNumber),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationQueuePriorityFromJSON(jsonValue));
    }

    /**
     * This API can be used to change the resrevations Queue Priority. <p><strong>OperationId:</strong>putReservationQueuePriority</p>
     * Change the reservation queue priority
     */
    async putReservationQueuePriority(requestParameters: PutReservationQueuePriorityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationQueuePriority> {
        const response = await this.putReservationQueuePriorityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change room interface status. <p><strong>OperationId:</strong>putRoomInterfaceStatus</p>
     * Change room interface status
     */
    async putRoomInterfaceStatusRaw(requestParameters: PutRoomInterfaceStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/roomStatuses`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutRoomInterfaceStatusRequestToJSON(requestParameters.reservationInterface),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change room interface status. <p><strong>OperationId:</strong>putRoomInterfaceStatus</p>
     * Change room interface status
     */
    async putRoomInterfaceStatus(requestParameters: PutRoomInterfaceStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRoomInterfaceStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * When MUTIPLE_GUEST_KEY is active this methods can be used to update information on the room keys such as balance amount and keyOptions. reservationId and hotelId are required path parameters. The body parameter roomKeys includes information about the encoder, room, key type, key validity, key options  and   guests information for multiple keys
     * Update room keys.
     */
    async putRoomKeysRaw(requestParameters: PutRoomKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateRoomKeys>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/roomKeys`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoomKeyMultipleGuestsToJSON(requestParameters.roomKeys),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateRoomKeysFromJSON(jsonValue));
    }

    /**
     * When MUTIPLE_GUEST_KEY is active this methods can be used to update information on the room keys such as balance amount and keyOptions. reservationId and hotelId are required path parameters. The body parameter roomKeys includes information about the encoder, room, key type, key validity, key options  and   guests information for multiple keys
     * Update room keys.
     */
    async putRoomKeys(requestParameters: PutRoomKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateRoomKeys> {
        const response = await this.putRoomKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to modify any service requests that exist on a reservation. <p><strong>OperationId:</strong>putServiceRequests</p>
     * Change Service Requests
     */
    async putServiceRequestsRaw(requestParameters: PutServiceRequestsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/serviceRequests`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutServiceRequestsRequestToJSON(requestParameters.serviceRequestsInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to modify any service requests that exist on a reservation. <p><strong>OperationId:</strong>putServiceRequests</p>
     * Change Service Requests
     */
    async putServiceRequests(requestParameters: PutServiceRequestsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putServiceRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing wake up call.  Wake up call can only be added to in-house reservations. <p><strong>OperationId:</strong>putWakeUpCall</p>
     * Change Wake Up Call
     */
    async putWakeUpCallRaw(requestParameters: PutWakeUpCallOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedWakeUpCalls>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/wakeUpCalls`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutWakeUpCallRequestToJSON(requestParameters.wakeUpCalls),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedWakeUpCallsFromJSON(jsonValue));
    }

    /**
     * Update an existing wake up call.  Wake up call can only be added to in-house reservations. <p><strong>OperationId:</strong>putWakeUpCall</p>
     * Change Wake Up Call
     */
    async putWakeUpCall(requestParameters: PutWakeUpCallOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedWakeUpCalls> {
        const response = await this.putWakeUpCallRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API can be used to read the Room Key. <p><strong>OperationId:</strong>readRoomKey</p>
     * Read room key
     */
    async readRoomKeyRaw(requestParameters: ReadRoomKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomKeyStatus>> {
        const queryParameters: any = {};

        if (requestParameters.encoderTerminal !== undefined) {
            queryParameters['encoderTerminal'] = requestParameters.encoderTerminal;
        }

        if (requestParameters.encoderId !== undefined) {
            queryParameters['encoderId'] = requestParameters.encoderId;
        }

        if (requestParameters.encoderIdContext !== undefined) {
            queryParameters['encoderIdContext'] = requestParameters.encoderIdContext;
        }

        if (requestParameters.encoderIdType !== undefined) {
            queryParameters['encoderIdType'] = requestParameters.encoderIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roomKeysDetails`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomKeyStatusFromJSON(jsonValue));
    }

    /**
     * This API can be used to read the Room Key. <p><strong>OperationId:</strong>readRoomKey</p>
     * Read room key
     */
    async readRoomKey(requestParameters: ReadRoomKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomKeyStatus> {
        const response = await this.readRoomKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to release Rooms On Hold. <p><strong>OperationId:</strong>releaseRoomsOnHold</p>
     * Release Rooms On Hold
     */
    async releaseRoomsOnHoldRaw(requestParameters: ReleaseRoomsOnHoldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/onHold/release`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlaceRoomsOnHoldRequestToJSON(requestParameters.holdRooms),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to release Rooms On Hold. <p><strong>OperationId:</strong>releaseRoomsOnHold</p>
     * Release Rooms On Hold
     */
    async releaseRoomsOnHold(requestParameters: ReleaseRoomsOnHoldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.releaseRoomsOnHoldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to quickly shift rooms for two reservations. <p><strong>OperationId:</strong>shiftRooms</p>
     * Operation for Shift Rooms between two reservations
     */
    async shiftRoomsRaw(requestParameters: ShiftRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/sourceReservations/{sourceReservationId}/targetReservations/{targetReservationId}/shiftRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"sourceReservationId"}}`, encodeURIComponent(String(requestParameters.sourceReservationId))).replace(`{${"targetReservationId"}}`, encodeURIComponent(String(requestParameters.targetReservationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ShiftRoomsRequestToJSON(requestParameters.shiftRooms),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will allow you to quickly shift rooms for two reservations. <p><strong>OperationId:</strong>shiftRooms</p>
     * Operation for Shift Rooms between two reservations
     */
    async shiftRooms(requestParameters: ShiftRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.shiftRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to quickly swap rooms for two reservations. <p><strong>OperationId:</strong>swapRooms</p>
     * Operation for Swap/Shift Rooms between two reservations
     */
    async swapRoomsRaw(requestParameters: SwapRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/sourceReservations/{sourceReservationId}/targetReservations/{targetReservationId}/swapRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"sourceReservationId"}}`, encodeURIComponent(String(requestParameters.sourceReservationId))).replace(`{${"targetReservationId"}}`, encodeURIComponent(String(requestParameters.targetReservationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SwapRoomsRequestToJSON(requestParameters.swapRooms),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will allow you to quickly swap rooms for two reservations. <p><strong>OperationId:</strong>swapRooms</p>
     * Operation for Swap/Shift Rooms between two reservations
     */
    async swapRooms(requestParameters: SwapRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.swapRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to verify checkin reservations. <p><strong>OperationId:</strong>verifyCheckinReservation</p>
     * Verify checkin reservation
     */
    async verifyCheckinReservationRaw(requestParameters: VerifyCheckinReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerifiedCheckinReservation>> {
        const queryParameters: any = {};

        if (requestParameters.verifyCheckinInstructions) {
            queryParameters['verifyCheckinInstructions'] = requestParameters.verifyCheckinInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/verifyCheckIns`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VerifiedCheckinReservationFromJSON(jsonValue));
    }

    /**
     * Use this API to verify checkin reservations. <p><strong>OperationId:</strong>verifyCheckinReservation</p>
     * Verify checkin reservation
     */
    async verifyCheckinReservation(requestParameters: VerifyCheckinReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerifiedCheckinReservation> {
        const response = await this.verifyCheckinReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AutoUnAssignRoomHotelRoomStatusEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
} as const;
export type AutoUnAssignRoomHotelRoomStatusEnum = typeof AutoUnAssignRoomHotelRoomStatusEnum[keyof typeof AutoUnAssignRoomHotelRoomStatusEnum];
/**
 * @export
 */
export const AutoUnAssignRoomHotelFORoomStatusEnum = {
    Vacant: 'Vacant',
    Occupied: 'Occupied'
} as const;
export type AutoUnAssignRoomHotelFORoomStatusEnum = typeof AutoUnAssignRoomHotelFORoomStatusEnum[keyof typeof AutoUnAssignRoomHotelFORoomStatusEnum];
/**
 * @export
 */
export const DeleteCheckinRoomStatusEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
} as const;
export type DeleteCheckinRoomStatusEnum = typeof DeleteCheckinRoomStatusEnum[keyof typeof DeleteCheckinRoomStatusEnum];
/**
 * @export
 */
export const GetFulfillmentActivityLogModuleEnum = {
    Reservation: 'Reservation',
    Contract: 'Contract',
    Allotment: 'Allotment',
    Outlookview: 'Outlookview',
    Profile: 'Profile',
    Accountreceivables: 'Accountreceivables',
    GdsConvRateCodes: 'GdsConvRateCodes',
    RateCode: 'RateCode',
    Billing: 'Billing',
    Activity: 'Activity'
} as const;
export type GetFulfillmentActivityLogModuleEnum = typeof GetFulfillmentActivityLogModuleEnum[keyof typeof GetFulfillmentActivityLogModuleEnum];
/**
 * @export
 */
export const GetHotelRoomsHotelRoomStatusEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
} as const;
export type GetHotelRoomsHotelRoomStatusEnum = typeof GetHotelRoomsHotelRoomStatusEnum[keyof typeof GetHotelRoomsHotelRoomStatusEnum];
/**
 * @export
 */
export const GetHotelRoomsHotelFORoomStatusEnum = {
    Vacant: 'Vacant',
    Occupied: 'Occupied'
} as const;
export type GetHotelRoomsHotelFORoomStatusEnum = typeof GetHotelRoomsHotelFORoomStatusEnum[keyof typeof GetHotelRoomsHotelFORoomStatusEnum];
/**
 * @export
 */
export const GetHotelRoomsOrderByEnum = {
    ForecastRotationPoints: 'ForecastRotationPoints'
} as const;
export type GetHotelRoomsOrderByEnum = typeof GetHotelRoomsOrderByEnum[keyof typeof GetHotelRoomsOrderByEnum];
/**
 * @export
 */
export const GetReservationSummariesSearchTypeEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
} as const;
export type GetReservationSummariesSearchTypeEnum = typeof GetReservationSummariesSearchTypeEnum[keyof typeof GetReservationSummariesSearchTypeEnum];
/**
 * @export
 */
export const GetReservationSummariesAttributeNameEnum = {
    Room: 'Room',
    Name: 'Name',
    ArrivalTime: 'ArrivalTime',
    DepartureTime: 'DepartureTime',
    ArrivalDate: 'ArrivalDate',
    DepartureDate: 'DepartureDate'
} as const;
export type GetReservationSummariesAttributeNameEnum = typeof GetReservationSummariesAttributeNameEnum[keyof typeof GetReservationSummariesAttributeNameEnum];
/**
 * @export
 */
export const GetReservationSummariesOrderTypeEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
} as const;
export type GetReservationSummariesOrderTypeEnum = typeof GetReservationSummariesOrderTypeEnum[keyof typeof GetReservationSummariesOrderTypeEnum];
/**
 * @export
 */
export const GetReservationSummariesRoomStatusesEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
} as const;
export type GetReservationSummariesRoomStatusesEnum = typeof GetReservationSummariesRoomStatusesEnum[keyof typeof GetReservationSummariesRoomStatusesEnum];
/**
 * @export
 */
export const GetReservationSummariesIndicatorEnum = {
    Package: 'Package',
    Message: 'Message',
    Attachments: 'Attachments',
    Share: 'Share',
    Routing: 'Routing',
    Itinerary: 'Itinerary',
    Trace: 'Trace',
    ServiceRequests: 'ServiceRequests',
    Locator: 'Locator',
    Comment: 'Comment',
    AuthorizedBilling: 'AuthorizedBilling',
    StayRevenue: 'StayRevenue',
    Preference: 'Preference',
    ProfileNote: 'ProfileNote',
    NoPost: 'NoPost',
    DepositCancellation: 'DepositCancellation',
    FixedCharge: 'FixedCharge',
    RateChange: 'RateChange',
    QmsTask: 'QmsTask',
    Activity: 'Activity',
    Queue: 'Queue',
    Member: 'Member',
    CancelReason: 'CancelReason',
    Extension: 'Extension',
    OpenFolio: 'OpenFolio',
    PreStay: 'PreStay',
    PostStay: 'PostStay',
    WakeUpCall: 'WakeUpCall',
    Alert: 'Alert',
    ExternalQms: 'ExternalQms',
    Transport: 'Transport',
    TrackIt: 'TrackIt',
    Award: 'Award',
    ItemInventory: 'ItemInventory',
    Waitlist: 'Waitlist',
    HistoryFuture: 'HistoryFuture',
    Communication: 'Communication',
    PrepaidCards: 'PrepaidCards',
    WebRegistrationCards: 'WebRegistrationCards'
} as const;
export type GetReservationSummariesIndicatorEnum = typeof GetReservationSummariesIndicatorEnum[keyof typeof GetReservationSummariesIndicatorEnum];
/**
 * @export
 */
export const GetReservationSummariesFetchSummaryInstructionsEnum = {
    ReservationPaymentMethods: 'ReservationPaymentMethods',
    RoomDetails: 'RoomDetails',
    BlockReservationDetails: 'BlockReservationDetails'
} as const;
export type GetReservationSummariesFetchSummaryInstructionsEnum = typeof GetReservationSummariesFetchSummaryInstructionsEnum[keyof typeof GetReservationSummariesFetchSummaryInstructionsEnum];
/**
 * @export
 */
export const GetReservationSummariesAllowedActionEnum = {
    Cancel: 'Cancel',
    Move: 'Move',
    PreCharge: 'PreCharge',
    PostCharge: 'PostCharge',
    FacilitySchedule: 'FacilitySchedule',
    Upsell: 'Upsell',
    PreCheckIn: 'PreCheckIn',
    PostToNoShowCancel: 'PostToNoShowCancel',
    NoShow: 'NoShow',
    NameChange: 'NameChange',
    Discount: 'Discount',
    HouseKeeping: 'HouseKeeping',
    EnrollToPrimaryMembership: 'EnrollToPrimaryMembership',
    EnrollInProgress: 'EnrollInProgress'
} as const;
export type GetReservationSummariesAllowedActionEnum = typeof GetReservationSummariesAllowedActionEnum[keyof typeof GetReservationSummariesAllowedActionEnum];
/**
 * @export
 */
export const GetReservationsForBillingSearchTypeEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
} as const;
export type GetReservationsForBillingSearchTypeEnum = typeof GetReservationsForBillingSearchTypeEnum[keyof typeof GetReservationsForBillingSearchTypeEnum];
/**
 * @export
 */
export const GetReservationsForBillingReservationProfileTypeEnum = {
    Guest: 'Guest',
    Company: 'Company',
    Group: 'Group',
    TravelAgent: 'TravelAgent',
    Source: 'Source',
    ReservationContact: 'ReservationContact',
    BillingContact: 'BillingContact',
    Addressee: 'Addressee'
} as const;
export type GetReservationsForBillingReservationProfileTypeEnum = typeof GetReservationsForBillingReservationProfileTypeEnum[keyof typeof GetReservationsForBillingReservationProfileTypeEnum];
/**
 * @export
 */
export const GetReservationsForBillingOrderTypeEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
} as const;
export type GetReservationsForBillingOrderTypeEnum = typeof GetReservationsForBillingOrderTypeEnum[keyof typeof GetReservationsForBillingOrderTypeEnum];
/**
 * @export
 */
export const GetReservationsForBillingFetchInstructionsEnum = {
    Reservation: 'Reservation',
    ReservationId: 'ReservationID',
    Indicators: 'Indicators',
    Deposits: 'Deposits',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestServiceStatus: 'GuestServiceStatus',
    MasterInfo: 'MasterInfo',
    CancellationInfo: 'CancellationInfo',
    BlockReservations: 'BlockReservations',
    TaxType: 'TaxType',
    GuestDeviceNotification: 'GuestDeviceNotification',
    RoomAssignedByAi: 'RoomAssignedByAI'
} as const;
export type GetReservationsForBillingFetchInstructionsEnum = typeof GetReservationsForBillingFetchInstructionsEnum[keyof typeof GetReservationsForBillingFetchInstructionsEnum];
/**
 * @export
 */
export const GetReservationsForBillingSearchTypesSearchTypeEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
} as const;
export type GetReservationsForBillingSearchTypesSearchTypeEnum = typeof GetReservationsForBillingSearchTypesSearchTypeEnum[keyof typeof GetReservationsForBillingSearchTypesSearchTypeEnum];
/**
 * @export
 */
export const GetReservationsForBillingReservationStatusEnum = {
    Cancelled: 'Cancelled',
    CheckedOut: 'CheckedOut',
    CheckedIn: 'CheckedIn',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    InHouse: 'InHouse',
    NoShow: 'NoShow',
    WaitList: 'WaitList'
} as const;
export type GetReservationsForBillingReservationStatusEnum = typeof GetReservationsForBillingReservationStatusEnum[keyof typeof GetReservationsForBillingReservationStatusEnum];
/**
 * @export
 */
export const GetResvForBatchCCAuthCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
} as const;
export type GetResvForBatchCCAuthCardTypeEnum = typeof GetResvForBatchCCAuthCardTypeEnum[keyof typeof GetResvForBatchCCAuthCardTypeEnum];
/**
 * @export
 */
export const GetRoomInterfaceStatusInterfaceTypeEnum = {
    Bms: 'Bms',
    Cas: 'Cas',
    Ccw: 'Ccw',
    Dls: 'Dls',
    Eft: 'Eft',
    Exp: 'Exp',
    Mak: 'Mak',
    Mbs: 'Mbs',
    Msc: 'Msc',
    Pbx: 'Pbx',
    Pos: 'Pos',
    Svs: 'Svs',
    Tik: 'Tik',
    Vid: 'Vid',
    Vms: 'Vms',
    Www: 'Www',
    Xml: 'Xml'
} as const;
export type GetRoomInterfaceStatusInterfaceTypeEnum = typeof GetRoomInterfaceStatusInterfaceTypeEnum[keyof typeof GetRoomInterfaceStatusInterfaceTypeEnum];
/**
 * @export
 */
export const GetRoomInterfaceStatusStatusEnum = {
    Stopped: 'Stopped',
    Running: 'Running',
    Waiting: 'Waiting',
    StopInitiated: 'StopInitiated',
    StartInitiated: 'StartInitiated',
    RebootInitiated: 'RebootInitiated',
    Other: 'Other'
} as const;
export type GetRoomInterfaceStatusStatusEnum = typeof GetRoomInterfaceStatusStatusEnum[keyof typeof GetRoomInterfaceStatusStatusEnum];
/**
 * @export
 */
export const GetRoomInterfaceStatusRoomStatusEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
} as const;
export type GetRoomInterfaceStatusRoomStatusEnum = typeof GetRoomInterfaceStatusRoomStatusEnum[keyof typeof GetRoomInterfaceStatusRoomStatusEnum];
/**
 * @export
 */
export const GetRoomInterfaceStatusReservationStatusEnum = {
    Cancelled: 'Cancelled',
    CheckedOut: 'CheckedOut',
    CheckedIn: 'CheckedIn',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    InHouse: 'InHouse',
    NoShow: 'NoShow',
    WaitList: 'WaitList'
} as const;
export type GetRoomInterfaceStatusReservationStatusEnum = typeof GetRoomInterfaceStatusReservationStatusEnum[keyof typeof GetRoomInterfaceStatusReservationStatusEnum];
/**
 * @export
 */
export const GetRoomInterfaceStatusOrderByEnum = {
    RoomNo: 'RoomNo',
    Name: 'Name',
    ArrivalDateEtr: 'ArrivalDateETR',
    ArrivalDate: 'ArrivalDate'
} as const;
export type GetRoomInterfaceStatusOrderByEnum = typeof GetRoomInterfaceStatusOrderByEnum[keyof typeof GetRoomInterfaceStatusOrderByEnum];
/**
 * @export
 */
export const GetRoomInterfaceStatusOrderTypeEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
} as const;
export type GetRoomInterfaceStatusOrderTypeEnum = typeof GetRoomInterfaceStatusOrderTypeEnum[keyof typeof GetRoomInterfaceStatusOrderTypeEnum];
/**
 * @export
 */
export const GetServiceRequestsStatusEnum = {
    Open: 'Open',
    PendingFollowUp: 'PendingFollowUp',
    Closed: 'Closed',
    DoNotDisturb: 'DoNotDisturb',
    MakeUpRoom: 'MakeUpRoom'
} as const;
export type GetServiceRequestsStatusEnum = typeof GetServiceRequestsStatusEnum[keyof typeof GetServiceRequestsStatusEnum];
/**
 * @export
 */
export const GetSuggestedRoomsSuggestedRoomsInstructionsEnum = {
    ComponentRoom: 'ComponentRoom'
} as const;
export type GetSuggestedRoomsSuggestedRoomsInstructionsEnum = typeof GetSuggestedRoomsSuggestedRoomsInstructionsEnum[keyof typeof GetSuggestedRoomsSuggestedRoomsInstructionsEnum];
/**
 * @export
 */
export const VerifyCheckinReservationVerifyCheckinInstructionsEnum = {
    AuthorizationInfo: 'AuthorizationInfo',
    ExcludeRoomSuggestion: 'ExcludeRoomSuggestion'
} as const;
export type VerifyCheckinReservationVerifyCheckinInstructionsEnum = typeof VerifyCheckinReservationVerifyCheckinInstructionsEnum[keyof typeof VerifyCheckinReservationVerifyCheckinInstructionsEnum];
