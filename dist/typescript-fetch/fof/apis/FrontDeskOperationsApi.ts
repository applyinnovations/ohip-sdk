/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActivityLog,
  CheckedinReservation,
  ExceptionDetailType,
  HotelRooms,
  PostCheckInRequest,
  PostRoomKeyRequest,
  RoomKeyDetails,
  RoomKeyInfo,
  ShortReservation,
} from '../models';
import {
    ActivityLogFromJSON,
    ActivityLogToJSON,
    CheckedinReservationFromJSON,
    CheckedinReservationToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    HotelRoomsFromJSON,
    HotelRoomsToJSON,
    PostCheckInRequestFromJSON,
    PostCheckInRequestToJSON,
    PostRoomKeyRequestFromJSON,
    PostRoomKeyRequestToJSON,
    RoomKeyDetailsFromJSON,
    RoomKeyDetailsToJSON,
    RoomKeyInfoFromJSON,
    RoomKeyInfoToJSON,
    ShortReservationFromJSON,
    ShortReservationToJSON,
} from '../models';

export interface GetFulfillmentActivityLogRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    module?: GetFulfillmentActivityLogModuleEnum;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    activityGroup?: string;
    activityType?: string;
    fromDate?: Date;
    toDate?: Date;
    searchText?: string;
    userByIds?: Array<number>;
    userForIds?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelRoomsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    roomNumberWildcard?: string;
    hotelRoomStatus?: Set<GetHotelRoomsHotelRoomStatusEnum>;
    hotelFORoomStatus?: Set<GetHotelRoomsHotelFORoomStatusEnum>;
    fromRoomNumber?: string;
    toRoomNumber?: string;
    hotelRoomStartDate?: Date;
    hotelRoomEndDate?: Date;
    duration?: string;
    roomType?: Array<string>;
    roomClass?: string;
    floor?: string;
    includeDueOut?: boolean;
    departureTime?: string;
    roomFeatureCode?: Array<string>;
    description?: Array<string>;
    orderSequence?: Array<number>;
    quantity?: Array<number>;
    smokingPreference?: string;
    includeAllRoomConditions?: boolean;
    includeComponentRooms?: boolean;
    includePseudoRooms?: boolean;
    includeOORoomCheck?: boolean;
    connectingRoomsOnly?: boolean;
    reservationId?: string;
    reservationIdContext?: string;
    reservationIdType?: string;
    pseudoRoomsOnly?: boolean;
    includeAttendentInRoom?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationSummariesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    searchType?: GetReservationSummariesSearchTypeEnum;
    reservationId?: Array<string>;
    reservationIdContext?: Array<string>;
    reservationIdType?: Array<string>;
    blockId?: Array<string>;
    blockIdContext?: Array<string>;
    blockIdType?: Array<string>;
    arrivalEnd?: Date;
    arrivalStart?: Date;
    departureEnd?: Date;
    departureStart?: Date;
    stayOnEnd?: Date;
    stayOnStart?: Date;
    createdOnEnd?: Date;
    createOnStart?: Date;
    depositDateEnd?: Date;
    depositDateStart?: Date;
    dateCriteriaExpectedArrivalEndTime?: string;
    dateCriteriaExpectedArrivalStartTime?: string;
    depositDueDateEnd?: Date;
    depositDueDateStart?: Date;
    expectedReturnEndTime?: string;
    expectedReturnStartTime?: string;
    membershipNumber?: string;
    anyVIPStatus?: boolean;
    vipStatusCodes?: Array<string>;
    roomId?: string;
    lastName?: string;
    firstName?: string;
    blockCode?: string;
    companyName?: string;
    travelAgentName?: string;
    creditCardNumber?: string;
    customReference?: string;
    externalReference?: string;
    attributeName?: Set<GetReservationSummariesAttributeNameEnum>;
    orderType?: Set<GetReservationSummariesOrderTypeEnum>;
    expectedArrivalEndTime?: Date;
    expectedArrivalStartTime?: Date;
    roomTypes?: Array<string>;
    roomStatuses?: Set<GetReservationSummariesRoomStatusesEnum>;
    paymentMethod?: Array<string>;
    indicator?: Set<GetReservationSummariesIndicatorEnum>;
    fetchSummaryInstructions?: Set<GetReservationSummariesFetchSummaryInstructionsEnum>;
    allowedAction?: Set<GetReservationSummariesAllowedActionEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomKeysRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCheckInOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservation?: PostCheckInRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRoomKeyOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomKey?: PostRoomKeyRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class FrontDeskOperationsApi extends runtime.BaseAPI {

    /**
     * You can use this API to get the fullfillment activity log. <p><strong>OperationId:</strong>getFulfillmentActivityLog</p>
     * Get the fullfillment activity log
     */
    async getFulfillmentActivityLogRaw(requestParameters: GetFulfillmentActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityLog>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.module !== undefined) {
            queryParameters['module'] = requestParameters.module;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.activityGroup !== undefined) {
            queryParameters['activityGroup'] = requestParameters.activityGroup;
        }

        if (requestParameters.activityType !== undefined) {
            queryParameters['activityType'] = requestParameters.activityType;
        }

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = (requestParameters.fromDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.toDate !== undefined) {
            queryParameters['toDate'] = (requestParameters.toDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.searchText !== undefined) {
            queryParameters['searchText'] = requestParameters.searchText;
        }

        if (requestParameters.userByIds) {
            queryParameters['userByIds'] = requestParameters.userByIds;
        }

        if (requestParameters.userForIds) {
            queryParameters['userForIds'] = requestParameters.userForIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/fulfillmentActivityLogs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityLogFromJSON(jsonValue));
    }

    /**
     * You can use this API to get the fullfillment activity log. <p><strong>OperationId:</strong>getFulfillmentActivityLog</p>
     * Get the fullfillment activity log
     */
    async getFulfillmentActivityLog(requestParameters: GetFulfillmentActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityLog> {
        const response = await this.getFulfillmentActivityLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return available rooms based on search criteria such as hotelId, hotelRoomStatus, roomType, roomFeatureCode,etc.<p><strong>OperationId:</strong>getHotelRooms</p>
     * Get hotel available rooms
     */
    async getHotelRoomsRaw(requestParameters: GetHotelRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelRooms>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.roomNumberWildcard !== undefined) {
            queryParameters['roomNumberWildcard'] = requestParameters.roomNumberWildcard;
        }

        if (requestParameters.hotelRoomStatus) {
            queryParameters['hotelRoomStatus'] = requestParameters.hotelRoomStatus;
        }

        if (requestParameters.hotelFORoomStatus) {
            queryParameters['hotelFORoomStatus'] = requestParameters.hotelFORoomStatus;
        }

        if (requestParameters.fromRoomNumber !== undefined) {
            queryParameters['fromRoomNumber'] = requestParameters.fromRoomNumber;
        }

        if (requestParameters.toRoomNumber !== undefined) {
            queryParameters['toRoomNumber'] = requestParameters.toRoomNumber;
        }

        if (requestParameters.hotelRoomStartDate !== undefined) {
            queryParameters['hotelRoomStartDate'] = (requestParameters.hotelRoomStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.hotelRoomEndDate !== undefined) {
            queryParameters['hotelRoomEndDate'] = (requestParameters.hotelRoomEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.roomClass !== undefined) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }

        if (requestParameters.floor !== undefined) {
            queryParameters['floor'] = requestParameters.floor;
        }

        if (requestParameters.includeDueOut !== undefined) {
            queryParameters['includeDueOut'] = requestParameters.includeDueOut;
        }

        if (requestParameters.departureTime !== undefined) {
            queryParameters['departureTime'] = requestParameters.departureTime;
        }

        if (requestParameters.roomFeatureCode) {
            queryParameters['roomFeatureCode'] = requestParameters.roomFeatureCode;
        }

        if (requestParameters.description) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.orderSequence) {
            queryParameters['orderSequence'] = requestParameters.orderSequence;
        }

        if (requestParameters.quantity) {
            queryParameters['quantity'] = requestParameters.quantity;
        }

        if (requestParameters.smokingPreference !== undefined) {
            queryParameters['smokingPreference'] = requestParameters.smokingPreference;
        }

        if (requestParameters.includeAllRoomConditions !== undefined) {
            queryParameters['includeAllRoomConditions'] = requestParameters.includeAllRoomConditions;
        }

        if (requestParameters.includeComponentRooms !== undefined) {
            queryParameters['includeComponentRooms'] = requestParameters.includeComponentRooms;
        }

        if (requestParameters.includePseudoRooms !== undefined) {
            queryParameters['includePseudoRooms'] = requestParameters.includePseudoRooms;
        }

        if (requestParameters.includeOORoomCheck !== undefined) {
            queryParameters['includeOORoomCheck'] = requestParameters.includeOORoomCheck;
        }

        if (requestParameters.connectingRoomsOnly !== undefined) {
            queryParameters['connectingRoomsOnly'] = requestParameters.connectingRoomsOnly;
        }

        if (requestParameters.reservationId !== undefined) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.reservationIdContext !== undefined) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }

        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        if (requestParameters.pseudoRoomsOnly !== undefined) {
            queryParameters['pseudoRoomsOnly'] = requestParameters.pseudoRoomsOnly;
        }

        if (requestParameters.includeAttendentInRoom !== undefined) {
            queryParameters['includeAttendentInRoom'] = requestParameters.includeAttendentInRoom;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelRoomsFromJSON(jsonValue));
    }

    /**
     * Use this API to return available rooms based on search criteria such as hotelId, hotelRoomStatus, roomType, roomFeatureCode,etc.<p><strong>OperationId:</strong>getHotelRooms</p>
     * Get hotel available rooms
     */
    async getHotelRooms(requestParameters: GetHotelRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelRooms> {
        const response = await this.getHotelRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return reservation summaries for a specific property based on search criteria such as reservationId, blockId, arrivalStart, membershipNumber, roomId, etc.<p><strong>OperationId:</strong>getReservationSummaries</p>
     * Get hotel reservation summaries
     */
    async getReservationSummariesRaw(requestParameters: GetReservationSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShortReservation>> {
        const queryParameters: any = {};

        if (requestParameters.searchType !== undefined) {
            queryParameters['searchType'] = requestParameters.searchType;
        }

        if (requestParameters.reservationId) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.reservationIdContext) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }

        if (requestParameters.reservationIdType) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        if (requestParameters.blockId) {
            queryParameters['blockId'] = requestParameters.blockId;
        }

        if (requestParameters.blockIdContext) {
            queryParameters['blockIdContext'] = requestParameters.blockIdContext;
        }

        if (requestParameters.blockIdType) {
            queryParameters['blockIdType'] = requestParameters.blockIdType;
        }

        if (requestParameters.arrivalEnd !== undefined) {
            queryParameters['arrivalEnd'] = (requestParameters.arrivalEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.arrivalStart !== undefined) {
            queryParameters['arrivalStart'] = (requestParameters.arrivalStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.departureEnd !== undefined) {
            queryParameters['departureEnd'] = (requestParameters.departureEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.departureStart !== undefined) {
            queryParameters['departureStart'] = (requestParameters.departureStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.stayOnEnd !== undefined) {
            queryParameters['stayOnEnd'] = (requestParameters.stayOnEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.stayOnStart !== undefined) {
            queryParameters['stayOnStart'] = (requestParameters.stayOnStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.createdOnEnd !== undefined) {
            queryParameters['createdOnEnd'] = (requestParameters.createdOnEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.createOnStart !== undefined) {
            queryParameters['createOnStart'] = (requestParameters.createOnStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.depositDateEnd !== undefined) {
            queryParameters['depositDateEnd'] = (requestParameters.depositDateEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.depositDateStart !== undefined) {
            queryParameters['depositDateStart'] = (requestParameters.depositDateStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.dateCriteriaExpectedArrivalEndTime !== undefined) {
            queryParameters['dateCriteriaExpectedArrivalEndTime'] = requestParameters.dateCriteriaExpectedArrivalEndTime;
        }

        if (requestParameters.dateCriteriaExpectedArrivalStartTime !== undefined) {
            queryParameters['dateCriteriaExpectedArrivalStartTime'] = requestParameters.dateCriteriaExpectedArrivalStartTime;
        }

        if (requestParameters.depositDueDateEnd !== undefined) {
            queryParameters['depositDueDateEnd'] = (requestParameters.depositDueDateEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.depositDueDateStart !== undefined) {
            queryParameters['depositDueDateStart'] = (requestParameters.depositDueDateStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.expectedReturnEndTime !== undefined) {
            queryParameters['expectedReturnEndTime'] = requestParameters.expectedReturnEndTime;
        }

        if (requestParameters.expectedReturnStartTime !== undefined) {
            queryParameters['expectedReturnStartTime'] = requestParameters.expectedReturnStartTime;
        }

        if (requestParameters.membershipNumber !== undefined) {
            queryParameters['membershipNumber'] = requestParameters.membershipNumber;
        }

        if (requestParameters.anyVIPStatus !== undefined) {
            queryParameters['anyVIPStatus'] = requestParameters.anyVIPStatus;
        }

        if (requestParameters.vipStatusCodes) {
            queryParameters['vipStatusCodes'] = requestParameters.vipStatusCodes;
        }

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.lastName !== undefined) {
            queryParameters['lastName'] = requestParameters.lastName;
        }

        if (requestParameters.firstName !== undefined) {
            queryParameters['firstName'] = requestParameters.firstName;
        }

        if (requestParameters.blockCode !== undefined) {
            queryParameters['blockCode'] = requestParameters.blockCode;
        }

        if (requestParameters.companyName !== undefined) {
            queryParameters['companyName'] = requestParameters.companyName;
        }

        if (requestParameters.travelAgentName !== undefined) {
            queryParameters['travelAgentName'] = requestParameters.travelAgentName;
        }

        if (requestParameters.creditCardNumber !== undefined) {
            queryParameters['creditCardNumber'] = requestParameters.creditCardNumber;
        }

        if (requestParameters.customReference !== undefined) {
            queryParameters['customReference'] = requestParameters.customReference;
        }

        if (requestParameters.externalReference !== undefined) {
            queryParameters['externalReference'] = requestParameters.externalReference;
        }

        if (requestParameters.attributeName) {
            queryParameters['attributeName'] = requestParameters.attributeName;
        }

        if (requestParameters.orderType) {
            queryParameters['orderType'] = requestParameters.orderType;
        }

        if (requestParameters.expectedArrivalEndTime !== undefined) {
            queryParameters['expectedArrivalEndTime'] = (requestParameters.expectedArrivalEndTime as any).toISOString().substr(0,10);
        }

        if (requestParameters.expectedArrivalStartTime !== undefined) {
            queryParameters['expectedArrivalStartTime'] = (requestParameters.expectedArrivalStartTime as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomTypes) {
            queryParameters['roomTypes'] = requestParameters.roomTypes;
        }

        if (requestParameters.roomStatuses) {
            queryParameters['roomStatuses'] = requestParameters.roomStatuses;
        }

        if (requestParameters.paymentMethod) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }

        if (requestParameters.indicator) {
            queryParameters['indicator'] = requestParameters.indicator;
        }

        if (requestParameters.fetchSummaryInstructions) {
            queryParameters['fetchSummaryInstructions'] = requestParameters.fetchSummaryInstructions;
        }

        if (requestParameters.allowedAction) {
            queryParameters['allowedAction'] = requestParameters.allowedAction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservationSummaries`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShortReservationFromJSON(jsonValue));
    }

    /**
     * Use this API to return reservation summaries for a specific property based on search criteria such as reservationId, blockId, arrivalStart, membershipNumber, roomId, etc.<p><strong>OperationId:</strong>getReservationSummaries</p>
     * Get hotel reservation summaries
     */
    async getReservationSummaries(requestParameters: GetReservationSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShortReservation> {
        const response = await this.getReservationSummariesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to retrieve any existing room key information for a reservation. <p><strong>OperationId:</strong>getRoomKeys</p>
     * Fetch the room keys
     */
    async getRoomKeysRaw(requestParameters: GetRoomKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomKeyInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/roomKeys`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomKeyInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to retrieve any existing room key information for a reservation. <p><strong>OperationId:</strong>getRoomKeys</p>
     * Fetch the room keys
     */
    async getRoomKeys(requestParameters: GetRoomKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomKeyInfo> {
        const response = await this.getRoomKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to check in a guest reservation.  The reservation needs to be \'due in\' status.  The API also provides an option to select an available room. <p><strong>OperationId:</strong>postCheckIn</p>
     * Checks in a guest
     */
    async postCheckInRaw(requestParameters: PostCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckedinReservation>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/checkIns`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCheckInRequestToJSON(requestParameters.reservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckedinReservationFromJSON(jsonValue));
    }

    /**
     * Use this API to check in a guest reservation.  The reservation needs to be \'due in\' status.  The API also provides an option to select an available room. <p><strong>OperationId:</strong>postCheckIn</p>
     * Checks in a guest
     */
    async postCheckIn(requestParameters: PostCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckedinReservation> {
        const response = await this.postCheckInRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create a room key request for a reservation to the active Door Locking System Property Interface. <p><strong>OperationId:</strong>postRoomKey</p>
     * Requests room key(s)
     */
    async postRoomKeyRaw(requestParameters: PostRoomKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomKeyDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/roomKeys`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRoomKeyRequestToJSON(requestParameters.roomKey),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomKeyDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to create a room key request for a reservation to the active Door Locking System Property Interface. <p><strong>OperationId:</strong>postRoomKey</p>
     * Requests room key(s)
     */
    async postRoomKey(requestParameters: PostRoomKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomKeyDetails> {
        const response = await this.postRoomKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetFulfillmentActivityLogModuleEnum = {
    Reservation: 'Reservation',
    Contract: 'Contract',
    Allotment: 'Allotment',
    Outlookview: 'Outlookview',
    Profile: 'Profile',
    Accountreceivables: 'Accountreceivables',
    GdsConvRateCodes: 'GdsConvRateCodes',
    RateCode: 'RateCode',
    Billing: 'Billing',
    Activity: 'Activity'
} as const;
export type GetFulfillmentActivityLogModuleEnum = typeof GetFulfillmentActivityLogModuleEnum[keyof typeof GetFulfillmentActivityLogModuleEnum];
/**
 * @export
 */
export const GetHotelRoomsHotelRoomStatusEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
} as const;
export type GetHotelRoomsHotelRoomStatusEnum = typeof GetHotelRoomsHotelRoomStatusEnum[keyof typeof GetHotelRoomsHotelRoomStatusEnum];
/**
 * @export
 */
export const GetHotelRoomsHotelFORoomStatusEnum = {
    Vacant: 'Vacant',
    Occupied: 'Occupied'
} as const;
export type GetHotelRoomsHotelFORoomStatusEnum = typeof GetHotelRoomsHotelFORoomStatusEnum[keyof typeof GetHotelRoomsHotelFORoomStatusEnum];
/**
 * @export
 */
export const GetReservationSummariesSearchTypeEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
} as const;
export type GetReservationSummariesSearchTypeEnum = typeof GetReservationSummariesSearchTypeEnum[keyof typeof GetReservationSummariesSearchTypeEnum];
/**
 * @export
 */
export const GetReservationSummariesAttributeNameEnum = {
    Room: 'Room',
    Name: 'Name',
    ArrivalTime: 'ArrivalTime',
    DepartureTime: 'DepartureTime',
    ArrivalDate: 'ArrivalDate',
    DepartureDate: 'DepartureDate'
} as const;
export type GetReservationSummariesAttributeNameEnum = typeof GetReservationSummariesAttributeNameEnum[keyof typeof GetReservationSummariesAttributeNameEnum];
/**
 * @export
 */
export const GetReservationSummariesOrderTypeEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
} as const;
export type GetReservationSummariesOrderTypeEnum = typeof GetReservationSummariesOrderTypeEnum[keyof typeof GetReservationSummariesOrderTypeEnum];
/**
 * @export
 */
export const GetReservationSummariesRoomStatusesEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
} as const;
export type GetReservationSummariesRoomStatusesEnum = typeof GetReservationSummariesRoomStatusesEnum[keyof typeof GetReservationSummariesRoomStatusesEnum];
/**
 * @export
 */
export const GetReservationSummariesIndicatorEnum = {
    Package: 'Package',
    Message: 'Message',
    Attachments: 'Attachments',
    Share: 'Share',
    Routing: 'Routing',
    Itinerary: 'Itinerary',
    Trace: 'Trace',
    ServiceRequests: 'ServiceRequests',
    Locator: 'Locator',
    Comment: 'Comment',
    AuthorizedBilling: 'AuthorizedBilling',
    StayRevenue: 'StayRevenue',
    Preference: 'Preference',
    ProfileNote: 'ProfileNote',
    NoPost: 'NoPost',
    DepositCancellation: 'DepositCancellation',
    FixedCharge: 'FixedCharge',
    RateChange: 'RateChange',
    QmsTask: 'QmsTask',
    Activity: 'Activity',
    Queue: 'Queue',
    Member: 'Member',
    CancelReason: 'CancelReason',
    Extension: 'Extension',
    OpenFolio: 'OpenFolio',
    PreStay: 'PreStay',
    PostStay: 'PostStay',
    WakeUpCall: 'WakeUpCall',
    Alert: 'Alert',
    ExternalQms: 'ExternalQms',
    Transport: 'Transport',
    TrackIt: 'TrackIt',
    Award: 'Award',
    ItemInventory: 'ItemInventory',
    Waitlist: 'Waitlist',
    HistoryFuture: 'HistoryFuture',
    Communication: 'Communication',
    PrepaidCards: 'PrepaidCards',
    WebRegistrationCards: 'WebRegistrationCards'
} as const;
export type GetReservationSummariesIndicatorEnum = typeof GetReservationSummariesIndicatorEnum[keyof typeof GetReservationSummariesIndicatorEnum];
/**
 * @export
 */
export const GetReservationSummariesFetchSummaryInstructionsEnum = {
    ReservationPaymentMethods: 'ReservationPaymentMethods',
    RoomDetails: 'RoomDetails',
    BlockReservationDetails: 'BlockReservationDetails'
} as const;
export type GetReservationSummariesFetchSummaryInstructionsEnum = typeof GetReservationSummariesFetchSummaryInstructionsEnum[keyof typeof GetReservationSummariesFetchSummaryInstructionsEnum];
/**
 * @export
 */
export const GetReservationSummariesAllowedActionEnum = {
    Cancel: 'Cancel',
    Move: 'Move',
    PreCharge: 'PreCharge',
    PostCharge: 'PostCharge',
    FacilitySchedule: 'FacilitySchedule',
    Upsell: 'Upsell',
    PreCheckIn: 'PreCheckIn',
    PostToNoShowCancel: 'PostToNoShowCancel',
    NoShow: 'NoShow',
    NameChange: 'NameChange',
    Discount: 'Discount',
    HouseKeeping: 'HouseKeeping',
    EnrollToPrimaryMembership: 'EnrollToPrimaryMembership',
    EnrollInProgress: 'EnrollInProgress'
} as const;
export type GetReservationSummariesAllowedActionEnum = typeof GetReservationSummariesAllowedActionEnum[keyof typeof GetReservationSummariesAllowedActionEnum];
