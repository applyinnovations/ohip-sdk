"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerifyCheckinReservationVerifyCheckinInstructionsEnum = exports.GetSuggestedRoomsSuggestedRoomsInstructionsEnum = exports.GetServiceRequestsStatusEnum = exports.GetRoomInterfaceStatusOrderTypeEnum = exports.GetRoomInterfaceStatusOrderByEnum = exports.GetRoomInterfaceStatusReservationStatusEnum = exports.GetRoomInterfaceStatusRoomStatusEnum = exports.GetRoomInterfaceStatusStatusEnum = exports.GetRoomInterfaceStatusInterfaceTypeEnum = exports.GetResvForBatchCCAuthCardTypeEnum = exports.GetReservationsForBillingReservationStatusEnum = exports.GetReservationsForBillingSearchTypesSearchTypeEnum = exports.GetReservationsForBillingFetchInstructionsEnum = exports.GetReservationsForBillingOrderTypeEnum = exports.GetReservationsForBillingReservationProfileTypeEnum = exports.GetReservationsForBillingSearchTypeEnum = exports.GetReservationSummariesAllowedActionEnum = exports.GetReservationSummariesFetchSummaryInstructionsEnum = exports.GetReservationSummariesIndicatorEnum = exports.GetReservationSummariesRoomStatusesEnum = exports.GetReservationSummariesOrderTypeEnum = exports.GetReservationSummariesAttributeNameEnum = exports.GetReservationSummariesSearchTypeEnum = exports.GetHotelRoomsOrderByEnum = exports.GetHotelRoomsHotelFORoomStatusEnum = exports.GetHotelRoomsHotelRoomStatusEnum = exports.GetFulfillmentActivityLogModuleEnum = exports.DeleteCheckinRoomStatusEnum = exports.AutoUnAssignRoomHotelFORoomStatusEnum = exports.AutoUnAssignRoomHotelRoomStatusEnum = exports.FrontDeskOperationsApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class FrontDeskOperationsApi extends runtime.BaseAPI {
    /**
     * Using this API you can assign reservations to the reservation queue if the guest\'s room is not ready for assignment or if there are no available rooms of the room type attached to the reservation. Housekeeping staff can use the Queue Rooms functionality to determine if there are guests waiting to check in to a particular room or type of room; if there are, the queue list can provide guidance in determining which rooms need attention first. <p><strong>OperationId:</strong>addReservationToQueue</p>
     * Add reservation to queue
     */
    addReservationToQueueRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/queuedReservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.AddReservationToQueueRequestToJSON)(requestParameters.queueReservation),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReservationQueuePriorityFromJSON)(jsonValue));
        });
    }
    /**
     * Using this API you can assign reservations to the reservation queue if the guest\'s room is not ready for assignment or if there are no available rooms of the room type attached to the reservation. Housekeeping staff can use the Queue Rooms functionality to determine if there are guests waiting to check in to a particular room or type of room; if there are, the queue list can provide guidance in determining which rooms need attention first. <p><strong>OperationId:</strong>addReservationToQueue</p>
     * Add reservation to queue
     */
    addReservationToQueue(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.addReservationToQueueRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API runs AI Room Assignment and allocates rooms to incoming reservations. <p><strong>OperationId:</strong>assignRoomsAI</p>
     * AI Assign Rooms
     */
    assignRoomsAIRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/ai/rooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.AssignRoomsAIRequestToJSON)(requestParameters.roomsAI),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API runs AI Room Assignment and allocates rooms to incoming reservations. <p><strong>OperationId:</strong>assignRoomsAI</p>
     * AI Assign Rooms
     */
    assignRoomsAI(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.assignRoomsAIRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API can be used to assign the room automatically. <p><strong>OperationId:</strong>autoAssignRoom</p>
     * Assign the room automatically
     */
    autoAssignRoomRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/autoRoomAssignments`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.AutoAssignRoomRequestToJSON)(requestParameters.autoAssignRoom),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AutoAssignedRoomFromJSON)(jsonValue));
        });
    }
    /**
     * This API can be used to assign the room automatically. <p><strong>OperationId:</strong>autoAssignRoom</p>
     * Assign the room automatically
     */
    autoAssignRoom(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.autoAssignRoomRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API can be used to auto unassign a room. <p><strong>OperationId:</strong>autoUnAssignRoom</p>
     * Auto unassign room
     */
    autoUnAssignRoomRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.id) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idExtension) {
                queryParameters['idExtension'] = requestParameters.idExtension;
            }
            if (requestParameters.type) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.includeDepartureRooms !== undefined) {
                queryParameters['includeDepartureRooms'] = requestParameters.includeDepartureRooms;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.roomNumberWildcard !== undefined) {
                queryParameters['roomNumberWildcard'] = requestParameters.roomNumberWildcard;
            }
            if (requestParameters.useAIRoomAssignment !== undefined) {
                queryParameters['useAIRoomAssignment'] = requestParameters.useAIRoomAssignment;
            }
            if (requestParameters.useAssociatedProfilePreferences !== undefined) {
                queryParameters['useAssociatedProfilePreferences'] = requestParameters.useAssociatedProfilePreferences;
            }
            if (requestParameters.hotelRoomStatus) {
                queryParameters['hotelRoomStatus'] = requestParameters.hotelRoomStatus;
            }
            if (requestParameters.hotelFORoomStatus) {
                queryParameters['hotelFORoomStatus'] = requestParameters.hotelFORoomStatus;
            }
            if (requestParameters.fromRoomNumber !== undefined) {
                queryParameters['fromRoomNumber'] = requestParameters.fromRoomNumber;
            }
            if (requestParameters.toRoomNumber !== undefined) {
                queryParameters['toRoomNumber'] = requestParameters.toRoomNumber;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.roomType) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.roomClass !== undefined) {
                queryParameters['roomClass'] = requestParameters.roomClass;
            }
            if (requestParameters.floor !== undefined) {
                queryParameters['floor'] = requestParameters.floor;
            }
            if (requestParameters.includeDueOut !== undefined) {
                queryParameters['includeDueOut'] = requestParameters.includeDueOut;
            }
            if (requestParameters.departureTime !== undefined) {
                queryParameters['departureTime'] = requestParameters.departureTime;
            }
            if (requestParameters.code) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.description) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.orderSequence) {
                queryParameters['orderSequence'] = requestParameters.orderSequence;
            }
            if (requestParameters.quantity) {
                queryParameters['quantity'] = requestParameters.quantity;
            }
            if (requestParameters.smokingPreference !== undefined) {
                queryParameters['smokingPreference'] = requestParameters.smokingPreference;
            }
            if (requestParameters.includeAllRoomConditions !== undefined) {
                queryParameters['includeAllRoomConditions'] = requestParameters.includeAllRoomConditions;
            }
            if (requestParameters.includeComponentRooms !== undefined) {
                queryParameters['includeComponentRooms'] = requestParameters.includeComponentRooms;
            }
            if (requestParameters.includePseudoRooms !== undefined) {
                queryParameters['includePseudoRooms'] = requestParameters.includePseudoRooms;
            }
            if (requestParameters.includeOORoomCheck !== undefined) {
                queryParameters['includeOORoomCheck'] = requestParameters.includeOORoomCheck;
            }
            if (requestParameters.connectingRoomsOnly !== undefined) {
                queryParameters['connectingRoomsOnly'] = requestParameters.connectingRoomsOnly;
            }
            if (requestParameters.reservationIdId !== undefined) {
                queryParameters['reservationIdId'] = requestParameters.reservationIdId;
            }
            if (requestParameters.reservationIdIdExtension !== undefined) {
                queryParameters['reservationIdIdExtension'] = requestParameters.reservationIdIdExtension;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.reservationIdType !== undefined) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            if (requestParameters.pseudoRoomsOnly !== undefined) {
                queryParameters['pseudoRoomsOnly'] = requestParameters.pseudoRoomsOnly;
            }
            if (requestParameters.includeAttendentInRoom !== undefined) {
                queryParameters['includeAttendentInRoom'] = requestParameters.includeAttendentInRoom;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/autoRoomAssignments`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API can be used to auto unassign a room. <p><strong>OperationId:</strong>autoUnAssignRoom</p>
     * Auto unassign room
     */
    autoUnAssignRoom(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.autoUnAssignRoomRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Reverse an advance check in for a reservation. <p><strong>OperationId:</strong>deleteAdvanceCheckIn</p>
     * Reverse Advance Checkin
     */
    deleteAdvanceCheckInRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/advanceCheckIns`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Reverse an advance check in for a reservation. <p><strong>OperationId:</strong>deleteAdvanceCheckIn</p>
     * Reverse Advance Checkin
     */
    deleteAdvanceCheckIn(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteAdvanceCheckInRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to remove an assigned room from a reservation in reserved status. <p><strong>OperationId:</strong>deleteAssignRoom</p>
     * Remove an assigned room
     */
    deleteAssignRoomRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/rooms`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.DeleteAssignRoomRequestToJSON)(requestParameters.unAssignRoomCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UnAssignedRoomFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to remove an assigned room from a reservation in reserved status. <p><strong>OperationId:</strong>deleteAssignRoom</p>
     * Remove an assigned room
     */
    deleteAssignRoom(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteAssignRoomRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to revert a reservation that has been checked in.  This will return the reservation to a Due in/Arrival status. <p><strong>OperationId:</strong>deleteCheckin</p>
     * Revert a checked-in Reservation
     */
    deleteCheckinRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.roomStatus !== undefined) {
                queryParameters['roomStatus'] = requestParameters.roomStatus;
            }
            if (requestParameters.unassignRoom !== undefined) {
                queryParameters['unassignRoom'] = requestParameters.unassignRoom;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/checkIns`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to revert a reservation that has been checked in.  This will return the reservation to a Due in/Arrival status. <p><strong>OperationId:</strong>deleteCheckin</p>
     * Revert a checked-in Reservation
     */
    deleteCheckin(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCheckinRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete a Daily Docket. <p><strong>OperationId:</strong>deleteDailyDocket</p>
     * Delete Daily Docket
     */
    deleteDailyDocketRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/dailyDocket/{docketId}`.replace(`{${"docketId"}}`, encodeURIComponent(String(requestParameters.docketId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete a Daily Docket. <p><strong>OperationId:</strong>deleteDailyDocket</p>
     * Delete Daily Docket
     */
    deleteDailyDocket(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteDailyDocketRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to remove a reservation that is already set as a Queued Reservation. <p><strong>OperationId:</strong>deleteReservationFromQueue</p>
     * Delete reservation from queue
     */
    deleteReservationFromQueueRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/queuedReservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to remove a reservation that is already set as a Queued Reservation. <p><strong>OperationId:</strong>deleteReservationFromQueue</p>
     * Delete reservation from queue
     */
    deleteReservationFromQueue(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteReservationFromQueueRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will delete room keys on a reservation. <p><strong>OperationId:</strong>deleteRoomKey</p>
     * Delete room key
     */
    deleteRoomKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/roomKeys`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API will delete room keys on a reservation. <p><strong>OperationId:</strong>deleteRoomKey</p>
     * Delete room key
     */
    deleteRoomKey(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteRoomKeyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete any service requests that exist on a reservation. <p><strong>OperationId:</strong>deleteServiceRequests</p>
     * Delete Service Requests
     */
    deleteServiceRequestsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/serviceRequests/{serviceRequestId}`.replace(`{${"serviceRequestId"}}`, encodeURIComponent(String(requestParameters.serviceRequestId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete any service requests that exist on a reservation. <p><strong>OperationId:</strong>deleteServiceRequests</p>
     * Delete Service Requests
     */
    deleteServiceRequests(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteServiceRequestsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to cancel a wake up call on a reservation. <p><strong>OperationId:</strong>deleteWakeUpCall</p>
     * Delete Wake Up Call
     */
    deleteWakeUpCallRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.callTime) {
                queryParameters['callTime'] = requestParameters.callTime;
            }
            if (requestParameters.followUpCallTime) {
                queryParameters['followUpCallTime'] = requestParameters.followUpCallTime;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
            }
            if (requestParameters.newCallTime) {
                queryParameters['newCallTime'] = requestParameters.newCallTime;
            }
            if (requestParameters.newFollowUpCallTime) {
                queryParameters['newFollowUpCallTime'] = requestParameters.newFollowUpCallTime;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/wakeUpCalls`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to cancel a wake up call on a reservation. <p><strong>OperationId:</strong>deleteWakeUpCall</p>
     * Delete Wake Up Call
     */
    deleteWakeUpCall(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteWakeUpCallRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will deliver Queue rooms text message. <p><strong>OperationId:</strong>deliverQueueRoomsTextMessage</p>
     * Deliver Queue rooms text message
     */
    deliverQueueRoomsTextMessageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/textMessages/{messageType}`.replace(`{${"messageType"}}`, encodeURIComponent(String(requestParameters.messageType))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.DeliverQueueRoomsTextMessageRequestToJSON)(requestParameters.deliverQueueRoomsTextMessage),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.QueueRoomsTextMessageFromJSON)(jsonValue));
        });
    }
    /**
     * This API will deliver Queue rooms text message. <p><strong>OperationId:</strong>deliverQueueRoomsTextMessage</p>
     * Deliver Queue rooms text message
     */
    deliverQueueRoomsTextMessage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deliverQueueRoomsTextMessageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API fetches the last run status of an Automated Intelligence Room Assignment. <p><strong>OperationId:</strong>fetchAiraLastRunStatus</p>
     * Automated Intelligence Room Assignment last run status
     */
    fetchAiraLastRunStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/ai/rooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AiraLastRunStatusInfoFromJSON)(jsonValue));
        });
    }
    /**
     * This API fetches the last run status of an Automated Intelligence Room Assignment. <p><strong>OperationId:</strong>fetchAiraLastRunStatus</p>
     * Automated Intelligence Room Assignment last run status
     */
    fetchAiraLastRunStatus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.fetchAiraLastRunStatusRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to fetch Daily Dockets. <p><strong>OperationId:</strong>getDailyDocket</p>
     * Get Daily Docket
     */
    getDailyDocketRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.docketDate !== undefined) {
                queryParameters['docketDate'] = requestParameters.docketDate.toISOString().substr(0, 10);
            }
            if (requestParameters.department !== undefined) {
                queryParameters['department'] = requestParameters.department;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/dailyDocket`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DailyDocketFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to fetch Daily Dockets. <p><strong>OperationId:</strong>getDailyDocket</p>
     * Get Daily Docket
     */
    getDailyDocket(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getDailyDocketRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Floor Plans for a property. Floor Plans provide a graphical layout of floors, rooms, and other physical features such as stairways, HVAC closets, elevators, and more <p><strong>OperationId:</strong>getFloorPlans</p>
     * Get floor plans
     */
    getFloorPlansRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.room !== undefined) {
                queryParameters['room'] = requestParameters.room;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/floorPlans`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FloorPlansFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Floor Plans for a property. Floor Plans provide a graphical layout of floors, rooms, and other physical features such as stairways, HVAC closets, elevators, and more <p><strong>OperationId:</strong>getFloorPlans</p>
     * Get floor plans
     */
    getFloorPlans(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFloorPlansRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get the fullfillment activity log. <p><strong>OperationId:</strong>getFulfillmentActivityLog</p>
     * Get the fullfillment activity log
     */
    getFulfillmentActivityLogRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.module !== undefined) {
                queryParameters['module'] = requestParameters.module;
            }
            if (requestParameters.parameterName) {
                queryParameters['parameterName'] = requestParameters.parameterName;
            }
            if (requestParameters.parameterValue) {
                queryParameters['parameterValue'] = requestParameters.parameterValue;
            }
            if (requestParameters.activityGroup !== undefined) {
                queryParameters['activityGroup'] = requestParameters.activityGroup;
            }
            if (requestParameters.activityType !== undefined) {
                queryParameters['activityType'] = requestParameters.activityType;
            }
            if (requestParameters.fromDate !== undefined) {
                queryParameters['fromDate'] = requestParameters.fromDate.toISOString().substr(0, 10);
            }
            if (requestParameters.toDate !== undefined) {
                queryParameters['toDate'] = requestParameters.toDate.toISOString().substr(0, 10);
            }
            if (requestParameters.searchText !== undefined) {
                queryParameters['searchText'] = requestParameters.searchText;
            }
            if (requestParameters.userByIds) {
                queryParameters['userByIds'] = requestParameters.userByIds;
            }
            if (requestParameters.userForIds) {
                queryParameters['userForIds'] = requestParameters.userForIds;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/fulfillmentActivityLogs`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ActivityLogFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get the fullfillment activity log. <p><strong>OperationId:</strong>getFulfillmentActivityLog</p>
     * Get the fullfillment activity log
     */
    getFulfillmentActivityLog(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFulfillmentActivityLogRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to return available rooms based on search criteria such as hotelId, hotelRoomStatus, roomType, roomFeatureCode,etc.<p><strong>OperationId:</strong>getHotelRooms</p>
     * Get hotel available rooms
     */
    getHotelRoomsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.roomNumberWildcard !== undefined) {
                queryParameters['roomNumberWildcard'] = requestParameters.roomNumberWildcard;
            }
            if (requestParameters.hotelRoomStatus) {
                queryParameters['hotelRoomStatus'] = requestParameters.hotelRoomStatus;
            }
            if (requestParameters.hotelFORoomStatus) {
                queryParameters['hotelFORoomStatus'] = requestParameters.hotelFORoomStatus;
            }
            if (requestParameters.fromRoomNumber !== undefined) {
                queryParameters['fromRoomNumber'] = requestParameters.fromRoomNumber;
            }
            if (requestParameters.toRoomNumber !== undefined) {
                queryParameters['toRoomNumber'] = requestParameters.toRoomNumber;
            }
            if (requestParameters.hotelRoomStartDate !== undefined) {
                queryParameters['hotelRoomStartDate'] = requestParameters.hotelRoomStartDate.toISOString().substr(0, 10);
            }
            if (requestParameters.hotelRoomEndDate !== undefined) {
                queryParameters['hotelRoomEndDate'] = requestParameters.hotelRoomEndDate.toISOString().substr(0, 10);
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.roomType) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.roomClass !== undefined) {
                queryParameters['roomClass'] = requestParameters.roomClass;
            }
            if (requestParameters.floor !== undefined) {
                queryParameters['floor'] = requestParameters.floor;
            }
            if (requestParameters.includeDueOut !== undefined) {
                queryParameters['includeDueOut'] = requestParameters.includeDueOut;
            }
            if (requestParameters.departureTime !== undefined) {
                queryParameters['departureTime'] = requestParameters.departureTime;
            }
            if (requestParameters.roomFeatureCode) {
                queryParameters['roomFeatureCode'] = requestParameters.roomFeatureCode;
            }
            if (requestParameters.description) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.orderSequence) {
                queryParameters['orderSequence'] = requestParameters.orderSequence;
            }
            if (requestParameters.quantity) {
                queryParameters['quantity'] = requestParameters.quantity;
            }
            if (requestParameters.smokingPreference !== undefined) {
                queryParameters['smokingPreference'] = requestParameters.smokingPreference;
            }
            if (requestParameters.includeAllRoomConditions !== undefined) {
                queryParameters['includeAllRoomConditions'] = requestParameters.includeAllRoomConditions;
            }
            if (requestParameters.includeComponentRooms !== undefined) {
                queryParameters['includeComponentRooms'] = requestParameters.includeComponentRooms;
            }
            if (requestParameters.includePseudoRooms !== undefined) {
                queryParameters['includePseudoRooms'] = requestParameters.includePseudoRooms;
            }
            if (requestParameters.includeOORoomCheck !== undefined) {
                queryParameters['includeOORoomCheck'] = requestParameters.includeOORoomCheck;
            }
            if (requestParameters.connectingRoomsOnly !== undefined) {
                queryParameters['connectingRoomsOnly'] = requestParameters.connectingRoomsOnly;
            }
            if (requestParameters.reservationId !== undefined) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.reservationIdContext !== undefined) {
                queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
            }
            if (requestParameters.reservationIdType !== undefined) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            if (requestParameters.pseudoRoomsOnly !== undefined) {
                queryParameters['pseudoRoomsOnly'] = requestParameters.pseudoRoomsOnly;
            }
            if (requestParameters.includeAttendentInRoom !== undefined) {
                queryParameters['includeAttendentInRoom'] = requestParameters.includeAttendentInRoom;
            }
            if (requestParameters.includeRotationRoom !== undefined) {
                queryParameters['includeRotationRoom'] = requestParameters.includeRotationRoom;
            }
            if (requestParameters.ownerRoomsOnly !== undefined) {
                queryParameters['ownerRoomsOnly'] = requestParameters.ownerRoomsOnly;
            }
            if (requestParameters.ownerExclusiveRoomsOnly !== undefined) {
                queryParameters['ownerExclusiveRoomsOnly'] = requestParameters.ownerExclusiveRoomsOnly;
            }
            if (requestParameters.perfectFitRoomsOnly !== undefined) {
                queryParameters['perfectFitRoomsOnly'] = requestParameters.perfectFitRoomsOnly;
            }
            if (requestParameters.orderBy !== undefined) {
                queryParameters['orderBy'] = requestParameters.orderBy;
            }
            if (requestParameters.unitGradeCodes) {
                queryParameters['unitGradeCodes'] = requestParameters.unitGradeCodes;
            }
            if (requestParameters.ownerExclusiveRoomProfileId !== undefined) {
                queryParameters['ownerExclusiveRoomProfileId'] = requestParameters.ownerExclusiveRoomProfileId;
            }
            if (requestParameters.excludeRoomFeatures) {
                queryParameters['excludeRoomFeatures'] = requestParameters.excludeRoomFeatures;
            }
            if (requestParameters.excludeFloorPreferences) {
                queryParameters['excludeFloorPreferences'] = requestParameters.excludeFloorPreferences;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.HotelRoomsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to return available rooms based on search criteria such as hotelId, hotelRoomStatus, roomType, roomFeatureCode,etc.<p><strong>OperationId:</strong>getHotelRooms</p>
     * Get hotel available rooms
     */
    getHotelRooms(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getHotelRoomsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to view the reservations  that are linked to the specified reservation. <p><strong>OperationId:</strong>getLinkedReservations</p>
     * Get linked reservations
     */
    getLinkedReservationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.additionalReservationId) {
                queryParameters['additionalReservationId'] = requestParameters.additionalReservationId;
            }
            if (requestParameters.additionalReservationIdContext) {
                queryParameters['additionalReservationIdContext'] = requestParameters.additionalReservationIdContext;
            }
            if (requestParameters.additionalReservationIdType) {
                queryParameters['additionalReservationIdType'] = requestParameters.additionalReservationIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/linked`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.LinkedReservationsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to view the reservations  that are linked to the specified reservation. <p><strong>OperationId:</strong>getLinkedReservations</p>
     * Get linked reservations
     */
    getLinkedReservations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getLinkedReservationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Queue room text message. <p><strong>OperationId:</strong>getQueueRoomsTextMessage</p>
     * Get Queue room text message
     */
    getQueueRoomsTextMessageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.reservationId !== undefined) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.reservationIdContext !== undefined) {
                queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
            }
            if (requestParameters.reservationIdType !== undefined) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            if (requestParameters.mobileNumber !== undefined) {
                queryParameters['mobileNumber'] = requestParameters.mobileNumber;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/textMessages/{messageType}`.replace(`{${"messageType"}}`, encodeURIComponent(String(requestParameters.messageType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.QueuedRoomsTextMessageFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Queue room text message. <p><strong>OperationId:</strong>getQueueRoomsTextMessage</p>
     * Get Queue room text message
     */
    getQueueRoomsTextMessage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getQueueRoomsTextMessageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to return reservation summaries for a specific property based on search criteria such as reservationId, blockId, arrivalStart, membershipNumber, roomId, etc.<p><strong>OperationId:</strong>getReservationSummaries</p>
     * Get hotel reservation summaries
     */
    getReservationSummariesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.searchType !== undefined) {
                queryParameters['searchType'] = requestParameters.searchType;
            }
            if (requestParameters.reservationId) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.reservationIdContext) {
                queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
            }
            if (requestParameters.reservationIdType) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            if (requestParameters.blockId) {
                queryParameters['blockId'] = requestParameters.blockId;
            }
            if (requestParameters.blockIdContext) {
                queryParameters['blockIdContext'] = requestParameters.blockIdContext;
            }
            if (requestParameters.blockIdType) {
                queryParameters['blockIdType'] = requestParameters.blockIdType;
            }
            if (requestParameters.arrivalEnd !== undefined) {
                queryParameters['arrivalEnd'] = requestParameters.arrivalEnd.toISOString().substr(0, 10);
            }
            if (requestParameters.arrivalStart !== undefined) {
                queryParameters['arrivalStart'] = requestParameters.arrivalStart.toISOString().substr(0, 10);
            }
            if (requestParameters.departureEnd !== undefined) {
                queryParameters['departureEnd'] = requestParameters.departureEnd.toISOString().substr(0, 10);
            }
            if (requestParameters.departureStart !== undefined) {
                queryParameters['departureStart'] = requestParameters.departureStart.toISOString().substr(0, 10);
            }
            if (requestParameters.stayOnEnd !== undefined) {
                queryParameters['stayOnEnd'] = requestParameters.stayOnEnd.toISOString().substr(0, 10);
            }
            if (requestParameters.stayOnStart !== undefined) {
                queryParameters['stayOnStart'] = requestParameters.stayOnStart.toISOString().substr(0, 10);
            }
            if (requestParameters.createdOnEnd !== undefined) {
                queryParameters['createdOnEnd'] = requestParameters.createdOnEnd.toISOString().substr(0, 10);
            }
            if (requestParameters.createOnStart !== undefined) {
                queryParameters['createOnStart'] = requestParameters.createOnStart.toISOString().substr(0, 10);
            }
            if (requestParameters.depositDateEnd !== undefined) {
                queryParameters['depositDateEnd'] = requestParameters.depositDateEnd.toISOString().substr(0, 10);
            }
            if (requestParameters.depositDateStart !== undefined) {
                queryParameters['depositDateStart'] = requestParameters.depositDateStart.toISOString().substr(0, 10);
            }
            if (requestParameters.dateCriteriaExpectedArrivalEndTime !== undefined) {
                queryParameters['dateCriteriaExpectedArrivalEndTime'] = requestParameters.dateCriteriaExpectedArrivalEndTime;
            }
            if (requestParameters.dateCriteriaExpectedArrivalStartTime !== undefined) {
                queryParameters['dateCriteriaExpectedArrivalStartTime'] = requestParameters.dateCriteriaExpectedArrivalStartTime;
            }
            if (requestParameters.depositDueDateEnd !== undefined) {
                queryParameters['depositDueDateEnd'] = requestParameters.depositDueDateEnd.toISOString().substr(0, 10);
            }
            if (requestParameters.depositDueDateStart !== undefined) {
                queryParameters['depositDueDateStart'] = requestParameters.depositDueDateStart.toISOString().substr(0, 10);
            }
            if (requestParameters.expectedReturnEndTime !== undefined) {
                queryParameters['expectedReturnEndTime'] = requestParameters.expectedReturnEndTime;
            }
            if (requestParameters.expectedReturnStartTime !== undefined) {
                queryParameters['expectedReturnStartTime'] = requestParameters.expectedReturnStartTime;
            }
            if (requestParameters.membershipNumber !== undefined) {
                queryParameters['membershipNumber'] = requestParameters.membershipNumber;
            }
            if (requestParameters.anyVIPStatus !== undefined) {
                queryParameters['anyVIPStatus'] = requestParameters.anyVIPStatus;
            }
            if (requestParameters.vipStatusCodes) {
                queryParameters['vipStatusCodes'] = requestParameters.vipStatusCodes;
            }
            if (requestParameters.roomId !== undefined) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            if (requestParameters.lastName !== undefined) {
                queryParameters['lastName'] = requestParameters.lastName;
            }
            if (requestParameters.firstName !== undefined) {
                queryParameters['firstName'] = requestParameters.firstName;
            }
            if (requestParameters.blockCode !== undefined) {
                queryParameters['blockCode'] = requestParameters.blockCode;
            }
            if (requestParameters.companyName !== undefined) {
                queryParameters['companyName'] = requestParameters.companyName;
            }
            if (requestParameters.travelAgentName !== undefined) {
                queryParameters['travelAgentName'] = requestParameters.travelAgentName;
            }
            if (requestParameters.creditCardNumber !== undefined) {
                queryParameters['creditCardNumber'] = requestParameters.creditCardNumber;
            }
            if (requestParameters.customReference !== undefined) {
                queryParameters['customReference'] = requestParameters.customReference;
            }
            if (requestParameters.externalReference !== undefined) {
                queryParameters['externalReference'] = requestParameters.externalReference;
            }
            if (requestParameters.attributeName) {
                queryParameters['attributeName'] = requestParameters.attributeName;
            }
            if (requestParameters.orderType) {
                queryParameters['orderType'] = requestParameters.orderType;
            }
            if (requestParameters.expectedArrivalEndTime !== undefined) {
                queryParameters['expectedArrivalEndTime'] = requestParameters.expectedArrivalEndTime.toISOString().substr(0, 10);
            }
            if (requestParameters.expectedArrivalStartTime !== undefined) {
                queryParameters['expectedArrivalStartTime'] = requestParameters.expectedArrivalStartTime.toISOString().substr(0, 10);
            }
            if (requestParameters.roomTypes) {
                queryParameters['roomTypes'] = requestParameters.roomTypes;
            }
            if (requestParameters.roomStatuses) {
                queryParameters['roomStatuses'] = requestParameters.roomStatuses;
            }
            if (requestParameters.paymentMethod) {
                queryParameters['paymentMethod'] = requestParameters.paymentMethod;
            }
            if (requestParameters.indicator) {
                queryParameters['indicator'] = requestParameters.indicator;
            }
            if (requestParameters.fetchSummaryInstructions) {
                queryParameters['fetchSummaryInstructions'] = requestParameters.fetchSummaryInstructions;
            }
            if (requestParameters.allowedAction) {
                queryParameters['allowedAction'] = requestParameters.allowedAction;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservationSummaries`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ShortReservationFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to return reservation summaries for a specific property based on search criteria such as reservationId, blockId, arrivalStart, membershipNumber, roomId, etc.<p><strong>OperationId:</strong>getReservationSummaries</p>
     * Get hotel reservation summaries
     */
    getReservationSummaries(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationSummariesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to fetch the reservations for billing. <p><strong>OperationId:</strong>getReservationsForBilling</p>
     * Get Reservations for billing
     */
    getReservationsForBillingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.searchType !== undefined) {
                queryParameters['searchType'] = requestParameters.searchType;
            }
            if (requestParameters.multipleHotelsSearchList) {
                queryParameters['multipleHotelsSearchList'] = requestParameters.multipleHotelsSearchList;
            }
            if (requestParameters.superSearch !== undefined) {
                queryParameters['superSearch'] = requestParameters.superSearch;
            }
            if (requestParameters.reservationId) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.reservationIdContext) {
                queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
            }
            if (requestParameters.reservationIdType) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            if (requestParameters.nights !== undefined) {
                queryParameters['nights'] = requestParameters.nights;
            }
            if (requestParameters.arrivalEnd !== undefined) {
                queryParameters['arrivalEnd'] = requestParameters.arrivalEnd.toISOString().substr(0, 10);
            }
            if (requestParameters.arrivalStart !== undefined) {
                queryParameters['arrivalStart'] = requestParameters.arrivalStart.toISOString().substr(0, 10);
            }
            if (requestParameters.departureEnd !== undefined) {
                queryParameters['departureEnd'] = requestParameters.departureEnd.toISOString().substr(0, 10);
            }
            if (requestParameters.departureStart !== undefined) {
                queryParameters['departureStart'] = requestParameters.departureStart.toISOString().substr(0, 10);
            }
            if (requestParameters.reservationProfileType) {
                queryParameters['reservationProfileType'] = requestParameters.reservationProfileType;
            }
            if (requestParameters.attachedProfileName) {
                queryParameters['attachedProfileName'] = requestParameters.attachedProfileName;
            }
            if (requestParameters.attachedProfileId) {
                queryParameters['attachedProfileId'] = requestParameters.attachedProfileId;
            }
            if (requestParameters.attachedProfileIdContext) {
                queryParameters['attachedProfileIdContext'] = requestParameters.attachedProfileIdContext;
            }
            if (requestParameters.attachedProfileIdType) {
                queryParameters['attachedProfileIdType'] = requestParameters.attachedProfileIdType;
            }
            if (requestParameters.resGuestId !== undefined) {
                queryParameters['resGuestId'] = requestParameters.resGuestId;
            }
            if (requestParameters.resGuestIdContext !== undefined) {
                queryParameters['resGuestIdContext'] = requestParameters.resGuestIdContext;
            }
            if (requestParameters.resGuestIdType !== undefined) {
                queryParameters['resGuestIdType'] = requestParameters.resGuestIdType;
            }
            if (requestParameters.membershipId !== undefined) {
                queryParameters['membershipId'] = requestParameters.membershipId;
            }
            if (requestParameters.membershipLevelCodes) {
                queryParameters['membershipLevelCodes'] = requestParameters.membershipLevelCodes;
            }
            if (requestParameters.membershipTypeCodes) {
                queryParameters['membershipTypeCodes'] = requestParameters.membershipTypeCodes;
            }
            if (requestParameters.surname !== undefined) {
                queryParameters['surname'] = requestParameters.surname;
            }
            if (requestParameters.givenName !== undefined) {
                queryParameters['givenName'] = requestParameters.givenName;
            }
            if (requestParameters.cityName !== undefined) {
                queryParameters['cityName'] = requestParameters.cityName;
            }
            if (requestParameters.postalCode !== undefined) {
                queryParameters['postalCode'] = requestParameters.postalCode;
            }
            if (requestParameters.state !== undefined) {
                queryParameters['state'] = requestParameters.state;
            }
            if (requestParameters.countryCode !== undefined) {
                queryParameters['countryCode'] = requestParameters.countryCode;
            }
            if (requestParameters.streetAddress !== undefined) {
                queryParameters['streetAddress'] = requestParameters.streetAddress;
            }
            if (requestParameters.bookingChannelCode !== undefined) {
                queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
            }
            if (requestParameters.blockHotelId !== undefined) {
                queryParameters['blockHotelId'] = requestParameters.blockHotelId;
            }
            if (requestParameters.blockId) {
                queryParameters['blockId'] = requestParameters.blockId;
            }
            if (requestParameters.blockIdContext) {
                queryParameters['blockIdContext'] = requestParameters.blockIdContext;
            }
            if (requestParameters.blockIdType) {
                queryParameters['blockIdType'] = requestParameters.blockIdType;
            }
            if (requestParameters.recordLocator !== undefined) {
                queryParameters['recordLocator'] = requestParameters.recordLocator;
            }
            if (requestParameters.orderByAttributeName) {
                queryParameters['orderByAttributeName'] = requestParameters.orderByAttributeName;
            }
            if (requestParameters.orderType) {
                queryParameters['orderType'] = requestParameters.orderType;
            }
            if (requestParameters.roomId !== undefined) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            if (requestParameters.roomType) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            if (requestParameters.excludeNoPost !== undefined) {
                queryParameters['excludeNoPost'] = requestParameters.excludeNoPost;
            }
            if (requestParameters.excludePMRooms !== undefined) {
                queryParameters['excludePMRooms'] = requestParameters.excludePMRooms;
            }
            if (requestParameters.hasOpenFolio !== undefined) {
                queryParameters['hasOpenFolio'] = requestParameters.hasOpenFolio;
            }
            if (requestParameters.excludedReservationIds) {
                queryParameters['excludedReservationIds'] = requestParameters.excludedReservationIds;
            }
            if (requestParameters.excludedReservationIdsContext) {
                queryParameters['excludedReservationIdsContext'] = requestParameters.excludedReservationIdsContext;
            }
            if (requestParameters.excludedReservationIdsType) {
                queryParameters['excludedReservationIdsType'] = requestParameters.excludedReservationIdsType;
            }
            if (requestParameters.advanceCheckedIn !== undefined) {
                queryParameters['advanceCheckedIn'] = requestParameters.advanceCheckedIn;
            }
            if (requestParameters.searchTypesSearchType) {
                queryParameters['searchTypesSearchType'] = requestParameters.searchTypesSearchType;
            }
            if (requestParameters.reservationStatus) {
                queryParameters['reservationStatus'] = requestParameters.reservationStatus;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/billingReservations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReservationsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to fetch the reservations for billing. <p><strong>OperationId:</strong>getReservationsForBilling</p>
     * Get Reservations for billing
     */
    getReservationsForBilling(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationsForBillingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Fetch all current reservations that are Queued Reservations.  These reservations are guests that have arrived at the hotel, but their room isn\'t ready, so they\'re sitting in a queue.  <p><strong>OperationId:</strong>getReservationsInQueue</p>
     * Get the reservation in queue
     */
    getReservationsInQueueRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.roomClassCodes) {
                queryParameters['roomClassCodes'] = requestParameters.roomClassCodes;
            }
            if (requestParameters.roomTypeCodes) {
                queryParameters['roomTypeCodes'] = requestParameters.roomTypeCodes;
            }
            if (requestParameters.roomNumberWildCard !== undefined) {
                queryParameters['roomNumberWildCard'] = requestParameters.roomNumberWildCard;
            }
            if (requestParameters.guestNameWildCard !== undefined) {
                queryParameters['guestNameWildCard'] = requestParameters.guestNameWildCard;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/queuedReservations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReservationsInQueueFromJSON)(jsonValue));
        });
    }
    /**
     * Fetch all current reservations that are Queued Reservations.  These reservations are guests that have arrived at the hotel, but their room isn\'t ready, so they\'re sitting in a queue.  <p><strong>OperationId:</strong>getReservationsInQueue</p>
     * Get the reservation in queue
     */
    getReservationsInQueue(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReservationsInQueueRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API is used to get reservations for batch CC Authorization. <p><strong>OperationId:</strong>getResvForBatchCCAuth</p>
     * Get resrvation for batch CCAuth
     */
    getResvForBatchCCAuthRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.guestName !== undefined) {
                queryParameters['guestName'] = requestParameters.guestName;
            }
            if (requestParameters.room !== undefined) {
                queryParameters['room'] = requestParameters.room;
            }
            if (requestParameters.cardType) {
                queryParameters['cardType'] = requestParameters.cardType;
            }
            if (requestParameters.userDefinedCardType) {
                queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/authorizationReservations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ResvForBatchCCAutFromJSON)(jsonValue));
        });
    }
    /**
     * This API is used to get reservations for batch CC Authorization. <p><strong>OperationId:</strong>getResvForBatchCCAuth</p>
     * Get resrvation for batch CCAuth
     */
    getResvForBatchCCAuth(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getResvForBatchCCAuthRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This Api will getch the room interface status. <p><strong>OperationId:</strong>getRoomInterfaceStatus</p>
     * Get room interface status
     */
    getRoomInterfaceStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.interfaceName !== undefined) {
                queryParameters['interfaceName'] = requestParameters.interfaceName;
            }
            if (requestParameters.interfaceType !== undefined) {
                queryParameters['interfaceType'] = requestParameters.interfaceType;
            }
            if (requestParameters.logo !== undefined) {
                queryParameters['logo'] = requestParameters.logo;
            }
            if (requestParameters.machineName !== undefined) {
                queryParameters['machineName'] = requestParameters.machineName;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.activeFlag !== undefined) {
                queryParameters['activeFlag'] = requestParameters.activeFlag;
            }
            if (requestParameters.code) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.blockId !== undefined) {
                queryParameters['blockId'] = requestParameters.blockId;
            }
            if (requestParameters.blockIdContext !== undefined) {
                queryParameters['blockIdContext'] = requestParameters.blockIdContext;
            }
            if (requestParameters.blockIdType !== undefined) {
                queryParameters['blockIdType'] = requestParameters.blockIdType;
            }
            if (requestParameters.roomId !== undefined) {
                queryParameters['roomId'] = requestParameters.roomId;
            }
            if (requestParameters.lastName !== undefined) {
                queryParameters['lastName'] = requestParameters.lastName;
            }
            if (requestParameters.firstName !== undefined) {
                queryParameters['firstName'] = requestParameters.firstName;
            }
            if (requestParameters.reservationIds) {
                queryParameters['reservationIds'] = requestParameters.reservationIds;
            }
            if (requestParameters.reservationIdsContext) {
                queryParameters['reservationIdsContext'] = requestParameters.reservationIdsContext;
            }
            if (requestParameters.reservationIdsType) {
                queryParameters['reservationIdsType'] = requestParameters.reservationIdsType;
            }
            if (requestParameters.arrivalEnd !== undefined) {
                queryParameters['arrivalEnd'] = requestParameters.arrivalEnd.toISOString().substr(0, 10);
            }
            if (requestParameters.arrivalStart !== undefined) {
                queryParameters['arrivalStart'] = requestParameters.arrivalStart.toISOString().substr(0, 10);
            }
            if (requestParameters.expectedArrivalEndTime !== undefined) {
                queryParameters['expectedArrivalEndTime'] = requestParameters.expectedArrivalEndTime;
            }
            if (requestParameters.expectedArrivalStartTime !== undefined) {
                queryParameters['expectedArrivalStartTime'] = requestParameters.expectedArrivalStartTime;
            }
            if (requestParameters.specialCodes) {
                queryParameters['specialCodes'] = requestParameters.specialCodes;
            }
            if (requestParameters.floorCodes) {
                queryParameters['floorCodes'] = requestParameters.floorCodes;
            }
            if (requestParameters.roomFeatureCodes) {
                queryParameters['roomFeatureCodes'] = requestParameters.roomFeatureCodes;
            }
            if (requestParameters.roomClassCodes) {
                queryParameters['roomClassCodes'] = requestParameters.roomClassCodes;
            }
            if (requestParameters.roomStatus) {
                queryParameters['roomStatus'] = requestParameters.roomStatus;
            }
            if (requestParameters.guaranteeCode !== undefined) {
                queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
            }
            if (requestParameters.reservationStatus) {
                queryParameters['reservationStatus'] = requestParameters.reservationStatus;
            }
            if (requestParameters.includeLinkedReservations !== undefined) {
                queryParameters['includeLinkedReservations'] = requestParameters.includeLinkedReservations;
            }
            if (requestParameters.includeBlocks !== undefined) {
                queryParameters['includeBlocks'] = requestParameters.includeBlocks;
            }
            if (requestParameters.orderBy !== undefined) {
                queryParameters['orderBy'] = requestParameters.orderBy;
            }
            if (requestParameters.orderType !== undefined) {
                queryParameters['orderType'] = requestParameters.orderType;
            }
            if (requestParameters.expectedReturnEndTime !== undefined) {
                queryParameters['expectedReturnEndTime'] = requestParameters.expectedReturnEndTime;
            }
            if (requestParameters.expectedReturnStartTime !== undefined) {
                queryParameters['expectedReturnStartTime'] = requestParameters.expectedReturnStartTime;
            }
            if (requestParameters.advanceCheckedIn !== undefined) {
                queryParameters['advanceCheckedIn'] = requestParameters.advanceCheckedIn;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/interfaces/{interfaceId}/roomStatuses`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoomInterfaceStatusFromJSON)(jsonValue));
        });
    }
    /**
     * This Api will getch the room interface status. <p><strong>OperationId:</strong>getRoomInterfaceStatus</p>
     * Get room interface status
     */
    getRoomInterfaceStatus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRoomInterfaceStatusRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use thie API to get key encoder interface configuration details. <p><strong>OperationId:</strong>getRoomKeyInterfaceDetails</p>
     * Get key encoder interface configuration details
     */
    getRoomKeyInterfaceDetailsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.roomNumbersCode) {
                queryParameters['roomNumbersCode'] = requestParameters.roomNumbersCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/keyInterfaces`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoomKeyInterfaceDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use thie API to get key encoder interface configuration details. <p><strong>OperationId:</strong>getRoomKeyInterfaceDetails</p>
     * Get key encoder interface configuration details
     */
    getRoomKeyInterfaceDetails(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRoomKeyInterfaceDetailsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to retrieve any existing room key information for a reservation. <p><strong>OperationId:</strong>getRoomKeys</p>
     * Fetch the room keys
     */
    getRoomKeysRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/roomKeys`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoomKeyInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to retrieve any existing room key information for a reservation. <p><strong>OperationId:</strong>getRoomKeys</p>
     * Fetch the room keys
     */
    getRoomKeys(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRoomKeysRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will return the history of room change/room moves for a specified reservation. <p><strong>OperationId:</strong>getRoomMoveHistory</p>
     * Get room move history of a reservation
     */
    getRoomMoveHistoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.reservationIdContext !== undefined) {
                queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
            }
            if (requestParameters.reservationIdType !== undefined) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/roomMoveHistory`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoomMoveHistoryFromJSON)(jsonValue));
        });
    }
    /**
     * This API will return the history of room change/room moves for a specified reservation. <p><strong>OperationId:</strong>getRoomMoveHistory</p>
     * Get room move history of a reservation
     */
    getRoomMoveHistory(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRoomMoveHistoryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to retrieve any service requests that exist on a reservation. <p><strong>OperationId:</strong>getServiceRequests</p>
     * Get Service Requests
     */
    getServiceRequestsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.code) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.status) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.priorityCodes) {
                queryParameters['priorityCodes'] = requestParameters.priorityCodes;
            }
            if (requestParameters.departmentCodes) {
                queryParameters['departmentCodes'] = requestParameters.departmentCodes;
            }
            if (requestParameters.reservationId !== undefined) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.reservationIdContext !== undefined) {
                queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
            }
            if (requestParameters.reservationIdType !== undefined) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            if (requestParameters.profileId !== undefined) {
                queryParameters['profileId'] = requestParameters.profileId;
            }
            if (requestParameters.profileIdContext !== undefined) {
                queryParameters['profileIdContext'] = requestParameters.profileIdContext;
            }
            if (requestParameters.profileIdType !== undefined) {
                queryParameters['profileIdType'] = requestParameters.profileIdType;
            }
            if (requestParameters.room !== undefined) {
                queryParameters['room'] = requestParameters.room;
            }
            if (requestParameters.creationEndDate !== undefined) {
                queryParameters['creationEndDate'] = requestParameters.creationEndDate.toISOString().substr(0, 10);
            }
            if (requestParameters.creationStartDate !== undefined) {
                queryParameters['creationStartDate'] = requestParameters.creationStartDate.toISOString().substr(0, 10);
            }
            if (requestParameters.closedEndDate !== undefined) {
                queryParameters['closedEndDate'] = requestParameters.closedEndDate.toISOString().substr(0, 10);
            }
            if (requestParameters.closedStartDate !== undefined) {
                queryParameters['closedStartDate'] = requestParameters.closedStartDate.toISOString().substr(0, 10);
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/serviceRequests`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ServiceRequestsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to retrieve any service requests that exist on a reservation. <p><strong>OperationId:</strong>getServiceRequests</p>
     * Get Service Requests
     */
    getServiceRequests(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getServiceRequestsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to fetch the suggested rooms. <p><strong>OperationId:</strong>getSuggestedRooms</p>
     * Get Suggested Rooms
     */
    getSuggestedRoomsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.roomType !== undefined) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate.toISOString().substr(0, 10);
            }
            if (requestParameters.nights !== undefined) {
                queryParameters['nights'] = requestParameters.nights;
            }
            if (requestParameters.suggestedRoomsInstructions) {
                queryParameters['suggestedRoomsInstructions'] = requestParameters.suggestedRoomsInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/suggestedRooms`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SuggestedRoomsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to fetch the suggested rooms. <p><strong>OperationId:</strong>getSuggestedRooms</p>
     * Get Suggested Rooms
     */
    getSuggestedRooms(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSuggestedRoomsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use thisAPI to get existing wake up call on an in-house reservation. <p><strong>OperationId:</strong>getWakeUpCall</p>
     * Get Wake Up Call
     */
    getWakeUpCallRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchCancelled !== undefined) {
                queryParameters['fetchCancelled'] = requestParameters.fetchCancelled;
            }
            if (requestParameters.fetchCompleted !== undefined) {
                queryParameters['fetchCompleted'] = requestParameters.fetchCompleted;
            }
            if (requestParameters.fetchNoAnswer !== undefined) {
                queryParameters['fetchNoAnswer'] = requestParameters.fetchNoAnswer;
            }
            if (requestParameters.fetchPending !== undefined) {
                queryParameters['fetchPending'] = requestParameters.fetchPending;
            }
            if (requestParameters.idExtension !== undefined) {
                queryParameters['idExtension'] = requestParameters.idExtension;
            }
            if (requestParameters.reservationIdContext !== undefined) {
                queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
            }
            if (requestParameters.reservationIdType !== undefined) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            if (requestParameters.beginDate !== undefined) {
                queryParameters['beginDate'] = requestParameters.beginDate.toISOString().substr(0, 10);
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate.toISOString().substr(0, 10);
            }
            if (requestParameters.beginTime !== undefined) {
                queryParameters['beginTime'] = requestParameters.beginTime;
            }
            if (requestParameters.endTime !== undefined) {
                queryParameters['endTime'] = requestParameters.endTime;
            }
            if (requestParameters.room) {
                queryParameters['room'] = requestParameters.room;
            }
            if (requestParameters.blockId !== undefined) {
                queryParameters['blockId'] = requestParameters.blockId;
            }
            if (requestParameters.guestName !== undefined) {
                queryParameters['guestName'] = requestParameters.guestName;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/wakeUpCalls`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.WakeUpCallsFromJSON)(jsonValue));
        });
    }
    /**
     * Use thisAPI to get existing wake up call on an in-house reservation. <p><strong>OperationId:</strong>getWakeUpCall</p>
     * Get Wake Up Call
     */
    getWakeUpCall(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getWakeUpCallRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to change rooms for an in-house guest. <p><strong>OperationId:</strong>moveInHouseGuest</p>
     * Move in-house guest
     */
    moveInHouseGuestRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/rooms/{roomId}/roomMoves`.replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.MoveInHouseGuestRequestToJSON)(requestParameters.moveInHouseGuest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MovedInHouseGuestFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to change rooms for an in-house guest. <p><strong>OperationId:</strong>moveInHouseGuest</p>
     * Move in-house guest
     */
    moveInHouseGuest(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.moveInHouseGuestRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to place Rooms On Hold. <p><strong>OperationId:</strong>placeRoomsOnHold</p>
     * Place Rooms On Hold
     */
    placeRoomsOnHoldRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rooms/onHold`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PlaceRoomsOnHoldRequestToJSON)(requestParameters.holdRooms),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to place Rooms On Hold. <p><strong>OperationId:</strong>placeRoomsOnHold</p>
     * Place Rooms On Hold
     */
    placeRoomsOnHold(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.placeRoomsOnHoldRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * At times, when guests arrive to the property prior to a room being ready, you can flag a reservation as Advance Checked In for arrivals due in on the current business date. This enables guests to post charges to their reservation folio prior to check in, and helps the rooms management team prioritize room cleaning and assignment. Individual reservations (including Walk In reservations, Pre Registered reservations, and reservations that are in Queue) and group block reservations can be Advance Checked In. <p><strong>OperationId:</strong>postAdvanceCheckIn</p>
     * Advance checkin a reservation
     */
    postAdvanceCheckInRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/advanceCheckIns`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostAdvanceCheckInRequestToJSON)(requestParameters.advanceCheckInReservation),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * At times, when guests arrive to the property prior to a room being ready, you can flag a reservation as Advance Checked In for arrivals due in on the current business date. This enables guests to post charges to their reservation folio prior to check in, and helps the rooms management team prioritize room cleaning and assignment. Individual reservations (including Walk In reservations, Pre Registered reservations, and reservations that are in Queue) and group block reservations can be Advance Checked In. <p><strong>OperationId:</strong>postAdvanceCheckIn</p>
     * Advance checkin a reservation
     */
    postAdvanceCheckIn(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postAdvanceCheckInRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to check in a guest reservation.  The reservation needs to be \'due in\' status.  The API also provides an option to select an available room. <p><strong>OperationId:</strong>postCheckIn</p>
     * Checks in a guest
     */
    postCheckInRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/checkIns`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostCheckInRequestToJSON)(requestParameters.reservation),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CheckedinReservationFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to check in a guest reservation.  The reservation needs to be \'due in\' status.  The API also provides an option to select an available room. <p><strong>OperationId:</strong>postCheckIn</p>
     * Checks in a guest
     */
    postCheckIn(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCheckInRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create a Daily Docket. <p><strong>OperationId:</strong>postDailyDocket</p>
     * Create Daily Docket
     */
    postDailyDocketRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/dailyDocket`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutDailyDocketRequestToJSON)(requestParameters.dailyDocket),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create a Daily Docket. <p><strong>OperationId:</strong>postDailyDocket</p>
     * Create Daily Docket
     */
    postDailyDocket(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postDailyDocketRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to perform a mass advance checkin for reservations. <p><strong>OperationId:</strong>postMassAdvanceCheckIn</p>
     * Mass Advance Check in Reservations
     */
    postMassAdvanceCheckInRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/massAdvanceCheckIns`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostMassAdvanceCheckInRequestToJSON)(requestParameters.massAdvanceCheckInReservations),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to perform a mass advance checkin for reservations. <p><strong>OperationId:</strong>postMassAdvanceCheckIn</p>
     * Mass Advance Check in Reservations
     */
    postMassAdvanceCheckIn(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postMassAdvanceCheckInRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to perform a mass Checkin for reservations. <p><strong>OperationId:</strong>postMassCheckIn</p>
     * Mass checkin reservations
     */
    postMassCheckInRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/massCheckIns`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostMassCheckInRequestToJSON)(requestParameters.massCheckInReservations),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to perform a mass Checkin for reservations. <p><strong>OperationId:</strong>postMassCheckIn</p>
     * Mass checkin reservations
     */
    postMassCheckIn(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postMassCheckInRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to assign a room to a reservation in reserved status. Override instructions are available to assign a room despite warnings returned in the response message. <p><strong>OperationId:</strong>postRoomAssignment</p>
     * Assign a Room to a Reservation
     */
    postRoomAssignmentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/roomAssignments`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostRoomAssignmentRequestToJSON)(requestParameters.room),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AssignedRoomFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to assign a room to a reservation in reserved status. Override instructions are available to assign a room despite warnings returned in the response message. <p><strong>OperationId:</strong>postRoomAssignment</p>
     * Assign a Room to a Reservation
     */
    postRoomAssignment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postRoomAssignmentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create a room key request for a reservation to the active Door Locking System Property Interface. <p><strong>OperationId:</strong>postRoomKey</p>
     * Requests room key(s)
     */
    postRoomKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/roomKeys`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostRoomKeyRequestToJSON)(requestParameters.roomKey),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoomKeyDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create a room key request for a reservation to the active Door Locking System Property Interface. <p><strong>OperationId:</strong>postRoomKey</p>
     * Requests room key(s)
     */
    postRoomKey(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postRoomKeyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Service Request functionality provides the ability to define, track and report Service Requests on a reservation.  They go through a preset flow including creating the request, completing it and then following up on the resolution with the guest. <p><strong>OperationId:</strong>postServiceRequests</p>
     * Create Service Requests
     */
    postServiceRequestsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/serviceRequests`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutServiceRequestsRequestToJSON)(requestParameters.serviceRequestsInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Service Request functionality provides the ability to define, track and report Service Requests on a reservation.  They go through a preset flow including creating the request, completing it and then following up on the resolution with the guest. <p><strong>OperationId:</strong>postServiceRequests</p>
     * Create Service Requests
     */
    postServiceRequests(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postServiceRequestsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can set, view, and cancel wake up call for individual reservations. The reservation must be in-house (checked-in) status to set a wake up call. <p><strong>OperationId:</strong>postWakeUpCall</p>
     * Create Wake Up Call
     */
    postWakeUpCallRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/wakeUpCalls`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutWakeUpCallRequestToJSON)(requestParameters.wakeUpCalls),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can set, view, and cancel wake up call for individual reservations. The reservation must be in-house (checked-in) status to set a wake up call. <p><strong>OperationId:</strong>postWakeUpCall</p>
     * Create Wake Up Call
     */
    postWakeUpCall(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postWakeUpCallRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API is used to process batch CC Authorization. <p><strong>OperationId:</strong>processBatchCCAuth</p>
     * Process batch CC Auth
     */
    processBatchCCAuthRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/batchReservationAuthorizations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ProcessBatchCCAuthRequestToJSON)(requestParameters.batchCCAuth),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BatchCCAuthToProcessFromJSON)(jsonValue));
        });
    }
    /**
     * This API is used to process batch CC Authorization. <p><strong>OperationId:</strong>processBatchCCAuth</p>
     * Process batch CC Auth
     */
    processBatchCCAuth(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.processBatchCCAuthRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to change Daily Docket. <p><strong>OperationId:</strong>putDailyDocket</p>
     * Change Daily Docket
     */
    putDailyDocketRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/dailyDocket`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutDailyDocketRequestToJSON)(requestParameters.dailyDocket),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to change Daily Docket. <p><strong>OperationId:</strong>putDailyDocket</p>
     * Change Daily Docket
     */
    putDailyDocket(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putDailyDocketRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API can be used to change the resrevations Queue Priority. <p><strong>OperationId:</strong>putReservationQueuePriority</p>
     * Change the reservation queue priority
     */
    putReservationQueuePriorityRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/priority`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutReservationQueuePriorityRequestToJSON)(requestParameters.reservationQueuePriorityNumber),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReservationQueuePriorityFromJSON)(jsonValue));
        });
    }
    /**
     * This API can be used to change the resrevations Queue Priority. <p><strong>OperationId:</strong>putReservationQueuePriority</p>
     * Change the reservation queue priority
     */
    putReservationQueuePriority(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putReservationQueuePriorityRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to change room interface status. <p><strong>OperationId:</strong>putRoomInterfaceStatus</p>
     * Change room interface status
     */
    putRoomInterfaceStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/interfaces/{interfaceId}/roomStatuses`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutRoomInterfaceStatusRequestToJSON)(requestParameters.reservationInterface),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to change room interface status. <p><strong>OperationId:</strong>putRoomInterfaceStatus</p>
     * Change room interface status
     */
    putRoomInterfaceStatus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putRoomInterfaceStatusRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * When MUTIPLE_GUEST_KEY is active this methods can be used to update information on the room keys such as balance amount and keyOptions. reservationId and hotelId are required path parameters. The body parameter roomKeys includes information about the encoder, room, key type, key validity, key options  and   guests information for multiple keys
     * Update room keys.
     */
    putRoomKeysRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/roomKeys`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.RoomKeyMultipleGuestsToJSON)(requestParameters.roomKeys),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UpdateRoomKeysFromJSON)(jsonValue));
        });
    }
    /**
     * When MUTIPLE_GUEST_KEY is active this methods can be used to update information on the room keys such as balance amount and keyOptions. reservationId and hotelId are required path parameters. The body parameter roomKeys includes information about the encoder, room, key type, key validity, key options  and   guests information for multiple keys
     * Update room keys.
     */
    putRoomKeys(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putRoomKeysRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to modify any service requests that exist on a reservation. <p><strong>OperationId:</strong>putServiceRequests</p>
     * Change Service Requests
     */
    putServiceRequestsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/serviceRequests`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutServiceRequestsRequestToJSON)(requestParameters.serviceRequestsInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to modify any service requests that exist on a reservation. <p><strong>OperationId:</strong>putServiceRequests</p>
     * Change Service Requests
     */
    putServiceRequests(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putServiceRequestsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update an existing wake up call.  Wake up call can only be added to in-house reservations. <p><strong>OperationId:</strong>putWakeUpCall</p>
     * Change Wake Up Call
     */
    putWakeUpCallRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/wakeUpCalls`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutWakeUpCallRequestToJSON)(requestParameters.wakeUpCalls),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ChangedWakeUpCallsFromJSON)(jsonValue));
        });
    }
    /**
     * Update an existing wake up call.  Wake up call can only be added to in-house reservations. <p><strong>OperationId:</strong>putWakeUpCall</p>
     * Change Wake Up Call
     */
    putWakeUpCall(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putWakeUpCallRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API can be used to read the Room Key. <p><strong>OperationId:</strong>readRoomKey</p>
     * Read room key
     */
    readRoomKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.encoderTerminal !== undefined) {
                queryParameters['encoderTerminal'] = requestParameters.encoderTerminal;
            }
            if (requestParameters.encoderId !== undefined) {
                queryParameters['encoderId'] = requestParameters.encoderId;
            }
            if (requestParameters.encoderIdContext !== undefined) {
                queryParameters['encoderIdContext'] = requestParameters.encoderIdContext;
            }
            if (requestParameters.encoderIdType !== undefined) {
                queryParameters['encoderIdType'] = requestParameters.encoderIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/roomKeysDetails`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoomKeyStatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API can be used to read the Room Key. <p><strong>OperationId:</strong>readRoomKey</p>
     * Read room key
     */
    readRoomKey(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readRoomKeyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to release Rooms On Hold. <p><strong>OperationId:</strong>releaseRoomsOnHold</p>
     * Release Rooms On Hold
     */
    releaseRoomsOnHoldRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rooms/onHold/release`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PlaceRoomsOnHoldRequestToJSON)(requestParameters.holdRooms),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to release Rooms On Hold. <p><strong>OperationId:</strong>releaseRoomsOnHold</p>
     * Release Rooms On Hold
     */
    releaseRoomsOnHold(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.releaseRoomsOnHoldRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to quickly shift rooms for two reservations. <p><strong>OperationId:</strong>shiftRooms</p>
     * Operation for Shift Rooms between two reservations
     */
    shiftRoomsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/sourceReservations/{sourceReservationId}/targetReservations/{targetReservationId}/shiftRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"sourceReservationId"}}`, encodeURIComponent(String(requestParameters.sourceReservationId))).replace(`{${"targetReservationId"}}`, encodeURIComponent(String(requestParameters.targetReservationId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ShiftRoomsRequestToJSON)(requestParameters.shiftRooms),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to quickly shift rooms for two reservations. <p><strong>OperationId:</strong>shiftRooms</p>
     * Operation for Shift Rooms between two reservations
     */
    shiftRooms(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.shiftRoomsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to quickly swap rooms for two reservations. <p><strong>OperationId:</strong>swapRooms</p>
     * Operation for Swap/Shift Rooms between two reservations
     */
    swapRoomsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/sourceReservations/{sourceReservationId}/targetReservations/{targetReservationId}/swapRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"sourceReservationId"}}`, encodeURIComponent(String(requestParameters.sourceReservationId))).replace(`{${"targetReservationId"}}`, encodeURIComponent(String(requestParameters.targetReservationId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.SwapRoomsRequestToJSON)(requestParameters.swapRooms),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to quickly swap rooms for two reservations. <p><strong>OperationId:</strong>swapRooms</p>
     * Operation for Swap/Shift Rooms between two reservations
     */
    swapRooms(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.swapRoomsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to verify checkin reservations. <p><strong>OperationId:</strong>verifyCheckinReservation</p>
     * Verify checkin reservation
     */
    verifyCheckinReservationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.verifyCheckinInstructions) {
                queryParameters['verifyCheckinInstructions'] = requestParameters.verifyCheckinInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/verifyCheckIns`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.VerifiedCheckinReservationFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to verify checkin reservations. <p><strong>OperationId:</strong>verifyCheckinReservation</p>
     * Verify checkin reservation
     */
    verifyCheckinReservation(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.verifyCheckinReservationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.FrontDeskOperationsApi = FrontDeskOperationsApi;
/**
 * @export
 */
exports.AutoUnAssignRoomHotelRoomStatusEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
};
/**
 * @export
 */
exports.AutoUnAssignRoomHotelFORoomStatusEnum = {
    Vacant: 'Vacant',
    Occupied: 'Occupied'
};
/**
 * @export
 */
exports.DeleteCheckinRoomStatusEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
};
/**
 * @export
 */
exports.GetFulfillmentActivityLogModuleEnum = {
    Reservation: 'Reservation',
    Contract: 'Contract',
    Allotment: 'Allotment',
    Outlookview: 'Outlookview',
    Profile: 'Profile',
    Accountreceivables: 'Accountreceivables',
    GdsConvRateCodes: 'GdsConvRateCodes',
    RateCode: 'RateCode',
    Billing: 'Billing',
    Activity: 'Activity'
};
/**
 * @export
 */
exports.GetHotelRoomsHotelRoomStatusEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
};
/**
 * @export
 */
exports.GetHotelRoomsHotelFORoomStatusEnum = {
    Vacant: 'Vacant',
    Occupied: 'Occupied'
};
/**
 * @export
 */
exports.GetHotelRoomsOrderByEnum = {
    ForecastRotationPoints: 'ForecastRotationPoints'
};
/**
 * @export
 */
exports.GetReservationSummariesSearchTypeEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
};
/**
 * @export
 */
exports.GetReservationSummariesAttributeNameEnum = {
    Room: 'Room',
    Name: 'Name',
    ArrivalTime: 'ArrivalTime',
    DepartureTime: 'DepartureTime',
    ArrivalDate: 'ArrivalDate',
    DepartureDate: 'DepartureDate'
};
/**
 * @export
 */
exports.GetReservationSummariesOrderTypeEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
};
/**
 * @export
 */
exports.GetReservationSummariesRoomStatusesEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
};
/**
 * @export
 */
exports.GetReservationSummariesIndicatorEnum = {
    Package: 'Package',
    Message: 'Message',
    Attachments: 'Attachments',
    Share: 'Share',
    Routing: 'Routing',
    Itinerary: 'Itinerary',
    Trace: 'Trace',
    ServiceRequests: 'ServiceRequests',
    Locator: 'Locator',
    Comment: 'Comment',
    AuthorizedBilling: 'AuthorizedBilling',
    StayRevenue: 'StayRevenue',
    Preference: 'Preference',
    ProfileNote: 'ProfileNote',
    NoPost: 'NoPost',
    DepositCancellation: 'DepositCancellation',
    FixedCharge: 'FixedCharge',
    RateChange: 'RateChange',
    QmsTask: 'QmsTask',
    Activity: 'Activity',
    Queue: 'Queue',
    Member: 'Member',
    CancelReason: 'CancelReason',
    Extension: 'Extension',
    OpenFolio: 'OpenFolio',
    PreStay: 'PreStay',
    PostStay: 'PostStay',
    WakeUpCall: 'WakeUpCall',
    Alert: 'Alert',
    ExternalQms: 'ExternalQms',
    Transport: 'Transport',
    TrackIt: 'TrackIt',
    Award: 'Award',
    ItemInventory: 'ItemInventory',
    Waitlist: 'Waitlist',
    HistoryFuture: 'HistoryFuture',
    Communication: 'Communication',
    PrepaidCards: 'PrepaidCards',
    WebRegistrationCards: 'WebRegistrationCards'
};
/**
 * @export
 */
exports.GetReservationSummariesFetchSummaryInstructionsEnum = {
    ReservationPaymentMethods: 'ReservationPaymentMethods',
    RoomDetails: 'RoomDetails',
    BlockReservationDetails: 'BlockReservationDetails'
};
/**
 * @export
 */
exports.GetReservationSummariesAllowedActionEnum = {
    Cancel: 'Cancel',
    Move: 'Move',
    PreCharge: 'PreCharge',
    PostCharge: 'PostCharge',
    FacilitySchedule: 'FacilitySchedule',
    Upsell: 'Upsell',
    PreCheckIn: 'PreCheckIn',
    PostToNoShowCancel: 'PostToNoShowCancel',
    NoShow: 'NoShow',
    NameChange: 'NameChange',
    Discount: 'Discount',
    HouseKeeping: 'HouseKeeping',
    EnrollToPrimaryMembership: 'EnrollToPrimaryMembership',
    EnrollInProgress: 'EnrollInProgress'
};
/**
 * @export
 */
exports.GetReservationsForBillingSearchTypeEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
};
/**
 * @export
 */
exports.GetReservationsForBillingReservationProfileTypeEnum = {
    Guest: 'Guest',
    Company: 'Company',
    Group: 'Group',
    TravelAgent: 'TravelAgent',
    Source: 'Source',
    ReservationContact: 'ReservationContact',
    BillingContact: 'BillingContact',
    Addressee: 'Addressee'
};
/**
 * @export
 */
exports.GetReservationsForBillingOrderTypeEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
};
/**
 * @export
 */
exports.GetReservationsForBillingFetchInstructionsEnum = {
    Reservation: 'Reservation',
    ReservationId: 'ReservationID',
    Indicators: 'Indicators',
    Deposits: 'Deposits',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestServiceStatus: 'GuestServiceStatus',
    MasterInfo: 'MasterInfo',
    CancellationInfo: 'CancellationInfo',
    BlockReservations: 'BlockReservations',
    TaxType: 'TaxType',
    GuestDeviceNotification: 'GuestDeviceNotification',
    RoomAssignedByAi: 'RoomAssignedByAI'
};
/**
 * @export
 */
exports.GetReservationsForBillingSearchTypesSearchTypeEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
};
/**
 * @export
 */
exports.GetReservationsForBillingReservationStatusEnum = {
    Cancelled: 'Cancelled',
    CheckedOut: 'CheckedOut',
    CheckedIn: 'CheckedIn',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    InHouse: 'InHouse',
    NoShow: 'NoShow',
    WaitList: 'WaitList'
};
/**
 * @export
 */
exports.GetResvForBatchCCAuthCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
};
/**
 * @export
 */
exports.GetRoomInterfaceStatusInterfaceTypeEnum = {
    Bms: 'Bms',
    Cas: 'Cas',
    Ccw: 'Ccw',
    Dls: 'Dls',
    Eft: 'Eft',
    Exp: 'Exp',
    Mak: 'Mak',
    Mbs: 'Mbs',
    Msc: 'Msc',
    Pbx: 'Pbx',
    Pos: 'Pos',
    Svs: 'Svs',
    Tik: 'Tik',
    Vid: 'Vid',
    Vms: 'Vms',
    Www: 'Www',
    Xml: 'Xml'
};
/**
 * @export
 */
exports.GetRoomInterfaceStatusStatusEnum = {
    Stopped: 'Stopped',
    Running: 'Running',
    Waiting: 'Waiting',
    StopInitiated: 'StopInitiated',
    StartInitiated: 'StartInitiated',
    RebootInitiated: 'RebootInitiated',
    Other: 'Other'
};
/**
 * @export
 */
exports.GetRoomInterfaceStatusRoomStatusEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
};
/**
 * @export
 */
exports.GetRoomInterfaceStatusReservationStatusEnum = {
    Cancelled: 'Cancelled',
    CheckedOut: 'CheckedOut',
    CheckedIn: 'CheckedIn',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    InHouse: 'InHouse',
    NoShow: 'NoShow',
    WaitList: 'WaitList'
};
/**
 * @export
 */
exports.GetRoomInterfaceStatusOrderByEnum = {
    RoomNo: 'RoomNo',
    Name: 'Name',
    ArrivalDateEtr: 'ArrivalDateETR',
    ArrivalDate: 'ArrivalDate'
};
/**
 * @export
 */
exports.GetRoomInterfaceStatusOrderTypeEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
};
/**
 * @export
 */
exports.GetServiceRequestsStatusEnum = {
    Open: 'Open',
    PendingFollowUp: 'PendingFollowUp',
    Closed: 'Closed',
    DoNotDisturb: 'DoNotDisturb',
    MakeUpRoom: 'MakeUpRoom'
};
/**
 * @export
 */
exports.GetSuggestedRoomsSuggestedRoomsInstructionsEnum = {
    ComponentRoom: 'ComponentRoom'
};
/**
 * @export
 */
exports.VerifyCheckinReservationVerifyCheckinInstructionsEnum = {
    AuthorizationInfo: 'AuthorizationInfo',
    ExcludeRoomSuggestion: 'ExcludeRoomSuggestion'
};
