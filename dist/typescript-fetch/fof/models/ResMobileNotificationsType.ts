/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CommunicationStatusType } from './CommunicationStatusType';
import {
    CommunicationStatusTypeFromJSON,
    CommunicationStatusTypeFromJSONTyped,
    CommunicationStatusTypeToJSON,
} from './CommunicationStatusType';

/**
 * Contains the status of Room Ready and Key Ready messages.
 * @export
 * @interface ResMobileNotificationsType
 */
export interface ResMobileNotificationsType {
    /**
     * 
     * @type {CommunicationStatusType}
     * @memberof ResMobileNotificationsType
     */
    roomReady?: CommunicationStatusType;
    /**
     * 
     * @type {CommunicationStatusType}
     * @memberof ResMobileNotificationsType
     */
    keyReady?: CommunicationStatusType;
    /**
     * Indicates if the Mobile checkout message is received.
     * @type {boolean}
     * @memberof ResMobileNotificationsType
     */
    checkoutMessageReceived?: boolean;
    /**
     * Indicates if user action is required. The action could be for sending Room Ready or Key Ready Notification. It could also be for initiating Checkout
     * @type {boolean}
     * @memberof ResMobileNotificationsType
     */
    requiresAction?: boolean;
    /**
     * Error message when Mobile Notification has failed.
     * @type {string}
     * @memberof ResMobileNotificationsType
     */
    errorMessage?: string;
}

/**
 * Check if a given object implements the ResMobileNotificationsType interface.
 */
export function instanceOfResMobileNotificationsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ResMobileNotificationsTypeFromJSON(json: any): ResMobileNotificationsType {
    return ResMobileNotificationsTypeFromJSONTyped(json, false);
}

export function ResMobileNotificationsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResMobileNotificationsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'roomReady': !exists(json, 'roomReady') ? undefined : CommunicationStatusTypeFromJSON(json['roomReady']),
        'keyReady': !exists(json, 'keyReady') ? undefined : CommunicationStatusTypeFromJSON(json['keyReady']),
        'checkoutMessageReceived': !exists(json, 'checkoutMessageReceived') ? undefined : json['checkoutMessageReceived'],
        'requiresAction': !exists(json, 'requiresAction') ? undefined : json['requiresAction'],
        'errorMessage': !exists(json, 'errorMessage') ? undefined : json['errorMessage'],
    };
}

export function ResMobileNotificationsTypeToJSON(value?: ResMobileNotificationsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'roomReady': CommunicationStatusTypeToJSON(value.roomReady),
        'keyReady': CommunicationStatusTypeToJSON(value.keyReady),
        'checkoutMessageReceived': value.checkoutMessageReceived,
        'requiresAction': value.requiresAction,
        'errorMessage': value.errorMessage,
    };
}

