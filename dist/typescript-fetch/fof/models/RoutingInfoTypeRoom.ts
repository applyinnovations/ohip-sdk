/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RoutingInstructionType } from './RoutingInstructionType';
import {
    RoutingInstructionTypeFromJSON,
    RoutingInstructionTypeFromJSONTyped,
    RoutingInstructionTypeToJSON,
} from './RoutingInstructionType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Room routing type.
 * @export
 * @interface RoutingInfoTypeRoom
 */
export interface RoutingInfoTypeRoom {
    /**
     * Room number to route the instructions.
     * @type {string}
     * @memberof RoutingInfoTypeRoom
     */
    roomId?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof RoutingInfoTypeRoom
     */
    guestNameId?: UniqueIDType;
    /**
     * Display Name for the guest.
     * @type {string}
     * @memberof RoutingInfoTypeRoom
     */
    guestDisplayName?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof RoutingInfoTypeRoom
     */
    reservationNameId?: UniqueIDType;
    /**
     * Set of routing instructions associated to this routing type.
     * @type {Array<RoutingInstructionType>}
     * @memberof RoutingInfoTypeRoom
     */
    instructions?: Array<RoutingInstructionType>;
}

/**
 * Check if a given object implements the RoutingInfoTypeRoom interface.
 */
export function instanceOfRoutingInfoTypeRoom(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoutingInfoTypeRoomFromJSON(json: any): RoutingInfoTypeRoom {
    return RoutingInfoTypeRoomFromJSONTyped(json, false);
}

export function RoutingInfoTypeRoomFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoutingInfoTypeRoom {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'guestNameId': !exists(json, 'guestNameId') ? undefined : UniqueIDTypeFromJSON(json['guestNameId']),
        'guestDisplayName': !exists(json, 'guestDisplayName') ? undefined : json['guestDisplayName'],
        'reservationNameId': !exists(json, 'reservationNameId') ? undefined : UniqueIDTypeFromJSON(json['reservationNameId']),
        'instructions': !exists(json, 'instructions') ? undefined : ((json['instructions'] as Array<any>).map(RoutingInstructionTypeFromJSON)),
    };
}

export function RoutingInfoTypeRoomToJSON(value?: RoutingInfoTypeRoom | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'roomId': value.roomId,
        'guestNameId': UniqueIDTypeToJSON(value.guestNameId),
        'guestDisplayName': value.guestDisplayName,
        'reservationNameId': UniqueIDTypeToJSON(value.reservationNameId),
        'instructions': value.instructions === undefined ? undefined : ((value.instructions as Array<any>).map(RoutingInstructionTypeToJSON)),
    };
}

