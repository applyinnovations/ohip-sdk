/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ApplicationUserType } from './ApplicationUserType';
import {
    ApplicationUserTypeFromJSON,
    ApplicationUserTypeFromJSONTyped,
    ApplicationUserTypeToJSON,
} from './ApplicationUserType';
import type { HousekeepingSectionType } from './HousekeepingSectionType';
import {
    HousekeepingSectionTypeFromJSON,
    HousekeepingSectionTypeFromJSONTyped,
    HousekeepingSectionTypeToJSON,
} from './HousekeepingSectionType';
import type { ServicingAttendantStatusType } from './ServicingAttendantStatusType';
import {
    ServicingAttendantStatusTypeFromJSON,
    ServicingAttendantStatusTypeFromJSONTyped,
    ServicingAttendantStatusTypeToJSON,
} from './ServicingAttendantStatusType';

/**
 * The Attendant Name and ID of the attendant servicing the room.
 * @export
 * @interface CurrentServicingAttendantType
 */
export interface CurrentServicingAttendantType {
    /**
     * 
     * @type {HousekeepingSectionType}
     * @memberof CurrentServicingAttendantType
     */
    section?: HousekeepingSectionType;
    /**
     * The Floor which is assigned to the attendant.
     * @type {string}
     * @memberof CurrentServicingAttendantType
     */
    floor?: string;
    /**
     * Attendant's unique identifier.
     * @type {string}
     * @memberof CurrentServicingAttendantType
     */
    attendantId?: string;
    /**
     * Attendant's name.
     * @type {string}
     * @memberof CurrentServicingAttendantType
     */
    attendantName?: string;
    /**
     * Property where the attendant belongs.
     * @type {string}
     * @memberof CurrentServicingAttendantType
     */
    hotelId?: string;
    /**
     * Indicates if the Attendant is active.
     * @type {string}
     * @memberof CurrentServicingAttendantType
     */
    activeFlag?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentServicingAttendantType
     */
    sunday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentServicingAttendantType
     */
    monday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentServicingAttendantType
     */
    tuesday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentServicingAttendantType
     */
    wednesday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentServicingAttendantType
     */
    thursday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentServicingAttendantType
     */
    friday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentServicingAttendantType
     */
    saturday?: boolean;
    /**
     * 
     * @type {ApplicationUserType}
     * @memberof CurrentServicingAttendantType
     */
    appUser?: ApplicationUserType;
    /**
     * The start time of the service.
     * @type {string}
     * @memberof CurrentServicingAttendantType
     */
    startTime?: string;
    /**
     * 
     * @type {ServicingAttendantStatusType}
     * @memberof CurrentServicingAttendantType
     */
    status?: ServicingAttendantStatusType;
}

/**
 * Check if a given object implements the CurrentServicingAttendantType interface.
 */
export function instanceOfCurrentServicingAttendantType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CurrentServicingAttendantTypeFromJSON(json: any): CurrentServicingAttendantType {
    return CurrentServicingAttendantTypeFromJSONTyped(json, false);
}

export function CurrentServicingAttendantTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CurrentServicingAttendantType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'section': !exists(json, 'section') ? undefined : HousekeepingSectionTypeFromJSON(json['section']),
        'floor': !exists(json, 'floor') ? undefined : json['floor'],
        'attendantId': !exists(json, 'attendantId') ? undefined : json['attendantId'],
        'attendantName': !exists(json, 'attendantName') ? undefined : json['attendantName'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'activeFlag': !exists(json, 'activeFlag') ? undefined : json['activeFlag'],
        'sunday': !exists(json, 'sunday') ? undefined : json['sunday'],
        'monday': !exists(json, 'monday') ? undefined : json['monday'],
        'tuesday': !exists(json, 'tuesday') ? undefined : json['tuesday'],
        'wednesday': !exists(json, 'wednesday') ? undefined : json['wednesday'],
        'thursday': !exists(json, 'thursday') ? undefined : json['thursday'],
        'friday': !exists(json, 'friday') ? undefined : json['friday'],
        'saturday': !exists(json, 'saturday') ? undefined : json['saturday'],
        'appUser': !exists(json, 'appUser') ? undefined : ApplicationUserTypeFromJSON(json['appUser']),
        'startTime': !exists(json, 'startTime') ? undefined : json['startTime'],
        'status': !exists(json, 'status') ? undefined : ServicingAttendantStatusTypeFromJSON(json['status']),
    };
}

export function CurrentServicingAttendantTypeToJSON(value?: CurrentServicingAttendantType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'section': HousekeepingSectionTypeToJSON(value.section),
        'floor': value.floor,
        'attendantId': value.attendantId,
        'attendantName': value.attendantName,
        'hotelId': value.hotelId,
        'activeFlag': value.activeFlag,
        'sunday': value.sunday,
        'monday': value.monday,
        'tuesday': value.tuesday,
        'wednesday': value.wednesday,
        'thursday': value.thursday,
        'friday': value.friday,
        'saturday': value.saturday,
        'appUser': ApplicationUserTypeToJSON(value.appUser),
        'startTime': value.startTime,
        'status': ServicingAttendantStatusTypeToJSON(value.status),
    };
}

