/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DateRangeType } from './DateRangeType';
import {
    DateRangeTypeFromJSON,
    DateRangeTypeFromJSONTyped,
    DateRangeTypeToJSON,
} from './DateRangeType';
import type { DateTimeSpanType } from './DateTimeSpanType';
import {
    DateTimeSpanTypeFromJSON,
    DateTimeSpanTypeFromJSONTyped,
    DateTimeSpanTypeToJSON,
} from './DateTimeSpanType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Holds the information for a Reservation Guest Locator
 * @export
 * @interface ReservationLocatorType
 */
export interface ReservationLocatorType {
    /**
     * 
     * @type {DateRangeType}
     * @memberof ReservationLocatorType
     */
    dateSpan?: DateRangeType;
    /**
     * 
     * @type {DateTimeSpanType}
     * @memberof ReservationLocatorType
     */
    timeSpan?: DateTimeSpanType;
    /**
     * The Locator Text for the guest.
     * @type {string}
     * @memberof ReservationLocatorType
     */
    locatorText?: string;
    /**
     * Date and time of the Guest Locator.
     * @type {string}
     * @memberof ReservationLocatorType
     */
    locatorOn?: string;
    /**
     * User that entered this Guest Locator.
     * @type {string}
     * @memberof ReservationLocatorType
     */
    locatorBy?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ReservationLocatorType
     */
    locatorId?: UniqueIDType;
}

/**
 * Check if a given object implements the ReservationLocatorType interface.
 */
export function instanceOfReservationLocatorType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReservationLocatorTypeFromJSON(json: any): ReservationLocatorType {
    return ReservationLocatorTypeFromJSONTyped(json, false);
}

export function ReservationLocatorTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationLocatorType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'dateSpan': !exists(json, 'dateSpan') ? undefined : DateRangeTypeFromJSON(json['dateSpan']),
        'timeSpan': !exists(json, 'timeSpan') ? undefined : DateTimeSpanTypeFromJSON(json['timeSpan']),
        'locatorText': !exists(json, 'locatorText') ? undefined : json['locatorText'],
        'locatorOn': !exists(json, 'locatorOn') ? undefined : json['locatorOn'],
        'locatorBy': !exists(json, 'locatorBy') ? undefined : json['locatorBy'],
        'locatorId': !exists(json, 'locatorId') ? undefined : UniqueIDTypeFromJSON(json['locatorId']),
    };
}

export function ReservationLocatorTypeToJSON(value?: ReservationLocatorType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'dateSpan': DateRangeTypeToJSON(value.dateSpan),
        'timeSpan': DateTimeSpanTypeToJSON(value.timeSpan),
        'locatorText': value.locatorText,
        'locatorOn': value.locatorOn,
        'locatorBy': value.locatorBy,
        'locatorId': UniqueIDTypeToJSON(value.locatorId),
    };
}

