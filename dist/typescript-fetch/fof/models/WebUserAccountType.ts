/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { WebUserHistoryType } from './WebUserHistoryType';
import {
    WebUserHistoryTypeFromJSON,
    WebUserHistoryTypeFromJSONTyped,
    WebUserHistoryTypeToJSON,
} from './WebUserHistoryType';

/**
 * Web User Account of the guest.
 * @export
 * @interface WebUserAccountType
 */
export interface WebUserAccountType {
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof WebUserAccountType
     */
    securityQuestion?: CodeDescriptionType;
    /**
     * Answer to the Security Question.
     * @type {string}
     * @memberof WebUserAccountType
     */
    securityAnswer?: string;
    /**
     * Comments.
     * @type {string}
     * @memberof WebUserAccountType
     */
    comments?: string;
    /**
     * 
     * @type {WebUserHistoryType}
     * @memberof WebUserAccountType
     */
    history?: WebUserHistoryType;
    /**
     * New Login Name of the guest.
     * @type {string}
     * @memberof WebUserAccountType
     */
    newLoginName?: string;
    /**
     * Login Password.
     * @type {string}
     * @memberof WebUserAccountType
     */
    newPassword?: string;
    /**
     * A flag which determines if the password is auto generated.
     * @type {boolean}
     * @memberof WebUserAccountType
     */
    autoGeneratePassword?: boolean;
    /**
     * Login Name of the guest.
     * @type {string}
     * @memberof WebUserAccountType
     */
    loginName?: string;
    /**
     * Domain code.
     * @type {string}
     * @memberof WebUserAccountType
     */
    domainCode?: string;
    /**
     * Boolean flag that indicates whether the web account is locked or not.
     * @type {boolean}
     * @memberof WebUserAccountType
     */
    locked?: boolean;
    /**
     * Boolean flag that indicates whether the web account is inactive or not.
     * @type {boolean}
     * @memberof WebUserAccountType
     */
    inactive?: boolean;
}

/**
 * Check if a given object implements the WebUserAccountType interface.
 */
export function instanceOfWebUserAccountType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function WebUserAccountTypeFromJSON(json: any): WebUserAccountType {
    return WebUserAccountTypeFromJSONTyped(json, false);
}

export function WebUserAccountTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebUserAccountType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'securityQuestion': !exists(json, 'securityQuestion') ? undefined : CodeDescriptionTypeFromJSON(json['securityQuestion']),
        'securityAnswer': !exists(json, 'securityAnswer') ? undefined : json['securityAnswer'],
        'comments': !exists(json, 'comments') ? undefined : json['comments'],
        'history': !exists(json, 'history') ? undefined : WebUserHistoryTypeFromJSON(json['history']),
        'newLoginName': !exists(json, 'newLoginName') ? undefined : json['newLoginName'],
        'newPassword': !exists(json, 'newPassword') ? undefined : json['newPassword'],
        'autoGeneratePassword': !exists(json, 'autoGeneratePassword') ? undefined : json['autoGeneratePassword'],
        'loginName': !exists(json, 'loginName') ? undefined : json['loginName'],
        'domainCode': !exists(json, 'domainCode') ? undefined : json['domainCode'],
        'locked': !exists(json, 'locked') ? undefined : json['locked'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
    };
}

export function WebUserAccountTypeToJSON(value?: WebUserAccountType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'securityQuestion': CodeDescriptionTypeToJSON(value.securityQuestion),
        'securityAnswer': value.securityAnswer,
        'comments': value.comments,
        'history': WebUserHistoryTypeToJSON(value.history),
        'newLoginName': value.newLoginName,
        'newPassword': value.newPassword,
        'autoGeneratePassword': value.autoGeneratePassword,
        'loginName': value.loginName,
        'domainCode': value.domainCode,
        'locked': value.locked,
        'inactive': value.inactive,
    };
}

