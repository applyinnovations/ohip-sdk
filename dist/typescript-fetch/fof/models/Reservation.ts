/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CheckedInReservationInstructionType } from './CheckedInReservationInstructionType';
import {
    CheckedInReservationInstructionTypeFromJSON,
    CheckedInReservationInstructionTypeFromJSONTyped,
    CheckedInReservationInstructionTypeToJSON,
} from './CheckedInReservationInstructionType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { ReservationReservation } from './ReservationReservation';
import {
    ReservationReservationFromJSON,
    ReservationReservationFromJSONTyped,
    ReservationReservationToJSON,
} from './ReservationReservation';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Validation checks includes the following: - Reservation is not valid to be checked in. - Split is still required before the reservation can be checked in. - Room information is missing. - Payment information is missing. - The status of the room needs to be reviewed. - Sharers was impacted. The check-in process affected the reservation details of shared guests on the reservation. - Sharers was not impacted. The check-in process has not affected the reservation details of shared guests on the reservation.
 * @export
 * @interface Reservation
 */
export interface Reservation {
    /**
     * 
     * @type {ReservationReservation}
     * @memberof Reservation
     */
    reservation?: ReservationReservation;
    /**
     * Instructions to fetch reservations .
     * @type {Array<CheckedInReservationInstructionType>}
     * @memberof Reservation
     */
    fetchReservationInstruction?: Array<CheckedInReservationInstructionType>;
    /**
     * When "true" alerts and comments are fetched. When "false", these alerts and comments are not retrieved.
     * @type {boolean}
     * @memberof Reservation
     */
    includeNotifications?: boolean;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof Reservation
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof Reservation
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the Reservation interface.
 */
export function instanceOfReservation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReservationFromJSON(json: any): Reservation {
    return ReservationFromJSONTyped(json, false);
}

export function ReservationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Reservation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'reservation': !exists(json, 'reservation') ? undefined : ReservationReservationFromJSON(json['reservation']),
        'fetchReservationInstruction': !exists(json, 'fetchReservationInstruction') ? undefined : ((json['fetchReservationInstruction'] as Array<any>).map(CheckedInReservationInstructionTypeFromJSON)),
        'includeNotifications': !exists(json, 'includeNotifications') ? undefined : json['includeNotifications'],
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function ReservationToJSON(value?: Reservation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'reservation': ReservationReservationToJSON(value.reservation),
        'fetchReservationInstruction': value.fetchReservationInstruction === undefined ? undefined : ((value.fetchReservationInstruction as Array<any>).map(CheckedInReservationInstructionTypeToJSON)),
        'includeNotifications': value.includeNotifications,
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

