"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HotelReservationsIDTypeToJSON = exports.HotelReservationsIDTypeFromJSONTyped = exports.HotelReservationsIDTypeFromJSON = exports.instanceOfHotelReservationsIDType = void 0;
const runtime_1 = require("../runtime");
const ReservationId_1 = require("./ReservationId");
/**
 * Check if a given object implements the HotelReservationsIDType interface.
 */
function instanceOfHotelReservationsIDType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfHotelReservationsIDType = instanceOfHotelReservationsIDType;
function HotelReservationsIDTypeFromJSON(json) {
    return HotelReservationsIDTypeFromJSONTyped(json, false);
}
exports.HotelReservationsIDTypeFromJSON = HotelReservationsIDTypeFromJSON;
function HotelReservationsIDTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'reservationId': !(0, runtime_1.exists)(json, 'reservationId') ? undefined : (json['reservationId'].map(ReservationId_1.ReservationIdFromJSON)),
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
    };
}
exports.HotelReservationsIDTypeFromJSONTyped = HotelReservationsIDTypeFromJSONTyped;
function HotelReservationsIDTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'reservationId': value.reservationId === undefined ? undefined : (value.reservationId.map(ReservationId_1.ReservationIdToJSON)),
        'hotelId': value.hotelId,
    };
}
exports.HotelReservationsIDTypeToJSON = HotelReservationsIDTypeToJSON;
