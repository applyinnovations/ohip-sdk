/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActivityListInnerDeposit } from './ActivityListInnerDeposit';
import {
    ActivityListInnerDepositFromJSON,
    ActivityListInnerDepositFromJSONTyped,
    ActivityListInnerDepositToJSON,
} from './ActivityListInnerDeposit';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { DateTimeSpanType } from './DateTimeSpanType';
import {
    DateTimeSpanTypeFromJSON,
    DateTimeSpanTypeFromJSONTyped,
    DateTimeSpanTypeToJSON,
} from './DateTimeSpanType';
import type { PersonNameType } from './PersonNameType';
import {
    PersonNameTypeFromJSON,
    PersonNameTypeFromJSONTyped,
    PersonNameTypeToJSON,
} from './PersonNameType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Represents a single instance of a scheduled activity.
 * @export
 * @interface ActivityListInner
 */
export interface ActivityListInner {
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof ActivityListInner
     */
    activityIds?: Array<UniqueIDType>;
    /**
     * The Type of the activity. Eg: SPA, Golf etc.
     * @type {string}
     * @memberof ActivityListInner
     */
    type?: string;
    /**
     * The Location where the activity takes place. Eg: Salon
     * @type {string}
     * @memberof ActivityListInner
     */
    location?: string;
    /**
     * Name of the people for whom the activity is scheduled. Can be more than one but should be equal to the number of persons
     * @type {Array<string>}
     * @memberof ActivityListInner
     */
    name?: Array<string>;
    /**
     * The total number of the people for whom the activity is scheduled. Can be more than one but should be equal to the number of persons
     * @type {number}
     * @memberof ActivityListInner
     */
    numberOfPersons?: number;
    /**
     * 
     * @type {DateTimeSpanType}
     * @memberof ActivityListInner
     */
    timeSpan?: DateTimeSpanType;
    /**
     * 
     * @type {DateTimeSpanType}
     * @memberof ActivityListInner
     */
    duration?: DateTimeSpanType;
    /**
     * Description of the activity
     * @type {Array<string>}
     * @memberof ActivityListInner
     */
    description?: Array<string>;
    /**
     * Any additional notes or comments regarding the scheduled activity.
     * @type {Array<string>}
     * @memberof ActivityListInner
     */
    note?: Array<string>;
    /**
     * Any Block code associated with the activity if its a Group booking.
     * @type {string}
     * @memberof ActivityListInner
     */
    groupCode?: string;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ActivityListInner
     */
    amount?: CurrencyAmountType;
    /**
     * 
     * @type {ActivityListInnerDeposit}
     * @memberof ActivityListInner
     */
    deposit?: ActivityListInnerDeposit;
    /**
     * The Date by which the activity is deemed Cancelled/Deleted.
     * @type {string}
     * @memberof ActivityListInner
     */
    inactiveDate?: string;
    /**
     * The names of the participants.
     * @type {Array<PersonNameType>}
     * @memberof ActivityListInner
     */
    participants?: Array<PersonNameType>;
    /**
     * The URL link to launch the Activity Reservation System to view or edit full details of this activity.
     * @type {string}
     * @memberof ActivityListInner
     */
    uRLLink?: string;
    /**
     * Vendor extensions to the activity record.
     * @type {Array<string>}
     * @memberof ActivityListInner
     */
    extensions?: Array<string>;
    /**
     * Activity reservation status. Typical examples are RESERVED, BOOKED, CANCELLED, and TENTATIVE.
     * @type {string}
     * @memberof ActivityListInner
     */
    status?: string;
    /**
     * Activity reservation status description. Typical examples are RESERVED, BOOKED, CANCELLED, and TENTATIVE.
     * @type {string}
     * @memberof ActivityListInner
     */
    statusDescription?: string;
    /**
     * When true indicates that activity link only needs to be inserted or deleted for this record.
     * @type {boolean}
     * @memberof ActivityListInner
     */
    link?: boolean;
}

/**
 * Check if a given object implements the ActivityListInner interface.
 */
export function instanceOfActivityListInner(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ActivityListInnerFromJSON(json: any): ActivityListInner {
    return ActivityListInnerFromJSONTyped(json, false);
}

export function ActivityListInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivityListInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'activityIds': !exists(json, 'activityIds') ? undefined : ((json['activityIds'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'type': !exists(json, 'type') ? undefined : json['type'],
        'location': !exists(json, 'location') ? undefined : json['location'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'numberOfPersons': !exists(json, 'numberOfPersons') ? undefined : json['numberOfPersons'],
        'timeSpan': !exists(json, 'timeSpan') ? undefined : DateTimeSpanTypeFromJSON(json['timeSpan']),
        'duration': !exists(json, 'duration') ? undefined : DateTimeSpanTypeFromJSON(json['duration']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'note': !exists(json, 'note') ? undefined : json['note'],
        'groupCode': !exists(json, 'groupCode') ? undefined : json['groupCode'],
        'amount': !exists(json, 'amount') ? undefined : CurrencyAmountTypeFromJSON(json['amount']),
        'deposit': !exists(json, 'deposit') ? undefined : ActivityListInnerDepositFromJSON(json['deposit']),
        'inactiveDate': !exists(json, 'inactiveDate') ? undefined : json['inactiveDate'],
        'participants': !exists(json, 'participants') ? undefined : ((json['participants'] as Array<any>).map(PersonNameTypeFromJSON)),
        'uRLLink': !exists(json, 'uRLLink') ? undefined : json['uRLLink'],
        'extensions': !exists(json, 'extensions') ? undefined : json['extensions'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'statusDescription': !exists(json, 'statusDescription') ? undefined : json['statusDescription'],
        'link': !exists(json, 'link') ? undefined : json['link'],
    };
}

export function ActivityListInnerToJSON(value?: ActivityListInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'activityIds': value.activityIds === undefined ? undefined : ((value.activityIds as Array<any>).map(UniqueIDTypeToJSON)),
        'type': value.type,
        'location': value.location,
        'name': value.name,
        'numberOfPersons': value.numberOfPersons,
        'timeSpan': DateTimeSpanTypeToJSON(value.timeSpan),
        'duration': DateTimeSpanTypeToJSON(value.duration),
        'description': value.description,
        'note': value.note,
        'groupCode': value.groupCode,
        'amount': CurrencyAmountTypeToJSON(value.amount),
        'deposit': ActivityListInnerDepositToJSON(value.deposit),
        'inactiveDate': value.inactiveDate,
        'participants': value.participants === undefined ? undefined : ((value.participants as Array<any>).map(PersonNameTypeToJSON)),
        'uRLLink': value.uRLLink,
        'extensions': value.extensions,
        'status': value.status,
        'statusDescription': value.statusDescription,
        'link': value.link,
    };
}

