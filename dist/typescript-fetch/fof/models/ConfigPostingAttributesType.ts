/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FunctionArgumentType } from './FunctionArgumentType';
import {
    FunctionArgumentTypeFromJSON,
    FunctionArgumentTypeFromJSONTyped,
    FunctionArgumentTypeToJSON,
} from './FunctionArgumentType';
import type { PackageCalculationRuleType } from './PackageCalculationRuleType';
import {
    PackageCalculationRuleTypeFromJSON,
    PackageCalculationRuleTypeFromJSONTyped,
    PackageCalculationRuleTypeToJSON,
} from './PackageCalculationRuleType';
import type { PackagePostingRhythmType } from './PackagePostingRhythmType';
import {
    PackagePostingRhythmTypeFromJSON,
    PackagePostingRhythmTypeFromJSONTyped,
    PackagePostingRhythmTypeToJSON,
} from './PackagePostingRhythmType';
import type { PkgInventoryItemType } from './PkgInventoryItemType';
import {
    PkgInventoryItemTypeFromJSON,
    PkgInventoryItemTypeFromJSONTyped,
    PkgInventoryItemTypeToJSON,
} from './PkgInventoryItemType';

/**
 * A config Package posting attributes type.
 * @export
 * @interface ConfigPostingAttributesType
 */
export interface ConfigPostingAttributesType {
    /**
     * The package price is added to the room rate.
     * @type {boolean}
     * @memberof ConfigPostingAttributesType
     */
    addToRate?: boolean;
    /**
     * The package price is printed on separate line of the folio.
     * @type {boolean}
     * @memberof ConfigPostingAttributesType
     */
    printSeparateLine?: boolean;
    /**
     * Can the package be sold separate from rate plan code?
     * @type {boolean}
     * @memberof ConfigPostingAttributesType
     */
    sellSeparate?: boolean;
    /**
     * package charges will be posted next business day.
     * @type {boolean}
     * @memberof ConfigPostingAttributesType
     */
    postNextDay?: boolean;
    /**
     * Package will be forecasted for consumption the next business day.
     * @type {boolean}
     * @memberof ConfigPostingAttributesType
     */
    forecastNextDay?: boolean;
    /**
     * Indicates whether a delivery time is required for the package.
     * @type {boolean}
     * @memberof ConfigPostingAttributesType
     */
    deliveryTimeRequired?: boolean;
    /**
     * Can package be sold via Web channel.
     * @type {boolean}
     * @memberof ConfigPostingAttributesType
     */
    webBookable?: boolean;
    /**
     * The custom formula used for this package, if any.
     * @type {string}
     * @memberof ConfigPostingAttributesType
     */
    formula?: string;
    /**
     * The custom formula function name used for this package, if any.
     * @type {string}
     * @memberof ConfigPostingAttributesType
     */
    formulaFunctionName?: string;
    /**
     * Collection of function arguments and their corresponding values.
     * @type {Array<FunctionArgumentType>}
     * @memberof ConfigPostingAttributesType
     */
    formulaFunctionArguments?: Array<FunctionArgumentType>;
    /**
     * Start time the package is valid.
     * @type {string}
     * @memberof ConfigPostingAttributesType
     */
    startTime?: string;
    /**
     * End time the package is valid.
     * @type {string}
     * @memberof ConfigPostingAttributesType
     */
    endTime?: string;
    /**
     * Is package used for catering?
     * @type {boolean}
     * @memberof ConfigPostingAttributesType
     */
    catering?: boolean;
    /**
     * 
     * @type {PackagePostingRhythmType}
     * @memberof ConfigPostingAttributesType
     */
    postingRhythm?: PackagePostingRhythmType;
    /**
     * 
     * @type {PackageCalculationRuleType}
     * @memberof ConfigPostingAttributesType
     */
    priceCalculationRule?: PackageCalculationRuleType;
    /**
     * Indicates whether a package is configured as a ticket or not.
     * @type {boolean}
     * @memberof ConfigPostingAttributesType
     */
    ticket?: boolean;
    /**
     * Package Code Inventory Items type.
     * @type {Array<PkgInventoryItemType>}
     * @memberof ConfigPostingAttributesType
     */
    inventoryItems?: Array<PkgInventoryItemType>;
    /**
     * Calculated Package Price based from Number of Adults, Children and Calculation Rule.
     * @type {number}
     * @memberof ConfigPostingAttributesType
     */
    calculatedPrice?: number;
}

/**
 * Check if a given object implements the ConfigPostingAttributesType interface.
 */
export function instanceOfConfigPostingAttributesType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConfigPostingAttributesTypeFromJSON(json: any): ConfigPostingAttributesType {
    return ConfigPostingAttributesTypeFromJSONTyped(json, false);
}

export function ConfigPostingAttributesTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfigPostingAttributesType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'addToRate': !exists(json, 'addToRate') ? undefined : json['addToRate'],
        'printSeparateLine': !exists(json, 'printSeparateLine') ? undefined : json['printSeparateLine'],
        'sellSeparate': !exists(json, 'sellSeparate') ? undefined : json['sellSeparate'],
        'postNextDay': !exists(json, 'postNextDay') ? undefined : json['postNextDay'],
        'forecastNextDay': !exists(json, 'forecastNextDay') ? undefined : json['forecastNextDay'],
        'deliveryTimeRequired': !exists(json, 'deliveryTimeRequired') ? undefined : json['deliveryTimeRequired'],
        'webBookable': !exists(json, 'webBookable') ? undefined : json['webBookable'],
        'formula': !exists(json, 'formula') ? undefined : json['formula'],
        'formulaFunctionName': !exists(json, 'formulaFunctionName') ? undefined : json['formulaFunctionName'],
        'formulaFunctionArguments': !exists(json, 'formulaFunctionArguments') ? undefined : ((json['formulaFunctionArguments'] as Array<any>).map(FunctionArgumentTypeFromJSON)),
        'startTime': !exists(json, 'startTime') ? undefined : json['startTime'],
        'endTime': !exists(json, 'endTime') ? undefined : json['endTime'],
        'catering': !exists(json, 'catering') ? undefined : json['catering'],
        'postingRhythm': !exists(json, 'postingRhythm') ? undefined : PackagePostingRhythmTypeFromJSON(json['postingRhythm']),
        'priceCalculationRule': !exists(json, 'priceCalculationRule') ? undefined : PackageCalculationRuleTypeFromJSON(json['priceCalculationRule']),
        'ticket': !exists(json, 'ticket') ? undefined : json['ticket'],
        'inventoryItems': !exists(json, 'inventoryItems') ? undefined : ((json['inventoryItems'] as Array<any>).map(PkgInventoryItemTypeFromJSON)),
        'calculatedPrice': !exists(json, 'calculatedPrice') ? undefined : json['calculatedPrice'],
    };
}

export function ConfigPostingAttributesTypeToJSON(value?: ConfigPostingAttributesType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'addToRate': value.addToRate,
        'printSeparateLine': value.printSeparateLine,
        'sellSeparate': value.sellSeparate,
        'postNextDay': value.postNextDay,
        'forecastNextDay': value.forecastNextDay,
        'deliveryTimeRequired': value.deliveryTimeRequired,
        'webBookable': value.webBookable,
        'formula': value.formula,
        'formulaFunctionName': value.formulaFunctionName,
        'formulaFunctionArguments': value.formulaFunctionArguments === undefined ? undefined : ((value.formulaFunctionArguments as Array<any>).map(FunctionArgumentTypeToJSON)),
        'startTime': value.startTime,
        'endTime': value.endTime,
        'catering': value.catering,
        'postingRhythm': PackagePostingRhythmTypeToJSON(value.postingRhythm),
        'priceCalculationRule': PackageCalculationRuleTypeToJSON(value.priceCalculationRule),
        'ticket': value.ticket,
        'inventoryItems': value.inventoryItems === undefined ? undefined : ((value.inventoryItems as Array<any>).map(PkgInventoryItemTypeToJSON)),
        'calculatedPrice': value.calculatedPrice,
    };
}

