/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CodeDescriptionType } from './CodeDescriptionType';
import type { RatePlanRatingType } from './RatePlanRatingType';
import type { RoomFeatureType } from './RoomFeatureType';
import type { RoomTypeShortInfoType } from './RoomTypeShortInfoType';
import type { TranslationTextType2000 } from './TranslationTextType2000';
/**
 * This type represents the primary room attributes.
 * @export
 * @interface RoomRoomType
 */
export interface RoomRoomType {
    /**
     * Indicates whether the room is accessibility compliant.
     * @type {boolean}
     * @memberof RoomRoomType
     */
    accessible?: boolean;
    /**
     * Building associated with the room.
     * @type {string}
     * @memberof RoomRoomType
     */
    building?: string;
    /**
     *
     * @type {TranslationTextType2000}
     * @memberof RoomRoomType
     */
    description?: TranslationTextType2000;
    /**
     * Floor of the Room.
     * @type {string}
     * @memberof RoomRoomType
     */
    floor?: string;
    /**
     * Description for the Floor of the Room.
     * @type {string}
     * @memberof RoomRoomType
     */
    floorDescription?: string;
    /**
     * Indicates whether the room is a Meeting Room
     * @type {boolean}
     * @memberof RoomRoomType
     */
    meetingRoom?: boolean;
    /**
     *
     * @type {RatePlanRatingType}
     * @memberof RoomRoomType
     */
    roomAssignmentRating?: RatePlanRatingType;
    /**
     *
     * @type {CodeDescriptionType}
     * @memberof RoomRoomType
     */
    roomCondition?: CodeDescriptionType;
    /**
     * Detail Long Description Of The Room.
     * @type {string}
     * @memberof RoomRoomType
     */
    roomDescription?: string;
    /**
     * A recurring element that identifies the room features.
     * @type {Array<RoomFeatureType>}
     * @memberof RoomRoomType
     */
    roomFeatures?: Array<RoomFeatureType>;
    /**
     * Code of the room.
     * @type {string}
     * @memberof RoomRoomType
     */
    roomId?: string;
    /**
     *
     * @type {RoomTypeShortInfoType}
     * @memberof RoomRoomType
     */
    roomType?: RoomTypeShortInfoType;
    /**
     * This indicates room smoking preference.
     * @type {string}
     * @memberof RoomRoomType
     */
    smokingPreference?: string;
    /**
     * This indicates the description of the room smoking preference.
     * @type {string}
     * @memberof RoomRoomType
     */
    smokingPreferenceDescription?: string;
}
/**
 * Check if a given object implements the RoomRoomType interface.
 */
export declare function instanceOfRoomRoomType(value: object): boolean;
export declare function RoomRoomTypeFromJSON(json: any): RoomRoomType;
export declare function RoomRoomTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomRoomType;
export declare function RoomRoomTypeToJSON(value?: RoomRoomType | null): any;
