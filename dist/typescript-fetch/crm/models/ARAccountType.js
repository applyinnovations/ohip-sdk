"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ARAccountTypeToJSON = exports.ARAccountTypeFromJSONTyped = exports.ARAccountTypeFromJSON = exports.instanceOfARAccountType = void 0;
const runtime_1 = require("../runtime");
const ARAccountStatusType_1 = require("./ARAccountStatusType");
const ARAccountTypeLastReminderInfo_1 = require("./ARAccountTypeLastReminderInfo");
const ARAccountTypeLastStatementInfo_1 = require("./ARAccountTypeLastStatementInfo");
const ARAgingInfoType_1 = require("./ARAgingInfoType");
const ARBalanceType_1 = require("./ARBalanceType");
const ARInvoiceType_1 = require("./ARInvoiceType");
const ARPaymentType_1 = require("./ARPaymentType");
const ARYearViewInfoType_1 = require("./ARYearViewInfoType");
const AddressInfoType_1 = require("./AddressInfoType");
const CommentInfoType_1 = require("./CommentInfoType");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const EmailInfoType_1 = require("./EmailInfoType");
const FixedChargeType_1 = require("./FixedChargeType");
const IndicatorType_1 = require("./IndicatorType");
const ProfileId_1 = require("./ProfileId");
const SearchMatchType_1 = require("./SearchMatchType");
const TelephoneInfoType_1 = require("./TelephoneInfoType");
const TraceType_1 = require("./TraceType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the ARAccountType interface.
 */
function instanceOfARAccountType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfARAccountType = instanceOfARAccountType;
function ARAccountTypeFromJSON(json) {
    return ARAccountTypeFromJSONTyped(json, false);
}
exports.ARAccountTypeFromJSON = ARAccountTypeFromJSON;
function ARAccountTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'accountName': !(0, runtime_1.exists)(json, 'accountName') ? undefined : json['accountName'],
        'accountId': !(0, runtime_1.exists)(json, 'accountId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['accountId']),
        'accountNo': !(0, runtime_1.exists)(json, 'accountNo') ? undefined : json['accountNo'],
        'profileId': !(0, runtime_1.exists)(json, 'profileId') ? undefined : (0, ProfileId_1.ProfileIdFromJSON)(json['profileId']),
        'balance': !(0, runtime_1.exists)(json, 'balance') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['balance']),
        'creditLimit': !(0, runtime_1.exists)(json, 'creditLimit') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['creditLimit']),
        'contactName': !(0, runtime_1.exists)(json, 'contactName') ? undefined : json['contactName'],
        'paymentDueDays': !(0, runtime_1.exists)(json, 'paymentDueDays') ? undefined : json['paymentDueDays'],
        'monthEndCalcYN': !(0, runtime_1.exists)(json, 'monthEndCalcYN') ? undefined : json['monthEndCalcYN'],
        'address': !(0, runtime_1.exists)(json, 'address') ? undefined : (0, AddressInfoType_1.AddressInfoTypeFromJSON)(json['address']),
        'email': !(0, runtime_1.exists)(json, 'email') ? undefined : (0, EmailInfoType_1.EmailInfoTypeFromJSON)(json['email']),
        'telephones': !(0, runtime_1.exists)(json, 'telephones') ? undefined : (json['telephones'].map(TelephoneInfoType_1.TelephoneInfoTypeFromJSON)),
        'lastReminderInfo': !(0, runtime_1.exists)(json, 'lastReminderInfo') ? undefined : (0, ARAccountTypeLastReminderInfo_1.ARAccountTypeLastReminderInfoFromJSON)(json['lastReminderInfo']),
        'lastStatementInfo': !(0, runtime_1.exists)(json, 'lastStatementInfo') ? undefined : (0, ARAccountTypeLastStatementInfo_1.ARAccountTypeLastStatementInfoFromJSON)(json['lastStatementInfo']),
        'notes': !(0, runtime_1.exists)(json, 'notes') ? undefined : (json['notes'].map(CommentInfoType_1.CommentInfoTypeFromJSON)),
        'traces': !(0, runtime_1.exists)(json, 'traces') ? undefined : (json['traces'].map(TraceType_1.TraceTypeFromJSON)),
        'fixedCharges': !(0, runtime_1.exists)(json, 'fixedCharges') ? undefined : (json['fixedCharges'].map(FixedChargeType_1.FixedChargeTypeFromJSON)),
        'accountIndicators': !(0, runtime_1.exists)(json, 'accountIndicators') ? undefined : (json['accountIndicators'].map(IndicatorType_1.IndicatorTypeFromJSON)),
        'agingInfo': !(0, runtime_1.exists)(json, 'agingInfo') ? undefined : (0, ARAgingInfoType_1.ARAgingInfoTypeFromJSON)(json['agingInfo']),
        'yearViewInfo': !(0, runtime_1.exists)(json, 'yearViewInfo') ? undefined : (0, ARYearViewInfoType_1.ARYearViewInfoTypeFromJSON)(json['yearViewInfo']),
        'invoices': !(0, runtime_1.exists)(json, 'invoices') ? undefined : (json['invoices'].map(ARInvoiceType_1.ARInvoiceTypeFromJSON)),
        'payments': !(0, runtime_1.exists)(json, 'payments') ? undefined : (json['payments'].map(ARPaymentType_1.ARPaymentTypeFromJSON)),
        'summary': !(0, runtime_1.exists)(json, 'summary') ? undefined : (0, ARBalanceType_1.ARBalanceTypeFromJSON)(json['summary']),
        'status': !(0, runtime_1.exists)(json, 'status') ? undefined : (0, ARAccountStatusType_1.ARAccountStatusTypeFromJSON)(json['status']),
        'batchStatement': !(0, runtime_1.exists)(json, 'batchStatement') ? undefined : json['batchStatement'],
        'printFoliosWithStatement': !(0, runtime_1.exists)(json, 'printFoliosWithStatement') ? undefined : json['printFoliosWithStatement'],
        'emailStatementsReminders': !(0, runtime_1.exists)(json, 'emailStatementsReminders') ? undefined : json['emailStatementsReminders'],
        'searchMatches': !(0, runtime_1.exists)(json, 'searchMatches') ? undefined : (json['searchMatches'].map(SearchMatchType_1.SearchMatchTypeFromJSON)),
        'primary': !(0, runtime_1.exists)(json, 'primary') ? undefined : json['primary'],
        'type': !(0, runtime_1.exists)(json, 'type') ? undefined : json['type'],
        'accountTypeDescription': !(0, runtime_1.exists)(json, 'accountTypeDescription') ? undefined : json['accountTypeDescription'],
        'permanent': !(0, runtime_1.exists)(json, 'permanent') ? undefined : json['permanent'],
    };
}
exports.ARAccountTypeFromJSONTyped = ARAccountTypeFromJSONTyped;
function ARAccountTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'accountName': value.accountName,
        'accountId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.accountId),
        'accountNo': value.accountNo,
        'profileId': (0, ProfileId_1.ProfileIdToJSON)(value.profileId),
        'balance': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.balance),
        'creditLimit': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.creditLimit),
        'contactName': value.contactName,
        'paymentDueDays': value.paymentDueDays,
        'monthEndCalcYN': value.monthEndCalcYN,
        'address': (0, AddressInfoType_1.AddressInfoTypeToJSON)(value.address),
        'email': (0, EmailInfoType_1.EmailInfoTypeToJSON)(value.email),
        'telephones': value.telephones === undefined ? undefined : (value.telephones.map(TelephoneInfoType_1.TelephoneInfoTypeToJSON)),
        'lastReminderInfo': (0, ARAccountTypeLastReminderInfo_1.ARAccountTypeLastReminderInfoToJSON)(value.lastReminderInfo),
        'lastStatementInfo': (0, ARAccountTypeLastStatementInfo_1.ARAccountTypeLastStatementInfoToJSON)(value.lastStatementInfo),
        'notes': value.notes === undefined ? undefined : (value.notes.map(CommentInfoType_1.CommentInfoTypeToJSON)),
        'traces': value.traces === undefined ? undefined : (value.traces.map(TraceType_1.TraceTypeToJSON)),
        'fixedCharges': value.fixedCharges === undefined ? undefined : (value.fixedCharges.map(FixedChargeType_1.FixedChargeTypeToJSON)),
        'accountIndicators': value.accountIndicators === undefined ? undefined : (value.accountIndicators.map(IndicatorType_1.IndicatorTypeToJSON)),
        'agingInfo': (0, ARAgingInfoType_1.ARAgingInfoTypeToJSON)(value.agingInfo),
        'yearViewInfo': (0, ARYearViewInfoType_1.ARYearViewInfoTypeToJSON)(value.yearViewInfo),
        'invoices': value.invoices === undefined ? undefined : (value.invoices.map(ARInvoiceType_1.ARInvoiceTypeToJSON)),
        'payments': value.payments === undefined ? undefined : (value.payments.map(ARPaymentType_1.ARPaymentTypeToJSON)),
        'summary': (0, ARBalanceType_1.ARBalanceTypeToJSON)(value.summary),
        'status': (0, ARAccountStatusType_1.ARAccountStatusTypeToJSON)(value.status),
        'batchStatement': value.batchStatement,
        'printFoliosWithStatement': value.printFoliosWithStatement,
        'emailStatementsReminders': value.emailStatementsReminders,
        'searchMatches': value.searchMatches === undefined ? undefined : (value.searchMatches.map(SearchMatchType_1.SearchMatchTypeToJSON)),
        'primary': value.primary,
        'type': value.type,
        'accountTypeDescription': value.accountTypeDescription,
        'permanent': value.permanent,
    };
}
exports.ARAccountTypeToJSON = ARAccountTypeToJSON;
