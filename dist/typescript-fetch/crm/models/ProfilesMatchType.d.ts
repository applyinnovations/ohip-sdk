/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { ProfileMatchStatusType } from './ProfileMatchStatusType';
import type { ShortInfoProfileType } from './ShortInfoProfileType';
/**
 * Type that contains the information of a profile match such as main profile, profile to merge, match id, status of the match, date when the points where computed for last time, etc.
 * @export
 * @interface ProfilesMatchType
 */
export interface ProfilesMatchType {
    /**
     * Unique identifier for this particular profile match record.
     * @type {string}
     * @memberof ProfilesMatchType
     */
    matchId?: string;
    /**
     *
     * @type {ShortInfoProfileType}
     * @memberof ProfilesMatchType
     */
    mainProfile?: ShortInfoProfileType;
    /**
     *
     * @type {ShortInfoProfileType}
     * @memberof ProfilesMatchType
     */
    profileToMerge?: ShortInfoProfileType;
    /**
     * Match criteria rule code that was used to create that match.
     * @type {string}
     * @memberof ProfilesMatchType
     */
    rule?: string;
    /**
     * Description of the match point for the profile merge.
     * @type {string}
     * @memberof ProfilesMatchType
     */
    matchCriteria?: string;
    /**
     * Total number of weighing match points that was found between main profile and profile to merge.
     * @type {number}
     * @memberof ProfilesMatchType
     */
    points?: number;
    /**
     *
     * @type {ProfileMatchStatusType}
     * @memberof ProfilesMatchType
     */
    status?: ProfileMatchStatusType;
    /**
     * Date when the weighing points were computed for the profiles
     * @type {string}
     * @memberof ProfilesMatchType
     */
    computedOn?: string;
    /**
     * If this value is true, then this record is set as do not merge, if false, it is set as merge.
     * @type {boolean}
     * @memberof ProfilesMatchType
     */
    doNotMerge?: boolean;
}
/**
 * Check if a given object implements the ProfilesMatchType interface.
 */
export declare function instanceOfProfilesMatchType(value: object): boolean;
export declare function ProfilesMatchTypeFromJSON(json: any): ProfilesMatchType;
export declare function ProfilesMatchTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProfilesMatchType;
export declare function ProfilesMatchTypeToJSON(value?: ProfilesMatchType | null): any;
