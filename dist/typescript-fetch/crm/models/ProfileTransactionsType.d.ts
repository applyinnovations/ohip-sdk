/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { MembershipTransactionId } from './MembershipTransactionId';
import type { TimeSpanType } from './TimeSpanType';
import type { UniqueIDType } from './UniqueIDType';
/**
 * Transaction related to the Profile.
 * @export
 * @interface ProfileTransactionsType
 */
export interface ProfileTransactionsType {
    /**
     * Stay Record or Membership Transaction Date.
     * @type {string}
     * @memberof ProfileTransactionsType
     */
    transactionDate?: string;
    /**
     * Stay Record or Membership Transaction Type.
     * @type {string}
     * @memberof ProfileTransactionsType
     */
    transactionType?: string;
    /**
     * Resort of the transaction.
     * @type {string}
     * @memberof ProfileTransactionsType
     */
    hotelId?: string;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof ProfileTransactionsType
     */
    reservationIdList?: Array<UniqueIDType>;
    /**
     * Flag to indicate if points are calculated.
     * @type {boolean}
     * @memberof ProfileTransactionsType
     */
    pointsCalculated?: boolean;
    /**
     *
     * @type {TimeSpanType}
     * @memberof ProfileTransactionsType
     */
    stayTimeSpan?: TimeSpanType;
    /**
     * The type of membership.
     * @type {string}
     * @memberof ProfileTransactionsType
     */
    membershipType?: string;
    /**
     * The membership card number.
     * @type {string}
     * @memberof ProfileTransactionsType
     */
    cardNumber?: string;
    /**
     * The level of the membership.
     * @type {string}
     * @memberof ProfileTransactionsType
     */
    membershipLevel?: string;
    /**
     * Award points for the transactions.
     * @type {number}
     * @memberof ProfileTransactionsType
     */
    awardPoints?: number;
    /**
     * Tier Night points for the transactions.
     * @type {number}
     * @memberof ProfileTransactionsType
     */
    tierNightPoints?: number;
    /**
     * Tier Stay points for the transactions.
     * @type {number}
     * @memberof ProfileTransactionsType
     */
    tierStayPoints?: number;
    /**
     * Tier Revenue points for the transactions.
     * @type {number}
     * @memberof ProfileTransactionsType
     */
    tierRevenuePoints?: number;
    /**
     * Date when points were created.
     * @type {string}
     * @memberof ProfileTransactionsType
     */
    pointsCreditDate?: string;
    /**
     * Stay Record Id of the transaction.
     * @type {string}
     * @memberof ProfileTransactionsType
     */
    stayRecordId?: string;
    /**
     *
     * @type {MembershipTransactionId}
     * @memberof ProfileTransactionsType
     */
    membershipTransactionId?: MembershipTransactionId;
    /**
     *
     * @type {UniqueIDType}
     * @memberof ProfileTransactionsType
     */
    membershipId?: UniqueIDType;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof ProfileTransactionsType
     */
    profileIdList?: Array<UniqueIDType>;
}
/**
 * Check if a given object implements the ProfileTransactionsType interface.
 */
export declare function instanceOfProfileTransactionsType(value: object): boolean;
export declare function ProfileTransactionsTypeFromJSON(json: any): ProfileTransactionsType;
export declare function ProfileTransactionsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProfileTransactionsType;
export declare function ProfileTransactionsTypeToJSON(value?: ProfileTransactionsType | null): any;
