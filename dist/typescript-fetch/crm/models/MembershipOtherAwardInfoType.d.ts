/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { OtherAwardAvailabilityType } from './OtherAwardAvailabilityType';
/**
 * Information about the OTHER type Award and profile membership. OTHER type awards can be redeemed based on the points available with a particular member.
 * @export
 * @interface MembershipOtherAwardInfoType
 */
export interface MembershipOtherAwardInfoType {
    /**
     *
     * @type {OtherAwardAvailabilityType}
     * @memberof MembershipOtherAwardInfoType
     */
    otherInfo?: OtherAwardAvailabilityType;
    /**
     * Unique Membership ID.
     * @type {number}
     * @memberof MembershipOtherAwardInfoType
     */
    membershipId?: number;
    /**
     * The card number associated with the membership.
     * @type {string}
     * @memberof MembershipOtherAwardInfoType
     */
    membershipNumber?: string;
    /**
     * The type of the membership.
     * @type {string}
     * @memberof MembershipOtherAwardInfoType
     */
    membershipType?: string;
}
/**
 * Check if a given object implements the MembershipOtherAwardInfoType interface.
 */
export declare function instanceOfMembershipOtherAwardInfoType(value: object): boolean;
export declare function MembershipOtherAwardInfoTypeFromJSON(json: any): MembershipOtherAwardInfoType;
export declare function MembershipOtherAwardInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipOtherAwardInfoType;
export declare function MembershipOtherAwardInfoTypeToJSON(value?: MembershipOtherAwardInfoType | null): any;
