/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Web site address.
 * @export
 * @interface StagedProfileURLType
 */
export interface StagedProfileURLType {
    /**
     * Indicates whether the phone is the default confirmation method.
     * @type {boolean}
     * @memberof StagedProfileURLType
     */
    defaultConfirmation?: boolean;
    /**
     * The error in URL in a staged profile with an invalid status
     * @type {string}
     * @memberof StagedProfileURLType
     */
    errorDescription?: string;
    /**
     * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
     * @type {string}
     * @memberof StagedProfileURLType
     */
    id?: string;
    /**
     * Inactivation date of the record.
     * @type {Date}
     * @memberof StagedProfileURLType
     */
    inactiveDate?: Date;
    /**
     * A reference to the type of object defined by the UniqueID element.
     * @type {string}
     * @memberof StagedProfileURLType
     */
    type?: string;
}

/**
 * Check if a given object implements the StagedProfileURLType interface.
 */
export function instanceOfStagedProfileURLType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StagedProfileURLTypeFromJSON(json: any): StagedProfileURLType {
    return StagedProfileURLTypeFromJSONTyped(json, false);
}

export function StagedProfileURLTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): StagedProfileURLType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'defaultConfirmation': !exists(json, 'defaultConfirmation') ? undefined : json['defaultConfirmation'],
        'errorDescription': !exists(json, 'errorDescription') ? undefined : json['errorDescription'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'inactiveDate': !exists(json, 'inactiveDate') ? undefined : (new Date(json['inactiveDate'])),
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function StagedProfileURLTypeToJSON(value?: StagedProfileURLType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'defaultConfirmation': value.defaultConfirmation,
        'errorDescription': value.errorDescription,
        'id': value.id,
        'inactiveDate': value.inactiveDate === undefined ? undefined : (value.inactiveDate.toISOString().substr(0,10)),
        'type': value.type,
    };
}

