/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Guest Preference details for the profile.
 * @export
 * @interface PreferenceType
 */
export interface PreferenceType {
    /**
     * Preference value for display purposes.
     * @type {string}
     * @memberof PreferenceType
     */
    preferenceValue?: string;
    /**
     * Preference Description for display purposes.
     * @type {string}
     * @memberof PreferenceType
     */
    description?: string;
    /**
     * Whether this preference is property specific or not.
     * @type {boolean}
     * @memberof PreferenceType
     */
    global?: boolean;
    /**
     * Source of the preference.
     * @type {string}
     * @memberof PreferenceType
     */
    source?: string;
    /**
     * If specified preference belongs to the Hotels listed, otherwise it is a global preference.
     * @type {Array<string>}
     * @memberof PreferenceType
     */
    hotels?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PreferenceType
     */
    preferenceCode?: string;
    /**
     * Specifies the count of preferences excluded for the attached reservation preference.
     * @type {number}
     * @memberof PreferenceType
     */
    excludedPreferencesCount?: number;
    /**
     * Specifies whether to copy the reservation preference to the profile or not.
     * @type {boolean}
     * @memberof PreferenceType
     */
    copyToProfile?: boolean;
}

/**
 * Check if a given object implements the PreferenceType interface.
 */
export function instanceOfPreferenceType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PreferenceTypeFromJSON(json: any): PreferenceType {
    return PreferenceTypeFromJSONTyped(json, false);
}

export function PreferenceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PreferenceType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'preferenceValue': !exists(json, 'preferenceValue') ? undefined : json['preferenceValue'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'global': !exists(json, 'global') ? undefined : json['global'],
        'source': !exists(json, 'source') ? undefined : json['source'],
        'hotels': !exists(json, 'hotels') ? undefined : json['hotels'],
        'preferenceCode': !exists(json, 'preferenceCode') ? undefined : json['preferenceCode'],
        'excludedPreferencesCount': !exists(json, 'excludedPreferencesCount') ? undefined : json['excludedPreferencesCount'],
        'copyToProfile': !exists(json, 'copyToProfile') ? undefined : json['copyToProfile'],
    };
}

export function PreferenceTypeToJSON(value?: PreferenceType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'preferenceValue': value.preferenceValue,
        'description': value.description,
        'global': value.global,
        'source': value.source,
        'hotels': value.hotels,
        'preferenceCode': value.preferenceCode,
        'excludedPreferencesCount': value.excludedPreferencesCount,
        'copyToProfile': value.copyToProfile,
    };
}

