/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * This provides information for a profile negotiated rate.
 * @export
 * @interface NegotiatedInfoType
 */
export interface NegotiatedInfoType {
    /**
     * Informational purposes only in numeric format.
     * @type {string}
     * @memberof NegotiatedInfoType
     */
    comissionCode?: string;
    /**
     * The master identifier for multiple offices/locations under the same company profile. This is optional
     * @type {string}
     * @memberof NegotiatedInfoType
     */
    corporateAgreementId?: string;
    /**
     * The ending value of the date range.
     * @type {Date}
     * @memberof NegotiatedInfoType
     */
    end?: Date;
    /**
     * Negotiated Rate is inactive or not
     * @type {boolean}
     * @memberof NegotiatedInfoType
     */
    inactive?: boolean;
    /**
     * The sell order.
     * @type {number}
     * @memberof NegotiatedInfoType
     */
    order?: number;
    /**
     * The starting value of the date range.
     * @type {Date}
     * @memberof NegotiatedInfoType
     */
    start?: Date;
}

/**
 * Check if a given object implements the NegotiatedInfoType interface.
 */
export function instanceOfNegotiatedInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function NegotiatedInfoTypeFromJSON(json: any): NegotiatedInfoType {
    return NegotiatedInfoTypeFromJSONTyped(json, false);
}

export function NegotiatedInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): NegotiatedInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'comissionCode': !exists(json, 'comissionCode') ? undefined : json['comissionCode'],
        'corporateAgreementId': !exists(json, 'corporateAgreementId') ? undefined : json['corporateAgreementId'],
        'end': !exists(json, 'end') ? undefined : (new Date(json['end'])),
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'order': !exists(json, 'order') ? undefined : json['order'],
        'start': !exists(json, 'start') ? undefined : (new Date(json['start'])),
    };
}

export function NegotiatedInfoTypeToJSON(value?: NegotiatedInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'comissionCode': value.comissionCode,
        'corporateAgreementId': value.corporateAgreementId,
        'end': value.end === undefined ? undefined : (value.end.toISOString().substr(0,10)),
        'inactive': value.inactive,
        'order': value.order,
        'start': value.start === undefined ? undefined : (value.start.toISOString().substr(0,10)),
    };
}

