/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Color configuration type. This color configuration provides a visual category of entities.
 * @export
 */
export declare const ColorType: {
    readonly Red: "Red";
    readonly DarkRed: "DarkRed";
    readonly Green: "Green";
    readonly DarkGreen: "DarkGreen";
    readonly LightGreen: "LightGreen";
    readonly Orange: "Orange";
    readonly White: "White";
    readonly Yellow: "Yellow";
    readonly DarkYellow: "DarkYellow";
    readonly Purple: "Purple";
    readonly Brown: "Brown";
    readonly Gray: "Gray";
    readonly Aqua: "Aqua";
    readonly Chocolate: "Chocolate";
    readonly Blue: "Blue";
    readonly LightBlue: "LightBlue";
    readonly DarkBlue: "DarkBlue";
    readonly Cyan: "Cyan";
    readonly DarkCyan: "DarkCyan";
    readonly Magenta: "Magenta";
    readonly DarkMagenta: "DarkMagenta";
    readonly Black: "Black";
};
export type ColorType = typeof ColorType[keyof typeof ColorType];
export declare function ColorTypeFromJSON(json: any): ColorType;
export declare function ColorTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ColorType;
export declare function ColorTypeToJSON(value?: ColorType | null): any;
