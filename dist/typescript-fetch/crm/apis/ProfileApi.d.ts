/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AccountForecasts, AwardDetails, ChangeAccountForecastsRS, ChangeProfileOwnersRequest, ChangedMembership, CheckedProfiles, CityState, Company, DuplicateExternalSubscriptions, DuplicateOPERASubscriptions, ECertificateGeneration, ECertificateToConsume, ECertificateToExtend, ECertificateToVerify, ECertificates, ForecastsInformation, ForgetProfilesCriteria, FulfillmentExportedLogs, FuturePastBookings, FuturePastBookingsCriteria, Guest, LinkedProfiles, MatchedProfiles, Membership, MembershipNumber, MembershipTierProjections, MergeProfilesRequest, MergedProfilesSnapshotDetails, MergedStageProfileSnapshot, PostProfileRelationshipRequest, PostProfileRequest, Preference, Profile, ProfileAccounts, ProfileActivityLog, ProfileAttachments, ProfileCashieringDetails, ProfileCashieringDetailsInfo, ProfileCommissionAccount, ProfileCommissionAccountCopy, ProfileCommissionAccountInfo, ProfileDetails, ProfileOwners, ProfileOwnersDetail, ProfileRelationships, ProfileStayHistory, ProfileSubscriptionsToSynchronize, ProfileSummaries, PutProfileRelationshipRequest, PutProfileRequest, RecentlyAccessedProfiles, StagedProfile, StagedProfileDetails, StagedProfiles, Status, StoreEmailRequest, SuspendedAddresses, SuspendedProfileErrorSummaryInfo, ValidatedForgetProfiles, VerifiedECertificate } from '../models/index';
export interface ChangeMembershipRequest {
    membershipId: string;
    membershipType: string;
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membership: Membership;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ChangeProfileCashieringDetailsRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileCashieringDetails: ProfileCashieringDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ChangeProfileOwnersOperationRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileOwners: ChangeProfileOwnersRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ChangeStagedProfileRequest {
    id: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    stagedProfile: StagedProfile;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface CheckProfileTypeRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: string;
    idContext?: string;
    idType?: string;
    checkProfileInstruction?: CheckProfileTypeCheckProfileInstructionEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ConsumeECertificateRequest {
    certificateId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eCertificateToConsume: ECertificateToConsume;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface CopyProfileCommissionAccountRequest {
    profileId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileCommissionAccountCopy: ProfileCommissionAccountCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteAccountForecastRequest {
    periodCode: string;
    hotelId: string;
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    periodCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteCertificateRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteECertificateRequest {
    certificateId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteGlobalPreferenceRequest {
    preferenceCode: string;
    preferenceType: string;
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    registeredProperty?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteMembershipRequest {
    membershipId: string;
    membershipType: string;
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteMultipleAccountForecastsRequest {
    hotelId: string;
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    periodCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeletePreferenceRequest {
    preferenceCode: string;
    preferenceType: string;
    hotelId: string;
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    registeredProperty?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteProfileRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteProfileAttachmentRequest {
    attachmentId: string;
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idExtension?: Array<number>;
    idContext?: Array<string>;
    type?: Array<string>;
    uniqueIdIdExtension?: Array<number>;
    uniqueIdIdContext?: Array<string>;
    uniqueIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteProfileCommissionAccountRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    validatePending?: boolean;
    hotelId?: string;
    profileIdExtension?: number;
    profileContext?: string;
    profileType?: string;
    bankAccountId?: string;
    bankAccountIdExtension?: number;
    bankAccountIdContext?: string;
    bankAccountIdType?: string;
    commissionCode?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteProfilePermanentlyRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DistributePreferenceRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    preference: Preference;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ExtendECertificateRequest {
    certificateId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eCertificateToExtend: ECertificateToExtend;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetAccountForecastsRequest {
    hotelId: string;
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fromPeriodCode?: string;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetAddressRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    excludeNoCity?: boolean;
    cityName?: string;
    postalCode?: string;
    state?: string;
    code?: string;
    streetAddress?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetAwardsRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileContext?: string;
    profileType?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCashieringDetailsRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchPaymentMethod?: boolean;
    fetchRoutingInstruction?: boolean;
    idContext?: string;
    idType?: string;
    hotelIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCompanyProfileRequest {
    corporateID: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetCompanyProfileFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetDuplicateExternalSubscriptionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    databaseId?: string;
    profileId?: string;
    profileContext?: string;
    profileType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetDuplicateOPERASubscriptionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    databaseId?: string;
    profileId?: string;
    profileContext?: string;
    profileType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetECertificatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileId?: string;
    profileContext?: string;
    profileType?: string;
    hotelId?: string;
    code?: string;
    groupCode?: string;
    status?: Set<GetECertificatesStatusEnum>;
    includeInactive?: boolean;
    voucherNo?: string;
    excludeVoucherNumbers?: Array<string>;
    availableECertificates?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetFulfillmentExportLogsRequest {
    membershipId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: string;
    idContext?: string;
    idType?: string;
    membershipType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetGuestProfileRequest {
    guestId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    fetchInstructions?: Set<GetGuestProfileFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetLinkedProfilesRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idContext?: string;
    idType?: string;
    profileTypes?: Set<GetLinkedProfilesProfileTypesEnum>;
    accountsReceivables?: boolean;
    corporateProfiles?: boolean;
    excludeInactive?: boolean;
    excludeIncompleteProfiles?: boolean;
    includeHasHierarchyOnly?: boolean;
    negotiatedRates?: boolean;
    linkedProfileAdditionalCriteriaProfileType?: GetLinkedProfilesLinkedProfileAdditionalCriteriaProfileTypeEnum;
    linkedProfileid?: string;
    linkedProfileIdContext?: string;
    linkedProfileIdType?: string;
    name?: string;
    givenName?: string;
    excludeNoCity?: boolean;
    cityName?: string;
    postalCode?: string;
    state?: string;
    countryCode?: string;
    streetAddress?: string;
    ownerCode?: Array<string>;
    aRNumber?: string;
    prioritiesCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMatchProfilesRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    idContext?: string;
    idType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipTierProjectionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipId?: string;
    membershipType?: string;
    id?: string;
    idContext?: string;
    type?: string;
    projectionDate?: string;
    projectionType?: GetMembershipTierProjectionsProjectionTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMergeProfilesSnapshotRequest {
    survivorProfileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    originalId?: string;
    originalIdContext?: string;
    originalIdType?: string;
    toBeMergedId?: Array<string>;
    toBeMergedIdContext?: Array<string>;
    toBeMergedIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMergeStageProfileSnapshotRequest {
    survivorProfileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    resortProfileId?: string;
    resortProfileIdContext?: string;
    resortProfileIdType?: string;
    profileIdContext?: string;
    profileIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetPreferenceForProfileRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: Array<string>;
    idContext?: Array<string>;
    type?: Array<string>;
    hotelId?: string;
    codes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetProfileRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    logViewProfile?: boolean;
    showInactiveRoomOwners?: boolean;
    markAsRecentlyAccessed?: boolean;
    fetchInstructions?: Set<GetProfileFetchInstructionsEnum>;
    instructionParameterType?: Set<GetProfileInstructionParameterTypeEnum>;
    value?: Array<string>;
    allowedAction?: Set<GetProfileAllowedActionEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetProfileAccountsRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idContext?: Array<string>;
    type?: Array<string>;
    hotelIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetProfileActivityLogRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    activityParamsHotelId?: string;
    module?: GetProfileActivityLogModuleEnum;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    activityGroup?: string;
    activityType?: string;
    fromDate?: string;
    toDate?: string;
    searchText?: string;
    userByIDs?: Array<number>;
    userForIDs?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetProfileAttachmentsRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetProfileByExtIdRequest {
    profileExternalId: string;
    extSystemCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    logViewProfile?: boolean;
    showInactiveRoomOwners?: boolean;
    fetchInstructions?: Set<GetProfileByExtIdFetchInstructionsEnum>;
    instructionParameterType?: Set<GetProfileByExtIdInstructionParameterTypeEnum>;
    value?: Array<string>;
    allowedAction?: Set<GetProfileByExtIdAllowedActionEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetProfileCommissionAccountRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetProfileOwnersRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: Array<string>;
    idContext?: Array<string>;
    type?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetProfileRelationshipsRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    relationshipPrimaryProfile?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetProfilesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    excludeInactive?: boolean;
    hotelId?: string;
    includeHasHierarchyOnly?: boolean;
    includePrimaryOwnersOnly?: boolean;
    includePurgeProfiles?: boolean;
    limit?: number;
    offset?: number;
    searchType?: GetProfilesSearchTypeEnum;
    summaryInfo?: boolean;
    searchString?: string;
    includeAnonymized?: boolean;
    profileType?: Set<GetProfilesProfileTypeEnum>;
    profileIds?: Array<string>;
    externalReferenceIds?: Array<string>;
    externalSystemCodes?: Array<string>;
    corporateIds?: Array<string>;
    profileName?: string;
    givenName?: string;
    incognitoName?: string;
    incognitoGivenName?: string;
    city?: string;
    postalCode?: string;
    state?: string;
    countryCode?: string;
    streetAddress?: string;
    keyword?: string;
    communication?: string;
    membership?: string;
    membershipType?: string;
    ownerCodes?: Array<string>;
    membershipLevel?: string;
    aRNumber?: string;
    taxID?: string;
    businessSegment?: Array<string>;
    accountsReceivables?: boolean;
    corporateProfiles?: boolean;
    excludeIncompleteProfiles?: boolean;
    negotiatedRates?: boolean;
    relatedProfileExcludeInactive?: boolean;
    realtedProfileIncludeHasHierarchyOnly?: boolean;
    relatedProfileNegotiatedRates?: boolean;
    relatedProfileType?: GetProfilesRelatedProfileTypeEnum;
    relatedProfileName?: string;
    protectedProfiles?: boolean;
    excludedProfilesId?: Array<string>;
    idExtension?: Array<number>;
    excludedProfilesIdContext?: Array<string>;
    excludedProfilesIdType?: Array<string>;
    identificationNo?: string;
    fetchInstructions?: Set<GetProfilesFetchInstructionsEnum>;
    allowedAction?: Set<GetProfilesAllowedActionEnum>;
    vipCodes?: Array<string>;
    predefinedFilterId?: number;
    predefinedFilterCode?: string;
    prioritieCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetProfilesByIdsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileIds?: Array<string>;
    corporateIds?: Array<string>;
    externalReferenceIds?: Array<string>;
    externalSystemCodes?: Array<string>;
    limit?: Array<number>;
    fetchInstructions?: Set<GetProfilesByIdsFetchInstructionsEnum>;
    instructionParameterType?: Set<GetProfilesByIdsInstructionParameterTypeEnum>;
    instructionParameterValue?: Array<string>;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRecentlyAccessedProfilesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetStagedProfileRequest {
    id: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    idContext?: Array<string>;
    type?: Array<string>;
    fetchInstructions?: Set<GetStagedProfileFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetStagedProfilesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelIds?: Array<string>;
    id?: Array<string>;
    idContext?: Array<string>;
    type?: Array<string>;
    name?: string;
    givenName?: string;
    region?: string;
    countryCode?: string;
    profileType?: string;
    importDate?: string;
    stageStatus?: string;
    applyTo?: GetStagedProfilesApplyToEnum;
    membershipCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetStayHistoryRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    includePurgeProfiles?: boolean;
    markAsRecentlyAccessed?: boolean;
    limit?: Array<number>;
    fetchInstructions?: Set<GetStayHistoryFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetSuspendedAddressesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    name?: string;
    hotelId?: string;
    firstName?: string;
    profileType?: string;
    matchCode?: string;
    countryCode?: string;
    validateDate?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetSuspendedProfileErrorSummaryRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface MergeProfilesOperationRequest {
    survivorProfileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileToBeMerged: MergeProfilesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostAccountForecastRequest {
    hotelId: string;
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    forecastsInformation: ForecastsInformation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCompanyProfileRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    company: Company;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostECertificateRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eCertificateGeneration: ECertificateGeneration;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostGuestProfileRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guest: Guest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostMembershipRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membership: Membership;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostMembershipNumberRequest {
    membershipType: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipNumber: MembershipNumber;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostPreferenceRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    preference: Preference;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostProfileOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profile: PostProfileRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostProfileCommissionAccountRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileCommissionAccount: ProfileCommissionAccount;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostProfileOwnersRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileOwners: ProfileOwners;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostProfileRelationshipOperationRequest {
    targetProfileId: string;
    sourceProfileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileRelationship: PostProfileRelationshipRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutAccountForecastRequest {
    periodCode: string;
    hotelId: string;
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    forecastsInformation: ForecastsInformation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutProfileOperationRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profile: PutProfileRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutProfileRelationshipOperationRequest {
    targetProfileId: string;
    sourceProfileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileRelationshipToBeChanged: PutProfileRelationshipRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface RemoveProfileRelationshipRequest {
    targetProfileId: string;
    sourceProfileId: string;
    sourceRelation: string;
    targetRelation: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    primary?: boolean;
    sourceRelationDescription?: string;
    targetRelationDescription?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface SetProfileCommissionAccountRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileCommissionAccount: ProfileCommissionAccount;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface StoreEmailOperationRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    emailMessageType: StoreEmailRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface SynchronizeProfileSubscriptionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileSubscriptionsToSynchronize: ProfileSubscriptionsToSynchronize;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ValidateForgetProfilesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    forgetProfilesCriteria: ForgetProfilesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ValidateReservationsForProfileRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    futurePastBookingsCriteria: FuturePastBookingsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface VerifyECertificateRequest {
    certificateId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eCertificateToVerify: ECertificateToVerify;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class ProfileApi extends runtime.BaseAPI {
    /**
     * Use this API to update membership details on a profile. <p><strong>OperationId:</strong>changeMembership</p>
     * Change membership information on a profile
     */
    changeMembershipRaw(requestParameters: ChangeMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedMembership>>;
    /**
     * Use this API to update membership details on a profile. <p><strong>OperationId:</strong>changeMembership</p>
     * Change membership information on a profile
     */
    changeMembership(requestParameters: ChangeMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedMembership>;
    /**
     * Update a profiles Financial details, such as billing, routing instructions. <p><strong>OperationId:</strong>changeProfileCashieringDetails</p>
     * Change cashiering details for a profile
     */
    changeProfileCashieringDetailsRaw(requestParameters: ChangeProfileCashieringDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Update a profiles Financial details, such as billing, routing instructions. <p><strong>OperationId:</strong>changeProfileCashieringDetails</p>
     * Change cashiering details for a profile
     */
    changeProfileCashieringDetails(requestParameters: ChangeProfileCashieringDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Update an Owner on a profile  <p><strong>OperationId:</strong>changeProfileOwners</p>
     * Change profile owners
     */
    changeProfileOwnersRaw(requestParameters: ChangeProfileOwnersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Update an Owner on a profile  <p><strong>OperationId:</strong>changeProfileOwners</p>
     * Change profile owners
     */
    changeProfileOwners(requestParameters: ChangeProfileOwnersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API can be used to update the staged Profile. <p><strong>OperationId:</strong>changeStagedProfile</p>
     * Change a staged profile
     */
    changeStagedProfileRaw(requestParameters: ChangeStagedProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API can be used to update the staged Profile. <p><strong>OperationId:</strong>changeStagedProfile</p>
     * Change a staged profile
     */
    changeStagedProfile(requestParameters: ChangeStagedProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API validates/checks allowed actions, the existence of attached records and/or indicators of a profile. <p><strong>OperationId:</strong>checkProfileType</p>
     * Validate and check profiles
     */
    checkProfileTypeRaw(requestParameters: CheckProfileTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckedProfiles>>;
    /**
     * This API validates/checks allowed actions, the existence of attached records and/or indicators of a profile. <p><strong>OperationId:</strong>checkProfileType</p>
     * Validate and check profiles
     */
    checkProfileType(requestParameters: CheckProfileTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckedProfiles>;
    /**
     * Use this API to consume (use) an E-Certificate.  <p><strong>OperationId:</strong>consumeECertificate</p>
     * Consume an E-Certificate
     */
    consumeECertificateRaw(requestParameters: ConsumeECertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to consume (use) an E-Certificate.  <p><strong>OperationId:</strong>consumeECertificate</p>
     * Consume an E-Certificate
     */
    consumeECertificate(requestParameters: ConsumeECertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to copy the commission account on a profile <p><strong>OperationId:</strong>copyProfileCommissionAccount</p>
     * Copy profile commission account
     */
    copyProfileCommissionAccountRaw(requestParameters: CopyProfileCommissionAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to copy the commission account on a profile <p><strong>OperationId:</strong>copyProfileCommissionAccount</p>
     * Copy profile commission account
     */
    copyProfileCommissionAccount(requestParameters: CopyProfileCommissionAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this to delete an existing account Forecast for a hotel.  You must know the period code for this API. <p><strong>OperationId:</strong>deleteAccountForecast</p>
     * Delete account forecast in a hotel by period code
     */
    deleteAccountForecastRaw(requestParameters: DeleteAccountForecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this to delete an existing account Forecast for a hotel.  You must know the period code for this API. <p><strong>OperationId:</strong>deleteAccountForecast</p>
     * Delete account forecast in a hotel by period code
     */
    deleteAccountForecast(requestParameters: DeleteAccountForecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API will allow you to delete a certificate. <p><strong>OperationId:</strong>deleteCertificate</p>
     * Delete certificate
     */
    deleteCertificateRaw(requestParameters: DeleteCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API will allow you to delete a certificate. <p><strong>OperationId:</strong>deleteCertificate</p>
     * Delete certificate
     */
    deleteCertificate(requestParameters: DeleteCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API allows you to delete an eCertificates which exist on a profile in OPERA Cloud. <p><strong>OperationId:</strong>deleteECertificate</p>
     * Delete e-certificate
     */
    deleteECertificateRaw(requestParameters: DeleteECertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API allows you to delete an eCertificates which exist on a profile in OPERA Cloud. <p><strong>OperationId:</strong>deleteECertificate</p>
     * Delete e-certificate
     */
    deleteECertificate(requestParameters: DeleteECertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This will allow you to delete a global preference code from a profile.  For example the guest no longer has a preference for High Floor Room, so you would go ahead and delete this preference from their profile. <p><strong>OperationId:</strong>deleteGlobalPreference</p>
     * Delete a global preference from a profile
     */
    deleteGlobalPreferenceRaw(requestParameters: DeleteGlobalPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This will allow you to delete a global preference code from a profile.  For example the guest no longer has a preference for High Floor Room, so you would go ahead and delete this preference from their profile. <p><strong>OperationId:</strong>deleteGlobalPreference</p>
     * Delete a global preference from a profile
     */
    deleteGlobalPreference(requestParameters: DeleteGlobalPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete membership details on a profile. <p><strong>OperationId:</strong>deleteMembership</p>
     * Delete membership information from a profile
     */
    deleteMembershipRaw(requestParameters: DeleteMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete membership details on a profile. <p><strong>OperationId:</strong>deleteMembership</p>
     * Delete membership information from a profile
     */
    deleteMembership(requestParameters: DeleteMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete multiple account forecasts. <p><strong>OperationId:</strong>deleteMultipleAccountForecasts</p>
     * Delete multiple account forecasts
     */
    deleteMultipleAccountForecastsRaw(requestParameters: DeleteMultipleAccountForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete multiple account forecasts. <p><strong>OperationId:</strong>deleteMultipleAccountForecasts</p>
     * Delete multiple account forecasts
     */
    deleteMultipleAccountForecasts(requestParameters: DeleteMultipleAccountForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This will allow you to delete a preference code from a profile.  For example the guest no longer has a preference for High Floor Room, so you would go ahead and delete this preference from their profile. <p><strong>OperationId:</strong>deletePreference</p>
     * Delete a preference from a profile
     */
    deletePreferenceRaw(requestParameters: DeletePreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This will allow you to delete a preference code from a profile.  For example the guest no longer has a preference for High Floor Room, so you would go ahead and delete this preference from their profile. <p><strong>OperationId:</strong>deletePreference</p>
     * Delete a preference from a profile
     */
    deletePreference(requestParameters: DeletePreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use deleteProfile to inactivate and remove a profile from OPERA. The profile will stay in the Database, until a nightly purge process is run to remove profile details from the OPERA database. <p><strong>OperationId:</strong>deleteProfile</p>
     * Forget or delete a profile by ID
     */
    deleteProfileRaw(requestParameters: DeleteProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use deleteProfile to inactivate and remove a profile from OPERA. The profile will stay in the Database, until a nightly purge process is run to remove profile details from the OPERA database. <p><strong>OperationId:</strong>deleteProfile</p>
     * Forget or delete a profile by ID
     */
    deleteProfile(requestParameters: DeleteProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API will delete an attachment on a profile in OPERA Cloud. <p><strong>OperationId:</strong>deleteProfileAttachment</p>
     * Delete profile attachment
     */
    deleteProfileAttachmentRaw(requestParameters: DeleteProfileAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API will delete an attachment on a profile in OPERA Cloud. <p><strong>OperationId:</strong>deleteProfileAttachment</p>
     * Delete profile attachment
     */
    deleteProfileAttachment(requestParameters: DeleteProfileAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Delete a Commission Account from a specified profile. <p><strong>OperationId:</strong>deleteProfileCommissionAccount</p>
     * Delete a commission account from a profile
     */
    deleteProfileCommissionAccountRaw(requestParameters: DeleteProfileCommissionAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Delete a Commission Account from a specified profile. <p><strong>OperationId:</strong>deleteProfileCommissionAccount</p>
     * Delete a commission account from a profile
     */
    deleteProfileCommissionAccount(requestParameters: DeleteProfileCommissionAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>deleteProfilePermanently</p>
     * Delete the profile permanently.
     */
    deleteProfilePermanentlyRaw(requestParameters: DeleteProfilePermanentlyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>deleteProfilePermanently</p>
     * Delete the profile permanently.
     */
    deleteProfilePermanently(requestParameters: DeleteProfilePermanentlyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * With this API you can distribute preferences on a profile. <p><strong>OperationId:</strong>distributePreference</p>
     * Distribute preferences on a profile
     */
    distributePreferenceRaw(requestParameters: DistributePreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * With this API you can distribute preferences on a profile. <p><strong>OperationId:</strong>distributePreference</p>
     * Distribute preferences on a profile
     */
    distributePreference(requestParameters: DistributePreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to extend the date of an existing E-Certificate. <p><strong>OperationId:</strong>extendECertificate</p>
     * Extend E-Certificate Expiry date
     */
    extendECertificateRaw(requestParameters: ExtendECertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to extend the date of an existing E-Certificate. <p><strong>OperationId:</strong>extendECertificate</p>
     * Extend E-Certificate Expiry date
     */
    extendECertificate(requestParameters: ExtendECertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to retrieve account forecasts for a hotel <p><strong>OperationId:</strong>getAccountForecasts</p>
     * Fetch Account Forecasts by hotel
     */
    getAccountForecastsRaw(requestParameters: GetAccountForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountForecasts>>;
    /**
     * You can use this API to retrieve account forecasts for a hotel <p><strong>OperationId:</strong>getAccountForecasts</p>
     * Fetch Account Forecasts by hotel
     */
    getAccountForecasts(requestParameters: GetAccountForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountForecasts>;
    /**
     * This API will get city and states. <p><strong>OperationId:</strong>getAddress</p>
     * Get city states
     */
    getAddressRaw(requestParameters: GetAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CityState>>;
    /**
     * This API will get city and states. <p><strong>OperationId:</strong>getAddress</p>
     * Get city states
     */
    getAddress(requestParameters: GetAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CityState>;
    /**
     * Get Profile awards and certificates that exist on a profile. <p><strong>OperationId:</strong>getAwards</p>
     * Get Profile awards and certificates
     */
    getAwardsRaw(requestParameters: GetAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AwardDetails>>;
    /**
     * Get Profile awards and certificates that exist on a profile. <p><strong>OperationId:</strong>getAwards</p>
     * Get Profile awards and certificates
     */
    getAwards(requestParameters: GetAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AwardDetails>;
    /**
     * Retrieve any profile Financial details that exists on a profile (typically Company or Travel Agent profiles).  This includes Routing Instructions on the profile. <p><strong>OperationId:</strong>getCashieringDetails</p>
     * Get cashiering details for a profile
     */
    getCashieringDetailsRaw(requestParameters: GetCashieringDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileCashieringDetailsInfo>>;
    /**
     * Retrieve any profile Financial details that exists on a profile (typically Company or Travel Agent profiles).  This includes Routing Instructions on the profile. <p><strong>OperationId:</strong>getCashieringDetails</p>
     * Get cashiering details for a profile
     */
    getCashieringDetails(requestParameters: GetCashieringDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileCashieringDetailsInfo>;
    /**
     * Use this to retrieve a specific Company, Travel Agent, Group or Source profile. You must know the corporate ID of the profile for the request API. <p><strong>OperationId:</strong>getCompanyProfile</p>
     * Get company profile by corporate ID
     */
    getCompanyProfileRaw(requestParameters: GetCompanyProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Company>>;
    /**
     * Use this to retrieve a specific Company, Travel Agent, Group or Source profile. You must know the corporate ID of the profile for the request API. <p><strong>OperationId:</strong>getCompanyProfile</p>
     * Get company profile by corporate ID
     */
    getCompanyProfile(requestParameters: GetCompanyProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Company>;
    /**
     * Fetch profile subscriptions where the same OPERA Cloud profile is linked to multiple external profiles, within the same external system. <p><strong>OperationId:</strong>getDuplicateExternalSubscriptions</p>
     * Get profiles with duplicate external subscriptions
     */
    getDuplicateExternalSubscriptionsRaw(requestParameters: GetDuplicateExternalSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DuplicateExternalSubscriptions>>;
    /**
     * Fetch profile subscriptions where the same OPERA Cloud profile is linked to multiple external profiles, within the same external system. <p><strong>OperationId:</strong>getDuplicateExternalSubscriptions</p>
     * Get profiles with duplicate external subscriptions
     */
    getDuplicateExternalSubscriptions(requestParameters: GetDuplicateExternalSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DuplicateExternalSubscriptions>;
    /**
     * Fetch subscriptions where an external profile within a particular external system is linked to multiple OPERA Cloud profiles. <p><strong>OperationId:</strong>getDuplicateOPERASubscriptions</p>
     * Get profiles with duplicate OPERA Cloud subscriptions
     */
    getDuplicateOPERASubscriptionsRaw(requestParameters: GetDuplicateOPERASubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DuplicateOPERASubscriptions>>;
    /**
     * Fetch subscriptions where an external profile within a particular external system is linked to multiple OPERA Cloud profiles. <p><strong>OperationId:</strong>getDuplicateOPERASubscriptions</p>
     * Get profiles with duplicate OPERA Cloud subscriptions
     */
    getDuplicateOPERASubscriptions(requestParameters: GetDuplicateOPERASubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DuplicateOPERASubscriptions>;
    /**
     * This API allows you to retrieve eCertificates which exist on a profile in OPERA Cloud. <p><strong>OperationId:</strong>getECertificates</p>
     * Get e-certificate
     */
    getECertificatesRaw(requestParameters: GetECertificatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ECertificates>>;
    /**
     * This API allows you to retrieve eCertificates which exist on a profile in OPERA Cloud. <p><strong>OperationId:</strong>getECertificates</p>
     * Get e-certificate
     */
    getECertificates(requestParameters: GetECertificatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ECertificates>;
    /**
     * Use this API to Get Fulfillment Export Logs. <p><strong>OperationId:</strong>getFulfillmentExportLogs</p>
     * Get Fulfillment Export Logs
     */
    getFulfillmentExportLogsRaw(requestParameters: GetFulfillmentExportLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FulfillmentExportedLogs>>;
    /**
     * Use this API to Get Fulfillment Export Logs. <p><strong>OperationId:</strong>getFulfillmentExportLogs</p>
     * Get Fulfillment Export Logs
     */
    getFulfillmentExportLogs(requestParameters: GetFulfillmentExportLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FulfillmentExportedLogs>;
    /**
     * Use this API to retrieve all data stored for a guest Profile, such as their address, phone number, preferences. You must already know the guests Profile ID. If you don\'t know the profile ID, first use the API getGuests to find the profile ID. <p><strong>OperationId:</strong>getGuestProfile</p>
     * Get guest profile by guest ID
     */
    getGuestProfileRaw(requestParameters: GetGuestProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Guest>>;
    /**
     * Use this API to retrieve all data stored for a guest Profile, such as their address, phone number, preferences. You must already know the guests Profile ID. If you don\'t know the profile ID, first use the API getGuests to find the profile ID. <p><strong>OperationId:</strong>getGuestProfile</p>
     * Get guest profile by guest ID
     */
    getGuestProfile(requestParameters: GetGuestProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Guest>;
    /**
     * Retrieve profiles that are linked to an existing profile in OPERA Cloud. <p><strong>OperationId:</strong>getLinkedProfiles</p>
     * Get linked profiles
     */
    getLinkedProfilesRaw(requestParameters: GetLinkedProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LinkedProfiles>>;
    /**
     * Retrieve profiles that are linked to an existing profile in OPERA Cloud. <p><strong>OperationId:</strong>getLinkedProfiles</p>
     * Get linked profiles
     */
    getLinkedProfiles(requestParameters: GetLinkedProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LinkedProfiles>;
    /**
     * Retrieve profiles that match another profile. <p><strong>OperationId:</strong>getMatchProfiles</p>
     * Get profile matches
     */
    getMatchProfilesRaw(requestParameters: GetMatchProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MatchedProfiles>>;
    /**
     * Retrieve profiles that match another profile. <p><strong>OperationId:</strong>getMatchProfiles</p>
     * Get profile matches
     */
    getMatchProfiles(requestParameters: GetMatchProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MatchedProfiles>;
    /**
     * Retrieve a list of membership Tier Projection such as upgrades and downgrades. <p><strong>OperationId:</strong>getMembershipTierProjections</p>
     * Get Membership Tier Projection
     */
    getMembershipTierProjectionsRaw(requestParameters: GetMembershipTierProjectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipTierProjections>>;
    /**
     * Retrieve a list of membership Tier Projection such as upgrades and downgrades. <p><strong>OperationId:</strong>getMembershipTierProjections</p>
     * Get Membership Tier Projection
     */
    getMembershipTierProjections(requestParameters: GetMembershipTierProjectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipTierProjections>;
    /**
     * This API will provide you with a snapshot of the to be merged profile. In the request you will pass the survivor profile, along with the profile ID of the profile which it to be merged into the survivor profile.  The response will provide you with the combined profile data of both profiles which are being merged. <p><strong>OperationId:</strong>getMergeProfilesSnapshot</p>
     * Get merge profiles snapshot
     */
    getMergeProfilesSnapshotRaw(requestParameters: GetMergeProfilesSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MergedProfilesSnapshotDetails>>;
    /**
     * This API will provide you with a snapshot of the to be merged profile. In the request you will pass the survivor profile, along with the profile ID of the profile which it to be merged into the survivor profile.  The response will provide you with the combined profile data of both profiles which are being merged. <p><strong>OperationId:</strong>getMergeProfilesSnapshot</p>
     * Get merge profiles snapshot
     */
    getMergeProfilesSnapshot(requestParameters: GetMergeProfilesSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MergedProfilesSnapshotDetails>;
    /**
     * This API will provide you with a snapshot of the to be merged profile in staging. <p><strong>OperationId:</strong>getMergeStageProfileSnapshot</p>
     * Get merge stage profile snapshot
     */
    getMergeStageProfileSnapshotRaw(requestParameters: GetMergeStageProfileSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MergedStageProfileSnapshot>>;
    /**
     * This API will provide you with a snapshot of the to be merged profile in staging. <p><strong>OperationId:</strong>getMergeStageProfileSnapshot</p>
     * Get merge stage profile snapshot
     */
    getMergeStageProfileSnapshot(requestParameters: GetMergeStageProfileSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MergedStageProfileSnapshot>;
    /**
     * Use this API to retrieve all preferences that a profile has stored on it.  Preferences are configured codes by a property, examples are usually High Floor, Non smoking room, Room with a View, soft pillow etc.  <p><strong>OperationId:</strong>getPreferenceForProfile</p>
     * Get preferences on a profile
     */
    getPreferenceForProfileRaw(requestParameters: GetPreferenceForProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Preference>>;
    /**
     * Use this API to retrieve all preferences that a profile has stored on it.  Preferences are configured codes by a property, examples are usually High Floor, Non smoking room, Room with a View, soft pillow etc.  <p><strong>OperationId:</strong>getPreferenceForProfile</p>
     * Get preferences on a profile
     */
    getPreferenceForProfile(requestParameters: GetPreferenceForProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Preference>;
    /**
     * Use this API to retrieve a specific profile&apos;s detail information using OPERA&apos;s profileId. You can retrieve any type of profile including guest, travel agent, company, source, group, or contact. If you do not know OPERA profileID, use getProfiles or getProfileByExtId API first to get OPERA profileId.<p><strong>OperationId:</strong>getProfile</p>
     * Get profile by ID
     */
    getProfileRaw(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>>;
    /**
     * Use this API to retrieve a specific profile&apos;s detail information using OPERA&apos;s profileId. You can retrieve any type of profile including guest, travel agent, company, source, group, or contact. If you do not know OPERA profileID, use getProfiles or getProfileByExtId API first to get OPERA profileId.<p><strong>OperationId:</strong>getProfile</p>
     * Get profile by ID
     */
    getProfile(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile>;
    /**
     * You can find the accounts that are listed on a profile with this API. <p><strong>OperationId:</strong>getProfileAccounts</p>
     * Get profile accounts
     */
    getProfileAccountsRaw(requestParameters: GetProfileAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileAccounts>>;
    /**
     * You can find the accounts that are listed on a profile with this API. <p><strong>OperationId:</strong>getProfileAccounts</p>
     * Get profile accounts
     */
    getProfileAccounts(requestParameters: GetProfileAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileAccounts>;
    /**
     * Use this API to fetch the activity log for a specific profile.  This will allow you to see the changes that have occurred on this profile. <p><strong>OperationId:</strong>getProfileActivityLog</p>
     * Fetch profile activity log
     */
    getProfileActivityLogRaw(requestParameters: GetProfileActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileActivityLog>>;
    /**
     * Use this API to fetch the activity log for a specific profile.  This will allow you to see the changes that have occurred on this profile. <p><strong>OperationId:</strong>getProfileActivityLog</p>
     * Fetch profile activity log
     */
    getProfileActivityLog(requestParameters: GetProfileActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileActivityLog>;
    /**
     * This API will provide the attachments on a profile in OPERA Cloud. <p><strong>OperationId:</strong>getProfileAttachments</p>
     * Get profile attachments
     */
    getProfileAttachmentsRaw(requestParameters: GetProfileAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileAttachments>>;
    /**
     * This API will provide the attachments on a profile in OPERA Cloud. <p><strong>OperationId:</strong>getProfileAttachments</p>
     * Get profile attachments
     */
    getProfileAttachments(requestParameters: GetProfileAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileAttachments>;
    /**
     * When a reservation is booked via an external system, you would use this API to retrieve a reservation using the external ID in the request <p><strong>OperationId:</strong>getProfileByExtId</p>
     * Get profile by external ID
     */
    getProfileByExtIdRaw(requestParameters: GetProfileByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>>;
    /**
     * When a reservation is booked via an external system, you would use this API to retrieve a reservation using the external ID in the request <p><strong>OperationId:</strong>getProfileByExtId</p>
     * Get profile by external ID
     */
    getProfileByExtId(requestParameters: GetProfileByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile>;
    /**
     * Retrieve Commission Account details from a specified profile. <p><strong>OperationId:</strong>getProfileCommissionAccount</p>
     * Get commission account on a profile
     */
    getProfileCommissionAccountRaw(requestParameters: GetProfileCommissionAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileCommissionAccountInfo>>;
    /**
     * Retrieve Commission Account details from a specified profile. <p><strong>OperationId:</strong>getProfileCommissionAccount</p>
     * Get commission account on a profile
     */
    getProfileCommissionAccount(requestParameters: GetProfileCommissionAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileCommissionAccountInfo>;
    /**
     * Retrieve the Owners listed on a profile. <p><strong>OperationId:</strong>getProfileOwners</p>
     * Get profile owners
     */
    getProfileOwnersRaw(requestParameters: GetProfileOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileOwnersDetail>>;
    /**
     * Retrieve the Owners listed on a profile. <p><strong>OperationId:</strong>getProfileOwners</p>
     * Get profile owners
     */
    getProfileOwners(requestParameters: GetProfileOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileOwnersDetail>;
    /**
     *  <p><strong>OperationId:</strong>getProfileRelationships</p>
     * FetchProfileRelationships method provides the ability to retrieve a profile relationships for a profile based on the unique internal profile ID specified.
     */
    getProfileRelationshipsRaw(requestParameters: GetProfileRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileRelationships>>;
    /**
     *  <p><strong>OperationId:</strong>getProfileRelationships</p>
     * FetchProfileRelationships method provides the ability to retrieve a profile relationships for a profile based on the unique internal profile ID specified.
     */
    getProfileRelationships(requestParameters: GetProfileRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileRelationships>;
    /**
     * Use this API when you want to search for a profile as part of a booking process or to manage a profile data. The response will include a list of profiles that exist in OPERA, based on your search criteria.  For example, you want to see if a profile for Mr David Smith exists - you can search by various criteria, such as first name, last name, email.  The response will include a list of any profiles that exist for Mr David Smith.  If a profile matches the criteria, and you want to get more details of that profile, proceed to use getProfile with the profileId in the request. Maximum response data limit is 1000 records, so use more query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data.<p><strong>OperationId:</strong>getProfiles</p>
     * Search for profile(s)
     */
    getProfilesRaw(requestParameters: GetProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileSummaries>>;
    /**
     * Use this API when you want to search for a profile as part of a booking process or to manage a profile data. The response will include a list of profiles that exist in OPERA, based on your search criteria.  For example, you want to see if a profile for Mr David Smith exists - you can search by various criteria, such as first name, last name, email.  The response will include a list of any profiles that exist for Mr David Smith.  If a profile matches the criteria, and you want to get more details of that profile, proceed to use getProfile with the profileId in the request. Maximum response data limit is 1000 records, so use more query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data.<p><strong>OperationId:</strong>getProfiles</p>
     * Search for profile(s)
     */
    getProfiles(requestParameters: GetProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileSummaries>;
    /**
     * Use this API when you want to search for a profile. The response will include a list of profiles that exist in OPERA, based on your search criteria.  For example, you want to see if  a profile for Mr David Smith exists - you can search by various criteria, such as first, last name, email.  The response will include a list of any profiles that exist for Mr Davis Smith.  If a profile matches the criteria, and you want to get more details of that profile, proceed to use getProfile with the profileID in the request. <p><strong>OperationId:</strong>getProfilesByIds</p>
     * Search for profile(s)
     */
    getProfilesByIdsRaw(requestParameters: GetProfilesByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileDetails>>;
    /**
     * Use this API when you want to search for a profile. The response will include a list of profiles that exist in OPERA, based on your search criteria.  For example, you want to see if  a profile for Mr David Smith exists - you can search by various criteria, such as first, last name, email.  The response will include a list of any profiles that exist for Mr Davis Smith.  If a profile matches the criteria, and you want to get more details of that profile, proceed to use getProfile with the profileID in the request. <p><strong>OperationId:</strong>getProfilesByIds</p>
     * Search for profile(s)
     */
    getProfilesByIds(requestParameters: GetProfilesByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileDetails>;
    /**
     * Use this API to fetch the profiles that have recently been accessed by an application user. <p><strong>OperationId:</strong>getRecentlyAccessedProfiles</p>
     * Fetch recently accessed profiles
     */
    getRecentlyAccessedProfilesRaw(requestParameters: GetRecentlyAccessedProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecentlyAccessedProfiles>>;
    /**
     * Use this API to fetch the profiles that have recently been accessed by an application user. <p><strong>OperationId:</strong>getRecentlyAccessedProfiles</p>
     * Fetch recently accessed profiles
     */
    getRecentlyAccessedProfiles(requestParameters: GetRecentlyAccessedProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecentlyAccessedProfiles>;
    /**
     * The system suspends / stages a profile with a point value between the upper and lower thresholds. When a profile is staged, you must review the suspended profile and determine if it should be merged with an internal profile or added as a new profile.  This API will get a specific profile that has been staged. <p><strong>OperationId:</strong>getStagedProfile</p>
     * Get a staged profile
     */
    getStagedProfileRaw(requestParameters: GetStagedProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StagedProfileDetails>>;
    /**
     * The system suspends / stages a profile with a point value between the upper and lower thresholds. When a profile is staged, you must review the suspended profile and determine if it should be merged with an internal profile or added as a new profile.  This API will get a specific profile that has been staged. <p><strong>OperationId:</strong>getStagedProfile</p>
     * Get a staged profile
     */
    getStagedProfile(requestParameters: GetStagedProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StagedProfileDetails>;
    /**
     * The system suspends / stages a profile with a point value between the upper and lower thresholds. When a profile is staged, you must review the suspended profile and determine if it should be merged with an internal profile or added as a new profile. <p><strong>OperationId:</strong>getStagedProfiles</p>
     * Get staged profiles
     */
    getStagedProfilesRaw(requestParameters: GetStagedProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StagedProfiles>>;
    /**
     * The system suspends / stages a profile with a point value between the upper and lower thresholds. When a profile is staged, you must review the suspended profile and determine if it should be merged with an internal profile or added as a new profile. <p><strong>OperationId:</strong>getStagedProfiles</p>
     * Get staged profiles
     */
    getStagedProfiles(requestParameters: GetStagedProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StagedProfiles>;
    /**
     *  <p><strong>OperationId:</strong>getStayHistory</p>
     * FetchStayHistory method provides stay history and future reservations of a profile based on the unique internal ID specified.
     */
    getStayHistoryRaw(requestParameters: GetStayHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileStayHistory>>;
    /**
     *  <p><strong>OperationId:</strong>getStayHistory</p>
     * FetchStayHistory method provides stay history and future reservations of a profile based on the unique internal ID specified.
     */
    getStayHistory(requestParameters: GetStayHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileStayHistory>;
    /**
     * Fetch Suspended Profile Addresses <p><strong>OperationId:</strong>getSuspendedAddresses</p>
     * Fetch Suspended Profile Addresses
     */
    getSuspendedAddressesRaw(requestParameters: GetSuspendedAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuspendedAddresses>>;
    /**
     * Fetch Suspended Profile Addresses <p><strong>OperationId:</strong>getSuspendedAddresses</p>
     * Fetch Suspended Profile Addresses
     */
    getSuspendedAddresses(requestParameters: GetSuspendedAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuspendedAddresses>;
    /**
     * Retrieve the suspended profile error summary details <p><strong>OperationId:</strong>getSuspendedProfileErrorSummary</p>
     * Get suspended profile error summary details
     */
    getSuspendedProfileErrorSummaryRaw(requestParameters: GetSuspendedProfileErrorSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuspendedProfileErrorSummaryInfo>>;
    /**
     * Retrieve the suspended profile error summary details <p><strong>OperationId:</strong>getSuspendedProfileErrorSummary</p>
     * Get suspended profile error summary details
     */
    getSuspendedProfileErrorSummary(requestParameters: GetSuspendedProfileErrorSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuspendedProfileErrorSummaryInfo>;
    /**
     * When you need to merge 2 guest profiles into 1 profile, use this API. <p><strong>OperationId:</strong>mergeProfiles</p>
     * Merge two profiles by ID
     */
    mergeProfilesRaw(requestParameters: MergeProfilesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * When you need to merge 2 guest profiles into 1 profile, use this API. <p><strong>OperationId:</strong>mergeProfiles</p>
     * Merge two profiles by ID
     */
    mergeProfiles(requestParameters: MergeProfilesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use postAccountForecast to create a new account forecast for a hotel.  <p><strong>OperationId:</strong>postAccountForecast</p>
     * Create account forecast in a hotel
     */
    postAccountForecastRaw(requestParameters: PostAccountForecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use postAccountForecast to create a new account forecast for a hotel.  <p><strong>OperationId:</strong>postAccountForecast</p>
     * Create account forecast in a hotel
     */
    postAccountForecast(requestParameters: PostAccountForecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * When a profile doesn\'t already exist for a guest, use this to create a new profile.  The response will provide the newly created profile\'s OPERA ID. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile. <p><strong>OperationId:</strong>postCompanyProfile</p>
     * This API facilitates creation of a company/agent/group/source profile in OPERA.
     */
    postCompanyProfileRaw(requestParameters: PostCompanyProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * When a profile doesn\'t already exist for a guest, use this to create a new profile.  The response will provide the newly created profile\'s OPERA ID. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile. <p><strong>OperationId:</strong>postCompanyProfile</p>
     * This API facilitates creation of a company/agent/group/source profile in OPERA.
     */
    postCompanyProfile(requestParameters: PostCompanyProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API allows you to create a new eCertificates onto a profile in OPERA Cloud. <p><strong>OperationId:</strong>postECertificate</p>
     * Create e-certificate
     */
    postECertificateRaw(requestParameters: PostECertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API allows you to create a new eCertificates onto a profile in OPERA Cloud. <p><strong>OperationId:</strong>postECertificate</p>
     * Create e-certificate
     */
    postECertificate(requestParameters: PostECertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * When a profile doesn\'t already exist for a guest, use this to create a new profile.  The response will provide the newly created profile\'s OPERA ID. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile. <p><strong>OperationId:</strong>postGuestProfile</p>
     * Create a guest, contact or employee profile in OPERA
     */
    postGuestProfileRaw(requestParameters: PostGuestProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * When a profile doesn\'t already exist for a guest, use this to create a new profile.  The response will provide the newly created profile\'s OPERA ID. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile. <p><strong>OperationId:</strong>postGuestProfile</p>
     * Create a guest, contact or employee profile in OPERA
     */
    postGuestProfile(requestParameters: PostGuestProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * A guest might be a member of your hotel loyalty program and/or a member of multiple airline frequent flier programs. Use this API to add membership details onto a guests profile. <p><strong>OperationId:</strong>postMembership</p>
     * Create membership on a profile
     */
    postMembershipRaw(requestParameters: PostMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * A guest might be a member of your hotel loyalty program and/or a member of multiple airline frequent flier programs. Use this API to add membership details onto a guests profile. <p><strong>OperationId:</strong>postMembership</p>
     * Create membership on a profile
     */
    postMembership(requestParameters: PostMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API will generate a new membership number. <p><strong>OperationId:</strong>postMembershipNumber</p>
     * Generate membership number
     */
    postMembershipNumberRaw(requestParameters: PostMembershipNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API will generate a new membership number. <p><strong>OperationId:</strong>postMembershipNumber</p>
     * Generate membership number
     */
    postMembershipNumber(requestParameters: PostMembershipNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can add new preferences to a profile to personalize or enhance your guest services.  You will need to know the profile ID, and the properties pre-configured preference codes. <p><strong>OperationId:</strong>postPreference</p>
     * Add preferences to a profile
     */
    postPreferenceRaw(requestParameters: PostPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can add new preferences to a profile to personalize or enhance your guest services.  You will need to know the profile ID, and the properties pre-configured preference codes. <p><strong>OperationId:</strong>postPreference</p>
     * Add preferences to a profile
     */
    postPreference(requestParameters: PostPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * When a profile doesn&apos;t already exist in OPERA, use this to create a new profile. The response will provide the newly created profile&apos;s OPERA ID in the Location header. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile.<p><strong>OperationId:</strong>postProfile</p>
     * Create a profile
     */
    postProfileRaw(requestParameters: PostProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * When a profile doesn&apos;t already exist in OPERA, use this to create a new profile. The response will provide the newly created profile&apos;s OPERA ID in the Location header. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile.<p><strong>OperationId:</strong>postProfile</p>
     * Create a profile
     */
    postProfile(requestParameters: PostProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Add a commission account on a profile.  You can only add commission accounts onto a Travel Agent or Source Profile type in OPERA Cloud. <p><strong>OperationId:</strong>postProfileCommissionAccount</p>
     * Add a commission account on a profile
     */
    postProfileCommissionAccountRaw(requestParameters: PostProfileCommissionAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Add a commission account on a profile.  You can only add commission accounts onto a Travel Agent or Source Profile type in OPERA Cloud. <p><strong>OperationId:</strong>postProfileCommissionAccount</p>
     * Add a commission account on a profile
     */
    postProfileCommissionAccount(requestParameters: PostProfileCommissionAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Assign an Owner to a profile. <p><strong>OperationId:</strong>postProfileOwners</p>
     * Assign profile owners
     */
    postProfileOwnersRaw(requestParameters: PostProfileOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Assign an Owner to a profile. <p><strong>OperationId:</strong>postProfileOwners</p>
     * Assign profile owners
     */
    postProfileOwners(requestParameters: PostProfileOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>postProfileRelationship</p>
     * CreateProfileRelationship method provides the ability to create profile relationship based on the request criteria of SourceProfileID,TargetProfileID and SourceRelationType specified.
     */
    postProfileRelationshipRaw(requestParameters: PostProfileRelationshipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>postProfileRelationship</p>
     * CreateProfileRelationship method provides the ability to create profile relationship based on the request criteria of SourceProfileID,TargetProfileID and SourceRelationType specified.
     */
    postProfileRelationship(requestParameters: PostProfileRelationshipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this to update an existing account Forecast for a hotel.  You must know the period code for this API. <p><strong>OperationId:</strong>putAccountForecast</p>
     * Update account forecast in a hotel by period code
     */
    putAccountForecastRaw(requestParameters: PutAccountForecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeAccountForecastsRS>>;
    /**
     * Use this to update an existing account Forecast for a hotel.  You must know the period code for this API. <p><strong>OperationId:</strong>putAccountForecast</p>
     * Update account forecast in a hotel by period code
     */
    putAccountForecast(requestParameters: PutAccountForecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeAccountForecastsRS>;
    /**
     * Use this to update a guests details on their profile.  You will need to know the OPERA Profile ID to use this API, and you will also need to know the List of Values for profile fields, such as AddressType, PhoneType, Title.  <p><strong>OperationId:</strong>putProfile</p>
     * Update a profile by ID
     */
    putProfileRaw(requestParameters: PutProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>>;
    /**
     * Use this to update a guests details on their profile.  You will need to know the OPERA Profile ID to use this API, and you will also need to know the List of Values for profile fields, such as AddressType, PhoneType, Title.  <p><strong>OperationId:</strong>putProfile</p>
     * Update a profile by ID
     */
    putProfile(requestParameters: PutProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile>;
    /**
     *  <p><strong>OperationId:</strong>putProfileRelationship</p>
     * ChangeProfileRelationship method provides the ability to update(delete and add) profile relationship based on the request criteria of SourceProfileID , TargetProfileID, To Be ChangedProfileID and SourceProfileRelationType specified.
     */
    putProfileRelationshipRaw(requestParameters: PutProfileRelationshipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>putProfileRelationship</p>
     * ChangeProfileRelationship method provides the ability to update(delete and add) profile relationship based on the request criteria of SourceProfileID , TargetProfileID, To Be ChangedProfileID and SourceProfileRelationType specified.
     */
    putProfileRelationship(requestParameters: PutProfileRelationshipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>removeProfileRelationship</p>
     * DeleteProfileRelationship method provides the ability to delete profile relationship based on the request criteria of SourceProfileID,TargetProfileID and SourceRelationType specified.
     */
    removeProfileRelationshipRaw(requestParameters: RemoveProfileRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>removeProfileRelationship</p>
     * DeleteProfileRelationship method provides the ability to delete profile relationship based on the request criteria of SourceProfileID,TargetProfileID and SourceRelationType specified.
     */
    removeProfileRelationship(requestParameters: RemoveProfileRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Apply a commission account to an existing profile. You can add commission accounts to Travel Agent profile types. <p><strong>OperationId:</strong>setProfileCommissionAccount</p>
     * Set profile commission account
     */
    setProfileCommissionAccountRaw(requestParameters: SetProfileCommissionAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Apply a commission account to an existing profile. You can add commission accounts to Travel Agent profile types. <p><strong>OperationId:</strong>setProfileCommissionAccount</p>
     * Set profile commission account
     */
    setProfileCommissionAccount(requestParameters: SetProfileCommissionAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to create a new Email in OPERA.  You would need to know the Profile Id such as Contact or Account. <p><strong>OperationId:</strong>storeEmail</p>
     * Create an Email.
     */
    storeEmailRaw(requestParameters: StoreEmailOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to create a new Email in OPERA.  You would need to know the Profile Id such as Contact or Account. <p><strong>OperationId:</strong>storeEmail</p>
     * Create an Email.
     */
    storeEmail(requestParameters: StoreEmailOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Synchronize profile subscriptions <p><strong>OperationId:</strong>synchronizeProfileSubscriptions</p>
     * Synchronize profile subscriptions
     */
    synchronizeProfileSubscriptionsRaw(requestParameters: SynchronizeProfileSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Synchronize profile subscriptions <p><strong>OperationId:</strong>synchronizeProfileSubscriptions</p>
     * Synchronize profile subscriptions
     */
    synchronizeProfileSubscriptions(requestParameters: SynchronizeProfileSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Validate forget profiles. <p><strong>OperationId:</strong>validateForgetProfiles</p>
     * Validate forget profiles
     */
    validateForgetProfilesRaw(requestParameters: ValidateForgetProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ValidatedForgetProfiles>>;
    /**
     * Validate forget profiles. <p><strong>OperationId:</strong>validateForgetProfiles</p>
     * Validate forget profiles
     */
    validateForgetProfiles(requestParameters: ValidateForgetProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ValidatedForgetProfiles>;
    /**
     * Validate if a profile has future and past bookings on a specific profile. <p><strong>OperationId:</strong>validateReservationsForProfile</p>
     * Check future past bookings
     */
    validateReservationsForProfileRaw(requestParameters: ValidateReservationsForProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FuturePastBookings>>;
    /**
     * Validate if a profile has future and past bookings on a specific profile. <p><strong>OperationId:</strong>validateReservationsForProfile</p>
     * Check future past bookings
     */
    validateReservationsForProfile(requestParameters: ValidateReservationsForProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FuturePastBookings>;
    /**
     * Use this API to verify an ng E-Certificate Number. <p><strong>OperationId:</strong>verifyECertificate</p>
     * Verify E-Certificate Number
     */
    verifyECertificateRaw(requestParameters: VerifyECertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerifiedECertificate>>;
    /**
     * Use this API to verify an ng E-Certificate Number. <p><strong>OperationId:</strong>verifyECertificate</p>
     * Verify E-Certificate Number
     */
    verifyECertificate(requestParameters: VerifyECertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerifiedECertificate>;
}
/**
 * @export
 */
export declare const CheckProfileTypeCheckProfileInstructionEnum: {
    readonly HasWebAccounts: "HasWebAccounts";
};
export type CheckProfileTypeCheckProfileInstructionEnum = typeof CheckProfileTypeCheckProfileInstructionEnum[keyof typeof CheckProfileTypeCheckProfileInstructionEnum];
/**
 * @export
 */
export declare const GetCompanyProfileFetchInstructionsEnum: {
    readonly Address: "Address";
    readonly Communication: "Communication";
    readonly Comment: "Comment";
    readonly Membership: "Membership";
    readonly Preference: "Preference";
    readonly Keyword: "Keyword";
    readonly Correspondence: "Correspondence";
    readonly Profile: "Profile";
    readonly Indicators: "Indicators";
    readonly SalesInfo: "SalesInfo";
    readonly Relationship: "Relationship";
};
export type GetCompanyProfileFetchInstructionsEnum = typeof GetCompanyProfileFetchInstructionsEnum[keyof typeof GetCompanyProfileFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetECertificatesStatusEnum: {
    readonly Cancelled: "Cancelled";
    readonly Consumed: "Consumed";
    readonly Deleted: "Deleted";
    readonly Expired: "Expired";
    readonly Issued: "Issued";
    readonly Reserved: "Reserved";
};
export type GetECertificatesStatusEnum = typeof GetECertificatesStatusEnum[keyof typeof GetECertificatesStatusEnum];
/**
 * @export
 */
export declare const GetGuestProfileFetchInstructionsEnum: {
    readonly Address: "Address";
    readonly Communication: "Communication";
    readonly Comment: "Comment";
    readonly Membership: "Membership";
    readonly Preference: "Preference";
    readonly Keyword: "Keyword";
    readonly Correspondence: "Correspondence";
    readonly Profile: "Profile";
    readonly Indicators: "Indicators";
    readonly SalesInfo: "SalesInfo";
    readonly Relationship: "Relationship";
    readonly WebUserAccount: "WebUserAccount";
};
export type GetGuestProfileFetchInstructionsEnum = typeof GetGuestProfileFetchInstructionsEnum[keyof typeof GetGuestProfileFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetLinkedProfilesProfileTypesEnum: {
    readonly Guest: "Guest";
    readonly Agent: "Agent";
    readonly Company: "Company";
    readonly Group: "Group";
    readonly Source: "Source";
    readonly Employee: "Employee";
    readonly Hotel: "Hotel";
    readonly Vendor: "Vendor";
    readonly Contact: "Contact";
    readonly Purge: "Purge";
    readonly BusinessHeader: "BusinessHeader";
    readonly BillingAccount: "BillingAccount";
    readonly Activity: "Activity";
    readonly Potential: "Potential";
    readonly Account: "Account";
};
export type GetLinkedProfilesProfileTypesEnum = typeof GetLinkedProfilesProfileTypesEnum[keyof typeof GetLinkedProfilesProfileTypesEnum];
/**
 * @export
 */
export declare const GetLinkedProfilesLinkedProfileAdditionalCriteriaProfileTypeEnum: {
    readonly Guest: "Guest";
    readonly Agent: "Agent";
    readonly Company: "Company";
    readonly Group: "Group";
    readonly Source: "Source";
    readonly Employee: "Employee";
    readonly Hotel: "Hotel";
    readonly Vendor: "Vendor";
    readonly Contact: "Contact";
    readonly Purge: "Purge";
    readonly BusinessHeader: "BusinessHeader";
    readonly BillingAccount: "BillingAccount";
    readonly Activity: "Activity";
    readonly Potential: "Potential";
    readonly Account: "Account";
};
export type GetLinkedProfilesLinkedProfileAdditionalCriteriaProfileTypeEnum = typeof GetLinkedProfilesLinkedProfileAdditionalCriteriaProfileTypeEnum[keyof typeof GetLinkedProfilesLinkedProfileAdditionalCriteriaProfileTypeEnum];
/**
 * @export
 */
export declare const GetMembershipTierProjectionsProjectionTypeEnum: {
    readonly Upgrade: "Upgrade";
    readonly Downgrade: "Downgrade";
    readonly UpgradeAndDowngrade: "UpgradeAndDowngrade";
};
export type GetMembershipTierProjectionsProjectionTypeEnum = typeof GetMembershipTierProjectionsProjectionTypeEnum[keyof typeof GetMembershipTierProjectionsProjectionTypeEnum];
/**
 * @export
 */
export declare const GetProfileFetchInstructionsEnum: {
    readonly Address: "Address";
    readonly Communication: "Communication";
    readonly Comment: "Comment";
    readonly Membership: "Membership";
    readonly Preference: "Preference";
    readonly Keyword: "Keyword";
    readonly Correspondence: "Correspondence";
    readonly Profile: "Profile";
    readonly Indicators: "Indicators";
    readonly SalesInfo: "SalesInfo";
    readonly Relationship: "Relationship";
    readonly Subscriptions: "Subscriptions";
    readonly DeliveryMethods: "DeliveryMethods";
    readonly GdsNegotiatedRate: "GdsNegotiatedRate";
    readonly NegotiatedRate: "NegotiatedRate";
    readonly HistoryReservation: "HistoryReservation";
    readonly FutureReservation: "FutureReservation";
    readonly WebUserAccount: "WebUserAccount";
};
export type GetProfileFetchInstructionsEnum = typeof GetProfileFetchInstructionsEnum[keyof typeof GetProfileFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetProfileInstructionParameterTypeEnum: {
    readonly NegotiatedRateShowInactive: "NegotiatedRateShowInactive";
    readonly NegotiatedRateResort: "NegotiatedRateResort";
    readonly NegotiatedRateMaxFetchCount: "NegotiatedRateMaxFetchCount";
    readonly NegotiatedRateCode: "NegotiatedRateCode";
    readonly GdsNegotiatedRateShowInactive: "GdsNegotiatedRateShowInactive";
    readonly PreferencesShowInactive: "PreferencesShowInactive";
    readonly ResortForRoutingInstructions: "ResortForRoutingInstructions";
    readonly RelationshipPrimaryProfile: "RelationshipPrimaryProfile";
    readonly AddressPrimaryOnly: "AddressPrimaryOnly";
    readonly CommunicationPrimaryOnly: "CommunicationPrimaryOnly";
    readonly DeliveryMethodsHotelCode: "DeliveryMethodsHotelCode";
};
export type GetProfileInstructionParameterTypeEnum = typeof GetProfileInstructionParameterTypeEnum[keyof typeof GetProfileInstructionParameterTypeEnum];
/**
 * @export
 */
export declare const GetProfileAllowedActionEnum: {
    readonly NameChange: "NameChange";
    readonly TaxIdChange: "TaxIDChange";
    readonly EnrollToPrimaryMembership: "EnrollToPrimaryMembership";
};
export type GetProfileAllowedActionEnum = typeof GetProfileAllowedActionEnum[keyof typeof GetProfileAllowedActionEnum];
/**
 * @export
 */
export declare const GetProfileActivityLogModuleEnum: {
    readonly Reservation: "Reservation";
    readonly Contract: "Contract";
    readonly Allotment: "Allotment";
    readonly Outlookview: "Outlookview";
    readonly Profile: "Profile";
    readonly Accountreceivables: "Accountreceivables";
    readonly GdsConvRateCodes: "GdsConvRateCodes";
    readonly RateCode: "RateCode";
    readonly Billing: "Billing";
    readonly Activity: "Activity";
};
export type GetProfileActivityLogModuleEnum = typeof GetProfileActivityLogModuleEnum[keyof typeof GetProfileActivityLogModuleEnum];
/**
 * @export
 */
export declare const GetProfileByExtIdFetchInstructionsEnum: {
    readonly Address: "Address";
    readonly Communication: "Communication";
    readonly Comment: "Comment";
    readonly Membership: "Membership";
    readonly Preference: "Preference";
    readonly Keyword: "Keyword";
    readonly Correspondence: "Correspondence";
    readonly Profile: "Profile";
    readonly Indicators: "Indicators";
    readonly SalesInfo: "SalesInfo";
    readonly Relationship: "Relationship";
    readonly Subscriptions: "Subscriptions";
    readonly DeliveryMethods: "DeliveryMethods";
    readonly GdsNegotiatedRate: "GdsNegotiatedRate";
    readonly NegotiatedRate: "NegotiatedRate";
    readonly HistoryReservation: "HistoryReservation";
    readonly FutureReservation: "FutureReservation";
    readonly WebUserAccount: "WebUserAccount";
};
export type GetProfileByExtIdFetchInstructionsEnum = typeof GetProfileByExtIdFetchInstructionsEnum[keyof typeof GetProfileByExtIdFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetProfileByExtIdInstructionParameterTypeEnum: {
    readonly NegotiatedRateShowInactive: "NegotiatedRateShowInactive";
    readonly NegotiatedRateResort: "NegotiatedRateResort";
    readonly NegotiatedRateMaxFetchCount: "NegotiatedRateMaxFetchCount";
    readonly NegotiatedRateCode: "NegotiatedRateCode";
    readonly GdsNegotiatedRateShowInactive: "GdsNegotiatedRateShowInactive";
    readonly PreferencesShowInactive: "PreferencesShowInactive";
    readonly ResortForRoutingInstructions: "ResortForRoutingInstructions";
    readonly RelationshipPrimaryProfile: "RelationshipPrimaryProfile";
    readonly AddressPrimaryOnly: "AddressPrimaryOnly";
    readonly CommunicationPrimaryOnly: "CommunicationPrimaryOnly";
    readonly DeliveryMethodsHotelCode: "DeliveryMethodsHotelCode";
};
export type GetProfileByExtIdInstructionParameterTypeEnum = typeof GetProfileByExtIdInstructionParameterTypeEnum[keyof typeof GetProfileByExtIdInstructionParameterTypeEnum];
/**
 * @export
 */
export declare const GetProfileByExtIdAllowedActionEnum: {
    readonly NameChange: "NameChange";
    readonly TaxIdChange: "TaxIDChange";
    readonly EnrollToPrimaryMembership: "EnrollToPrimaryMembership";
};
export type GetProfileByExtIdAllowedActionEnum = typeof GetProfileByExtIdAllowedActionEnum[keyof typeof GetProfileByExtIdAllowedActionEnum];
/**
 * @export
 */
export declare const GetProfilesSearchTypeEnum: {
    readonly PurgeableProfiles: "PurgeableProfiles";
    readonly Any: "Any";
    readonly PatronTrackingSystemMemberProfiles: "PatronTrackingSystemMemberProfiles";
};
export type GetProfilesSearchTypeEnum = typeof GetProfilesSearchTypeEnum[keyof typeof GetProfilesSearchTypeEnum];
/**
 * @export
 */
export declare const GetProfilesProfileTypeEnum: {
    readonly Guest: "Guest";
    readonly Agent: "Agent";
    readonly Company: "Company";
    readonly Group: "Group";
    readonly Source: "Source";
    readonly Employee: "Employee";
    readonly Hotel: "Hotel";
    readonly Vendor: "Vendor";
    readonly Contact: "Contact";
    readonly Purge: "Purge";
    readonly BusinessHeader: "BusinessHeader";
    readonly BillingAccount: "BillingAccount";
    readonly Activity: "Activity";
    readonly Potential: "Potential";
    readonly Account: "Account";
};
export type GetProfilesProfileTypeEnum = typeof GetProfilesProfileTypeEnum[keyof typeof GetProfilesProfileTypeEnum];
/**
 * @export
 */
export declare const GetProfilesRelatedProfileTypeEnum: {
    readonly Guest: "Guest";
    readonly Agent: "Agent";
    readonly Company: "Company";
    readonly Group: "Group";
    readonly Source: "Source";
    readonly Employee: "Employee";
    readonly Hotel: "Hotel";
    readonly Vendor: "Vendor";
    readonly Contact: "Contact";
    readonly Purge: "Purge";
    readonly BusinessHeader: "BusinessHeader";
    readonly BillingAccount: "BillingAccount";
    readonly Activity: "Activity";
    readonly Potential: "Potential";
    readonly Account: "Account";
};
export type GetProfilesRelatedProfileTypeEnum = typeof GetProfilesRelatedProfileTypeEnum[keyof typeof GetProfilesRelatedProfileTypeEnum];
/**
 * @export
 */
export declare const GetProfilesFetchInstructionsEnum: {
    readonly Address: "Address";
    readonly Communication: "Communication";
    readonly NegotiatedRate: "NegotiatedRate";
    readonly GdsNegotiatedRate: "GdsNegotiatedRate";
    readonly Comment: "Comment";
    readonly Membership: "Membership";
    readonly Preference: "Preference";
    readonly Keyword: "Keyword";
    readonly HistoryReservation: "HistoryReservation";
    readonly FutureReservation: "FutureReservation";
    readonly Relationship: "Relationship";
    readonly Correspondence: "Correspondence";
    readonly Routing: "Routing";
    readonly Indicators: "Indicators";
    readonly Profile: "Profile";
    readonly WebUserAccount: "WebUserAccount";
    readonly SalesInfo: "SalesInfo";
    readonly ECertificate: "ECertificate";
    readonly Subscriptions: "Subscriptions";
    readonly PrimaryAccountInfo: "PrimaryAccountInfo";
    readonly DeliveryMethods: "DeliveryMethods";
    readonly RoomOwnership: "RoomOwnership";
};
export type GetProfilesFetchInstructionsEnum = typeof GetProfilesFetchInstructionsEnum[keyof typeof GetProfilesFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetProfilesAllowedActionEnum: {
    readonly NameChange: "NameChange";
    readonly TaxIdChange: "TaxIDChange";
    readonly EnrollToPrimaryMembership: "EnrollToPrimaryMembership";
};
export type GetProfilesAllowedActionEnum = typeof GetProfilesAllowedActionEnum[keyof typeof GetProfilesAllowedActionEnum];
/**
 * @export
 */
export declare const GetProfilesByIdsFetchInstructionsEnum: {
    readonly Address: "Address";
    readonly Communication: "Communication";
    readonly NegotiatedRate: "NegotiatedRate";
    readonly GdsNegotiatedRate: "GdsNegotiatedRate";
    readonly Comment: "Comment";
    readonly Membership: "Membership";
    readonly Preference: "Preference";
    readonly Keyword: "Keyword";
    readonly HistoryReservation: "HistoryReservation";
    readonly FutureReservation: "FutureReservation";
    readonly Relationship: "Relationship";
    readonly Correspondence: "Correspondence";
    readonly Routing: "Routing";
    readonly Indicators: "Indicators";
    readonly Profile: "Profile";
    readonly WebUserAccount: "WebUserAccount";
    readonly SalesInfo: "SalesInfo";
    readonly ECertificate: "ECertificate";
    readonly Subscriptions: "Subscriptions";
    readonly PrimaryAccountInfo: "PrimaryAccountInfo";
    readonly DeliveryMethods: "DeliveryMethods";
    readonly RoomOwnership: "RoomOwnership";
};
export type GetProfilesByIdsFetchInstructionsEnum = typeof GetProfilesByIdsFetchInstructionsEnum[keyof typeof GetProfilesByIdsFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetProfilesByIdsInstructionParameterTypeEnum: {
    readonly NegotiatedRateShowInactive: "NegotiatedRateShowInactive";
    readonly NegotiatedRateResort: "NegotiatedRateResort";
    readonly NegotiatedRateMaxFetchCount: "NegotiatedRateMaxFetchCount";
    readonly NegotiatedRateCode: "NegotiatedRateCode";
    readonly GdsNegotiatedRateShowInactive: "GdsNegotiatedRateShowInactive";
    readonly PreferencesShowInactive: "PreferencesShowInactive";
    readonly ResortForRoutingInstructions: "ResortForRoutingInstructions";
    readonly RelationshipPrimaryProfile: "RelationshipPrimaryProfile";
    readonly AddressPrimaryOnly: "AddressPrimaryOnly";
    readonly CommunicationPrimaryOnly: "CommunicationPrimaryOnly";
    readonly DeliveryMethodsHotelCode: "DeliveryMethodsHotelCode";
};
export type GetProfilesByIdsInstructionParameterTypeEnum = typeof GetProfilesByIdsInstructionParameterTypeEnum[keyof typeof GetProfilesByIdsInstructionParameterTypeEnum];
/**
 * @export
 */
export declare const GetStagedProfileFetchInstructionsEnum: {
    readonly Profile: "Profile";
    readonly Address: "Address";
    readonly Communication: "Communication";
    readonly NegotiatedRate: "NegotiatedRate";
    readonly Membership: "Membership";
    readonly Preference: "Preference";
    readonly Keyword: "Keyword";
    readonly Routing: "Routing";
    readonly UserDefinedField: "UserDefinedField";
    readonly Identifier: "Identifier";
    readonly InvalidDetail: "InvalidDetail";
};
export type GetStagedProfileFetchInstructionsEnum = typeof GetStagedProfileFetchInstructionsEnum[keyof typeof GetStagedProfileFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetStagedProfilesApplyToEnum: {
    readonly StagedProfiles: "StagedProfiles";
    readonly MatchingProfiles: "MatchingProfiles";
    readonly StagedAndMatchingProfiles: "StagedAndMatchingProfiles";
};
export type GetStagedProfilesApplyToEnum = typeof GetStagedProfilesApplyToEnum[keyof typeof GetStagedProfilesApplyToEnum];
/**
 * @export
 */
export declare const GetStayHistoryFetchInstructionsEnum: {
    readonly HistoryReservation: "HistoryReservation";
    readonly FutureReservation: "FutureReservation";
};
export type GetStayHistoryFetchInstructionsEnum = typeof GetStayHistoryFetchInstructionsEnum[keyof typeof GetStayHistoryFetchInstructionsEnum];
