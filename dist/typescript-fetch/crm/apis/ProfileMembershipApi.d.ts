/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AirlineTransactionsStatus, AvailableAwardsBasedOnType, Award, AwardsToGrant, CalculatedPoints, Enrollment, EnrollmentMatchProfiles, ExtendMemberPointsToExpire, IssuedAward, MemberCardHistoryList, MemberInformation, MemberPointsExceptions, MemberPointsToExpire, MemberPointsToExpireCollection, MembershipAwardExportInfo, MembershipAwardPointsByHotel, MembershipClaim, MembershipClaims, MembershipIssueAwards, MembershipPointsExceptions, MembershipPointsToCalculate, MembershipPromotionDetails, MembershipPromotionsDetails, MembershipReservationDetails, MembershipTransaction, MembershipTransactionExceptions, MembershipTransactionsSummary, MembershipTransactionsSummaryCollection, OperaVersion, OtherAwardsIssueCriteria, PointsRejectionReasons, Rates, Revenues, Status } from '../models/index';
export interface CalculateMembershipPointsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipPointsToCalculate: MembershipPointsToCalculate;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ChangeMembershipClaimRequest {
    claimId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipClaim: MembershipClaim;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteAwardsRequest {
    awardNumber: number;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationCancellationNumber?: string;
    actualCancelPoints?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteMembershipPromotionRequest {
    membershipId: string;
    promotionCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipPromotionId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ExportMembershipAwardRequest {
    membershipId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rateInfoHotelId?: string;
    totalAvailablePoints?: number;
    pointsRequired?: number;
    cancelPenaltyPoints?: number;
    cancelPenaltyDays?: number;
    cancelPenaltyCharge?: number;
    cancelPenaltyType?: string;
    rawIssueKey?: string;
    awardNumber?: number;
    rateCode?: string;
    rateDescription?: string;
    roomLabel?: string;
    roomDescription?: string;
    roomCategory?: string;
    stayDate?: string;
    awardType?: string;
    productInfoHotelId?: string;
    productInfoTotalAvailablePoints?: number;
    productInfoPointsRequired?: number;
    productInfoCancelPenaltyPoints?: number;
    productInfoCancelPenaltyDays?: number;
    productInfoCancelPenaltyCharge?: number;
    productInfoCancelPenaltyType?: string;
    productInfoRawIssueKey?: string;
    productInfoAwardNumber?: number;
    packageCode?: string;
    packageDescription?: string;
    awardValidFrom?: string;
    awardValidTo?: string;
    upgradeInfoAwardType?: string;
    upgradeInfoHotelId?: string;
    upgradeInfoTotalAvailablePoints?: number;
    upgradeInfoPointsRequired?: number;
    upgradeInfoCancelPenaltyPoints?: number;
    upgradeInfoCancelPenaltyDays?: number;
    upgradeInfoCancelPenaltyCharge?: number;
    upgradeInfoCancelPenaltyType?: string;
    upgradeInfoRawIssueKey?: string;
    upgradeInfoAwardNumber?: number;
    fromRoomCategory?: string;
    toRoomCategory?: string;
    fromRoomDescription?: string;
    toRoomDescription?: string;
    fromRoom?: string;
    toRoom?: string;
    upgradeInfoStayDate?: string;
    otherInfoAwardType?: string;
    sellBeginDate?: string;
    sellEndDate?: string;
    shortDescription?: string;
    awardValue?: number;
    otherInfoTotalAvailablePoints?: number;
    otherInfoPointsRequired?: number;
    longDescription?: string;
    otherInfoAwardNumber?: number;
    issueAwardsHotelId?: string;
    externalReservationNumber?: string;
    confirmationBookingNumber?: string;
    awardSource?: string;
    arrivalDate?: string;
    departureDate?: string;
    exportInfoAwardNumber?: number;
    nameType?: ExportMembershipAwardNameTypeEnum;
    name?: string;
    fullName?: string;
    namePrefix?: string;
    givenName?: string;
    middleName?: string;
    nameSuffix?: string;
    nameTitle?: string;
    phoneNumber?: string;
    companyName?: string;
    id?: string;
    idContext?: string;
    idType?: string;
    barCode?: string;
    createDateTime?: string;
    creatorId?: string;
    lastModifierId?: string;
    lastModifyDateTime?: string;
    primaryInd?: boolean;
    purgeDate?: string;
    type?: string;
    typeDescription?: string;
    updateReservations?: boolean;
    addressLine?: Array<string>;
    cityName?: string;
    postalCode?: string;
    cityExtension?: string;
    county?: string;
    state?: string;
    code?: string;
    language?: string;
    characterUDFsAltName?: Array<string>;
    characterUDFsName?: Array<string>;
    characterUDFsValue?: Array<string>;
    numericUDFsAltName?: Array<string>;
    numericUDFsName?: Array<string>;
    numericUDFsValue?: Array<number>;
    dateUDFsAltname?: Array<string>;
    dateUDFsName?: Array<string>;
    dateUDFsValue?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ExtendMemberPointsToExpireRequest {
    membershipId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    extendMemberPointsToExpire: ExtendMemberPointsToExpire;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetAirlineTransactionsStatusRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    batchId?: string;
    batchIdType?: string;
    importDate?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetAllMembershipClaimsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipId?: string;
    profileId?: string;
    profileIdContext?: string;
    profileIdType?: string;
    name?: string;
    givenName?: string;
    membershipType?: string;
    claimType?: string;
    source?: GetAllMembershipClaimsSourceEnum;
    owner?: string;
    claimNumber?: string;
    claimNoContext?: string;
    claimNoType?: string;
    hotelId?: string;
    confirmationNo?: string;
    submitter?: string;
    claimStatus?: string;
    closeDateEnd?: string;
    closeDateStart?: string;
    claimDateEnd?: string;
    claimDateStart?: string;
    replyByEnd?: string;
    replyByStart?: string;
    arrivalEnd?: string;
    arrivalStart?: string;
    departureEnd?: string;
    departureStart?: string;
    approvalStatus?: GetAllMembershipClaimsApprovalStatusEnum;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetAvailableAwardsBasedOnTypeRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    awardBasedOn?: GetAvailableAwardsBasedOnTypeAwardBasedOnEnum;
    membershipType?: string;
    rateCriteriaHotelId?: string;
    arrivalDate?: string;
    departureDate?: string;
    bookingDate?: string;
    pointsBelow?: number;
    pointsAbove?: number;
    rateCode?: string;
    roomCategory?: string;
    rooms?: string;
    awardType?: string;
    productCriteriaMembershipType?: string;
    productCriteriaHotelId?: string;
    productCriteriaArrivalDate?: string;
    productCriteriaDepartureDate?: string;
    productCriteriaBookingDate?: string;
    productCriteriaPointsBelow?: number;
    productCriteriaPointsAbove?: number;
    packageCode?: string;
    upgradeCriteriaMembershipType?: string;
    upgradeCriteriaHotelId?: string;
    upgradeCriteriaArrivalDate?: string;
    upgradeCriteriaDepartureDate?: string;
    upgradeCriteriaBookingDate?: string;
    upgradeCriteriaPointsBelow?: number;
    upgradeCriteriaPointsAbove?: number;
    fromRoomCategory?: string;
    toRoomCategory?: string;
    upgradeCriteriaRooms?: string;
    upgradeCriteriaAwardType?: string;
    awardCode?: string;
    totalBillingAmount?: number;
    currencyCode?: string;
    fTPaymentCriteriaPointsBelow?: number;
    fTPaymentCriteriaPointsAbove?: number;
    otherCriteriaAwardCode?: string;
    otherCriteriaMembershipType?: string;
    membershipLevel?: string;
    shortDescription?: string;
    valueBelow?: number;
    valueAbove?: number;
    otherCriteriaPointsBelow?: number;
    otherCriteriaPointsAbove?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetAwardsToGrantRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    awardBasedOn?: GetAwardsToGrantAwardBasedOnEnum;
    totalPointsRequired?: number;
    rooms?: string;
    membershipId?: number;
    membershipType?: string;
    awardType?: string;
    grantAwardInfoHotelId?: string;
    rateCode?: string;
    roomCategory?: string;
    fromRoom?: string;
    toRoom?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetEnrollmentMatchProfilesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    externalDatabaseID?: string;
    matchedProfileType?: GetEnrollmentMatchProfilesMatchedProfileTypeEnum;
    language?: string;
    givenName?: string;
    surname?: string;
    nameTitle?: string;
    addressId?: string;
    addressIdContext?: string;
    addressIdType?: string;
    primaryInd?: boolean;
    type?: string;
    addressLine?: Array<string>;
    cityName?: string;
    postalCode?: string;
    county?: string;
    state?: string;
    countryCode?: string;
    languageCode?: string;
    businessSegment?: Array<string>;
    territory?: string;
    traceCode?: string;
    ownerCode?: string;
    influenceCode?: string;
    hasMore?: boolean;
    totalResults?: number;
    telephoneId?: string;
    telephoneIdContext?: string;
    telephoneIdType?: string;
    phoneNumber?: string;
    phoneTechType?: string;
    phoneUseType?: string;
    phoneUseTypeDescription?: string;
    telephonePrimaryInd?: boolean;
    emailInfoId?: string;
    emailInfoIdContext?: string;
    emailInfoIdType?: string;
    emailAddress?: string;
    emailPrimaryInd?: boolean;
    emailType?: string;
    urlId?: string;
    urlIdContext?: string;
    urlIdType?: string;
    urlPrimaryInd?: boolean;
    urlType?: string;
    membershipId?: string;
    nameOnCard?: string;
    membershipLevel?: string;
    profileId?: string;
    profileContext?: string;
    profileType?: string;
    paymentMethodCode?: string;
    amount?: number;
    amountCode?: string;
    comments?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMemberPointsToExpireRequest {
    membershipId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMemberPointsToExpireByCardNoRequest {
    membershipCardNo: string;
    membershipCardType: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipAwardExportInfoRequest {
    membershipId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    awardNumber?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipAwardPointsByHotelRequest {
    membershipId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipCardHistoryRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipClaimRequest {
    claimId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: string;
    idContext?: string;
    type?: string;
    fetchInstructions?: Set<GetMembershipClaimFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipClaimsRequest {
    membershipId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileId?: string;
    profileIdContext?: string;
    profileIdType?: string;
    name?: string;
    givenName?: string;
    membershipType?: string;
    claimType?: string;
    source?: GetMembershipClaimsSourceEnum;
    owner?: string;
    claimNumber?: string;
    claimNoContext?: string;
    claimNoType?: string;
    hotelId?: string;
    confirmationNo?: string;
    submitter?: string;
    claimStatus?: string;
    closeDateEnd?: string;
    closeDateStart?: string;
    claimDateEnd?: string;
    claimDateStart?: string;
    replyByEnd?: string;
    replyByStart?: string;
    arrivalEnd?: string;
    arrivalStart?: string;
    departureEnd?: string;
    departureStart?: string;
    approvalStatus?: GetMembershipClaimsApprovalStatusEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipDetailsRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: Array<string>;
    idContext?: Array<string>;
    idType?: Array<string>;
    membershipType?: string;
    membershipId?: string;
    hotelId?: string;
    startDate?: string;
    endDate?: string;
    duration?: string;
    mode?: GetMembershipDetailsModeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipIssueAwardsListRequest {
    membershipId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipType?: string;
    hotelBookingNumber?: string;
    hotelId?: string;
    awardCode?: Array<string>;
    awardNumber?: number;
    awardBasedOn?: string;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipPointsExceptionsRequest {
    exceptionStatus: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    profileId?: number;
    arrivalFrom?: string;
    departureTo?: string;
    membershipType?: string;
    membershipLevel?: string;
    membershipCardNo?: string;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipPromotionsRequest {
    membershipId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipReservationActivityRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    propertyDate?: string;
    roomClasses?: Array<string>;
    membershipType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipTransactionRequest {
    membershipTransactionId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: string;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipTransactionAwardPointsRequest {
    membershipTransactionId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipTransactionExceptionsRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    end?: string;
    start?: string;
    id?: string;
    idContext?: string;
    type?: string;
    membershipType?: string;
    membershipLevel?: string;
    membershipCardNo?: string;
    includeEPE?: boolean;
    exceptionType?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipTransactionPointsRejectionReasonsRequest {
    membershipTransactionId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipTransactionRatesRequest {
    membershipTransactionId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipTransactionRevenueRequest {
    membershipTransactionId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipTransactionTierPointsRequest {
    membershipTransactionId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipTransactionsSummaryRequest {
    membershipId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipTransactionsSummaryByCardNoRequest {
    membershipCardNo: string;
    membershipCardType: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface IssueOtherAwardsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    otherAwardsIssueCriteria: OtherAwardsIssueCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PingMembershipServiceRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostEnrollmentRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    enrollment: Enrollment;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostMembershipClaimRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipClaim: MembershipClaim;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostMembershipPromotionRequest {
    membershipId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipPromotion: MembershipPromotionDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostMembershipTransactionRequest {
    membershipId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipTransaction: MembershipTransaction;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutMembershipPointsExceptionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipPointsExceptions: MembershipPointsExceptions;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutMembershipPromotionRequest {
    membershipId: string;
    promotionCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipPromotion: MembershipPromotionDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface RedeemAwardRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    award: Award;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class ProfileMembershipApi extends runtime.BaseAPI {
    /**
     * Start Membership Points Calculation process <p><strong>OperationId:</strong>calculateMembershipPoints</p>
     * Calculate Membership Points
     */
    calculateMembershipPointsRaw(requestParameters: CalculateMembershipPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Start Membership Points Calculation process <p><strong>OperationId:</strong>calculateMembershipPoints</p>
     * Calculate Membership Points
     */
    calculateMembershipPoints(requestParameters: CalculateMembershipPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Change membership claim details based on the claim number and instructions provided in the request. <p><strong>OperationId:</strong>changeMembershipClaim</p>
     * Change membership Claim
     */
    changeMembershipClaimRaw(requestParameters: ChangeMembershipClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Change membership claim details based on the claim number and instructions provided in the request. <p><strong>OperationId:</strong>changeMembershipClaim</p>
     * Change membership Claim
     */
    changeMembershipClaim(requestParameters: ChangeMembershipClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Operation to cancel an award already been granted to a member. <p><strong>OperationId:</strong>deleteAwards</p>
     * Delete Awards
     */
    deleteAwardsRaw(requestParameters: DeleteAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to cancel an award already been granted to a member. <p><strong>OperationId:</strong>deleteAwards</p>
     * Delete Awards
     */
    deleteAwards(requestParameters: DeleteAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Delete a Membership promotion for a guest. This will inactivate the membership promotion.<p><strong>OperationId:</strong>deleteMembershipPromotion</p>
     * Delete membership promotion of a guest
     */
    deleteMembershipPromotionRaw(requestParameters: DeleteMembershipPromotionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Delete a Membership promotion for a guest. This will inactivate the membership promotion.<p><strong>OperationId:</strong>deleteMembershipPromotion</p>
     * Delete membership promotion of a guest
     */
    deleteMembershipPromotion(requestParameters: DeleteMembershipPromotionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Export members information for Fulfillment house processing <p><strong>OperationId:</strong>exportMembershipAward</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Export Membership Award
     */
    exportMembershipAwardRaw(requestParameters: ExportMembershipAwardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Export members information for Fulfillment house processing <p><strong>OperationId:</strong>exportMembershipAward</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Export Membership Award
     */
    exportMembershipAward(requestParameters: ExportMembershipAwardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This will allow you to extend the expiration date based on the rule defined in the Grace Period in months. <p><strong>OperationId:</strong>extendMemberPointsToExpire</p>
     * Extend Member Points set to Expire
     */
    extendMemberPointsToExpireRaw(requestParameters: ExtendMemberPointsToExpireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This will allow you to extend the expiration date based on the rule defined in the Grace Period in months. <p><strong>OperationId:</strong>extendMemberPointsToExpire</p>
     * Extend Member Points set to Expire
     */
    extendMemberPointsToExpire(requestParameters: ExtendMemberPointsToExpireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Request for fetching membership transactions processed by the airline. <p><strong>OperationId:</strong>getAirlineTransactionsStatus</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>
     * Get airline transactions status
     * @deprecated
     */
    getAirlineTransactionsStatusRaw(requestParameters: GetAirlineTransactionsStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AirlineTransactionsStatus>>;
    /**
     * Request for fetching membership transactions processed by the airline. <p><strong>OperationId:</strong>getAirlineTransactionsStatus</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>
     * Get airline transactions status
     * @deprecated
     */
    getAirlineTransactionsStatus(requestParameters: GetAirlineTransactionsStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AirlineTransactionsStatus>;
    /**
     * Retrieve available membership claims without specifying the membership ID. <p><strong>OperationId:</strong>getAllMembershipClaims</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Get membership claims
     */
    getAllMembershipClaimsRaw(requestParameters: GetAllMembershipClaimsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipClaims>>;
    /**
     * Retrieve available membership claims without specifying the membership ID. <p><strong>OperationId:</strong>getAllMembershipClaims</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Get membership claims
     */
    getAllMembershipClaims(requestParameters: GetAllMembershipClaimsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipClaims>;
    /**
     * Get available awards based on type of award selected like Rates, products or services, room type upgrades, and other gifts. <p><strong>OperationId:</strong>getAvailableAwardsBasedOnType</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Get Available Awards
     */
    getAvailableAwardsBasedOnTypeRaw(requestParameters: GetAvailableAwardsBasedOnTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailableAwardsBasedOnType>>;
    /**
     * Get available awards based on type of award selected like Rates, products or services, room type upgrades, and other gifts. <p><strong>OperationId:</strong>getAvailableAwardsBasedOnType</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Get Available Awards
     */
    getAvailableAwardsBasedOnType(requestParameters: GetAvailableAwardsBasedOnTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailableAwardsBasedOnType>;
    /**
     * Fetch awards list to be able to grant the award to a member <p><strong>OperationId:</strong>getAwardsToGrant</p>
     * Get Awards to Grant
     */
    getAwardsToGrantRaw(requestParameters: GetAwardsToGrantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AwardsToGrant>>;
    /**
     * Fetch awards list to be able to grant the award to a member <p><strong>OperationId:</strong>getAwardsToGrant</p>
     * Get Awards to Grant
     */
    getAwardsToGrant(requestParameters: GetAwardsToGrantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AwardsToGrant>;
    /**
     * Get detailed information regarding match profiles <p><strong>OperationId:</strong>getEnrollmentMatchProfiles</p>
     * Get Profiles for Enrollment
     */
    getEnrollmentMatchProfilesRaw(requestParameters: GetEnrollmentMatchProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnrollmentMatchProfiles>>;
    /**
     * Get detailed information regarding match profiles <p><strong>OperationId:</strong>getEnrollmentMatchProfiles</p>
     * Get Profiles for Enrollment
     */
    getEnrollmentMatchProfiles(requestParameters: GetEnrollmentMatchProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnrollmentMatchProfiles>;
    /**
     * Use this API to retrieve your Points To Expire by membershipId. <p><strong>OperationId:</strong>getMemberPointsToExpire</p>
     * Get  membership points to expire
     */
    getMemberPointsToExpireRaw(requestParameters: GetMemberPointsToExpireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberPointsToExpire>>;
    /**
     * Use this API to retrieve your Points To Expire by membershipId. <p><strong>OperationId:</strong>getMemberPointsToExpire</p>
     * Get  membership points to expire
     */
    getMemberPointsToExpire(requestParameters: GetMemberPointsToExpireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberPointsToExpire>;
    /**
     * Use this API to retrieve your Points To Expire by by specifying membership card number and membership card type. This operation can return more than one membership points to expire if duplicate card numbers are allowed in the configuration. <p><strong>OperationId:</strong>getMemberPointsToExpireByCardNo</p>
     * Get  membership points to expire
     */
    getMemberPointsToExpireByCardNoRaw(requestParameters: GetMemberPointsToExpireByCardNoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberPointsToExpireCollection>>;
    /**
     * Use this API to retrieve your Points To Expire by by specifying membership card number and membership card type. This operation can return more than one membership points to expire if duplicate card numbers are allowed in the configuration. <p><strong>OperationId:</strong>getMemberPointsToExpireByCardNo</p>
     * Get  membership points to expire
     */
    getMemberPointsToExpireByCardNo(requestParameters: GetMemberPointsToExpireByCardNoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberPointsToExpireCollection>;
    /**
     * Get members information for Fulfillment house processing <p><strong>OperationId:</strong>getMembershipAwardExportInfo</p>
     * Get Membership Award Export Information
     */
    getMembershipAwardExportInfoRaw(requestParameters: GetMembershipAwardExportInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipAwardExportInfo>>;
    /**
     * Get members information for Fulfillment house processing <p><strong>OperationId:</strong>getMembershipAwardExportInfo</p>
     * Get Membership Award Export Information
     */
    getMembershipAwardExportInfo(requestParameters: GetMembershipAwardExportInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipAwardExportInfo>;
    /**
     * Get a memberships issued awards points per property. <p><strong>OperationId:</strong>getMembershipAwardPointsByHotel</p>
     * Get Membership Issued awards points
     */
    getMembershipAwardPointsByHotelRaw(requestParameters: GetMembershipAwardPointsByHotelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipAwardPointsByHotel>>;
    /**
     * Get a memberships issued awards points per property. <p><strong>OperationId:</strong>getMembershipAwardPointsByHotel</p>
     * Get Membership Issued awards points
     */
    getMembershipAwardPointsByHotel(requestParameters: GetMembershipAwardPointsByHotelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipAwardPointsByHotel>;
    /**
     * Use this API to retrieve membership card history on a profile. <p><strong>OperationId:</strong>getMembershipCardHistory</p>
     * Get membership card history information on a profile
     */
    getMembershipCardHistoryRaw(requestParameters: GetMembershipCardHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberCardHistoryList>>;
    /**
     * Use this API to retrieve membership card history on a profile. <p><strong>OperationId:</strong>getMembershipCardHistory</p>
     * Get membership card history information on a profile
     */
    getMembershipCardHistory(requestParameters: GetMembershipCardHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberCardHistoryList>;
    /**
     * Get membership claim details based on the claim number and instructions provided in the request. <p><strong>OperationId:</strong>getMembershipClaim</p>
     * Get membership claim
     */
    getMembershipClaimRaw(requestParameters: GetMembershipClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipClaim>>;
    /**
     * Get membership claim details based on the claim number and instructions provided in the request. <p><strong>OperationId:</strong>getMembershipClaim</p>
     * Get membership claim
     */
    getMembershipClaim(requestParameters: GetMembershipClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipClaim>;
    /**
     * Retrieve available membership claims by specifying the membership ID. <p><strong>OperationId:</strong>getMembershipClaims</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Get membership claims
     */
    getMembershipClaimsRaw(requestParameters: GetMembershipClaimsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipClaims>>;
    /**
     * Retrieve available membership claims by specifying the membership ID. <p><strong>OperationId:</strong>getMembershipClaims</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Get membership claims
     */
    getMembershipClaims(requestParameters: GetMembershipClaimsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipClaims>;
    /**
     * Use this API to retrieve membership details on a profile. <p><strong>OperationId:</strong>getMembershipDetails</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Get membership information on a profile
     */
    getMembershipDetailsRaw(requestParameters: GetMembershipDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberInformation>>;
    /**
     * Use this API to retrieve membership details on a profile. <p><strong>OperationId:</strong>getMembershipDetails</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Get membership information on a profile
     */
    getMembershipDetails(requestParameters: GetMembershipDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberInformation>;
    /**
     * Retrieve a list of member issued awards. <p><strong>OperationId:</strong>getMembershipIssueAwardsList</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>
     * Get Membership Award list
     */
    getMembershipIssueAwardsListRaw(requestParameters: GetMembershipIssueAwardsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipIssueAwards>>;
    /**
     * Retrieve a list of member issued awards. <p><strong>OperationId:</strong>getMembershipIssueAwardsList</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>
     * Get Membership Award list
     */
    getMembershipIssueAwardsList(requestParameters: GetMembershipIssueAwardsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipIssueAwards>;
    /**
     * Use this API to get membership points exceptions.<p><strong>OperationId:</strong>getMembershipPointsExceptions</p><br>The maximum date Range supported between arrival and departure date is 90 days.
     * Get membership points exception details
     */
    getMembershipPointsExceptionsRaw(requestParameters: GetMembershipPointsExceptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberPointsExceptions>>;
    /**
     * Use this API to get membership points exceptions.<p><strong>OperationId:</strong>getMembershipPointsExceptions</p><br>The maximum date Range supported between arrival and departure date is 90 days.
     * Get membership points exception details
     */
    getMembershipPointsExceptions(requestParameters: GetMembershipPointsExceptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberPointsExceptions>;
    /**
     * Use this API to retrieve your available promotions by membershipId. <p><strong>OperationId:</strong>getMembershipPromotions</p>
     * Fetch membership promotions of a guest
     */
    getMembershipPromotionsRaw(requestParameters: GetMembershipPromotionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipPromotionsDetails>>;
    /**
     * Use this API to retrieve your available promotions by membershipId. <p><strong>OperationId:</strong>getMembershipPromotions</p>
     * Fetch membership promotions of a guest
     */
    getMembershipPromotions(requestParameters: GetMembershipPromotionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipPromotionsDetails>;
    /**
     * This API is useful to retrieve membership reservation activity for the day(ExpectedArrival, ExpectedDepartures, InHouse, Projected Room Revenue) <p><strong>OperationId:</strong>getMembershipReservationActivity</p>
     * Get Membership Reservation Activity
     */
    getMembershipReservationActivityRaw(requestParameters: GetMembershipReservationActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipReservationDetails>>;
    /**
     * This API is useful to retrieve membership reservation activity for the day(ExpectedArrival, ExpectedDepartures, InHouse, Projected Room Revenue) <p><strong>OperationId:</strong>getMembershipReservationActivity</p>
     * Get Membership Reservation Activity
     */
    getMembershipReservationActivity(requestParameters: GetMembershipReservationActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipReservationDetails>;
    /**
     * Retrieve membership transactions. <p><strong>OperationId:</strong>getMembershipTransaction</p>
     * Get a membership transaction
     */
    getMembershipTransactionRaw(requestParameters: GetMembershipTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipTransaction>>;
    /**
     * Retrieve membership transactions. <p><strong>OperationId:</strong>getMembershipTransaction</p>
     * Get a membership transaction
     */
    getMembershipTransaction(requestParameters: GetMembershipTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipTransaction>;
    /**
     * Retrieves the validated rule used to generate award points, the type of points, number of points, cost per point, rule code for the award points, billing group the points belong. <p><strong>OperationId:</strong>getMembershipTransactionAwardPoints</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>
     * Fetch the Award Points Accrued for the current points transaction.
     */
    getMembershipTransactionAwardPointsRaw(requestParameters: GetMembershipTransactionAwardPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CalculatedPoints>>;
    /**
     * Retrieves the validated rule used to generate award points, the type of points, number of points, cost per point, rule code for the award points, billing group the points belong. <p><strong>OperationId:</strong>getMembershipTransactionAwardPoints</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>
     * Fetch the Award Points Accrued for the current points transaction.
     */
    getMembershipTransactionAwardPoints(requestParameters: GetMembershipTransactionAwardPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CalculatedPoints>;
    /**
     * Use this API to get membership transaction exceptions on a profile. <p><strong>OperationId:</strong>getMembershipTransactionExceptions</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Get membership transaction exception details
     * @deprecated
     */
    getMembershipTransactionExceptionsRaw(requestParameters: GetMembershipTransactionExceptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipTransactionExceptions>>;
    /**
     * Use this API to get membership transaction exceptions on a profile. <p><strong>OperationId:</strong>getMembershipTransactionExceptions</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Get membership transaction exception details
     * @deprecated
     */
    getMembershipTransactionExceptions(requestParameters: GetMembershipTransactionExceptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipTransactionExceptions>;
    /**
     * Retrieves the rule used to generate points and the reason the points were not awarded (validation failure, for e.g.\'Membership level requirements not met\'). <p><strong>OperationId:</strong>getMembershipTransactionPointsRejectionReasons</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>
     * Fetch the reason points were not awarded for a given points transaction.
     */
    getMembershipTransactionPointsRejectionReasonsRaw(requestParameters: GetMembershipTransactionPointsRejectionReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PointsRejectionReasons>>;
    /**
     * Retrieves the rule used to generate points and the reason the points were not awarded (validation failure, for e.g.\'Membership level requirements not met\'). <p><strong>OperationId:</strong>getMembershipTransactionPointsRejectionReasons</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>
     * Fetch the reason points were not awarded for a given points transaction.
     */
    getMembershipTransactionPointsRejectionReasons(requestParameters: GetMembershipTransactionPointsRejectionReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PointsRejectionReasons>;
    /**
     * Retrieves the dates of the stay, the rate code, the PMS rate amount, the central rate amount, the central currency and the market code associated with the stay. <p><strong>OperationId:</strong>getMembershipTransactionRates</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>
     * Fetch the rate details associated to current points transaction.
     */
    getMembershipTransactionRatesRaw(requestParameters: GetMembershipTransactionRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rates>>;
    /**
     * Retrieves the dates of the stay, the rate code, the PMS rate amount, the central rate amount, the central currency and the market code associated with the stay. <p><strong>OperationId:</strong>getMembershipTransactionRates</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>
     * Fetch the rate details associated to current points transaction.
     */
    getMembershipTransactionRates(requestParameters: GetMembershipTransactionRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rates>;
    /**
     * Retrieves the date the revenue was recognized, the revenue type (PMS revenue buckets are seen as revenue types in ORS), PMS revenue and central <p><strong>OperationId:</strong>getMembershipTransactionRevenue</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>
     * Fetch the revenue details for the stay associated with current point transaction.
     */
    getMembershipTransactionRevenueRaw(requestParameters: GetMembershipTransactionRevenueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Revenues>>;
    /**
     * Retrieves the date the revenue was recognized, the revenue type (PMS revenue buckets are seen as revenue types in ORS), PMS revenue and central <p><strong>OperationId:</strong>getMembershipTransactionRevenue</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>
     * Fetch the revenue details for the stay associated with current point transaction.
     */
    getMembershipTransactionRevenue(requestParameters: GetMembershipTransactionRevenueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Revenues>;
    /**
     * Retrieves the validated rule used to generate tier points, the type of points, number of points, cost per point, rule code for the award points, billing group the points belong. <p><strong>OperationId:</strong>getMembershipTransactionTierPoints</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>
     * Fetch the Tier Points Accrued for the current points transaction
     */
    getMembershipTransactionTierPointsRaw(requestParameters: GetMembershipTransactionTierPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CalculatedPoints>>;
    /**
     * Retrieves the validated rule used to generate tier points, the type of points, number of points, cost per point, rule code for the award points, billing group the points belong. <p><strong>OperationId:</strong>getMembershipTransactionTierPoints</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>
     * Fetch the Tier Points Accrued for the current points transaction
     */
    getMembershipTransactionTierPoints(requestParameters: GetMembershipTransactionTierPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CalculatedPoints>;
    /**
     * Get membership transactions summary information by specifying membership ID <p><strong>OperationId:</strong>getMembershipTransactionsSummary</p>
     * Get membership transactions
     */
    getMembershipTransactionsSummaryRaw(requestParameters: GetMembershipTransactionsSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipTransactionsSummary>>;
    /**
     * Get membership transactions summary information by specifying membership ID <p><strong>OperationId:</strong>getMembershipTransactionsSummary</p>
     * Get membership transactions
     */
    getMembershipTransactionsSummary(requestParameters: GetMembershipTransactionsSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipTransactionsSummary>;
    /**
     * Get membership transactions summary information by specifying membership card number and membership card type, this operation can return more than one membership transactions if duplicate card numbers allowed in the configuration. <p><strong>OperationId:</strong>getMembershipTransactionsSummaryByCardNo</p>
     * Get membership transactions
     */
    getMembershipTransactionsSummaryByCardNoRaw(requestParameters: GetMembershipTransactionsSummaryByCardNoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipTransactionsSummaryCollection>>;
    /**
     * Get membership transactions summary information by specifying membership card number and membership card type, this operation can return more than one membership transactions if duplicate card numbers allowed in the configuration. <p><strong>OperationId:</strong>getMembershipTransactionsSummaryByCardNo</p>
     * Get membership transactions
     */
    getMembershipTransactionsSummaryByCardNo(requestParameters: GetMembershipTransactionsSummaryByCardNoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipTransactionsSummaryCollection>;
    /**
     * This API will allow you to issue OTHER type award based on membership id or membership type and membership card number <p><strong>OperationId:</strong>issueOtherAwards</p>
     * Issue an OTHER type award
     */
    issueOtherAwardsRaw(requestParameters: IssueOtherAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssuedAward>>;
    /**
     * This API will allow you to issue OTHER type award based on membership id or membership type and membership card number <p><strong>OperationId:</strong>issueOtherAwards</p>
     * Issue an OTHER type award
     */
    issueOtherAwards(requestParameters: IssueOtherAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssuedAward>;
    /**
     *  <p><strong>OperationId:</strong>pingMembershipService</p>
     * Operation to check status of ProfileMembership service
     */
    pingMembershipServiceRaw(requestParameters: PingMembershipServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperaVersion>>;
    /**
     *  <p><strong>OperationId:</strong>pingMembershipService</p>
     * Operation to check status of ProfileMembership service
     */
    pingMembershipService(requestParameters: PingMembershipServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperaVersion>;
    /**
     * Use this API when you have a guest profile and you want to enroll that guest profile into a membership program in an external system. <p><strong>OperationId:</strong>postEnrollment</p>
     * Create an Enrollment
     */
    postEnrollmentRaw(requestParameters: PostEnrollmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API when you have a guest profile and you want to enroll that guest profile into a membership program in an external system. <p><strong>OperationId:</strong>postEnrollment</p>
     * Create an Enrollment
     */
    postEnrollment(requestParameters: PostEnrollmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This will create membership claim details based on the claim number and instructions provided in the request. <p><strong>OperationId:</strong>postMembershipClaim</p>
     * Create membership Claim
     */
    postMembershipClaimRaw(requestParameters: PostMembershipClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This will create membership claim details based on the claim number and instructions provided in the request. <p><strong>OperationId:</strong>postMembershipClaim</p>
     * Create membership Claim
     */
    postMembershipClaim(requestParameters: PostMembershipClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Create a new membership promotion . <p><strong>OperationId:</strong>postMembershipPromotion</p>
     * Create membership promotion of a guest
     */
    postMembershipPromotionRaw(requestParameters: PostMembershipPromotionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Create a new membership promotion . <p><strong>OperationId:</strong>postMembershipPromotion</p>
     * Create membership promotion of a guest
     */
    postMembershipPromotion(requestParameters: PostMembershipPromotionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Create a new membership transaction . <p><strong>OperationId:</strong>postMembershipTransaction</p>
     * Post a membership transaction
     */
    postMembershipTransactionRaw(requestParameters: PostMembershipTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Create a new membership transaction . <p><strong>OperationId:</strong>postMembershipTransaction</p>
     * Post a membership transaction
     */
    postMembershipTransaction(requestParameters: PostMembershipTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to update membership points exceptions.<p><strong>OperationId:</strong>putMembershipPointsExceptions</p>
     * Update membership points exceptions
     */
    putMembershipPointsExceptionsRaw(requestParameters: PutMembershipPointsExceptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to update membership points exceptions.<p><strong>OperationId:</strong>putMembershipPointsExceptions</p>
     * Update membership points exceptions
     */
    putMembershipPointsExceptions(requestParameters: PutMembershipPointsExceptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Update an existing membership promotion code in the database. <p><strong>OperationId:</strong>putMembershipPromotion</p>
     * Change membership promotion of a guest
     */
    putMembershipPromotionRaw(requestParameters: PutMembershipPromotionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Update an existing membership promotion code in the database. <p><strong>OperationId:</strong>putMembershipPromotion</p>
     * Change membership promotion of a guest
     */
    putMembershipPromotion(requestParameters: PutMembershipPromotionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Redeem an award that exists on a profile. <p><strong>OperationId:</strong>redeemAward</p>
     * Redeem an award
     */
    redeemAwardRaw(requestParameters: RedeemAwardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Award>>;
    /**
     * Redeem an award that exists on a profile. <p><strong>OperationId:</strong>redeemAward</p>
     * Redeem an award
     */
    redeemAward(requestParameters: RedeemAwardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Award>;
}
/**
 * @export
 */
export declare const ExportMembershipAwardNameTypeEnum: {
    readonly Primary: "Primary";
    readonly Alternate: "Alternate";
    readonly Incognito: "Incognito";
    readonly External: "External";
    readonly Phonetic: "Phonetic";
};
export type ExportMembershipAwardNameTypeEnum = typeof ExportMembershipAwardNameTypeEnum[keyof typeof ExportMembershipAwardNameTypeEnum];
/**
 * @export
 */
export declare const GetAllMembershipClaimsSourceEnum: {
    readonly Ocis: "Ocis";
    readonly Opms: "Opms";
    readonly Web: "Web";
};
export type GetAllMembershipClaimsSourceEnum = typeof GetAllMembershipClaimsSourceEnum[keyof typeof GetAllMembershipClaimsSourceEnum];
/**
 * @export
 */
export declare const GetAllMembershipClaimsApprovalStatusEnum: {
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
    readonly Pending: "Pending";
};
export type GetAllMembershipClaimsApprovalStatusEnum = typeof GetAllMembershipClaimsApprovalStatusEnum[keyof typeof GetAllMembershipClaimsApprovalStatusEnum];
/**
 * @export
 */
export declare const GetAvailableAwardsBasedOnTypeAwardBasedOnEnum: {
    readonly Rate: "Rate";
    readonly Product: "Product";
    readonly Upgrade: "Upgrade";
    readonly Other: "Other";
    readonly Ft: "Ft";
};
export type GetAvailableAwardsBasedOnTypeAwardBasedOnEnum = typeof GetAvailableAwardsBasedOnTypeAwardBasedOnEnum[keyof typeof GetAvailableAwardsBasedOnTypeAwardBasedOnEnum];
/**
 * @export
 */
export declare const GetAwardsToGrantAwardBasedOnEnum: {
    readonly Rate: "Rate";
    readonly Product: "Product";
    readonly Upgrade: "Upgrade";
    readonly Other: "Other";
    readonly Ft: "Ft";
};
export type GetAwardsToGrantAwardBasedOnEnum = typeof GetAwardsToGrantAwardBasedOnEnum[keyof typeof GetAwardsToGrantAwardBasedOnEnum];
/**
 * @export
 */
export declare const GetEnrollmentMatchProfilesMatchedProfileTypeEnum: {
    readonly Guest: "Guest";
    readonly Agent: "Agent";
    readonly Company: "Company";
    readonly Group: "Group";
    readonly Source: "Source";
    readonly Employee: "Employee";
    readonly Hotel: "Hotel";
    readonly Vendor: "Vendor";
    readonly Contact: "Contact";
    readonly Purge: "Purge";
    readonly BusinessHeader: "BusinessHeader";
    readonly BillingAccount: "BillingAccount";
    readonly Activity: "Activity";
    readonly Potential: "Potential";
    readonly Account: "Account";
};
export type GetEnrollmentMatchProfilesMatchedProfileTypeEnum = typeof GetEnrollmentMatchProfilesMatchedProfileTypeEnum[keyof typeof GetEnrollmentMatchProfilesMatchedProfileTypeEnum];
/**
 * @export
 */
export declare const GetMembershipClaimFetchInstructionsEnum: {
    readonly ClaimDetail: "ClaimDetail";
    readonly ClaimActivityLog: "ClaimActivityLog";
};
export type GetMembershipClaimFetchInstructionsEnum = typeof GetMembershipClaimFetchInstructionsEnum[keyof typeof GetMembershipClaimFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetMembershipClaimsSourceEnum: {
    readonly Ocis: "Ocis";
    readonly Opms: "Opms";
    readonly Web: "Web";
};
export type GetMembershipClaimsSourceEnum = typeof GetMembershipClaimsSourceEnum[keyof typeof GetMembershipClaimsSourceEnum];
/**
 * @export
 */
export declare const GetMembershipClaimsApprovalStatusEnum: {
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
    readonly Pending: "Pending";
};
export type GetMembershipClaimsApprovalStatusEnum = typeof GetMembershipClaimsApprovalStatusEnum[keyof typeof GetMembershipClaimsApprovalStatusEnum];
/**
 * @export
 */
export declare const GetMembershipDetailsModeEnum: {
    readonly TransactionDate: "TransactionDate";
    readonly StayBeginDate: "StayBeginDate";
    readonly StayEndDate: "StayEndDate";
    readonly PointsCreditDate: "PointsCreditDate";
};
export type GetMembershipDetailsModeEnum = typeof GetMembershipDetailsModeEnum[keyof typeof GetMembershipDetailsModeEnum];
