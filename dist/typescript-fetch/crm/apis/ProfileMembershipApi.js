"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetMembershipDetailsModeEnum = exports.GetMembershipClaimsApprovalStatusEnum = exports.GetMembershipClaimsSourceEnum = exports.GetMembershipClaimFetchInstructionsEnum = exports.GetEnrollmentMatchProfilesMatchedProfileTypeEnum = exports.GetAwardsToGrantAwardBasedOnEnum = exports.GetAvailableAwardsBasedOnTypeAwardBasedOnEnum = exports.GetAllMembershipClaimsApprovalStatusEnum = exports.GetAllMembershipClaimsSourceEnum = exports.ExportMembershipAwardNameTypeEnum = exports.ProfileMembershipApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class ProfileMembershipApi extends runtime.BaseAPI {
    /**
     * Start Membership Points Calculation process <p><strong>OperationId:</strong>calculateMembershipPoints</p>
     * Calculate Membership Points
     */
    calculateMembershipPointsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling calculateMembershipPoints.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling calculateMembershipPoints.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling calculateMembershipPoints.');
            }
            if (requestParameters.membershipPointsToCalculate === null || requestParameters.membershipPointsToCalculate === undefined) {
                throw new runtime.RequiredError('membershipPointsToCalculate', 'Required parameter requestParameters.membershipPointsToCalculate was null or undefined when calling calculateMembershipPoints.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipPoints/calculations`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipPointsToCalculateToJSON)(requestParameters.membershipPointsToCalculate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Start Membership Points Calculation process <p><strong>OperationId:</strong>calculateMembershipPoints</p>
     * Calculate Membership Points
     */
    calculateMembershipPoints(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.calculateMembershipPointsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Change membership claim details based on the claim number and instructions provided in the request. <p><strong>OperationId:</strong>changeMembershipClaim</p>
     * Change membership Claim
     */
    changeMembershipClaimRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.claimId === null || requestParameters.claimId === undefined) {
                throw new runtime.RequiredError('claimId', 'Required parameter requestParameters.claimId was null or undefined when calling changeMembershipClaim.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling changeMembershipClaim.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling changeMembershipClaim.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling changeMembershipClaim.');
            }
            if (requestParameters.membershipClaim === null || requestParameters.membershipClaim === undefined) {
                throw new runtime.RequiredError('membershipClaim', 'Required parameter requestParameters.membershipClaim was null or undefined when calling changeMembershipClaim.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipClaims/{claimId}`.replace(`{${"claimId"}}`, encodeURIComponent(String(requestParameters.claimId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipClaimToJSON)(requestParameters.membershipClaim),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Change membership claim details based on the claim number and instructions provided in the request. <p><strong>OperationId:</strong>changeMembershipClaim</p>
     * Change membership Claim
     */
    changeMembershipClaim(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeMembershipClaimRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Operation to cancel an award already been granted to a member. <p><strong>OperationId:</strong>deleteAwards</p>
     * Delete Awards
     */
    deleteAwardsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.awardNumber === null || requestParameters.awardNumber === undefined) {
                throw new runtime.RequiredError('awardNumber', 'Required parameter requestParameters.awardNumber was null or undefined when calling deleteAwards.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling deleteAwards.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling deleteAwards.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling deleteAwards.');
            }
            const queryParameters = {};
            if (requestParameters.awardNumber !== undefined) {
                queryParameters['awardNumber'] = requestParameters.awardNumber;
            }
            if (requestParameters.reservationCancellationNumber !== undefined) {
                queryParameters['reservationCancellationNumber'] = requestParameters.reservationCancellationNumber;
            }
            if (requestParameters.actualCancelPoints !== undefined) {
                queryParameters['actualCancelPoints'] = requestParameters.actualCancelPoints;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/awards`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Operation to cancel an award already been granted to a member. <p><strong>OperationId:</strong>deleteAwards</p>
     * Delete Awards
     */
    deleteAwards(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteAwardsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Export members information for Fulfillment house processing <p><strong>OperationId:</strong>exportMembershipAward</p>
     * Export Membership Award
     */
    exportMembershipAwardRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipId === null || requestParameters.membershipId === undefined) {
                throw new runtime.RequiredError('membershipId', 'Required parameter requestParameters.membershipId was null or undefined when calling exportMembershipAward.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling exportMembershipAward.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling exportMembershipAward.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling exportMembershipAward.');
            }
            const queryParameters = {};
            if (requestParameters.rateInfoHotelId !== undefined) {
                queryParameters['rateInfoHotelId'] = requestParameters.rateInfoHotelId;
            }
            if (requestParameters.totalAvailablePoints !== undefined) {
                queryParameters['totalAvailablePoints'] = requestParameters.totalAvailablePoints;
            }
            if (requestParameters.pointsRequired !== undefined) {
                queryParameters['pointsRequired'] = requestParameters.pointsRequired;
            }
            if (requestParameters.cancelPenaltyPoints !== undefined) {
                queryParameters['cancelPenaltyPoints'] = requestParameters.cancelPenaltyPoints;
            }
            if (requestParameters.cancelPenaltyDays !== undefined) {
                queryParameters['cancelPenaltyDays'] = requestParameters.cancelPenaltyDays;
            }
            if (requestParameters.cancelPenaltyCharge !== undefined) {
                queryParameters['cancelPenaltyCharge'] = requestParameters.cancelPenaltyCharge;
            }
            if (requestParameters.cancelPenaltyType !== undefined) {
                queryParameters['cancelPenaltyType'] = requestParameters.cancelPenaltyType;
            }
            if (requestParameters.rawIssueKey !== undefined) {
                queryParameters['rawIssueKey'] = requestParameters.rawIssueKey;
            }
            if (requestParameters.awardNumber !== undefined) {
                queryParameters['awardNumber'] = requestParameters.awardNumber;
            }
            if (requestParameters.rateCode !== undefined) {
                queryParameters['rateCode'] = requestParameters.rateCode;
            }
            if (requestParameters.rateDescription !== undefined) {
                queryParameters['rateDescription'] = requestParameters.rateDescription;
            }
            if (requestParameters.roomLabel !== undefined) {
                queryParameters['roomLabel'] = requestParameters.roomLabel;
            }
            if (requestParameters.roomDescription !== undefined) {
                queryParameters['roomDescription'] = requestParameters.roomDescription;
            }
            if (requestParameters.roomCategory !== undefined) {
                queryParameters['roomCategory'] = requestParameters.roomCategory;
            }
            if (requestParameters.stayDate !== undefined) {
                queryParameters['stayDate'] = requestParameters.stayDate.toISOString().substring(0, 10);
            }
            if (requestParameters.awardType !== undefined) {
                queryParameters['awardType'] = requestParameters.awardType;
            }
            if (requestParameters.productInfoHotelId !== undefined) {
                queryParameters['productInfoHotelId'] = requestParameters.productInfoHotelId;
            }
            if (requestParameters.productInfoTotalAvailablePoints !== undefined) {
                queryParameters['productInfoTotalAvailablePoints'] = requestParameters.productInfoTotalAvailablePoints;
            }
            if (requestParameters.productInfoPointsRequired !== undefined) {
                queryParameters['productInfoPointsRequired'] = requestParameters.productInfoPointsRequired;
            }
            if (requestParameters.productInfoCancelPenaltyPoints !== undefined) {
                queryParameters['productInfoCancelPenaltyPoints'] = requestParameters.productInfoCancelPenaltyPoints;
            }
            if (requestParameters.productInfoCancelPenaltyDays !== undefined) {
                queryParameters['productInfoCancelPenaltyDays'] = requestParameters.productInfoCancelPenaltyDays;
            }
            if (requestParameters.productInfoCancelPenaltyCharge !== undefined) {
                queryParameters['productInfoCancelPenaltyCharge'] = requestParameters.productInfoCancelPenaltyCharge;
            }
            if (requestParameters.productInfoCancelPenaltyType !== undefined) {
                queryParameters['productInfoCancelPenaltyType'] = requestParameters.productInfoCancelPenaltyType;
            }
            if (requestParameters.productInfoRawIssueKey !== undefined) {
                queryParameters['productInfoRawIssueKey'] = requestParameters.productInfoRawIssueKey;
            }
            if (requestParameters.productInfoAwardNumber !== undefined) {
                queryParameters['productInfoAwardNumber'] = requestParameters.productInfoAwardNumber;
            }
            if (requestParameters.packageCode !== undefined) {
                queryParameters['packageCode'] = requestParameters.packageCode;
            }
            if (requestParameters.packageDescription !== undefined) {
                queryParameters['packageDescription'] = requestParameters.packageDescription;
            }
            if (requestParameters.awardValidFrom !== undefined) {
                queryParameters['awardValidFrom'] = requestParameters.awardValidFrom.toISOString().substring(0, 10);
            }
            if (requestParameters.awardValidTo !== undefined) {
                queryParameters['awardValidTo'] = requestParameters.awardValidTo.toISOString().substring(0, 10);
            }
            if (requestParameters.upgradeInfoAwardType !== undefined) {
                queryParameters['upgradeInfoAwardType'] = requestParameters.upgradeInfoAwardType;
            }
            if (requestParameters.upgradeInfoHotelId !== undefined) {
                queryParameters['upgradeInfoHotelId'] = requestParameters.upgradeInfoHotelId;
            }
            if (requestParameters.upgradeInfoTotalAvailablePoints !== undefined) {
                queryParameters['upgradeInfoTotalAvailablePoints'] = requestParameters.upgradeInfoTotalAvailablePoints;
            }
            if (requestParameters.upgradeInfoPointsRequired !== undefined) {
                queryParameters['upgradeInfoPointsRequired'] = requestParameters.upgradeInfoPointsRequired;
            }
            if (requestParameters.upgradeInfoCancelPenaltyPoints !== undefined) {
                queryParameters['upgradeInfoCancelPenaltyPoints'] = requestParameters.upgradeInfoCancelPenaltyPoints;
            }
            if (requestParameters.upgradeInfoCancelPenaltyDays !== undefined) {
                queryParameters['upgradeInfoCancelPenaltyDays'] = requestParameters.upgradeInfoCancelPenaltyDays;
            }
            if (requestParameters.upgradeInfoCancelPenaltyCharge !== undefined) {
                queryParameters['upgradeInfoCancelPenaltyCharge'] = requestParameters.upgradeInfoCancelPenaltyCharge;
            }
            if (requestParameters.upgradeInfoCancelPenaltyType !== undefined) {
                queryParameters['upgradeInfoCancelPenaltyType'] = requestParameters.upgradeInfoCancelPenaltyType;
            }
            if (requestParameters.upgradeInfoRawIssueKey !== undefined) {
                queryParameters['upgradeInfoRawIssueKey'] = requestParameters.upgradeInfoRawIssueKey;
            }
            if (requestParameters.upgradeInfoAwardNumber !== undefined) {
                queryParameters['upgradeInfoAwardNumber'] = requestParameters.upgradeInfoAwardNumber;
            }
            if (requestParameters.fromRoomCategory !== undefined) {
                queryParameters['fromRoomCategory'] = requestParameters.fromRoomCategory;
            }
            if (requestParameters.toRoomCategory !== undefined) {
                queryParameters['toRoomCategory'] = requestParameters.toRoomCategory;
            }
            if (requestParameters.fromRoomDescription !== undefined) {
                queryParameters['fromRoomDescription'] = requestParameters.fromRoomDescription;
            }
            if (requestParameters.toRoomDescription !== undefined) {
                queryParameters['toRoomDescription'] = requestParameters.toRoomDescription;
            }
            if (requestParameters.fromRoom !== undefined) {
                queryParameters['fromRoom'] = requestParameters.fromRoom;
            }
            if (requestParameters.toRoom !== undefined) {
                queryParameters['toRoom'] = requestParameters.toRoom;
            }
            if (requestParameters.upgradeInfoStayDate !== undefined) {
                queryParameters['upgradeInfoStayDate'] = requestParameters.upgradeInfoStayDate.toISOString().substring(0, 10);
            }
            if (requestParameters.otherInfoAwardType !== undefined) {
                queryParameters['otherInfoAwardType'] = requestParameters.otherInfoAwardType;
            }
            if (requestParameters.sellBeginDate !== undefined) {
                queryParameters['sellBeginDate'] = requestParameters.sellBeginDate.toISOString().substring(0, 10);
            }
            if (requestParameters.sellEndDate !== undefined) {
                queryParameters['sellEndDate'] = requestParameters.sellEndDate.toISOString().substring(0, 10);
            }
            if (requestParameters.shortDescription !== undefined) {
                queryParameters['shortDescription'] = requestParameters.shortDescription;
            }
            if (requestParameters.awardValue !== undefined) {
                queryParameters['awardValue'] = requestParameters.awardValue;
            }
            if (requestParameters.otherInfoTotalAvailablePoints !== undefined) {
                queryParameters['otherInfoTotalAvailablePoints'] = requestParameters.otherInfoTotalAvailablePoints;
            }
            if (requestParameters.otherInfoPointsRequired !== undefined) {
                queryParameters['otherInfoPointsRequired'] = requestParameters.otherInfoPointsRequired;
            }
            if (requestParameters.longDescription !== undefined) {
                queryParameters['longDescription'] = requestParameters.longDescription;
            }
            if (requestParameters.otherInfoAwardNumber !== undefined) {
                queryParameters['otherInfoAwardNumber'] = requestParameters.otherInfoAwardNumber;
            }
            if (requestParameters.issueAwardsHotelId !== undefined) {
                queryParameters['issueAwardsHotelId'] = requestParameters.issueAwardsHotelId;
            }
            if (requestParameters.externalReservationNumber !== undefined) {
                queryParameters['externalReservationNumber'] = requestParameters.externalReservationNumber;
            }
            if (requestParameters.confirmationBookingNumber !== undefined) {
                queryParameters['confirmationBookingNumber'] = requestParameters.confirmationBookingNumber;
            }
            if (requestParameters.awardSource !== undefined) {
                queryParameters['awardSource'] = requestParameters.awardSource;
            }
            if (requestParameters.arrivalDate !== undefined) {
                queryParameters['arrivalDate'] = requestParameters.arrivalDate.toISOString().substring(0, 10);
            }
            if (requestParameters.departureDate !== undefined) {
                queryParameters['departureDate'] = requestParameters.departureDate.toISOString().substring(0, 10);
            }
            if (requestParameters.exportInfoAwardNumber !== undefined) {
                queryParameters['exportInfoAwardNumber'] = requestParameters.exportInfoAwardNumber;
            }
            if (requestParameters.nameType !== undefined) {
                queryParameters['nameType'] = requestParameters.nameType;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.fullName !== undefined) {
                queryParameters['fullName'] = requestParameters.fullName;
            }
            if (requestParameters.namePrefix !== undefined) {
                queryParameters['namePrefix'] = requestParameters.namePrefix;
            }
            if (requestParameters.givenName !== undefined) {
                queryParameters['givenName'] = requestParameters.givenName;
            }
            if (requestParameters.middleName !== undefined) {
                queryParameters['middleName'] = requestParameters.middleName;
            }
            if (requestParameters.nameSuffix !== undefined) {
                queryParameters['nameSuffix'] = requestParameters.nameSuffix;
            }
            if (requestParameters.nameTitle !== undefined) {
                queryParameters['nameTitle'] = requestParameters.nameTitle;
            }
            if (requestParameters.phoneNumber !== undefined) {
                queryParameters['phoneNumber'] = requestParameters.phoneNumber;
            }
            if (requestParameters.companyName !== undefined) {
                queryParameters['companyName'] = requestParameters.companyName;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.idType !== undefined) {
                queryParameters['idType'] = requestParameters.idType;
            }
            if (requestParameters.barCode !== undefined) {
                queryParameters['barCode'] = requestParameters.barCode;
            }
            if (requestParameters.createDateTime !== undefined) {
                queryParameters['createDateTime'] = requestParameters.createDateTime;
            }
            if (requestParameters.creatorId !== undefined) {
                queryParameters['creatorId'] = requestParameters.creatorId;
            }
            if (requestParameters.lastModifierId !== undefined) {
                queryParameters['lastModifierId'] = requestParameters.lastModifierId;
            }
            if (requestParameters.lastModifyDateTime !== undefined) {
                queryParameters['lastModifyDateTime'] = requestParameters.lastModifyDateTime;
            }
            if (requestParameters.primaryInd !== undefined) {
                queryParameters['primaryInd'] = requestParameters.primaryInd;
            }
            if (requestParameters.purgeDate !== undefined) {
                queryParameters['purgeDate'] = requestParameters.purgeDate.toISOString().substring(0, 10);
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.typeDescription !== undefined) {
                queryParameters['typeDescription'] = requestParameters.typeDescription;
            }
            if (requestParameters.updateReservations !== undefined) {
                queryParameters['updateReservations'] = requestParameters.updateReservations;
            }
            if (requestParameters.addressLine) {
                queryParameters['addressLine'] = requestParameters.addressLine;
            }
            if (requestParameters.cityName !== undefined) {
                queryParameters['cityName'] = requestParameters.cityName;
            }
            if (requestParameters.postalCode !== undefined) {
                queryParameters['postalCode'] = requestParameters.postalCode;
            }
            if (requestParameters.cityExtension !== undefined) {
                queryParameters['cityExtension'] = requestParameters.cityExtension;
            }
            if (requestParameters.county !== undefined) {
                queryParameters['county'] = requestParameters.county;
            }
            if (requestParameters.state !== undefined) {
                queryParameters['state'] = requestParameters.state;
            }
            if (requestParameters.code !== undefined) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.language !== undefined) {
                queryParameters['language'] = requestParameters.language;
            }
            if (requestParameters.characterUDFsAltName) {
                queryParameters['characterUDFsAltName'] = requestParameters.characterUDFsAltName;
            }
            if (requestParameters.characterUDFsName) {
                queryParameters['characterUDFsName'] = requestParameters.characterUDFsName;
            }
            if (requestParameters.characterUDFsValue) {
                queryParameters['characterUDFsValue'] = requestParameters.characterUDFsValue;
            }
            if (requestParameters.numericUDFsAltName) {
                queryParameters['NumericUDFsAltName'] = requestParameters.numericUDFsAltName;
            }
            if (requestParameters.numericUDFsName) {
                queryParameters['NumericUDFsName'] = requestParameters.numericUDFsName;
            }
            if (requestParameters.numericUDFsValue) {
                queryParameters['NumericUDFsValue'] = requestParameters.numericUDFsValue;
            }
            if (requestParameters.dateUDFsAltname) {
                queryParameters['DateUDFsAltname'] = requestParameters.dateUDFsAltname;
            }
            if (requestParameters.dateUDFsName) {
                queryParameters['DateUDFsName'] = requestParameters.dateUDFsName;
            }
            if (requestParameters.dateUDFsValue) {
                queryParameters['DateUDFsValue'] = requestParameters.dateUDFsValue;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/memberships/{membershipId}/award`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Export members information for Fulfillment house processing <p><strong>OperationId:</strong>exportMembershipAward</p>
     * Export Membership Award
     */
    exportMembershipAward(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.exportMembershipAwardRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This will allow you to extend the expiration date based on the rule defined in the Grace Period in months. <p><strong>OperationId:</strong>extendMemberPointsToExpire</p>
     * Extend Member Points set to Expire
     */
    extendMemberPointsToExpireRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipId === null || requestParameters.membershipId === undefined) {
                throw new runtime.RequiredError('membershipId', 'Required parameter requestParameters.membershipId was null or undefined when calling extendMemberPointsToExpire.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling extendMemberPointsToExpire.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling extendMemberPointsToExpire.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling extendMemberPointsToExpire.');
            }
            if (requestParameters.extendMemberPointsToExpire === null || requestParameters.extendMemberPointsToExpire === undefined) {
                throw new runtime.RequiredError('extendMemberPointsToExpire', 'Required parameter requestParameters.extendMemberPointsToExpire was null or undefined when calling extendMemberPointsToExpire.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/memberships/{membershipId}/pointsToExpire`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ExtendMemberPointsToExpireToJSON)(requestParameters.extendMemberPointsToExpire),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This will allow you to extend the expiration date based on the rule defined in the Grace Period in months. <p><strong>OperationId:</strong>extendMemberPointsToExpire</p>
     * Extend Member Points set to Expire
     */
    extendMemberPointsToExpire(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.extendMemberPointsToExpireRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Request for fetching membership transactions processed by the airline. <p><strong>OperationId:</strong>getAirlineTransactionsStatus</p>
     * Get airline transactions status
     */
    getAirlineTransactionsStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getAirlineTransactionsStatus.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getAirlineTransactionsStatus.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getAirlineTransactionsStatus.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.batchId !== undefined) {
                queryParameters['batchId'] = requestParameters.batchId;
            }
            if (requestParameters.batchIdType !== undefined) {
                queryParameters['batchIdType'] = requestParameters.batchIdType;
            }
            if (requestParameters.importDate !== undefined) {
                queryParameters['importDate'] = requestParameters.importDate.toISOString().substring(0, 10);
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/airline/transactions`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AirlineTransactionsStatusFromJSON)(jsonValue));
        });
    }
    /**
     * Request for fetching membership transactions processed by the airline. <p><strong>OperationId:</strong>getAirlineTransactionsStatus</p>
     * Get airline transactions status
     */
    getAirlineTransactionsStatus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAirlineTransactionsStatusRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve available membership claims without specifying the membership ID. <p><strong>OperationId:</strong>getAllMembershipClaims</p>
     * Get membership claims
     */
    getAllMembershipClaimsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getAllMembershipClaims.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getAllMembershipClaims.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getAllMembershipClaims.');
            }
            const queryParameters = {};
            if (requestParameters.membershipId !== undefined) {
                queryParameters['membershipId'] = requestParameters.membershipId;
            }
            if (requestParameters.profileId !== undefined) {
                queryParameters['profileId'] = requestParameters.profileId;
            }
            if (requestParameters.profileIdContext !== undefined) {
                queryParameters['profileIdContext'] = requestParameters.profileIdContext;
            }
            if (requestParameters.profileIdType !== undefined) {
                queryParameters['profileIdType'] = requestParameters.profileIdType;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.givenName !== undefined) {
                queryParameters['givenName'] = requestParameters.givenName;
            }
            if (requestParameters.membershipType !== undefined) {
                queryParameters['membershipType'] = requestParameters.membershipType;
            }
            if (requestParameters.claimType !== undefined) {
                queryParameters['claimType'] = requestParameters.claimType;
            }
            if (requestParameters.source !== undefined) {
                queryParameters['source'] = requestParameters.source;
            }
            if (requestParameters.owner !== undefined) {
                queryParameters['owner'] = requestParameters.owner;
            }
            if (requestParameters.claimNumber !== undefined) {
                queryParameters['claimNumber'] = requestParameters.claimNumber;
            }
            if (requestParameters.claimNoContext !== undefined) {
                queryParameters['claimNoContext'] = requestParameters.claimNoContext;
            }
            if (requestParameters.claimNoType !== undefined) {
                queryParameters['claimNoType'] = requestParameters.claimNoType;
            }
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.confirmationNo !== undefined) {
                queryParameters['confirmationNo'] = requestParameters.confirmationNo;
            }
            if (requestParameters.submitter !== undefined) {
                queryParameters['submitter'] = requestParameters.submitter;
            }
            if (requestParameters.claimStatus !== undefined) {
                queryParameters['claimStatus'] = requestParameters.claimStatus;
            }
            if (requestParameters.closeDateEnd !== undefined) {
                queryParameters['closeDateEnd'] = requestParameters.closeDateEnd.toISOString().substring(0, 10);
            }
            if (requestParameters.closeDateStart !== undefined) {
                queryParameters['closeDateStart'] = requestParameters.closeDateStart.toISOString().substring(0, 10);
            }
            if (requestParameters.claimDateEnd !== undefined) {
                queryParameters['claimDateEnd'] = requestParameters.claimDateEnd.toISOString().substring(0, 10);
            }
            if (requestParameters.claimDateStart !== undefined) {
                queryParameters['claimDateStart'] = requestParameters.claimDateStart.toISOString().substring(0, 10);
            }
            if (requestParameters.replyByEnd !== undefined) {
                queryParameters['replyByEnd'] = requestParameters.replyByEnd.toISOString().substring(0, 10);
            }
            if (requestParameters.replyByStart !== undefined) {
                queryParameters['replyByStart'] = requestParameters.replyByStart.toISOString().substring(0, 10);
            }
            if (requestParameters.arrivalEnd !== undefined) {
                queryParameters['arrivalEnd'] = requestParameters.arrivalEnd.toISOString().substring(0, 10);
            }
            if (requestParameters.arrivalStart !== undefined) {
                queryParameters['arrivalStart'] = requestParameters.arrivalStart.toISOString().substring(0, 10);
            }
            if (requestParameters.departureEnd !== undefined) {
                queryParameters['departureEnd'] = requestParameters.departureEnd.toISOString().substring(0, 10);
            }
            if (requestParameters.departureStart !== undefined) {
                queryParameters['departureStart'] = requestParameters.departureStart.toISOString().substring(0, 10);
            }
            if (requestParameters.approvalStatus !== undefined) {
                queryParameters['approvalStatus'] = requestParameters.approvalStatus;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipClaims`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipClaimsFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve available membership claims without specifying the membership ID. <p><strong>OperationId:</strong>getAllMembershipClaims</p>
     * Get membership claims
     */
    getAllMembershipClaims(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAllMembershipClaimsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get available awards based on type of award selected like Rates, products or services, room type upgrades, and other gifts. <p><strong>OperationId:</strong>getAvailableAwardsBasedOnType</p>
     * Get Available Awards
     */
    getAvailableAwardsBasedOnTypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getAvailableAwardsBasedOnType.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getAvailableAwardsBasedOnType.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getAvailableAwardsBasedOnType.');
            }
            const queryParameters = {};
            if (requestParameters.awardBasedOn !== undefined) {
                queryParameters['awardBasedOn'] = requestParameters.awardBasedOn;
            }
            if (requestParameters.membershipType !== undefined) {
                queryParameters['membershipType'] = requestParameters.membershipType;
            }
            if (requestParameters.rateCriteriaHotelId !== undefined) {
                queryParameters['rateCriteriaHotelId'] = requestParameters.rateCriteriaHotelId;
            }
            if (requestParameters.arrivalDate !== undefined) {
                queryParameters['arrivalDate'] = requestParameters.arrivalDate.toISOString().substring(0, 10);
            }
            if (requestParameters.departureDate !== undefined) {
                queryParameters['departureDate'] = requestParameters.departureDate.toISOString().substring(0, 10);
            }
            if (requestParameters.bookingDate !== undefined) {
                queryParameters['bookingDate'] = requestParameters.bookingDate.toISOString().substring(0, 10);
            }
            if (requestParameters.pointsBelow !== undefined) {
                queryParameters['pointsBelow'] = requestParameters.pointsBelow;
            }
            if (requestParameters.pointsAbove !== undefined) {
                queryParameters['pointsAbove'] = requestParameters.pointsAbove;
            }
            if (requestParameters.rateCode !== undefined) {
                queryParameters['rateCode'] = requestParameters.rateCode;
            }
            if (requestParameters.roomCategory !== undefined) {
                queryParameters['roomCategory'] = requestParameters.roomCategory;
            }
            if (requestParameters.rooms !== undefined) {
                queryParameters['rooms'] = requestParameters.rooms;
            }
            if (requestParameters.awardType !== undefined) {
                queryParameters['awardType'] = requestParameters.awardType;
            }
            if (requestParameters.productCriteriaMembershipType !== undefined) {
                queryParameters['productCriteriaMembershipType'] = requestParameters.productCriteriaMembershipType;
            }
            if (requestParameters.productCriteriaHotelId !== undefined) {
                queryParameters['productCriteriaHotelId'] = requestParameters.productCriteriaHotelId;
            }
            if (requestParameters.productCriteriaArrivalDate !== undefined) {
                queryParameters['productCriteriaArrivalDate'] = requestParameters.productCriteriaArrivalDate.toISOString().substring(0, 10);
            }
            if (requestParameters.productCriteriaDepartureDate !== undefined) {
                queryParameters['productCriteriaDepartureDate'] = requestParameters.productCriteriaDepartureDate.toISOString().substring(0, 10);
            }
            if (requestParameters.productCriteriaBookingDate !== undefined) {
                queryParameters['productCriteriaBookingDate'] = requestParameters.productCriteriaBookingDate.toISOString().substring(0, 10);
            }
            if (requestParameters.productCriteriaPointsBelow !== undefined) {
                queryParameters['productCriteriaPointsBelow'] = requestParameters.productCriteriaPointsBelow;
            }
            if (requestParameters.productCriteriaPointsAbove !== undefined) {
                queryParameters['productCriteriaPointsAbove'] = requestParameters.productCriteriaPointsAbove;
            }
            if (requestParameters.packageCode !== undefined) {
                queryParameters['packageCode'] = requestParameters.packageCode;
            }
            if (requestParameters.upgradeCriteriaMembershipType !== undefined) {
                queryParameters['upgradeCriteriaMembershipType'] = requestParameters.upgradeCriteriaMembershipType;
            }
            if (requestParameters.upgradeCriteriaHotelId !== undefined) {
                queryParameters['upgradeCriteriaHotelId'] = requestParameters.upgradeCriteriaHotelId;
            }
            if (requestParameters.upgradeCriteriaArrivalDate !== undefined) {
                queryParameters['upgradeCriteriaArrivalDate'] = requestParameters.upgradeCriteriaArrivalDate.toISOString().substring(0, 10);
            }
            if (requestParameters.upgradeCriteriaDepartureDate !== undefined) {
                queryParameters['upgradeCriteriaDepartureDate'] = requestParameters.upgradeCriteriaDepartureDate.toISOString().substring(0, 10);
            }
            if (requestParameters.upgradeCriteriaBookingDate !== undefined) {
                queryParameters['upgradeCriteriaBookingDate'] = requestParameters.upgradeCriteriaBookingDate.toISOString().substring(0, 10);
            }
            if (requestParameters.upgradeCriteriaPointsBelow !== undefined) {
                queryParameters['upgradeCriteriaPointsBelow'] = requestParameters.upgradeCriteriaPointsBelow;
            }
            if (requestParameters.upgradeCriteriaPointsAbove !== undefined) {
                queryParameters['upgradeCriteriaPointsAbove'] = requestParameters.upgradeCriteriaPointsAbove;
            }
            if (requestParameters.fromRoomCategory !== undefined) {
                queryParameters['fromRoomCategory'] = requestParameters.fromRoomCategory;
            }
            if (requestParameters.toRoomCategory !== undefined) {
                queryParameters['toRoomCategory'] = requestParameters.toRoomCategory;
            }
            if (requestParameters.upgradeCriteriaRooms !== undefined) {
                queryParameters['upgradeCriteriaRooms'] = requestParameters.upgradeCriteriaRooms;
            }
            if (requestParameters.upgradeCriteriaAwardType !== undefined) {
                queryParameters['upgradeCriteriaAwardType'] = requestParameters.upgradeCriteriaAwardType;
            }
            if (requestParameters.awardCode !== undefined) {
                queryParameters['awardCode'] = requestParameters.awardCode;
            }
            if (requestParameters.totalBillingAmount !== undefined) {
                queryParameters['totalBillingAmount'] = requestParameters.totalBillingAmount;
            }
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            if (requestParameters.fTPaymentCriteriaPointsBelow !== undefined) {
                queryParameters['fTPaymentCriteriaPointsBelow'] = requestParameters.fTPaymentCriteriaPointsBelow;
            }
            if (requestParameters.fTPaymentCriteriaPointsAbove !== undefined) {
                queryParameters['fTPaymentCriteriaPointsAbove'] = requestParameters.fTPaymentCriteriaPointsAbove;
            }
            if (requestParameters.otherCriteriaAwardCode !== undefined) {
                queryParameters['otherCriteriaAwardCode'] = requestParameters.otherCriteriaAwardCode;
            }
            if (requestParameters.otherCriteriaMembershipType !== undefined) {
                queryParameters['otherCriteriaMembershipType'] = requestParameters.otherCriteriaMembershipType;
            }
            if (requestParameters.membershipLevel !== undefined) {
                queryParameters['membershipLevel'] = requestParameters.membershipLevel;
            }
            if (requestParameters.shortDescription !== undefined) {
                queryParameters['shortDescription'] = requestParameters.shortDescription;
            }
            if (requestParameters.valueBelow !== undefined) {
                queryParameters['valueBelow'] = requestParameters.valueBelow;
            }
            if (requestParameters.valueAbove !== undefined) {
                queryParameters['valueAbove'] = requestParameters.valueAbove;
            }
            if (requestParameters.otherCriteriaPointsBelow !== undefined) {
                queryParameters['otherCriteriaPointsBelow'] = requestParameters.otherCriteriaPointsBelow;
            }
            if (requestParameters.otherCriteriaPointsAbove !== undefined) {
                queryParameters['otherCriteriaPointsAbove'] = requestParameters.otherCriteriaPointsAbove;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/availableAwardsBasedOnType`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AvailableAwardsBasedOnTypeFromJSON)(jsonValue));
        });
    }
    /**
     * Get available awards based on type of award selected like Rates, products or services, room type upgrades, and other gifts. <p><strong>OperationId:</strong>getAvailableAwardsBasedOnType</p>
     * Get Available Awards
     */
    getAvailableAwardsBasedOnType(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAvailableAwardsBasedOnTypeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Fetch awards list to be able to grant the award to a member <p><strong>OperationId:</strong>getAwardsToGrant</p>
     * Get Awards to Grant
     */
    getAwardsToGrantRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getAwardsToGrant.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getAwardsToGrant.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getAwardsToGrant.');
            }
            const queryParameters = {};
            if (requestParameters.awardBasedOn !== undefined) {
                queryParameters['awardBasedOn'] = requestParameters.awardBasedOn;
            }
            if (requestParameters.totalPointsRequired !== undefined) {
                queryParameters['totalPointsRequired'] = requestParameters.totalPointsRequired;
            }
            if (requestParameters.rooms !== undefined) {
                queryParameters['rooms'] = requestParameters.rooms;
            }
            if (requestParameters.membershipId !== undefined) {
                queryParameters['membershipId'] = requestParameters.membershipId;
            }
            if (requestParameters.membershipType !== undefined) {
                queryParameters['membershipType'] = requestParameters.membershipType;
            }
            if (requestParameters.awardType !== undefined) {
                queryParameters['awardType'] = requestParameters.awardType;
            }
            if (requestParameters.grantAwardInfoHotelId !== undefined) {
                queryParameters['grantAwardInfoHotelId'] = requestParameters.grantAwardInfoHotelId;
            }
            if (requestParameters.rateCode !== undefined) {
                queryParameters['rateCode'] = requestParameters.rateCode;
            }
            if (requestParameters.roomCategory !== undefined) {
                queryParameters['roomCategory'] = requestParameters.roomCategory;
            }
            if (requestParameters.fromRoom !== undefined) {
                queryParameters['fromRoom'] = requestParameters.fromRoom;
            }
            if (requestParameters.toRoom !== undefined) {
                queryParameters['toRoom'] = requestParameters.toRoom;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/awardsToGrant`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AwardsToGrantFromJSON)(jsonValue));
        });
    }
    /**
     * Fetch awards list to be able to grant the award to a member <p><strong>OperationId:</strong>getAwardsToGrant</p>
     * Get Awards to Grant
     */
    getAwardsToGrant(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAwardsToGrantRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get detailed information regarding match profiles <p><strong>OperationId:</strong>getEnrollmentMatchProfiles</p>
     * Get Profiles for Enrollment
     */
    getEnrollmentMatchProfilesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getEnrollmentMatchProfiles.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getEnrollmentMatchProfiles.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getEnrollmentMatchProfiles.');
            }
            const queryParameters = {};
            if (requestParameters.externalDatabaseID !== undefined) {
                queryParameters['externalDatabaseID'] = requestParameters.externalDatabaseID;
            }
            if (requestParameters.matchedProfileType !== undefined) {
                queryParameters['matchedProfileType'] = requestParameters.matchedProfileType;
            }
            if (requestParameters.language !== undefined) {
                queryParameters['language'] = requestParameters.language;
            }
            if (requestParameters.givenName !== undefined) {
                queryParameters['givenName'] = requestParameters.givenName;
            }
            if (requestParameters.surname !== undefined) {
                queryParameters['surname'] = requestParameters.surname;
            }
            if (requestParameters.nameTitle !== undefined) {
                queryParameters['nameTitle'] = requestParameters.nameTitle;
            }
            if (requestParameters.addressId !== undefined) {
                queryParameters['addressId'] = requestParameters.addressId;
            }
            if (requestParameters.addressIdContext !== undefined) {
                queryParameters['addressIdContext'] = requestParameters.addressIdContext;
            }
            if (requestParameters.addressIdType !== undefined) {
                queryParameters['addressIdType'] = requestParameters.addressIdType;
            }
            if (requestParameters.primaryInd !== undefined) {
                queryParameters['primaryInd'] = requestParameters.primaryInd;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.addressLine) {
                queryParameters['addressLine'] = requestParameters.addressLine;
            }
            if (requestParameters.cityName !== undefined) {
                queryParameters['cityName'] = requestParameters.cityName;
            }
            if (requestParameters.postalCode !== undefined) {
                queryParameters['postalCode'] = requestParameters.postalCode;
            }
            if (requestParameters.county !== undefined) {
                queryParameters['county'] = requestParameters.county;
            }
            if (requestParameters.state !== undefined) {
                queryParameters['state'] = requestParameters.state;
            }
            if (requestParameters.countryCode !== undefined) {
                queryParameters['countryCode'] = requestParameters.countryCode;
            }
            if (requestParameters.languageCode !== undefined) {
                queryParameters['languageCode'] = requestParameters.languageCode;
            }
            if (requestParameters.businessSegment) {
                queryParameters['businessSegment'] = requestParameters.businessSegment;
            }
            if (requestParameters.territory !== undefined) {
                queryParameters['territory'] = requestParameters.territory;
            }
            if (requestParameters.traceCode !== undefined) {
                queryParameters['traceCode'] = requestParameters.traceCode;
            }
            if (requestParameters.ownerCode !== undefined) {
                queryParameters['ownerCode'] = requestParameters.ownerCode;
            }
            if (requestParameters.influenceCode !== undefined) {
                queryParameters['influenceCode'] = requestParameters.influenceCode;
            }
            if (requestParameters.hasMore !== undefined) {
                queryParameters['hasMore'] = requestParameters.hasMore;
            }
            if (requestParameters.totalResults !== undefined) {
                queryParameters['totalResults'] = requestParameters.totalResults;
            }
            if (requestParameters.telephoneId !== undefined) {
                queryParameters['telephoneId'] = requestParameters.telephoneId;
            }
            if (requestParameters.telephoneIdContext !== undefined) {
                queryParameters['telephoneIdContext'] = requestParameters.telephoneIdContext;
            }
            if (requestParameters.telephoneIdType !== undefined) {
                queryParameters['telephoneIdType'] = requestParameters.telephoneIdType;
            }
            if (requestParameters.phoneNumber !== undefined) {
                queryParameters['phoneNumber'] = requestParameters.phoneNumber;
            }
            if (requestParameters.phoneTechType !== undefined) {
                queryParameters['phoneTechType'] = requestParameters.phoneTechType;
            }
            if (requestParameters.phoneUseType !== undefined) {
                queryParameters['phoneUseType'] = requestParameters.phoneUseType;
            }
            if (requestParameters.phoneUseTypeDescription !== undefined) {
                queryParameters['phoneUseTypeDescription'] = requestParameters.phoneUseTypeDescription;
            }
            if (requestParameters.telephonePrimaryInd !== undefined) {
                queryParameters['telephonePrimaryInd'] = requestParameters.telephonePrimaryInd;
            }
            if (requestParameters.emailInfoId !== undefined) {
                queryParameters['emailInfoId'] = requestParameters.emailInfoId;
            }
            if (requestParameters.emailInfoIdContext !== undefined) {
                queryParameters['emailInfoIdContext'] = requestParameters.emailInfoIdContext;
            }
            if (requestParameters.emailInfoIdType !== undefined) {
                queryParameters['emailInfoIdType'] = requestParameters.emailInfoIdType;
            }
            if (requestParameters.emailAddress !== undefined) {
                queryParameters['emailAddress'] = requestParameters.emailAddress;
            }
            if (requestParameters.emailPrimaryInd !== undefined) {
                queryParameters['emailPrimaryInd'] = requestParameters.emailPrimaryInd;
            }
            if (requestParameters.emailType !== undefined) {
                queryParameters['emailType'] = requestParameters.emailType;
            }
            if (requestParameters.urlId !== undefined) {
                queryParameters['urlId'] = requestParameters.urlId;
            }
            if (requestParameters.urlIdContext !== undefined) {
                queryParameters['urlIdContext'] = requestParameters.urlIdContext;
            }
            if (requestParameters.urlIdType !== undefined) {
                queryParameters['urlIdType'] = requestParameters.urlIdType;
            }
            if (requestParameters.urlPrimaryInd !== undefined) {
                queryParameters['urlPrimaryInd'] = requestParameters.urlPrimaryInd;
            }
            if (requestParameters.urlType !== undefined) {
                queryParameters['urlType'] = requestParameters.urlType;
            }
            if (requestParameters.membershipId !== undefined) {
                queryParameters['membershipId'] = requestParameters.membershipId;
            }
            if (requestParameters.nameOnCard !== undefined) {
                queryParameters['nameOnCard'] = requestParameters.nameOnCard;
            }
            if (requestParameters.membershipLevel !== undefined) {
                queryParameters['membershipLevel'] = requestParameters.membershipLevel;
            }
            if (requestParameters.profileId !== undefined) {
                queryParameters['profileId'] = requestParameters.profileId;
            }
            if (requestParameters.profileContext !== undefined) {
                queryParameters['profileContext'] = requestParameters.profileContext;
            }
            if (requestParameters.profileType !== undefined) {
                queryParameters['profileType'] = requestParameters.profileType;
            }
            if (requestParameters.paymentMethodCode !== undefined) {
                queryParameters['paymentMethodCode'] = requestParameters.paymentMethodCode;
            }
            if (requestParameters.amount !== undefined) {
                queryParameters['amount'] = requestParameters.amount;
            }
            if (requestParameters.amountCode !== undefined) {
                queryParameters['amountCode'] = requestParameters.amountCode;
            }
            if (requestParameters.comments !== undefined) {
                queryParameters['comments'] = requestParameters.comments;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/profileForEnrollment`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EnrollmentMatchProfilesFromJSON)(jsonValue));
        });
    }
    /**
     * Get detailed information regarding match profiles <p><strong>OperationId:</strong>getEnrollmentMatchProfiles</p>
     * Get Profiles for Enrollment
     */
    getEnrollmentMatchProfiles(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getEnrollmentMatchProfilesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to retrieve your Points To Expire by membershipId. <p><strong>OperationId:</strong>getMemberPointsToExpire</p>
     * Get  membership points to expire
     */
    getMemberPointsToExpireRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipId === null || requestParameters.membershipId === undefined) {
                throw new runtime.RequiredError('membershipId', 'Required parameter requestParameters.membershipId was null or undefined when calling getMemberPointsToExpire.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getMemberPointsToExpire.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getMemberPointsToExpire.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getMemberPointsToExpire.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/memberships/{membershipId}/pointsToExpire`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MemberPointsToExpireFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to retrieve your Points To Expire by membershipId. <p><strong>OperationId:</strong>getMemberPointsToExpire</p>
     * Get  membership points to expire
     */
    getMemberPointsToExpire(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMemberPointsToExpireRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get members information for Fulfillment house processing <p><strong>OperationId:</strong>getMembershipAwardExportInfo</p>
     * Get Membership Award Export Information
     */
    getMembershipAwardExportInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipId === null || requestParameters.membershipId === undefined) {
                throw new runtime.RequiredError('membershipId', 'Required parameter requestParameters.membershipId was null or undefined when calling getMembershipAwardExportInfo.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getMembershipAwardExportInfo.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getMembershipAwardExportInfo.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getMembershipAwardExportInfo.');
            }
            const queryParameters = {};
            if (requestParameters.awardNumber !== undefined) {
                queryParameters['awardNumber'] = requestParameters.awardNumber;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/memberships/{membershipId}/awardExports`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipAwardExportInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Get members information for Fulfillment house processing <p><strong>OperationId:</strong>getMembershipAwardExportInfo</p>
     * Get Membership Award Export Information
     */
    getMembershipAwardExportInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipAwardExportInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a memberships issued awards points per property. <p><strong>OperationId:</strong>getMembershipAwardPointsByHotel</p>
     * Get Membership Issued awards points
     */
    getMembershipAwardPointsByHotelRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipId === null || requestParameters.membershipId === undefined) {
                throw new runtime.RequiredError('membershipId', 'Required parameter requestParameters.membershipId was null or undefined when calling getMembershipAwardPointsByHotel.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getMembershipAwardPointsByHotel.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getMembershipAwardPointsByHotel.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getMembershipAwardPointsByHotel.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getMembershipAwardPointsByHotel.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/memberships/{membershipId}`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipAwardPointsByHotelFromJSON)(jsonValue));
        });
    }
    /**
     * Get a memberships issued awards points per property. <p><strong>OperationId:</strong>getMembershipAwardPointsByHotel</p>
     * Get Membership Issued awards points
     */
    getMembershipAwardPointsByHotel(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipAwardPointsByHotelRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get membership claim details based on the claim number and instructions provided in the request. <p><strong>OperationId:</strong>getMembershipClaim</p>
     * Get membership claim
     */
    getMembershipClaimRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.claimId === null || requestParameters.claimId === undefined) {
                throw new runtime.RequiredError('claimId', 'Required parameter requestParameters.claimId was null or undefined when calling getMembershipClaim.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getMembershipClaim.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getMembershipClaim.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getMembershipClaim.');
            }
            const queryParameters = {};
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipClaims/{claimId}`.replace(`{${"claimId"}}`, encodeURIComponent(String(requestParameters.claimId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipClaimFromJSON)(jsonValue));
        });
    }
    /**
     * Get membership claim details based on the claim number and instructions provided in the request. <p><strong>OperationId:</strong>getMembershipClaim</p>
     * Get membership claim
     */
    getMembershipClaim(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipClaimRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve available membership claims by specifying the membership ID. <p><strong>OperationId:</strong>getMembershipClaims</p>
     * Get membership claims
     */
    getMembershipClaimsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipId === null || requestParameters.membershipId === undefined) {
                throw new runtime.RequiredError('membershipId', 'Required parameter requestParameters.membershipId was null or undefined when calling getMembershipClaims.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getMembershipClaims.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getMembershipClaims.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getMembershipClaims.');
            }
            const queryParameters = {};
            if (requestParameters.profileId !== undefined) {
                queryParameters['profileId'] = requestParameters.profileId;
            }
            if (requestParameters.profileIdContext !== undefined) {
                queryParameters['profileIdContext'] = requestParameters.profileIdContext;
            }
            if (requestParameters.profileIdType !== undefined) {
                queryParameters['profileIdType'] = requestParameters.profileIdType;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.givenName !== undefined) {
                queryParameters['givenName'] = requestParameters.givenName;
            }
            if (requestParameters.membershipType !== undefined) {
                queryParameters['membershipType'] = requestParameters.membershipType;
            }
            if (requestParameters.claimType !== undefined) {
                queryParameters['claimType'] = requestParameters.claimType;
            }
            if (requestParameters.source !== undefined) {
                queryParameters['source'] = requestParameters.source;
            }
            if (requestParameters.owner !== undefined) {
                queryParameters['owner'] = requestParameters.owner;
            }
            if (requestParameters.claimNumber !== undefined) {
                queryParameters['claimNumber'] = requestParameters.claimNumber;
            }
            if (requestParameters.claimNoContext !== undefined) {
                queryParameters['claimNoContext'] = requestParameters.claimNoContext;
            }
            if (requestParameters.claimNoType !== undefined) {
                queryParameters['claimNoType'] = requestParameters.claimNoType;
            }
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.confirmationNo !== undefined) {
                queryParameters['confirmationNo'] = requestParameters.confirmationNo;
            }
            if (requestParameters.submitter !== undefined) {
                queryParameters['submitter'] = requestParameters.submitter;
            }
            if (requestParameters.claimStatus !== undefined) {
                queryParameters['claimStatus'] = requestParameters.claimStatus;
            }
            if (requestParameters.closeDateEnd !== undefined) {
                queryParameters['closeDateEnd'] = requestParameters.closeDateEnd.toISOString().substring(0, 10);
            }
            if (requestParameters.closeDateStart !== undefined) {
                queryParameters['closeDateStart'] = requestParameters.closeDateStart.toISOString().substring(0, 10);
            }
            if (requestParameters.claimDateEnd !== undefined) {
                queryParameters['claimDateEnd'] = requestParameters.claimDateEnd.toISOString().substring(0, 10);
            }
            if (requestParameters.claimDateStart !== undefined) {
                queryParameters['claimDateStart'] = requestParameters.claimDateStart.toISOString().substring(0, 10);
            }
            if (requestParameters.replyByEnd !== undefined) {
                queryParameters['replyByEnd'] = requestParameters.replyByEnd.toISOString().substring(0, 10);
            }
            if (requestParameters.replyByStart !== undefined) {
                queryParameters['replyByStart'] = requestParameters.replyByStart.toISOString().substring(0, 10);
            }
            if (requestParameters.arrivalEnd !== undefined) {
                queryParameters['arrivalEnd'] = requestParameters.arrivalEnd.toISOString().substring(0, 10);
            }
            if (requestParameters.arrivalStart !== undefined) {
                queryParameters['arrivalStart'] = requestParameters.arrivalStart.toISOString().substring(0, 10);
            }
            if (requestParameters.departureEnd !== undefined) {
                queryParameters['departureEnd'] = requestParameters.departureEnd.toISOString().substring(0, 10);
            }
            if (requestParameters.departureStart !== undefined) {
                queryParameters['departureStart'] = requestParameters.departureStart.toISOString().substring(0, 10);
            }
            if (requestParameters.approvalStatus !== undefined) {
                queryParameters['approvalStatus'] = requestParameters.approvalStatus;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/memberships/{membershipId}/claims`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipClaimsFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve available membership claims by specifying the membership ID. <p><strong>OperationId:</strong>getMembershipClaims</p>
     * Get membership claims
     */
    getMembershipClaims(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipClaimsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to retrieve membership details on a profile. <p><strong>OperationId:</strong>getMembershipDetails</p>
     * Get membership information on a profile
     */
    getMembershipDetailsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
                throw new runtime.RequiredError('profileId', 'Required parameter requestParameters.profileId was null or undefined when calling getMembershipDetails.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getMembershipDetails.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getMembershipDetails.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getMembershipDetails.');
            }
            const queryParameters = {};
            if (requestParameters.id) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idContext) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.idType) {
                queryParameters['idType'] = requestParameters.idType;
            }
            if (requestParameters.membershipType !== undefined) {
                queryParameters['membershipType'] = requestParameters.membershipType;
            }
            if (requestParameters.membershipId !== undefined) {
                queryParameters['membershipId'] = requestParameters.membershipId;
            }
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate.toISOString().substring(0, 10);
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate.toISOString().substring(0, 10);
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.mode !== undefined) {
                queryParameters['mode'] = requestParameters.mode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/profiles/{profileId}/memberships/info`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MemberInformationFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to retrieve membership details on a profile. <p><strong>OperationId:</strong>getMembershipDetails</p>
     * Get membership information on a profile
     */
    getMembershipDetails(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipDetailsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve a list of member issued awards. <p><strong>OperationId:</strong>getMembershipIssueAwardsList</p>
     * Get Membership Award list
     */
    getMembershipIssueAwardsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipId === null || requestParameters.membershipId === undefined) {
                throw new runtime.RequiredError('membershipId', 'Required parameter requestParameters.membershipId was null or undefined when calling getMembershipIssueAwardsList.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getMembershipIssueAwardsList.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getMembershipIssueAwardsList.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getMembershipIssueAwardsList.');
            }
            const queryParameters = {};
            if (requestParameters.membershipType !== undefined) {
                queryParameters['membershipType'] = requestParameters.membershipType;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/memberships/{membershipId}/awards`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipIssueAwardsFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve a list of member issued awards. <p><strong>OperationId:</strong>getMembershipIssueAwardsList</p>
     * Get Membership Award list
     */
    getMembershipIssueAwardsList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipIssueAwardsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve membership transactions. <p><strong>OperationId:</strong>getMembershipTransaction</p>
     * Get a membership transaction
     */
    getMembershipTransactionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipTransactionId === null || requestParameters.membershipTransactionId === undefined) {
                throw new runtime.RequiredError('membershipTransactionId', 'Required parameter requestParameters.membershipTransactionId was null or undefined when calling getMembershipTransaction.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getMembershipTransaction.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getMembershipTransaction.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getMembershipTransaction.');
            }
            const queryParameters = {};
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipTransactions/{membershipTransactionId}`.replace(`{${"membershipTransactionId"}}`, encodeURIComponent(String(requestParameters.membershipTransactionId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipTransactionFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve membership transactions. <p><strong>OperationId:</strong>getMembershipTransaction</p>
     * Get a membership transaction
     */
    getMembershipTransaction(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipTransactionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves the validated rule used to generate award points, the type of points, number of points, cost per point, rule code for the award points, billing group the points belong. <p><strong>OperationId:</strong>getMembershipTransactionAwardPoints</p>
     * Fetch the Award Points Accrued for the current points transaction.
     */
    getMembershipTransactionAwardPointsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipTransactionId === null || requestParameters.membershipTransactionId === undefined) {
                throw new runtime.RequiredError('membershipTransactionId', 'Required parameter requestParameters.membershipTransactionId was null or undefined when calling getMembershipTransactionAwardPoints.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getMembershipTransactionAwardPoints.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getMembershipTransactionAwardPoints.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getMembershipTransactionAwardPoints.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipTransaction/{membershipTransactionId}/awardPoints`.replace(`{${"membershipTransactionId"}}`, encodeURIComponent(String(requestParameters.membershipTransactionId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CalculatedPointsFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves the validated rule used to generate award points, the type of points, number of points, cost per point, rule code for the award points, billing group the points belong. <p><strong>OperationId:</strong>getMembershipTransactionAwardPoints</p>
     * Fetch the Award Points Accrued for the current points transaction.
     */
    getMembershipTransactionAwardPoints(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipTransactionAwardPointsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get membership transaction exceptions on a profile. <p><strong>OperationId:</strong>getMembershipTransactionExceptions</p>
     * Get membership transaction exception details
     */
    getMembershipTransactionExceptionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
                throw new runtime.RequiredError('profileId', 'Required parameter requestParameters.profileId was null or undefined when calling getMembershipTransactionExceptions.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getMembershipTransactionExceptions.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getMembershipTransactionExceptions.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getMembershipTransactionExceptions.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.end !== undefined) {
                queryParameters['end'] = requestParameters.end.toISOString().substring(0, 10);
            }
            if (requestParameters.start !== undefined) {
                queryParameters['start'] = requestParameters.start.toISOString().substring(0, 10);
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.membershipType !== undefined) {
                queryParameters['membershipType'] = requestParameters.membershipType;
            }
            if (requestParameters.membershipLevel !== undefined) {
                queryParameters['membershipLevel'] = requestParameters.membershipLevel;
            }
            if (requestParameters.membershipCardNo !== undefined) {
                queryParameters['membershipCardNo'] = requestParameters.membershipCardNo;
            }
            if (requestParameters.includeEPE !== undefined) {
                queryParameters['includeEPE'] = requestParameters.includeEPE;
            }
            if (requestParameters.exceptionType !== undefined) {
                queryParameters['exceptionType'] = requestParameters.exceptionType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/profiles/{profileId}/membershipTransactionExceptions`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipTransactionExceptionsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get membership transaction exceptions on a profile. <p><strong>OperationId:</strong>getMembershipTransactionExceptions</p>
     * Get membership transaction exception details
     */
    getMembershipTransactionExceptions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipTransactionExceptionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves the rule used to generate points and the reason the points were not awarded (validation failure, for e.g.\'Membership level requirements not met\'). <p><strong>OperationId:</strong>getMembershipTransactionPointsRejectionReasons</p>
     * Fetch the reason points were not awarded for a given points transaction.
     */
    getMembershipTransactionPointsRejectionReasonsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipTransactionId === null || requestParameters.membershipTransactionId === undefined) {
                throw new runtime.RequiredError('membershipTransactionId', 'Required parameter requestParameters.membershipTransactionId was null or undefined when calling getMembershipTransactionPointsRejectionReasons.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getMembershipTransactionPointsRejectionReasons.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getMembershipTransactionPointsRejectionReasons.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getMembershipTransactionPointsRejectionReasons.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipTransaction/{membershipTransactionId}/pointRejectionReasons`.replace(`{${"membershipTransactionId"}}`, encodeURIComponent(String(requestParameters.membershipTransactionId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PointsRejectionReasonsFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves the rule used to generate points and the reason the points were not awarded (validation failure, for e.g.\'Membership level requirements not met\'). <p><strong>OperationId:</strong>getMembershipTransactionPointsRejectionReasons</p>
     * Fetch the reason points were not awarded for a given points transaction.
     */
    getMembershipTransactionPointsRejectionReasons(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipTransactionPointsRejectionReasonsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves the dates of the stay, the rate code, the PMS rate amount, the central rate amount, the central currency and the market code associated with the stay. <p><strong>OperationId:</strong>getMembershipTransactionRates</p>
     * Fetch the rate details associated to current points transaction.
     */
    getMembershipTransactionRatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipTransactionId === null || requestParameters.membershipTransactionId === undefined) {
                throw new runtime.RequiredError('membershipTransactionId', 'Required parameter requestParameters.membershipTransactionId was null or undefined when calling getMembershipTransactionRates.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getMembershipTransactionRates.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getMembershipTransactionRates.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getMembershipTransactionRates.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipTransaction/{membershipTransactionId}/rates`.replace(`{${"membershipTransactionId"}}`, encodeURIComponent(String(requestParameters.membershipTransactionId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RatesFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves the dates of the stay, the rate code, the PMS rate amount, the central rate amount, the central currency and the market code associated with the stay. <p><strong>OperationId:</strong>getMembershipTransactionRates</p>
     * Fetch the rate details associated to current points transaction.
     */
    getMembershipTransactionRates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipTransactionRatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves the date the revenue was recognized, the revenue type (PMS revenue buckets are seen as revenue types in ORS), PMS revenue and central <p><strong>OperationId:</strong>getMembershipTransactionRevenue</p>
     * Fetch the revenue details for the stay associated with current point transaction.
     */
    getMembershipTransactionRevenueRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipTransactionId === null || requestParameters.membershipTransactionId === undefined) {
                throw new runtime.RequiredError('membershipTransactionId', 'Required parameter requestParameters.membershipTransactionId was null or undefined when calling getMembershipTransactionRevenue.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getMembershipTransactionRevenue.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getMembershipTransactionRevenue.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getMembershipTransactionRevenue.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipTransaction/{membershipTransactionId}/revenue`.replace(`{${"membershipTransactionId"}}`, encodeURIComponent(String(requestParameters.membershipTransactionId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RevenuesFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves the date the revenue was recognized, the revenue type (PMS revenue buckets are seen as revenue types in ORS), PMS revenue and central <p><strong>OperationId:</strong>getMembershipTransactionRevenue</p>
     * Fetch the revenue details for the stay associated with current point transaction.
     */
    getMembershipTransactionRevenue(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipTransactionRevenueRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves the validated rule used to generate tier points, the type of points, number of points, cost per point, rule code for the award points, billing group the points belong. <p><strong>OperationId:</strong>getMembershipTransactionTierPoints</p>
     * Fetch the Tier Points Accrued for the current points transaction
     */
    getMembershipTransactionTierPointsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipTransactionId === null || requestParameters.membershipTransactionId === undefined) {
                throw new runtime.RequiredError('membershipTransactionId', 'Required parameter requestParameters.membershipTransactionId was null or undefined when calling getMembershipTransactionTierPoints.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getMembershipTransactionTierPoints.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getMembershipTransactionTierPoints.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getMembershipTransactionTierPoints.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipTransaction/{membershipTransactionId}/tierPoints`.replace(`{${"membershipTransactionId"}}`, encodeURIComponent(String(requestParameters.membershipTransactionId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CalculatedPointsFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves the validated rule used to generate tier points, the type of points, number of points, cost per point, rule code for the award points, billing group the points belong. <p><strong>OperationId:</strong>getMembershipTransactionTierPoints</p>
     * Fetch the Tier Points Accrued for the current points transaction
     */
    getMembershipTransactionTierPoints(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipTransactionTierPointsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get membership transactions summary information by specifying membership ID <p><strong>OperationId:</strong>getMembershipTransactionsSummary</p>
     * Get membership transactions
     */
    getMembershipTransactionsSummaryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipId === null || requestParameters.membershipId === undefined) {
                throw new runtime.RequiredError('membershipId', 'Required parameter requestParameters.membershipId was null or undefined when calling getMembershipTransactionsSummary.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getMembershipTransactionsSummary.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getMembershipTransactionsSummary.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getMembershipTransactionsSummary.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/memberships/{membershipId}/transactions`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipTransactionsSummaryFromJSON)(jsonValue));
        });
    }
    /**
     * Get membership transactions summary information by specifying membership ID <p><strong>OperationId:</strong>getMembershipTransactionsSummary</p>
     * Get membership transactions
     */
    getMembershipTransactionsSummary(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipTransactionsSummaryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API when you have a guest profile and you want to enroll that guest profile into a membership program in an external system. <p><strong>OperationId:</strong>postEnrollment</p>
     * Create an Enrollment
     */
    postEnrollmentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling postEnrollment.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling postEnrollment.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling postEnrollment.');
            }
            if (requestParameters.enrollment === null || requestParameters.enrollment === undefined) {
                throw new runtime.RequiredError('enrollment', 'Required parameter requestParameters.enrollment was null or undefined when calling postEnrollment.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/enrollments`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.EnrollmentToJSON)(requestParameters.enrollment),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API when you have a guest profile and you want to enroll that guest profile into a membership program in an external system. <p><strong>OperationId:</strong>postEnrollment</p>
     * Create an Enrollment
     */
    postEnrollment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postEnrollmentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This will create membership claim details based on the claim number and instructions provided in the request. <p><strong>OperationId:</strong>postMembershipClaim</p>
     * Create membership Claim
     */
    postMembershipClaimRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling postMembershipClaim.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling postMembershipClaim.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling postMembershipClaim.');
            }
            if (requestParameters.membershipClaim === null || requestParameters.membershipClaim === undefined) {
                throw new runtime.RequiredError('membershipClaim', 'Required parameter requestParameters.membershipClaim was null or undefined when calling postMembershipClaim.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipClaims`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipClaimToJSON)(requestParameters.membershipClaim),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This will create membership claim details based on the claim number and instructions provided in the request. <p><strong>OperationId:</strong>postMembershipClaim</p>
     * Create membership Claim
     */
    postMembershipClaim(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postMembershipClaimRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new membership transaction . <p><strong>OperationId:</strong>postMembershipTransaction</p>
     * Post a membership transaction
     */
    postMembershipTransactionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipId === null || requestParameters.membershipId === undefined) {
                throw new runtime.RequiredError('membershipId', 'Required parameter requestParameters.membershipId was null or undefined when calling postMembershipTransaction.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling postMembershipTransaction.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling postMembershipTransaction.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling postMembershipTransaction.');
            }
            if (requestParameters.membershipTransaction === null || requestParameters.membershipTransaction === undefined) {
                throw new runtime.RequiredError('membershipTransaction', 'Required parameter requestParameters.membershipTransaction was null or undefined when calling postMembershipTransaction.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/memberships/{membershipId}/transactions`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipTransactionToJSON)(requestParameters.membershipTransaction),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new membership transaction . <p><strong>OperationId:</strong>postMembershipTransaction</p>
     * Post a membership transaction
     */
    postMembershipTransaction(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postMembershipTransactionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Redeem an award that exists on a profile. <p><strong>OperationId:</strong>redeemAward</p>
     * Redeem an award
     */
    redeemAwardRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
                throw new runtime.RequiredError('profileId', 'Required parameter requestParameters.profileId was null or undefined when calling redeemAward.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling redeemAward.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling redeemAward.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling redeemAward.');
            }
            if (requestParameters.award === null || requestParameters.award === undefined) {
                throw new runtime.RequiredError('award', 'Required parameter requestParameters.award was null or undefined when calling redeemAward.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/profiles/{profileId}/awards/redeem`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AwardToJSON)(requestParameters.award),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AwardFromJSON)(jsonValue));
        });
    }
    /**
     * Redeem an award that exists on a profile. <p><strong>OperationId:</strong>redeemAward</p>
     * Redeem an award
     */
    redeemAward(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.redeemAwardRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.ProfileMembershipApi = ProfileMembershipApi;
/**
 * @export
 */
exports.ExportMembershipAwardNameTypeEnum = {
    Primary: 'Primary',
    Alternate: 'Alternate',
    Incognito: 'Incognito',
    External: 'External',
    Phonetic: 'Phonetic'
};
/**
 * @export
 */
exports.GetAllMembershipClaimsSourceEnum = {
    Ocis: 'Ocis',
    Opms: 'Opms',
    Web: 'Web'
};
/**
 * @export
 */
exports.GetAllMembershipClaimsApprovalStatusEnum = {
    Approved: 'Approved',
    Rejected: 'Rejected',
    Pending: 'Pending'
};
/**
 * @export
 */
exports.GetAvailableAwardsBasedOnTypeAwardBasedOnEnum = {
    Rate: 'Rate',
    Product: 'Product',
    Upgrade: 'Upgrade',
    Other: 'Other',
    Ft: 'Ft'
};
/**
 * @export
 */
exports.GetAwardsToGrantAwardBasedOnEnum = {
    Rate: 'Rate',
    Product: 'Product',
    Upgrade: 'Upgrade',
    Other: 'Other',
    Ft: 'Ft'
};
/**
 * @export
 */
exports.GetEnrollmentMatchProfilesMatchedProfileTypeEnum = {
    Guest: 'Guest',
    Agent: 'Agent',
    Company: 'Company',
    Group: 'Group',
    Source: 'Source',
    Employee: 'Employee',
    Hotel: 'Hotel',
    Vendor: 'Vendor',
    Contact: 'Contact',
    Purge: 'Purge',
    BusinessHeader: 'BusinessHeader',
    BillingAccount: 'BillingAccount',
    Activity: 'Activity',
    Potential: 'Potential',
    Account: 'Account'
};
/**
 * @export
 */
exports.GetMembershipClaimFetchInstructionsEnum = {
    ClaimDetail: 'ClaimDetail',
    ClaimActivityLog: 'ClaimActivityLog'
};
/**
 * @export
 */
exports.GetMembershipClaimsSourceEnum = {
    Ocis: 'Ocis',
    Opms: 'Opms',
    Web: 'Web'
};
/**
 * @export
 */
exports.GetMembershipClaimsApprovalStatusEnum = {
    Approved: 'Approved',
    Rejected: 'Rejected',
    Pending: 'Pending'
};
/**
 * @export
 */
exports.GetMembershipDetailsModeEnum = {
    TransactionDate: 'TransactionDate',
    StayBeginDate: 'StayBeginDate',
    StayEndDate: 'StayEndDate',
    PointsCreditDate: 'PointsCreditDate'
};
