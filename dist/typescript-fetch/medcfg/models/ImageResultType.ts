/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Content Service
 * Opera Content Service offers capability to manage large content such as images and files.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * 
 * @export
 * @interface ImageResultType
 */
export interface ImageResultType {
    /**
     * Image set describing path of image.
     * @type {string}
     * @memberof ImageResultType
     */
    imageSet?: string;
    /**
     * Mime type of the Image.
     * @type {string}
     * @memberof ImageResultType
     */
    mimeType?: string;
    /**
     * Image file to upload.
     * @type {string}
     * @memberof ImageResultType
     */
    image?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ImageResultType
     */
    imageId?: UniqueIDType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ImageResultType
     */
    linkId?: UniqueIDType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ImageResultType
     */
    imageLinkId?: UniqueIDType;
    /**
     * Base64Image image content of the file.
     * @type {string}
     * @memberof ImageResultType
     */
    base64Image?: string;
}

/**
 * Check if a given object implements the ImageResultType interface.
 */
export function instanceOfImageResultType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ImageResultTypeFromJSON(json: any): ImageResultType {
    return ImageResultTypeFromJSONTyped(json, false);
}

export function ImageResultTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImageResultType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'imageSet': !exists(json, 'imageSet') ? undefined : json['imageSet'],
        'mimeType': !exists(json, 'mimeType') ? undefined : json['mimeType'],
        'image': !exists(json, 'image') ? undefined : json['image'],
        'imageId': !exists(json, 'imageId') ? undefined : UniqueIDTypeFromJSON(json['imageId']),
        'linkId': !exists(json, 'linkId') ? undefined : UniqueIDTypeFromJSON(json['linkId']),
        'imageLinkId': !exists(json, 'imageLinkId') ? undefined : UniqueIDTypeFromJSON(json['imageLinkId']),
        'base64Image': !exists(json, 'base64Image') ? undefined : json['base64Image'],
    };
}

export function ImageResultTypeToJSON(value?: ImageResultType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'imageSet': value.imageSet,
        'mimeType': value.mimeType,
        'image': value.image,
        'imageId': UniqueIDTypeToJSON(value.imageId),
        'linkId': UniqueIDTypeToJSON(value.linkId),
        'imageLinkId': UniqueIDTypeToJSON(value.imageLinkId),
        'base64Image': value.base64Image,
    };
}

