/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Content Service
 * Opera Content Service offers capability to manage large content such as images and files.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ImageCodeType } from './ImageCodeType';
import {
    ImageCodeTypeFromJSON,
    ImageCodeTypeFromJSONTyped,
    ImageCodeTypeToJSON,
} from './ImageCodeType';
import type { ImageParameterType } from './ImageParameterType';
import {
    ImageParameterTypeFromJSON,
    ImageParameterTypeFromJSONTyped,
    ImageParameterTypeToJSON,
} from './ImageParameterType';
import type { ImageStyleType } from './ImageStyleType';
import {
    ImageStyleTypeFromJSON,
    ImageStyleTypeFromJSONTyped,
    ImageStyleTypeToJSON,
} from './ImageStyleType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Image upload details
 * @export
 * @interface ImageUploadType
 */
export interface ImageUploadType {
    /**
     * 
     * @type {ImageCodeType}
     * @memberof ImageUploadType
     */
    imageCode?: ImageCodeType;
    /**
     * File extension of the Image, e.g. JPG, PNG, BMP, etc.
     * @type {string}
     * @memberof ImageUploadType
     */
    fileExtension?: string;
    /**
     * Collection of image parameters code / value pairs.
     * @type {Array<ImageParameterType>}
     * @memberof ImageUploadType
     */
    imageParameters?: Array<ImageParameterType>;
    /**
     * 
     * @type {string}
     * @memberof ImageUploadType
     */
    languageCode?: string;
    /**
     * 
     * @type {ImageStyleType}
     * @memberof ImageUploadType
     */
    imageStyle?: ImageStyleType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ImageUploadType
     */
    linkId?: UniqueIDType;
    /**
     * Description of the image.
     * @type {string}
     * @memberof ImageUploadType
     */
    description?: string;
    /**
     * Image file to upload.
     * @type {string}
     * @memberof ImageUploadType
     */
    image?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ImageUploadType
     */
    imageId?: UniqueIDType;
}

/**
 * Check if a given object implements the ImageUploadType interface.
 */
export function instanceOfImageUploadType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ImageUploadTypeFromJSON(json: any): ImageUploadType {
    return ImageUploadTypeFromJSONTyped(json, false);
}

export function ImageUploadTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImageUploadType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'imageCode': !exists(json, 'imageCode') ? undefined : ImageCodeTypeFromJSON(json['imageCode']),
        'fileExtension': !exists(json, 'fileExtension') ? undefined : json['fileExtension'],
        'imageParameters': !exists(json, 'imageParameters') ? undefined : ((json['imageParameters'] as Array<any>).map(ImageParameterTypeFromJSON)),
        'languageCode': !exists(json, 'languageCode') ? undefined : json['languageCode'],
        'imageStyle': !exists(json, 'imageStyle') ? undefined : ImageStyleTypeFromJSON(json['imageStyle']),
        'linkId': !exists(json, 'linkId') ? undefined : UniqueIDTypeFromJSON(json['linkId']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'image': !exists(json, 'image') ? undefined : json['image'],
        'imageId': !exists(json, 'imageId') ? undefined : UniqueIDTypeFromJSON(json['imageId']),
    };
}

export function ImageUploadTypeToJSON(value?: ImageUploadType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'imageCode': ImageCodeTypeToJSON(value.imageCode),
        'fileExtension': value.fileExtension,
        'imageParameters': value.imageParameters === undefined ? undefined : ((value.imageParameters as Array<any>).map(ImageParameterTypeToJSON)),
        'languageCode': value.languageCode,
        'imageStyle': ImageStyleTypeToJSON(value.imageStyle),
        'linkId': UniqueIDTypeToJSON(value.linkId),
        'description': value.description,
        'image': value.image,
        'imageId': UniqueIDTypeToJSON(value.imageId),
    };
}

