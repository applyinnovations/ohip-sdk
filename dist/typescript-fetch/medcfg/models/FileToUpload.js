"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Content Service
 * Opera Content Service offers capability to manage large content such as images and files.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileToUploadToJSON = exports.FileToUploadFromJSONTyped = exports.FileToUploadFromJSON = exports.instanceOfFileToUpload = void 0;
const runtime_1 = require("../runtime");
const InstanceLink_1 = require("./InstanceLink");
const WarningType_1 = require("./WarningType");
/**
 * Check if a given object implements the FileToUpload interface.
 */
function instanceOfFileToUpload(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfFileToUpload = instanceOfFileToUpload;
function FileToUploadFromJSON(json) {
    return FileToUploadFromJSONTyped(json, false);
}
exports.FileToUploadFromJSON = FileToUploadFromJSON;
function FileToUploadFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'fileAttachment': !(0, runtime_1.exists)(json, 'fileAttachment') ? undefined : json['fileAttachment'],
        'fileName': !(0, runtime_1.exists)(json, 'fileName') ? undefined : json['fileName'],
        'globalYN': !(0, runtime_1.exists)(json, 'globalYN') ? undefined : json['globalYN'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'linkId': !(0, runtime_1.exists)(json, 'linkId') ? undefined : json['linkId'],
        'linkType': !(0, runtime_1.exists)(json, 'linkType') ? undefined : json['linkType'],
        'links': !(0, runtime_1.exists)(json, 'links') ? undefined : (json['links'].map(InstanceLink_1.InstanceLinkFromJSON)),
        'overwriteExistingFileYN': !(0, runtime_1.exists)(json, 'overwriteExistingFileYN') ? undefined : json['overwriteExistingFileYN'],
        'userName': !(0, runtime_1.exists)(json, 'userName') ? undefined : json['userName'],
        'warnings': !(0, runtime_1.exists)(json, 'warnings') ? undefined : (json['warnings'].map(WarningType_1.WarningTypeFromJSON)),
    };
}
exports.FileToUploadFromJSONTyped = FileToUploadFromJSONTyped;
function FileToUploadToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'description': value.description,
        'fileAttachment': value.fileAttachment,
        'fileName': value.fileName,
        'globalYN': value.globalYN,
        'hotelId': value.hotelId,
        'linkId': value.linkId,
        'linkType': value.linkType,
        'links': value.links === undefined ? undefined : (value.links.map(InstanceLink_1.InstanceLinkToJSON)),
        'overwriteExistingFileYN': value.overwriteExistingFileYN,
        'userName': value.userName,
        'warnings': value.warnings === undefined ? undefined : (value.warnings.map(WarningType_1.WarningTypeToJSON)),
    };
}
exports.FileToUploadToJSON = FileToUploadToJSON;
