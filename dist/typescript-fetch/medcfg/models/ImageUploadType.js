"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Content Service
 * Opera Content Service offers capability to manage large content such as images and files.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageUploadTypeToJSON = exports.ImageUploadTypeFromJSONTyped = exports.ImageUploadTypeFromJSON = exports.instanceOfImageUploadType = void 0;
const runtime_1 = require("../runtime");
const ImageCodeType_1 = require("./ImageCodeType");
const ImageParameterType_1 = require("./ImageParameterType");
const ImageStyleType_1 = require("./ImageStyleType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the ImageUploadType interface.
 */
function instanceOfImageUploadType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfImageUploadType = instanceOfImageUploadType;
function ImageUploadTypeFromJSON(json) {
    return ImageUploadTypeFromJSONTyped(json, false);
}
exports.ImageUploadTypeFromJSON = ImageUploadTypeFromJSON;
function ImageUploadTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'fileExtension': !(0, runtime_1.exists)(json, 'fileExtension') ? undefined : json['fileExtension'],
        'image': !(0, runtime_1.exists)(json, 'image') ? undefined : json['image'],
        'imageCode': !(0, runtime_1.exists)(json, 'imageCode') ? undefined : (0, ImageCodeType_1.ImageCodeTypeFromJSON)(json['imageCode']),
        'imageId': !(0, runtime_1.exists)(json, 'imageId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['imageId']),
        'imageParameters': !(0, runtime_1.exists)(json, 'imageParameters') ? undefined : (json['imageParameters'].map(ImageParameterType_1.ImageParameterTypeFromJSON)),
        'imageStyle': !(0, runtime_1.exists)(json, 'imageStyle') ? undefined : (0, ImageStyleType_1.ImageStyleTypeFromJSON)(json['imageStyle']),
        'languageCode': !(0, runtime_1.exists)(json, 'languageCode') ? undefined : json['languageCode'],
        'linkId': !(0, runtime_1.exists)(json, 'linkId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['linkId']),
    };
}
exports.ImageUploadTypeFromJSONTyped = ImageUploadTypeFromJSONTyped;
function ImageUploadTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'description': value.description,
        'fileExtension': value.fileExtension,
        'image': value.image,
        'imageCode': (0, ImageCodeType_1.ImageCodeTypeToJSON)(value.imageCode),
        'imageId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.imageId),
        'imageParameters': value.imageParameters === undefined ? undefined : (value.imageParameters.map(ImageParameterType_1.ImageParameterTypeToJSON)),
        'imageStyle': (0, ImageStyleType_1.ImageStyleTypeToJSON)(value.imageStyle),
        'languageCode': value.languageCode,
        'linkId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.linkId),
    };
}
exports.ImageUploadTypeToJSON = ImageUploadTypeToJSON;
