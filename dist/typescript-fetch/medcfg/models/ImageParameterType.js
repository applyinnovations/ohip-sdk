"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Content Service
 * Opera Content Service offers capability to manage large content such as images and files.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageParameterTypeToJSON = exports.ImageParameterTypeFromJSONTyped = exports.ImageParameterTypeFromJSON = exports.instanceOfImageParameterType = void 0;
const runtime_1 = require("../runtime");
const ImageCodeType_1 = require("./ImageCodeType");
/**
 * Check if a given object implements the ImageParameterType interface.
 */
function instanceOfImageParameterType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfImageParameterType = instanceOfImageParameterType;
function ImageParameterTypeFromJSON(json) {
    return ImageParameterTypeFromJSONTyped(json, false);
}
exports.ImageParameterTypeFromJSON = ImageParameterTypeFromJSON;
function ImageParameterTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'imageParameterCode': !(0, runtime_1.exists)(json, 'imageParameterCode') ? undefined : (0, ImageCodeType_1.ImageCodeTypeFromJSON)(json['imageParameterCode']),
        'imageParameterValue': !(0, runtime_1.exists)(json, 'imageParameterValue') ? undefined : json['imageParameterValue'],
    };
}
exports.ImageParameterTypeFromJSONTyped = ImageParameterTypeFromJSONTyped;
function ImageParameterTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'imageParameterCode': (0, ImageCodeType_1.ImageCodeTypeToJSON)(value.imageParameterCode),
        'imageParameterValue': value.imageParameterValue,
    };
}
exports.ImageParameterTypeToJSON = ImageParameterTypeToJSON;
