/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Content Service
 * Opera Content Service offers capability to manage large content such as images and files.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CustomizedLetter,
  CustomizedLetterStatus,
  EmailFile,
  EmailFolioReportRequest,
  ExceptionDetailType,
  FolioReport,
  Image,
  RegistrationCard,
  SetCustomizedLetterRequest,
  Status,
  UploadFileAttachmentRequest,
  UploadImageRequest,
} from '../models';
import {
    CustomizedLetterFromJSON,
    CustomizedLetterToJSON,
    CustomizedLetterStatusFromJSON,
    CustomizedLetterStatusToJSON,
    EmailFileFromJSON,
    EmailFileToJSON,
    EmailFolioReportRequestFromJSON,
    EmailFolioReportRequestToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    FolioReportFromJSON,
    FolioReportToJSON,
    ImageFromJSON,
    ImageToJSON,
    RegistrationCardFromJSON,
    RegistrationCardToJSON,
    SetCustomizedLetterRequestFromJSON,
    SetCustomizedLetterRequestToJSON,
    StatusFromJSON,
    StatusToJSON,
    UploadFileAttachmentRequestFromJSON,
    UploadFileAttachmentRequestToJSON,
    UploadImageRequestFromJSON,
    UploadImageRequestToJSON,
} from '../models';

export interface EmailFolioReportOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioReportToEmail?: EmailFolioReportRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCustomizedLetterRequest {
    letterId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    letterIdContext?: string;
    letterIdtype?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetEmailFileRequest {
    emailId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFileAttachmentRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: string;
    idContext?: string;
    idType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFolioReportRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationIdContext?: string;
    reservationIdType?: string;
    folioWindowNo?: number;
    billNumber?: number;
    folioType?: string;
    folioDate?: Date;
    referenceCurrency?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetImageRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    linkId?: string;
    linkIdContext?: string;
    linkIdType?: string;
    imageCode?: GetImageImageCodeEnum;
    imageParameterCode?: Set<GetImageImageParameterCodeEnum>;
    imageParameterValue?: Array<string>;
    languageCode?: string;
    imageStyle?: GetImageImageStyleEnum;
    imageId?: string;
    imageIdContext?: string;
    imageIdType?: string;
    base64?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRegistrationCardRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationIdContext?: string;
    reservationIdType?: string;
    regenerate?: boolean;
    signedOnly?: boolean;
    language?: string;
    template?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveImageRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    imageCode?: RemoveImageImageCodeEnum;
    imageSet?: string;
    imageId?: string;
    imageIdContext?: string;
    imageIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SetCustomizedLetterOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    customizedLetter?: SetCustomizedLetterRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface UploadFileAttachmentOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fileToUpload?: UploadFileAttachmentRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface UploadImageOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    imageToUpload?: UploadImageRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class OperaContentApi extends runtime.BaseAPI {

    /**
     * Use this APU to email folio report. <p><strong>OperationId:</strong>emailFolioReport</p>
     * Email folio report
     */
    async emailFolioReportRaw(requestParameters: EmailFolioReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/folioReports/email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailFolioReportRequestToJSON(requestParameters.folioReportToEmail),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this APU to email folio report. <p><strong>OperationId:</strong>emailFolioReport</p>
     * Email folio report
     */
    async emailFolioReport(requestParameters: EmailFolioReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.emailFolioReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return a customized letter based on search criteria such as letterId, letterIdContext, letterIdtype. <p><strong>OperationId:</strong>getCustomizedLetter</p>
     * Get customized letter
     */
    async getCustomizedLetterRaw(requestParameters: GetCustomizedLetterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomizedLetter>> {
        const queryParameters: any = {};

        if (requestParameters.letterIdContext !== undefined) {
            queryParameters['letterIdContext'] = requestParameters.letterIdContext;
        }

        if (requestParameters.letterIdtype !== undefined) {
            queryParameters['letterIdtype'] = requestParameters.letterIdtype;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/customizedLetter/{letterId}`.replace(`{${"letterId"}}`, encodeURIComponent(String(requestParameters.letterId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomizedLetterFromJSON(jsonValue));
    }

    /**
     * Use this API to return a customized letter based on search criteria such as letterId, letterIdContext, letterIdtype. <p><strong>OperationId:</strong>getCustomizedLetter</p>
     * Get customized letter
     */
    async getCustomizedLetter(requestParameters: GetCustomizedLetterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomizedLetter> {
        const response = await this.getCustomizedLetterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve email Blob File Stored in File Storage Schema.Its used in  Profiles to fetch Email and Open in an end user\'s mail client. <p><strong>OperationId:</strong>getEmailFile</p>
     * Get Email Blob File
     */
    async getEmailFileRaw(requestParameters: GetEmailFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailFile>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/emailFile/{emailId}`.replace(`{${"emailId"}}`, encodeURIComponent(String(requestParameters.emailId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailFileFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve email Blob File Stored in File Storage Schema.Its used in  Profiles to fetch Email and Open in an end user\'s mail client. <p><strong>OperationId:</strong>getEmailFile</p>
     * Get Email Blob File
     */
    async getEmailFile(requestParameters: GetEmailFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailFile> {
        const response = await this.getEmailFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return file attachments based on search criteria such as id, idContext, idType. <p><strong>OperationId:</strong>getFileAttachment</p>
     * Get file attachment
     */
    async getFileAttachmentRaw(requestParameters: GetFileAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.idType !== undefined) {
            queryParameters['idType'] = requestParameters.idType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fileAttachments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Use this API to return file attachments based on search criteria such as id, idContext, idType. <p><strong>OperationId:</strong>getFileAttachment</p>
     * Get file attachment
     */
    async getFileAttachment(requestParameters: GetFileAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getFileAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will get a folio report for a reservation. <p><strong>OperationId:</strong>getFolioReport</p>
     * Get folio report
     */
    async getFolioReportRaw(requestParameters: GetFolioReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolioReport>> {
        const queryParameters: any = {};

        if (requestParameters.reservationIdContext !== undefined) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }

        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        if (requestParameters.folioWindowNo !== undefined) {
            queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
        }

        if (requestParameters.billNumber !== undefined) {
            queryParameters['billNumber'] = requestParameters.billNumber;
        }

        if (requestParameters.folioType !== undefined) {
            queryParameters['folioType'] = requestParameters.folioType;
        }

        if (requestParameters.folioDate !== undefined) {
            queryParameters['folioDate'] = (requestParameters.folioDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.referenceCurrency !== undefined) {
            queryParameters['referenceCurrency'] = requestParameters.referenceCurrency;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/folioReports`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolioReportFromJSON(jsonValue));
    }

    /**
     * This API will get a folio report for a reservation. <p><strong>OperationId:</strong>getFolioReport</p>
     * Get folio report
     */
    async getFolioReport(requestParameters: GetFolioReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolioReport> {
        const response = await this.getFolioReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return an image based on search criteria such as linkId, linkIdContext, linkIdType, imageCode, imageParameterCode, imageParameterValue, languageCode, imageStyle, imageId, imageIdContext, imageIdType, base64.  <p><strong>OperationId:</strong>getImage</p>
     * Get image
     */
    async getImageRaw(requestParameters: GetImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Image>> {
        const queryParameters: any = {};

        if (requestParameters.linkId !== undefined) {
            queryParameters['linkId'] = requestParameters.linkId;
        }

        if (requestParameters.linkIdContext !== undefined) {
            queryParameters['linkIdContext'] = requestParameters.linkIdContext;
        }

        if (requestParameters.linkIdType !== undefined) {
            queryParameters['linkIdType'] = requestParameters.linkIdType;
        }

        if (requestParameters.imageCode !== undefined) {
            queryParameters['imageCode'] = requestParameters.imageCode;
        }

        if (requestParameters.imageParameterCode) {
            queryParameters['imageParameterCode'] = requestParameters.imageParameterCode;
        }

        if (requestParameters.imageParameterValue) {
            queryParameters['imageParameterValue'] = requestParameters.imageParameterValue;
        }

        if (requestParameters.languageCode !== undefined) {
            queryParameters['languageCode'] = requestParameters.languageCode;
        }

        if (requestParameters.imageStyle !== undefined) {
            queryParameters['imageStyle'] = requestParameters.imageStyle;
        }

        if (requestParameters.imageId !== undefined) {
            queryParameters['imageId'] = requestParameters.imageId;
        }

        if (requestParameters.imageIdContext !== undefined) {
            queryParameters['imageIdContext'] = requestParameters.imageIdContext;
        }

        if (requestParameters.imageIdType !== undefined) {
            queryParameters['imageIdType'] = requestParameters.imageIdType;
        }

        if (requestParameters.base64 !== undefined) {
            queryParameters['base64'] = requestParameters.base64;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/images`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageFromJSON(jsonValue));
    }

    /**
     * Use this API to return an image based on search criteria such as linkId, linkIdContext, linkIdType, imageCode, imageParameterCode, imageParameterValue, languageCode, imageStyle, imageId, imageIdContext, imageIdType, base64.  <p><strong>OperationId:</strong>getImage</p>
     * Get image
     */
    async getImage(requestParameters: GetImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Image> {
        const response = await this.getImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return a registration card for a reservation based on search criteria such as reservationId, hotelId, reservationIdContext, reservationIdType, regenerate, signedOnly, language, template.  <p><strong>OperationId:</strong>getRegistrationCard</p>
     * Get registration card
     */
    async getRegistrationCardRaw(requestParameters: GetRegistrationCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegistrationCard>> {
        const queryParameters: any = {};

        if (requestParameters.reservationIdContext !== undefined) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }

        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        if (requestParameters.regenerate !== undefined) {
            queryParameters['regenerate'] = requestParameters.regenerate;
        }

        if (requestParameters.signedOnly !== undefined) {
            queryParameters['signedOnly'] = requestParameters.signedOnly;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        if (requestParameters.template !== undefined) {
            queryParameters['template'] = requestParameters.template;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/registrationCard`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationCardFromJSON(jsonValue));
    }

    /**
     * Use this API to return a registration card for a reservation based on search criteria such as reservationId, hotelId, reservationIdContext, reservationIdType, regenerate, signedOnly, language, template.  <p><strong>OperationId:</strong>getRegistrationCard</p>
     * Get registration card
     */
    async getRegistrationCard(requestParameters: GetRegistrationCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegistrationCard> {
        const response = await this.getRegistrationCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete an image. <p><strong>OperationId:</strong>removeImage</p>
     * Use this API to Delete image
     */
    async removeImageRaw(requestParameters: RemoveImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.imageCode !== undefined) {
            queryParameters['imageCode'] = requestParameters.imageCode;
        }

        if (requestParameters.imageSet !== undefined) {
            queryParameters['imageSet'] = requestParameters.imageSet;
        }

        if (requestParameters.imageId !== undefined) {
            queryParameters['imageId'] = requestParameters.imageId;
        }

        if (requestParameters.imageIdContext !== undefined) {
            queryParameters['imageIdContext'] = requestParameters.imageIdContext;
        }

        if (requestParameters.imageIdType !== undefined) {
            queryParameters['imageIdType'] = requestParameters.imageIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/images`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete an image. <p><strong>OperationId:</strong>removeImage</p>
     * Use this API to Delete image
     */
    async removeImage(requestParameters: RemoveImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to set a customized letter for a specific reservation based on the hotelId, reservationId, customizedLetter. <p><strong>OperationId:</strong>setCustomizedLetter</p>
     * Set customized letter
     */
    async setCustomizedLetterRaw(requestParameters: SetCustomizedLetterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomizedLetterStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/customizedLetter`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetCustomizedLetterRequestToJSON(requestParameters.customizedLetter),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomizedLetterStatusFromJSON(jsonValue));
    }

    /**
     * Use this API to set a customized letter for a specific reservation based on the hotelId, reservationId, customizedLetter. <p><strong>OperationId:</strong>setCustomizedLetter</p>
     * Set customized letter
     */
    async setCustomizedLetter(requestParameters: SetCustomizedLetterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomizedLetterStatus> {
        const response = await this.setCustomizedLetterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a file attachment. <p><strong>OperationId:</strong>uploadFileAttachment</p>
     * Upload a file attachment
     */
    async uploadFileAttachmentRaw(requestParameters: UploadFileAttachmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fileAttachments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadFileAttachmentRequestToJSON(requestParameters.fileToUpload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a file attachment. <p><strong>OperationId:</strong>uploadFileAttachment</p>
     * Upload a file attachment
     */
    async uploadFileAttachment(requestParameters: UploadFileAttachmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.uploadFileAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to upload an image. <p><strong>OperationId:</strong>uploadImage</p>
     * Use this API to Upload an image
     */
    async uploadImageRaw(requestParameters: UploadImageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/images`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadImageRequestToJSON(requestParameters.imageToUpload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to upload an image. <p><strong>OperationId:</strong>uploadImage</p>
     * Use this API to Upload an image
     */
    async uploadImage(requestParameters: UploadImageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.uploadImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetImageImageCodeEnum = {
    LogoChain: 'LogoChain',
    Logo: 'Logo',
    Profile: 'Profile',
    Nationality: 'Nationality',
    User: 'User',
    ToolbarItemCode: 'ToolbarItemCode',
    Chain: 'Chain',
    MembershipType: 'MembershipType',
    MembershipLevel: 'MembershipLevel',
    Resort: 'Resort',
    RoomTypeChain: 'RoomTypeChain',
    RoomType: 'RoomType',
    RoomNumber: 'RoomNumber',
    OooReasonChain: 'OooReasonChain',
    OooReason: 'OooReason',
    RoomMaintChain: 'RoomMaintChain',
    RoomMaintenance: 'RoomMaintenance',
    RoomMaintIssue: 'RoomMaintIssue',
    FloorPlan: 'FloorPlan',
    SiteLayout: 'SiteLayout',
    Attraction: 'Attraction',
    PropertyMap: 'PropertyMap',
    InvItemChain: 'InvItemChain',
    InvItem: 'InvItem',
    PackageChain: 'PackageChain',
    Package: 'Package',
    Pool: 'Pool',
    RoomConditionChain: 'RoomConditionChain',
    RoomCondition: 'RoomCondition',
    FunctionSpace: 'FunctionSpace',
    FunctionSetupStyle: 'FunctionSetupStyle',
    TrackItTypeChain: 'TrackItTypeChain',
    TrackItType: 'TrackItType',
    Height: 'Height',
    Width: 'Width'
} as const;
export type GetImageImageCodeEnum = typeof GetImageImageCodeEnum[keyof typeof GetImageImageCodeEnum];
/**
 * @export
 */
export const GetImageImageParameterCodeEnum = {
    LogoChain: 'LogoChain',
    Logo: 'Logo',
    Profile: 'Profile',
    Nationality: 'Nationality',
    User: 'User',
    ToolbarItemCode: 'ToolbarItemCode',
    Chain: 'Chain',
    MembershipType: 'MembershipType',
    MembershipLevel: 'MembershipLevel',
    Resort: 'Resort',
    RoomTypeChain: 'RoomTypeChain',
    RoomType: 'RoomType',
    RoomNumber: 'RoomNumber',
    OooReasonChain: 'OooReasonChain',
    OooReason: 'OooReason',
    RoomMaintChain: 'RoomMaintChain',
    RoomMaintenance: 'RoomMaintenance',
    RoomMaintIssue: 'RoomMaintIssue',
    FloorPlan: 'FloorPlan',
    SiteLayout: 'SiteLayout',
    Attraction: 'Attraction',
    PropertyMap: 'PropertyMap',
    InvItemChain: 'InvItemChain',
    InvItem: 'InvItem',
    PackageChain: 'PackageChain',
    Package: 'Package',
    Pool: 'Pool',
    RoomConditionChain: 'RoomConditionChain',
    RoomCondition: 'RoomCondition',
    FunctionSpace: 'FunctionSpace',
    FunctionSetupStyle: 'FunctionSetupStyle',
    TrackItTypeChain: 'TrackItTypeChain',
    TrackItType: 'TrackItType',
    Height: 'Height',
    Width: 'Width'
} as const;
export type GetImageImageParameterCodeEnum = typeof GetImageImageParameterCodeEnum[keyof typeof GetImageImageParameterCodeEnum];
/**
 * @export
 */
export const GetImageImageStyleEnum = {
    Full: 'Full',
    Thumbnail: 'Thumbnail',
    Icon: 'Icon',
    Square: 'Square',
    Banner: 'Banner',
    Button: 'Button',
    Lowres: 'Lowres',
    Highres: 'Highres'
} as const;
export type GetImageImageStyleEnum = typeof GetImageImageStyleEnum[keyof typeof GetImageImageStyleEnum];
/**
 * @export
 */
export const RemoveImageImageCodeEnum = {
    LogoChain: 'LogoChain',
    Logo: 'Logo',
    Profile: 'Profile',
    Nationality: 'Nationality',
    User: 'User',
    ToolbarItemCode: 'ToolbarItemCode',
    Chain: 'Chain',
    MembershipType: 'MembershipType',
    MembershipLevel: 'MembershipLevel',
    Resort: 'Resort',
    RoomTypeChain: 'RoomTypeChain',
    RoomType: 'RoomType',
    RoomNumber: 'RoomNumber',
    OooReasonChain: 'OooReasonChain',
    OooReason: 'OooReason',
    RoomMaintChain: 'RoomMaintChain',
    RoomMaintenance: 'RoomMaintenance',
    RoomMaintIssue: 'RoomMaintIssue',
    FloorPlan: 'FloorPlan',
    SiteLayout: 'SiteLayout',
    Attraction: 'Attraction',
    PropertyMap: 'PropertyMap',
    InvItemChain: 'InvItemChain',
    InvItem: 'InvItem',
    PackageChain: 'PackageChain',
    Package: 'Package',
    Pool: 'Pool',
    RoomConditionChain: 'RoomConditionChain',
    RoomCondition: 'RoomCondition',
    FunctionSpace: 'FunctionSpace',
    FunctionSetupStyle: 'FunctionSetupStyle',
    TrackItTypeChain: 'TrackItTypeChain',
    TrackItType: 'TrackItType',
    Height: 'Height',
    Width: 'Width'
} as const;
export type RemoveImageImageCodeEnum = typeof RemoveImageImageCodeEnum[keyof typeof RemoveImageImageCodeEnum];
