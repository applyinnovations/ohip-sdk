"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Content Service
 * Opera Content Service offers capability to manage large content such as images and files.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoveImageImageCodeEnum = exports.GetImageImageStyleEnum = exports.GetImageImageParameterCodeEnum = exports.GetImageImageCodeEnum = exports.OperaContentApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class OperaContentApi extends runtime.BaseAPI {
    /**
     * Use this APU to email folio report. <p><strong>OperationId:</strong>emailFolioReport</p>
     * Email folio report
     */
    emailFolioReportRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling emailFolioReport.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling emailFolioReport.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling emailFolioReport.');
            }
            if (requestParameters.folioReportToEmail === null || requestParameters.folioReportToEmail === undefined) {
                throw new runtime.RequiredError('folioReportToEmail', 'Required parameter requestParameters.folioReportToEmail was null or undefined when calling emailFolioReport.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/folioReports/email`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FolioReportToEmailToJSON)(requestParameters.folioReportToEmail),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this APU to email folio report. <p><strong>OperationId:</strong>emailFolioReport</p>
     * Email folio report
     */
    emailFolioReport(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.emailFolioReportRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to return a customized letter based on search criteria such as letterId, letterIdContext, letterIdtype. <p><strong>OperationId:</strong>getCustomizedLetter</p>
     * Get customized letter
     */
    getCustomizedLetterRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.letterId === null || requestParameters.letterId === undefined) {
                throw new runtime.RequiredError('letterId', 'Required parameter requestParameters.letterId was null or undefined when calling getCustomizedLetter.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getCustomizedLetter.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getCustomizedLetter.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getCustomizedLetter.');
            }
            const queryParameters = {};
            if (requestParameters.letterIdContext !== undefined) {
                queryParameters['letterIdContext'] = requestParameters.letterIdContext;
            }
            if (requestParameters.letterIdtype !== undefined) {
                queryParameters['letterIdtype'] = requestParameters.letterIdtype;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/customizedLetter/{letterId}`.replace(`{${"letterId"}}`, encodeURIComponent(String(requestParameters.letterId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CustomizedLetterFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to return a customized letter based on search criteria such as letterId, letterIdContext, letterIdtype. <p><strong>OperationId:</strong>getCustomizedLetter</p>
     * Get customized letter
     */
    getCustomizedLetter(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCustomizedLetterRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to retrieve email Blob File Stored in File Storage Schema.Its used in  Profiles to fetch Email and Open in an end user\'s mail client. <p><strong>OperationId:</strong>getEmailFile</p>
     * Get Email Blob File
     */
    getEmailFileRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.emailId === null || requestParameters.emailId === undefined) {
                throw new runtime.RequiredError('emailId', 'Required parameter requestParameters.emailId was null or undefined when calling getEmailFile.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getEmailFile.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getEmailFile.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getEmailFile.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/emailFile/{emailId}`.replace(`{${"emailId"}}`, encodeURIComponent(String(requestParameters.emailId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EmailFileFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to retrieve email Blob File Stored in File Storage Schema.Its used in  Profiles to fetch Email and Open in an end user\'s mail client. <p><strong>OperationId:</strong>getEmailFile</p>
     * Get Email Blob File
     */
    getEmailFile(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getEmailFileRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to return file attachments based on search criteria such as id, idContext, idType. <p><strong>OperationId:</strong>getFileAttachment</p>
     * Get file attachment
     */
    getFileAttachmentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getFileAttachment.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getFileAttachment.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getFileAttachment.');
            }
            const queryParameters = {};
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.idType !== undefined) {
                queryParameters['idType'] = requestParameters.idType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/fileAttachments`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Use this API to return file attachments based on search criteria such as id, idContext, idType. <p><strong>OperationId:</strong>getFileAttachment</p>
     * Get file attachment
     */
    getFileAttachment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFileAttachmentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will get a folio report for a reservation. <p><strong>OperationId:</strong>getFolioReport</p>
     * Get folio report
     */
    getFolioReportRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getFolioReport.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getFolioReport.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getFolioReport.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getFolioReport.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getFolioReport.');
            }
            const queryParameters = {};
            if (requestParameters.reservationIdContext !== undefined) {
                queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
            }
            if (requestParameters.reservationIdType !== undefined) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            if (requestParameters.folioWindowNo !== undefined) {
                queryParameters['folioWindowNo'] = requestParameters.folioWindowNo;
            }
            if (requestParameters.billNumber !== undefined) {
                queryParameters['billNumber'] = requestParameters.billNumber;
            }
            if (requestParameters.folioType !== undefined) {
                queryParameters['folioType'] = requestParameters.folioType;
            }
            if (requestParameters.folioDate !== undefined) {
                queryParameters['folioDate'] = requestParameters.folioDate.toISOString().substring(0, 10);
            }
            if (requestParameters.referenceCurrency !== undefined) {
                queryParameters['referenceCurrency'] = requestParameters.referenceCurrency;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/folioReports`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolioReportFromJSON)(jsonValue));
        });
    }
    /**
     * This API will get a folio report for a reservation. <p><strong>OperationId:</strong>getFolioReport</p>
     * Get folio report
     */
    getFolioReport(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFolioReportRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to return an image based on search criteria such as linkId, linkIdContext, linkIdType, imageCode, imageParameterCode, imageParameterValue, languageCode, imageStyle, imageId, imageIdContext, imageIdType, base64.  <p><strong>OperationId:</strong>getImage</p>
     * Get image
     */
    getImageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getImage.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getImage.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getImage.');
            }
            const queryParameters = {};
            if (requestParameters.linkId !== undefined) {
                queryParameters['linkId'] = requestParameters.linkId;
            }
            if (requestParameters.linkIdContext !== undefined) {
                queryParameters['linkIdContext'] = requestParameters.linkIdContext;
            }
            if (requestParameters.linkIdType !== undefined) {
                queryParameters['linkIdType'] = requestParameters.linkIdType;
            }
            if (requestParameters.imageCode !== undefined) {
                queryParameters['imageCode'] = requestParameters.imageCode;
            }
            if (requestParameters.imageParameterCode) {
                queryParameters['imageParameterCode'] = requestParameters.imageParameterCode;
            }
            if (requestParameters.imageParameterValue) {
                queryParameters['imageParameterValue'] = requestParameters.imageParameterValue;
            }
            if (requestParameters.languageCode !== undefined) {
                queryParameters['languageCode'] = requestParameters.languageCode;
            }
            if (requestParameters.imageStyle !== undefined) {
                queryParameters['imageStyle'] = requestParameters.imageStyle;
            }
            if (requestParameters.imageId !== undefined) {
                queryParameters['imageId'] = requestParameters.imageId;
            }
            if (requestParameters.imageIdContext !== undefined) {
                queryParameters['imageIdContext'] = requestParameters.imageIdContext;
            }
            if (requestParameters.imageIdType !== undefined) {
                queryParameters['imageIdType'] = requestParameters.imageIdType;
            }
            if (requestParameters.base64 !== undefined) {
                queryParameters['base64'] = requestParameters.base64;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/images`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ImageFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to return an image based on search criteria such as linkId, linkIdContext, linkIdType, imageCode, imageParameterCode, imageParameterValue, languageCode, imageStyle, imageId, imageIdContext, imageIdType, base64.  <p><strong>OperationId:</strong>getImage</p>
     * Get image
     */
    getImage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getImageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to return a registration card for a reservation based on search criteria such as reservationId, hotelId, reservationIdContext, reservationIdType, regenerate, signedOnly, language, template.  <p><strong>OperationId:</strong>getRegistrationCard</p>
     * Get registration card
     */
    getRegistrationCardRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling getRegistrationCard.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRegistrationCard.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getRegistrationCard.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getRegistrationCard.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getRegistrationCard.');
            }
            const queryParameters = {};
            if (requestParameters.reservationIdContext !== undefined) {
                queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
            }
            if (requestParameters.reservationIdType !== undefined) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            if (requestParameters.regenerate !== undefined) {
                queryParameters['regenerate'] = requestParameters.regenerate;
            }
            if (requestParameters.signedOnly !== undefined) {
                queryParameters['signedOnly'] = requestParameters.signedOnly;
            }
            if (requestParameters.language !== undefined) {
                queryParameters['language'] = requestParameters.language;
            }
            if (requestParameters.template !== undefined) {
                queryParameters['template'] = requestParameters.template;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/registrationCard`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RegistrationCardFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to return a registration card for a reservation based on search criteria such as reservationId, hotelId, reservationIdContext, reservationIdType, regenerate, signedOnly, language, template.  <p><strong>OperationId:</strong>getRegistrationCard</p>
     * Get registration card
     */
    getRegistrationCard(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRegistrationCardRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete an image. <p><strong>OperationId:</strong>removeImage</p>
     * Use this API to Delete image
     */
    removeImageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling removeImage.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling removeImage.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling removeImage.');
            }
            const queryParameters = {};
            if (requestParameters.imageCode !== undefined) {
                queryParameters['imageCode'] = requestParameters.imageCode;
            }
            if (requestParameters.imageSet !== undefined) {
                queryParameters['imageSet'] = requestParameters.imageSet;
            }
            if (requestParameters.imageId !== undefined) {
                queryParameters['imageId'] = requestParameters.imageId;
            }
            if (requestParameters.imageIdContext !== undefined) {
                queryParameters['imageIdContext'] = requestParameters.imageIdContext;
            }
            if (requestParameters.imageIdType !== undefined) {
                queryParameters['imageIdType'] = requestParameters.imageIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/images`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete an image. <p><strong>OperationId:</strong>removeImage</p>
     * Use this API to Delete image
     */
    removeImage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeImageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to set a customized letter for a specific reservation based on the hotelId, reservationId, customizedLetter. <p><strong>OperationId:</strong>setCustomizedLetter</p>
     * Set customized letter
     */
    setCustomizedLetterRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
                throw new runtime.RequiredError('reservationId', 'Required parameter requestParameters.reservationId was null or undefined when calling setCustomizedLetter.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling setCustomizedLetter.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling setCustomizedLetter.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling setCustomizedLetter.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling setCustomizedLetter.');
            }
            if (requestParameters.customizedLetter === null || requestParameters.customizedLetter === undefined) {
                throw new runtime.RequiredError('customizedLetter', 'Required parameter requestParameters.customizedLetter was null or undefined when calling setCustomizedLetter.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/reservations/{reservationId}/customizedLetter`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CustomizedLetterToJSON)(requestParameters.customizedLetter),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CustomizedLetterStatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to set a customized letter for a specific reservation based on the hotelId, reservationId, customizedLetter. <p><strong>OperationId:</strong>setCustomizedLetter</p>
     * Set customized letter
     */
    setCustomizedLetter(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.setCustomizedLetterRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create a file attachment. <p><strong>OperationId:</strong>uploadFileAttachment</p>
     * Upload a file attachment
     */
    uploadFileAttachmentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling uploadFileAttachment.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling uploadFileAttachment.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling uploadFileAttachment.');
            }
            if (requestParameters.fileToUpload === null || requestParameters.fileToUpload === undefined) {
                throw new runtime.RequiredError('fileToUpload', 'Required parameter requestParameters.fileToUpload was null or undefined when calling uploadFileAttachment.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/fileAttachments`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FileToUploadToJSON)(requestParameters.fileToUpload),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create a file attachment. <p><strong>OperationId:</strong>uploadFileAttachment</p>
     * Upload a file attachment
     */
    uploadFileAttachment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.uploadFileAttachmentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to upload an image. <p><strong>OperationId:</strong>uploadImage</p>
     * Use this API to Upload an image
     */
    uploadImageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling uploadImage.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling uploadImage.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling uploadImage.');
            }
            if (requestParameters.imageToUpload === null || requestParameters.imageToUpload === undefined) {
                throw new runtime.RequiredError('imageToUpload', 'Required parameter requestParameters.imageToUpload was null or undefined when calling uploadImage.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/images`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ImageToUploadToJSON)(requestParameters.imageToUpload),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to upload an image. <p><strong>OperationId:</strong>uploadImage</p>
     * Use this API to Upload an image
     */
    uploadImage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.uploadImageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.OperaContentApi = OperaContentApi;
/**
 * @export
 */
exports.GetImageImageCodeEnum = {
    LogoChain: 'LogoChain',
    Logo: 'Logo',
    Profile: 'Profile',
    Nationality: 'Nationality',
    User: 'User',
    ToolbarItemCode: 'ToolbarItemCode',
    Chain: 'Chain',
    MembershipType: 'MembershipType',
    MembershipLevel: 'MembershipLevel',
    Resort: 'Resort',
    RoomTypeChain: 'RoomTypeChain',
    RoomType: 'RoomType',
    RoomNumber: 'RoomNumber',
    OooReasonChain: 'OooReasonChain',
    OooReason: 'OooReason',
    RoomMaintChain: 'RoomMaintChain',
    RoomMaintenance: 'RoomMaintenance',
    RoomMaintIssue: 'RoomMaintIssue',
    FloorPlan: 'FloorPlan',
    SiteLayout: 'SiteLayout',
    Attraction: 'Attraction',
    PropertyMap: 'PropertyMap',
    InvItemChain: 'InvItemChain',
    InvItem: 'InvItem',
    PackageChain: 'PackageChain',
    Package: 'Package',
    Pool: 'Pool',
    RoomConditionChain: 'RoomConditionChain',
    RoomCondition: 'RoomCondition',
    FunctionSpace: 'FunctionSpace',
    FunctionSetupStyle: 'FunctionSetupStyle',
    TrackItTypeChain: 'TrackItTypeChain',
    TrackItType: 'TrackItType',
    Height: 'Height',
    Width: 'Width'
};
/**
 * @export
 */
exports.GetImageImageParameterCodeEnum = {
    LogoChain: 'LogoChain',
    Logo: 'Logo',
    Profile: 'Profile',
    Nationality: 'Nationality',
    User: 'User',
    ToolbarItemCode: 'ToolbarItemCode',
    Chain: 'Chain',
    MembershipType: 'MembershipType',
    MembershipLevel: 'MembershipLevel',
    Resort: 'Resort',
    RoomTypeChain: 'RoomTypeChain',
    RoomType: 'RoomType',
    RoomNumber: 'RoomNumber',
    OooReasonChain: 'OooReasonChain',
    OooReason: 'OooReason',
    RoomMaintChain: 'RoomMaintChain',
    RoomMaintenance: 'RoomMaintenance',
    RoomMaintIssue: 'RoomMaintIssue',
    FloorPlan: 'FloorPlan',
    SiteLayout: 'SiteLayout',
    Attraction: 'Attraction',
    PropertyMap: 'PropertyMap',
    InvItemChain: 'InvItemChain',
    InvItem: 'InvItem',
    PackageChain: 'PackageChain',
    Package: 'Package',
    Pool: 'Pool',
    RoomConditionChain: 'RoomConditionChain',
    RoomCondition: 'RoomCondition',
    FunctionSpace: 'FunctionSpace',
    FunctionSetupStyle: 'FunctionSetupStyle',
    TrackItTypeChain: 'TrackItTypeChain',
    TrackItType: 'TrackItType',
    Height: 'Height',
    Width: 'Width'
};
/**
 * @export
 */
exports.GetImageImageStyleEnum = {
    Full: 'Full',
    Thumbnail: 'Thumbnail',
    Icon: 'Icon',
    Square: 'Square',
    Banner: 'Banner',
    Button: 'Button',
    Lowres: 'Lowres',
    Highres: 'Highres'
};
/**
 * @export
 */
exports.RemoveImageImageCodeEnum = {
    LogoChain: 'LogoChain',
    Logo: 'Logo',
    Profile: 'Profile',
    Nationality: 'Nationality',
    User: 'User',
    ToolbarItemCode: 'ToolbarItemCode',
    Chain: 'Chain',
    MembershipType: 'MembershipType',
    MembershipLevel: 'MembershipLevel',
    Resort: 'Resort',
    RoomTypeChain: 'RoomTypeChain',
    RoomType: 'RoomType',
    RoomNumber: 'RoomNumber',
    OooReasonChain: 'OooReasonChain',
    OooReason: 'OooReason',
    RoomMaintChain: 'RoomMaintChain',
    RoomMaintenance: 'RoomMaintenance',
    RoomMaintIssue: 'RoomMaintIssue',
    FloorPlan: 'FloorPlan',
    SiteLayout: 'SiteLayout',
    Attraction: 'Attraction',
    PropertyMap: 'PropertyMap',
    InvItemChain: 'InvItemChain',
    InvItem: 'InvItem',
    PackageChain: 'PackageChain',
    Package: 'Package',
    Pool: 'Pool',
    RoomConditionChain: 'RoomConditionChain',
    RoomCondition: 'RoomCondition',
    FunctionSpace: 'FunctionSpace',
    FunctionSetupStyle: 'FunctionSetupStyle',
    TrackItTypeChain: 'TrackItTypeChain',
    TrackItType: 'TrackItType',
    Height: 'Height',
    Width: 'Width'
};
