/**
 * OPERA Cloud Content Service
 * Opera Content Service offers capability to manage large content such as images and files.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { CustomizedLetter, CustomizedLetterStatus, EmailFile, FileToUpload, FolioReport, FolioReportToEmail, Image, ImageToUpload, RegistrationCard, Status } from '../models/index';
export interface EmailFolioReportRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioReportToEmail?: FolioReportToEmail;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCustomizedLetterRequest {
    letterId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    letterIdContext?: string;
    letterIdtype?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetEmailFileRequest {
    emailId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetFileAttachmentRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: string;
    idContext?: string;
    idType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetFolioReportRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationIdContext?: string;
    reservationIdType?: string;
    folioWindowNo?: number;
    billNumber?: number;
    folioType?: string;
    folioDate?: Date;
    referenceCurrency?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetImageRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    linkId?: string;
    linkIdContext?: string;
    linkIdType?: string;
    imageCode?: GetImageImageCodeEnum;
    imageParameterCode?: Set<GetImageImageParameterCodeEnum>;
    imageParameterValue?: Array<string>;
    languageCode?: string;
    imageStyle?: GetImageImageStyleEnum;
    imageId?: string;
    imageIdContext?: string;
    imageIdType?: string;
    base64?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRegistrationCardRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationIdContext?: string;
    reservationIdType?: string;
    regenerate?: boolean;
    signedOnly?: boolean;
    language?: string;
    template?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface RemoveImageRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    imageCode?: RemoveImageImageCodeEnum;
    imageSet?: string;
    imageId?: string;
    imageIdContext?: string;
    imageIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface SetCustomizedLetterRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    customizedLetter?: CustomizedLetter;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface UploadFileAttachmentRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fileToUpload?: FileToUpload;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface UploadImageRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    imageToUpload?: ImageToUpload;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class OperaContentApi extends runtime.BaseAPI {
    /**
     * Use this APU to email folio report. <p><strong>OperationId:</strong>emailFolioReport</p>
     * Email folio report
     */
    emailFolioReportRaw(requestParameters: EmailFolioReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this APU to email folio report. <p><strong>OperationId:</strong>emailFolioReport</p>
     * Email folio report
     */
    emailFolioReport(requestParameters: EmailFolioReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to return a customized letter based on search criteria such as letterId, letterIdContext, letterIdtype. <p><strong>OperationId:</strong>getCustomizedLetter</p>
     * Get customized letter
     */
    getCustomizedLetterRaw(requestParameters: GetCustomizedLetterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomizedLetter>>;
    /**
     * Use this API to return a customized letter based on search criteria such as letterId, letterIdContext, letterIdtype. <p><strong>OperationId:</strong>getCustomizedLetter</p>
     * Get customized letter
     */
    getCustomizedLetter(requestParameters: GetCustomizedLetterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomizedLetter>;
    /**
     * Use this API to retrieve email Blob File Stored in File Storage Schema.Its used in  Profiles to fetch Email and Open in an end user\'s mail client. <p><strong>OperationId:</strong>getEmailFile</p>
     * Get Email Blob File
     */
    getEmailFileRaw(requestParameters: GetEmailFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailFile>>;
    /**
     * Use this API to retrieve email Blob File Stored in File Storage Schema.Its used in  Profiles to fetch Email and Open in an end user\'s mail client. <p><strong>OperationId:</strong>getEmailFile</p>
     * Get Email Blob File
     */
    getEmailFile(requestParameters: GetEmailFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailFile>;
    /**
     * Use this API to return file attachments based on search criteria such as id, idContext, idType. <p><strong>OperationId:</strong>getFileAttachment</p>
     * Get file attachment
     */
    getFileAttachmentRaw(requestParameters: GetFileAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Use this API to return file attachments based on search criteria such as id, idContext, idType. <p><strong>OperationId:</strong>getFileAttachment</p>
     * Get file attachment
     */
    getFileAttachment(requestParameters: GetFileAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * This API will get a folio report for a reservation. <p><strong>OperationId:</strong>getFolioReport</p>
     * Get folio report
     */
    getFolioReportRaw(requestParameters: GetFolioReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolioReport>>;
    /**
     * This API will get a folio report for a reservation. <p><strong>OperationId:</strong>getFolioReport</p>
     * Get folio report
     */
    getFolioReport(requestParameters: GetFolioReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolioReport>;
    /**
     * Use this API to return an image based on search criteria such as linkId, linkIdContext, linkIdType, imageCode, imageParameterCode, imageParameterValue, languageCode, imageStyle, imageId, imageIdContext, imageIdType, base64.  <p><strong>OperationId:</strong>getImage</p>
     * Get image
     */
    getImageRaw(requestParameters: GetImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Image>>;
    /**
     * Use this API to return an image based on search criteria such as linkId, linkIdContext, linkIdType, imageCode, imageParameterCode, imageParameterValue, languageCode, imageStyle, imageId, imageIdContext, imageIdType, base64.  <p><strong>OperationId:</strong>getImage</p>
     * Get image
     */
    getImage(requestParameters: GetImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Image>;
    /**
     * Use this API to return a registration card for a reservation based on search criteria such as reservationId, hotelId, reservationIdContext, reservationIdType, regenerate, signedOnly, language, template.  <p><strong>OperationId:</strong>getRegistrationCard</p>
     * Get registration card
     */
    getRegistrationCardRaw(requestParameters: GetRegistrationCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegistrationCard>>;
    /**
     * Use this API to return a registration card for a reservation based on search criteria such as reservationId, hotelId, reservationIdContext, reservationIdType, regenerate, signedOnly, language, template.  <p><strong>OperationId:</strong>getRegistrationCard</p>
     * Get registration card
     */
    getRegistrationCard(requestParameters: GetRegistrationCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegistrationCard>;
    /**
     * Use this API to delete an image. <p><strong>OperationId:</strong>removeImage</p>
     * Use this API to Delete image
     */
    removeImageRaw(requestParameters: RemoveImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete an image. <p><strong>OperationId:</strong>removeImage</p>
     * Use this API to Delete image
     */
    removeImage(requestParameters: RemoveImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to set a customized letter for a specific reservation based on the hotelId, reservationId, customizedLetter. <p><strong>OperationId:</strong>setCustomizedLetter</p>
     * Set customized letter
     */
    setCustomizedLetterRaw(requestParameters: SetCustomizedLetterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomizedLetterStatus>>;
    /**
     * Use this API to set a customized letter for a specific reservation based on the hotelId, reservationId, customizedLetter. <p><strong>OperationId:</strong>setCustomizedLetter</p>
     * Set customized letter
     */
    setCustomizedLetter(requestParameters: SetCustomizedLetterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomizedLetterStatus>;
    /**
     * Use this API to create a file attachment. <p><strong>OperationId:</strong>uploadFileAttachment</p>
     * Upload a file attachment
     */
    uploadFileAttachmentRaw(requestParameters: UploadFileAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to create a file attachment. <p><strong>OperationId:</strong>uploadFileAttachment</p>
     * Upload a file attachment
     */
    uploadFileAttachment(requestParameters: UploadFileAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to upload an image. <p><strong>OperationId:</strong>uploadImage</p>
     * Use this API to Upload an image
     */
    uploadImageRaw(requestParameters: UploadImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to upload an image. <p><strong>OperationId:</strong>uploadImage</p>
     * Use this API to Upload an image
     */
    uploadImage(requestParameters: UploadImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
}
/**
 * @export
 */
export declare const GetImageImageCodeEnum: {
    readonly LogoChain: "LogoChain";
    readonly Logo: "Logo";
    readonly Profile: "Profile";
    readonly Nationality: "Nationality";
    readonly User: "User";
    readonly ToolbarItemCode: "ToolbarItemCode";
    readonly Chain: "Chain";
    readonly MembershipType: "MembershipType";
    readonly MembershipLevel: "MembershipLevel";
    readonly Resort: "Resort";
    readonly RoomTypeChain: "RoomTypeChain";
    readonly RoomType: "RoomType";
    readonly RoomNumber: "RoomNumber";
    readonly OooReasonChain: "OooReasonChain";
    readonly OooReason: "OooReason";
    readonly RoomMaintChain: "RoomMaintChain";
    readonly RoomMaintenance: "RoomMaintenance";
    readonly RoomMaintIssue: "RoomMaintIssue";
    readonly FloorPlan: "FloorPlan";
    readonly SiteLayout: "SiteLayout";
    readonly Attraction: "Attraction";
    readonly PropertyMap: "PropertyMap";
    readonly InvItemChain: "InvItemChain";
    readonly InvItem: "InvItem";
    readonly PackageChain: "PackageChain";
    readonly Package: "Package";
    readonly Pool: "Pool";
    readonly RoomConditionChain: "RoomConditionChain";
    readonly RoomCondition: "RoomCondition";
    readonly FunctionSpace: "FunctionSpace";
    readonly FunctionSetupStyle: "FunctionSetupStyle";
    readonly TrackItTypeChain: "TrackItTypeChain";
    readonly TrackItType: "TrackItType";
    readonly Height: "Height";
    readonly Width: "Width";
};
export type GetImageImageCodeEnum = typeof GetImageImageCodeEnum[keyof typeof GetImageImageCodeEnum];
/**
 * @export
 */
export declare const GetImageImageParameterCodeEnum: {
    readonly LogoChain: "LogoChain";
    readonly Logo: "Logo";
    readonly Profile: "Profile";
    readonly Nationality: "Nationality";
    readonly User: "User";
    readonly ToolbarItemCode: "ToolbarItemCode";
    readonly Chain: "Chain";
    readonly MembershipType: "MembershipType";
    readonly MembershipLevel: "MembershipLevel";
    readonly Resort: "Resort";
    readonly RoomTypeChain: "RoomTypeChain";
    readonly RoomType: "RoomType";
    readonly RoomNumber: "RoomNumber";
    readonly OooReasonChain: "OooReasonChain";
    readonly OooReason: "OooReason";
    readonly RoomMaintChain: "RoomMaintChain";
    readonly RoomMaintenance: "RoomMaintenance";
    readonly RoomMaintIssue: "RoomMaintIssue";
    readonly FloorPlan: "FloorPlan";
    readonly SiteLayout: "SiteLayout";
    readonly Attraction: "Attraction";
    readonly PropertyMap: "PropertyMap";
    readonly InvItemChain: "InvItemChain";
    readonly InvItem: "InvItem";
    readonly PackageChain: "PackageChain";
    readonly Package: "Package";
    readonly Pool: "Pool";
    readonly RoomConditionChain: "RoomConditionChain";
    readonly RoomCondition: "RoomCondition";
    readonly FunctionSpace: "FunctionSpace";
    readonly FunctionSetupStyle: "FunctionSetupStyle";
    readonly TrackItTypeChain: "TrackItTypeChain";
    readonly TrackItType: "TrackItType";
    readonly Height: "Height";
    readonly Width: "Width";
};
export type GetImageImageParameterCodeEnum = typeof GetImageImageParameterCodeEnum[keyof typeof GetImageImageParameterCodeEnum];
/**
 * @export
 */
export declare const GetImageImageStyleEnum: {
    readonly Full: "Full";
    readonly Thumbnail: "Thumbnail";
    readonly Icon: "Icon";
    readonly Square: "Square";
    readonly Banner: "Banner";
    readonly Button: "Button";
    readonly Lowres: "Lowres";
    readonly Highres: "Highres";
};
export type GetImageImageStyleEnum = typeof GetImageImageStyleEnum[keyof typeof GetImageImageStyleEnum];
/**
 * @export
 */
export declare const RemoveImageImageCodeEnum: {
    readonly LogoChain: "LogoChain";
    readonly Logo: "Logo";
    readonly Profile: "Profile";
    readonly Nationality: "Nationality";
    readonly User: "User";
    readonly ToolbarItemCode: "ToolbarItemCode";
    readonly Chain: "Chain";
    readonly MembershipType: "MembershipType";
    readonly MembershipLevel: "MembershipLevel";
    readonly Resort: "Resort";
    readonly RoomTypeChain: "RoomTypeChain";
    readonly RoomType: "RoomType";
    readonly RoomNumber: "RoomNumber";
    readonly OooReasonChain: "OooReasonChain";
    readonly OooReason: "OooReason";
    readonly RoomMaintChain: "RoomMaintChain";
    readonly RoomMaintenance: "RoomMaintenance";
    readonly RoomMaintIssue: "RoomMaintIssue";
    readonly FloorPlan: "FloorPlan";
    readonly SiteLayout: "SiteLayout";
    readonly Attraction: "Attraction";
    readonly PropertyMap: "PropertyMap";
    readonly InvItemChain: "InvItemChain";
    readonly InvItem: "InvItem";
    readonly PackageChain: "PackageChain";
    readonly Package: "Package";
    readonly Pool: "Pool";
    readonly RoomConditionChain: "RoomConditionChain";
    readonly RoomCondition: "RoomCondition";
    readonly FunctionSpace: "FunctionSpace";
    readonly FunctionSetupStyle: "FunctionSetupStyle";
    readonly TrackItTypeChain: "TrackItTypeChain";
    readonly TrackItType: "TrackItType";
    readonly Height: "Height";
    readonly Width: "Width";
};
export type RemoveImageImageCodeEnum = typeof RemoveImageImageCodeEnum[keyof typeof RemoveImageImageCodeEnum];
