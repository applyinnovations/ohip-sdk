"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Activity API
 * APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivitiesBulkUpdateTypeToJSON = exports.ActivitiesBulkUpdateTypeFromJSONTyped = exports.ActivitiesBulkUpdateTypeFromJSON = exports.instanceOfActivitiesBulkUpdateType = void 0;
const runtime_1 = require("../runtime");
const ActivityChanges_1 = require("./ActivityChanges");
const ActivityIdRecord_1 = require("./ActivityIdRecord");
/**
 * Check if a given object implements the ActivitiesBulkUpdateType interface.
 */
function instanceOfActivitiesBulkUpdateType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfActivitiesBulkUpdateType = instanceOfActivitiesBulkUpdateType;
function ActivitiesBulkUpdateTypeFromJSON(json) {
    return ActivitiesBulkUpdateTypeFromJSONTyped(json, false);
}
exports.ActivitiesBulkUpdateTypeFromJSON = ActivitiesBulkUpdateTypeFromJSON;
function ActivitiesBulkUpdateTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'activityIdList': !(0, runtime_1.exists)(json, 'activityIdList') ? undefined : (json['activityIdList'].map(ActivityIdRecord_1.ActivityIdRecordFromJSON)),
        'skipProcessing': !(0, runtime_1.exists)(json, 'skipProcessing') ? undefined : json['skipProcessing'],
        'activityRec': !(0, runtime_1.exists)(json, 'activityRec') ? undefined : (0, ActivityChanges_1.ActivityChangesFromJSON)(json['activityRec']),
    };
}
exports.ActivitiesBulkUpdateTypeFromJSONTyped = ActivitiesBulkUpdateTypeFromJSONTyped;
function ActivitiesBulkUpdateTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'activityIdList': value.activityIdList === undefined ? undefined : (value.activityIdList.map(ActivityIdRecord_1.ActivityIdRecordToJSON)),
        'skipProcessing': value.skipProcessing,
        'activityRec': (0, ActivityChanges_1.ActivityChangesToJSON)(value.activityRec),
    };
}
exports.ActivitiesBulkUpdateTypeToJSON = ActivitiesBulkUpdateTypeToJSON;
