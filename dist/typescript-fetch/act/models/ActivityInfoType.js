"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Activity API
 * APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivityInfoTypeToJSON = exports.ActivityInfoTypeFromJSONTyped = exports.ActivityInfoTypeFromJSON = exports.instanceOfActivityInfoType = void 0;
const runtime_1 = require("../runtime");
const ActivityConfigClassType_1 = require("./ActivityConfigClassType");
const ActivityInfoTypeStatus_1 = require("./ActivityInfoTypeStatus");
/**
 * Check if a given object implements the ActivityInfoType interface.
 */
function instanceOfActivityInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfActivityInfoType = instanceOfActivityInfoType;
function ActivityInfoTypeFromJSON(json) {
    return ActivityInfoTypeFromJSONTyped(json, false);
}
exports.ActivityInfoTypeFromJSON = ActivityInfoTypeFromJSON;
function ActivityInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'activityClass': !(0, runtime_1.exists)(json, 'activityClass') ? undefined : (0, ActivityConfigClassType_1.ActivityConfigClassTypeFromJSON)(json['activityClass']),
        'activityOwner': !(0, runtime_1.exists)(json, 'activityOwner') ? undefined : json['activityOwner'],
        'activityPurpose': !(0, runtime_1.exists)(json, 'activityPurpose') ? undefined : json['activityPurpose'],
        'activityResult': !(0, runtime_1.exists)(json, 'activityResult') ? undefined : json['activityResult'],
        'activityTraceCode': !(0, runtime_1.exists)(json, 'activityTraceCode') ? undefined : json['activityTraceCode'],
        'activityType': !(0, runtime_1.exists)(json, 'activityType') ? undefined : json['activityType'],
        'activityTypeDescription': !(0, runtime_1.exists)(json, 'activityTypeDescription') ? undefined : json['activityTypeDescription'],
        'createDateTime': !(0, runtime_1.exists)(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !(0, runtime_1.exists)(json, 'creatorId') ? undefined : json['creatorId'],
        'endDateTime': !(0, runtime_1.exists)(json, 'endDateTime') ? undefined : json['endDateTime'],
        'followup': !(0, runtime_1.exists)(json, 'followup') ? undefined : json['followup'],
        'followupStartDateTime': !(0, runtime_1.exists)(json, 'followupStartDateTime') ? undefined : json['followupStartDateTime'],
        'highPriority': !(0, runtime_1.exists)(json, 'highPriority') ? undefined : json['highPriority'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'lastModifierId': !(0, runtime_1.exists)(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'lastModifyDateTime': !(0, runtime_1.exists)(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'notes': !(0, runtime_1.exists)(json, 'notes') ? undefined : json['notes'],
        'overlapActivity': !(0, runtime_1.exists)(json, 'overlapActivity') ? undefined : json['overlapActivity'],
        'startDateTime': !(0, runtime_1.exists)(json, 'startDateTime') ? undefined : json['startDateTime'],
        'status': !(0, runtime_1.exists)(json, 'status') ? undefined : (0, ActivityInfoTypeStatus_1.ActivityInfoTypeStatusFromJSON)(json['status']),
    };
}
exports.ActivityInfoTypeFromJSONTyped = ActivityInfoTypeFromJSONTyped;
function ActivityInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'activityClass': (0, ActivityConfigClassType_1.ActivityConfigClassTypeToJSON)(value.activityClass),
        'activityOwner': value.activityOwner,
        'activityPurpose': value.activityPurpose,
        'activityResult': value.activityResult,
        'activityTraceCode': value.activityTraceCode,
        'activityType': value.activityType,
        'activityTypeDescription': value.activityTypeDescription,
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'endDateTime': value.endDateTime,
        'followup': value.followup,
        'followupStartDateTime': value.followupStartDateTime,
        'highPriority': value.highPriority,
        'hotelId': value.hotelId,
        'lastModifierId': value.lastModifierId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'notes': value.notes,
        'overlapActivity': value.overlapActivity,
        'startDateTime': value.startDateTime,
        'status': (0, ActivityInfoTypeStatus_1.ActivityInfoTypeStatusToJSON)(value.status),
    };
}
exports.ActivityInfoTypeToJSON = ActivityInfoTypeToJSON;
