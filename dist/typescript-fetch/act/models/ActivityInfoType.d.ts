/**
 * OPERA Cloud Activity API
 * APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { ActivityConfigClassType } from './ActivityConfigClassType';
import type { ActivityInfoTypeStatus } from './ActivityInfoTypeStatus';
/**
 * Activity related information.
 * @export
 * @interface ActivityInfoType
 */
export interface ActivityInfoType {
    /**
     * This is the Hotel Code of the Activity.
     * @type {string}
     * @memberof ActivityInfoType
     */
    hotelId?: string;
    /**
     *
     * @type {ActivityConfigClassType}
     * @memberof ActivityInfoType
     */
    activityClass?: ActivityConfigClassType;
    /**
     * Indicates the Activity Type used for the Activity.
     * @type {string}
     * @memberof ActivityInfoType
     */
    activityType?: string;
    /**
     * Indicates the description used for the Activity Type.
     * @type {string}
     * @memberof ActivityInfoType
     */
    activityTypeDescription?: string;
    /**
     * Indicates Purpose of the Activity.
     * @type {string}
     * @memberof ActivityInfoType
     */
    activityPurpose?: string;
    /**
     * Activity Trace code used for the Activity.
     * @type {string}
     * @memberof ActivityInfoType
     */
    activityTraceCode?: string;
    /**
     * Owner of Activity.
     * @type {string}
     * @memberof ActivityInfoType
     */
    activityOwner?: string;
    /**
     * Start Date time of Activity.
     * @type {string}
     * @memberof ActivityInfoType
     */
    startDateTime?: string;
    /**
     * End Date time of Activity.
     * @type {string}
     * @memberof ActivityInfoType
     */
    endDateTime?: string;
    /**
     *
     * @type {ActivityInfoTypeStatus}
     * @memberof ActivityInfoType
     */
    status?: ActivityInfoTypeStatus;
    /**
     * Indicates the outcome of a completed Activity.
     * @type {string}
     * @memberof ActivityInfoType
     */
    activityResult?: string;
    /**
     * Notes associated with an Activity.
     * @type {string}
     * @memberof ActivityInfoType
     */
    notes?: string;
    /**
     * Indicates whether Followup Activity is needed or not.
     * @type {boolean}
     * @memberof ActivityInfoType
     */
    followup?: boolean;
    /**
     * Start Date time of the Followup Activity.
     * @type {string}
     * @memberof ActivityInfoType
     */
    followupStartDateTime?: string;
    /**
     * Indicates whether Activity has a high priority.
     * @type {boolean}
     * @memberof ActivityInfoType
     */
    highPriority?: boolean;
    /**
     * Determines whether the Activity overlaps with another activity with same date and time for the same owner.
     * @type {boolean}
     * @memberof ActivityInfoType
     */
    overlapActivity?: boolean;
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof ActivityInfoType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof ActivityInfoType
     */
    creatorId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof ActivityInfoType
     */
    lastModifyDateTime?: string;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof ActivityInfoType
     */
    lastModifierId?: string;
}
/**
 * Check if a given object implements the ActivityInfoType interface.
 */
export declare function instanceOfActivityInfoType(value: object): boolean;
export declare function ActivityInfoTypeFromJSON(json: any): ActivityInfoType;
export declare function ActivityInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivityInfoType;
export declare function ActivityInfoTypeToJSON(value?: ActivityInfoType | null): any;
