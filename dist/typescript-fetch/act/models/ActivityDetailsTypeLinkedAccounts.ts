/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Activity API
 * APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActivityLinkedProfilesType } from './ActivityLinkedProfilesType';
import {
    ActivityLinkedProfilesTypeFromJSON,
    ActivityLinkedProfilesTypeFromJSONTyped,
    ActivityLinkedProfilesTypeToJSON,
} from './ActivityLinkedProfilesType';

/**
 * Provides information about the accounts linked to an activity. Please note that during a change operation this performs a full overlay if the attribute FullOverlay is set to true. In a full overlay, all the accounts that should be associated to the activity should be provided during a change operation. Any accounts not provided will be detached from this activity. By default the full overlay is considered false if this property is left blank. If values are provided for accounts, only the full overlay functionality is provided at this time.
 * @export
 * @interface ActivityDetailsTypeLinkedAccounts
 */
export interface ActivityDetailsTypeLinkedAccounts {
    /**
     * The list of accounts associated with an activity.
     * @type {Array<ActivityLinkedProfilesType>}
     * @memberof ActivityDetailsTypeLinkedAccounts
     */
    activityAccount?: Array<ActivityLinkedProfilesType>;
    /**
     * Indicates whether to perform a full overlay for the accounts.
     * @type {boolean}
     * @memberof ActivityDetailsTypeLinkedAccounts
     */
    fullOverlay?: boolean;
}

/**
 * Check if a given object implements the ActivityDetailsTypeLinkedAccounts interface.
 */
export function instanceOfActivityDetailsTypeLinkedAccounts(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ActivityDetailsTypeLinkedAccountsFromJSON(json: any): ActivityDetailsTypeLinkedAccounts {
    return ActivityDetailsTypeLinkedAccountsFromJSONTyped(json, false);
}

export function ActivityDetailsTypeLinkedAccountsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivityDetailsTypeLinkedAccounts {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'activityAccount': !exists(json, 'activityAccount') ? undefined : ((json['activityAccount'] as Array<any>).map(ActivityLinkedProfilesTypeFromJSON)),
        'fullOverlay': !exists(json, 'fullOverlay') ? undefined : json['fullOverlay'],
    };
}

export function ActivityDetailsTypeLinkedAccountsToJSON(value?: ActivityDetailsTypeLinkedAccounts | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'activityAccount': value.activityAccount === undefined ? undefined : ((value.activityAccount as Array<any>).map(ActivityLinkedProfilesTypeToJSON)),
        'fullOverlay': value.fullOverlay,
    };
}

