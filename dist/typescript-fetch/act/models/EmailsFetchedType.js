"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Activity API
 * APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailsFetchedTypeToJSON = exports.EmailsFetchedTypeFromJSONTyped = exports.EmailsFetchedTypeFromJSON = exports.instanceOfEmailsFetchedType = void 0;
const runtime_1 = require("../runtime");
const EmailInfoResponseType_1 = require("./EmailInfoResponseType");
/**
 * Check if a given object implements the EmailsFetchedType interface.
 */
function instanceOfEmailsFetchedType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfEmailsFetchedType = instanceOfEmailsFetchedType;
function EmailsFetchedTypeFromJSON(json) {
    return EmailsFetchedTypeFromJSONTyped(json, false);
}
exports.EmailsFetchedTypeFromJSON = EmailsFetchedTypeFromJSON;
function EmailsFetchedTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'count': !(0, runtime_1.exists)(json, 'count') ? undefined : json['count'],
        'fetchedSenderEmailInfo': !(0, runtime_1.exists)(json, 'fetchedSenderEmailInfo') ? undefined : (json['fetchedSenderEmailInfo'].map(EmailInfoResponseType_1.EmailInfoResponseTypeFromJSON)),
        'hasMore': !(0, runtime_1.exists)(json, 'hasMore') ? undefined : json['hasMore'],
        'limit': !(0, runtime_1.exists)(json, 'limit') ? undefined : json['limit'],
        'offset': !(0, runtime_1.exists)(json, 'offset') ? undefined : json['offset'],
        'totalPages': !(0, runtime_1.exists)(json, 'totalPages') ? undefined : json['totalPages'],
        'totalResults': !(0, runtime_1.exists)(json, 'totalResults') ? undefined : json['totalResults'],
    };
}
exports.EmailsFetchedTypeFromJSONTyped = EmailsFetchedTypeFromJSONTyped;
function EmailsFetchedTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'count': value.count,
        'fetchedSenderEmailInfo': value.fetchedSenderEmailInfo === undefined ? undefined : (value.fetchedSenderEmailInfo.map(EmailInfoResponseType_1.EmailInfoResponseTypeToJSON)),
        'hasMore': value.hasMore,
        'limit': value.limit,
        'offset': value.offset,
        'totalPages': value.totalPages,
        'totalResults': value.totalResults,
    };
}
exports.EmailsFetchedTypeToJSON = EmailsFetchedTypeToJSON;
