/**
 * OPERA Cloud Activity API
 * APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { ActivitiesBulkUpdate, ActivitiesBulkUpdateStatus, ActivitiesInfo, Activity, ActivityAttachments, ActivityLog, ActivityStatistics, EmailsDetails, LinkedActivities, PostActivitiesRequest, PostMultipleActivitiesCompletionRequest, PostSingleActivityCompletionRequest, PutActivitiesRequest, RecentlyAccessedActivities, Status } from '../models/index';
export interface DeleteActivitiesRequest {
    activityId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    activityIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteActivitiesWithOutHotelIdRequest {
    activityId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    activityIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteActivityAttachmentRequest {
    attachmentId: string;
    activityId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteActivityAttachmentWithoutHotelIdRequest {
    attachmentId: string;
    activityId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteMultipleActivitiesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    activityIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetActivitiesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    completed?: boolean;
    highPriority?: boolean;
    limit?: number;
    offset?: number;
    text?: string;
    hotelIds?: Array<string>;
    startDate?: string;
    endDate?: string;
    ownerCode?: Array<string>;
    activityClass?: GetActivitiesActivityClassEnum;
    activityType?: Array<string>;
    activityPurpose?: string;
    accountId?: string;
    contactId?: string;
    blockId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetActivitiesByMultipleHotelIdsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    completed?: boolean;
    highPriority?: boolean;
    limit?: number;
    offset?: number;
    text?: string;
    hotelIds?: Array<string>;
    startDate?: string;
    endDate?: string;
    ownerCode?: Array<string>;
    activityClass?: GetActivitiesByMultipleHotelIdsActivityClassEnum;
    activityType?: Array<string>;
    activityPurpose?: string;
    accountId?: string;
    contactId?: string;
    blockId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetActivityRequest {
    activityId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetActivityFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetActivityAttachmentsRequest {
    activityId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    attachedFileName?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetActivityLogRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    module?: GetActivityLogModuleEnum;
    moduleParamsParameterName?: Array<string>;
    moduleParamsParameterValue?: Array<string>;
    activityGroup?: string;
    activityType?: string;
    fromDate?: string;
    toDate?: string;
    searchText?: string;
    userByIdUserIds?: Array<number>;
    userForIdUserIds?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetActivityStatisticsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    reportStartDate?: string;
    activityTypeCodes?: Array<string>;
    ownerCodeList?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetActivityWithOutHotelIdRequest {
    activityId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetActivityWithOutHotelIdFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetEmailsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    code?: Array<string>;
    id?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    accountIdId?: string;
    accountIdIdExtension?: number;
    accountIdIdContext?: string;
    accountIdType?: string;
    contactIdId?: string;
    contactIdIdExtension?: number;
    contactIdIdContext?: string;
    contactIdType?: string;
    blockIdId?: string;
    blockIdIdExtension?: number;
    blockIdIdContext?: string;
    blockIdType?: string;
    emailSubject?: string;
    senderLastName?: string;
    senderFirstName?: string;
    senderEmailAddress?: string;
    startDate?: string;
    endDate?: string;
    duration?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRecentlyAccessedActivitiesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRecentlyAccessedActivitiesWithOutHotelIdRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostActivitiesOperationRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    activitiesInformation: PostActivitiesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostLinkedActivitiesRequest {
    activityId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    linkedActivities: LinkedActivities;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostMultipleActivitiesCompletionOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    activitiesToChange: PostMultipleActivitiesCompletionRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostSingleActivityCompletionOperationRequest {
    activityId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    activitiesToChange: PostSingleActivityCompletionRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutActivitiesOperationRequest {
    activityId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    activitiesToChange: PutActivitiesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutBulkActivitiesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    putBulkActivities: ActivitiesBulkUpdate;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class ActivityApi extends runtime.BaseAPI {
    /**
     * Use this API to mark an Activity as deleted.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>deleteActivities</p>
     * Delete activity in a hotel by ID
     */
    deleteActivitiesRaw(requestParameters: DeleteActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to mark an Activity as deleted.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>deleteActivities</p>
     * Delete activity in a hotel by ID
     */
    deleteActivities(requestParameters: DeleteActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to mark an Activity as deleted.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>deleteActivitiesWithOutHotelId</p>
     * Delete activity  by ID
     */
    deleteActivitiesWithOutHotelIdRaw(requestParameters: DeleteActivitiesWithOutHotelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to mark an Activity as deleted.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>deleteActivitiesWithOutHotelId</p>
     * Delete activity  by ID
     */
    deleteActivitiesWithOutHotelId(requestParameters: DeleteActivitiesWithOutHotelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to delete an attachment which exists on an activity in OPERA Cloud. <p><strong>OperationId:</strong>deleteActivityAttachment</p>
     * Delete an attachment from an Activity
     */
    deleteActivityAttachmentRaw(requestParameters: DeleteActivityAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to delete an attachment which exists on an activity in OPERA Cloud. <p><strong>OperationId:</strong>deleteActivityAttachment</p>
     * Delete an attachment from an Activity
     */
    deleteActivityAttachment(requestParameters: DeleteActivityAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to delete an attachment which exists on an activity in OPERA Cloud. <p><strong>OperationId:</strong>deleteActivityAttachmentWithoutHotelId</p>
     * Delete an attachment from an Activity
     */
    deleteActivityAttachmentWithoutHotelIdRaw(requestParameters: DeleteActivityAttachmentWithoutHotelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to delete an attachment which exists on an activity in OPERA Cloud. <p><strong>OperationId:</strong>deleteActivityAttachmentWithoutHotelId</p>
     * Delete an attachment from an Activity
     */
    deleteActivityAttachmentWithoutHotelId(requestParameters: DeleteActivityAttachmentWithoutHotelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * If you want to delete an activity, use this API.  You must know the activity ID for the request. <p><strong>OperationId:</strong>deleteMultipleActivities</p>
     * Delete activities
     */
    deleteMultipleActivitiesRaw(requestParameters: DeleteMultipleActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * If you want to delete an activity, use this API.  You must know the activity ID for the request. <p><strong>OperationId:</strong>deleteMultipleActivities</p>
     * Delete activities
     */
    deleteMultipleActivities(requestParameters: DeleteMultipleActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to retrieve multiple Activities for a hotel, you can narrow the results using different search criteria  <p><strong>OperationId:</strong>getActivities</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>
     * Get activities by hotel
     */
    getActivitiesRaw(requestParameters: GetActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivitiesInfo>>;
    /**
     * You can use this API to retrieve multiple Activities for a hotel, you can narrow the results using different search criteria  <p><strong>OperationId:</strong>getActivities</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>
     * Get activities by hotel
     */
    getActivities(requestParameters: GetActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivitiesInfo>;
    /**
     * Use this API to retrieve activities for multiple hotels.  Results can be narrowed down by your search criteria in the request message. <p><strong>OperationId:</strong>getActivitiesByMultipleHotelIds</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>
     * Get activities
     */
    getActivitiesByMultipleHotelIdsRaw(requestParameters: GetActivitiesByMultipleHotelIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivitiesInfo>>;
    /**
     * Use this API to retrieve activities for multiple hotels.  Results can be narrowed down by your search criteria in the request message. <p><strong>OperationId:</strong>getActivitiesByMultipleHotelIds</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>
     * Get activities
     */
    getActivitiesByMultipleHotelIds(requestParameters: GetActivitiesByMultipleHotelIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivitiesInfo>;
    /**
     * You can use this API to retrieve an Activity for a hotel, using the OPERA Activity ID in the request. <p><strong>OperationId:</strong>getActivity</p>
     * Get activity in a hotel by ID
     */
    getActivityRaw(requestParameters: GetActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Activity>>;
    /**
     * You can use this API to retrieve an Activity for a hotel, using the OPERA Activity ID in the request. <p><strong>OperationId:</strong>getActivity</p>
     * Get activity in a hotel by ID
     */
    getActivity(requestParameters: GetActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Activity>;
    /**
     * You can use this API when you want to view the attachments on an existing activity. <p><strong>OperationId:</strong>getActivityAttachments</p>
     * Get Activity Attachments
     */
    getActivityAttachmentsRaw(requestParameters: GetActivityAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityAttachments>>;
    /**
     * You can use this API when you want to view the attachments on an existing activity. <p><strong>OperationId:</strong>getActivityAttachments</p>
     * Get Activity Attachments
     */
    getActivityAttachments(requestParameters: GetActivityAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityAttachments>;
    /**
     * You can use this API to view the changes log for a specified Activity. <p><strong>OperationId:</strong>getActivityLog</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Get Activity Log
     */
    getActivityLogRaw(requestParameters: GetActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityLog>>;
    /**
     * You can use this API to view the changes log for a specified Activity. <p><strong>OperationId:</strong>getActivityLog</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Get Activity Log
     */
    getActivityLog(requestParameters: GetActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityLog>;
    /**
     * You can use this API to retrieve all statistics of activities. <p><strong>OperationId:</strong>getActivityStatistics</p>
     * Get Activity statistics
     */
    getActivityStatisticsRaw(requestParameters: GetActivityStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityStatistics>>;
    /**
     * You can use this API to retrieve all statistics of activities. <p><strong>OperationId:</strong>getActivityStatistics</p>
     * Get Activity statistics
     */
    getActivityStatistics(requestParameters: GetActivityStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityStatistics>;
    /**
     * You can use this API to retrieve an Activity, using the OPERA Activity ID in the request. <p><strong>OperationId:</strong>getActivityWithOutHotelId</p>
     * Get activity by ID
     */
    getActivityWithOutHotelIdRaw(requestParameters: GetActivityWithOutHotelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Activity>>;
    /**
     * You can use this API to retrieve an Activity, using the OPERA Activity ID in the request. <p><strong>OperationId:</strong>getActivityWithOutHotelId</p>
     * Get activity by ID
     */
    getActivityWithOutHotelId(requestParameters: GetActivityWithOutHotelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Activity>;
    /**
     * Use this API to retrieve emails which have been received from an external system and stored in OPERA. They are stored against accounts, contacts and blocks in OPERA. <p><strong>OperationId:</strong>getEmails</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Get Emails
     */
    getEmailsRaw(requestParameters: GetEmailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailsDetails>>;
    /**
     * Use this API to retrieve emails which have been received from an external system and stored in OPERA. They are stored against accounts, contacts and blocks in OPERA. <p><strong>OperationId:</strong>getEmails</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Get Emails
     */
    getEmails(requestParameters: GetEmailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailsDetails>;
    /**
     * This API allows you to retrieve a list of activities that have recently been accessed.   <p><strong>OperationId:</strong>getRecentlyAccessedActivities</p>
     * Get recently accessed activities
     */
    getRecentlyAccessedActivitiesRaw(requestParameters: GetRecentlyAccessedActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecentlyAccessedActivities>>;
    /**
     * This API allows you to retrieve a list of activities that have recently been accessed.   <p><strong>OperationId:</strong>getRecentlyAccessedActivities</p>
     * Get recently accessed activities
     */
    getRecentlyAccessedActivities(requestParameters: GetRecentlyAccessedActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecentlyAccessedActivities>;
    /**
     * This API allows you to retrieve a list of activities that have recently been accessed.   <p><strong>OperationId:</strong>getRecentlyAccessedActivitiesWithOutHotelId</p>
     * Get recently accessed activities
     */
    getRecentlyAccessedActivitiesWithOutHotelIdRaw(requestParameters: GetRecentlyAccessedActivitiesWithOutHotelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecentlyAccessedActivities>>;
    /**
     * This API allows you to retrieve a list of activities that have recently been accessed.   <p><strong>OperationId:</strong>getRecentlyAccessedActivitiesWithOutHotelId</p>
     * Get recently accessed activities
     */
    getRecentlyAccessedActivitiesWithOutHotelId(requestParameters: GetRecentlyAccessedActivitiesWithOutHotelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecentlyAccessedActivities>;
    /**
     * Use postActivities to create a new activity for a hotel.  You would need to know the types of Activities a hotel accepts, such as Appointments, TODO.  Use ListOfValues API\'s to find the available types at a hotel. <p><strong>OperationId:</strong>postActivities</p>
     * Create activities in a hotel
     */
    postActivitiesRaw(requestParameters: PostActivitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use postActivities to create a new activity for a hotel.  You would need to know the types of Activities a hotel accepts, such as Appointments, TODO.  Use ListOfValues API\'s to find the available types at a hotel. <p><strong>OperationId:</strong>postActivities</p>
     * Create activities in a hotel
     */
    postActivities(requestParameters: PostActivitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to invite one or multiple owners to an activity. <p><strong>OperationId:</strong>postLinkedActivities</p>
     * Create linked activities in a hotel by ID
     */
    postLinkedActivitiesRaw(requestParameters: PostLinkedActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to invite one or multiple owners to an activity. <p><strong>OperationId:</strong>postLinkedActivities</p>
     * Create linked activities in a hotel by ID
     */
    postLinkedActivities(requestParameters: PostLinkedActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to mark multiple Activities as completed in 1 request.  You must know the OPERA Activity ID\'s for this API. <p><strong>OperationId:</strong>postMultipleActivitiesCompletion</p>
     * Complete activities
     */
    postMultipleActivitiesCompletionRaw(requestParameters: PostMultipleActivitiesCompletionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to mark multiple Activities as completed in 1 request.  You must know the OPERA Activity ID\'s for this API. <p><strong>OperationId:</strong>postMultipleActivitiesCompletion</p>
     * Complete activities
     */
    postMultipleActivitiesCompletion(requestParameters: PostMultipleActivitiesCompletionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to mark one Activity as completed in 1 request.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>postSingleActivityCompletion</p>
     * Complete activity in a hotel by ID
     */
    postSingleActivityCompletionRaw(requestParameters: PostSingleActivityCompletionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to mark one Activity as completed in 1 request.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>postSingleActivityCompletion</p>
     * Complete activity in a hotel by ID
     */
    postSingleActivityCompletion(requestParameters: PostSingleActivityCompletionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this to update an existing Activity for a hotel.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>putActivities</p>
     * Update activity in a hotel by ID
     */
    putActivitiesRaw(requestParameters: PutActivitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this to update an existing Activity for a hotel.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>putActivities</p>
     * Update activity in a hotel by ID
     */
    putActivities(requestParameters: PutActivitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to bulk update activities <p><strong>OperationId:</strong>putBulkActivities</p>
     * Operation to update multiple activities
     */
    putBulkActivitiesRaw(requestParameters: PutBulkActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivitiesBulkUpdateStatus>>;
    /**
     * You can use this API to bulk update activities <p><strong>OperationId:</strong>putBulkActivities</p>
     * Operation to update multiple activities
     */
    putBulkActivities(requestParameters: PutBulkActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivitiesBulkUpdateStatus>;
}
/**
 * @export
 */
export declare const GetActivitiesActivityClassEnum: {
    readonly Appointment: "Appointment";
    readonly Todo: "Todo";
};
export type GetActivitiesActivityClassEnum = typeof GetActivitiesActivityClassEnum[keyof typeof GetActivitiesActivityClassEnum];
/**
 * @export
 */
export declare const GetActivitiesByMultipleHotelIdsActivityClassEnum: {
    readonly Appointment: "Appointment";
    readonly Todo: "Todo";
};
export type GetActivitiesByMultipleHotelIdsActivityClassEnum = typeof GetActivitiesByMultipleHotelIdsActivityClassEnum[keyof typeof GetActivitiesByMultipleHotelIdsActivityClassEnum];
/**
 * @export
 */
export declare const GetActivityFetchInstructionsEnum: {
    readonly ActivityInfo: "ActivityInfo";
    readonly Profiles: "Profiles";
    readonly Blocks: "Blocks";
    readonly Attachments: "Attachments";
    readonly LinkedActivities: "LinkedActivities";
};
export type GetActivityFetchInstructionsEnum = typeof GetActivityFetchInstructionsEnum[keyof typeof GetActivityFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetActivityLogModuleEnum: {
    readonly Reservation: "Reservation";
    readonly Contract: "Contract";
    readonly Allotment: "Allotment";
    readonly Outlookview: "Outlookview";
    readonly Profile: "Profile";
    readonly Accountreceivables: "Accountreceivables";
    readonly GdsConvRateCodes: "GdsConvRateCodes";
    readonly RateCode: "RateCode";
    readonly Billing: "Billing";
    readonly Activity: "Activity";
};
export type GetActivityLogModuleEnum = typeof GetActivityLogModuleEnum[keyof typeof GetActivityLogModuleEnum];
/**
 * @export
 */
export declare const GetActivityWithOutHotelIdFetchInstructionsEnum: {
    readonly ActivityInfo: "ActivityInfo";
    readonly Profiles: "Profiles";
    readonly Blocks: "Blocks";
    readonly Attachments: "Attachments";
    readonly LinkedActivities: "LinkedActivities";
};
export type GetActivityWithOutHotelIdFetchInstructionsEnum = typeof GetActivityWithOutHotelIdFetchInstructionsEnum[keyof typeof GetActivityWithOutHotelIdFetchInstructionsEnum];
