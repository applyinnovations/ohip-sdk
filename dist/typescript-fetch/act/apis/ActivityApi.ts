/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Activity API
 * APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActivitiesInfo,
  Activity,
  ExceptionDetailType,
  PostActivitiesRequest,
  PostMultipleActivitiesCompletionRequest,
  PostSingleActivityCompletionRequest,
  PutActivitiesRequest,
  Status,
} from '../models';
import {
    ActivitiesInfoFromJSON,
    ActivitiesInfoToJSON,
    ActivityFromJSON,
    ActivityToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    PostActivitiesRequestFromJSON,
    PostActivitiesRequestToJSON,
    PostMultipleActivitiesCompletionRequestFromJSON,
    PostMultipleActivitiesCompletionRequestToJSON,
    PostSingleActivityCompletionRequestFromJSON,
    PostSingleActivityCompletionRequestToJSON,
    PutActivitiesRequestFromJSON,
    PutActivitiesRequestToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models';

export interface DeleteActivitiesRequest {
    activityId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    activityIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteMultipleActivitiesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    activityIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetActivitiesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    completed?: boolean;
    highPriority?: boolean;
    limit?: number;
    offset?: number;
    text?: string;
    hotelIds?: Array<string>;
    startDate?: Date;
    endDate?: Date;
    ownerCode?: Array<string>;
    activityClass?: GetActivitiesActivityClassEnum;
    activityType?: Array<string>;
    activityPurpose?: string;
    accountId?: string;
    contactId?: string;
    blockId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetActivitiesByMultipleHotelIdsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    completed?: boolean;
    highPriority?: boolean;
    limit?: number;
    offset?: number;
    text?: string;
    hotelIds?: Array<string>;
    startDate?: Date;
    endDate?: Date;
    ownerCode?: Array<string>;
    activityClass?: GetActivitiesByMultipleHotelIdsActivityClassEnum;
    activityType?: Array<string>;
    activityPurpose?: string;
    accountId?: string;
    contactId?: string;
    blockId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetActivityRequest {
    activityId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetActivityFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostActivitiesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    activitiesInformation?: PostActivitiesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMultipleActivitiesCompletionOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    activitiesToChange?: PostMultipleActivitiesCompletionRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostSingleActivityCompletionOperationRequest {
    activityId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    activitiesToChange?: PostSingleActivityCompletionRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutActivitiesOperationRequest {
    activityId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    activitiesToChange?: PutActivitiesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ActivityApi extends runtime.BaseAPI {

    /**
     * Use this API to mark an Activity as deleted.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>deleteActivities</p>
     * Delete activity in a hotel by ID
     */
    async deleteActivitiesRaw(requestParameters: DeleteActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.activityIds) {
            queryParameters['activityIds'] = requestParameters.activityIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/activities/{activityId}`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to mark an Activity as deleted.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>deleteActivities</p>
     * Delete activity in a hotel by ID
     */
    async deleteActivities(requestParameters: DeleteActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * If you want to delete an activity, use this API.  You must know the activity ID for the request. <p><strong>OperationId:</strong>deleteMultipleActivities</p>
     * Delete activities
     */
    async deleteMultipleActivitiesRaw(requestParameters: DeleteMultipleActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.activityIds) {
            queryParameters['activityIds'] = requestParameters.activityIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activities`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * If you want to delete an activity, use this API.  You must know the activity ID for the request. <p><strong>OperationId:</strong>deleteMultipleActivities</p>
     * Delete activities
     */
    async deleteMultipleActivities(requestParameters: DeleteMultipleActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteMultipleActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to retrieve multiple Activities for a hotel, you can narrow the results using different search criteria  <p><strong>OperationId:</strong>getActivities</p>
     * Get activities by hotel
     */
    async getActivitiesRaw(requestParameters: GetActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivitiesInfo>> {
        const queryParameters: any = {};

        if (requestParameters.completed !== undefined) {
            queryParameters['completed'] = requestParameters.completed;
        }

        if (requestParameters.highPriority !== undefined) {
            queryParameters['highPriority'] = requestParameters.highPriority;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.text !== undefined) {
            queryParameters['text'] = requestParameters.text;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.ownerCode) {
            queryParameters['ownerCode'] = requestParameters.ownerCode;
        }

        if (requestParameters.activityClass !== undefined) {
            queryParameters['activityClass'] = requestParameters.activityClass;
        }

        if (requestParameters.activityType) {
            queryParameters['activityType'] = requestParameters.activityType;
        }

        if (requestParameters.activityPurpose !== undefined) {
            queryParameters['activityPurpose'] = requestParameters.activityPurpose;
        }

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        if (requestParameters.contactId !== undefined) {
            queryParameters['contactId'] = requestParameters.contactId;
        }

        if (requestParameters.blockId !== undefined) {
            queryParameters['blockId'] = requestParameters.blockId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/activities`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivitiesInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to retrieve multiple Activities for a hotel, you can narrow the results using different search criteria  <p><strong>OperationId:</strong>getActivities</p>
     * Get activities by hotel
     */
    async getActivities(requestParameters: GetActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivitiesInfo> {
        const response = await this.getActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve activities for multiple hotels.  Results can be narrowed down by your search criteria in the request message. <p><strong>OperationId:</strong>getActivitiesByMultipleHotelIds</p>
     * Get activities
     */
    async getActivitiesByMultipleHotelIdsRaw(requestParameters: GetActivitiesByMultipleHotelIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivitiesInfo>> {
        const queryParameters: any = {};

        if (requestParameters.completed !== undefined) {
            queryParameters['completed'] = requestParameters.completed;
        }

        if (requestParameters.highPriority !== undefined) {
            queryParameters['highPriority'] = requestParameters.highPriority;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.text !== undefined) {
            queryParameters['text'] = requestParameters.text;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.ownerCode) {
            queryParameters['ownerCode'] = requestParameters.ownerCode;
        }

        if (requestParameters.activityClass !== undefined) {
            queryParameters['activityClass'] = requestParameters.activityClass;
        }

        if (requestParameters.activityType) {
            queryParameters['activityType'] = requestParameters.activityType;
        }

        if (requestParameters.activityPurpose !== undefined) {
            queryParameters['activityPurpose'] = requestParameters.activityPurpose;
        }

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        if (requestParameters.contactId !== undefined) {
            queryParameters['contactId'] = requestParameters.contactId;
        }

        if (requestParameters.blockId !== undefined) {
            queryParameters['blockId'] = requestParameters.blockId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivitiesInfoFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve activities for multiple hotels.  Results can be narrowed down by your search criteria in the request message. <p><strong>OperationId:</strong>getActivitiesByMultipleHotelIds</p>
     * Get activities
     */
    async getActivitiesByMultipleHotelIds(requestParameters: GetActivitiesByMultipleHotelIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivitiesInfo> {
        const response = await this.getActivitiesByMultipleHotelIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to retrieve an Activity for a hotel, using the OPERA Activity ID in the request. <p><strong>OperationId:</strong>getActivity</p>
     * Get activity in a hotel by ID
     */
    async getActivityRaw(requestParameters: GetActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Activity>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/activities/{activityId}`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityFromJSON(jsonValue));
    }

    /**
     * You can use this API to retrieve an Activity for a hotel, using the OPERA Activity ID in the request. <p><strong>OperationId:</strong>getActivity</p>
     * Get activity in a hotel by ID
     */
    async getActivity(requestParameters: GetActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Activity> {
        const response = await this.getActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use postActivities to create a new activity for a hotel.  You would need to know the types of Activities a hotel accepts, such as Appointments, TODO.  Use ListOfValues API\'s to find the available types at a hotel. <p><strong>OperationId:</strong>postActivities</p>
     * Create activities in a hotel
     */
    async postActivitiesRaw(requestParameters: PostActivitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/activities`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostActivitiesRequestToJSON(requestParameters.activitiesInformation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use postActivities to create a new activity for a hotel.  You would need to know the types of Activities a hotel accepts, such as Appointments, TODO.  Use ListOfValues API\'s to find the available types at a hotel. <p><strong>OperationId:</strong>postActivities</p>
     * Create activities in a hotel
     */
    async postActivities(requestParameters: PostActivitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to mark multiple Activities as completed in 1 request.  You must know the OPERA Activity ID\'s for this API. <p><strong>OperationId:</strong>postMultipleActivitiesCompletion</p>
     * Complete activities
     */
    async postMultipleActivitiesCompletionRaw(requestParameters: PostMultipleActivitiesCompletionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activities/activitiesCompletion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostMultipleActivitiesCompletionRequestToJSON(requestParameters.activitiesToChange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to mark multiple Activities as completed in 1 request.  You must know the OPERA Activity ID\'s for this API. <p><strong>OperationId:</strong>postMultipleActivitiesCompletion</p>
     * Complete activities
     */
    async postMultipleActivitiesCompletion(requestParameters: PostMultipleActivitiesCompletionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMultipleActivitiesCompletionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to mark one Activity as completed in 1 request.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>postSingleActivityCompletion</p>
     * Complete activity in a hotel by ID
     */
    async postSingleActivityCompletionRaw(requestParameters: PostSingleActivityCompletionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/activities/{activityId}/activityCompletion`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostSingleActivityCompletionRequestToJSON(requestParameters.activitiesToChange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to mark one Activity as completed in 1 request.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>postSingleActivityCompletion</p>
     * Complete activity in a hotel by ID
     */
    async postSingleActivityCompletion(requestParameters: PostSingleActivityCompletionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postSingleActivityCompletionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this to update an existing Activity for a hotel.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>putActivities</p>
     * Update activity in a hotel by ID
     */
    async putActivitiesRaw(requestParameters: PutActivitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/activities/{activityId}`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutActivitiesRequestToJSON(requestParameters.activitiesToChange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this to update an existing Activity for a hotel.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>putActivities</p>
     * Update activity in a hotel by ID
     */
    async putActivities(requestParameters: PutActivitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetActivitiesActivityClassEnum = {
    Appointment: 'Appointment',
    Todo: 'Todo'
} as const;
export type GetActivitiesActivityClassEnum = typeof GetActivitiesActivityClassEnum[keyof typeof GetActivitiesActivityClassEnum];
/**
 * @export
 */
export const GetActivitiesByMultipleHotelIdsActivityClassEnum = {
    Appointment: 'Appointment',
    Todo: 'Todo'
} as const;
export type GetActivitiesByMultipleHotelIdsActivityClassEnum = typeof GetActivitiesByMultipleHotelIdsActivityClassEnum[keyof typeof GetActivitiesByMultipleHotelIdsActivityClassEnum];
/**
 * @export
 */
export const GetActivityFetchInstructionsEnum = {
    ActivityInfo: 'ActivityInfo',
    Profiles: 'Profiles',
    Blocks: 'Blocks',
    Attachments: 'Attachments',
    LinkedActivities: 'LinkedActivities'
} as const;
export type GetActivityFetchInstructionsEnum = typeof GetActivityFetchInstructionsEnum[keyof typeof GetActivityFetchInstructionsEnum];
