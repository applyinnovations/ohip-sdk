/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Auto attach based on membership.
 * @export
 * @interface BasedOnMembershipType
 */
export interface BasedOnMembershipType {
    /**
     * The membership level of the selected membership type.
     * @type {string}
     * @memberof BasedOnMembershipType
     */
    level?: string;
    /**
     * The membership type that will be required for the element type (one that is based on Membership condition) to auto attach to the reservation.
     * @type {string}
     * @memberof BasedOnMembershipType
     */
    membershipType?: string;
}

/**
 * Check if a given object implements the BasedOnMembershipType interface.
 */
export function instanceOfBasedOnMembershipType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BasedOnMembershipTypeFromJSON(json: any): BasedOnMembershipType {
    return BasedOnMembershipTypeFromJSONTyped(json, false);
}

export function BasedOnMembershipTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BasedOnMembershipType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'level': !exists(json, 'level') ? undefined : json['level'],
        'membershipType': !exists(json, 'membershipType') ? undefined : json['membershipType'],
    };
}

export function BasedOnMembershipTypeToJSON(value?: BasedOnMembershipType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'level': value.level,
        'membershipType': value.membershipType,
    };
}

