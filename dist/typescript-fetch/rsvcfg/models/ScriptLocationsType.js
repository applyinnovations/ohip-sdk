"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScriptLocationsTypeToJSON = exports.ScriptLocationsTypeFromJSONTyped = exports.ScriptLocationsTypeFromJSON = exports.instanceOfScriptLocationsType = void 0;
const runtime_1 = require("../runtime");
const ScriptLocationType_1 = require("./ScriptLocationType");
/**
 * Check if a given object implements the ScriptLocationsType interface.
 */
function instanceOfScriptLocationsType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfScriptLocationsType = instanceOfScriptLocationsType;
function ScriptLocationsTypeFromJSON(json) {
    return ScriptLocationsTypeFromJSONTyped(json, false);
}
exports.ScriptLocationsTypeFromJSON = ScriptLocationsTypeFromJSON;
function ScriptLocationsTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cROs': !(0, runtime_1.exists)(json, 'cROs') ? undefined : (json['cROs'].map(ScriptLocationType_1.ScriptLocationTypeFromJSON)),
        'chains': !(0, runtime_1.exists)(json, 'chains') ? undefined : (json['chains'].map(ScriptLocationType_1.ScriptLocationTypeFromJSON)),
        'hotels': !(0, runtime_1.exists)(json, 'hotels') ? undefined : (json['hotels'].map(ScriptLocationType_1.ScriptLocationTypeFromJSON)),
    };
}
exports.ScriptLocationsTypeFromJSONTyped = ScriptLocationsTypeFromJSONTyped;
function ScriptLocationsTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cROs': value.cROs === undefined ? undefined : (value.cROs.map(ScriptLocationType_1.ScriptLocationTypeToJSON)),
        'chains': value.chains === undefined ? undefined : (value.chains.map(ScriptLocationType_1.ScriptLocationTypeToJSON)),
        'hotels': value.hotels === undefined ? undefined : (value.hotels.map(ScriptLocationType_1.ScriptLocationTypeToJSON)),
    };
}
exports.ScriptLocationsTypeToJSON = ScriptLocationsTypeToJSON;
