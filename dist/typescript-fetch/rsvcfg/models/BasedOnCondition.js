"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasedOnConditionToJSON = exports.BasedOnConditionFromJSONTyped = exports.BasedOnConditionFromJSON = exports.instanceOfBasedOnCondition = void 0;
const runtime_1 = require("../runtime");
const ConditionGroupType_1 = require("./ConditionGroupType");
/**
 * Check if a given object implements the BasedOnCondition interface.
 */
function instanceOfBasedOnCondition(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfBasedOnCondition = instanceOfBasedOnCondition;
function BasedOnConditionFromJSON(json) {
    return BasedOnConditionFromJSONTyped(json, false);
}
exports.BasedOnConditionFromJSON = BasedOnConditionFromJSON;
function BasedOnConditionFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'conditions': !(0, runtime_1.exists)(json, 'conditions') ? undefined : (0, ConditionGroupType_1.ConditionGroupTypeFromJSON)(json['conditions']),
        'queryId': !(0, runtime_1.exists)(json, 'queryId') ? undefined : json['queryId'],
    };
}
exports.BasedOnConditionFromJSONTyped = BasedOnConditionFromJSONTyped;
function BasedOnConditionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'conditions': (0, ConditionGroupType_1.ConditionGroupTypeToJSON)(value.conditions),
        'queryId': value.queryId,
    };
}
exports.BasedOnConditionToJSON = BasedOnConditionToJSON;
