/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A Merge Code.
 * @export
 * @interface MergeCodeType
 */
export interface MergeCodeType {
    /**
     * Merge Code.
     * @type {string}
     * @memberof MergeCodeType
     */
    tag?: string;
    /**
     * Default value of Merge Code.
     * @type {string}
     * @memberof MergeCodeType
     */
    value?: string;
}

/**
 * Check if a given object implements the MergeCodeType interface.
 */
export function instanceOfMergeCodeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MergeCodeTypeFromJSON(json: any): MergeCodeType {
    return MergeCodeTypeFromJSONTyped(json, false);
}

export function MergeCodeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MergeCodeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'tag': !exists(json, 'tag') ? undefined : json['tag'],
        'value': !exists(json, 'value') ? undefined : json['value'],
    };
}

export function MergeCodeTypeToJSON(value?: MergeCodeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'tag': value.tag,
        'value': value.value,
    };
}

