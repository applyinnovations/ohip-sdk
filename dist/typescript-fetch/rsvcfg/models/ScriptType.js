"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScriptTypeToJSON = exports.ScriptTypeFromJSONTyped = exports.ScriptTypeFromJSON = exports.instanceOfScriptType = void 0;
const runtime_1 = require("../runtime");
const MergeCodeType_1 = require("./MergeCodeType");
const ScriptLocationsType_1 = require("./ScriptLocationsType");
const ScriptTypeType_1 = require("./ScriptTypeType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the ScriptType interface.
 */
function instanceOfScriptType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfScriptType = instanceOfScriptType;
function ScriptTypeFromJSON(json) {
    return ScriptTypeFromJSONTyped(json, false);
}
exports.ScriptTypeFromJSON = ScriptTypeFromJSON;
function ScriptTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'scriptId': !(0, runtime_1.exists)(json, 'scriptId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['scriptId']),
        'language': !(0, runtime_1.exists)(json, 'language') ? undefined : json['language'],
        'membershipType': !(0, runtime_1.exists)(json, 'membershipType') ? undefined : json['membershipType'],
        'script': !(0, runtime_1.exists)(json, 'script') ? undefined : json['script'],
        'mergeCodes': !(0, runtime_1.exists)(json, 'mergeCodes') ? undefined : (json['mergeCodes'].map(MergeCodeType_1.MergeCodeTypeFromJSON)),
        'type': !(0, runtime_1.exists)(json, 'type') ? undefined : (0, ScriptTypeType_1.ScriptTypeTypeFromJSON)(json['type']),
        'locations': !(0, runtime_1.exists)(json, 'locations') ? undefined : (0, ScriptLocationsType_1.ScriptLocationsTypeFromJSON)(json['locations']),
    };
}
exports.ScriptTypeFromJSONTyped = ScriptTypeFromJSONTyped;
function ScriptTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'scriptId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.scriptId),
        'language': value.language,
        'membershipType': value.membershipType,
        'script': value.script,
        'mergeCodes': value.mergeCodes === undefined ? undefined : (value.mergeCodes.map(MergeCodeType_1.MergeCodeTypeToJSON)),
        'type': (0, ScriptTypeType_1.ScriptTypeTypeToJSON)(value.type),
        'locations': (0, ScriptLocationsType_1.ScriptLocationsTypeToJSON)(value.locations),
    };
}
exports.ScriptTypeToJSON = ScriptTypeToJSON;
