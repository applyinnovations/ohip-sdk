/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Auto attach preference element.
 * @export
 * @interface AttachPreferenceType
 */
export interface AttachPreferenceType {
    /**
     * Preference code..
     * @type {string}
     * @memberof AttachPreferenceType
     */
    code?: string;
    /**
     * Preference group.
     * @type {string}
     * @memberof AttachPreferenceType
     */
    type?: string;
}

/**
 * Check if a given object implements the AttachPreferenceType interface.
 */
export function instanceOfAttachPreferenceType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AttachPreferenceTypeFromJSON(json: any): AttachPreferenceType {
    return AttachPreferenceTypeFromJSONTyped(json, false);
}

export function AttachPreferenceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AttachPreferenceType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function AttachPreferenceTypeToJSON(value?: AttachPreferenceType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'type': value.type,
    };
}

