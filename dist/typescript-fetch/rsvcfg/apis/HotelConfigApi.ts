/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DepositPolicyDetails,
  ExceptionDetailType,
  GuaranteeCodesDetails,
  MarketCodesDetails,
  PostGuaranteeCodeRequest,
  PostGuaranteeCodeScheduleRequest,
  PostNewPolicyScheduleRequest,
  PostTemplateMarketCodeRequest,
  PostTemplateSourceCodeRequest,
  Status,
} from '../models';
import {
    DepositPolicyDetailsFromJSON,
    DepositPolicyDetailsToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    GuaranteeCodesDetailsFromJSON,
    GuaranteeCodesDetailsToJSON,
    MarketCodesDetailsFromJSON,
    MarketCodesDetailsToJSON,
    PostGuaranteeCodeRequestFromJSON,
    PostGuaranteeCodeRequestToJSON,
    PostGuaranteeCodeScheduleRequestFromJSON,
    PostGuaranteeCodeScheduleRequestToJSON,
    PostNewPolicyScheduleRequestFromJSON,
    PostNewPolicyScheduleRequestToJSON,
    PostTemplateMarketCodeRequestFromJSON,
    PostTemplateMarketCodeRequestToJSON,
    PostTemplateSourceCodeRequestFromJSON,
    PostTemplateSourceCodeRequestToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models';

export interface GetDepositPolicyRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    hotelIds?: Array<string>;
    policyCodeListCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGuaranteeCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    hotelIds?: Array<string>;
    guaranteeCodes?: Array<string>;
    inactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMarketCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    hotelIds?: Array<string>;
    marketCodes?: Array<string>;
    marketGroupsCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostGuaranteeCodeOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guaranteeCodeCriteria?: PostGuaranteeCodeRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostGuaranteeCodeScheduleOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guaranteeCodeScheduleCriteria?: PostGuaranteeCodeScheduleRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostNewPolicyScheduleOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    policyScheduleCriteria?: PostNewPolicyScheduleRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateMarketCodeOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateMarketCodeCriteria?: PostTemplateMarketCodeRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateSourceCodeOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateSourceCodeCriteria?: PostTemplateSourceCodeRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class HotelConfigApi extends runtime.BaseAPI {

    /**
     * Use this API to get deposit policies in hotel level. <p><strong>OperationId:</strong>getDepositPolicy</p>
     * Get deposit policies in hotel level
     */
    async getDepositPolicyRaw(requestParameters: GetDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DepositPolicyDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.policyCodeListCodes) {
            queryParameters['policyCodeListCodes'] = requestParameters.policyCodeListCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/depositpolicies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DepositPolicyDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get deposit policies in hotel level. <p><strong>OperationId:</strong>getDepositPolicy</p>
     * Get deposit policies in hotel level
     */
    async getDepositPolicy(requestParameters: GetDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DepositPolicyDetails> {
        const response = await this.getDepositPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Guarantee Codes for a hotel. Guarantee codes are required to identify if the reservation is deducted (definite), not deducted (tentative) from availability, or is guaranteed.<p><strong>OperationId:</strong>getGuaranteeCodes</p>
     * Get guarantee codes
     */
    async getGuaranteeCodesRaw(requestParameters: GetGuaranteeCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuaranteeCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.guaranteeCodes) {
            queryParameters['guaranteeCodes'] = requestParameters.guaranteeCodes;
        }

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guaranteeCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuaranteeCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Guarantee Codes for a hotel. Guarantee codes are required to identify if the reservation is deducted (definite), not deducted (tentative) from availability, or is guaranteed.<p><strong>OperationId:</strong>getGuaranteeCodes</p>
     * Get guarantee codes
     */
    async getGuaranteeCodes(requestParameters: GetGuaranteeCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuaranteeCodesDetails> {
        const response = await this.getGuaranteeCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Market codes. <p><strong>OperationId:</strong>getMarketCodes</p>
     * Get Market codes
     */
    async getMarketCodesRaw(requestParameters: GetMarketCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarketCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.marketCodes) {
            queryParameters['marketCodes'] = requestParameters.marketCodes;
        }

        if (requestParameters.marketGroupsCodes) {
            queryParameters['marketGroupsCodes'] = requestParameters.marketGroupsCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/marketCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MarketCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Market codes. <p><strong>OperationId:</strong>getMarketCodes</p>
     * Get Market codes
     */
    async getMarketCodes(requestParameters: GetMarketCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarketCodesDetails> {
        const response = await this.getMarketCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Guarantee Code. <p><strong>OperationId:</strong>postGuaranteeCode</p>
     * Create Guarantee Code
     */
    async postGuaranteeCodeRaw(requestParameters: PostGuaranteeCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guaranteeCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostGuaranteeCodeRequestToJSON(requestParameters.guaranteeCodeCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Guarantee Code. <p><strong>OperationId:</strong>postGuaranteeCode</p>
     * Create Guarantee Code
     */
    async postGuaranteeCode(requestParameters: PostGuaranteeCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postGuaranteeCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create schedule for guarantee codes. <p><strong>OperationId:</strong>postGuaranteeCodeSchedule</p>
     * Create schedule for guarantee codes 
     */
    async postGuaranteeCodeScheduleRaw(requestParameters: PostGuaranteeCodeScheduleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/guaranteeCodeSchedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostGuaranteeCodeScheduleRequestToJSON(requestParameters.guaranteeCodeScheduleCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create schedule for guarantee codes. <p><strong>OperationId:</strong>postGuaranteeCodeSchedule</p>
     * Create schedule for guarantee codes 
     */
    async postGuaranteeCodeSchedule(requestParameters: PostGuaranteeCodeScheduleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postGuaranteeCodeScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create schedule for deposit or cancel policy. <p><strong>OperationId:</strong>postNewPolicySchedule</p>
     * Create a Policy Schedule
     */
    async postNewPolicyScheduleRaw(requestParameters: PostNewPolicyScheduleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/policyschedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostNewPolicyScheduleRequestToJSON(requestParameters.policyScheduleCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create schedule for deposit or cancel policy. <p><strong>OperationId:</strong>postNewPolicySchedule</p>
     * Create a Policy Schedule
     */
    async postNewPolicySchedule(requestParameters: PostNewPolicyScheduleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postNewPolicyScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is used to create a new Template Market Code. Only one template Market Code can be Use this API to created at a time. <p><strong>OperationId:</strong>postTemplateMarketCode</p>
     * Create Market Code Template
     */
    async postTemplateMarketCodeRaw(requestParameters: PostTemplateMarketCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/marketCodeTemplates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTemplateMarketCodeRequestToJSON(requestParameters.templateMarketCodeCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API is used to create a new Template Market Code. Only one template Market Code can be Use this API to created at a time. <p><strong>OperationId:</strong>postTemplateMarketCode</p>
     * Create Market Code Template
     */
    async postTemplateMarketCode(requestParameters: PostTemplateMarketCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateMarketCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new Template Source Code. Only one template Source Code can be created at a time. <p><strong>OperationId:</strong>postTemplateSourceCode</p>
     * Create a Template Source Code
     */
    async postTemplateSourceCodeRaw(requestParameters: PostTemplateSourceCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/sourceCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTemplateSourceCodeRequestToJSON(requestParameters.templateSourceCodeCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new Template Source Code. Only one template Source Code can be created at a time. <p><strong>OperationId:</strong>postTemplateSourceCode</p>
     * Create a Template Source Code
     */
    async postTemplateSourceCode(requestParameters: PostTemplateSourceCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateSourceCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
