"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemovePreCheckInRulesRuleTypeEnum = exports.GetPreCheckInRulesRuleTypeEnum = exports.GetPolicySchedulesPolicyTypeEnum = exports.HotelConfigApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class HotelConfigApi extends runtime.BaseAPI {
    /**
     * Use this API to update Cancellation policies in hotel level. <p><strong>OperationId:</strong>changeCancellationPolicy</p>
     * Change Cancellation policies in hotel level
     */
    changeCancellationPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cancelpolicycode === null || requestParameters.cancelpolicycode === undefined) {
                throw new runtime.RequiredError('cancelpolicycode', 'Required parameter requestParameters.cancelpolicycode was null or undefined when calling changeCancellationPolicy.');
            }
            if (requestParameters.cancellationPolicyToBeChanged === null || requestParameters.cancellationPolicyToBeChanged === undefined) {
                throw new runtime.RequiredError('cancellationPolicyToBeChanged', 'Required parameter requestParameters.cancellationPolicyToBeChanged was null or undefined when calling changeCancellationPolicy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cancelpolicy/{cancelpolicycode}`.replace(`{${"cancelpolicycode"}}`, encodeURIComponent(String(requestParameters.cancelpolicycode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CancellationPolicyToBeChangedToJSON)(requestParameters.cancellationPolicyToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Cancellation policies in hotel level. <p><strong>OperationId:</strong>changeCancellationPolicy</p>
     * Change Cancellation policies in hotel level
     */
    changeCancellationPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeCancellationPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update deposit policy in hotel level. <p><strong>OperationId:</strong>changeDepositPolicy</p>
     * Change deposit policy in hotel level
     */
    changeDepositPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.depositpolicycode === null || requestParameters.depositpolicycode === undefined) {
                throw new runtime.RequiredError('depositpolicycode', 'Required parameter requestParameters.depositpolicycode was null or undefined when calling changeDepositPolicy.');
            }
            if (requestParameters.depositPolicyToBeChanged === null || requestParameters.depositPolicyToBeChanged === undefined) {
                throw new runtime.RequiredError('depositPolicyToBeChanged', 'Required parameter requestParameters.depositPolicyToBeChanged was null or undefined when calling changeDepositPolicy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/depositpolicy/{depositpolicycode}`.replace(`{${"depositpolicycode"}}`, encodeURIComponent(String(requestParameters.depositpolicycode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DepositPolicyToBeChangedToJSON)(requestParameters.depositPolicyToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update deposit policy in hotel level. <p><strong>OperationId:</strong>changeDepositPolicy</p>
     * Change deposit policy in hotel level
     */
    changeDepositPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeDepositPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Guarantee Code. <p><strong>OperationId:</strong>changeGuaranteeCode</p>
     * Change Guarantee Code
     */
    changeGuaranteeCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.guaranteeCode === null || requestParameters.guaranteeCode === undefined) {
                throw new runtime.RequiredError('guaranteeCode', 'Required parameter requestParameters.guaranteeCode was null or undefined when calling changeGuaranteeCode.');
            }
            if (requestParameters.guaranteeCodeToBeChanged === null || requestParameters.guaranteeCodeToBeChanged === undefined) {
                throw new runtime.RequiredError('guaranteeCodeToBeChanged', 'Required parameter requestParameters.guaranteeCodeToBeChanged was null or undefined when calling changeGuaranteeCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/guaranteeCodes/{guaranteeCode}`.replace(`{${"guaranteeCode"}}`, encodeURIComponent(String(requestParameters.guaranteeCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GuaranteeCodeToBeChangedToJSON)(requestParameters.guaranteeCodeToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Guarantee Code. <p><strong>OperationId:</strong>changeGuaranteeCode</p>
     * Change Guarantee Code
     */
    changeGuaranteeCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeGuaranteeCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update an schedule for guarantee codes. <p><strong>OperationId:</strong>changeGuaranteeCodeSchedule</p>
     * Change an schedule for guarantee codes
     */
    changeGuaranteeCodeScheduleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.policyScheduleId === null || requestParameters.policyScheduleId === undefined) {
                throw new runtime.RequiredError('policyScheduleId', 'Required parameter requestParameters.policyScheduleId was null or undefined when calling changeGuaranteeCodeSchedule.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling changeGuaranteeCodeSchedule.');
            }
            if (requestParameters.guaranteeCodeScheduleToBeChanged === null || requestParameters.guaranteeCodeScheduleToBeChanged === undefined) {
                throw new runtime.RequiredError('guaranteeCodeScheduleToBeChanged', 'Required parameter requestParameters.guaranteeCodeScheduleToBeChanged was null or undefined when calling changeGuaranteeCodeSchedule.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/guaranteeCodeSchedules/{policyScheduleId}`.replace(`{${"policyScheduleId"}}`, encodeURIComponent(String(requestParameters.policyScheduleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GuaranteeCodeScheduleToBeChangedToJSON)(requestParameters.guaranteeCodeScheduleToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update an schedule for guarantee codes. <p><strong>OperationId:</strong>changeGuaranteeCodeSchedule</p>
     * Change an schedule for guarantee codes
     */
    changeGuaranteeCodeSchedule(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeGuaranteeCodeScheduleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to modify a Market Code . <p><strong>OperationId:</strong>changeMarketCode</p>
     * Modify a Market Code
     */
    changeMarketCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.marketcode === null || requestParameters.marketcode === undefined) {
                throw new runtime.RequiredError('marketcode', 'Required parameter requestParameters.marketcode was null or undefined when calling changeMarketCode.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling changeMarketCode.');
            }
            if (requestParameters.marketCodeToBeChanged === null || requestParameters.marketCodeToBeChanged === undefined) {
                throw new runtime.RequiredError('marketCodeToBeChanged', 'Required parameter requestParameters.marketCodeToBeChanged was null or undefined when calling changeMarketCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/marketCodes/{marketcode}`.replace(`{${"marketcode"}}`, encodeURIComponent(String(requestParameters.marketcode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MarketCodeToBeChangedToJSON)(requestParameters.marketCodeToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to modify a Market Code . <p><strong>OperationId:</strong>changeMarketCode</p>
     * Modify a Market Code
     */
    changeMarketCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeMarketCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to modify a Market Group. Only one Market Group can be modified at a time. <p><strong>OperationId:</strong>changeMarketGroup</p>
     * Change Market Group
     */
    changeMarketGroupRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.marketGroupCode === null || requestParameters.marketGroupCode === undefined) {
                throw new runtime.RequiredError('marketGroupCode', 'Required parameter requestParameters.marketGroupCode was null or undefined when calling changeMarketGroup.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling changeMarketGroup.');
            }
            if (requestParameters.marketGroupToBeChanged === null || requestParameters.marketGroupToBeChanged === undefined) {
                throw new runtime.RequiredError('marketGroupToBeChanged', 'Required parameter requestParameters.marketGroupToBeChanged was null or undefined when calling changeMarketGroup.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/marketGroups/{marketGroupCode}`.replace(`{${"marketGroupCode"}}`, encodeURIComponent(String(requestParameters.marketGroupCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MarketGroupToBeChangedToJSON)(requestParameters.marketGroupToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to modify a Market Group. Only one Market Group can be modified at a time. <p><strong>OperationId:</strong>changeMarketGroup</p>
     * Change Market Group
     */
    changeMarketGroup(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeMarketGroupRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update an schedule for deposit or cancel policy. <p><strong>OperationId:</strong>changePolicySchedule</p>
     * Change a Policy Schedule
     */
    changePolicyScheduleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.policyscheduleId === null || requestParameters.policyscheduleId === undefined) {
                throw new runtime.RequiredError('policyscheduleId', 'Required parameter requestParameters.policyscheduleId was null or undefined when calling changePolicySchedule.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling changePolicySchedule.');
            }
            if (requestParameters.policyScheduleToBeChanged === null || requestParameters.policyScheduleToBeChanged === undefined) {
                throw new runtime.RequiredError('policyScheduleToBeChanged', 'Required parameter requestParameters.policyScheduleToBeChanged was null or undefined when calling changePolicySchedule.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/policyschedules/{policyscheduleId}`.replace(`{${"policyscheduleId"}}`, encodeURIComponent(String(requestParameters.policyscheduleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PolicyScheduleToBeChangedToJSON)(requestParameters.policyScheduleToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update an schedule for deposit or cancel policy. <p><strong>OperationId:</strong>changePolicySchedule</p>
     * Change a Policy Schedule
     */
    changePolicySchedule(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changePolicyScheduleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Pre Check In rules. <p><strong>OperationId:</strong>changePreCheckInRules</p>
     * Change Pre Check In rules
     */
    changePreCheckInRulesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling changePreCheckInRules.');
            }
            if (requestParameters.preCheckInRulesToBeChanged === null || requestParameters.preCheckInRulesToBeChanged === undefined) {
                throw new runtime.RequiredError('preCheckInRulesToBeChanged', 'Required parameter requestParameters.preCheckInRulesToBeChanged was null or undefined when calling changePreCheckInRules.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/precheckinRules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PreCheckInRulesToBeChangedToJSON)(requestParameters.preCheckInRulesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Pre Check In rules. <p><strong>OperationId:</strong>changePreCheckInRules</p>
     * Change Pre Check In rules
     */
    changePreCheckInRules(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changePreCheckInRulesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Service Request Code Priorities. <p><strong>OperationId:</strong>changeServiceRequestCodePriorities</p>
     * Change Service Request Code Priorities
     */
    changeServiceRequestCodePrioritiesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.serviceRequestCode === null || requestParameters.serviceRequestCode === undefined) {
                throw new runtime.RequiredError('serviceRequestCode', 'Required parameter requestParameters.serviceRequestCode was null or undefined when calling changeServiceRequestCodePriorities.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling changeServiceRequestCodePriorities.');
            }
            if (requestParameters.serviceRequestCodePrioritiesToBeChanged === null || requestParameters.serviceRequestCodePrioritiesToBeChanged === undefined) {
                throw new runtime.RequiredError('serviceRequestCodePrioritiesToBeChanged', 'Required parameter requestParameters.serviceRequestCodePrioritiesToBeChanged was null or undefined when calling changeServiceRequestCodePriorities.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/serviceRequestCodes/{serviceRequestCode}/priorities`.replace(`{${"serviceRequestCode"}}`, encodeURIComponent(String(requestParameters.serviceRequestCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ServiceRequestCodePrioritiesToBeChangedToJSON)(requestParameters.serviceRequestCodePrioritiesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Service Request Code Priorities. <p><strong>OperationId:</strong>changeServiceRequestCodePriorities</p>
     * Change Service Request Code Priorities
     */
    changeServiceRequestCodePriorities(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeServiceRequestCodePrioritiesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update configuration service request codes. <p><strong>OperationId:</strong>changeServiceRequestCodes</p>
     * Change configuration service request codes
     */
    changeServiceRequestCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling changeServiceRequestCodes.');
            }
            if (requestParameters.serviceRequestCodesToBeChanged === null || requestParameters.serviceRequestCodesToBeChanged === undefined) {
                throw new runtime.RequiredError('serviceRequestCodesToBeChanged', 'Required parameter requestParameters.serviceRequestCodesToBeChanged was null or undefined when calling changeServiceRequestCodes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/serviceRequestCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ServiceRequestCodesToBeChangedToJSON)(requestParameters.serviceRequestCodesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update configuration service request codes. <p><strong>OperationId:</strong>changeServiceRequestCodes</p>
     * Change configuration service request codes
     */
    changeServiceRequestCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeServiceRequestCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to modify a Source Code. Only one Source Code can be modified at a time. <p><strong>OperationId:</strong>changeSourceCode</p>
     * Update a Source Code
     */
    changeSourceCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sourceCode === null || requestParameters.sourceCode === undefined) {
                throw new runtime.RequiredError('sourceCode', 'Required parameter requestParameters.sourceCode was null or undefined when calling changeSourceCode.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling changeSourceCode.');
            }
            if (requestParameters.sourceCodeToBeChanged === null || requestParameters.sourceCodeToBeChanged === undefined) {
                throw new runtime.RequiredError('sourceCodeToBeChanged', 'Required parameter requestParameters.sourceCodeToBeChanged was null or undefined when calling changeSourceCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/sourceCodes/{sourceCode}`.replace(`{${"sourceCode"}}`, encodeURIComponent(String(requestParameters.sourceCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SourceCodeToBeChangedToJSON)(requestParameters.sourceCodeToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to modify a Source Code. Only one Source Code can be modified at a time. <p><strong>OperationId:</strong>changeSourceCode</p>
     * Update a Source Code
     */
    changeSourceCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeSourceCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API is used to modify a Source Group. Only one Source Group can be modified at a time. <p><strong>OperationId:</strong>changeSourceGroup</p>
     * Change a Source Group
     */
    changeSourceGroupRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sourceGroupCode === null || requestParameters.sourceGroupCode === undefined) {
                throw new runtime.RequiredError('sourceGroupCode', 'Required parameter requestParameters.sourceGroupCode was null or undefined when calling changeSourceGroup.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling changeSourceGroup.');
            }
            if (requestParameters.sourceGroupToBeChanged === null || requestParameters.sourceGroupToBeChanged === undefined) {
                throw new runtime.RequiredError('sourceGroupToBeChanged', 'Required parameter requestParameters.sourceGroupToBeChanged was null or undefined when calling changeSourceGroup.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/sourceGroups/{sourceGroupCode}`.replace(`{${"sourceGroupCode"}}`, encodeURIComponent(String(requestParameters.sourceGroupCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SourceGroupToBeChangedToJSON)(requestParameters.sourceGroupToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API is used to modify a Source Group. Only one Source Group can be modified at a time. <p><strong>OperationId:</strong>changeSourceGroup</p>
     * Change a Source Group
     */
    changeSourceGroup(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeSourceGroupRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update template Cancellation policies. <p><strong>OperationId:</strong>changeTemplateCancellationPolicy</p>
     * Change template Cancellation policies
     */
    changeTemplateCancellationPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cancelpolicytemplate === null || requestParameters.cancelpolicytemplate === undefined) {
                throw new runtime.RequiredError('cancelpolicytemplate', 'Required parameter requestParameters.cancelpolicytemplate was null or undefined when calling changeTemplateCancellationPolicy.');
            }
            if (requestParameters.templateCancellationPolicyToBeChanged === null || requestParameters.templateCancellationPolicyToBeChanged === undefined) {
                throw new runtime.RequiredError('templateCancellationPolicyToBeChanged', 'Required parameter requestParameters.templateCancellationPolicyToBeChanged was null or undefined when calling changeTemplateCancellationPolicy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cancelpolicytemplate/{cancelpolicytemplate}`.replace(`{${"cancelpolicytemplate"}}`, encodeURIComponent(String(requestParameters.cancelpolicytemplate))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TemplateCancellationPolicyToBeChangedToJSON)(requestParameters.templateCancellationPolicyToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update template Cancellation policies. <p><strong>OperationId:</strong>changeTemplateCancellationPolicy</p>
     * Change template Cancellation policies
     */
    changeTemplateCancellationPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeTemplateCancellationPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update template deposit policy. <p><strong>OperationId:</strong>changeTemplateDepositPolicy</p>
     * Change template deposit policy
     */
    changeTemplateDepositPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.depositpolicytemplate === null || requestParameters.depositpolicytemplate === undefined) {
                throw new runtime.RequiredError('depositpolicytemplate', 'Required parameter requestParameters.depositpolicytemplate was null or undefined when calling changeTemplateDepositPolicy.');
            }
            if (requestParameters.templateDepositPolicyToBeChanged === null || requestParameters.templateDepositPolicyToBeChanged === undefined) {
                throw new runtime.RequiredError('templateDepositPolicyToBeChanged', 'Required parameter requestParameters.templateDepositPolicyToBeChanged was null or undefined when calling changeTemplateDepositPolicy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/depositpolicytemplate/{depositpolicytemplate}`.replace(`{${"depositpolicytemplate"}}`, encodeURIComponent(String(requestParameters.depositpolicytemplate))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TemplateDepositPolicyToBeChangedToJSON)(requestParameters.templateDepositPolicyToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update template deposit policy. <p><strong>OperationId:</strong>changeTemplateDepositPolicy</p>
     * Change template deposit policy
     */
    changeTemplateDepositPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeTemplateDepositPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update template Guarantee Code. <p><strong>OperationId:</strong>changeTemplateGuaranteeCode</p>
     * Change template Guarantee Code
     */
    changeTemplateGuaranteeCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.guaranteeCode === null || requestParameters.guaranteeCode === undefined) {
                throw new runtime.RequiredError('guaranteeCode', 'Required parameter requestParameters.guaranteeCode was null or undefined when calling changeTemplateGuaranteeCode.');
            }
            if (requestParameters.templateGuaranteeCodeToBeChanged === null || requestParameters.templateGuaranteeCodeToBeChanged === undefined) {
                throw new runtime.RequiredError('templateGuaranteeCodeToBeChanged', 'Required parameter requestParameters.templateGuaranteeCodeToBeChanged was null or undefined when calling changeTemplateGuaranteeCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/guaranteeCodeTemplates/{guaranteeCode}`.replace(`{${"guaranteeCode"}}`, encodeURIComponent(String(requestParameters.guaranteeCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TemplateGuaranteeCodeToBeChangedToJSON)(requestParameters.templateGuaranteeCodeToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update template Guarantee Code. <p><strong>OperationId:</strong>changeTemplateGuaranteeCode</p>
     * Change template Guarantee Code
     */
    changeTemplateGuaranteeCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeTemplateGuaranteeCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API is used to modify a template Market Code. Only one template Market Code can be modified at a time. <p><strong>OperationId:</strong>changeTemplateMarketCode</p>
     * Update a Market Code Template
     */
    changeTemplateMarketCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.marketcode === null || requestParameters.marketcode === undefined) {
                throw new runtime.RequiredError('marketcode', 'Required parameter requestParameters.marketcode was null or undefined when calling changeTemplateMarketCode.');
            }
            if (requestParameters.templateMarketCodeToBeChanged === null || requestParameters.templateMarketCodeToBeChanged === undefined) {
                throw new runtime.RequiredError('templateMarketCodeToBeChanged', 'Required parameter requestParameters.templateMarketCodeToBeChanged was null or undefined when calling changeTemplateMarketCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/marketCodeTemplates/{marketcode}`.replace(`{${"marketcode"}}`, encodeURIComponent(String(requestParameters.marketcode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TemplateMarketCodeToBeChangedToJSON)(requestParameters.templateMarketCodeToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API is used to modify a template Market Code. Only one template Market Code can be modified at a time. <p><strong>OperationId:</strong>changeTemplateMarketCode</p>
     * Update a Market Code Template
     */
    changeTemplateMarketCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeTemplateMarketCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API is used to modify a Template Market Group. Only one Template Market Group can be modified at a time. <p><strong>OperationId:</strong>changeTemplateMarketGroup</p>
     * Change Market Group Template
     */
    changeTemplateMarketGroupRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.marketGroupCode === null || requestParameters.marketGroupCode === undefined) {
                throw new runtime.RequiredError('marketGroupCode', 'Required parameter requestParameters.marketGroupCode was null or undefined when calling changeTemplateMarketGroup.');
            }
            if (requestParameters.templateMarketGroupToBeChanged === null || requestParameters.templateMarketGroupToBeChanged === undefined) {
                throw new runtime.RequiredError('templateMarketGroupToBeChanged', 'Required parameter requestParameters.templateMarketGroupToBeChanged was null or undefined when calling changeTemplateMarketGroup.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/marketGroupTemplate/{marketGroupCode}`.replace(`{${"marketGroupCode"}}`, encodeURIComponent(String(requestParameters.marketGroupCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TemplateMarketGroupToBeChangedToJSON)(requestParameters.templateMarketGroupToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API is used to modify a Template Market Group. Only one Template Market Group can be modified at a time. <p><strong>OperationId:</strong>changeTemplateMarketGroup</p>
     * Change Market Group Template
     */
    changeTemplateMarketGroup(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeTemplateMarketGroupRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to Modify a Template Source Code. Only one Template Source Code can be modified at a time. <p><strong>OperationId:</strong>changeTemplateSourceCode</p>
     * Change a Template Source Code
     */
    changeTemplateSourceCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sourceCode === null || requestParameters.sourceCode === undefined) {
                throw new runtime.RequiredError('sourceCode', 'Required parameter requestParameters.sourceCode was null or undefined when calling changeTemplateSourceCode.');
            }
            if (requestParameters.templateSourceCodeToBeChanged === null || requestParameters.templateSourceCodeToBeChanged === undefined) {
                throw new runtime.RequiredError('templateSourceCodeToBeChanged', 'Required parameter requestParameters.templateSourceCodeToBeChanged was null or undefined when calling changeTemplateSourceCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/templates/sourceCodes/{sourceCode}`.replace(`{${"sourceCode"}}`, encodeURIComponent(String(requestParameters.sourceCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TemplateSourceCodeToBeChangedToJSON)(requestParameters.templateSourceCodeToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to Modify a Template Source Code. Only one Template Source Code can be modified at a time. <p><strong>OperationId:</strong>changeTemplateSourceCode</p>
     * Change a Template Source Code
     */
    changeTemplateSourceCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeTemplateSourceCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to Modify a Template Source Group. Only one Template Source Group can be modified at a time. <p><strong>OperationId:</strong>changeTemplateSourceGroup</p>
     * Change Template Source Group
     */
    changeTemplateSourceGroupRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.templateSourceGroupToBeChanged === null || requestParameters.templateSourceGroupToBeChanged === undefined) {
                throw new runtime.RequiredError('templateSourceGroupToBeChanged', 'Required parameter requestParameters.templateSourceGroupToBeChanged was null or undefined when calling changeTemplateSourceGroup.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/templates/sourceGroups`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TemplateSourceGroupToBeChangedToJSON)(requestParameters.templateSourceGroupToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to Modify a Template Source Group. Only one Template Source Group can be modified at a time. <p><strong>OperationId:</strong>changeTemplateSourceGroup</p>
     * Change Template Source Group
     */
    changeTemplateSourceGroup(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeTemplateSourceGroupRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this APU to copy schedules for guarantee codes. <p><strong>OperationId:</strong>copyGuaranteeCodeSchedules</p>
     * Copy schedule s for guarantee codes
     */
    copyGuaranteeCodeSchedulesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.policyScheduleId === null || requestParameters.policyScheduleId === undefined) {
                throw new runtime.RequiredError('policyScheduleId', 'Required parameter requestParameters.policyScheduleId was null or undefined when calling copyGuaranteeCodeSchedules.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling copyGuaranteeCodeSchedules.');
            }
            if (requestParameters.copyGuaranteeCodeSchedules === null || requestParameters.copyGuaranteeCodeSchedules === undefined) {
                throw new runtime.RequiredError('copyGuaranteeCodeSchedules', 'Required parameter requestParameters.copyGuaranteeCodeSchedules was null or undefined when calling copyGuaranteeCodeSchedules.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/guaranteeCodeSchedules/{policyScheduleId}/copy`.replace(`{${"policyScheduleId"}}`, encodeURIComponent(String(requestParameters.policyScheduleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CopyGuaranteeCodeSchedulesToJSON)(requestParameters.copyGuaranteeCodeSchedules),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this APU to copy schedules for guarantee codes. <p><strong>OperationId:</strong>copyGuaranteeCodeSchedules</p>
     * Copy schedule s for guarantee codes
     */
    copyGuaranteeCodeSchedules(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyGuaranteeCodeSchedulesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this APU to copy schedules for deposit or cancel policy. <p><strong>OperationId:</strong>copyPolicySchedules</p>
     * Copy a Policy Schedule
     */
    copyPolicySchedulesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.policyscheduleId === null || requestParameters.policyscheduleId === undefined) {
                throw new runtime.RequiredError('policyscheduleId', 'Required parameter requestParameters.policyscheduleId was null or undefined when calling copyPolicySchedules.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling copyPolicySchedules.');
            }
            if (requestParameters.copyPolicySchedules === null || requestParameters.copyPolicySchedules === undefined) {
                throw new runtime.RequiredError('copyPolicySchedules', 'Required parameter requestParameters.copyPolicySchedules was null or undefined when calling copyPolicySchedules.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/policyschedules/{policyscheduleId}/copy`.replace(`{${"policyscheduleId"}}`, encodeURIComponent(String(requestParameters.policyscheduleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CopyPolicySchedulesToJSON)(requestParameters.copyPolicySchedules),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this APU to copy schedules for deposit or cancel policy. <p><strong>OperationId:</strong>copyPolicySchedules</p>
     * Copy a Policy Schedule
     */
    copyPolicySchedules(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyPolicySchedulesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Copy configuration service request codes. <p><strong>OperationId:</strong>copyServiceRequestCodes</p>
     *  copy configuration service request codes
     */
    copyServiceRequestCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sourceHotelId === null || requestParameters.sourceHotelId === undefined) {
                throw new runtime.RequiredError('sourceHotelId', 'Required parameter requestParameters.sourceHotelId was null or undefined when calling copyServiceRequestCodes.');
            }
            if (requestParameters.copyServiceRequestCodes === null || requestParameters.copyServiceRequestCodes === undefined) {
                throw new runtime.RequiredError('copyServiceRequestCodes', 'Required parameter requestParameters.copyServiceRequestCodes was null or undefined when calling copyServiceRequestCodes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{sourceHotelId}/serviceRequestCodes/copy`.replace(`{${"sourceHotelId"}}`, encodeURIComponent(String(requestParameters.sourceHotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CopyServiceRequestCodesToJSON)(requestParameters.copyServiceRequestCodes),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Copy configuration service request codes. <p><strong>OperationId:</strong>copyServiceRequestCodes</p>
     *  copy configuration service request codes
     */
    copyServiceRequestCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyServiceRequestCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Cancellation policies in hotel level. <p><strong>OperationId:</strong>deleteCancellationPolicy</p>
     * Delete Cancellation policies in hotel level
     */
    deleteCancellationPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cancelpolicycode === null || requestParameters.cancelpolicycode === undefined) {
                throw new runtime.RequiredError('cancelpolicycode', 'Required parameter requestParameters.cancelpolicycode was null or undefined when calling deleteCancellationPolicy.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteCancellationPolicy.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cancelpolicy/{cancelpolicycode}`.replace(`{${"cancelpolicycode"}}`, encodeURIComponent(String(requestParameters.cancelpolicycode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Cancellation policies in hotel level. <p><strong>OperationId:</strong>deleteCancellationPolicy</p>
     * Delete Cancellation policies in hotel level
     */
    deleteCancellationPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCancellationPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete deposit policy in hotel level. <p><strong>OperationId:</strong>deleteDepositPolicy</p>
     * Delete deposit policy in hotel level
     */
    deleteDepositPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.depositpolicycode === null || requestParameters.depositpolicycode === undefined) {
                throw new runtime.RequiredError('depositpolicycode', 'Required parameter requestParameters.depositpolicycode was null or undefined when calling deleteDepositPolicy.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteDepositPolicy.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/depositpolicy/{depositpolicycode}`.replace(`{${"depositpolicycode"}}`, encodeURIComponent(String(requestParameters.depositpolicycode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete deposit policy in hotel level. <p><strong>OperationId:</strong>deleteDepositPolicy</p>
     * Delete deposit policy in hotel level
     */
    deleteDepositPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteDepositPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Guarantee Code. <p><strong>OperationId:</strong>deleteGuaranteeCode</p>
     * Delete Guarantee Code
     */
    deleteGuaranteeCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.guaranteeCode === null || requestParameters.guaranteeCode === undefined) {
                throw new runtime.RequiredError('guaranteeCode', 'Required parameter requestParameters.guaranteeCode was null or undefined when calling deleteGuaranteeCode.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/guaranteeCodes/{guaranteeCode}`.replace(`{${"guaranteeCode"}}`, encodeURIComponent(String(requestParameters.guaranteeCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Guarantee Code. <p><strong>OperationId:</strong>deleteGuaranteeCode</p>
     * Delete Guarantee Code
     */
    deleteGuaranteeCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteGuaranteeCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete schedule for guarantee codes. <p><strong>OperationId:</strong>deleteGuaranteeCodeSchedule</p>
     * Delete schedule for guarantee codes
     */
    deleteGuaranteeCodeScheduleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.policyScheduleId === null || requestParameters.policyScheduleId === undefined) {
                throw new runtime.RequiredError('policyScheduleId', 'Required parameter requestParameters.policyScheduleId was null or undefined when calling deleteGuaranteeCodeSchedule.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteGuaranteeCodeSchedule.');
            }
            const queryParameters = {};
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/guaranteeCodeSchedules/{policyScheduleId}`.replace(`{${"policyScheduleId"}}`, encodeURIComponent(String(requestParameters.policyScheduleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete schedule for guarantee codes. <p><strong>OperationId:</strong>deleteGuaranteeCodeSchedule</p>
     * Delete schedule for guarantee codes
     */
    deleteGuaranteeCodeSchedule(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteGuaranteeCodeScheduleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete schedule for deposit or cancel policy. <p><strong>OperationId:</strong>deletePolicySchedule</p>
     * Delete Policy Schedule
     */
    deletePolicyScheduleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.policyscheduleId === null || requestParameters.policyscheduleId === undefined) {
                throw new runtime.RequiredError('policyscheduleId', 'Required parameter requestParameters.policyscheduleId was null or undefined when calling deletePolicySchedule.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deletePolicySchedule.');
            }
            const queryParameters = {};
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/policyschedules/{policyscheduleId}`.replace(`{${"policyscheduleId"}}`, encodeURIComponent(String(requestParameters.policyscheduleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete schedule for deposit or cancel policy. <p><strong>OperationId:</strong>deletePolicySchedule</p>
     * Delete Policy Schedule
     */
    deletePolicySchedule(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deletePolicyScheduleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete template Cancellation policies. <p><strong>OperationId:</strong>deleteTemplateCancellationPolicy</p>
     * Delete template Cancellation policies
     */
    deleteTemplateCancellationPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cancelpolicytemplate === null || requestParameters.cancelpolicytemplate === undefined) {
                throw new runtime.RequiredError('cancelpolicytemplate', 'Required parameter requestParameters.cancelpolicytemplate was null or undefined when calling deleteTemplateCancellationPolicy.');
            }
            const queryParameters = {};
            if (requestParameters.policyCode !== undefined) {
                queryParameters['policyCode'] = requestParameters.policyCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cancelpolicytemplate/{cancelpolicytemplate}`.replace(`{${"cancelpolicytemplate"}}`, encodeURIComponent(String(requestParameters.cancelpolicytemplate))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete template Cancellation policies. <p><strong>OperationId:</strong>deleteTemplateCancellationPolicy</p>
     * Delete template Cancellation policies
     */
    deleteTemplateCancellationPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteTemplateCancellationPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete template deposit policy. <p><strong>OperationId:</strong>deleteTemplateDepositPolicy</p>
     * Delete template deposit policy
     */
    deleteTemplateDepositPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.depositpolicytemplate === null || requestParameters.depositpolicytemplate === undefined) {
                throw new runtime.RequiredError('depositpolicytemplate', 'Required parameter requestParameters.depositpolicytemplate was null or undefined when calling deleteTemplateDepositPolicy.');
            }
            const queryParameters = {};
            if (requestParameters.policyCode !== undefined) {
                queryParameters['policyCode'] = requestParameters.policyCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/depositpolicytemplate/{depositpolicytemplate}`.replace(`{${"depositpolicytemplate"}}`, encodeURIComponent(String(requestParameters.depositpolicytemplate))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete template deposit policy. <p><strong>OperationId:</strong>deleteTemplateDepositPolicy</p>
     * Delete template deposit policy
     */
    deleteTemplateDepositPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteTemplateDepositPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete template Guarantee Code. <p><strong>OperationId:</strong>deleteTemplateGuaranteeCode</p>
     * Delete template Guarantee Code
     */
    deleteTemplateGuaranteeCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.guaranteeCode === null || requestParameters.guaranteeCode === undefined) {
                throw new runtime.RequiredError('guaranteeCode', 'Required parameter requestParameters.guaranteeCode was null or undefined when calling deleteTemplateGuaranteeCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/guaranteeCodeTemplates/{guaranteeCode}`.replace(`{${"guaranteeCode"}}`, encodeURIComponent(String(requestParameters.guaranteeCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete template Guarantee Code. <p><strong>OperationId:</strong>deleteTemplateGuaranteeCode</p>
     * Delete template Guarantee Code
     */
    deleteTemplateGuaranteeCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteTemplateGuaranteeCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Cancellation policies in hotel level. <p><strong>OperationId:</strong>getCancellationPolicy</p>
     * Get Cancellation policies in hotel level
     */
    getCancellationPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.policyCodeListCodes) {
                queryParameters['policyCodeListCodes'] = requestParameters.policyCodeListCodes;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cancelpolicies`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CancellationPolicyDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Cancellation policies in hotel level. <p><strong>OperationId:</strong>getCancellationPolicy</p>
     * Get Cancellation policies in hotel level
     */
    getCancellationPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCancellationPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get deposit policies in hotel level. <p><strong>OperationId:</strong>getDepositPolicy</p>
     * Get deposit policies in hotel level
     */
    getDepositPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.policyCodeListCodes) {
                queryParameters['policyCodeListCodes'] = requestParameters.policyCodeListCodes;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/depositpolicies`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DepositPolicyDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get deposit policies in hotel level. <p><strong>OperationId:</strong>getDepositPolicy</p>
     * Get deposit policies in hotel level
     */
    getDepositPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getDepositPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get schedules for guarantee codes. <p><strong>OperationId:</strong>getGuaranteeCodeSchedules</p>
     * Get schedules for guarantee codes
     */
    getGuaranteeCodeSchedulesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getGuaranteeCodeSchedules.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.ratePlanCodes) {
                queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate.toISOString().substring(0, 10);
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate.toISOString().substring(0, 10);
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.guaranteeCodes) {
                queryParameters['guaranteeCodes'] = requestParameters.guaranteeCodes;
            }
            if (requestParameters.creditRatingsCodes) {
                queryParameters['creditRatingsCodes'] = requestParameters.creditRatingsCodes;
            }
            if (requestParameters.seasonsCodes) {
                queryParameters['seasonsCodes'] = requestParameters.seasonsCodes;
            }
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/guaranteeCodeSchedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GuaranteeCodeSchedulesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get schedules for guarantee codes. <p><strong>OperationId:</strong>getGuaranteeCodeSchedules</p>
     * Get schedules for guarantee codes
     */
    getGuaranteeCodeSchedules(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getGuaranteeCodeSchedulesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Guarantee Codes for a hotel. Guarantee codes are required to identify if the reservation is deducted (definite), not deducted (tentative) from availability, or is guaranteed.<p><strong>OperationId:</strong>getGuaranteeCodes</p>
     * Get guarantee codes
     */
    getGuaranteeCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.guaranteeCodes) {
                queryParameters['guaranteeCodes'] = requestParameters.guaranteeCodes;
            }
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/guaranteeCodes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GuaranteeCodesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Guarantee Codes for a hotel. Guarantee codes are required to identify if the reservation is deducted (definite), not deducted (tentative) from availability, or is guaranteed.<p><strong>OperationId:</strong>getGuaranteeCodes</p>
     * Get guarantee codes
     */
    getGuaranteeCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getGuaranteeCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Market codes. <p><strong>OperationId:</strong>getMarketCodes</p>
     * Get Market codes
     */
    getMarketCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.marketCodes) {
                queryParameters['marketCodes'] = requestParameters.marketCodes;
            }
            if (requestParameters.marketGroupsCodes) {
                queryParameters['marketGroupsCodes'] = requestParameters.marketGroupsCodes;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/marketCodes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MarketCodesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Market codes. <p><strong>OperationId:</strong>getMarketCodes</p>
     * Get Market codes
     */
    getMarketCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMarketCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API is used to search for a Market Group. . <p><strong>OperationId:</strong>getMarketGroups</p>
     * Get Market Groups
     */
    getMarketGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.marketCodes) {
                queryParameters['marketCodes'] = requestParameters.marketCodes;
            }
            if (requestParameters.marketGroupsCodes) {
                queryParameters['marketGroupsCodes'] = requestParameters.marketGroupsCodes;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/marketGroups`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MarketGroupsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API is used to search for a Market Group. . <p><strong>OperationId:</strong>getMarketGroups</p>
     * Get Market Groups
     */
    getMarketGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMarketGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get the schedule of deposit and cancelation policies for a hotel. Default limit is 20.<p><strong>OperationId:</strong>getPolicySchedules</p>
     * Get policy schedules
     */
    getPolicySchedulesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getPolicySchedules.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.policyType !== undefined) {
                queryParameters['policyType'] = requestParameters.policyType;
            }
            if (requestParameters.ratePlanCodes) {
                queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
            }
            if (requestParameters.policyCodes) {
                queryParameters['policyCodes'] = requestParameters.policyCodes;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate.toISOString().substring(0, 10);
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate.toISOString().substring(0, 10);
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.guaranteeCodes) {
                queryParameters['guaranteeCodes'] = requestParameters.guaranteeCodes;
            }
            if (requestParameters.creditRatingsCodes) {
                queryParameters['creditRatingsCodes'] = requestParameters.creditRatingsCodes;
            }
            if (requestParameters.seasonsCodes) {
                queryParameters['seasonsCodes'] = requestParameters.seasonsCodes;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/policyschedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PolicySchedulesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get the schedule of deposit and cancelation policies for a hotel. Default limit is 20.<p><strong>OperationId:</strong>getPolicySchedules</p>
     * Get policy schedules
     */
    getPolicySchedules(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPolicySchedulesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Pre Check In rules. <p><strong>OperationId:</strong>getPreCheckInRules</p>
     * Get Pre Check In rules
     */
    getPreCheckInRulesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getPreCheckInRules.');
            }
            const queryParameters = {};
            if (requestParameters.date !== undefined) {
                queryParameters['date'] = requestParameters.date.toISOString().substring(0, 10);
            }
            if (requestParameters.ruleType !== undefined) {
                queryParameters['ruleType'] = requestParameters.ruleType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/precheckinRules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PreCheckInRulesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Pre Check In rules. <p><strong>OperationId:</strong>getPreCheckInRules</p>
     * Get Pre Check In rules
     */
    getPreCheckInRules(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPreCheckInRulesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get service request codes. <p><strong>OperationId:</strong>getServiceRequestCode</p>
     * Get service request codes
     */
    getServiceRequestCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.serviceRequestCodes) {
                queryParameters['serviceRequestCodes'] = requestParameters.serviceRequestCodes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/serviceRequestCodes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ServiceRequestCodesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get service request codes. <p><strong>OperationId:</strong>getServiceRequestCode</p>
     * Get service request codes
     */
    getServiceRequestCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getServiceRequestCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Service Request Code Priorities.<br><p><strong><mark>This API is deprecated. Please use getServiceRequestCodePriority instead</mark></strong></p> <p><strong>OperationId:</strong>getServiceRequestCodePriorities</p>
     * Get Service Request Code Priorities
     * @deprecated
     */
    getServiceRequestCodePrioritiesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.serviceRequestCode === null || requestParameters.serviceRequestCode === undefined) {
                throw new runtime.RequiredError('serviceRequestCode', 'Required parameter requestParameters.serviceRequestCode was null or undefined when calling getServiceRequestCodePriorities.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getServiceRequestCodePriorities.');
            }
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/serviceRequestCodes/{serviceRequestCode}/priorities`.replace(`{${"serviceRequestCode"}}`, encodeURIComponent(String(requestParameters.serviceRequestCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ServiceRequestCodePrioritiesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Service Request Code Priorities.<br><p><strong><mark>This API is deprecated. Please use getServiceRequestCodePriority instead</mark></strong></p> <p><strong>OperationId:</strong>getServiceRequestCodePriorities</p>
     * Get Service Request Code Priorities
     * @deprecated
     */
    getServiceRequestCodePriorities(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getServiceRequestCodePrioritiesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Service Request Code Priorities. <p><strong>OperationId:</strong>getServiceRequestCodePriority</p>
     * Get Service Request Code Priorities
     */
    getServiceRequestCodePriorityRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.serviceRequestCodes) {
                queryParameters['serviceRequestCodes'] = requestParameters.serviceRequestCodes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/serviceRequestCodes/priorities`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ServiceRequestCodePrioritiesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Service Request Code Priorities. <p><strong>OperationId:</strong>getServiceRequestCodePriority</p>
     * Get Service Request Code Priorities
     */
    getServiceRequestCodePriority(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getServiceRequestCodePriorityRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get service request codes.<br><p><strong><mark>This API is deprecated. Please use getServiceRequestCode instead</mark></strong></p> <p><strong>OperationId:</strong>getServiceRequestCodes</p>
     * Get service request codes
     * @deprecated
     */
    getServiceRequestCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getServiceRequestCodes.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.serviceRequestCodes) {
                queryParameters['serviceRequestCodes'] = requestParameters.serviceRequestCodes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/serviceRequestCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ServiceRequestCodesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get service request codes.<br><p><strong><mark>This API is deprecated. Please use getServiceRequestCode instead</mark></strong></p> <p><strong>OperationId:</strong>getServiceRequestCodes</p>
     * Get service request codes
     * @deprecated
     */
    getServiceRequestCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getServiceRequestCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to search for Source Codes based on criteria. <p><strong>OperationId:</strong>getSourceCodes</p>
     * Get Source Codes
     */
    getSourceCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getSourceCodes.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.sourceCodes) {
                queryParameters['sourceCodes'] = requestParameters.sourceCodes;
            }
            if (requestParameters.sourceGroupsCodes) {
                queryParameters['sourceGroupsCodes'] = requestParameters.sourceGroupsCodes;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/sourceCodes/`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SourceCodesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to search for Source Codes based on criteria. <p><strong>OperationId:</strong>getSourceCodes</p>
     * Get Source Codes
     */
    getSourceCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSourceCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Search for Source Groups. <p><strong>OperationId:</strong>getSourceGroups</p>
     * Search for Source Groups
     */
    getSourceGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getSourceGroups.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.sourceCodes) {
                queryParameters['sourceCodes'] = requestParameters.sourceCodes;
            }
            if (requestParameters.sourceGroupsCodes) {
                queryParameters['sourceGroupsCodes'] = requestParameters.sourceGroupsCodes;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/sourceGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SourceGroupsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Search for Source Groups. <p><strong>OperationId:</strong>getSourceGroups</p>
     * Search for Source Groups
     */
    getSourceGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSourceGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get template Cancellation policies. <p><strong>OperationId:</strong>getTemplateCancellationPolicy</p>
     * Get template Cancellation policies
     */
    getTemplateCancellationPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.policyCodeListCodes) {
                queryParameters['policyCodeListCodes'] = requestParameters.policyCodeListCodes;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cancelpolicytemplates`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TemplateCancellationPolicyDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get template Cancellation policies. <p><strong>OperationId:</strong>getTemplateCancellationPolicy</p>
     * Get template Cancellation policies
     */
    getTemplateCancellationPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTemplateCancellationPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get template deposit policies. <p><strong>OperationId:</strong>getTemplateDepositPolicy</p>
     * Get template deposit policies
     */
    getTemplateDepositPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.policyCodeListCodes) {
                queryParameters['policyCodeListCodes'] = requestParameters.policyCodeListCodes;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/depositpolicytemplates`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TemplateDepositPolicyDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get template deposit policies. <p><strong>OperationId:</strong>getTemplateDepositPolicy</p>
     * Get template deposit policies
     */
    getTemplateDepositPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTemplateDepositPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get template Guarantee Codes. <p><strong>OperationId:</strong>getTemplateGuaranteeCodes</p>
     * Get template Guarantee Codes
     */
    getTemplateGuaranteeCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.guaranteeCodes) {
                queryParameters['guaranteeCodes'] = requestParameters.guaranteeCodes;
            }
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/guaranteeCodeTemplates`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TemplateGuaranteeCodesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get template Guarantee Codes. <p><strong>OperationId:</strong>getTemplateGuaranteeCodes</p>
     * Get template Guarantee Codes
     */
    getTemplateGuaranteeCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTemplateGuaranteeCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API is used to search for a Template Market Code. . <p><strong>OperationId:</strong>getTemplateMarketCodes</p>
     * Search for Market codes Template
     */
    getTemplateMarketCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.templateMarketCodes) {
                queryParameters['templateMarketCodes'] = requestParameters.templateMarketCodes;
            }
            if (requestParameters.templateMarketGroupsCodes) {
                queryParameters['templateMarketGroupsCodes'] = requestParameters.templateMarketGroupsCodes;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/marketCodeTemplates`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TemplateMarketCodesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API is used to search for a Template Market Code. . <p><strong>OperationId:</strong>getTemplateMarketCodes</p>
     * Search for Market codes Template
     */
    getTemplateMarketCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTemplateMarketCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get  Market Group Templates. <p><strong>OperationId:</strong>getTemplateMarketGroups</p>
     * Get  Market Group Templates
     */
    getTemplateMarketGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.templateMarketCodes) {
                queryParameters['templateMarketCodes'] = requestParameters.templateMarketCodes;
            }
            if (requestParameters.templateMarketGroupsCodes) {
                queryParameters['templateMarketGroupsCodes'] = requestParameters.templateMarketGroupsCodes;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/marketGroupTemplates`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TemplateMarketGroupsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get  Market Group Templates. <p><strong>OperationId:</strong>getTemplateMarketGroups</p>
     * Get  Market Group Templates
     */
    getTemplateMarketGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTemplateMarketGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get template Source Codes. <p><strong>OperationId:</strong>getTemplateSourceCodes</p>
     * Get template Source Codes
     */
    getTemplateSourceCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.templateSourceCodes) {
                queryParameters['templateSourceCodes'] = requestParameters.templateSourceCodes;
            }
            if (requestParameters.templateSourceGroupsCodes) {
                queryParameters['templateSourceGroupsCodes'] = requestParameters.templateSourceGroupsCodes;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/templates/sourceCodes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TemplateSourceCodesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get template Source Codes. <p><strong>OperationId:</strong>getTemplateSourceCodes</p>
     * Get template Source Codes
     */
    getTemplateSourceCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTemplateSourceCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to search for Template Source Groups based on the search criteria in the request. <p><strong>OperationId:</strong>getTemplateSourceGroups</p>
     * Get Template Source Groups
     */
    getTemplateSourceGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pageNumber !== undefined) {
                queryParameters['pageNumber'] = requestParameters.pageNumber;
            }
            if (requestParameters.templateSourceCodes) {
                queryParameters['templateSourceCodes'] = requestParameters.templateSourceCodes;
            }
            if (requestParameters.templateSourceGroupsCodes) {
                queryParameters['templateSourceGroupsCodes'] = requestParameters.templateSourceGroupsCodes;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/templates/sourceGroups`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TemplateSourceGroupsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to search for Template Source Groups based on the search criteria in the request. <p><strong>OperationId:</strong>getTemplateSourceGroups</p>
     * Get Template Source Groups
     */
    getTemplateSourceGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTemplateSourceGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Cancellation policies in hotel level. <p><strong>OperationId:</strong>postCancellationPolicy</p>
     * Create Cancellation policies in hotel level
     */
    postCancellationPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cancelpolicycode === null || requestParameters.cancelpolicycode === undefined) {
                throw new runtime.RequiredError('cancelpolicycode', 'Required parameter requestParameters.cancelpolicycode was null or undefined when calling postCancellationPolicy.');
            }
            if (requestParameters.cancellationPolicyCriteria === null || requestParameters.cancellationPolicyCriteria === undefined) {
                throw new runtime.RequiredError('cancellationPolicyCriteria', 'Required parameter requestParameters.cancellationPolicyCriteria was null or undefined when calling postCancellationPolicy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cancelpolicy/{cancelpolicycode}`.replace(`{${"cancelpolicycode"}}`, encodeURIComponent(String(requestParameters.cancelpolicycode))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CancellationPolicyCriteriaToJSON)(requestParameters.cancellationPolicyCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Cancellation policies in hotel level. <p><strong>OperationId:</strong>postCancellationPolicy</p>
     * Create Cancellation policies in hotel level
     */
    postCancellationPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCancellationPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create deposit policy in hotel level. <p><strong>OperationId:</strong>postDepositPolicy</p>
     * Create deposit policy in hotel level
     */
    postDepositPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.depositpolicycode === null || requestParameters.depositpolicycode === undefined) {
                throw new runtime.RequiredError('depositpolicycode', 'Required parameter requestParameters.depositpolicycode was null or undefined when calling postDepositPolicy.');
            }
            if (requestParameters.depositPolicyCriteria === null || requestParameters.depositPolicyCriteria === undefined) {
                throw new runtime.RequiredError('depositPolicyCriteria', 'Required parameter requestParameters.depositPolicyCriteria was null or undefined when calling postDepositPolicy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/depositpolicy/{depositpolicycode}`.replace(`{${"depositpolicycode"}}`, encodeURIComponent(String(requestParameters.depositpolicycode))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DepositPolicyCriteriaToJSON)(requestParameters.depositPolicyCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create deposit policy in hotel level. <p><strong>OperationId:</strong>postDepositPolicy</p>
     * Create deposit policy in hotel level
     */
    postDepositPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postDepositPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Guarantee Code. <p><strong>OperationId:</strong>postGuaranteeCode</p>
     * Create Guarantee Code
     */
    postGuaranteeCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.guaranteeCodeCriteria === null || requestParameters.guaranteeCodeCriteria === undefined) {
                throw new runtime.RequiredError('guaranteeCodeCriteria', 'Required parameter requestParameters.guaranteeCodeCriteria was null or undefined when calling postGuaranteeCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/guaranteeCodes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GuaranteeCodeCriteriaToJSON)(requestParameters.guaranteeCodeCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Guarantee Code. <p><strong>OperationId:</strong>postGuaranteeCode</p>
     * Create Guarantee Code
     */
    postGuaranteeCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postGuaranteeCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create schedule for guarantee codes. <p><strong>OperationId:</strong>postGuaranteeCodeSchedule</p>
     * Create schedule for guarantee codes
     */
    postGuaranteeCodeScheduleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postGuaranteeCodeSchedule.');
            }
            if (requestParameters.guaranteeCodeScheduleCriteria === null || requestParameters.guaranteeCodeScheduleCriteria === undefined) {
                throw new runtime.RequiredError('guaranteeCodeScheduleCriteria', 'Required parameter requestParameters.guaranteeCodeScheduleCriteria was null or undefined when calling postGuaranteeCodeSchedule.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/guaranteeCodeSchedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GuaranteeCodeScheduleCriteriaToJSON)(requestParameters.guaranteeCodeScheduleCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create schedule for guarantee codes. <p><strong>OperationId:</strong>postGuaranteeCodeSchedule</p>
     * Create schedule for guarantee codes
     */
    postGuaranteeCodeSchedule(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postGuaranteeCodeScheduleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create a new Market Code. <p><strong>OperationId:</strong>postMarketCode</p>
     * Create a new Market Code
     */
    postMarketCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.marketcode === null || requestParameters.marketcode === undefined) {
                throw new runtime.RequiredError('marketcode', 'Required parameter requestParameters.marketcode was null or undefined when calling postMarketCode.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postMarketCode.');
            }
            if (requestParameters.marketCodeCriteria === null || requestParameters.marketCodeCriteria === undefined) {
                throw new runtime.RequiredError('marketCodeCriteria', 'Required parameter requestParameters.marketCodeCriteria was null or undefined when calling postMarketCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/marketCodes/{marketcode}`.replace(`{${"marketcode"}}`, encodeURIComponent(String(requestParameters.marketcode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MarketCodeCriteriaToJSON)(requestParameters.marketCodeCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create a new Market Code. <p><strong>OperationId:</strong>postMarketCode</p>
     * Create a new Market Code
     */
    postMarketCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postMarketCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create a new Market Group. Only one Market Code can be created at a time. <p><strong>OperationId:</strong>postMarketGroup</p>
     * Create Market Group
     */
    postMarketGroupRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.marketGroupCode === null || requestParameters.marketGroupCode === undefined) {
                throw new runtime.RequiredError('marketGroupCode', 'Required parameter requestParameters.marketGroupCode was null or undefined when calling postMarketGroup.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postMarketGroup.');
            }
            if (requestParameters.marketGroupCriteria === null || requestParameters.marketGroupCriteria === undefined) {
                throw new runtime.RequiredError('marketGroupCriteria', 'Required parameter requestParameters.marketGroupCriteria was null or undefined when calling postMarketGroup.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/marketGroups/{marketGroupCode}`.replace(`{${"marketGroupCode"}}`, encodeURIComponent(String(requestParameters.marketGroupCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MarketGroupCriteriaToJSON)(requestParameters.marketGroupCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create a new Market Group. Only one Market Code can be created at a time. <p><strong>OperationId:</strong>postMarketGroup</p>
     * Create Market Group
     */
    postMarketGroup(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postMarketGroupRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create schedule for deposit or cancel policy. <p><strong>OperationId:</strong>postNewPolicySchedule</p>
     * Create a Policy Schedule
     */
    postNewPolicyScheduleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postNewPolicySchedule.');
            }
            if (requestParameters.policyScheduleCriteria === null || requestParameters.policyScheduleCriteria === undefined) {
                throw new runtime.RequiredError('policyScheduleCriteria', 'Required parameter requestParameters.policyScheduleCriteria was null or undefined when calling postNewPolicySchedule.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/policyschedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PolicyScheduleCriteriaToJSON)(requestParameters.policyScheduleCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create schedule for deposit or cancel policy. <p><strong>OperationId:</strong>postNewPolicySchedule</p>
     * Create a Policy Schedule
     */
    postNewPolicySchedule(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postNewPolicyScheduleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create schedule for deposit or cancel policy.<br><p><strong><mark>This API is deprecated. Please use createNewPolicySchedule instead</mark></strong></p> <p><strong>OperationId:</strong>postPolicySchedule</p>
     * Create a Policy Schedule
     * @deprecated
     */
    postPolicyScheduleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.policyscheduleId === null || requestParameters.policyscheduleId === undefined) {
                throw new runtime.RequiredError('policyscheduleId', 'Required parameter requestParameters.policyscheduleId was null or undefined when calling postPolicySchedule.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postPolicySchedule.');
            }
            if (requestParameters.policyScheduleCriteria === null || requestParameters.policyScheduleCriteria === undefined) {
                throw new runtime.RequiredError('policyScheduleCriteria', 'Required parameter requestParameters.policyScheduleCriteria was null or undefined when calling postPolicySchedule.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/policyschedules/{policyscheduleId}`.replace(`{${"policyscheduleId"}}`, encodeURIComponent(String(requestParameters.policyscheduleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PolicyScheduleCriteriaToJSON)(requestParameters.policyScheduleCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create schedule for deposit or cancel policy.<br><p><strong><mark>This API is deprecated. Please use createNewPolicySchedule instead</mark></strong></p> <p><strong>OperationId:</strong>postPolicySchedule</p>
     * Create a Policy Schedule
     * @deprecated
     */
    postPolicySchedule(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postPolicyScheduleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Pre Check In rules. <p><strong>OperationId:</strong>postPreCheckInRules</p>
     * Create Pre Check In rules
     */
    postPreCheckInRulesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postPreCheckInRules.');
            }
            if (requestParameters.preCheckInRulesCriteria === null || requestParameters.preCheckInRulesCriteria === undefined) {
                throw new runtime.RequiredError('preCheckInRulesCriteria', 'Required parameter requestParameters.preCheckInRulesCriteria was null or undefined when calling postPreCheckInRules.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/precheckinRules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PreCheckInRulesCriteriaToJSON)(requestParameters.preCheckInRulesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Pre Check In rules. <p><strong>OperationId:</strong>postPreCheckInRules</p>
     * Create Pre Check In rules
     */
    postPreCheckInRules(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postPreCheckInRulesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Service Request Code Priorities. <p><strong>OperationId:</strong>postServiceRequestCodePriorities</p>
     * Create Service Request Code Priorities
     */
    postServiceRequestCodePrioritiesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.serviceRequestCode === null || requestParameters.serviceRequestCode === undefined) {
                throw new runtime.RequiredError('serviceRequestCode', 'Required parameter requestParameters.serviceRequestCode was null or undefined when calling postServiceRequestCodePriorities.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postServiceRequestCodePriorities.');
            }
            if (requestParameters.serviceRequestCodePrioritiesCriteria === null || requestParameters.serviceRequestCodePrioritiesCriteria === undefined) {
                throw new runtime.RequiredError('serviceRequestCodePrioritiesCriteria', 'Required parameter requestParameters.serviceRequestCodePrioritiesCriteria was null or undefined when calling postServiceRequestCodePriorities.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/serviceRequestCodes/{serviceRequestCode}/priorities`.replace(`{${"serviceRequestCode"}}`, encodeURIComponent(String(requestParameters.serviceRequestCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ServiceRequestCodePrioritiesCriteriaToJSON)(requestParameters.serviceRequestCodePrioritiesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Service Request Code Priorities. <p><strong>OperationId:</strong>postServiceRequestCodePriorities</p>
     * Create Service Request Code Priorities
     */
    postServiceRequestCodePriorities(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postServiceRequestCodePrioritiesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create service request codes. <p><strong>OperationId:</strong>postServiceRequestCodes</p>
     * Create service request codes
     */
    postServiceRequestCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postServiceRequestCodes.');
            }
            if (requestParameters.serviceRequestCodesCriteria === null || requestParameters.serviceRequestCodesCriteria === undefined) {
                throw new runtime.RequiredError('serviceRequestCodesCriteria', 'Required parameter requestParameters.serviceRequestCodesCriteria was null or undefined when calling postServiceRequestCodes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/serviceRequestCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ServiceRequestCodesCriteriaToJSON)(requestParameters.serviceRequestCodesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create service request codes. <p><strong>OperationId:</strong>postServiceRequestCodes</p>
     * Create service request codes
     */
    postServiceRequestCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postServiceRequestCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create a new Source Code. Only one Source Code can be Use this API to created at a time. <p><strong>OperationId:</strong>postSourceCode</p>
     * Create a Source Code
     */
    postSourceCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postSourceCode.');
            }
            if (requestParameters.sourceCodeCriteria === null || requestParameters.sourceCodeCriteria === undefined) {
                throw new runtime.RequiredError('sourceCodeCriteria', 'Required parameter requestParameters.sourceCodeCriteria was null or undefined when calling postSourceCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/sourceCodes/`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SourceCodeCriteriaToJSON)(requestParameters.sourceCodeCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create a new Source Code. Only one Source Code can be Use this API to created at a time. <p><strong>OperationId:</strong>postSourceCode</p>
     * Create a Source Code
     */
    postSourceCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postSourceCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API is used to create a new Source Group. Only one Source Code can be Use this API to created at a time. <p><strong>OperationId:</strong>postSourceGroup</p>
     * Create a Source Group
     */
    postSourceGroupRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postSourceGroup.');
            }
            if (requestParameters.sourceGroupCriteria === null || requestParameters.sourceGroupCriteria === undefined) {
                throw new runtime.RequiredError('sourceGroupCriteria', 'Required parameter requestParameters.sourceGroupCriteria was null or undefined when calling postSourceGroup.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/sourceGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SourceGroupCriteriaToJSON)(requestParameters.sourceGroupCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API is used to create a new Source Group. Only one Source Code can be Use this API to created at a time. <p><strong>OperationId:</strong>postSourceGroup</p>
     * Create a Source Group
     */
    postSourceGroup(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postSourceGroupRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create template Cancellation policies. <p><strong>OperationId:</strong>postTemplateCancellationPolicy</p>
     * Create template Cancellation policies
     */
    postTemplateCancellationPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cancelpolicytemplate === null || requestParameters.cancelpolicytemplate === undefined) {
                throw new runtime.RequiredError('cancelpolicytemplate', 'Required parameter requestParameters.cancelpolicytemplate was null or undefined when calling postTemplateCancellationPolicy.');
            }
            if (requestParameters.templateCancellationPolicyCriteria === null || requestParameters.templateCancellationPolicyCriteria === undefined) {
                throw new runtime.RequiredError('templateCancellationPolicyCriteria', 'Required parameter requestParameters.templateCancellationPolicyCriteria was null or undefined when calling postTemplateCancellationPolicy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cancelpolicytemplate/{cancelpolicytemplate}`.replace(`{${"cancelpolicytemplate"}}`, encodeURIComponent(String(requestParameters.cancelpolicytemplate))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TemplateCancellationPolicyCriteriaToJSON)(requestParameters.templateCancellationPolicyCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create template Cancellation policies. <p><strong>OperationId:</strong>postTemplateCancellationPolicy</p>
     * Create template Cancellation policies
     */
    postTemplateCancellationPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postTemplateCancellationPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create template deposit policy. <p><strong>OperationId:</strong>postTemplateDepositPolicy</p>
     * Create template deposit policy
     */
    postTemplateDepositPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.depositpolicytemplate === null || requestParameters.depositpolicytemplate === undefined) {
                throw new runtime.RequiredError('depositpolicytemplate', 'Required parameter requestParameters.depositpolicytemplate was null or undefined when calling postTemplateDepositPolicy.');
            }
            if (requestParameters.templateDepositPolicyCriteria === null || requestParameters.templateDepositPolicyCriteria === undefined) {
                throw new runtime.RequiredError('templateDepositPolicyCriteria', 'Required parameter requestParameters.templateDepositPolicyCriteria was null or undefined when calling postTemplateDepositPolicy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/depositpolicytemplate/{depositpolicytemplate}`.replace(`{${"depositpolicytemplate"}}`, encodeURIComponent(String(requestParameters.depositpolicytemplate))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TemplateDepositPolicyCriteriaToJSON)(requestParameters.templateDepositPolicyCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create template deposit policy. <p><strong>OperationId:</strong>postTemplateDepositPolicy</p>
     * Create template deposit policy
     */
    postTemplateDepositPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postTemplateDepositPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create template Guarantee Code. <p><strong>OperationId:</strong>postTemplateGuaranteeCode</p>
     * Create template Guarantee Code
     */
    postTemplateGuaranteeCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.guaranteeCode === null || requestParameters.guaranteeCode === undefined) {
                throw new runtime.RequiredError('guaranteeCode', 'Required parameter requestParameters.guaranteeCode was null or undefined when calling postTemplateGuaranteeCode.');
            }
            if (requestParameters.templateGuaranteeCodeCriteria === null || requestParameters.templateGuaranteeCodeCriteria === undefined) {
                throw new runtime.RequiredError('templateGuaranteeCodeCriteria', 'Required parameter requestParameters.templateGuaranteeCodeCriteria was null or undefined when calling postTemplateGuaranteeCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/guaranteeCodeTemplates/{guaranteeCode}`.replace(`{${"guaranteeCode"}}`, encodeURIComponent(String(requestParameters.guaranteeCode))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TemplateGuaranteeCodeCriteriaToJSON)(requestParameters.templateGuaranteeCodeCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create template Guarantee Code. <p><strong>OperationId:</strong>postTemplateGuaranteeCode</p>
     * Create template Guarantee Code
     */
    postTemplateGuaranteeCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postTemplateGuaranteeCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API is used to create a new Template Market Code. Only one template Market Code can be Use this API to created at a time. <p><strong>OperationId:</strong>postTemplateMarketCode</p>
     * Create Market Code Template
     */
    postTemplateMarketCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.templateMarketCodeCriteria === null || requestParameters.templateMarketCodeCriteria === undefined) {
                throw new runtime.RequiredError('templateMarketCodeCriteria', 'Required parameter requestParameters.templateMarketCodeCriteria was null or undefined when calling postTemplateMarketCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/marketCodeTemplates`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TemplateMarketCodeCriteriaToJSON)(requestParameters.templateMarketCodeCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API is used to create a new Template Market Code. Only one template Market Code can be Use this API to created at a time. <p><strong>OperationId:</strong>postTemplateMarketCode</p>
     * Create Market Code Template
     */
    postTemplateMarketCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postTemplateMarketCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API is used to create a new Template Market Group. Only one template Market Group can be Use this API to created at a time. <p><strong>OperationId:</strong>postTemplateMarketGroup</p>
     * Create Market Group Template
     */
    postTemplateMarketGroupRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.marketGroupCode === null || requestParameters.marketGroupCode === undefined) {
                throw new runtime.RequiredError('marketGroupCode', 'Required parameter requestParameters.marketGroupCode was null or undefined when calling postTemplateMarketGroup.');
            }
            if (requestParameters.templateMarketGroupCriteria === null || requestParameters.templateMarketGroupCriteria === undefined) {
                throw new runtime.RequiredError('templateMarketGroupCriteria', 'Required parameter requestParameters.templateMarketGroupCriteria was null or undefined when calling postTemplateMarketGroup.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/marketGroupTemplate/{marketGroupCode}`.replace(`{${"marketGroupCode"}}`, encodeURIComponent(String(requestParameters.marketGroupCode))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TemplateMarketGroupCriteriaToJSON)(requestParameters.templateMarketGroupCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API is used to create a new Template Market Group. Only one template Market Group can be Use this API to created at a time. <p><strong>OperationId:</strong>postTemplateMarketGroup</p>
     * Create Market Group Template
     */
    postTemplateMarketGroup(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postTemplateMarketGroupRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create a new Template Source Code. Only one template Source Code can be created at a time. <p><strong>OperationId:</strong>postTemplateSourceCode</p>
     * Create a Template Source Code
     */
    postTemplateSourceCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.templateSourceCodeCriteria === null || requestParameters.templateSourceCodeCriteria === undefined) {
                throw new runtime.RequiredError('templateSourceCodeCriteria', 'Required parameter requestParameters.templateSourceCodeCriteria was null or undefined when calling postTemplateSourceCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/templates/sourceCodes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TemplateSourceCodeCriteriaToJSON)(requestParameters.templateSourceCodeCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create a new Template Source Code. Only one template Source Code can be created at a time. <p><strong>OperationId:</strong>postTemplateSourceCode</p>
     * Create a Template Source Code
     */
    postTemplateSourceCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postTemplateSourceCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create a new Template Source Group. Only one template Source Group can be created at a time. <p><strong>OperationId:</strong>postTemplateSourceGroup</p>
     * Create a Template Source Group
     */
    postTemplateSourceGroupRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.templateSourceGroupCriteria === null || requestParameters.templateSourceGroupCriteria === undefined) {
                throw new runtime.RequiredError('templateSourceGroupCriteria', 'Required parameter requestParameters.templateSourceGroupCriteria was null or undefined when calling postTemplateSourceGroup.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/templates/sourceGroups`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TemplateSourceGroupCriteriaToJSON)(requestParameters.templateSourceGroupCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create a new Template Source Group. Only one template Source Group can be created at a time. <p><strong>OperationId:</strong>postTemplateSourceGroup</p>
     * Create a Template Source Group
     */
    postTemplateSourceGroup(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postTemplateSourceGroupRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete a Market Code . <p><strong>OperationId:</strong>removeMarketCode</p>
     * Delete a Market Code
     */
    removeMarketCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.marketcode === null || requestParameters.marketcode === undefined) {
                throw new runtime.RequiredError('marketcode', 'Required parameter requestParameters.marketcode was null or undefined when calling removeMarketCode.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling removeMarketCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/marketCodes/{marketcode}`.replace(`{${"marketcode"}}`, encodeURIComponent(String(requestParameters.marketcode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete a Market Code . <p><strong>OperationId:</strong>removeMarketCode</p>
     * Delete a Market Code
     */
    removeMarketCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeMarketCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete a Market Group . <p><strong>OperationId:</strong>removeMarketGroup</p>
     * Delete a Market Group
     */
    removeMarketGroupRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.marketGroupCode === null || requestParameters.marketGroupCode === undefined) {
                throw new runtime.RequiredError('marketGroupCode', 'Required parameter requestParameters.marketGroupCode was null or undefined when calling removeMarketGroup.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling removeMarketGroup.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/marketGroups/{marketGroupCode}`.replace(`{${"marketGroupCode"}}`, encodeURIComponent(String(requestParameters.marketGroupCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete a Market Group . <p><strong>OperationId:</strong>removeMarketGroup</p>
     * Delete a Market Group
     */
    removeMarketGroup(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeMarketGroupRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Pre Check In rules. <p><strong>OperationId:</strong>removePreCheckInRules</p>
     * Delete Pre Check In rules
     */
    removePreCheckInRulesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling removePreCheckInRules.');
            }
            const queryParameters = {};
            if (requestParameters.ruleType) {
                queryParameters['ruleType'] = requestParameters.ruleType;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate.toISOString().substring(0, 10);
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate.toISOString().substring(0, 10);
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.newStartDate !== undefined) {
                queryParameters['newStartDate'] = requestParameters.newStartDate.toISOString().substring(0, 10);
            }
            if (requestParameters.newEndDate !== undefined) {
                queryParameters['newEndDate'] = requestParameters.newEndDate.toISOString().substring(0, 10);
            }
            if (requestParameters.newDuration !== undefined) {
                queryParameters['newDuration'] = requestParameters.newDuration;
            }
            if (requestParameters.level) {
                queryParameters['level'] = requestParameters.level;
            }
            if (requestParameters.type) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.specialsCodes) {
                queryParameters['specialsCodes'] = requestParameters.specialsCodes;
            }
            if (requestParameters.marketCodes) {
                queryParameters['marketCodes'] = requestParameters.marketCodes;
            }
            if (requestParameters.absoluteFlag !== undefined) {
                queryParameters['absoluteFlag'] = requestParameters.absoluteFlag;
            }
            if (requestParameters.endTime !== undefined) {
                queryParameters['endTime'] = requestParameters.endTime;
            }
            if (requestParameters.startTime !== undefined) {
                queryParameters['startTime'] = requestParameters.startTime;
            }
            if (requestParameters.daysBeforeArrival !== undefined) {
                queryParameters['daysBeforeArrival'] = requestParameters.daysBeforeArrival;
            }
            if (requestParameters.daysAfterBooking !== undefined) {
                queryParameters['daysAfterBooking'] = requestParameters.daysAfterBooking;
            }
            if (requestParameters.hoursPriorToCheckIn !== undefined) {
                queryParameters['hoursPriorToCheckIn'] = requestParameters.hoursPriorToCheckIn;
            }
            if (requestParameters.hoursPostCheckIn !== undefined) {
                queryParameters['hoursPostCheckIn'] = requestParameters.hoursPostCheckIn;
            }
            if (requestParameters.ratePlansCodes) {
                queryParameters['ratePlansCodes'] = requestParameters.ratePlansCodes;
            }
            if (requestParameters.reservationTypesCodes) {
                queryParameters['reservationTypesCodes'] = requestParameters.reservationTypesCodes;
            }
            if (requestParameters.vIPCodes) {
                queryParameters['vIPCodes'] = requestParameters.vIPCodes;
            }
            if (requestParameters.originCodes) {
                queryParameters['originCodes'] = requestParameters.originCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/precheckinRules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Pre Check In rules. <p><strong>OperationId:</strong>removePreCheckInRules</p>
     * Delete Pre Check In rules
     */
    removePreCheckInRules(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removePreCheckInRulesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Service Request Code Priorities. <p><strong>OperationId:</strong>removeServiceRequestCodePriorities</p>
     * Delete Service Request Code Priorities
     */
    removeServiceRequestCodePrioritiesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.serviceRequestCode === null || requestParameters.serviceRequestCode === undefined) {
                throw new runtime.RequiredError('serviceRequestCode', 'Required parameter requestParameters.serviceRequestCode was null or undefined when calling removeServiceRequestCodePriorities.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling removeServiceRequestCodePriorities.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/serviceRequestCodes/{serviceRequestCode}/priorities`.replace(`{${"serviceRequestCode"}}`, encodeURIComponent(String(requestParameters.serviceRequestCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Service Request Code Priorities. <p><strong>OperationId:</strong>removeServiceRequestCodePriorities</p>
     * Delete Service Request Code Priorities
     */
    removeServiceRequestCodePriorities(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeServiceRequestCodePrioritiesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete configuration service request codes. <p><strong>OperationId:</strong>removeServiceRequestCodes</p>
     * Delete configuration service request codes
     */
    removeServiceRequestCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling removeServiceRequestCodes.');
            }
            const queryParameters = {};
            if (requestParameters.serviceRequestCode) {
                queryParameters['serviceRequestCode'] = requestParameters.serviceRequestCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/serviceRequestCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete configuration service request codes. <p><strong>OperationId:</strong>removeServiceRequestCodes</p>
     * Delete configuration service request codes
     */
    removeServiceRequestCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeServiceRequestCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to remove a Source Code. Only one Source Code can be Use this API to removed at a time. <p><strong>OperationId:</strong>removeSourceCode</p>
     * Delete a Source Code
     */
    removeSourceCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sourceCode === null || requestParameters.sourceCode === undefined) {
                throw new runtime.RequiredError('sourceCode', 'Required parameter requestParameters.sourceCode was null or undefined when calling removeSourceCode.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling removeSourceCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/sourceCodes/{sourceCode}`.replace(`{${"sourceCode"}}`, encodeURIComponent(String(requestParameters.sourceCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to remove a Source Code. Only one Source Code can be Use this API to removed at a time. <p><strong>OperationId:</strong>removeSourceCode</p>
     * Delete a Source Code
     */
    removeSourceCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeSourceCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete a Source Group.  Only one Source Group can be Use this API to deleted at a time. <p><strong>OperationId:</strong>removeSourceGroup</p>
     * Delete a Source Group
     */
    removeSourceGroupRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sourceGroupCode === null || requestParameters.sourceGroupCode === undefined) {
                throw new runtime.RequiredError('sourceGroupCode', 'Required parameter requestParameters.sourceGroupCode was null or undefined when calling removeSourceGroup.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling removeSourceGroup.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/sourceGroups/{sourceGroupCode}`.replace(`{${"sourceGroupCode"}}`, encodeURIComponent(String(requestParameters.sourceGroupCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete a Source Group.  Only one Source Group can be Use this API to deleted at a time. <p><strong>OperationId:</strong>removeSourceGroup</p>
     * Delete a Source Group
     */
    removeSourceGroup(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeSourceGroupRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API is used to  delete a Template Market Code. . <p><strong>OperationId:</strong>removeTemplateMarketCode</p>
     * Delete a Market Code Template
     */
    removeTemplateMarketCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.marketcode === null || requestParameters.marketcode === undefined) {
                throw new runtime.RequiredError('marketcode', 'Required parameter requestParameters.marketcode was null or undefined when calling removeTemplateMarketCode.');
            }
            const queryParameters = {};
            if (requestParameters.templateMarketCode !== undefined) {
                queryParameters['templateMarketCode'] = requestParameters.templateMarketCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/marketCodeTemplates/{marketcode}`.replace(`{${"marketcode"}}`, encodeURIComponent(String(requestParameters.marketcode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API is used to  delete a Template Market Code. . <p><strong>OperationId:</strong>removeTemplateMarketCode</p>
     * Delete a Market Code Template
     */
    removeTemplateMarketCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeTemplateMarketCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to delete a template Market Group. <p><strong>OperationId:</strong>removeTemplateMarketGroup</p>
     * Delete market Group Template
     */
    removeTemplateMarketGroupRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.marketGroupCode === null || requestParameters.marketGroupCode === undefined) {
                throw new runtime.RequiredError('marketGroupCode', 'Required parameter requestParameters.marketGroupCode was null or undefined when calling removeTemplateMarketGroup.');
            }
            const queryParameters = {};
            if (requestParameters.templateMarketGroup !== undefined) {
                queryParameters['templateMarketGroup'] = requestParameters.templateMarketGroup;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/marketGroupTemplate/{marketGroupCode}`.replace(`{${"marketGroupCode"}}`, encodeURIComponent(String(requestParameters.marketGroupCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete a template Market Group. <p><strong>OperationId:</strong>removeTemplateMarketGroup</p>
     * Delete market Group Template
     */
    removeTemplateMarketGroup(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeTemplateMarketGroupRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Use this API to remove a Template Source Code. <p><strong>OperationId:</strong>removeTemplateSourceCode</p>
     * Delete a Template Source Code
     */
    removeTemplateSourceCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sourceCode === null || requestParameters.sourceCode === undefined) {
                throw new runtime.RequiredError('sourceCode', 'Required parameter requestParameters.sourceCode was null or undefined when calling removeTemplateSourceCode.');
            }
            const queryParameters = {};
            if (requestParameters.templateSourceCode !== undefined) {
                queryParameters['templateSourceCode'] = requestParameters.templateSourceCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/templates/sourceCodes/{sourceCode}`.replace(`{${"sourceCode"}}`, encodeURIComponent(String(requestParameters.sourceCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     *  Use this API to remove a Template Source Code. <p><strong>OperationId:</strong>removeTemplateSourceCode</p>
     * Delete a Template Source Code
     */
    removeTemplateSourceCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeTemplateSourceCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Use this API to remove a Template Source Group. <p><strong>OperationId:</strong>removeTemplateSourceGroup</p>
     * Delete a Template Source Group
     */
    removeTemplateSourceGroupRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.templateSourceGroup !== undefined) {
                queryParameters['templateSourceGroup'] = requestParameters.templateSourceGroup;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/templates/sourceGroups`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     *  Use this API to remove a Template Source Group. <p><strong>OperationId:</strong>removeTemplateSourceGroup</p>
     * Delete a Template Source Group
     */
    removeTemplateSourceGroup(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeTemplateSourceGroupRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.HotelConfigApi = HotelConfigApi;
/**
 * @export
 */
exports.GetPolicySchedulesPolicyTypeEnum = {
    Deposit: 'Deposit',
    Cancellation: 'Cancellation'
};
/**
 * @export
 */
exports.GetPreCheckInRulesRuleTypeEnum = {
    Specials: 'Specials',
    MarketCodes: 'MarketCodes',
    TimeLimit: 'TimeLimit',
    RatePlans: 'RatePlans',
    ReservationTypes: 'ReservationTypes',
    VipCodes: 'VIPCodes',
    Memberships: 'Memberships',
    OriginCodes: 'OriginCodes'
};
/**
 * @export
 */
exports.RemovePreCheckInRulesRuleTypeEnum = {
    Specials: 'Specials',
    MarketCodes: 'MarketCodes',
    TimeLimit: 'TimeLimit',
    RatePlans: 'RatePlans',
    ReservationTypes: 'ReservationTypes',
    VipCodes: 'VIPCodes',
    Memberships: 'Memberships',
    OriginCodes: 'OriginCodes'
};
