"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetScriptsTypeEnum = exports.ChainConfigApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class ChainConfigApi extends runtime.BaseAPI {
    /**
     * Use this API to update Block Conversions. <p><strong>OperationId:</strong>changeBlockConversions</p>
     * Change Block Conversions
     */
    changeBlockConversionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blockConversions/{blockConversionCode}`.replace(`{${"blockConversionCode"}}`, encodeURIComponent(String(requestParameters.blockConversionCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ChangeBlockConversionsRequestToJSON)(requestParameters.blockConversionsToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Block Conversions. <p><strong>OperationId:</strong>changeBlockConversions</p>
     * Change Block Conversions
     */
    changeBlockConversions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeBlockConversionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Block Ranking. <p><strong>OperationId:</strong>changeBlockRankings</p>
     * Change Block Ranking
     */
    changeBlockRankingsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blockRankings/{blockRankingsCode}`.replace(`{${"blockRankingsCode"}}`, encodeURIComponent(String(requestParameters.blockRankingsCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ChangeBlockRankingsRequestToJSON)(requestParameters.blockRankingsToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Block Ranking. <p><strong>OperationId:</strong>changeBlockRankings</p>
     * Change Block Ranking
     */
    changeBlockRankings(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeBlockRankingsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Global Action Codes. <p><strong>OperationId:</strong>changeGlobalActionCodes</p>
     * Change Global Action Codes
     */
    changeGlobalActionCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/globalActionCodes/{actionCode}`.replace(`{${"actionCode"}}`, encodeURIComponent(String(requestParameters.actionCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ChangeGlobalActionCodesRequestToJSON)(requestParameters.globalActionCodesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Global Action Codes. <p><strong>OperationId:</strong>changeGlobalActionCodes</p>
     * Change Global Action Codes
     */
    changeGlobalActionCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeGlobalActionCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Scripts. <p><strong>OperationId:</strong>changeScripts</p>
     * Change Scripts
     */
    changeScriptsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/scripts/{scriptCode}`.replace(`{${"scriptCode"}}`, encodeURIComponent(String(requestParameters.scriptCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ChangeScriptsRequestToJSON)(requestParameters.scriptsToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Scripts. <p><strong>OperationId:</strong>changeScripts</p>
     * Change Scripts
     */
    changeScripts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeScriptsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Booking Type. <p><strong>OperationId:</strong>deleteBookingTypes</p>
     * Delete Booking Type
     */
    deleteBookingTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.bookingTypesCodes) {
                queryParameters['bookingTypesCodes'] = requestParameters.bookingTypesCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/bookingTypes/{bookingTypesId}`.replace(`{${"bookingTypesId"}}`, encodeURIComponent(String(requestParameters.bookingTypesId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Booking Type. <p><strong>OperationId:</strong>deleteBookingTypes</p>
     * Delete Booking Type
     */
    deleteBookingTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteBookingTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Cancellation Codes. <p><strong>OperationId:</strong>deleteCancellationCodes</p>
     * Delete Cancellation Codes
     */
    deleteCancellationCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.cancellationCodes) {
                queryParameters['cancellationCodes'] = requestParameters.cancellationCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cancellationCodes/{cancellationCodesId}`.replace(`{${"cancellationCodesId"}}`, encodeURIComponent(String(requestParameters.cancellationCodesId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Cancellation Codes. <p><strong>OperationId:</strong>deleteCancellationCodes</p>
     * Delete Cancellation Codes
     */
    deleteCancellationCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCancellationCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Discount Reasons. <p><strong>OperationId:</strong>deleteDiscountReasons</p>
     * Delete Discount Reasons
     */
    deleteDiscountReasonsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/discountReasons/{discountReasonsId}`.replace(`{${"discountReasonsId"}}`, encodeURIComponent(String(requestParameters.discountReasonsId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Discount Reasons. <p><strong>OperationId:</strong>deleteDiscountReasons</p>
     * Delete Discount Reasons
     */
    deleteDiscountReasons(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteDiscountReasonsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Entry Points. <p><strong>OperationId:</strong>deleteEntryPoints</p>
     * Delete Entry Points
     */
    deleteEntryPointsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.entryPointsCodes) {
                queryParameters['entryPointsCodes'] = requestParameters.entryPointsCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/entryPoints/{entryPointsId}`.replace(`{${"entryPointsId"}}`, encodeURIComponent(String(requestParameters.entryPointsId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Entry Points. <p><strong>OperationId:</strong>deleteEntryPoints</p>
     * Delete Entry Points
     */
    deleteEntryPoints(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteEntryPointsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Move Reason Codes. <p><strong>OperationId:</strong>deleteMoveReasonCodes</p>
     * Delete Move Reason Codes
     */
    deleteMoveReasonCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.moveReasonCodes) {
                queryParameters['moveReasonCodes'] = requestParameters.moveReasonCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/moveReasonCodes/{moveReasonCodesId}`.replace(`{${"moveReasonCodesId"}}`, encodeURIComponent(String(requestParameters.moveReasonCodesId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Move Reason Codes. <p><strong>OperationId:</strong>deleteMoveReasonCodes</p>
     * Delete Move Reason Codes
     */
    deleteMoveReasonCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteMoveReasonCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Origin Codes. <p><strong>OperationId:</strong>deleteOriginCodes</p>
     * Delete Origin Codes
     */
    deleteOriginCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.originCodes) {
                queryParameters['originCodes'] = requestParameters.originCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/originCodes/{originCodesId}`.replace(`{${"originCodesId"}}`, encodeURIComponent(String(requestParameters.originCodesId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Origin Codes. <p><strong>OperationId:</strong>deleteOriginCodes</p>
     * Delete Origin Codes
     */
    deleteOriginCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteOriginCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Purpose Of Stays. <p><strong>OperationId:</strong>deletePurposeOfStays</p>
     * Delete Purpose Of Stays
     */
    deletePurposeOfStaysRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.purposeOfStaysCodes) {
                queryParameters['purposeOfStaysCodes'] = requestParameters.purposeOfStaysCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/purposeOfStays/{purposeOfStaysId}`.replace(`{${"purposeOfStaysId"}}`, encodeURIComponent(String(requestParameters.purposeOfStaysId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Purpose Of Stays. <p><strong>OperationId:</strong>deletePurposeOfStays</p>
     * Delete Purpose Of Stays
     */
    deletePurposeOfStays(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deletePurposeOfStaysRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Waitlist Codes. <p><strong>OperationId:</strong>deleteWaitlistCodes</p>
     * Delete Waitlist Codes
     */
    deleteWaitlistCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.waitlistCodes) {
                queryParameters['waitlistCodes'] = requestParameters.waitlistCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/waitlistCodes/{waitlistCodesId}`.replace(`{${"waitlistCodesId"}}`, encodeURIComponent(String(requestParameters.waitlistCodesId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Waitlist Codes. <p><strong>OperationId:</strong>deleteWaitlistCodes</p>
     * Delete Waitlist Codes
     */
    deleteWaitlistCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteWaitlistCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Waitlist Priorities. <p><strong>OperationId:</strong>deleteWaitlistPriorities</p>
     * Delete Waitlist Priorities
     */
    deleteWaitlistPrioritiesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.waitlistPrioritiesCodes) {
                queryParameters['waitlistPrioritiesCodes'] = requestParameters.waitlistPrioritiesCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/waitlistPriorities/{waitlistPrioritiesId}`.replace(`{${"waitlistPrioritiesId"}}`, encodeURIComponent(String(requestParameters.waitlistPrioritiesId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Waitlist Priorities. <p><strong>OperationId:</strong>deleteWaitlistPriorities</p>
     * Delete Waitlist Priorities
     */
    deleteWaitlistPriorities(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteWaitlistPrioritiesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Block Conversions. <p><strong>OperationId:</strong>getBlockConversions</p>
     * Get Block Conversions
     */
    getBlockConversionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blockConversions`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BlockConversionsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Block Conversions. <p><strong>OperationId:</strong>getBlockConversions</p>
     * Get Block Conversions
     */
    getBlockConversions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBlockConversionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Block Rankings. <p><strong>OperationId:</strong>getBlockRankings</p>
     * Get Block Rankings
     */
    getBlockRankingsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blockRankings`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BlockRankingsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Block Rankings. <p><strong>OperationId:</strong>getBlockRankings</p>
     * Get Block Rankings
     */
    getBlockRankings(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBlockRankingsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Booking Types. <p><strong>OperationId:</strong>getBookingTypes</p>
     * Get Booking Types
     */
    getBookingTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/bookingTypes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BookingTypesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Booking Types. <p><strong>OperationId:</strong>getBookingTypes</p>
     * Get Booking Types
     */
    getBookingTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBookingTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Cancellation Codes. <p><strong>OperationId:</strong>getCancellationCodes</p>
     * Get Cancellation Codes
     */
    getCancellationCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cancellationCodes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CancellationCodesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Cancellation Codes. <p><strong>OperationId:</strong>getCancellationCodes</p>
     * Get Cancellation Codes
     */
    getCancellationCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCancellationCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Discount Reasons. <p><strong>OperationId:</strong>getDiscountReasons</p>
     * Get Discount Reasons
     */
    getDiscountReasonsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchAdvanced !== undefined) {
                queryParameters['fetchAdvanced'] = requestParameters.fetchAdvanced;
            }
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.fetchNonAdvanced !== undefined) {
                queryParameters['fetchNonAdvanced'] = requestParameters.fetchNonAdvanced;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/discountReasons`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DiscountReasonsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Discount Reasons. <p><strong>OperationId:</strong>getDiscountReasons</p>
     * Get Discount Reasons
     */
    getDiscountReasons(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getDiscountReasonsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Entry Points. <p><strong>OperationId:</strong>getEntryPoints</p>
     * Get Entry Points
     */
    getEntryPointsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/entryPoints`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.EntryPointsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Entry Points. <p><strong>OperationId:</strong>getEntryPoints</p>
     * Get Entry Points
     */
    getEntryPoints(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getEntryPointsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Global Action Codes. <p><strong>OperationId:</strong>getGlobalActionCodes</p>
     * Get Global Action Codes
     */
    getGlobalActionCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/globalActionCodes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GlobalActionCodesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Global Action Codes. <p><strong>OperationId:</strong>getGlobalActionCodes</p>
     * Get Global Action Codes
     */
    getGlobalActionCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getGlobalActionCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Move Reason Codes. <p><strong>OperationId:</strong>getMoveReasonCodes</p>
     * Get Move Reason Codes
     */
    getMoveReasonCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/moveReasonCodes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MoveReasonCodesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Move Reason Codes. <p><strong>OperationId:</strong>getMoveReasonCodes</p>
     * Get Move Reason Codes
     */
    getMoveReasonCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMoveReasonCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Origin Codes. <p><strong>OperationId:</strong>getOriginCodes</p>
     * Get Origin Codes
     */
    getOriginCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/originCodes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OriginCodesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Origin Codes. <p><strong>OperationId:</strong>getOriginCodes</p>
     * Get Origin Codes
     */
    getOriginCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOriginCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Purpose Of Stays. <p><strong>OperationId:</strong>getPurposeOfStays</p>
     * Get Purpose Of Stays
     */
    getPurposeOfStaysRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/purposeOfStays`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PurposeOfStaysDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Purpose Of Stays. <p><strong>OperationId:</strong>getPurposeOfStays</p>
     * Get Purpose Of Stays
     */
    getPurposeOfStays(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPurposeOfStaysRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Scripts. <p><strong>OperationId:</strong>getScripts</p>
     * Get Scripts
     */
    getScriptsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.croCodes) {
                queryParameters['croCodes'] = requestParameters.croCodes;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.languageCodes) {
                queryParameters['languageCodes'] = requestParameters.languageCodes;
            }
            if (requestParameters.membershipTypesCodes) {
                queryParameters['membershipTypesCodes'] = requestParameters.membershipTypesCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/scripts`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ScriptsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Scripts. <p><strong>OperationId:</strong>getScripts</p>
     * Get Scripts
     */
    getScripts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getScriptsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Waitlist Codes. <p><strong>OperationId:</strong>getWaitlistCodes</p>
     * Get Waitlist Codes
     */
    getWaitlistCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/waitlistCodes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.WaitlistCodesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Waitlist Codes. <p><strong>OperationId:</strong>getWaitlistCodes</p>
     * Get Waitlist Codes
     */
    getWaitlistCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getWaitlistCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Waitlist Priorities. <p><strong>OperationId:</strong>getWaitlistPriorities</p>
     * Get Waitlist Priorities
     */
    getWaitlistPrioritiesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/waitlistPriorities`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.WaitlistPrioritiesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Waitlist Priorities. <p><strong>OperationId:</strong>getWaitlistPriorities</p>
     * Get Waitlist Priorities
     */
    getWaitlistPriorities(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getWaitlistPrioritiesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Block Conversions. <p><strong>OperationId:</strong>postBlockConversions</p>
     * Create Block Conversions
     */
    postBlockConversionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blockConversions`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostBlockConversionsRequestToJSON)(requestParameters.blockConversionsCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Block Conversions. <p><strong>OperationId:</strong>postBlockConversions</p>
     * Create Block Conversions
     */
    postBlockConversions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postBlockConversionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Block Rankings. <p><strong>OperationId:</strong>postBlockRankings</p>
     * Create Block Rankings
     */
    postBlockRankingsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blockRankings`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostBlockRankingsRequestToJSON)(requestParameters.blockRankingsCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Block Rankings. <p><strong>OperationId:</strong>postBlockRankings</p>
     * Create Block Rankings
     */
    postBlockRankings(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postBlockRankingsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Booking Types. <p><strong>OperationId:</strong>postBookingTypes</p>
     * Create Booking Types
     */
    postBookingTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/bookingTypes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostBookingTypesRequestToJSON)(requestParameters.bookingTypesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Booking Types. <p><strong>OperationId:</strong>postBookingTypes</p>
     * Create Booking Types
     */
    postBookingTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postBookingTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Cancellation Codes. <p><strong>OperationId:</strong>postCancellationCodes</p>
     * Create Cancellation Codes
     */
    postCancellationCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cancellationCodes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostCancellationCodesRequestToJSON)(requestParameters.cancellationCodesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Cancellation Codes. <p><strong>OperationId:</strong>postCancellationCodes</p>
     * Create Cancellation Codes
     */
    postCancellationCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCancellationCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Discount Reasons. <p><strong>OperationId:</strong>postDiscountReasons</p>
     * Create Discount Reasons
     */
    postDiscountReasonsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/discountReasons`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostDiscountReasonsRequestToJSON)(requestParameters.discountReasonsCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Discount Reasons. <p><strong>OperationId:</strong>postDiscountReasons</p>
     * Create Discount Reasons
     */
    postDiscountReasons(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postDiscountReasonsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Entry Points. <p><strong>OperationId:</strong>postEntryPoints</p>
     * Create Entry Points
     */
    postEntryPointsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/entryPoints`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostEntryPointsRequestToJSON)(requestParameters.entryPointsCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Entry Points. <p><strong>OperationId:</strong>postEntryPoints</p>
     * Create Entry Points
     */
    postEntryPoints(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postEntryPointsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Global Action Codes. <p><strong>OperationId:</strong>postGlobalActionCodes</p>
     * Create Global Action Codes
     */
    postGlobalActionCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/globalActionCodes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostGlobalActionCodesRequestToJSON)(requestParameters.globalActionCodesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Global Action Codes. <p><strong>OperationId:</strong>postGlobalActionCodes</p>
     * Create Global Action Codes
     */
    postGlobalActionCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postGlobalActionCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Move Reason Codes. <p><strong>OperationId:</strong>postMoveReasonCodes</p>
     * Create Move Reason Codes
     */
    postMoveReasonCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/moveReasonCodes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostMoveReasonCodesRequestToJSON)(requestParameters.moveReasonCodesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Move Reason Codes. <p><strong>OperationId:</strong>postMoveReasonCodes</p>
     * Create Move Reason Codes
     */
    postMoveReasonCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postMoveReasonCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Origin Codes. <p><strong>OperationId:</strong>postOriginCodes</p>
     * Create Origin Codes
     */
    postOriginCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/originCodes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostOriginCodesRequestToJSON)(requestParameters.originCodesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Origin Codes. <p><strong>OperationId:</strong>postOriginCodes</p>
     * Create Origin Codes
     */
    postOriginCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postOriginCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Purpose Of Stays. <p><strong>OperationId:</strong>postPurposeOfStays</p>
     * Create Purpose Of Stays
     */
    postPurposeOfStaysRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/purposeOfStays`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostPurposeOfStaysRequestToJSON)(requestParameters.purposeOfStaysCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Purpose Of Stays. <p><strong>OperationId:</strong>postPurposeOfStays</p>
     * Create Purpose Of Stays
     */
    postPurposeOfStays(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postPurposeOfStaysRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Scripts. <p><strong>OperationId:</strong>postScripts</p>
     * Create Scripts
     */
    postScriptsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/scripts`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostScriptsRequestToJSON)(requestParameters.scriptsCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Scripts. <p><strong>OperationId:</strong>postScripts</p>
     * Create Scripts
     */
    postScripts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postScriptsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Waitlist Codes. <p><strong>OperationId:</strong>postWaitlistCodes</p>
     * Create Waitlist Codes
     */
    postWaitlistCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/waitlistCodes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostWaitlistCodesRequestToJSON)(requestParameters.waitlistCodesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Waitlist Codes. <p><strong>OperationId:</strong>postWaitlistCodes</p>
     * Create Waitlist Codes
     */
    postWaitlistCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postWaitlistCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Waitlist Priorities. <p><strong>OperationId:</strong>postWaitlistPriorities</p>
     * Create Waitlist Priorities
     */
    postWaitlistPrioritiesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/waitlistPriorities`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostWaitlistPrioritiesRequestToJSON)(requestParameters.waitlistPrioritiesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Waitlist Priorities. <p><strong>OperationId:</strong>postWaitlistPriorities</p>
     * Create Waitlist Priorities
     */
    postWaitlistPriorities(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postWaitlistPrioritiesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Booking Type. <p><strong>OperationId:</strong>putBookingTypes</p>
     * Change Booking Type
     */
    putBookingTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/bookingTypes/{bookingTypesId}`.replace(`{${"bookingTypesId"}}`, encodeURIComponent(String(requestParameters.bookingTypesId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutBookingTypesRequestToJSON)(requestParameters.bookingTypesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Booking Type. <p><strong>OperationId:</strong>putBookingTypes</p>
     * Change Booking Type
     */
    putBookingTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putBookingTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Cancellation Codes. <p><strong>OperationId:</strong>putCancellationCodes</p>
     * Change Cancellation Codes
     */
    putCancellationCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cancellationCodes/{cancellationCodesId}`.replace(`{${"cancellationCodesId"}}`, encodeURIComponent(String(requestParameters.cancellationCodesId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutCancellationCodesRequestToJSON)(requestParameters.cancellationCodesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Cancellation Codes. <p><strong>OperationId:</strong>putCancellationCodes</p>
     * Change Cancellation Codes
     */
    putCancellationCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putCancellationCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Discount Reasons. <p><strong>OperationId:</strong>putDiscountReasons</p>
     * Change Discount Reasons
     */
    putDiscountReasonsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/discountReasons/{discountReasonsId}`.replace(`{${"discountReasonsId"}}`, encodeURIComponent(String(requestParameters.discountReasonsId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutDiscountReasonsRequestToJSON)(requestParameters.discountReasonsToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Discount Reasons. <p><strong>OperationId:</strong>putDiscountReasons</p>
     * Change Discount Reasons
     */
    putDiscountReasons(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putDiscountReasonsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Entry Points. <p><strong>OperationId:</strong>putEntryPoints</p>
     * Change Entry Points
     */
    putEntryPointsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/entryPoints/{entryPointsId}`.replace(`{${"entryPointsId"}}`, encodeURIComponent(String(requestParameters.entryPointsId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutEntryPointsRequestToJSON)(requestParameters.entryPointsToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Entry Points. <p><strong>OperationId:</strong>putEntryPoints</p>
     * Change Entry Points
     */
    putEntryPoints(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putEntryPointsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Move Reason Codes. <p><strong>OperationId:</strong>putMoveReasonCodes</p>
     * Change Move Reason Codes
     */
    putMoveReasonCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/moveReasonCodes/{moveReasonCodesId}`.replace(`{${"moveReasonCodesId"}}`, encodeURIComponent(String(requestParameters.moveReasonCodesId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutMoveReasonCodesRequestToJSON)(requestParameters.moveReasonCodesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Move Reason Codes. <p><strong>OperationId:</strong>putMoveReasonCodes</p>
     * Change Move Reason Codes
     */
    putMoveReasonCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putMoveReasonCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Origin Codes. <p><strong>OperationId:</strong>putOriginCodes</p>
     * Change Origin Codes
     */
    putOriginCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/originCodes/{originCodesId}`.replace(`{${"originCodesId"}}`, encodeURIComponent(String(requestParameters.originCodesId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutOriginCodesRequestToJSON)(requestParameters.originCodesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Origin Codes. <p><strong>OperationId:</strong>putOriginCodes</p>
     * Change Origin Codes
     */
    putOriginCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putOriginCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Purpose Of Stays. <p><strong>OperationId:</strong>putPurposeOfStays</p>
     * Change Purpose Of Stays
     */
    putPurposeOfStaysRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/purposeOfStays/{purposeOfStaysId}`.replace(`{${"purposeOfStaysId"}}`, encodeURIComponent(String(requestParameters.purposeOfStaysId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutPurposeOfStaysRequestToJSON)(requestParameters.purposeOfStaysToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Purpose Of Stays. <p><strong>OperationId:</strong>putPurposeOfStays</p>
     * Change Purpose Of Stays
     */
    putPurposeOfStays(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putPurposeOfStaysRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Waitlist Codes. <p><strong>OperationId:</strong>putWaitlistCodes</p>
     * Change Waitlist Codes
     */
    putWaitlistCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/waitlistCodes/{waitlistCodesId}`.replace(`{${"waitlistCodesId"}}`, encodeURIComponent(String(requestParameters.waitlistCodesId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutWaitlistCodesRequestToJSON)(requestParameters.waitlistCodesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Waitlist Codes. <p><strong>OperationId:</strong>putWaitlistCodes</p>
     * Change Waitlist Codes
     */
    putWaitlistCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putWaitlistCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Waitlist Priorities. <p><strong>OperationId:</strong>putWaitlistPriorities</p>
     * Change Waitlist Priorities
     */
    putWaitlistPrioritiesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/waitlistPriorities/{waitlistPrioritiesId}`.replace(`{${"waitlistPrioritiesId"}}`, encodeURIComponent(String(requestParameters.waitlistPrioritiesId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutWaitlistPrioritiesRequestToJSON)(requestParameters.waitlistPrioritiesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Waitlist Priorities. <p><strong>OperationId:</strong>putWaitlistPriorities</p>
     * Change Waitlist Priorities
     */
    putWaitlistPriorities(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putWaitlistPrioritiesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Block Conversions. <p><strong>OperationId:</strong>removeBlockConversions</p>
     * Delete Block Conversions
     */
    removeBlockConversionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.blockConversionsCodes) {
                queryParameters['blockConversionsCodes'] = requestParameters.blockConversionsCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blockConversions/{blockConversionCode}`.replace(`{${"blockConversionCode"}}`, encodeURIComponent(String(requestParameters.blockConversionCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Block Conversions. <p><strong>OperationId:</strong>removeBlockConversions</p>
     * Delete Block Conversions
     */
    removeBlockConversions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeBlockConversionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Block Ranking. <p><strong>OperationId:</strong>removeBlockRankings</p>
     * Delete Block Ranking
     */
    removeBlockRankingsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.blockRankingsCodes) {
                queryParameters['blockRankingsCodes'] = requestParameters.blockRankingsCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blockRankings/{blockRankingsCode}`.replace(`{${"blockRankingsCode"}}`, encodeURIComponent(String(requestParameters.blockRankingsCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Block Ranking. <p><strong>OperationId:</strong>removeBlockRankings</p>
     * Delete Block Ranking
     */
    removeBlockRankings(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeBlockRankingsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Global Action Codes. <p><strong>OperationId:</strong>removeGlobalActionCodes</p>
     * Delete Global Action Codes
     */
    removeGlobalActionCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.globalActionCodesCodes) {
                queryParameters['globalActionCodesCodes'] = requestParameters.globalActionCodesCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/globalActionCodes/{actionCode}`.replace(`{${"actionCode"}}`, encodeURIComponent(String(requestParameters.actionCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Global Action Codes. <p><strong>OperationId:</strong>removeGlobalActionCodes</p>
     * Delete Global Action Codes
     */
    removeGlobalActionCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeGlobalActionCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Scripts. <p><strong>OperationId:</strong>removeScripts</p>
     * Change Scripts
     */
    removeScriptsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.idContext) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type) {
                queryParameters['type'] = requestParameters.type;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/scripts/{scriptCode}`.replace(`{${"scriptCode"}}`, encodeURIComponent(String(requestParameters.scriptCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Scripts. <p><strong>OperationId:</strong>removeScripts</p>
     * Change Scripts
     */
    removeScripts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeScriptsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.ChainConfigApi = ChainConfigApi;
/**
 * @export
 */
exports.GetScriptsTypeEnum = {
    ClosingScript: 'ClosingScript',
    WebRegCard: 'WebRegCard'
};
