"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Configuration API
 * APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockSalesAllowanceActivityLogTypeToJSON = exports.BlockSalesAllowanceActivityLogTypeFromJSONTyped = exports.BlockSalesAllowanceActivityLogTypeFromJSON = exports.instanceOfBlockSalesAllowanceActivityLogType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the BlockSalesAllowanceActivityLogType interface.
 */
function instanceOfBlockSalesAllowanceActivityLogType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfBlockSalesAllowanceActivityLogType = instanceOfBlockSalesAllowanceActivityLogType;
function BlockSalesAllowanceActivityLogTypeFromJSON(json) {
    return BlockSalesAllowanceActivityLogTypeFromJSONTyped(json, false);
}
exports.BlockSalesAllowanceActivityLogTypeFromJSON = BlockSalesAllowanceActivityLogTypeFromJSON;
function BlockSalesAllowanceActivityLogTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'logDate': !(0, runtime_1.exists)(json, 'logDate') ? undefined : json['logDate'],
        'salesAllowanceDate': !(0, runtime_1.exists)(json, 'salesAllowanceDate') ? undefined : json['salesAllowanceDate'],
        'oldQuantity': !(0, runtime_1.exists)(json, 'oldQuantity') ? undefined : json['oldQuantity'],
        'newQuantity': !(0, runtime_1.exists)(json, 'newQuantity') ? undefined : json['newQuantity'],
        'refActionId': !(0, runtime_1.exists)(json, 'refActionId') ? undefined : json['refActionId'],
        'logUserId': !(0, runtime_1.exists)(json, 'logUserId') ? undefined : json['logUserId'],
        'logUserName': !(0, runtime_1.exists)(json, 'logUserName') ? undefined : json['logUserName'],
        'actionType': !(0, runtime_1.exists)(json, 'actionType') ? undefined : json['actionType'],
        'ipAddress': !(0, runtime_1.exists)(json, 'ipAddress') ? undefined : json['ipAddress'],
    };
}
exports.BlockSalesAllowanceActivityLogTypeFromJSONTyped = BlockSalesAllowanceActivityLogTypeFromJSONTyped;
function BlockSalesAllowanceActivityLogTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'logDate': value.logDate,
        'salesAllowanceDate': value.salesAllowanceDate,
        'oldQuantity': value.oldQuantity,
        'newQuantity': value.newQuantity,
        'refActionId': value.refActionId,
        'logUserId': value.logUserId,
        'logUserName': value.logUserName,
        'actionType': value.actionType,
        'ipAddress': value.ipAddress,
    };
}
exports.BlockSalesAllowanceActivityLogTypeToJSON = BlockSalesAllowanceActivityLogTypeToJSON;
