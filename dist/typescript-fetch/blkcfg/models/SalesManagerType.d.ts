/**
 * OPERA Cloud Block Configuration API
 * APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { UniqueIDType } from './UniqueIDType';
/**
 * Sales Manager's information.
 * @export
 * @interface SalesManagerType
 */
export interface SalesManagerType {
    /**
     * Hotel Code of the Sales Manager
     * @type {string}
     * @memberof SalesManagerType
     */
    hotelId?: string;
    /**
     *
     * @type {UniqueIDType}
     * @memberof SalesManagerType
     */
    nameId?: UniqueIDType;
    /**
     * Sales Manager's code
     * @type {string}
     * @memberof SalesManagerType
     */
    salesManagerCode?: string;
    /**
     * Sales Manager's name
     * @type {string}
     * @memberof SalesManagerType
     */
    name?: string;
    /**
     * Indicates if the Sales manager has Group Room with Catering Goal
     * @type {boolean}
     * @memberof SalesManagerType
     */
    groupRoomWithCatering?: boolean;
    /**
     * Indicates if the Sales manager has Transient Room Goal
     * @type {boolean}
     * @memberof SalesManagerType
     */
    transientRoom?: boolean;
    /**
     * Indicates if the Sales manager has Activity Goal
     * @type {boolean}
     * @memberof SalesManagerType
     */
    activity?: boolean;
}
/**
 * Check if a given object implements the SalesManagerType interface.
 */
export declare function instanceOfSalesManagerType(value: object): boolean;
export declare function SalesManagerTypeFromJSON(json: any): SalesManagerType;
export declare function SalesManagerTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SalesManagerType;
export declare function SalesManagerTypeToJSON(value?: SalesManagerType | null): any;
