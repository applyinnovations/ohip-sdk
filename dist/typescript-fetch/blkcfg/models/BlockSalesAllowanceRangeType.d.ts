/**
 * OPERA Cloud Block Configuration API
 * APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Indicates the block sales allowance for a date range.
 * @export
 * @interface BlockSalesAllowanceRangeType
 */
export interface BlockSalesAllowanceRangeType {
    /**
     * Number of days before sales allowance date, after which unused quantity should set to 0.
     * @type {number}
     * @memberof BlockSalesAllowanceRangeType
     */
    cutoffDays?: number;
    /**
     * The ending value of the date range.
     * @type {Date}
     * @memberof BlockSalesAllowanceRangeType
     */
    end?: Date;
    /**
     *
     * @type {boolean}
     * @memberof BlockSalesAllowanceRangeType
     */
    friday?: boolean;
    /**
     * Contains Hotel Code.
     * @type {string}
     * @memberof BlockSalesAllowanceRangeType
     */
    hotelId?: string;
    /**
     * Flag to indicate if the sales allowance update is absolute or relative to the current value.
     * @type {boolean}
     * @memberof BlockSalesAllowanceRangeType
     */
    incrementFlag?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof BlockSalesAllowanceRangeType
     */
    monday?: boolean;
    /**
     * Flag to indicate if the sales allowance already exists for criteria then overwrite the records.
     * @type {boolean}
     * @memberof BlockSalesAllowanceRangeType
     */
    overwriteExistingSalesAllowance?: boolean;
    /**
     * Contains quantity for sales allowance.
     * @type {number}
     * @memberof BlockSalesAllowanceRangeType
     */
    quantity?: number;
    /**
     *
     * @type {boolean}
     * @memberof BlockSalesAllowanceRangeType
     */
    saturday?: boolean;
    /**
     * The starting value of the date range.
     * @type {Date}
     * @memberof BlockSalesAllowanceRangeType
     */
    start?: Date;
    /**
     *
     * @type {boolean}
     * @memberof BlockSalesAllowanceRangeType
     */
    sunday?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof BlockSalesAllowanceRangeType
     */
    thursday?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof BlockSalesAllowanceRangeType
     */
    tuesday?: boolean;
    /**
     * Flag to validate existing sales allowance records within criteria.
     * @type {boolean}
     * @memberof BlockSalesAllowanceRangeType
     */
    validateExistingSalesAllowance?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof BlockSalesAllowanceRangeType
     */
    wednesday?: boolean;
}
/**
 * Check if a given object implements the BlockSalesAllowanceRangeType interface.
 */
export declare function instanceOfBlockSalesAllowanceRangeType(value: object): boolean;
export declare function BlockSalesAllowanceRangeTypeFromJSON(json: any): BlockSalesAllowanceRangeType;
export declare function BlockSalesAllowanceRangeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockSalesAllowanceRangeType;
export declare function BlockSalesAllowanceRangeTypeToJSON(value?: BlockSalesAllowanceRangeType | null): any;
