"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Configuration API
 * APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockSalesAllowanceTypeToJSON = exports.BlockSalesAllowanceTypeFromJSONTyped = exports.BlockSalesAllowanceTypeFromJSON = exports.instanceOfBlockSalesAllowanceType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the BlockSalesAllowanceType interface.
 */
function instanceOfBlockSalesAllowanceType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfBlockSalesAllowanceType = instanceOfBlockSalesAllowanceType;
function BlockSalesAllowanceTypeFromJSON(json) {
    return BlockSalesAllowanceTypeFromJSONTyped(json, false);
}
exports.BlockSalesAllowanceTypeFromJSON = BlockSalesAllowanceTypeFromJSON;
function BlockSalesAllowanceTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'salesAllowanceDate': !(0, runtime_1.exists)(json, 'salesAllowanceDate') ? undefined : json['salesAllowanceDate'],
        'roomType': !(0, runtime_1.exists)(json, 'roomType') ? undefined : json['roomType'],
        'roomPool': !(0, runtime_1.exists)(json, 'roomPool') ? undefined : json['roomPool'],
        'allowance': !(0, runtime_1.exists)(json, 'allowance') ? undefined : json['allowance'],
        'booked': !(0, runtime_1.exists)(json, 'booked') ? undefined : json['booked'],
        'overBooked': !(0, runtime_1.exists)(json, 'overBooked') ? undefined : json['overBooked'],
        'cutoffDate': !(0, runtime_1.exists)(json, 'cutoffDate') ? undefined : json['cutoffDate'],
    };
}
exports.BlockSalesAllowanceTypeFromJSONTyped = BlockSalesAllowanceTypeFromJSONTyped;
function BlockSalesAllowanceTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'salesAllowanceDate': value.salesAllowanceDate,
        'roomType': value.roomType,
        'roomPool': value.roomPool,
        'allowance': value.allowance,
        'booked': value.booked,
        'overBooked': value.overBooked,
        'cutoffDate': value.cutoffDate,
    };
}
exports.BlockSalesAllowanceTypeToJSON = BlockSalesAllowanceTypeToJSON;
