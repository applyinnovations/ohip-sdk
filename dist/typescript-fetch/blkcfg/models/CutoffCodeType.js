"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Configuration API
 * APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CutoffCodeTypeToJSON = exports.CutoffCodeTypeFromJSONTyped = exports.CutoffCodeTypeFromJSON = exports.instanceOfCutoffCodeType = void 0;
const runtime_1 = require("../runtime");
const CutoffCodeDetailType_1 = require("./CutoffCodeDetailType");
/**
 * Check if a given object implements the CutoffCodeType interface.
 */
function instanceOfCutoffCodeType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCutoffCodeType = instanceOfCutoffCodeType;
function CutoffCodeTypeFromJSON(json) {
    return CutoffCodeTypeFromJSONTyped(json, false);
}
exports.CutoffCodeTypeFromJSON = CutoffCodeTypeFromJSON;
function CutoffCodeTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cutoffCodeDetails': !(0, runtime_1.exists)(json, 'cutoffCodeDetails') ? undefined : (json['cutoffCodeDetails'].map(CutoffCodeDetailType_1.CutoffCodeDetailTypeFromJSON)),
        'hotelCode': !(0, runtime_1.exists)(json, 'hotelCode') ? undefined : json['hotelCode'],
        'code': !(0, runtime_1.exists)(json, 'code') ? undefined : json['code'],
        'id': !(0, runtime_1.exists)(json, 'id') ? undefined : json['id'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'cutoffCodeStartDate': !(0, runtime_1.exists)(json, 'cutoffCodeStartDate') ? undefined : json['cutoffCodeStartDate'],
        'cutoffCodeEndDate': !(0, runtime_1.exists)(json, 'cutoffCodeEndDate') ? undefined : json['cutoffCodeEndDate'],
        'defaultDays': !(0, runtime_1.exists)(json, 'defaultDays') ? undefined : json['defaultDays'],
    };
}
exports.CutoffCodeTypeFromJSONTyped = CutoffCodeTypeFromJSONTyped;
function CutoffCodeTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cutoffCodeDetails': value.cutoffCodeDetails === undefined ? undefined : (value.cutoffCodeDetails.map(CutoffCodeDetailType_1.CutoffCodeDetailTypeToJSON)),
        'hotelCode': value.hotelCode,
        'code': value.code,
        'id': value.id,
        'description': value.description,
        'cutoffCodeStartDate': value.cutoffCodeStartDate,
        'cutoffCodeEndDate': value.cutoffCodeEndDate,
        'defaultDays': value.defaultDays,
    };
}
exports.CutoffCodeTypeToJSON = CutoffCodeTypeToJSON;
