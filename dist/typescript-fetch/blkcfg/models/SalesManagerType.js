"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Configuration API
 * APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SalesManagerTypeToJSON = exports.SalesManagerTypeFromJSONTyped = exports.SalesManagerTypeFromJSON = exports.instanceOfSalesManagerType = void 0;
const runtime_1 = require("../runtime");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the SalesManagerType interface.
 */
function instanceOfSalesManagerType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfSalesManagerType = instanceOfSalesManagerType;
function SalesManagerTypeFromJSON(json) {
    return SalesManagerTypeFromJSONTyped(json, false);
}
exports.SalesManagerTypeFromJSON = SalesManagerTypeFromJSON;
function SalesManagerTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'nameId': !(0, runtime_1.exists)(json, 'nameId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['nameId']),
        'salesManagerCode': !(0, runtime_1.exists)(json, 'salesManagerCode') ? undefined : json['salesManagerCode'],
        'name': !(0, runtime_1.exists)(json, 'name') ? undefined : json['name'],
        'groupRoomWithCatering': !(0, runtime_1.exists)(json, 'groupRoomWithCatering') ? undefined : json['groupRoomWithCatering'],
        'transientRoom': !(0, runtime_1.exists)(json, 'transientRoom') ? undefined : json['transientRoom'],
        'activity': !(0, runtime_1.exists)(json, 'activity') ? undefined : json['activity'],
    };
}
exports.SalesManagerTypeFromJSONTyped = SalesManagerTypeFromJSONTyped;
function SalesManagerTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'nameId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.nameId),
        'salesManagerCode': value.salesManagerCode,
        'name': value.name,
        'groupRoomWithCatering': value.groupRoomWithCatering,
        'transientRoom': value.transientRoom,
        'activity': value.activity,
    };
}
exports.SalesManagerTypeToJSON = SalesManagerTypeToJSON;
