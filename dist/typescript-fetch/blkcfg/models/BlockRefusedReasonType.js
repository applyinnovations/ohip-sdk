"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Configuration API
 * APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockRefusedReasonTypeToJSON = exports.BlockRefusedReasonTypeFromJSONTyped = exports.BlockRefusedReasonTypeFromJSON = exports.instanceOfBlockRefusedReasonType = void 0;
const runtime_1 = require("../runtime");
const ManagedByOptions_1 = require("./ManagedByOptions");
const TranslationTextType2000_1 = require("./TranslationTextType2000");
/**
 * Check if a given object implements the BlockRefusedReasonType interface.
 */
function instanceOfBlockRefusedReasonType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfBlockRefusedReasonType = instanceOfBlockRefusedReasonType;
function BlockRefusedReasonTypeFromJSON(json) {
    return BlockRefusedReasonTypeFromJSONTyped(json, false);
}
exports.BlockRefusedReasonTypeFromJSON = BlockRefusedReasonTypeFromJSON;
function BlockRefusedReasonTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'code': !(0, runtime_1.exists)(json, 'code') ? undefined : json['code'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : (0, TranslationTextType2000_1.TranslationTextType2000FromJSON)(json['description']),
        'displayOrder': !(0, runtime_1.exists)(json, 'displayOrder') ? undefined : json['displayOrder'],
        'inactive': !(0, runtime_1.exists)(json, 'inactive') ? undefined : json['inactive'],
        'managedBy': !(0, runtime_1.exists)(json, 'managedBy') ? undefined : (0, ManagedByOptions_1.ManagedByOptionsFromJSON)(json['managedBy']),
    };
}
exports.BlockRefusedReasonTypeFromJSONTyped = BlockRefusedReasonTypeFromJSONTyped;
function BlockRefusedReasonTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'code': value.code,
        'description': (0, TranslationTextType2000_1.TranslationTextType2000ToJSON)(value.description),
        'displayOrder': value.displayOrder,
        'inactive': value.inactive,
        'managedBy': (0, ManagedByOptions_1.ManagedByOptionsToJSON)(value.managedBy),
    };
}
exports.BlockRefusedReasonTypeToJSON = BlockRefusedReasonTypeToJSON;
