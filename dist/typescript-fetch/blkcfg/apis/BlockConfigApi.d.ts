/**
 * OPERA Cloud Block Configuration API
 * APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { BlockSalesAllowance, BlockSalesAllowanceRange, BlockStatusCodeDetails, CreateSalesManagerGoals, NextBlockStatusCode, NextBlockStatusCodeDetails, SalesManagerGoalsInfo, SalesManagersInfo, Status, StatusCodeDetails, WashScheduleCriteria, WashScheduleDetails } from '../models/index';
export interface DeleteBlockSalesAllowanceRangeRequest {
    hotelId: string;
    endDate: string;
    startDate: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    friday?: boolean;
    monday?: boolean;
    saturday?: boolean;
    sunday?: boolean;
    thursday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteBlockStatusCodeRequest {
    blockStatusCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteWashScheduleRequest {
    washScheduleCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockSalesAllowanceRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    endDateRange?: string;
    startDateRange?: string;
    includeRestricted?: boolean;
    roomTypesCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockStatusCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockStatusCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetNextBlockStatusCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    configuredOnly?: boolean;
    blockStatusCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetSalesManagerGoalsRequest {
    salesManagerId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    future?: boolean;
    fetchInstructions?: Set<GetSalesManagerGoalsFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetSalesManagerGoalsMultipleHotelIdsRequest {
    salesManagerId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelIds?: Array<string>;
    future?: boolean;
    fetchInstructions?: Set<GetSalesManagerGoalsMultipleHotelIdsFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetSalesManagersRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    ownerCodes?: Array<string>;
    firstName?: string;
    lastName?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetSalesManagersMultipleHotelIdsRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    ownerCodes?: Array<string>;
    firstName?: string;
    lastName?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetWashScheduleRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    washCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostBlockStatusCodeRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockStatusCodeDetails: BlockStatusCodeDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostSalesManagerGoalsRequest {
    salesManagerId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createSalesManagerGoals: CreateSalesManagerGoals;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostWashScheduleRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    washScheduleCriteria: WashScheduleCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutBlockStatusCodeRequest {
    blockStatusCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockStatusCodeDetails: BlockStatusCodeDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutNextBlockStatusCodesRequest {
    srcBlockStatusCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    nextBlockStatusCode: NextBlockStatusCode;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutSalesManagerGoalsRequest {
    salesGoalId: string;
    salesManagerId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    salesManagerGoalsInfo: SalesManagerGoalsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutWashScheduleRequest {
    washScheduleCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    washScheduleCriteria: WashScheduleCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface RemoveSalesManagerGoalRequest {
    salesGoalId: string;
    salesManagerId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface RemoveSalesManagerGoalsRequest {
    salesManagerId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    salesGoalId?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface SetBlockSalesAllowanceRangeRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockSalesAllowanceRange: BlockSalesAllowanceRange;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class BlockConfigApi extends runtime.BaseAPI {
    /**
     * You can use this API to delete block sales allowance range. <p><strong>OperationId:</strong>deleteBlockSalesAllowanceRange</p>
     * Delete block sales allowance range
     */
    deleteBlockSalesAllowanceRangeRaw(requestParameters: DeleteBlockSalesAllowanceRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to delete block sales allowance range. <p><strong>OperationId:</strong>deleteBlockSalesAllowanceRange</p>
     * Delete block sales allowance range
     */
    deleteBlockSalesAllowanceRange(requestParameters: DeleteBlockSalesAllowanceRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to delete block status code. <p><strong>OperationId:</strong>deleteBlockStatusCode</p>
     * Delete block status code
     */
    deleteBlockStatusCodeRaw(requestParameters: DeleteBlockStatusCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to delete block status code. <p><strong>OperationId:</strong>deleteBlockStatusCode</p>
     * Delete block status code
     */
    deleteBlockStatusCode(requestParameters: DeleteBlockStatusCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Delete a block wash schedule. <p><strong>OperationId:</strong>deleteWashSchedule</p>
     * Delete block wash schedule
     */
    deleteWashScheduleRaw(requestParameters: DeleteWashScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Delete a block wash schedule. <p><strong>OperationId:</strong>deleteWashSchedule</p>
     * Delete block wash schedule
     */
    deleteWashSchedule(requestParameters: DeleteWashScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to get Block Sales Allowance. <p><strong>OperationId:</strong>getBlockSalesAllowance</p>
     * Get Block Sales Allowance
     */
    getBlockSalesAllowanceRaw(requestParameters: GetBlockSalesAllowanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockSalesAllowance>>;
    /**
     * You can use this API to get Block Sales Allowance. <p><strong>OperationId:</strong>getBlockSalesAllowance</p>
     * Get Block Sales Allowance
     */
    getBlockSalesAllowance(requestParameters: GetBlockSalesAllowanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockSalesAllowance>;
    /**
     * This API fetches a list of configured status codes for the chain. It returns status code, description, and status type such as non-deduct, deduct, cancel, waitlist, inquiry, and actual. Status attributes, such as starting status, function diary visibility, allows pickup, and log catering changes are also returned in the response. Please note, that status codes are configured in a strict sequence that must be followed. In order to find available next statuses for the current block status, please use operation getNextBlockStatusCodes. <p><strong>OperationId:</strong>getBlockStatusCodes</p>
     * Get block status codes
     */
    getBlockStatusCodesRaw(requestParameters: GetBlockStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatusCodeDetails>>;
    /**
     * This API fetches a list of configured status codes for the chain. It returns status code, description, and status type such as non-deduct, deduct, cancel, waitlist, inquiry, and actual. Status attributes, such as starting status, function diary visibility, allows pickup, and log catering changes are also returned in the response. Please note, that status codes are configured in a strict sequence that must be followed. In order to find available next statuses for the current block status, please use operation getNextBlockStatusCodes. <p><strong>OperationId:</strong>getBlockStatusCodes</p>
     * Get block status codes
     */
    getBlockStatusCodes(requestParameters: GetBlockStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatusCodeDetails>;
    /**
     * Retrieve the next block Status Codes for a property. <p><strong>OperationId:</strong>getNextBlockStatusCodes</p>
     * Get next block status codes
     */
    getNextBlockStatusCodesRaw(requestParameters: GetNextBlockStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NextBlockStatusCodeDetails>>;
    /**
     * Retrieve the next block Status Codes for a property. <p><strong>OperationId:</strong>getNextBlockStatusCodes</p>
     * Get next block status codes
     */
    getNextBlockStatusCodes(requestParameters: GetNextBlockStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NextBlockStatusCodeDetails>;
    /**
     * You can use this API to retrieve individual Sales Manager Goals for a hotel, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagerGoals</p>
     * Get Sales Manager Goals by Hotel
     */
    getSalesManagerGoalsRaw(requestParameters: GetSalesManagerGoalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesManagerGoalsInfo>>;
    /**
     * You can use this API to retrieve individual Sales Manager Goals for a hotel, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagerGoals</p>
     * Get Sales Manager Goals by Hotel
     */
    getSalesManagerGoals(requestParameters: GetSalesManagerGoalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesManagerGoalsInfo>;
    /**
     * You can use this API to retrieve individual Sales Manager Goals, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagerGoalsMultipleHotelIds</p>
     * Get Sales Manager Goals
     */
    getSalesManagerGoalsMultipleHotelIdsRaw(requestParameters: GetSalesManagerGoalsMultipleHotelIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesManagerGoalsInfo>>;
    /**
     * You can use this API to retrieve individual Sales Manager Goals, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagerGoalsMultipleHotelIds</p>
     * Get Sales Manager Goals
     */
    getSalesManagerGoalsMultipleHotelIds(requestParameters: GetSalesManagerGoalsMultipleHotelIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesManagerGoalsInfo>;
    /**
     * You can use this API to retrieve multiple Sales Managers for a hotel, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagers</p>
     * Get Sales Managers by Hotel.
     */
    getSalesManagersRaw(requestParameters: GetSalesManagersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesManagersInfo>>;
    /**
     * You can use this API to retrieve multiple Sales Managers for a hotel, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagers</p>
     * Get Sales Managers by Hotel.
     */
    getSalesManagers(requestParameters: GetSalesManagersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesManagersInfo>;
    /**
     * You can use this API to retrieve multiple Sales Managers, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagersMultipleHotelIds</p>
     * Get Sales Managers.
     */
    getSalesManagersMultipleHotelIdsRaw(requestParameters: GetSalesManagersMultipleHotelIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesManagersInfo>>;
    /**
     * You can use this API to retrieve multiple Sales Managers, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagersMultipleHotelIds</p>
     * Get Sales Managers.
     */
    getSalesManagersMultipleHotelIds(requestParameters: GetSalesManagersMultipleHotelIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesManagersInfo>;
    /**
     * Get block wash schedules. <p><strong>OperationId:</strong>getWashSchedule</p>
     * Get block wash schedule
     */
    getWashScheduleRaw(requestParameters: GetWashScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WashScheduleDetails>>;
    /**
     * Get block wash schedules. <p><strong>OperationId:</strong>getWashSchedule</p>
     * Get block wash schedule
     */
    getWashSchedule(requestParameters: GetWashScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WashScheduleDetails>;
    /**
     * You can use this API to create a new block status code. <p><strong>OperationId:</strong>postBlockStatusCode</p>
     * Create a block status code
     */
    postBlockStatusCodeRaw(requestParameters: PostBlockStatusCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to create a new block status code. <p><strong>OperationId:</strong>postBlockStatusCode</p>
     * Create a block status code
     */
    postBlockStatusCode(requestParameters: PostBlockStatusCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to Create Sales Manager Goals for a Sales Manager ID.You must know the OPERA Sales Manager ID for this API. <p><strong>OperationId:</strong>postSalesManagerGoals</p>
     * Create Sales Manager Goals
     */
    postSalesManagerGoalsRaw(requestParameters: PostSalesManagerGoalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to Create Sales Manager Goals for a Sales Manager ID.You must know the OPERA Sales Manager ID for this API. <p><strong>OperationId:</strong>postSalesManagerGoals</p>
     * Create Sales Manager Goals
     */
    postSalesManagerGoals(requestParameters: PostSalesManagerGoalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Create a block wash schedule. <p><strong>OperationId:</strong>postWashSchedule</p>
     * Create block wash schedule
     */
    postWashScheduleRaw(requestParameters: PostWashScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Create a block wash schedule. <p><strong>OperationId:</strong>postWashSchedule</p>
     * Create block wash schedule
     */
    postWashSchedule(requestParameters: PostWashScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to change block status code. <p><strong>OperationId:</strong>putBlockStatusCode</p>
     * Change block status code
     */
    putBlockStatusCodeRaw(requestParameters: PutBlockStatusCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to change block status code. <p><strong>OperationId:</strong>putBlockStatusCode</p>
     * Change block status code
     */
    putBlockStatusCode(requestParameters: PutBlockStatusCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Update the next Block status. <p><strong>OperationId:</strong>putNextBlockStatusCodes</p>
     * Change next block status codes
     */
    putNextBlockStatusCodesRaw(requestParameters: PutNextBlockStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Update the next Block status. <p><strong>OperationId:</strong>putNextBlockStatusCodes</p>
     * Change next block status codes
     */
    putNextBlockStatusCodes(requestParameters: PutNextBlockStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to update Sales Manager Goal.You must know the OPERA Sales Manager ID and Goal ID for this API. <p><strong>OperationId:</strong>putSalesManagerGoals</p>
     * Update Sales Manager Goal in a hotel by ID
     */
    putSalesManagerGoalsRaw(requestParameters: PutSalesManagerGoalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to update Sales Manager Goal.You must know the OPERA Sales Manager ID and Goal ID for this API. <p><strong>OperationId:</strong>putSalesManagerGoals</p>
     * Update Sales Manager Goal in a hotel by ID
     */
    putSalesManagerGoals(requestParameters: PutSalesManagerGoalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Change a block wash schedule. <p><strong>OperationId:</strong>putWashSchedule</p>
     * Change block wash schedule
     */
    putWashScheduleRaw(requestParameters: PutWashScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Change a block wash schedule. <p><strong>OperationId:</strong>putWashSchedule</p>
     * Change block wash schedule
     */
    putWashSchedule(requestParameters: PutWashScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete Sales Manager Goal. <p><strong>OperationId:</strong>removeSalesManagerGoal</p>
     * Delete Sale Manager Goal
     */
    removeSalesManagerGoalRaw(requestParameters: RemoveSalesManagerGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete Sales Manager Goal. <p><strong>OperationId:</strong>removeSalesManagerGoal</p>
     * Delete Sale Manager Goal
     */
    removeSalesManagerGoal(requestParameters: RemoveSalesManagerGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete Sales Manager Goals. <p><strong>OperationId:</strong>removeSalesManagerGoals</p>
     * Delete Sale Manager Goals
     */
    removeSalesManagerGoalsRaw(requestParameters: RemoveSalesManagerGoalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete Sales Manager Goals. <p><strong>OperationId:</strong>removeSalesManagerGoals</p>
     * Delete Sale Manager Goals
     */
    removeSalesManagerGoals(requestParameters: RemoveSalesManagerGoalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to set block sales allowance range. <p><strong>OperationId:</strong>setBlockSalesAllowanceRange</p>
     * Set block sales allowance range
     */
    setBlockSalesAllowanceRangeRaw(requestParameters: SetBlockSalesAllowanceRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to set block sales allowance range. <p><strong>OperationId:</strong>setBlockSalesAllowanceRange</p>
     * Set block sales allowance range
     */
    setBlockSalesAllowanceRange(requestParameters: SetBlockSalesAllowanceRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
}
/**
 * @export
 */
export declare const GetSalesManagerGoalsFetchInstructionsEnum: {
    readonly GroupRoomsWithCatering: "GroupRoomsWithCatering";
    readonly TransientRoom: "TransientRoom";
    readonly Activity: "Activity";
};
export type GetSalesManagerGoalsFetchInstructionsEnum = typeof GetSalesManagerGoalsFetchInstructionsEnum[keyof typeof GetSalesManagerGoalsFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetSalesManagerGoalsMultipleHotelIdsFetchInstructionsEnum: {
    readonly GroupRoomsWithCatering: "GroupRoomsWithCatering";
    readonly TransientRoom: "TransientRoom";
    readonly Activity: "Activity";
};
export type GetSalesManagerGoalsMultipleHotelIdsFetchInstructionsEnum = typeof GetSalesManagerGoalsMultipleHotelIdsFetchInstructionsEnum[keyof typeof GetSalesManagerGoalsMultipleHotelIdsFetchInstructionsEnum];
