"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Configuration API
 * APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetSalesManagerGoalsMultipleHotelIdsFetchInstructionsEnum = exports.GetSalesManagerGoalsFetchInstructionsEnum = exports.BlockConfigApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class BlockConfigApi extends runtime.BaseAPI {
    /**
     * You can use this API to delete block sales allowance range. <p><strong>OperationId:</strong>deleteBlockSalesAllowanceRange</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Delete block sales allowance range
     */
    deleteBlockSalesAllowanceRangeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteBlockSalesAllowanceRange.');
            }
            if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
                throw new runtime.RequiredError('endDate', 'Required parameter requestParameters.endDate was null or undefined when calling deleteBlockSalesAllowanceRange.');
            }
            if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
                throw new runtime.RequiredError('startDate', 'Required parameter requestParameters.startDate was null or undefined when calling deleteBlockSalesAllowanceRange.');
            }
            const queryParameters = {};
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.friday !== undefined) {
                queryParameters['friday'] = requestParameters.friday;
            }
            if (requestParameters.monday !== undefined) {
                queryParameters['monday'] = requestParameters.monday;
            }
            if (requestParameters.saturday !== undefined) {
                queryParameters['saturday'] = requestParameters.saturday;
            }
            if (requestParameters.sunday !== undefined) {
                queryParameters['sunday'] = requestParameters.sunday;
            }
            if (requestParameters.thursday !== undefined) {
                queryParameters['thursday'] = requestParameters.thursday;
            }
            if (requestParameters.tuesday !== undefined) {
                queryParameters['tuesday'] = requestParameters.tuesday;
            }
            if (requestParameters.wednesday !== undefined) {
                queryParameters['wednesday'] = requestParameters.wednesday;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/blockSalesAllowanceRange`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete block sales allowance range. <p><strong>OperationId:</strong>deleteBlockSalesAllowanceRange</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Delete block sales allowance range
     */
    deleteBlockSalesAllowanceRange(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteBlockSalesAllowanceRangeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to delete block status code. <p><strong>OperationId:</strong>deleteBlockStatusCode</p>
     * Delete block status code
     */
    deleteBlockStatusCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockStatusCode === null || requestParameters.blockStatusCode === undefined) {
                throw new runtime.RequiredError('blockStatusCode', 'Required parameter requestParameters.blockStatusCode was null or undefined when calling deleteBlockStatusCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blockStatusCodes/{blockStatusCode}`.replace(`{${"blockStatusCode"}}`, encodeURIComponent(String(requestParameters.blockStatusCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete block status code. <p><strong>OperationId:</strong>deleteBlockStatusCode</p>
     * Delete block status code
     */
    deleteBlockStatusCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteBlockStatusCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to delete cutoff schedule code. <p><strong>OperationId:</strong>removeCutoffScheduleCode</p>
     * Delete cutoff schedule code.
     */
    deleteCutoffScheduleCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cutoffCodeId === null || requestParameters.cutoffCodeId === undefined) {
                throw new runtime.RequiredError('cutoffCodeId', 'Required parameter requestParameters.cutoffCodeId was null or undefined when calling deleteCutoffScheduleCode.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteCutoffScheduleCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cutoffSchedules/{cutoffCodeId}`.replace(`{${"cutoffCodeId"}}`, encodeURIComponent(String(requestParameters.cutoffCodeId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete cutoff schedule code. <p><strong>OperationId:</strong>removeCutoffScheduleCode</p>
     * Delete cutoff schedule code.
     */
    deleteCutoffScheduleCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCutoffScheduleCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a block wash schedule. <p><strong>OperationId:</strong>deleteWashSchedule</p>
     * Delete block wash schedule
     */
    deleteWashScheduleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.washScheduleCode === null || requestParameters.washScheduleCode === undefined) {
                throw new runtime.RequiredError('washScheduleCode', 'Required parameter requestParameters.washScheduleCode was null or undefined when calling deleteWashSchedule.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteWashSchedule.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/washSchedules/{washScheduleCode}`.replace(`{${"washScheduleCode"}}`, encodeURIComponent(String(requestParameters.washScheduleCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete a block wash schedule. <p><strong>OperationId:</strong>deleteWashSchedule</p>
     * Delete block wash schedule
     */
    deleteWashSchedule(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteWashScheduleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Block Sales Allowance. <p><strong>OperationId:</strong>getBlockSalesAllowance</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Get Block Sales Allowance
     */
    getBlockSalesAllowanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getBlockSalesAllowance.');
            }
            const queryParameters = {};
            if (requestParameters.endDateRange !== undefined) {
                queryParameters['endDateRange'] = requestParameters.endDateRange;
            }
            if (requestParameters.startDateRange !== undefined) {
                queryParameters['startDateRange'] = requestParameters.startDateRange;
            }
            if (requestParameters.includeRestricted !== undefined) {
                queryParameters['includeRestricted'] = requestParameters.includeRestricted;
            }
            if (requestParameters.roomTypesCodes) {
                queryParameters['roomTypesCodes'] = requestParameters.roomTypesCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/blockSalesAllowance`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BlockSalesAllowanceFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Block Sales Allowance. <p><strong>OperationId:</strong>getBlockSalesAllowance</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Get Block Sales Allowance
     */
    getBlockSalesAllowance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBlockSalesAllowanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to facilitate retrieving the Block Sales Allowance activity log. <p><strong>OperationId:</strong>getBlockSalesAllowanceActivityLog</p>
     * Get the Block Sales Allowance activity log
     */
    getBlockSalesAllowanceActivityLogRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getBlockSalesAllowanceActivityLog.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.changeLogDate !== undefined) {
                queryParameters['changeLogDate'] = requestParameters.changeLogDate;
            }
            if (requestParameters.salesAllowanceDate !== undefined) {
                queryParameters['salesAllowanceDate'] = requestParameters.salesAllowanceDate;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['userId'] = requestParameters.userId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/blockSalesAllowance/activityLog`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BlockSalesAllowanceActivityLogFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to facilitate retrieving the Block Sales Allowance activity log. <p><strong>OperationId:</strong>getBlockSalesAllowanceActivityLog</p>
     * Get the Block Sales Allowance activity log
     */
    getBlockSalesAllowanceActivityLog(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBlockSalesAllowanceActivityLogRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API fetches a list of configured status codes for the chain. It returns status code, description, and status type such as non-deduct, deduct, cancel, waitlist, inquiry, and actual. Status attributes, such as starting status, function diary visibility, allows pickup, and log catering changes are also returned in the response. Please note, that status codes are configured in a strict sequence that must be followed. In order to find available next statuses for the current block status, please use operation getNextBlockStatusCodes. <p><strong>OperationId:</strong>getBlockStatusCodes</p>
     * Get block status codes
     */
    getBlockStatusCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.blockStatusCodes) {
                queryParameters['blockStatusCodes'] = requestParameters.blockStatusCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blockStatusCodes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusCodeDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API fetches a list of configured status codes for the chain. It returns status code, description, and status type such as non-deduct, deduct, cancel, waitlist, inquiry, and actual. Status attributes, such as starting status, function diary visibility, allows pickup, and log catering changes are also returned in the response. Please note, that status codes are configured in a strict sequence that must be followed. In order to find available next statuses for the current block status, please use operation getNextBlockStatusCodes. <p><strong>OperationId:</strong>getBlockStatusCodes</p>
     * Get block status codes
     */
    getBlockStatusCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBlockStatusCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API fetches a list of configured cutoff schedule codes for the property. It returns cutoff schedule code, description, start date, end date and default cutoff days. Cutoff schedule codes can be applied to blocks, to default number of cutoff days per stay date and room type. A default number number of cutoff days can be set on cutoff scheduler header level, and will be applied when no specific number of days has been defined for a date / room type combination within the cutoff schedule dates. <p><strong>OperationId:</strong>getCutoffSchedules</p> <p>The maximum allowable limit for this API is <strong>20</strong>.</p>
     * Get block cutoff schedule codes.
     */
    getCutoffSchedulesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCutoffSchedules.');
            }
            const queryParameters = {};
            if (requestParameters.cutoffCodes) {
                queryParameters['cutoffCodes'] = requestParameters.cutoffCodes;
            }
            if (requestParameters.cutoffCodeStartDate !== undefined) {
                queryParameters['cutoffCodeStartDate'] = requestParameters.cutoffCodeStartDate;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cutoffSchedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CutoffScheduleDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API fetches a list of configured cutoff schedule codes for the property. It returns cutoff schedule code, description, start date, end date and default cutoff days. Cutoff schedule codes can be applied to blocks, to default number of cutoff days per stay date and room type. A default number number of cutoff days can be set on cutoff scheduler header level, and will be applied when no specific number of days has been defined for a date / room type combination within the cutoff schedule dates. <p><strong>OperationId:</strong>getCutoffSchedules</p> <p>The maximum allowable limit for this API is <strong>20</strong>.</p>
     * Get block cutoff schedule codes.
     */
    getCutoffSchedules(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCutoffSchedulesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API fetches a list of cutoff schedule details for a cutoff schedule code. It returns stay date, room type and cutoff days for cutoff schedule. Cutoff schedule codes can be applied to blocks, to default number of cutoff days per stay date and room type. A default number number of cutoff days can be set on cutoff scheduler header level, and will be applied when no specific number of days has been defined for a date / room type combination within the cutoff schedule dates.<p><strong>OperationId:</strong>getCutoffSchedulesDetails</p> <p>The maximum allowable limit for this API is <strong>365</strong>.</p>
     * Get cutoff Schedules Details for a cutoff schedule code.
     */
    getCutoffSchedulesDetailsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCutoffSchedulesDetails.');
            }
            if (requestParameters.cutoffCodeId === null || requestParameters.cutoffCodeId === undefined) {
                throw new runtime.RequiredError('cutoffCodeId', 'Required parameter requestParameters.cutoffCodeId was null or undefined when calling getCutoffSchedulesDetails.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cutoffSchedules/{cutoffCodeId}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"cutoffCodeId"}}`, encodeURIComponent(String(requestParameters.cutoffCodeId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CutoffScheduleDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API fetches a list of cutoff schedule details for a cutoff schedule code. It returns stay date, room type and cutoff days for cutoff schedule. Cutoff schedule codes can be applied to blocks, to default number of cutoff days per stay date and room type. A default number number of cutoff days can be set on cutoff scheduler header level, and will be applied when no specific number of days has been defined for a date / room type combination within the cutoff schedule dates.<p><strong>OperationId:</strong>getCutoffSchedulesDetails</p> <p>The maximum allowable limit for this API is <strong>365</strong>.</p>
     * Get cutoff Schedules Details for a cutoff schedule code.
     */
    getCutoffSchedulesDetails(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCutoffSchedulesDetailsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve the next block Status Codes for a property. <p><strong>OperationId:</strong>getNextBlockStatusCodes</p>
     * Get next block status codes
     */
    getNextBlockStatusCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.configuredOnly !== undefined) {
                queryParameters['configuredOnly'] = requestParameters.configuredOnly;
            }
            if (requestParameters.blockStatusCodes) {
                queryParameters['blockStatusCodes'] = requestParameters.blockStatusCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blockStatusCodes/nextStatusCodes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.NextBlockStatusCodeDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve the next block Status Codes for a property. <p><strong>OperationId:</strong>getNextBlockStatusCodes</p>
     * Get next block status codes
     */
    getNextBlockStatusCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getNextBlockStatusCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to retrieve individual Sales Manager Goals for a hotel, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagerGoals</p> <p>The maximum allowable limit for this API is <strong>20</strong>.</p>
     * Get Sales Manager Goals by Hotel
     */
    getSalesManagerGoalsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.salesManagerId === null || requestParameters.salesManagerId === undefined) {
                throw new runtime.RequiredError('salesManagerId', 'Required parameter requestParameters.salesManagerId was null or undefined when calling getSalesManagerGoals.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getSalesManagerGoals.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.future !== undefined) {
                queryParameters['future'] = requestParameters.future;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/salesManagers/{salesManagerId}/salesManagerGoals`.replace(`{${"salesManagerId"}}`, encodeURIComponent(String(requestParameters.salesManagerId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SalesManagerGoalsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to retrieve individual Sales Manager Goals for a hotel, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagerGoals</p> <p>The maximum allowable limit for this API is <strong>20</strong>.</p>
     * Get Sales Manager Goals by Hotel
     */
    getSalesManagerGoals(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSalesManagerGoalsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to retrieve individual Sales Manager Goals, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagerGoalsMultipleHotelIds</p> <p>The maximum allowable limit for this API is <strong>20</strong>.</p>
     * Get Sales Manager Goals
     */
    getSalesManagerGoalsMultipleHotelIdsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.salesManagerId === null || requestParameters.salesManagerId === undefined) {
                throw new runtime.RequiredError('salesManagerId', 'Required parameter requestParameters.salesManagerId was null or undefined when calling getSalesManagerGoalsMultipleHotelIds.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.future !== undefined) {
                queryParameters['future'] = requestParameters.future;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/salesManagers/{salesManagerId}/salesManagerGoals`.replace(`{${"salesManagerId"}}`, encodeURIComponent(String(requestParameters.salesManagerId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SalesManagerGoalsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to retrieve individual Sales Manager Goals, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagerGoalsMultipleHotelIds</p> <p>The maximum allowable limit for this API is <strong>20</strong>.</p>
     * Get Sales Manager Goals
     */
    getSalesManagerGoalsMultipleHotelIds(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSalesManagerGoalsMultipleHotelIdsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to retrieve multiple Sales Managers for a hotel, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagers</p> <p>The maximum allowable limit for this API is <strong>20</strong>.</p>
     * Get Sales Managers by Hotel.
     */
    getSalesManagersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getSalesManagers.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.ownerCodes) {
                queryParameters['ownerCodes'] = requestParameters.ownerCodes;
            }
            if (requestParameters.firstName !== undefined) {
                queryParameters['firstName'] = requestParameters.firstName;
            }
            if (requestParameters.lastName !== undefined) {
                queryParameters['lastName'] = requestParameters.lastName;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/salesManagers`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SalesManagersInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to retrieve multiple Sales Managers for a hotel, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagers</p> <p>The maximum allowable limit for this API is <strong>20</strong>.</p>
     * Get Sales Managers by Hotel.
     */
    getSalesManagers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSalesManagersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to retrieve multiple Sales Managers, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagersMultipleHotelIds</p> <p>The maximum allowable limit for this API is <strong>20</strong>.</p>
     * Get Sales Managers.
     */
    getSalesManagersMultipleHotelIdsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
                throw new runtime.RequiredError('hotelIds', 'Required parameter requestParameters.hotelIds was null or undefined when calling getSalesManagersMultipleHotelIds.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.ownerCodes) {
                queryParameters['ownerCodes'] = requestParameters.ownerCodes;
            }
            if (requestParameters.firstName !== undefined) {
                queryParameters['firstName'] = requestParameters.firstName;
            }
            if (requestParameters.lastName !== undefined) {
                queryParameters['lastName'] = requestParameters.lastName;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/salesManagers`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SalesManagersInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to retrieve multiple Sales Managers, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagersMultipleHotelIds</p> <p>The maximum allowable limit for this API is <strong>20</strong>.</p>
     * Get Sales Managers.
     */
    getSalesManagersMultipleHotelIds(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSalesManagersMultipleHotelIdsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get block wash schedules. <p><strong>OperationId:</strong>getWashSchedule</p>
     * Get block wash schedule
     */
    getWashScheduleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.washCodes) {
                queryParameters['washCodes'] = requestParameters.washCodes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/washSchedules`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WashScheduleDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Get block wash schedules. <p><strong>OperationId:</strong>getWashSchedule</p>
     * Get block wash schedule
     */
    getWashSchedule(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getWashScheduleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create a new block status code. <p><strong>OperationId:</strong>postBlockStatusCode</p>
     * Create a block status code
     */
    postBlockStatusCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockStatusCodeDetails === null || requestParameters.blockStatusCodeDetails === undefined) {
                throw new runtime.RequiredError('blockStatusCodeDetails', 'Required parameter requestParameters.blockStatusCodeDetails was null or undefined when calling postBlockStatusCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blockStatusCodes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BlockStatusCodeDetailsToJSON)(requestParameters.blockStatusCodeDetails),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create a new block status code. <p><strong>OperationId:</strong>postBlockStatusCode</p>
     * Create a block status code
     */
    postBlockStatusCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postBlockStatusCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create a new block cutoff schedule code. Cutoff schedule codes can be applied to blocks, to default number of cutoff days per stay date and room type. A default number number of cutoff days can be set on cutoff scheduler header level, and will be applied when no specific number of days has been defined for a date / room type combination within the cutoff schedule dates. <p><strong>OperationId:</strong>postCutoffScheduleCode</p>
     * Create a block cutoff schedule code.
     */
    postCutoffScheduleCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postCutoffScheduleCode.');
            }
            if (requestParameters.cutoffScheduleCodeDetails === null || requestParameters.cutoffScheduleCodeDetails === undefined) {
                throw new runtime.RequiredError('cutoffScheduleCodeDetails', 'Required parameter requestParameters.cutoffScheduleCodeDetails was null or undefined when calling postCutoffScheduleCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cutoffSchedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CutoffCodeCriteriaToJSON)(requestParameters.cutoffScheduleCodeDetails),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create a new block cutoff schedule code. Cutoff schedule codes can be applied to blocks, to default number of cutoff days per stay date and room type. A default number number of cutoff days can be set on cutoff scheduler header level, and will be applied when no specific number of days has been defined for a date / room type combination within the cutoff schedule dates. <p><strong>OperationId:</strong>postCutoffScheduleCode</p>
     * Create a block cutoff schedule code.
     */
    postCutoffScheduleCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCutoffScheduleCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to Create Sales Manager Goals for a Sales Manager ID.You must know the OPERA Sales Manager ID for this API. <p><strong>OperationId:</strong>postSalesManagerGoals</p>
     * Create Sales Manager Goals
     */
    postSalesManagerGoalsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.salesManagerId === null || requestParameters.salesManagerId === undefined) {
                throw new runtime.RequiredError('salesManagerId', 'Required parameter requestParameters.salesManagerId was null or undefined when calling postSalesManagerGoals.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postSalesManagerGoals.');
            }
            if (requestParameters.createSalesManagerGoals === null || requestParameters.createSalesManagerGoals === undefined) {
                throw new runtime.RequiredError('createSalesManagerGoals', 'Required parameter requestParameters.createSalesManagerGoals was null or undefined when calling postSalesManagerGoals.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/salesManagers/{salesManagerId}/salesManagerGoals`.replace(`{${"salesManagerId"}}`, encodeURIComponent(String(requestParameters.salesManagerId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CreateSalesManagerGoalsToJSON)(requestParameters.createSalesManagerGoals),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to Create Sales Manager Goals for a Sales Manager ID.You must know the OPERA Sales Manager ID for this API. <p><strong>OperationId:</strong>postSalesManagerGoals</p>
     * Create Sales Manager Goals
     */
    postSalesManagerGoals(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postSalesManagerGoalsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a block wash schedule. <p><strong>OperationId:</strong>postWashSchedule</p>
     * Create block wash schedule
     */
    postWashScheduleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postWashSchedule.');
            }
            if (requestParameters.washScheduleCriteria === null || requestParameters.washScheduleCriteria === undefined) {
                throw new runtime.RequiredError('washScheduleCriteria', 'Required parameter requestParameters.washScheduleCriteria was null or undefined when calling postWashSchedule.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/washSchedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WashScheduleCriteriaToJSON)(requestParameters.washScheduleCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Create a block wash schedule. <p><strong>OperationId:</strong>postWashSchedule</p>
     * Create block wash schedule
     */
    postWashSchedule(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postWashScheduleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to change block status code. <p><strong>OperationId:</strong>putBlockStatusCode</p>
     * Change block status code
     */
    putBlockStatusCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockStatusCode === null || requestParameters.blockStatusCode === undefined) {
                throw new runtime.RequiredError('blockStatusCode', 'Required parameter requestParameters.blockStatusCode was null or undefined when calling putBlockStatusCode.');
            }
            if (requestParameters.blockStatusCodeDetails === null || requestParameters.blockStatusCodeDetails === undefined) {
                throw new runtime.RequiredError('blockStatusCodeDetails', 'Required parameter requestParameters.blockStatusCodeDetails was null or undefined when calling putBlockStatusCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blockStatusCodes/{blockStatusCode}`.replace(`{${"blockStatusCode"}}`, encodeURIComponent(String(requestParameters.blockStatusCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BlockStatusCodeDetailsToJSON)(requestParameters.blockStatusCodeDetails),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to change block status code. <p><strong>OperationId:</strong>putBlockStatusCode</p>
     * Change block status code
     */
    putBlockStatusCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putBlockStatusCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to change block cutoff schedule code. Cutoff schedule codes can be applied to blocks, to default number of cutoff days per stay date and room type. A default number number of cutoff days can be set on cutoff scheduler header level, and will be applied when no specific number of days has been defined for a date / room type combination within the cutoff schedule dates.<p><strong>OperationId:</strong>putCutoffScheduleCode</p>
     * Change block cutoff schedule code
     */
    putCutoffScheduleCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cutoffCodeId === null || requestParameters.cutoffCodeId === undefined) {
                throw new runtime.RequiredError('cutoffCodeId', 'Required parameter requestParameters.cutoffCodeId was null or undefined when calling putCutoffScheduleCode.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putCutoffScheduleCode.');
            }
            if (requestParameters.blockCutoffCodeDetails === null || requestParameters.blockCutoffCodeDetails === undefined) {
                throw new runtime.RequiredError('blockCutoffCodeDetails', 'Required parameter requestParameters.blockCutoffCodeDetails was null or undefined when calling putCutoffScheduleCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/cutoffSchedules/{cutoffCodeId}`.replace(`{${"cutoffCodeId"}}`, encodeURIComponent(String(requestParameters.cutoffCodeId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CutoffCodeCriteriaToJSON)(requestParameters.blockCutoffCodeDetails),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to change block cutoff schedule code. Cutoff schedule codes can be applied to blocks, to default number of cutoff days per stay date and room type. A default number number of cutoff days can be set on cutoff scheduler header level, and will be applied when no specific number of days has been defined for a date / room type combination within the cutoff schedule dates.<p><strong>OperationId:</strong>putCutoffScheduleCode</p>
     * Change block cutoff schedule code
     */
    putCutoffScheduleCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putCutoffScheduleCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update the next Block status. <p><strong>OperationId:</strong>putNextBlockStatusCodes</p>
     * Change next block status codes
     */
    putNextBlockStatusCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.srcBlockStatusCode === null || requestParameters.srcBlockStatusCode === undefined) {
                throw new runtime.RequiredError('srcBlockStatusCode', 'Required parameter requestParameters.srcBlockStatusCode was null or undefined when calling putNextBlockStatusCodes.');
            }
            if (requestParameters.nextBlockStatusCode === null || requestParameters.nextBlockStatusCode === undefined) {
                throw new runtime.RequiredError('nextBlockStatusCode', 'Required parameter requestParameters.nextBlockStatusCode was null or undefined when calling putNextBlockStatusCodes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/blockStatusCodes/{srcBlockStatusCode}/nextStatusCodes`.replace(`{${"srcBlockStatusCode"}}`, encodeURIComponent(String(requestParameters.srcBlockStatusCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.NextBlockStatusCodeToJSON)(requestParameters.nextBlockStatusCode),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Update the next Block status. <p><strong>OperationId:</strong>putNextBlockStatusCodes</p>
     * Change next block status codes
     */
    putNextBlockStatusCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putNextBlockStatusCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Sales Manager Goal.You must know the OPERA Sales Manager ID and Goal ID for this API. <p><strong>OperationId:</strong>putSalesManagerGoals</p>
     * Update Sales Manager Goal in a hotel by ID
     */
    putSalesManagerGoalsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.salesGoalId === null || requestParameters.salesGoalId === undefined) {
                throw new runtime.RequiredError('salesGoalId', 'Required parameter requestParameters.salesGoalId was null or undefined when calling putSalesManagerGoals.');
            }
            if (requestParameters.salesManagerId === null || requestParameters.salesManagerId === undefined) {
                throw new runtime.RequiredError('salesManagerId', 'Required parameter requestParameters.salesManagerId was null or undefined when calling putSalesManagerGoals.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putSalesManagerGoals.');
            }
            if (requestParameters.salesManagerGoalsInfo === null || requestParameters.salesManagerGoalsInfo === undefined) {
                throw new runtime.RequiredError('salesManagerGoalsInfo', 'Required parameter requestParameters.salesManagerGoalsInfo was null or undefined when calling putSalesManagerGoals.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/salesManagers/{salesManagerId}/salesManagerGoals/{salesGoalId}`.replace(`{${"salesGoalId"}}`, encodeURIComponent(String(requestParameters.salesGoalId))).replace(`{${"salesManagerId"}}`, encodeURIComponent(String(requestParameters.salesManagerId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SalesManagerGoalsInfoToJSON)(requestParameters.salesManagerGoalsInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Sales Manager Goal.You must know the OPERA Sales Manager ID and Goal ID for this API. <p><strong>OperationId:</strong>putSalesManagerGoals</p>
     * Update Sales Manager Goal in a hotel by ID
     */
    putSalesManagerGoals(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putSalesManagerGoalsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Change a block wash schedule. <p><strong>OperationId:</strong>putWashSchedule</p>
     * Change block wash schedule
     */
    putWashScheduleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.washScheduleCode === null || requestParameters.washScheduleCode === undefined) {
                throw new runtime.RequiredError('washScheduleCode', 'Required parameter requestParameters.washScheduleCode was null or undefined when calling putWashSchedule.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putWashSchedule.');
            }
            if (requestParameters.washScheduleCriteria === null || requestParameters.washScheduleCriteria === undefined) {
                throw new runtime.RequiredError('washScheduleCriteria', 'Required parameter requestParameters.washScheduleCriteria was null or undefined when calling putWashSchedule.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/washSchedules/{washScheduleCode}`.replace(`{${"washScheduleCode"}}`, encodeURIComponent(String(requestParameters.washScheduleCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.WashScheduleCriteriaToJSON)(requestParameters.washScheduleCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Change a block wash schedule. <p><strong>OperationId:</strong>putWashSchedule</p>
     * Change block wash schedule
     */
    putWashSchedule(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putWashScheduleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Sales Manager Goal. <p><strong>OperationId:</strong>removeSalesManagerGoal</p>
     * Delete Sale Manager Goal
     */
    removeSalesManagerGoalRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.salesGoalId === null || requestParameters.salesGoalId === undefined) {
                throw new runtime.RequiredError('salesGoalId', 'Required parameter requestParameters.salesGoalId was null or undefined when calling removeSalesManagerGoal.');
            }
            if (requestParameters.salesManagerId === null || requestParameters.salesManagerId === undefined) {
                throw new runtime.RequiredError('salesManagerId', 'Required parameter requestParameters.salesManagerId was null or undefined when calling removeSalesManagerGoal.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/salesManagers/{salesManagerId}/salesManagerGoals/{salesGoalId}`.replace(`{${"salesGoalId"}}`, encodeURIComponent(String(requestParameters.salesGoalId))).replace(`{${"salesManagerId"}}`, encodeURIComponent(String(requestParameters.salesManagerId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Sales Manager Goal. <p><strong>OperationId:</strong>removeSalesManagerGoal</p>
     * Delete Sale Manager Goal
     */
    removeSalesManagerGoal(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeSalesManagerGoalRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Sales Manager Goals. <p><strong>OperationId:</strong>removeSalesManagerGoals</p>
     * Delete Sale Manager Goals
     */
    removeSalesManagerGoalsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.salesManagerId === null || requestParameters.salesManagerId === undefined) {
                throw new runtime.RequiredError('salesManagerId', 'Required parameter requestParameters.salesManagerId was null or undefined when calling removeSalesManagerGoals.');
            }
            const queryParameters = {};
            if (requestParameters.salesGoalId) {
                queryParameters['salesGoalId'] = requestParameters.salesGoalId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/salesManagers/{salesManagerId}/salesManagerGoals`.replace(`{${"salesManagerId"}}`, encodeURIComponent(String(requestParameters.salesManagerId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Sales Manager Goals. <p><strong>OperationId:</strong>removeSalesManagerGoals</p>
     * Delete Sale Manager Goals
     */
    removeSalesManagerGoals(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeSalesManagerGoalsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to set block cutoff schedule range. Cutoff schedule codes can be applied to blocks, to default number of cutoff days per stay date and room type. A default number number of cutoff days can be set on cutoff scheduler header level, and will be applied when no specific number of days has been defined for a date / room type combination within the cutoff schedule dates.<p><strong>OperationId:</strong>setBlockCutoffScheduleRange</p>
     * Set block cutoff schedule range
     */
    setBlockCutoffScheduleRangeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling setBlockCutoffScheduleRange.');
            }
            if (requestParameters.blockCutoffScheduleRange === null || requestParameters.blockCutoffScheduleRange === undefined) {
                throw new runtime.RequiredError('blockCutoffScheduleRange', 'Required parameter requestParameters.blockCutoffScheduleRange was null or undefined when calling setBlockCutoffScheduleRange.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/blockCutoffScheduleRange`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BlockCutoffScheduleRangeToJSON)(requestParameters.blockCutoffScheduleRange),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to set block cutoff schedule range. Cutoff schedule codes can be applied to blocks, to default number of cutoff days per stay date and room type. A default number number of cutoff days can be set on cutoff scheduler header level, and will be applied when no specific number of days has been defined for a date / room type combination within the cutoff schedule dates.<p><strong>OperationId:</strong>setBlockCutoffScheduleRange</p>
     * Set block cutoff schedule range
     */
    setBlockCutoffScheduleRange(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.setBlockCutoffScheduleRangeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to set block sales allowance range. <p><strong>OperationId:</strong>setBlockSalesAllowanceRange</p>
     * Set block sales allowance range
     */
    setBlockSalesAllowanceRangeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling setBlockSalesAllowanceRange.');
            }
            if (requestParameters.blockSalesAllowanceRange === null || requestParameters.blockSalesAllowanceRange === undefined) {
                throw new runtime.RequiredError('blockSalesAllowanceRange', 'Required parameter requestParameters.blockSalesAllowanceRange was null or undefined when calling setBlockSalesAllowanceRange.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/blockSalesAllowanceRange`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BlockSalesAllowanceRangeToJSON)(requestParameters.blockSalesAllowanceRange),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to set block sales allowance range. <p><strong>OperationId:</strong>setBlockSalesAllowanceRange</p>
     * Set block sales allowance range
     */
    setBlockSalesAllowanceRange(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.setBlockSalesAllowanceRangeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.BlockConfigApi = BlockConfigApi;
/**
 * @export
 */
exports.GetSalesManagerGoalsFetchInstructionsEnum = {
    GroupRoomsWithCatering: 'GroupRoomsWithCatering',
    TransientRoom: 'TransientRoom',
    Activity: 'Activity'
};
/**
 * @export
 */
exports.GetSalesManagerGoalsMultipleHotelIdsFetchInstructionsEnum = {
    GroupRoomsWithCatering: 'GroupRoomsWithCatering',
    TransientRoom: 'TransientRoom',
    Activity: 'Activity'
};
