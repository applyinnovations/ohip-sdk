"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetRatePlansByHotelFetchInstructionsEnum = exports.GetRatePlansApprovalStatusEnum = exports.GetRatePlansOrderTypeEnum = exports.GetRatePlanFetchInstructionsEnum = exports.GetRateActivityLogModuleEnum = exports.GetPackagesFetchInstructionsEnum = exports.GetPackageFetchInstructionsEnum = exports.GetNegotiatedRatesForGivenProfileFetchInstructionsEnum = exports.GetNegotiatedRatesForGivenHotelAndRateFetchInstructionsEnum = exports.GetNegotiatedRatesFetchInstructionsEnum = exports.GetBestAvailableRatesLengthOfStayEnum = exports.GetBestAvailableRatesDaysOfWeekEnum = exports.RatePlanApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class RatePlanApi extends runtime.BaseAPI {
    /**
     * This API allows you to copy package codes(s) from one hotel to another. <p><strong>OperationId:</strong>copyPackages</p>
     * Copy package code(s)
     */
    copyPackagesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling copyPackages.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling copyPackages.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling copyPackages.');
            }
            if (requestParameters.packagesCopy === null || requestParameters.packagesCopy === undefined) {
                throw new runtime.RequiredError('packagesCopy', 'Required parameter requestParameters.packagesCopy was null or undefined when calling copyPackages.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/packages/copy`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PackagesCopyToJSON)(requestParameters.packagesCopy),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to copy package codes(s) from one hotel to another. <p><strong>OperationId:</strong>copyPackages</p>
     * Copy package code(s)
     */
    copyPackages(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyPackagesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to copy promotions groups. <p><strong>OperationId:</strong>copyPromotionGroups</p>
     * Copy promotion groups
     */
    copyPromotionGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling copyPromotionGroups.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling copyPromotionGroups.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling copyPromotionGroups.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling copyPromotionGroups.');
            }
            if (requestParameters.promotionGroupsCopy === null || requestParameters.promotionGroupsCopy === undefined) {
                throw new runtime.RequiredError('promotionGroupsCopy', 'Required parameter requestParameters.promotionGroupsCopy was null or undefined when calling copyPromotionGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/promotionGroups/copy`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PromotionGroupsCopyToJSON)(requestParameters.promotionGroupsCopy),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to copy promotions groups. <p><strong>OperationId:</strong>copyPromotionGroups</p>
     * Copy promotion groups
     */
    copyPromotionGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyPromotionGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to copy Rate Plans. <p><strong>OperationId:</strong>copyRatePlans</p>
     * Copy rate plans
     */
    copyRatePlansRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
                throw new runtime.RequiredError('ratePlanCode', 'Required parameter requestParameters.ratePlanCode was null or undefined when calling copyRatePlans.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling copyRatePlans.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling copyRatePlans.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling copyRatePlans.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling copyRatePlans.');
            }
            if (requestParameters.ratePlansCopy === null || requestParameters.ratePlansCopy === undefined) {
                throw new runtime.RequiredError('ratePlansCopy', 'Required parameter requestParameters.ratePlansCopy was null or undefined when calling copyRatePlans.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/copy`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RatePlansCopyToJSON)(requestParameters.ratePlansCopy),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RatePlansCopyDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to copy Rate Plans. <p><strong>OperationId:</strong>copyRatePlans</p>
     * Copy rate plans
     */
    copyRatePlans(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyRatePlansRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to copy tiered rate schedules. <p><strong>OperationId:</strong>copyTieredRateSchedules</p>
     * Copy tiered rate schedules
     */
    copyTieredRateSchedulesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.destinationTierId === null || requestParameters.destinationTierId === undefined) {
                throw new runtime.RequiredError('destinationTierId', 'Required parameter requestParameters.destinationTierId was null or undefined when calling copyTieredRateSchedules.');
            }
            if (requestParameters.sourceTierId === null || requestParameters.sourceTierId === undefined) {
                throw new runtime.RequiredError('sourceTierId', 'Required parameter requestParameters.sourceTierId was null or undefined when calling copyTieredRateSchedules.');
            }
            if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
                throw new runtime.RequiredError('ratePlanCode', 'Required parameter requestParameters.ratePlanCode was null or undefined when calling copyTieredRateSchedules.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling copyTieredRateSchedules.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling copyTieredRateSchedules.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling copyTieredRateSchedules.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling copyTieredRateSchedules.');
            }
            if (requestParameters.tieredRateSchedulesCopy === null || requestParameters.tieredRateSchedulesCopy === undefined) {
                throw new runtime.RequiredError('tieredRateSchedulesCopy', 'Required parameter requestParameters.tieredRateSchedulesCopy was null or undefined when calling copyTieredRateSchedules.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/sourceTiers/{sourceTierId}/destinationTiers/{destinationTierId}/schedules/copy`.replace(`{${"destinationTierId"}}`, encodeURIComponent(String(requestParameters.destinationTierId))).replace(`{${"sourceTierId"}}`, encodeURIComponent(String(requestParameters.sourceTierId))).replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TieredRateSchedulesCopyToJSON)(requestParameters.tieredRateSchedulesCopy),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to copy tiered rate schedules. <p><strong>OperationId:</strong>copyTieredRateSchedules</p>
     * Copy tiered rate schedules
     */
    copyTieredRateSchedules(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyTieredRateSchedulesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows to fetch Best Available rates for rate code(s). <p><strong>OperationId:</strong>deleteBestAvailableRates</p>
     * Delete Best Available Rates
     */
    deleteBestAvailableRatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteBestAvailableRates.');
            }
            if (requestParameters.code === null || requestParameters.code === undefined) {
                throw new runtime.RequiredError('code', 'Required parameter requestParameters.code was null or undefined when calling deleteBestAvailableRates.');
            }
            if (requestParameters.end === null || requestParameters.end === undefined) {
                throw new runtime.RequiredError('end', 'Required parameter requestParameters.end was null or undefined when calling deleteBestAvailableRates.');
            }
            if (requestParameters.start === null || requestParameters.start === undefined) {
                throw new runtime.RequiredError('start', 'Required parameter requestParameters.start was null or undefined when calling deleteBestAvailableRates.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling deleteBestAvailableRates.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling deleteBestAvailableRates.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling deleteBestAvailableRates.');
            }
            const queryParameters = {};
            if (requestParameters.code) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.end !== undefined) {
                queryParameters['end'] = requestParameters.end.toISOString().substring(0, 10);
            }
            if (requestParameters.start !== undefined) {
                queryParameters['start'] = requestParameters.start.toISOString().substring(0, 10);
            }
            if (requestParameters.friday !== undefined) {
                queryParameters['friday'] = requestParameters.friday;
            }
            if (requestParameters.monday !== undefined) {
                queryParameters['monday'] = requestParameters.monday;
            }
            if (requestParameters.saturday !== undefined) {
                queryParameters['saturday'] = requestParameters.saturday;
            }
            if (requestParameters.sunday !== undefined) {
                queryParameters['sunday'] = requestParameters.sunday;
            }
            if (requestParameters.thursday !== undefined) {
                queryParameters['thursday'] = requestParameters.thursday;
            }
            if (requestParameters.tuesday !== undefined) {
                queryParameters['tuesday'] = requestParameters.tuesday;
            }
            if (requestParameters.wednesday !== undefined) {
                queryParameters['wednesday'] = requestParameters.wednesday;
            }
            if (requestParameters.lOS1 !== undefined) {
                queryParameters['lOS1'] = requestParameters.lOS1;
            }
            if (requestParameters.lOS2 !== undefined) {
                queryParameters['lOS2'] = requestParameters.lOS2;
            }
            if (requestParameters.lOS3 !== undefined) {
                queryParameters['lOS3'] = requestParameters.lOS3;
            }
            if (requestParameters.lOS4 !== undefined) {
                queryParameters['lOS4'] = requestParameters.lOS4;
            }
            if (requestParameters.lOS5 !== undefined) {
                queryParameters['lOS5'] = requestParameters.lOS5;
            }
            if (requestParameters.lOS6 !== undefined) {
                queryParameters['lOS6'] = requestParameters.lOS6;
            }
            if (requestParameters.lOS7 !== undefined) {
                queryParameters['lOS7'] = requestParameters.lOS7;
            }
            if (requestParameters.lOS8 !== undefined) {
                queryParameters['lOS8'] = requestParameters.lOS8;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/bestavailablerates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows to fetch Best Available rates for rate code(s). <p><strong>OperationId:</strong>deleteBestAvailableRates</p>
     * Delete Best Available Rates
     */
    deleteBestAvailableRates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteBestAvailableRatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to delete daily Rate Plan schedules. <p><strong>OperationId:</strong>deleteDailyRatePlanScheduleRange</p>
     * Delete daily rate plan schedule range
     */
    deleteDailyRatePlanScheduleRangeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
                throw new runtime.RequiredError('ratePlanCode', 'Required parameter requestParameters.ratePlanCode was null or undefined when calling deleteDailyRatePlanScheduleRange.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteDailyRatePlanScheduleRange.');
            }
            if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
                throw new runtime.RequiredError('startDate', 'Required parameter requestParameters.startDate was null or undefined when calling deleteDailyRatePlanScheduleRange.');
            }
            if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
                throw new runtime.RequiredError('endDate', 'Required parameter requestParameters.endDate was null or undefined when calling deleteDailyRatePlanScheduleRange.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling deleteDailyRatePlanScheduleRange.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling deleteDailyRatePlanScheduleRange.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling deleteDailyRatePlanScheduleRange.');
            }
            const queryParameters = {};
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate.toISOString().substring(0, 10);
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate.toISOString().substring(0, 10);
            }
            if (requestParameters.roomType) {
                queryParameters['roomType'] = requestParameters.roomType.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.roomClass) {
                queryParameters['roomClass'] = requestParameters.roomClass.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.friday !== undefined) {
                queryParameters['friday'] = requestParameters.friday;
            }
            if (requestParameters.monday !== undefined) {
                queryParameters['monday'] = requestParameters.monday;
            }
            if (requestParameters.saturday !== undefined) {
                queryParameters['saturday'] = requestParameters.saturday;
            }
            if (requestParameters.sunday !== undefined) {
                queryParameters['sunday'] = requestParameters.sunday;
            }
            if (requestParameters.thursday !== undefined) {
                queryParameters['thursday'] = requestParameters.thursday;
            }
            if (requestParameters.tuesday !== undefined) {
                queryParameters['tuesday'] = requestParameters.tuesday;
            }
            if (requestParameters.wednesday !== undefined) {
                queryParameters['wednesday'] = requestParameters.wednesday;
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.advancedDailyBaseRatePlanCode !== undefined) {
                queryParameters['advancedDailyBaseRatePlanCode'] = requestParameters.advancedDailyBaseRatePlanCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/dailySchedules`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to delete daily Rate Plan schedules. <p><strong>OperationId:</strong>deleteDailyRatePlanScheduleRange</p>
     * Delete daily rate plan schedule range
     */
    deleteDailyRatePlanScheduleRange(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteDailyRatePlanScheduleRangeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to delete package forecast groups. <p><strong>OperationId:</strong>deleteHotelPackageForecastGroups</p>
     * Delete Hotel Package Forecast Groups
     */
    deleteHotelPackageForecastGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteHotelPackageForecastGroups.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling deleteHotelPackageForecastGroups.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling deleteHotelPackageForecastGroups.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling deleteHotelPackageForecastGroups.');
            }
            const queryParameters = {};
            if (requestParameters.code) {
                queryParameters['code'] = requestParameters.code;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/packageForecastGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to delete package forecast groups. <p><strong>OperationId:</strong>deleteHotelPackageForecastGroups</p>
     * Delete Hotel Package Forecast Groups
     */
    deleteHotelPackageForecastGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteHotelPackageForecastGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to delete mass rate change log. <p><strong>OperationId:</strong>deleteMassRateChangeLog</p>
     * Delete mass rate change log
     */
    deleteMassRateChangeLogRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteMassRateChangeLog.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling deleteMassRateChangeLog.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling deleteMassRateChangeLog.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling deleteMassRateChangeLog.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/massRateChangeLog`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to delete mass rate change log. <p><strong>OperationId:</strong>deleteMassRateChangeLog</p>
     * Delete mass rate change log
     */
    deleteMassRateChangeLog(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteMassRateChangeLogRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to delete negotiated rate. <p><strong>OperationId:</strong>deleteNegotiatedRates</p>
     * Delete negotiated rates
     */
    deleteNegotiatedRatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ratePlanId === null || requestParameters.ratePlanId === undefined) {
                throw new runtime.RequiredError('ratePlanId', 'Required parameter requestParameters.ratePlanId was null or undefined when calling deleteNegotiatedRates.');
            }
            if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
                throw new runtime.RequiredError('startDate', 'Required parameter requestParameters.startDate was null or undefined when calling deleteNegotiatedRates.');
            }
            if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
                throw new runtime.RequiredError('profileId', 'Required parameter requestParameters.profileId was null or undefined when calling deleteNegotiatedRates.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteNegotiatedRates.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling deleteNegotiatedRates.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling deleteNegotiatedRates.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling deleteNegotiatedRates.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/profiles/{profileId}/startDate/{startDate}/negotiatedRates/{ratePlanId}`.replace(`{${"ratePlanId"}}`, encodeURIComponent(String(requestParameters.ratePlanId))).replace(`{${"startDate"}}`, encodeURIComponent(String(requestParameters.startDate))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to delete negotiated rate. <p><strong>OperationId:</strong>deleteNegotiatedRates</p>
     * Delete negotiated rates
     */
    deleteNegotiatedRates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNegotiatedRatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to delete a package. <p><strong>OperationId:</strong>deletePackage</p>
     * Delete the package
     */
    deletePackageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.packageCode === null || requestParameters.packageCode === undefined) {
                throw new runtime.RequiredError('packageCode', 'Required parameter requestParameters.packageCode was null or undefined when calling deletePackage.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deletePackage.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling deletePackage.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling deletePackage.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling deletePackage.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/packages/{packageCode}`.replace(`{${"packageCode"}}`, encodeURIComponent(String(requestParameters.packageCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to delete a package. <p><strong>OperationId:</strong>deletePackage</p>
     * Delete the package
     */
    deletePackage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deletePackageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to delete package formula ranges. <p><strong>OperationId:</strong>deletePackageFormulaRanges</p>
     * Delete package formula ranges
     */
    deletePackageFormulaRangesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.packageFormulaRangeId === null || requestParameters.packageFormulaRangeId === undefined) {
                throw new runtime.RequiredError('packageFormulaRangeId', 'Required parameter requestParameters.packageFormulaRangeId was null or undefined when calling deletePackageFormulaRanges.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deletePackageFormulaRanges.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling deletePackageFormulaRanges.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling deletePackageFormulaRanges.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling deletePackageFormulaRanges.');
            }
            const queryParameters = {};
            if (requestParameters.amount !== undefined) {
                queryParameters['amount'] = requestParameters.amount;
            }
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/packageFormulaRanges/{packageFormulaRangeId}`.replace(`{${"packageFormulaRangeId"}}`, encodeURIComponent(String(requestParameters.packageFormulaRangeId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to delete package formula ranges. <p><strong>OperationId:</strong>deletePackageFormulaRanges</p>
     * Delete package formula ranges
     */
    deletePackageFormulaRanges(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deletePackageFormulaRangesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to delete package group. <p><strong>OperationId:</strong>deletePackageGroups</p>
     * Delete package group
     */
    deletePackageGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.packageCode === null || requestParameters.packageCode === undefined) {
                throw new runtime.RequiredError('packageCode', 'Required parameter requestParameters.packageCode was null or undefined when calling deletePackageGroups.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deletePackageGroups.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling deletePackageGroups.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling deletePackageGroups.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling deletePackageGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/packageGroups/{packageCode}`.replace(`{${"packageCode"}}`, encodeURIComponent(String(requestParameters.packageCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to delete package group. <p><strong>OperationId:</strong>deletePackageGroups</p>
     * Delete package group
     */
    deletePackageGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deletePackageGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to delete promotion groups. <p><strong>OperationId:</strong>deletePromotionGroup</p>
     * Delete promotion groups
     */
    deletePromotionGroupRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.groupCode === null || requestParameters.groupCode === undefined) {
                throw new runtime.RequiredError('groupCode', 'Required parameter requestParameters.groupCode was null or undefined when calling deletePromotionGroup.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deletePromotionGroup.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling deletePromotionGroup.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling deletePromotionGroup.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling deletePromotionGroup.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/promotionGroups/{groupCode}`.replace(`{${"groupCode"}}`, encodeURIComponent(String(requestParameters.groupCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to delete promotion groups. <p><strong>OperationId:</strong>deletePromotionGroup</p>
     * Delete promotion groups
     */
    deletePromotionGroup(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deletePromotionGroupRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to delete rate access exclusions. <p><strong>OperationId:</strong>deleteRateAccessExclusions</p>
     * Delete rate access exclusions
     */
    deleteRateAccessExclusionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteRateAccessExclusions.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling deleteRateAccessExclusions.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling deleteRateAccessExclusions.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling deleteRateAccessExclusions.');
            }
            const queryParameters = {};
            if (requestParameters.rateCode !== undefined) {
                queryParameters['rateCode'] = requestParameters.rateCode;
            }
            if (requestParameters.allowCancelReservation) {
                queryParameters['allowCancelReservation'] = requestParameters.allowCancelReservation;
            }
            if (requestParameters.allowCreateReservation) {
                queryParameters['allowCreateReservation'] = requestParameters.allowCreateReservation;
            }
            if (requestParameters.allowModifyReservation) {
                queryParameters['allowModifyReservation'] = requestParameters.allowModifyReservation;
            }
            if (requestParameters.excludeFromAvailability) {
                queryParameters['excludeFromAvailability'] = requestParameters.excludeFromAvailability;
            }
            if (requestParameters.inactive) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            if (requestParameters.sourceType) {
                queryParameters['sourceType'] = requestParameters.sourceType;
            }
            if (requestParameters.sourceValue) {
                queryParameters['sourceValue'] = requestParameters.sourceValue;
            }
            if (requestParameters.end !== undefined) {
                queryParameters['end'] = requestParameters.end.toISOString().substring(0, 10);
            }
            if (requestParameters.start !== undefined) {
                queryParameters['start'] = requestParameters.start.toISOString().substring(0, 10);
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rateAccessExclusions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to delete rate access exclusions. <p><strong>OperationId:</strong>deleteRateAccessExclusions</p>
     * Delete rate access exclusions
     */
    deleteRateAccessExclusions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteRateAccessExclusionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to delete rate groups. <p><strong>OperationId:</strong>deleteRateGroups</p>
     * Delete rate groups
     */
    deleteRateGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteRateGroups.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling deleteRateGroups.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling deleteRateGroups.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling deleteRateGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rateGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to delete rate groups. <p><strong>OperationId:</strong>deleteRateGroups</p>
     * Delete rate groups
     */
    deleteRateGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteRateGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to delete Rate Plan for a given hotel id. <p><strong>OperationId:</strong>deleteRatePlan</p>
     * Delete rate plan
     */
    deleteRatePlanRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
                throw new runtime.RequiredError('ratePlanCode', 'Required parameter requestParameters.ratePlanCode was null or undefined when calling deleteRatePlan.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteRatePlan.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling deleteRatePlan.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling deleteRatePlan.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling deleteRatePlan.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to delete Rate Plan for a given hotel id. <p><strong>OperationId:</strong>deleteRatePlan</p>
     * Delete rate plan
     */
    deleteRatePlan(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteRatePlanRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to delete Rate Plan package. <p><strong>OperationId:</strong>deleteRatePlanPackages</p>
     * Delete rate plan packages
     */
    deleteRatePlanPackagesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
                throw new runtime.RequiredError('ratePlanCode', 'Required parameter requestParameters.ratePlanCode was null or undefined when calling deleteRatePlanPackages.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteRatePlanPackages.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling deleteRatePlanPackages.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling deleteRatePlanPackages.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling deleteRatePlanPackages.');
            }
            const queryParameters = {};
            if (requestParameters.packageCode) {
                queryParameters['packageCode'] = requestParameters.packageCode;
            }
            if (requestParameters.packageGroup) {
                queryParameters['packageGroup'] = requestParameters.packageGroup;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/packages`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to delete Rate Plan package. <p><strong>OperationId:</strong>deleteRatePlanPackages</p>
     * Delete rate plan packages
     */
    deleteRatePlanPackages(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteRatePlanPackagesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to delete Rate Plan posting rhythms. <p><strong>OperationId:</strong>deleteRatePlanPostingRhythms</p>
     * Delete rate plan posting rhythms
     */
    deleteRatePlanPostingRhythmsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
                throw new runtime.RequiredError('ratePlanCode', 'Required parameter requestParameters.ratePlanCode was null or undefined when calling deleteRatePlanPostingRhythms.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteRatePlanPostingRhythms.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling deleteRatePlanPostingRhythms.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling deleteRatePlanPostingRhythms.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling deleteRatePlanPostingRhythms.');
            }
            const queryParameters = {};
            if (requestParameters.code) {
                queryParameters['code'] = requestParameters.code;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/postingRhythms`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to delete Rate Plan posting rhythms. <p><strong>OperationId:</strong>deleteRatePlanPostingRhythms</p>
     * Delete rate plan posting rhythms
     */
    deleteRatePlanPostingRhythms(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteRatePlanPostingRhythmsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Rate Plan schedules.<p><strong>OperationId:</strong>deleteRatePlanSchedules</p>
     * Delete rate plan schedule
     */
    deleteRatePlanSchedulesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
                throw new runtime.RequiredError('ratePlanCode', 'Required parameter requestParameters.ratePlanCode was null or undefined when calling deleteRatePlanSchedules.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteRatePlanSchedules.');
            }
            if (requestParameters.ratePlanScheduleIds === null || requestParameters.ratePlanScheduleIds === undefined) {
                throw new runtime.RequiredError('ratePlanScheduleIds', 'Required parameter requestParameters.ratePlanScheduleIds was null or undefined when calling deleteRatePlanSchedules.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling deleteRatePlanSchedules.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling deleteRatePlanSchedules.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling deleteRatePlanSchedules.');
            }
            const queryParameters = {};
            if (requestParameters.ratePlanScheduleIds) {
                queryParameters['ratePlanScheduleIds'] = requestParameters.ratePlanScheduleIds;
            }
            if (requestParameters.tierID !== undefined) {
                queryParameters['tierID'] = requestParameters.tierID;
            }
            if (requestParameters.seasonCode !== undefined) {
                queryParameters['seasonCode'] = requestParameters.seasonCode;
            }
            if (requestParameters.start !== undefined) {
                queryParameters['start'] = requestParameters.start.toISOString().substring(0, 10);
            }
            if (requestParameters.end !== undefined) {
                queryParameters['end'] = requestParameters.end.toISOString().substring(0, 10);
            }
            if (requestParameters.roomType) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.sunday !== undefined) {
                queryParameters['sunday'] = requestParameters.sunday;
            }
            if (requestParameters.monday !== undefined) {
                queryParameters['monday'] = requestParameters.monday;
            }
            if (requestParameters.tuesday !== undefined) {
                queryParameters['tuesday'] = requestParameters.tuesday;
            }
            if (requestParameters.wednesday !== undefined) {
                queryParameters['wednesday'] = requestParameters.wednesday;
            }
            if (requestParameters.thursday !== undefined) {
                queryParameters['thursday'] = requestParameters.thursday;
            }
            if (requestParameters.friday !== undefined) {
                queryParameters['friday'] = requestParameters.friday;
            }
            if (requestParameters.saturday !== undefined) {
                queryParameters['saturday'] = requestParameters.saturday;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/schedules`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Rate Plan schedules.<p><strong>OperationId:</strong>deleteRatePlanSchedules</p>
     * Delete rate plan schedule
     */
    deleteRatePlanSchedules(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteRatePlanSchedulesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to delete Rate Plan service cache. <p><strong>OperationId:</strong>deleteRatePlanServiceCache</p>
     * Delete the Rate plan service cache
     */
    deleteRatePlanServiceCacheRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling deleteRatePlanServiceCache.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling deleteRatePlanServiceCache.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling deleteRatePlanServiceCache.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/services/rateplan/cache`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to delete Rate Plan service cache. <p><strong>OperationId:</strong>deleteRatePlanServiceCache</p>
     * Delete the Rate plan service cache
     */
    deleteRatePlanServiceCache(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteRatePlanServiceCacheRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to delete rate strategies. <p><strong>OperationId:</strong>deleteRateStrategy</p>
     * Delete rate strategies
     */
    deleteRateStrategyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.rateStrategyId === null || requestParameters.rateStrategyId === undefined) {
                throw new runtime.RequiredError('rateStrategyId', 'Required parameter requestParameters.rateStrategyId was null or undefined when calling deleteRateStrategy.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteRateStrategy.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling deleteRateStrategy.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling deleteRateStrategy.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling deleteRateStrategy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rateStrategies/{rateStrategyId}`.replace(`{${"rateStrategyId"}}`, encodeURIComponent(String(requestParameters.rateStrategyId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to delete rate strategies. <p><strong>OperationId:</strong>deleteRateStrategy</p>
     * Delete rate strategies
     */
    deleteRateStrategy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteRateStrategyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to delete Package Forecast groups template. <p><strong>OperationId:</strong>deleteTemplatePackageForecastGroups</p>
     * Delete Template Package Forecast Groups
     */
    deleteTemplatePackageForecastGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.packageForecastGroupCode === null || requestParameters.packageForecastGroupCode === undefined) {
                throw new runtime.RequiredError('packageForecastGroupCode', 'Required parameter requestParameters.packageForecastGroupCode was null or undefined when calling deleteTemplatePackageForecastGroups.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling deleteTemplatePackageForecastGroups.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling deleteTemplatePackageForecastGroups.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling deleteTemplatePackageForecastGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/packageForecastGroups/{packageForecastGroupCode}`.replace(`{${"packageForecastGroupCode"}}`, encodeURIComponent(String(requestParameters.packageForecastGroupCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to delete Package Forecast groups template. <p><strong>OperationId:</strong>deleteTemplatePackageForecastGroups</p>
     * Delete Template Package Forecast Groups
     */
    deleteTemplatePackageForecastGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteTemplatePackageForecastGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to distribute negotiated Rate. <p><strong>OperationId:</strong>distributeNegotiatedRates</p>
     * Distribute negotiated rates
     */
    distributeNegotiatedRatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling distributeNegotiatedRates.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling distributeNegotiatedRates.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling distributeNegotiatedRates.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling distributeNegotiatedRates.');
            }
            if (requestParameters.distributedNegotiatedRates === null || requestParameters.distributedNegotiatedRates === undefined) {
                throw new runtime.RequiredError('distributedNegotiatedRates', 'Required parameter requestParameters.distributedNegotiatedRates was null or undefined when calling distributeNegotiatedRates.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/negotiatedRates/distributions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DistributedNegotiatedRatesToJSON)(requestParameters.distributedNegotiatedRates),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to distribute negotiated Rate. <p><strong>OperationId:</strong>distributeNegotiatedRates</p>
     * Distribute negotiated rates
     */
    distributeNegotiatedRates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.distributeNegotiatedRatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch external Rate Plan. <p><strong>OperationId:</strong>downloadExternalRatePlan</p>
     * Get external rate plan
     */
    downloadExternalRatePlanRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
                throw new runtime.RequiredError('ratePlanCode', 'Required parameter requestParameters.ratePlanCode was null or undefined when calling downloadExternalRatePlan.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling downloadExternalRatePlan.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling downloadExternalRatePlan.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling downloadExternalRatePlan.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling downloadExternalRatePlan.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/externalRatePlans/{ratePlanCode}`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch external Rate Plan. <p><strong>OperationId:</strong>downloadExternalRatePlan</p>
     * Get external rate plan
     */
    downloadExternalRatePlan(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.downloadExternalRatePlanRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows to fetch Best Available rates for rate code(s). <p><strong>OperationId:</strong>getBestAvailableRates</p>
     * Fetch Best Available Rates
     */
    getBestAvailableRatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getBestAvailableRates.');
            }
            if (requestParameters.startDay === null || requestParameters.startDay === undefined) {
                throw new runtime.RequiredError('startDay', 'Required parameter requestParameters.startDay was null or undefined when calling getBestAvailableRates.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getBestAvailableRates.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getBestAvailableRates.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getBestAvailableRates.');
            }
            const queryParameters = {};
            if (requestParameters.startDay !== undefined) {
                queryParameters['startDay'] = requestParameters.startDay.toISOString().substring(0, 10);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.rateCode) {
                queryParameters['rateCode'] = requestParameters.rateCode;
            }
            if (requestParameters.endDay !== undefined) {
                queryParameters['endDay'] = requestParameters.endDay.toISOString().substring(0, 10);
            }
            if (requestParameters.daysOfWeek) {
                queryParameters['daysOfWeek'] = requestParameters.daysOfWeek;
            }
            if (requestParameters.lengthOfStay) {
                queryParameters['lengthOfStay'] = requestParameters.lengthOfStay;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/bestavailablerates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetBestAvailableRatesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows to fetch Best Available rates for rate code(s). <p><strong>OperationId:</strong>getBestAvailableRates</p>
     * Fetch Best Available Rates
     */
    getBestAvailableRates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBestAvailableRatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch package forecast groups. <p><strong>OperationId:</strong>getHotelPackageForecastGroups</p>
     * Get Hotel Package Forecast Groups
     */
    getHotelPackageForecastGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getHotelPackageForecastGroups.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getHotelPackageForecastGroups.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getHotelPackageForecastGroups.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getHotelPackageForecastGroups.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.packageForecastGroupCodes) {
                queryParameters['PackageForecastGroupCodes'] = requestParameters.packageForecastGroupCodes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/packageForecastGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.HotelPackageForecastGroupsFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch package forecast groups. <p><strong>OperationId:</strong>getHotelPackageForecastGroups</p>
     * Get Hotel Package Forecast Groups
     */
    getHotelPackageForecastGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getHotelPackageForecastGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch mass rate change status. <p><strong>OperationId:</strong>getMassRateChangeStatus</p>
     * Get mass rate change status
     */
    getMassRateChangeStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getMassRateChangeStatus.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getMassRateChangeStatus.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getMassRateChangeStatus.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getMassRateChangeStatus.');
            }
            const queryParameters = {};
            if (requestParameters.detailStatus !== undefined) {
                queryParameters['detailStatus'] = requestParameters.detailStatus;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/massRateChangeStatus`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MassRateChangeStatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch mass rate change status. <p><strong>OperationId:</strong>getMassRateChangeStatus</p>
     * Get mass rate change status
     */
    getMassRateChangeStatus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMassRateChangeStatusRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch negotiated rates and profile for a given hotel id. <p><strong>OperationId:</strong>getNegotiatedRates</p>
     * Get negotiated rates and profiles
     */
    getNegotiatedRatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getNegotiatedRates.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getNegotiatedRates.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getNegotiatedRates.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getNegotiatedRates.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate.toISOString().substring(0, 10);
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate.toISOString().substring(0, 10);
            }
            if (requestParameters.includeInactiveNegotiatedRates !== undefined) {
                queryParameters['includeInactiveNegotiatedRates'] = requestParameters.includeInactiveNegotiatedRates;
            }
            if (requestParameters.fetchInstructionsLimit !== undefined) {
                queryParameters['fetchInstructionsLimit'] = requestParameters.fetchInstructionsLimit;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/negotiatedRates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.NegotiatedRatesFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch negotiated rates and profile for a given hotel id. <p><strong>OperationId:</strong>getNegotiatedRates</p>
     * Get negotiated rates and profiles
     */
    getNegotiatedRates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getNegotiatedRatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch a Rate Plan and Profile for given hotel id and negotiated rate code. <p><strong>OperationId:</strong>getNegotiatedRatesForGivenHotelAndRate</p>
     * Fetch Negotiated Rates
     */
    getNegotiatedRatesForGivenHotelAndRateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.rateCode === null || requestParameters.rateCode === undefined) {
                throw new runtime.RequiredError('rateCode', 'Required parameter requestParameters.rateCode was null or undefined when calling getNegotiatedRatesForGivenHotelAndRate.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getNegotiatedRatesForGivenHotelAndRate.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getNegotiatedRatesForGivenHotelAndRate.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getNegotiatedRatesForGivenHotelAndRate.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getNegotiatedRatesForGivenHotelAndRate.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate.toISOString().substring(0, 10);
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate.toISOString().substring(0, 10);
            }
            if (requestParameters.includeInactiveNegotiatedRates !== undefined) {
                queryParameters['includeInactiveNegotiatedRates'] = requestParameters.includeInactiveNegotiatedRates;
            }
            if (requestParameters.fetchInstructionsLimit !== undefined) {
                queryParameters['fetchInstructionsLimit'] = requestParameters.fetchInstructionsLimit;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/negotiatedRates/{rateCode}/profiles`.replace(`{${"rateCode"}}`, encodeURIComponent(String(requestParameters.rateCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.NegotiatedRatesFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch a Rate Plan and Profile for given hotel id and negotiated rate code. <p><strong>OperationId:</strong>getNegotiatedRatesForGivenHotelAndRate</p>
     * Fetch Negotiated Rates
     */
    getNegotiatedRatesForGivenHotelAndRate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getNegotiatedRatesForGivenHotelAndRateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch negotiated Rates for a given profile. <p><strong>OperationId:</strong>getNegotiatedRatesForGivenProfile</p>
     * Get negotiated rate details for given profile
     */
    getNegotiatedRatesForGivenProfileRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
                throw new runtime.RequiredError('profileId', 'Required parameter requestParameters.profileId was null or undefined when calling getNegotiatedRatesForGivenProfile.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getNegotiatedRatesForGivenProfile.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getNegotiatedRatesForGivenProfile.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getNegotiatedRatesForGivenProfile.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate.toISOString().substring(0, 10);
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate.toISOString().substring(0, 10);
            }
            if (requestParameters.hotelCode !== undefined) {
                queryParameters['hotelCode'] = requestParameters.hotelCode;
            }
            if (requestParameters.ratePlanCode !== undefined) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.includeInactiveNegotiatedRates !== undefined) {
                queryParameters['includeInactiveNegotiatedRates'] = requestParameters.includeInactiveNegotiatedRates;
            }
            if (requestParameters.fetchInstructionsLimit !== undefined) {
                queryParameters['fetchInstructionsLimit'] = requestParameters.fetchInstructionsLimit;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/profiles/{profileId}/negotiatedRates`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.NegotiatedRatesFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch negotiated Rates for a given profile. <p><strong>OperationId:</strong>getNegotiatedRatesForGivenProfile</p>
     * Get negotiated rate details for given profile
     */
    getNegotiatedRatesForGivenProfile(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getNegotiatedRatesForGivenProfileRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch package details for a given package. <p><strong>OperationId:</strong>getPackage</p>
     * Get package for given package
     */
    getPackageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.packageCode === null || requestParameters.packageCode === undefined) {
                throw new runtime.RequiredError('packageCode', 'Required parameter requestParameters.packageCode was null or undefined when calling getPackage.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getPackage.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getPackage.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getPackage.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getPackage.');
            }
            const queryParameters = {};
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/packages/{packageCode}`.replace(`{${"packageCode"}}`, encodeURIComponent(String(requestParameters.packageCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PackageInfoFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch package details for a given package. <p><strong>OperationId:</strong>getPackage</p>
     * Get package for given package
     */
    getPackage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPackageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch package formula ranges. <p><strong>OperationId:</strong>getPackageFormulaRanges</p>
     * Get package formula ranges
     */
    getPackageFormulaRangesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getPackageFormulaRanges.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getPackageFormulaRanges.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getPackageFormulaRanges.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getPackageFormulaRanges.');
            }
            const queryParameters = {};
            if (requestParameters.taxRangeType !== undefined) {
                queryParameters['taxRangeType'] = requestParameters.taxRangeType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/packageFormulaRanges`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PackageFormulaRangesFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch package formula ranges. <p><strong>OperationId:</strong>getPackageFormulaRanges</p>
     * Get package formula ranges
     */
    getPackageFormulaRanges(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPackageFormulaRangesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch package group. <p><strong>OperationId:</strong>getPackageGroups</p>
     * Get package groups
     */
    getPackageGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getPackageGroups.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getPackageGroups.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getPackageGroups.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getPackageGroups.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.code !== undefined) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.descriptionWildCard !== undefined) {
                queryParameters['descriptionWildCard'] = requestParameters.descriptionWildCard;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/packageGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PackageGroupsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch package group. <p><strong>OperationId:</strong>getPackageGroups</p>
     * Get package groups
     */
    getPackageGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPackageGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch rate plan codes associated for a package. <p><strong>OperationId:</strong>getPackageRates</p>
     * Get package rates
     */
    getPackageRatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.packageCode === null || requestParameters.packageCode === undefined) {
                throw new runtime.RequiredError('packageCode', 'Required parameter requestParameters.packageCode was null or undefined when calling getPackageRates.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getPackageRates.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getPackageRates.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getPackageRates.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getPackageRates.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/packages/{packageCode}/rates`.replace(`{${"packageCode"}}`, encodeURIComponent(String(requestParameters.packageCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PackageRatesFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch rate plan codes associated for a package. <p><strong>OperationId:</strong>getPackageRates</p>
     * Get package rates
     */
    getPackageRates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPackageRatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API you to get configured packages for a hotel.<p><strong>OperationId:</strong>getPackages</p>
     * Get Packages
     */
    getPackagesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getPackages.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getPackages.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getPackages.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.hotelId) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.packageCode) {
                queryParameters['packageCode'] = requestParameters.packageCode;
            }
            if (requestParameters.descriptionWildCard !== undefined) {
                queryParameters['descriptionWildCard'] = requestParameters.descriptionWildCard;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate.toISOString().substring(0, 10);
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate.toISOString().substring(0, 10);
            }
            if (requestParameters.adults !== undefined) {
                queryParameters['adults'] = requestParameters.adults;
            }
            if (requestParameters.children !== undefined) {
                queryParameters['children'] = requestParameters.children;
            }
            if (requestParameters.bucket1Count !== undefined) {
                queryParameters['bucket1Count'] = requestParameters.bucket1Count;
            }
            if (requestParameters.bucket2Count !== undefined) {
                queryParameters['bucket2Count'] = requestParameters.bucket2Count;
            }
            if (requestParameters.bucket3Count !== undefined) {
                queryParameters['bucket3Count'] = requestParameters.bucket3Count;
            }
            if (requestParameters.bucket4Count !== undefined) {
                queryParameters['bucket4Count'] = requestParameters.bucket4Count;
            }
            if (requestParameters.bucket5Count !== undefined) {
                queryParameters['bucket5Count'] = requestParameters.bucket5Count;
            }
            if (requestParameters.includeGroup !== undefined) {
                queryParameters['includeGroup'] = requestParameters.includeGroup;
            }
            if (requestParameters.sellSeparate !== undefined) {
                queryParameters['sellSeparate'] = requestParameters.sellSeparate;
            }
            if (requestParameters.ticketPostingRhythm !== undefined) {
                queryParameters['ticketPostingRhythm'] = requestParameters.ticketPostingRhythm;
            }
            if (requestParameters.excludeRedemptionPackages !== undefined) {
                queryParameters['excludeRedemptionPackages'] = requestParameters.excludeRedemptionPackages;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/packages`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PackagesInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API you to get configured packages for a hotel.<p><strong>OperationId:</strong>getPackages</p>
     * Get Packages
     */
    getPackages(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPackagesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch promotion codes. <p><strong>OperationId:</strong>getPromotionCodes</p>
     * Get promotion codes
     */
    getPromotionCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getPromotionCodes.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getPromotionCodes.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getPromotionCodes.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getPromotionCodes.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.promotionCode) {
                queryParameters['promotionCode'] = requestParameters.promotionCode;
            }
            if (requestParameters.promotionGroup) {
                queryParameters['promotionGroup'] = requestParameters.promotionGroup;
            }
            if (requestParameters.rateCodes !== undefined) {
                queryParameters['rateCodes'] = requestParameters.rateCodes;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/promotionCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PropertyPromotionCodesFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch promotion codes. <p><strong>OperationId:</strong>getPromotionCodes</p>
     * Get promotion codes
     */
    getPromotionCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPromotionCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch promotion codes. <p><strong>OperationId:</strong>getPromotionGroups</p>
     * Get promotion groups
     */
    getPromotionGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getPromotionGroups.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getPromotionGroups.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getPromotionGroups.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getPromotionGroups.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.code) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.promotionGroupListCode) {
                queryParameters['promotionGroupListCode'] = requestParameters.promotionGroupListCode;
            }
            if (requestParameters.rateCodes !== undefined) {
                queryParameters['rateCodes'] = requestParameters.rateCodes;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/promotionGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PromotionGroupsFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch promotion codes. <p><strong>OperationId:</strong>getPromotionGroups</p>
     * Get promotion groups
     */
    getPromotionGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPromotionGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch Rate Activity Log. <p><strong>OperationId:</strong>getRateActivityLog</p>
     * Get rate activity log
     */
    getRateActivityLogRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRateActivityLog.');
            }
            if (requestParameters.module === null || requestParameters.module === undefined) {
                throw new runtime.RequiredError('module', 'Required parameter requestParameters.module was null or undefined when calling getRateActivityLog.');
            }
            if (requestParameters.parameterName === null || requestParameters.parameterName === undefined) {
                throw new runtime.RequiredError('parameterName', 'Required parameter requestParameters.parameterName was null or undefined when calling getRateActivityLog.');
            }
            if (requestParameters.parameterValue === null || requestParameters.parameterValue === undefined) {
                throw new runtime.RequiredError('parameterValue', 'Required parameter requestParameters.parameterValue was null or undefined when calling getRateActivityLog.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getRateActivityLog.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getRateActivityLog.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getRateActivityLog.');
            }
            const queryParameters = {};
            if (requestParameters.module !== undefined) {
                queryParameters['module'] = requestParameters.module;
            }
            if (requestParameters.parameterName) {
                queryParameters['parameterName'] = requestParameters.parameterName;
            }
            if (requestParameters.parameterValue) {
                queryParameters['parameterValue'] = requestParameters.parameterValue;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.activityGroup !== undefined) {
                queryParameters['activityGroup'] = requestParameters.activityGroup;
            }
            if (requestParameters.activityType !== undefined) {
                queryParameters['activityType'] = requestParameters.activityType;
            }
            if (requestParameters.fromDate !== undefined) {
                queryParameters['fromDate'] = requestParameters.fromDate.toISOString().substring(0, 10);
            }
            if (requestParameters.toDate !== undefined) {
                queryParameters['toDate'] = requestParameters.toDate.toISOString().substring(0, 10);
            }
            if (requestParameters.searchText !== undefined) {
                queryParameters['searchText'] = requestParameters.searchText;
            }
            if (requestParameters.userId) {
                queryParameters['userId'] = requestParameters.userId;
            }
            if (requestParameters.userForIdsUserId) {
                queryParameters['userForIdsUserId'] = requestParameters.userForIdsUserId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rates/activityLog`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RateActivityLogFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch Rate Activity Log. <p><strong>OperationId:</strong>getRateActivityLog</p>
     * Get rate activity log
     */
    getRateActivityLog(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRateActivityLogRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to update rate groups. <p><strong>OperationId:</strong>getRateGroups</p>
     * Get rate groups
     */
    getRateGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRateGroups.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getRateGroups.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getRateGroups.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getRateGroups.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.code) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rateGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RateGroupsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to update rate groups. <p><strong>OperationId:</strong>getRateGroups</p>
     * Get rate groups
     */
    getRateGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRateGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch Rate Plan for a given hotel id and Rate Plan Code. <p><strong>OperationId:</strong>getRatePlan</p>
     * Get rate plan
     */
    getRatePlanRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
                throw new runtime.RequiredError('ratePlanCode', 'Required parameter requestParameters.ratePlanCode was null or undefined when calling getRatePlan.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRatePlan.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getRatePlan.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getRatePlan.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getRatePlan.');
            }
            const queryParameters = {};
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RatePlanInfoFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch Rate Plan for a given hotel id and Rate Plan Code. <p><strong>OperationId:</strong>getRatePlan</p>
     * Get rate plan
     */
    getRatePlan(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRatePlanRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch Rate Plan  schedules for yield adjustments. <p><strong>OperationId:</strong>getRatePlanScheduleYieldAdjustments</p>
     * Get rate plan schedule yield adjustments
     */
    getRatePlanScheduleYieldAdjustmentsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRatePlanScheduleYieldAdjustments.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getRatePlanScheduleYieldAdjustments.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getRatePlanScheduleYieldAdjustments.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getRatePlanScheduleYieldAdjustments.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.summaryInfo !== undefined) {
                queryParameters['summaryInfo'] = requestParameters.summaryInfo;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.ratePlanCode !== undefined) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ratePlan/schedule/yieldAdjustment`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RatePlanScheduleYieldAdjustmentsFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch Rate Plan  schedules for yield adjustments. <p><strong>OperationId:</strong>getRatePlanScheduleYieldAdjustments</p>
     * Get rate plan schedule yield adjustments
     */
    getRatePlanScheduleYieldAdjustments(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRatePlanScheduleYieldAdjustmentsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get a rate plan&apos;s pricing schedules. The information includes the date range and room types for which the price is valid, rate amounts for multiple persons, and associated packages.<p><strong>OperationId:</strong>getRatePlanSchedules</p>
     * Get rate plan schedules
     */
    getRatePlanSchedulesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
                throw new runtime.RequiredError('ratePlanCode', 'Required parameter requestParameters.ratePlanCode was null or undefined when calling getRatePlanSchedules.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRatePlanSchedules.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getRatePlanSchedules.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getRatePlanSchedules.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getRatePlanSchedules.');
            }
            const queryParameters = {};
            if (requestParameters.excludeRatePlanPackage !== undefined) {
                queryParameters['excludeRatePlanPackage'] = requestParameters.excludeRatePlanPackage;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.tierId !== undefined) {
                queryParameters['tierId'] = requestParameters.tierId;
            }
            if (requestParameters.ratePlanScheduleId !== undefined) {
                queryParameters['ratePlanScheduleId'] = requestParameters.ratePlanScheduleId;
            }
            if (requestParameters.ratePlanScheduleIdType !== undefined) {
                queryParameters['ratePlanScheduleIdType'] = requestParameters.ratePlanScheduleIdType;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate.toISOString().substring(0, 10);
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate.toISOString().substring(0, 10);
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.roomType) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.roomClass) {
                queryParameters['roomClass'] = requestParameters.roomClass;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/schedules`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RatePlanSchedulesInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get a rate plan&apos;s pricing schedules. The information includes the date range and room types for which the price is valid, rate amounts for multiple persons, and associated packages.<p><strong>OperationId:</strong>getRatePlanSchedules</p>
     * Get rate plan schedules
     */
    getRatePlanSchedules(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRatePlanSchedulesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get configured Rate Plans for a property and filter this by search criteria.<p><strong>OperationId:</strong>getRatePlans</p>
     * Get rate plans
     */
    getRatePlansRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRatePlans.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getRatePlans.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getRatePlans.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getRatePlans.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.includeRateInformation !== undefined) {
                queryParameters['includeRateInformation'] = requestParameters.includeRateInformation;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.ratePlanCode) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.rateCategory) {
                queryParameters['rateCategory'] = requestParameters.rateCategory;
            }
            if (requestParameters.sellDate !== undefined) {
                queryParameters['sellDate'] = requestParameters.sellDate.toISOString().substring(0, 10);
            }
            if (requestParameters.displaySet !== undefined) {
                queryParameters['displaySet'] = requestParameters.displaySet;
            }
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idExtension !== undefined) {
                queryParameters['idExtension'] = requestParameters.idExtension;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.attributeName) {
                queryParameters['attributeName'] = requestParameters.attributeName;
            }
            if (requestParameters.orderType) {
                queryParameters['orderType'] = requestParameters.orderType;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            if (requestParameters.dayUseOnly !== undefined) {
                queryParameters['dayUseOnly'] = requestParameters.dayUseOnly;
            }
            if (requestParameters.approvalStatus !== undefined) {
                queryParameters['approvalStatus'] = requestParameters.approvalStatus;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/ratePlans`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RatePlansSummaryFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get configured Rate Plans for a property and filter this by search criteria.<p><strong>OperationId:</strong>getRatePlans</p>
     * Get rate plans
     */
    getRatePlans(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRatePlansRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch Rate Plans for a given hotel id. <p><strong>OperationId:</strong>getRatePlansByHotel</p>
     * Get rate plans by Hotel Code
     */
    getRatePlansByHotelRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRatePlansByHotel.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getRatePlansByHotel.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getRatePlansByHotel.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getRatePlansByHotel.');
            }
            const queryParameters = {};
            if (requestParameters.ratePlanCode !== undefined) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ratePlans`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RatePlanInfoFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch Rate Plans for a given hotel id. <p><strong>OperationId:</strong>getRatePlansByHotel</p>
     * Get rate plans by Hotel Code
     */
    getRatePlansByHotel(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRatePlansByHotelRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch Rate Plans on a specific block. <p><strong>OperationId:</strong>getRatePlansForBlock</p>
     * Get rate plans for a given block
     */
    getRatePlansForBlockRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRatePlansForBlock.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getRatePlansForBlock.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getRatePlansForBlock.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getRatePlansForBlock.');
            }
            const queryParameters = {};
            if (requestParameters.ratePlanCode) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.beginDate !== undefined) {
                queryParameters['beginDate'] = requestParameters.beginDate.toISOString().substring(0, 10);
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate.toISOString().substring(0, 10);
            }
            if (requestParameters.companyId !== undefined) {
                queryParameters['companyId'] = requestParameters.companyId;
            }
            if (requestParameters.companyIdType !== undefined) {
                queryParameters['companyIdType'] = requestParameters.companyIdType;
            }
            if (requestParameters.sourceId !== undefined) {
                queryParameters['sourceId'] = requestParameters.sourceId;
            }
            if (requestParameters.sourceIdType !== undefined) {
                queryParameters['sourceIdType'] = requestParameters.sourceIdType;
            }
            if (requestParameters.agentId !== undefined) {
                queryParameters['agentId'] = requestParameters.agentId;
            }
            if (requestParameters.agentIdType !== undefined) {
                queryParameters['agentIdType'] = requestParameters.agentIdType;
            }
            if (requestParameters.negotiatedOnly !== undefined) {
                queryParameters['negotiatedOnly'] = requestParameters.negotiatedOnly;
            }
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/blocks/ratePlans`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BlockRatePlansFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch Rate Plans on a specific block. <p><strong>OperationId:</strong>getRatePlansForBlock</p>
     * Get rate plans for a given block
     */
    getRatePlansForBlock(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRatePlansForBlockRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch rate strategies. <p><strong>OperationId:</strong>getRateStrategies</p>
     * Get rate strategies
     */
    getRateStrategiesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRateStrategies.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getRateStrategies.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getRateStrategies.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getRateStrategies.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.restrictionDate !== undefined) {
                queryParameters['restrictionDate'] = requestParameters.restrictionDate.toISOString().substring(0, 10);
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rateStrategies`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RateStrategiesFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch rate strategies. <p><strong>OperationId:</strong>getRateStrategies</p>
     * Get rate strategies
     */
    getRateStrategies(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRateStrategiesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch Package Forecast groups template. <p><strong>OperationId:</strong>getTemplatePackageForecastGroups</p>
     * Get Template Package Forecast Groups
     */
    getTemplatePackageForecastGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.includeInactive === null || requestParameters.includeInactive === undefined) {
                throw new runtime.RequiredError('includeInactive', 'Required parameter requestParameters.includeInactive was null or undefined when calling getTemplatePackageForecastGroups.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getTemplatePackageForecastGroups.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getTemplatePackageForecastGroups.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getTemplatePackageForecastGroups.');
            }
            const queryParameters = {};
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            if (requestParameters.packageForecastGroupCode) {
                queryParameters['packageForecastGroupCode'] = requestParameters.packageForecastGroupCode;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/packageForecastGroups`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TemplatePackageForecastGroupsFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch Package Forecast groups template. <p><strong>OperationId:</strong>getTemplatePackageForecastGroups</p>
     * Get Template Package Forecast Groups
     */
    getTemplatePackageForecastGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTemplatePackageForecastGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch Promotion Code template. <p><strong>OperationId:</strong>getTemplatePromotionCodes</p>
     * Get Template Promotion Codes
     */
    getTemplatePromotionCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getTemplatePromotionCodes.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getTemplatePromotionCodes.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getTemplatePromotionCodes.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.hotelId) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.promotionCode) {
                queryParameters['promotionCode'] = requestParameters.promotionCode;
            }
            if (requestParameters.promotionGroup) {
                queryParameters['promotionGroup'] = requestParameters.promotionGroup;
            }
            if (requestParameters.rateCodes !== undefined) {
                queryParameters['rateCodes'] = requestParameters.rateCodes;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/promotionCodes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TemplatePromotionCodesFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch Promotion Code template. <p><strong>OperationId:</strong>getTemplatePromotionCodes</p>
     * Get Template Promotion Codes
     */
    getTemplatePromotionCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTemplatePromotionCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch yield adjustments. <p><strong>OperationId:</strong>getYieldAdjustments</p>
     * Get yield adjustments
     */
    getYieldAdjustmentsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getYieldAdjustments.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getYieldAdjustments.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getYieldAdjustments.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getYieldAdjustments.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/yieldAdjustments`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.YieldAdjustmentsFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch yield adjustments. <p><strong>OperationId:</strong>getYieldAdjustments</p>
     * Get yield adjustments
     */
    getYieldAdjustments(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getYieldAdjustmentsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to update Rate Plan schedules. <p><strong>OperationId:</strong>manageRatePlansSchedules</p>
     * Manages rate plan schedules
     */
    manageRatePlansSchedulesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling manageRatePlansSchedules.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling manageRatePlansSchedules.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling manageRatePlansSchedules.');
            }
            if (requestParameters.ratePlansSchedulesToManage === null || requestParameters.ratePlansSchedulesToManage === undefined) {
                throw new runtime.RequiredError('ratePlansSchedulesToManage', 'Required parameter requestParameters.ratePlansSchedulesToManage was null or undefined when calling manageRatePlansSchedules.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/ratePlanSchedules`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RatePlansSchedulesToManageToJSON)(requestParameters.ratePlansSchedulesToManage),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to update Rate Plan schedules. <p><strong>OperationId:</strong>manageRatePlansSchedules</p>
     * Manages rate plan schedules
     */
    manageRatePlansSchedules(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.manageRatePlansSchedulesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch Rate Plan Service version. <p><strong>OperationId:</strong>pingRatePlanService</p>
     * Get Rate plan service version
     */
    pingRatePlanServiceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling pingRatePlanService.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling pingRatePlanService.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling pingRatePlanService.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/services/rateplan/status`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.OperaVersionFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch Rate Plan Service version. <p><strong>OperationId:</strong>pingRatePlanService</p>
     * Get Rate plan service version
     */
    pingRatePlanService(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.pingRatePlanServiceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows to create Best Available rates for rate code(s). <p><strong>OperationId:</strong>postBestAvailableRates</p>
     * Create a Best Available Rates
     */
    postBestAvailableRatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postBestAvailableRates.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling postBestAvailableRates.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling postBestAvailableRates.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling postBestAvailableRates.');
            }
            if (requestParameters.createBestAvailableRates === null || requestParameters.createBestAvailableRates === undefined) {
                throw new runtime.RequiredError('createBestAvailableRates', 'Required parameter requestParameters.createBestAvailableRates was null or undefined when calling postBestAvailableRates.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/bestavailablerates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CreateBestAvailableRatesToJSON)(requestParameters.createBestAvailableRates),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows to create Best Available rates for rate code(s). <p><strong>OperationId:</strong>postBestAvailableRates</p>
     * Create a Best Available Rates
     */
    postBestAvailableRates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postBestAvailableRatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to create package forecast groups. <p><strong>OperationId:</strong>postHotelPackageForecastGroups</p>
     * Create Hotel Package Forecast Groups
     */
    postHotelPackageForecastGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postHotelPackageForecastGroups.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling postHotelPackageForecastGroups.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling postHotelPackageForecastGroups.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling postHotelPackageForecastGroups.');
            }
            if (requestParameters.hotelPackageForecastGroupsToCreate === null || requestParameters.hotelPackageForecastGroupsToCreate === undefined) {
                throw new runtime.RequiredError('hotelPackageForecastGroupsToCreate', 'Required parameter requestParameters.hotelPackageForecastGroupsToCreate was null or undefined when calling postHotelPackageForecastGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/packageForecastGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.HotelPackageForecastGroupsToCreateToJSON)(requestParameters.hotelPackageForecastGroupsToCreate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to create package forecast groups. <p><strong>OperationId:</strong>postHotelPackageForecastGroups</p>
     * Create Hotel Package Forecast Groups
     */
    postHotelPackageForecastGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postHotelPackageForecastGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to create negotiated rate for a given profile. <p><strong>OperationId:</strong>postNegotiatedRates</p>
     * Create negotiated rates
     */
    postNegotiatedRatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postNegotiatedRates.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling postNegotiatedRates.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling postNegotiatedRates.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling postNegotiatedRates.');
            }
            if (requestParameters.negotiatedRates === null || requestParameters.negotiatedRates === undefined) {
                throw new runtime.RequiredError('negotiatedRates', 'Required parameter requestParameters.negotiatedRates was null or undefined when calling postNegotiatedRates.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/negotiatedRates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.NegotiatedRatesToJSON)(requestParameters.negotiatedRates),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to create negotiated rate for a given profile. <p><strong>OperationId:</strong>postNegotiatedRates</p>
     * Create negotiated rates
     */
    postNegotiatedRates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postNegotiatedRatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to create a package. <p><strong>OperationId:</strong>postPackage</p>
     * Create package
     */
    postPackageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.packageCode === null || requestParameters.packageCode === undefined) {
                throw new runtime.RequiredError('packageCode', 'Required parameter requestParameters.packageCode was null or undefined when calling postPackage.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postPackage.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling postPackage.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling postPackage.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling postPackage.');
            }
            if (requestParameters.packageInfo === null || requestParameters.packageInfo === undefined) {
                throw new runtime.RequiredError('packageInfo', 'Required parameter requestParameters.packageInfo was null or undefined when calling postPackage.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/packages/{packageCode}`.replace(`{${"packageCode"}}`, encodeURIComponent(String(requestParameters.packageCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PackageInfoToJSON)(requestParameters.packageInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to create a package. <p><strong>OperationId:</strong>postPackage</p>
     * Create package
     */
    postPackage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postPackageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to create package formula ranges. <p><strong>OperationId:</strong>postPackageFormulaRanges</p>
     * Create package formula ranges
     */
    postPackageFormulaRangesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postPackageFormulaRanges.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling postPackageFormulaRanges.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling postPackageFormulaRanges.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling postPackageFormulaRanges.');
            }
            if (requestParameters.packageFormulaRanges === null || requestParameters.packageFormulaRanges === undefined) {
                throw new runtime.RequiredError('packageFormulaRanges', 'Required parameter requestParameters.packageFormulaRanges was null or undefined when calling postPackageFormulaRanges.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/packageFormulaRanges`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PackageFormulaRangesToJSON)(requestParameters.packageFormulaRanges),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to create package formula ranges. <p><strong>OperationId:</strong>postPackageFormulaRanges</p>
     * Create package formula ranges
     */
    postPackageFormulaRanges(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postPackageFormulaRangesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to create package group. <p><strong>OperationId:</strong>postPackageGroup</p>
     * Create package group
     */
    postPackageGroupRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postPackageGroup.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling postPackageGroup.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling postPackageGroup.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling postPackageGroup.');
            }
            if (requestParameters.packageGroup === null || requestParameters.packageGroup === undefined) {
                throw new runtime.RequiredError('packageGroup', 'Required parameter requestParameters.packageGroup was null or undefined when calling postPackageGroup.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/packageGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PackageGroupToJSON)(requestParameters.packageGroup),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to create package group. <p><strong>OperationId:</strong>postPackageGroup</p>
     * Create package group
     */
    postPackageGroup(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postPackageGroupRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to create promotion codes. <p><strong>OperationId:</strong>postPromotionCode</p>
     * Create promotion codes
     */
    postPromotionCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.promotionCode === null || requestParameters.promotionCode === undefined) {
                throw new runtime.RequiredError('promotionCode', 'Required parameter requestParameters.promotionCode was null or undefined when calling postPromotionCode.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postPromotionCode.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling postPromotionCode.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling postPromotionCode.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling postPromotionCode.');
            }
            if (requestParameters.propertyPromotionCode === null || requestParameters.propertyPromotionCode === undefined) {
                throw new runtime.RequiredError('propertyPromotionCode', 'Required parameter requestParameters.propertyPromotionCode was null or undefined when calling postPromotionCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/promotionCodes/{promotionCode}`.replace(`{${"promotionCode"}}`, encodeURIComponent(String(requestParameters.promotionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PropertyPromotionCodeToJSON)(requestParameters.propertyPromotionCode),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to create promotion codes. <p><strong>OperationId:</strong>postPromotionCode</p>
     * Create promotion codes
     */
    postPromotionCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postPromotionCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to create promotion groups. <p><strong>OperationId:</strong>postPromotionGroup</p>
     * Create promotion groups
     */
    postPromotionGroupRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.groupCode === null || requestParameters.groupCode === undefined) {
                throw new runtime.RequiredError('groupCode', 'Required parameter requestParameters.groupCode was null or undefined when calling postPromotionGroup.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postPromotionGroup.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling postPromotionGroup.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling postPromotionGroup.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling postPromotionGroup.');
            }
            if (requestParameters.promotionGroup === null || requestParameters.promotionGroup === undefined) {
                throw new runtime.RequiredError('promotionGroup', 'Required parameter requestParameters.promotionGroup was null or undefined when calling postPromotionGroup.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/promotionGroups/{groupCode}`.replace(`{${"groupCode"}}`, encodeURIComponent(String(requestParameters.groupCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PromotionGroupToJSON)(requestParameters.promotionGroup),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to create promotion groups. <p><strong>OperationId:</strong>postPromotionGroup</p>
     * Create promotion groups
     */
    postPromotionGroup(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postPromotionGroupRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to create rate groups. <p><strong>OperationId:</strong>postRateGroups</p>
     * Create rate groups
     */
    postRateGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postRateGroups.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling postRateGroups.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling postRateGroups.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling postRateGroups.');
            }
            if (requestParameters.rateGroups === null || requestParameters.rateGroups === undefined) {
                throw new runtime.RequiredError('rateGroups', 'Required parameter requestParameters.rateGroups was null or undefined when calling postRateGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rateGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RateGroupsToJSON)(requestParameters.rateGroups),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to create rate groups. <p><strong>OperationId:</strong>postRateGroups</p>
     * Create rate groups
     */
    postRateGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postRateGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API you to get Rate Plans for a given hotel.<p><strong>OperationId:</strong>postRatePlan</p>
     * Create rate plans
     */
    postRatePlanRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postRatePlan.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling postRatePlan.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling postRatePlan.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling postRatePlan.');
            }
            if (requestParameters.ratePlan === null || requestParameters.ratePlan === undefined) {
                throw new runtime.RequiredError('ratePlan', 'Required parameter requestParameters.ratePlan was null or undefined when calling postRatePlan.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ratePlans`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RatePlanToJSON)(requestParameters.ratePlan),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API you to get Rate Plans for a given hotel.<p><strong>OperationId:</strong>postRatePlan</p>
     * Create rate plans
     */
    postRatePlan(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postRatePlanRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to create Rate Plan package. <p><strong>OperationId:</strong>postRatePlanPackages</p>
     * Create rate plan package
     */
    postRatePlanPackagesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
                throw new runtime.RequiredError('ratePlanCode', 'Required parameter requestParameters.ratePlanCode was null or undefined when calling postRatePlanPackages.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postRatePlanPackages.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling postRatePlanPackages.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling postRatePlanPackages.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling postRatePlanPackages.');
            }
            if (requestParameters.ratePlanPackages === null || requestParameters.ratePlanPackages === undefined) {
                throw new runtime.RequiredError('ratePlanPackages', 'Required parameter requestParameters.ratePlanPackages was null or undefined when calling postRatePlanPackages.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/packages`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RatePlanPackagesToJSON)(requestParameters.ratePlanPackages),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to create Rate Plan package. <p><strong>OperationId:</strong>postRatePlanPackages</p>
     * Create rate plan package
     */
    postRatePlanPackages(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postRatePlanPackagesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to create Rate Plan posting rhythms. <p><strong>OperationId:</strong>postRatePlanPostingRhythms</p>
     * Create rate plan posting rhythms
     */
    postRatePlanPostingRhythmsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
                throw new runtime.RequiredError('ratePlanCode', 'Required parameter requestParameters.ratePlanCode was null or undefined when calling postRatePlanPostingRhythms.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postRatePlanPostingRhythms.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling postRatePlanPostingRhythms.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling postRatePlanPostingRhythms.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling postRatePlanPostingRhythms.');
            }
            if (requestParameters.ratePlanPostingRhythms === null || requestParameters.ratePlanPostingRhythms === undefined) {
                throw new runtime.RequiredError('ratePlanPostingRhythms', 'Required parameter requestParameters.ratePlanPostingRhythms was null or undefined when calling postRatePlanPostingRhythms.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/postingRhythms`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RatePlanPostingRhythmsToJSON)(requestParameters.ratePlanPostingRhythms),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to create Rate Plan posting rhythms. <p><strong>OperationId:</strong>postRatePlanPostingRhythms</p>
     * Create rate plan posting rhythms
     */
    postRatePlanPostingRhythms(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postRatePlanPostingRhythmsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to create Rate Plan pricing schedule. <p><strong>OperationId:</strong>postRatePlanSchedules</p>
     * Create rate plan schedules
     */
    postRatePlanSchedulesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
                throw new runtime.RequiredError('ratePlanCode', 'Required parameter requestParameters.ratePlanCode was null or undefined when calling postRatePlanSchedules.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postRatePlanSchedules.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling postRatePlanSchedules.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling postRatePlanSchedules.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling postRatePlanSchedules.');
            }
            if (requestParameters.ratePlanSchedulesToCreate === null || requestParameters.ratePlanSchedulesToCreate === undefined) {
                throw new runtime.RequiredError('ratePlanSchedulesToCreate', 'Required parameter requestParameters.ratePlanSchedulesToCreate was null or undefined when calling postRatePlanSchedules.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/schedules`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RatePlanSchedulesToCreateToJSON)(requestParameters.ratePlanSchedulesToCreate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to create Rate Plan pricing schedule. <p><strong>OperationId:</strong>postRatePlanSchedules</p>
     * Create rate plan schedules
     */
    postRatePlanSchedules(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postRatePlanSchedulesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to create rate strategies. <p><strong>OperationId:</strong>postRateStrategy</p>
     * Create rate strategies
     */
    postRateStrategyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postRateStrategy.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling postRateStrategy.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling postRateStrategy.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling postRateStrategy.');
            }
            if (requestParameters.rateStrategy === null || requestParameters.rateStrategy === undefined) {
                throw new runtime.RequiredError('rateStrategy', 'Required parameter requestParameters.rateStrategy was null or undefined when calling postRateStrategy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rateStrategies`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RateStrategyToJSON)(requestParameters.rateStrategy),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to create rate strategies. <p><strong>OperationId:</strong>postRateStrategy</p>
     * Create rate strategies
     */
    postRateStrategy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postRateStrategyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to create Package Forecast groups template. <p><strong>OperationId:</strong>postTemplatePackageForecastGroups</p>
     * Create Template Package Forecast Groups
     */
    postTemplatePackageForecastGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling postTemplatePackageForecastGroups.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling postTemplatePackageForecastGroups.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling postTemplatePackageForecastGroups.');
            }
            if (requestParameters.templatePackageForecastGroups === null || requestParameters.templatePackageForecastGroups === undefined) {
                throw new runtime.RequiredError('templatePackageForecastGroups', 'Required parameter requestParameters.templatePackageForecastGroups was null or undefined when calling postTemplatePackageForecastGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/packageForecastGroups`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TemplatePackageForecastGroupsToJSON)(requestParameters.templatePackageForecastGroups),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to create Package Forecast groups template. <p><strong>OperationId:</strong>postTemplatePackageForecastGroups</p>
     * Create Template Package Forecast Groups
     */
    postTemplatePackageForecastGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postTemplatePackageForecastGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to create Promotion Code template. <p><strong>OperationId:</strong>postTemplatePromotionCode</p>
     * Create Template Promotion Code
     */
    postTemplatePromotionCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.promotionCode === null || requestParameters.promotionCode === undefined) {
                throw new runtime.RequiredError('promotionCode', 'Required parameter requestParameters.promotionCode was null or undefined when calling postTemplatePromotionCode.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling postTemplatePromotionCode.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling postTemplatePromotionCode.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling postTemplatePromotionCode.');
            }
            if (requestParameters.templatePromotionCode === null || requestParameters.templatePromotionCode === undefined) {
                throw new runtime.RequiredError('templatePromotionCode', 'Required parameter requestParameters.templatePromotionCode was null or undefined when calling postTemplatePromotionCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/promotionCodes/{promotionCode}`.replace(`{${"promotionCode"}}`, encodeURIComponent(String(requestParameters.promotionCode))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TemplatePromotionCodeToJSON)(requestParameters.templatePromotionCode),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to create Promotion Code template. <p><strong>OperationId:</strong>postTemplatePromotionCode</p>
     * Create Template Promotion Code
     */
    postTemplatePromotionCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postTemplatePromotionCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to update package forecast groups. <p><strong>OperationId:</strong>putHotelPackageForecastGroups</p>
     * Change Hotel Package Forecast Groups
     */
    putHotelPackageForecastGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putHotelPackageForecastGroups.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling putHotelPackageForecastGroups.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling putHotelPackageForecastGroups.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling putHotelPackageForecastGroups.');
            }
            if (requestParameters.hotelPackageForecastGroupsToChange === null || requestParameters.hotelPackageForecastGroupsToChange === undefined) {
                throw new runtime.RequiredError('hotelPackageForecastGroupsToChange', 'Required parameter requestParameters.hotelPackageForecastGroupsToChange was null or undefined when calling putHotelPackageForecastGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/packageForecastGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.HotelPackageForecastGroupsToChangeToJSON)(requestParameters.hotelPackageForecastGroupsToChange),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to update package forecast groups. <p><strong>OperationId:</strong>putHotelPackageForecastGroups</p>
     * Change Hotel Package Forecast Groups
     */
    putHotelPackageForecastGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putHotelPackageForecastGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to update negotiated rate for a given profile. <p><strong>OperationId:</strong>putNegotiatedRates</p>
     * Change negotiated rates
     */
    putNegotiatedRatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.rateCode === null || requestParameters.rateCode === undefined) {
                throw new runtime.RequiredError('rateCode', 'Required parameter requestParameters.rateCode was null or undefined when calling putNegotiatedRates.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putNegotiatedRates.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling putNegotiatedRates.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling putNegotiatedRates.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling putNegotiatedRates.');
            }
            if (requestParameters.negotiatedRates === null || requestParameters.negotiatedRates === undefined) {
                throw new runtime.RequiredError('negotiatedRates', 'Required parameter requestParameters.negotiatedRates was null or undefined when calling putNegotiatedRates.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/negotiatedRates/{rateCode}`.replace(`{${"rateCode"}}`, encodeURIComponent(String(requestParameters.rateCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.NegotiatedRatesToJSON)(requestParameters.negotiatedRates),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.NegotiatedRatesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to update negotiated rate for a given profile. <p><strong>OperationId:</strong>putNegotiatedRates</p>
     * Change negotiated rates
     */
    putNegotiatedRates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putNegotiatedRatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to update a package. <p><strong>OperationId:</strong>putPackage</p>
     * Change the package
     */
    putPackageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.packageCode === null || requestParameters.packageCode === undefined) {
                throw new runtime.RequiredError('packageCode', 'Required parameter requestParameters.packageCode was null or undefined when calling putPackage.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putPackage.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling putPackage.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling putPackage.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling putPackage.');
            }
            if (requestParameters.packageInfo === null || requestParameters.packageInfo === undefined) {
                throw new runtime.RequiredError('packageInfo', 'Required parameter requestParameters.packageInfo was null or undefined when calling putPackage.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/packages/{packageCode}`.replace(`{${"packageCode"}}`, encodeURIComponent(String(requestParameters.packageCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PackageInfoToJSON)(requestParameters.packageInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to update a package. <p><strong>OperationId:</strong>putPackage</p>
     * Change the package
     */
    putPackage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putPackageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to update package formula ranges. <p><strong>OperationId:</strong>putPackageFormulaRanges</p>
     * Change package formula ranges
     */
    putPackageFormulaRangesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.packageFormulaRangeId === null || requestParameters.packageFormulaRangeId === undefined) {
                throw new runtime.RequiredError('packageFormulaRangeId', 'Required parameter requestParameters.packageFormulaRangeId was null or undefined when calling putPackageFormulaRanges.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putPackageFormulaRanges.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling putPackageFormulaRanges.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling putPackageFormulaRanges.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling putPackageFormulaRanges.');
            }
            if (requestParameters.packageFormulaRanges === null || requestParameters.packageFormulaRanges === undefined) {
                throw new runtime.RequiredError('packageFormulaRanges', 'Required parameter requestParameters.packageFormulaRanges was null or undefined when calling putPackageFormulaRanges.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/packageFormulaRanges/{packageFormulaRangeId}`.replace(`{${"packageFormulaRangeId"}}`, encodeURIComponent(String(requestParameters.packageFormulaRangeId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PackageFormulaRangesToJSON)(requestParameters.packageFormulaRanges),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to update package formula ranges. <p><strong>OperationId:</strong>putPackageFormulaRanges</p>
     * Change package formula ranges
     */
    putPackageFormulaRanges(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putPackageFormulaRangesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to change package group. <p><strong>OperationId:</strong>putPackageGroup</p>
     * Change package group
     */
    putPackageGroupRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putPackageGroup.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling putPackageGroup.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling putPackageGroup.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling putPackageGroup.');
            }
            if (requestParameters.packageGroup === null || requestParameters.packageGroup === undefined) {
                throw new runtime.RequiredError('packageGroup', 'Required parameter requestParameters.packageGroup was null or undefined when calling putPackageGroup.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/packageGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PackageGroupToJSON)(requestParameters.packageGroup),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to change package group. <p><strong>OperationId:</strong>putPackageGroup</p>
     * Change package group
     */
    putPackageGroup(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putPackageGroupRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to update promotion codes. <p><strong>OperationId:</strong>putPromotionCode</p>
     * Change promotion codes
     */
    putPromotionCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.promotionCode === null || requestParameters.promotionCode === undefined) {
                throw new runtime.RequiredError('promotionCode', 'Required parameter requestParameters.promotionCode was null or undefined when calling putPromotionCode.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putPromotionCode.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling putPromotionCode.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling putPromotionCode.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling putPromotionCode.');
            }
            if (requestParameters.propertyPromotionCode === null || requestParameters.propertyPromotionCode === undefined) {
                throw new runtime.RequiredError('propertyPromotionCode', 'Required parameter requestParameters.propertyPromotionCode was null or undefined when calling putPromotionCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/promotionCodes/{promotionCode}`.replace(`{${"promotionCode"}}`, encodeURIComponent(String(requestParameters.promotionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PropertyPromotionCodeToJSON)(requestParameters.propertyPromotionCode),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to update promotion codes. <p><strong>OperationId:</strong>putPromotionCode</p>
     * Change promotion codes
     */
    putPromotionCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putPromotionCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to update promotion groups. <p><strong>OperationId:</strong>putPromotionGroup</p>
     * Change promotion groups
     */
    putPromotionGroupRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.groupCode === null || requestParameters.groupCode === undefined) {
                throw new runtime.RequiredError('groupCode', 'Required parameter requestParameters.groupCode was null or undefined when calling putPromotionGroup.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putPromotionGroup.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling putPromotionGroup.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling putPromotionGroup.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling putPromotionGroup.');
            }
            if (requestParameters.promotionGroup === null || requestParameters.promotionGroup === undefined) {
                throw new runtime.RequiredError('promotionGroup', 'Required parameter requestParameters.promotionGroup was null or undefined when calling putPromotionGroup.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/promotionGroups/{groupCode}`.replace(`{${"groupCode"}}`, encodeURIComponent(String(requestParameters.groupCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PromotionGroupToJSON)(requestParameters.promotionGroup),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to update promotion groups. <p><strong>OperationId:</strong>putPromotionGroup</p>
     * Change promotion groups
     */
    putPromotionGroup(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putPromotionGroupRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to update rate groups. <p><strong>OperationId:</strong>putRateGroups</p>
     * Change rate groups
     */
    putRateGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putRateGroups.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling putRateGroups.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling putRateGroups.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling putRateGroups.');
            }
            if (requestParameters.rateGroups === null || requestParameters.rateGroups === undefined) {
                throw new runtime.RequiredError('rateGroups', 'Required parameter requestParameters.rateGroups was null or undefined when calling putRateGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rateGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RateGroupsToJSON)(requestParameters.rateGroups),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to update rate groups. <p><strong>OperationId:</strong>putRateGroups</p>
     * Change rate groups
     */
    putRateGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putRateGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Rate Plan information such as date range, linked room types, and rate controls for a given hotel. Use the putRatePlanSchedules operation to add or update the rate plan pricing schedule.<p><strong>OperationId:</strong>putRatePlan</p>
     * Change rate plan
     */
    putRatePlanRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
                throw new runtime.RequiredError('ratePlanCode', 'Required parameter requestParameters.ratePlanCode was null or undefined when calling putRatePlan.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putRatePlan.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling putRatePlan.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling putRatePlan.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling putRatePlan.');
            }
            if (requestParameters.ratePlan === null || requestParameters.ratePlan === undefined) {
                throw new runtime.RequiredError('ratePlan', 'Required parameter requestParameters.ratePlan was null or undefined when calling putRatePlan.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RatePlanToJSON)(requestParameters.ratePlan),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Rate Plan information such as date range, linked room types, and rate controls for a given hotel. Use the putRatePlanSchedules operation to add or update the rate plan pricing schedule.<p><strong>OperationId:</strong>putRatePlan</p>
     * Change rate plan
     */
    putRatePlan(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putRatePlanRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to update Rate Plan package. <p><strong>OperationId:</strong>putRatePlanPackages</p>
     * Change rate plan package
     */
    putRatePlanPackagesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
                throw new runtime.RequiredError('ratePlanCode', 'Required parameter requestParameters.ratePlanCode was null or undefined when calling putRatePlanPackages.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putRatePlanPackages.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling putRatePlanPackages.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling putRatePlanPackages.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling putRatePlanPackages.');
            }
            if (requestParameters.ratePlanPackages === null || requestParameters.ratePlanPackages === undefined) {
                throw new runtime.RequiredError('ratePlanPackages', 'Required parameter requestParameters.ratePlanPackages was null or undefined when calling putRatePlanPackages.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/packages`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RatePlanPackagesToJSON)(requestParameters.ratePlanPackages),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to update Rate Plan package. <p><strong>OperationId:</strong>putRatePlanPackages</p>
     * Change rate plan package
     */
    putRatePlanPackages(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putRatePlanPackagesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to update Rate Plan posting rhythms. <p><strong>OperationId:</strong>putRatePlanPostingRhythms</p>
     * Change rate plan posting rhythms
     */
    putRatePlanPostingRhythmsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
                throw new runtime.RequiredError('ratePlanCode', 'Required parameter requestParameters.ratePlanCode was null or undefined when calling putRatePlanPostingRhythms.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putRatePlanPostingRhythms.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling putRatePlanPostingRhythms.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling putRatePlanPostingRhythms.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling putRatePlanPostingRhythms.');
            }
            if (requestParameters.ratePlanPostingRhythms === null || requestParameters.ratePlanPostingRhythms === undefined) {
                throw new runtime.RequiredError('ratePlanPostingRhythms', 'Required parameter requestParameters.ratePlanPostingRhythms was null or undefined when calling putRatePlanPostingRhythms.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/postingRhythms`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RatePlanPostingRhythmsToJSON)(requestParameters.ratePlanPostingRhythms),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to update Rate Plan posting rhythms. <p><strong>OperationId:</strong>putRatePlanPostingRhythms</p>
     * Change rate plan posting rhythms
     */
    putRatePlanPostingRhythms(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putRatePlanPostingRhythmsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to  update Rate Plan pricing schedules.<p><strong>OperationId:</strong>putRatePlanSchedules</p>
     * Change rate plan schedules
     */
    putRatePlanSchedulesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
                throw new runtime.RequiredError('ratePlanCode', 'Required parameter requestParameters.ratePlanCode was null or undefined when calling putRatePlanSchedules.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putRatePlanSchedules.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling putRatePlanSchedules.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling putRatePlanSchedules.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling putRatePlanSchedules.');
            }
            if (requestParameters.ratePlanSchedules === null || requestParameters.ratePlanSchedules === undefined) {
                throw new runtime.RequiredError('ratePlanSchedules', 'Required parameter requestParameters.ratePlanSchedules was null or undefined when calling putRatePlanSchedules.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/schedules`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RatePlanSchedulesToJSON)(requestParameters.ratePlanSchedules),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to  update Rate Plan pricing schedules.<p><strong>OperationId:</strong>putRatePlanSchedules</p>
     * Change rate plan schedules
     */
    putRatePlanSchedules(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putRatePlanSchedulesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to update rate strategies. <p><strong>OperationId:</strong>putRateStrategy</p>
     * Change rate strategies
     */
    putRateStrategyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.rateStrategyId === null || requestParameters.rateStrategyId === undefined) {
                throw new runtime.RequiredError('rateStrategyId', 'Required parameter requestParameters.rateStrategyId was null or undefined when calling putRateStrategy.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putRateStrategy.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling putRateStrategy.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling putRateStrategy.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling putRateStrategy.');
            }
            if (requestParameters.rateStrategy === null || requestParameters.rateStrategy === undefined) {
                throw new runtime.RequiredError('rateStrategy', 'Required parameter requestParameters.rateStrategy was null or undefined when calling putRateStrategy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rateStrategies/{rateStrategyId}`.replace(`{${"rateStrategyId"}}`, encodeURIComponent(String(requestParameters.rateStrategyId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RateStrategyToJSON)(requestParameters.rateStrategy),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to update rate strategies. <p><strong>OperationId:</strong>putRateStrategy</p>
     * Change rate strategies
     */
    putRateStrategy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putRateStrategyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to update Package Forecast groups template. <p><strong>OperationId:</strong>putTemplatePackageForecastGroups</p>
     * Change Template Package Forecast Groups
     */
    putTemplatePackageForecastGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling putTemplatePackageForecastGroups.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling putTemplatePackageForecastGroups.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling putTemplatePackageForecastGroups.');
            }
            if (requestParameters.templatePackageForecastGroups === null || requestParameters.templatePackageForecastGroups === undefined) {
                throw new runtime.RequiredError('templatePackageForecastGroups', 'Required parameter requestParameters.templatePackageForecastGroups was null or undefined when calling putTemplatePackageForecastGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/packageForecastGroups`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TemplatePackageForecastGroupsToJSON)(requestParameters.templatePackageForecastGroups),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to update Package Forecast groups template. <p><strong>OperationId:</strong>putTemplatePackageForecastGroups</p>
     * Change Template Package Forecast Groups
     */
    putTemplatePackageForecastGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putTemplatePackageForecastGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to update Promotion Code template. <p><strong>OperationId:</strong>putTemplatePromotionCode</p>
     * Change Template Promotion Code
     */
    putTemplatePromotionCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.promotionCode === null || requestParameters.promotionCode === undefined) {
                throw new runtime.RequiredError('promotionCode', 'Required parameter requestParameters.promotionCode was null or undefined when calling putTemplatePromotionCode.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling putTemplatePromotionCode.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling putTemplatePromotionCode.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling putTemplatePromotionCode.');
            }
            if (requestParameters.templatePromotionCode === null || requestParameters.templatePromotionCode === undefined) {
                throw new runtime.RequiredError('templatePromotionCode', 'Required parameter requestParameters.templatePromotionCode was null or undefined when calling putTemplatePromotionCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/promotionCodes/{promotionCode}`.replace(`{${"promotionCode"}}`, encodeURIComponent(String(requestParameters.promotionCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TemplatePromotionCodeToJSON)(requestParameters.templatePromotionCode),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to update Promotion Code template. <p><strong>OperationId:</strong>putTemplatePromotionCode</p>
     * Change Template Promotion Code
     */
    putTemplatePromotionCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putTemplatePromotionCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to set Rate Plan schedule range. <p><strong>OperationId:</strong>setDailyRatePlanScheduleRange</p>
     * Set daily rate plan schedule range
     */
    setDailyRatePlanScheduleRangeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
                throw new runtime.RequiredError('ratePlanCode', 'Required parameter requestParameters.ratePlanCode was null or undefined when calling setDailyRatePlanScheduleRange.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling setDailyRatePlanScheduleRange.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling setDailyRatePlanScheduleRange.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling setDailyRatePlanScheduleRange.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling setDailyRatePlanScheduleRange.');
            }
            if (requestParameters.dailyRatePlanScheduleRange === null || requestParameters.dailyRatePlanScheduleRange === undefined) {
                throw new runtime.RequiredError('dailyRatePlanScheduleRange', 'Required parameter requestParameters.dailyRatePlanScheduleRange was null or undefined when calling setDailyRatePlanScheduleRange.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/dailySchedules`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DailyRatePlanScheduleRangeToJSON)(requestParameters.dailyRatePlanScheduleRange),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to set Rate Plan schedule range. <p><strong>OperationId:</strong>setDailyRatePlanScheduleRange</p>
     * Set daily rate plan schedule range
     */
    setDailyRatePlanScheduleRange(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.setDailyRatePlanScheduleRangeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to update mass Rate Plan schedules. <p><strong>OperationId:</strong>setMassRatePlanSchedules</p>
     * Set mass rate plan schedules
     */
    setMassRatePlanSchedulesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling setMassRatePlanSchedules.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling setMassRatePlanSchedules.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling setMassRatePlanSchedules.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling setMassRatePlanSchedules.');
            }
            if (requestParameters.massRatePlanSchedules === null || requestParameters.massRatePlanSchedules === undefined) {
                throw new runtime.RequiredError('massRatePlanSchedules', 'Required parameter requestParameters.massRatePlanSchedules was null or undefined when calling setMassRatePlanSchedules.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/massRatePlanSchedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MassRatePlanSchedulesToJSON)(requestParameters.massRatePlanSchedules),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to update mass Rate Plan schedules. <p><strong>OperationId:</strong>setMassRatePlanSchedules</p>
     * Set mass rate plan schedules
     */
    setMassRatePlanSchedules(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.setMassRatePlanSchedulesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to set rate access exclusions. <p><strong>OperationId:</strong>setRateAccessExclusions</p>
     * Set rate access exclusions
     */
    setRateAccessExclusionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling setRateAccessExclusions.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling setRateAccessExclusions.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling setRateAccessExclusions.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling setRateAccessExclusions.');
            }
            if (requestParameters.rateAccessExclusions === null || requestParameters.rateAccessExclusions === undefined) {
                throw new runtime.RequiredError('rateAccessExclusions', 'Required parameter requestParameters.rateAccessExclusions was null or undefined when calling setRateAccessExclusions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rateAccessExclusions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RateAccessExclusionsToJSON)(requestParameters.rateAccessExclusions),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to set rate access exclusions. <p><strong>OperationId:</strong>setRateAccessExclusions</p>
     * Set rate access exclusions
     */
    setRateAccessExclusions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.setRateAccessExclusionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to set Rate strategies. <p><strong>OperationId:</strong>setRateStrategies</p>
     * Set rate strategies
     */
    setRateStrategiesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling setRateStrategies.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling setRateStrategies.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling setRateStrategies.');
            }
            if (requestParameters.rateStrategiesToSet === null || requestParameters.rateStrategiesToSet === undefined) {
                throw new runtime.RequiredError('rateStrategiesToSet', 'Required parameter requestParameters.rateStrategiesToSet was null or undefined when calling setRateStrategies.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/rateStrategies`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RateStrategiesToSetToJSON)(requestParameters.rateStrategiesToSet),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to set Rate strategies. <p><strong>OperationId:</strong>setRateStrategies</p>
     * Set rate strategies
     */
    setRateStrategies(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.setRateStrategiesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to split Rate Plan schedule. <p><strong>OperationId:</strong>splitRatePlanSchedule</p>
     * Split rate plan schedule
     */
    splitRatePlanScheduleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.scheduleId === null || requestParameters.scheduleId === undefined) {
                throw new runtime.RequiredError('scheduleId', 'Required parameter requestParameters.scheduleId was null or undefined when calling splitRatePlanSchedule.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling splitRatePlanSchedule.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling splitRatePlanSchedule.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling splitRatePlanSchedule.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling splitRatePlanSchedule.');
            }
            if (requestParameters.ratePlanScheduleToSplit === null || requestParameters.ratePlanScheduleToSplit === undefined) {
                throw new runtime.RequiredError('ratePlanScheduleToSplit', 'Required parameter requestParameters.ratePlanScheduleToSplit was null or undefined when calling splitRatePlanSchedule.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/ratePlanSchedules/{scheduleId}/split`.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters.scheduleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RatePlanScheduleToSplitToJSON)(requestParameters.ratePlanScheduleToSplit),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to split Rate Plan schedule. <p><strong>OperationId:</strong>splitRatePlanSchedule</p>
     * Split rate plan schedule
     */
    splitRatePlanSchedule(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.splitRatePlanScheduleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.RatePlanApi = RatePlanApi;
/**
 * @export
 */
exports.GetBestAvailableRatesDaysOfWeekEnum = {
    Monday: 'Monday',
    Tuesday: 'Tuesday',
    Wednesday: 'Wednesday',
    Thursday: 'Thursday',
    Friday: 'Friday',
    Saturday: 'Saturday',
    Sunday: 'Sunday'
};
/**
 * @export
 */
exports.GetBestAvailableRatesLengthOfStayEnum = {
    One: 'One',
    Two: 'Two',
    Three: 'Three',
    Four: 'Four',
    Five: 'Five',
    Six: 'Six',
    Seven: 'Seven',
    Eight: 'Eight'
};
/**
 * @export
 */
exports.GetNegotiatedRatesFetchInstructionsEnum = {
    Discounts: 'Discounts'
};
/**
 * @export
 */
exports.GetNegotiatedRatesForGivenHotelAndRateFetchInstructionsEnum = {
    Discounts: 'Discounts'
};
/**
 * @export
 */
exports.GetNegotiatedRatesForGivenProfileFetchInstructionsEnum = {
    Discounts: 'Discounts'
};
/**
 * @export
 */
exports.GetPackageFetchInstructionsEnum = {
    Header: 'Header',
    PostingRules: 'PostingRules',
    CalculatedPrice: 'CalculatedPrice',
    Items: 'Items',
    Details: 'Details',
    UsageDetails: 'UsageDetails'
};
/**
 * @export
 */
exports.GetPackagesFetchInstructionsEnum = {
    Header: 'Header',
    PostingRules: 'PostingRules',
    CalculatedPrice: 'CalculatedPrice',
    Items: 'Items',
    Details: 'Details',
    UsageDetails: 'UsageDetails'
};
/**
 * @export
 */
exports.GetRateActivityLogModuleEnum = {
    Reservation: 'Reservation',
    Contract: 'Contract',
    Allotment: 'Allotment',
    Outlookview: 'Outlookview',
    Profile: 'Profile',
    Accountreceivables: 'Accountreceivables',
    GdsConvRateCodes: 'GdsConvRateCodes',
    RateCode: 'RateCode',
    Billing: 'Billing',
    Activity: 'Activity'
};
/**
 * @export
 */
exports.GetRatePlanFetchInstructionsEnum = {
    PrimaryDetails: 'PrimaryDetails',
    TransactionDetails: 'TransactionDetails',
    Packages: 'Packages',
    RateCommission: 'RateCommission',
    NegotiatedProfiles: 'NegotiatedProfiles',
    RateControls: 'RateControls',
    RoutingInstructions: 'RoutingInstructions',
    AccessExclusions: 'AccessExclusions',
    ApprovalNotes: 'ApprovalNotes'
};
/**
 * @export
 */
exports.GetRatePlansOrderTypeEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
};
/**
 * @export
 */
exports.GetRatePlansApprovalStatusEnum = {
    NewUnapproved: 'NewUnapproved',
    ChangedUnapproved: 'ChangedUnapproved',
    Rejected: 'Rejected',
    Approved: 'Approved'
};
/**
 * @export
 */
exports.GetRatePlansByHotelFetchInstructionsEnum = {
    PrimaryDetails: 'PrimaryDetails',
    TransactionDetails: 'TransactionDetails',
    Packages: 'Packages',
    RateCommission: 'RateCommission',
    NegotiatedProfiles: 'NegotiatedProfiles',
    RateControls: 'RateControls',
    RoutingInstructions: 'RoutingInstructions',
    AccessExclusions: 'AccessExclusions',
    ApprovalNotes: 'ApprovalNotes'
};
