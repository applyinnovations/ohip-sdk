/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionDetailType,
  GetBestAvailableRatesDetails,
  NegotiatedRates,
  NegotiatedRatesDetails,
  PackageGroupsInfo,
  PackageInfo,
  PackageRates,
  PackagesInfo,
  PostBestAvailableRatesRequest,
  PostNegotiatedRatesRequest,
  PostRatePlanRequest,
  PostRatePlanSchedulesRequest,
  PutRatePlanSchedulesRequest,
  RatePlanInfo,
  RatePlanSchedulesInfo,
  RatePlansSummary,
  Status,
} from '../models';
import {
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    GetBestAvailableRatesDetailsFromJSON,
    GetBestAvailableRatesDetailsToJSON,
    NegotiatedRatesFromJSON,
    NegotiatedRatesToJSON,
    NegotiatedRatesDetailsFromJSON,
    NegotiatedRatesDetailsToJSON,
    PackageGroupsInfoFromJSON,
    PackageGroupsInfoToJSON,
    PackageInfoFromJSON,
    PackageInfoToJSON,
    PackageRatesFromJSON,
    PackageRatesToJSON,
    PackagesInfoFromJSON,
    PackagesInfoToJSON,
    PostBestAvailableRatesRequestFromJSON,
    PostBestAvailableRatesRequestToJSON,
    PostNegotiatedRatesRequestFromJSON,
    PostNegotiatedRatesRequestToJSON,
    PostRatePlanRequestFromJSON,
    PostRatePlanRequestToJSON,
    PostRatePlanSchedulesRequestFromJSON,
    PostRatePlanSchedulesRequestToJSON,
    PutRatePlanSchedulesRequestFromJSON,
    PutRatePlanSchedulesRequestToJSON,
    RatePlanInfoFromJSON,
    RatePlanInfoToJSON,
    RatePlanSchedulesInfoFromJSON,
    RatePlanSchedulesInfoToJSON,
    RatePlansSummaryFromJSON,
    RatePlansSummaryToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models';

export interface DeleteBestAvailableRatesRequest {
    hotelId?: string;
    code?: Array<string>;
    end?: Date;
    start?: Date;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    friday?: boolean;
    monday?: boolean;
    saturday?: boolean;
    sunday?: boolean;
    thursday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    lOS1?: boolean;
    lOS2?: boolean;
    lOS3?: boolean;
    lOS4?: boolean;
    lOS5?: boolean;
    lOS6?: boolean;
    lOS7?: boolean;
    lOS8?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRatePlanSchedulesRequest {
    ratePlanCode?: string;
    hotelId?: string;
    ratePlanScheduleIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBestAvailableRatesRequest {
    hotelId?: string;
    startDay?: Date;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    rateCode?: Array<string>;
    endDay?: Date;
    daysOfWeek?: Set<GetBestAvailableRatesDaysOfWeekEnum>;
    lengthOfStay?: Set<GetBestAvailableRatesLengthOfStayEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetNegotiatedRatesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    startDate?: Date;
    endDate?: Date;
    includeInactiveNegotiatedRates?: boolean;
    fetchInstructionsLimit?: number;
    fetchInstructions?: Set<GetNegotiatedRatesFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetNegotiatedRatesForGivenHotelAndRateRequest {
    rateCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    startDate?: Date;
    endDate?: Date;
    includeInactiveNegotiatedRates?: boolean;
    fetchInstructionsLimit?: number;
    fetchInstructions?: Set<GetNegotiatedRatesForGivenHotelAndRateFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetNegotiatedRatesForGivenProfileRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    startDate?: Date;
    endDate?: Date;
    hotelCode?: string;
    ratePlanCode?: string;
    includeInactiveNegotiatedRates?: boolean;
    fetchInstructionsLimit?: number;
    fetchInstructions?: Set<GetNegotiatedRatesForGivenProfileFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPackageRequest {
    packageCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetPackageFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPackageGroupsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    code?: string;
    descriptionWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPackageRatesRequest {
    packageCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPackagesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    hotelId?: Array<string>;
    packageCode?: Array<string>;
    descriptionWildCard?: string;
    startDate?: Date;
    endDate?: Date;
    adults?: number;
    children?: number;
    bucket1Count?: number;
    bucket2Count?: number;
    bucket3Count?: number;
    bucket4Count?: number;
    bucket5Count?: number;
    includeGroup?: boolean;
    sellSeparate?: boolean;
    ticketPostingRhythm?: boolean;
    fetchInstructions?: Set<GetPackagesFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRatePlanRequest {
    ratePlanCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetRatePlanFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRatePlanSchedulesRequest {
    ratePlanCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    excludeRatePlanPackage?: boolean;
    limit?: number;
    tierId?: number;
    ratePlanScheduleId?: string;
    ratePlanScheduleIdType?: string;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    roomType?: Array<string>;
    roomClass?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRatePlansRequest {
    hotelId?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeRateInformation?: boolean;
    limit?: number;
    offset?: number;
    ratePlanCode?: Array<string>;
    rateCategory?: Array<string>;
    sellDate?: Date;
    displaySet?: string;
    id?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    attributeName?: Array<string>;
    orderType?: Set<GetRatePlansOrderTypeEnum>;
    includeInactive?: boolean;
    dayUseOnly?: boolean;
    approvalStatus?: GetRatePlansApprovalStatusEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBestAvailableRatesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createBestAvailableRates?: PostBestAvailableRatesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostNegotiatedRatesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    negotiatedRates?: PostNegotiatedRatesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRatePlanOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlan?: PostRatePlanRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRatePlanSchedulesOperationRequest {
    ratePlanCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlanSchedulesToCreate?: PostRatePlanSchedulesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutNegotiatedRatesRequest {
    rateCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    negotiatedRates?: PostNegotiatedRatesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRatePlanSchedulesOperationRequest {
    ratePlanCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlanSchedules?: PutRatePlanSchedulesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class RatePlanApi extends runtime.BaseAPI {

    /**
     * This API allows to fetch Best Available rates for rate code(s). <p><strong>OperationId:</strong>deleteBestAvailableRates</p>
     * Delete Best Available Rates
     */
    async deleteBestAvailableRatesRaw(requestParameters: DeleteBestAvailableRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.friday !== undefined) {
            queryParameters['friday'] = requestParameters.friday;
        }

        if (requestParameters.monday !== undefined) {
            queryParameters['monday'] = requestParameters.monday;
        }

        if (requestParameters.saturday !== undefined) {
            queryParameters['saturday'] = requestParameters.saturday;
        }

        if (requestParameters.sunday !== undefined) {
            queryParameters['sunday'] = requestParameters.sunday;
        }

        if (requestParameters.thursday !== undefined) {
            queryParameters['thursday'] = requestParameters.thursday;
        }

        if (requestParameters.tuesday !== undefined) {
            queryParameters['tuesday'] = requestParameters.tuesday;
        }

        if (requestParameters.wednesday !== undefined) {
            queryParameters['wednesday'] = requestParameters.wednesday;
        }

        if (requestParameters.lOS1 !== undefined) {
            queryParameters['lOS1'] = requestParameters.lOS1;
        }

        if (requestParameters.lOS2 !== undefined) {
            queryParameters['lOS2'] = requestParameters.lOS2;
        }

        if (requestParameters.lOS3 !== undefined) {
            queryParameters['lOS3'] = requestParameters.lOS3;
        }

        if (requestParameters.lOS4 !== undefined) {
            queryParameters['lOS4'] = requestParameters.lOS4;
        }

        if (requestParameters.lOS5 !== undefined) {
            queryParameters['lOS5'] = requestParameters.lOS5;
        }

        if (requestParameters.lOS6 !== undefined) {
            queryParameters['lOS6'] = requestParameters.lOS6;
        }

        if (requestParameters.lOS7 !== undefined) {
            queryParameters['lOS7'] = requestParameters.lOS7;
        }

        if (requestParameters.lOS8 !== undefined) {
            queryParameters['lOS8'] = requestParameters.lOS8;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bestavailablerates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows to fetch Best Available rates for rate code(s). <p><strong>OperationId:</strong>deleteBestAvailableRates</p>
     * Delete Best Available Rates
     */
    async deleteBestAvailableRates(requestParameters: DeleteBestAvailableRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteBestAvailableRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Rate Plan schedules.<p><strong>OperationId:</strong>deleteRatePlanSchedules</p>
     * Delete rate plan schedule
     */
    async deleteRatePlanSchedulesRaw(requestParameters: DeleteRatePlanSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.ratePlanScheduleIds) {
            queryParameters['ratePlanScheduleIds'] = requestParameters.ratePlanScheduleIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/schedules`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Rate Plan schedules.<p><strong>OperationId:</strong>deleteRatePlanSchedules</p>
     * Delete rate plan schedule
     */
    async deleteRatePlanSchedules(requestParameters: DeleteRatePlanSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRatePlanSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows to fetch Best Available rates for rate code(s). <p><strong>OperationId:</strong>getBestAvailableRates</p>
     * Fetch Best Available Rates
     */
    async getBestAvailableRatesRaw(requestParameters: GetBestAvailableRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBestAvailableRatesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.startDay !== undefined) {
            queryParameters['startDay'] = (requestParameters.startDay as any).toISOString().substr(0,10);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.rateCode) {
            queryParameters['rateCode'] = requestParameters.rateCode;
        }

        if (requestParameters.endDay !== undefined) {
            queryParameters['endDay'] = (requestParameters.endDay as any).toISOString().substr(0,10);
        }

        if (requestParameters.daysOfWeek) {
            queryParameters['daysOfWeek'] = requestParameters.daysOfWeek;
        }

        if (requestParameters.lengthOfStay) {
            queryParameters['lengthOfStay'] = requestParameters.lengthOfStay;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bestavailablerates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBestAvailableRatesDetailsFromJSON(jsonValue));
    }

    /**
     * This API allows to fetch Best Available rates for rate code(s). <p><strong>OperationId:</strong>getBestAvailableRates</p>
     * Fetch Best Available Rates
     */
    async getBestAvailableRates(requestParameters: GetBestAvailableRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBestAvailableRatesDetails> {
        const response = await this.getBestAvailableRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch negotiated rates and profile for a given hotel id. <p><strong>OperationId:</strong>getNegotiatedRates</p>
     * Get negotiated rates and profiles 
     */
    async getNegotiatedRatesRaw(requestParameters: GetNegotiatedRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NegotiatedRates>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.includeInactiveNegotiatedRates !== undefined) {
            queryParameters['includeInactiveNegotiatedRates'] = requestParameters.includeInactiveNegotiatedRates;
        }

        if (requestParameters.fetchInstructionsLimit !== undefined) {
            queryParameters['fetchInstructionsLimit'] = requestParameters.fetchInstructionsLimit;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/negotiatedRates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NegotiatedRatesFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch negotiated rates and profile for a given hotel id. <p><strong>OperationId:</strong>getNegotiatedRates</p>
     * Get negotiated rates and profiles 
     */
    async getNegotiatedRates(requestParameters: GetNegotiatedRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NegotiatedRates> {
        const response = await this.getNegotiatedRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch a Rate Plan and Profile for given hotel id and negotiated rate code. <p><strong>OperationId:</strong>getNegotiatedRatesForGivenHotelAndRate</p>
     * Fetch Negotiated Rates
     */
    async getNegotiatedRatesForGivenHotelAndRateRaw(requestParameters: GetNegotiatedRatesForGivenHotelAndRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NegotiatedRates>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.includeInactiveNegotiatedRates !== undefined) {
            queryParameters['includeInactiveNegotiatedRates'] = requestParameters.includeInactiveNegotiatedRates;
        }

        if (requestParameters.fetchInstructionsLimit !== undefined) {
            queryParameters['fetchInstructionsLimit'] = requestParameters.fetchInstructionsLimit;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/negotiatedRates/{rateCode}/profiles`.replace(`{${"rateCode"}}`, encodeURIComponent(String(requestParameters.rateCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NegotiatedRatesFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch a Rate Plan and Profile for given hotel id and negotiated rate code. <p><strong>OperationId:</strong>getNegotiatedRatesForGivenHotelAndRate</p>
     * Fetch Negotiated Rates
     */
    async getNegotiatedRatesForGivenHotelAndRate(requestParameters: GetNegotiatedRatesForGivenHotelAndRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NegotiatedRates> {
        const response = await this.getNegotiatedRatesForGivenHotelAndRateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch negotiated Rates for a given profile. <p><strong>OperationId:</strong>getNegotiatedRatesForGivenProfile</p>
     * Get negotiated rate details for given profile
     */
    async getNegotiatedRatesForGivenProfileRaw(requestParameters: GetNegotiatedRatesForGivenProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NegotiatedRates>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.hotelCode !== undefined) {
            queryParameters['hotelCode'] = requestParameters.hotelCode;
        }

        if (requestParameters.ratePlanCode !== undefined) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.includeInactiveNegotiatedRates !== undefined) {
            queryParameters['includeInactiveNegotiatedRates'] = requestParameters.includeInactiveNegotiatedRates;
        }

        if (requestParameters.fetchInstructionsLimit !== undefined) {
            queryParameters['fetchInstructionsLimit'] = requestParameters.fetchInstructionsLimit;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/negotiatedRates`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NegotiatedRatesFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch negotiated Rates for a given profile. <p><strong>OperationId:</strong>getNegotiatedRatesForGivenProfile</p>
     * Get negotiated rate details for given profile
     */
    async getNegotiatedRatesForGivenProfile(requestParameters: GetNegotiatedRatesForGivenProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NegotiatedRates> {
        const response = await this.getNegotiatedRatesForGivenProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch package details for a given package. <p><strong>OperationId:</strong>getPackage</p>
     * Get package for given package
     */
    async getPackageRaw(requestParameters: GetPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackageInfo>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packages/{packageCode}`.replace(`{${"packageCode"}}`, encodeURIComponent(String(requestParameters.packageCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackageInfoFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch package details for a given package. <p><strong>OperationId:</strong>getPackage</p>
     * Get package for given package
     */
    async getPackage(requestParameters: GetPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackageInfo> {
        const response = await this.getPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch package group. <p><strong>OperationId:</strong>getPackageGroups</p>
     * Get package groups
     */
    async getPackageGroupsRaw(requestParameters: GetPackageGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackageGroupsInfo>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.descriptionWildCard !== undefined) {
            queryParameters['descriptionWildCard'] = requestParameters.descriptionWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packageGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackageGroupsInfoFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch package group. <p><strong>OperationId:</strong>getPackageGroups</p>
     * Get package groups
     */
    async getPackageGroups(requestParameters: GetPackageGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackageGroupsInfo> {
        const response = await this.getPackageGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch rate plan codes associated for a package. <p><strong>OperationId:</strong>getPackageRates</p>
     * Get package rates
     */
    async getPackageRatesRaw(requestParameters: GetPackageRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackageRates>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packages/{packageCode}/rates`.replace(`{${"packageCode"}}`, encodeURIComponent(String(requestParameters.packageCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackageRatesFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch rate plan codes associated for a package. <p><strong>OperationId:</strong>getPackageRates</p>
     * Get package rates
     */
    async getPackageRates(requestParameters: GetPackageRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackageRates> {
        const response = await this.getPackageRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API you to get configured packages for a hotel.<p><strong>OperationId:</strong>getPackages</p>
     * Get Packages
     */
    async getPackagesRaw(requestParameters: GetPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackagesInfo>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.packageCode) {
            queryParameters['packageCode'] = requestParameters.packageCode;
        }

        if (requestParameters.descriptionWildCard !== undefined) {
            queryParameters['descriptionWildCard'] = requestParameters.descriptionWildCard;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.adults !== undefined) {
            queryParameters['adults'] = requestParameters.adults;
        }

        if (requestParameters.children !== undefined) {
            queryParameters['children'] = requestParameters.children;
        }

        if (requestParameters.bucket1Count !== undefined) {
            queryParameters['bucket1Count'] = requestParameters.bucket1Count;
        }

        if (requestParameters.bucket2Count !== undefined) {
            queryParameters['bucket2Count'] = requestParameters.bucket2Count;
        }

        if (requestParameters.bucket3Count !== undefined) {
            queryParameters['bucket3Count'] = requestParameters.bucket3Count;
        }

        if (requestParameters.bucket4Count !== undefined) {
            queryParameters['bucket4Count'] = requestParameters.bucket4Count;
        }

        if (requestParameters.bucket5Count !== undefined) {
            queryParameters['bucket5Count'] = requestParameters.bucket5Count;
        }

        if (requestParameters.includeGroup !== undefined) {
            queryParameters['includeGroup'] = requestParameters.includeGroup;
        }

        if (requestParameters.sellSeparate !== undefined) {
            queryParameters['sellSeparate'] = requestParameters.sellSeparate;
        }

        if (requestParameters.ticketPostingRhythm !== undefined) {
            queryParameters['ticketPostingRhythm'] = requestParameters.ticketPostingRhythm;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/packages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackagesInfoFromJSON(jsonValue));
    }

    /**
     * Use this API you to get configured packages for a hotel.<p><strong>OperationId:</strong>getPackages</p>
     * Get Packages
     */
    async getPackages(requestParameters: GetPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackagesInfo> {
        const response = await this.getPackagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch Rate Plan for a given hotel id and Rate Plan Code. <p><strong>OperationId:</strong>getRatePlan</p>
     * Get rate plan
     */
    async getRatePlanRaw(requestParameters: GetRatePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatePlanInfo>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatePlanInfoFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch Rate Plan for a given hotel id and Rate Plan Code. <p><strong>OperationId:</strong>getRatePlan</p>
     * Get rate plan
     */
    async getRatePlan(requestParameters: GetRatePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatePlanInfo> {
        const response = await this.getRatePlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get a rate plan&apos;s pricing schedules. The information includes the date range and room types for which the price is valid, rate amounts for multiple persons, and associated packages.<p><strong>OperationId:</strong>getRatePlanSchedules</p>
     * Get rate plan schedules
     */
    async getRatePlanSchedulesRaw(requestParameters: GetRatePlanSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatePlanSchedulesInfo>> {
        const queryParameters: any = {};

        if (requestParameters.excludeRatePlanPackage !== undefined) {
            queryParameters['excludeRatePlanPackage'] = requestParameters.excludeRatePlanPackage;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.tierId !== undefined) {
            queryParameters['tierId'] = requestParameters.tierId;
        }

        if (requestParameters.ratePlanScheduleId !== undefined) {
            queryParameters['ratePlanScheduleId'] = requestParameters.ratePlanScheduleId;
        }

        if (requestParameters.ratePlanScheduleIdType !== undefined) {
            queryParameters['ratePlanScheduleIdType'] = requestParameters.ratePlanScheduleIdType;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.roomClass) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/schedules`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatePlanSchedulesInfoFromJSON(jsonValue));
    }

    /**
     * Use this API to get a rate plan&apos;s pricing schedules. The information includes the date range and room types for which the price is valid, rate amounts for multiple persons, and associated packages.<p><strong>OperationId:</strong>getRatePlanSchedules</p>
     * Get rate plan schedules
     */
    async getRatePlanSchedules(requestParameters: GetRatePlanSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatePlanSchedulesInfo> {
        const response = await this.getRatePlanSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get configured Rate Plans for a property and filter this by search criteria.<p><strong>OperationId:</strong>getRatePlans</p>
     * Get rate plans
     */
    async getRatePlansRaw(requestParameters: GetRatePlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatePlansSummary>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.includeRateInformation !== undefined) {
            queryParameters['includeRateInformation'] = requestParameters.includeRateInformation;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.ratePlanCode) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.rateCategory) {
            queryParameters['rateCategory'] = requestParameters.rateCategory;
        }

        if (requestParameters.sellDate !== undefined) {
            queryParameters['sellDate'] = (requestParameters.sellDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.displaySet !== undefined) {
            queryParameters['displaySet'] = requestParameters.displaySet;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.attributeName) {
            queryParameters['attributeName'] = requestParameters.attributeName;
        }

        if (requestParameters.orderType) {
            queryParameters['orderType'] = requestParameters.orderType;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.dayUseOnly !== undefined) {
            queryParameters['dayUseOnly'] = requestParameters.dayUseOnly;
        }

        if (requestParameters.approvalStatus !== undefined) {
            queryParameters['approvalStatus'] = requestParameters.approvalStatus;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/ratePlans`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatePlansSummaryFromJSON(jsonValue));
    }

    /**
     * Use this API to get configured Rate Plans for a property and filter this by search criteria.<p><strong>OperationId:</strong>getRatePlans</p>
     * Get rate plans
     */
    async getRatePlans(requestParameters: GetRatePlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatePlansSummary> {
        const response = await this.getRatePlansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows to create Best Available rates for rate code(s). <p><strong>OperationId:</strong>postBestAvailableRates</p>
     * Create a Best Available Rates
     */
    async postBestAvailableRatesRaw(requestParameters: PostBestAvailableRatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bestavailablerates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostBestAvailableRatesRequestToJSON(requestParameters.createBestAvailableRates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows to create Best Available rates for rate code(s). <p><strong>OperationId:</strong>postBestAvailableRates</p>
     * Create a Best Available Rates
     */
    async postBestAvailableRates(requestParameters: PostBestAvailableRatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postBestAvailableRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to create negotiated rate for a given profile. <p><strong>OperationId:</strong>postNegotiatedRates</p>
     * Create negotiated rates 
     */
    async postNegotiatedRatesRaw(requestParameters: PostNegotiatedRatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/negotiatedRates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostNegotiatedRatesRequestToJSON(requestParameters.negotiatedRates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to create negotiated rate for a given profile. <p><strong>OperationId:</strong>postNegotiatedRates</p>
     * Create negotiated rates 
     */
    async postNegotiatedRates(requestParameters: PostNegotiatedRatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postNegotiatedRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API you to get Rate Plans for a given hotel.<p><strong>OperationId:</strong>postRatePlan</p>
     * Create rate plans
     */
    async postRatePlanRaw(requestParameters: PostRatePlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRatePlanRequestToJSON(requestParameters.ratePlan),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API you to get Rate Plans for a given hotel.<p><strong>OperationId:</strong>postRatePlan</p>
     * Create rate plans
     */
    async postRatePlan(requestParameters: PostRatePlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRatePlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to create Rate Plan schedules. <p><strong>OperationId:</strong>postRatePlanSchedules</p>
     * Create rate plan schedules
     */
    async postRatePlanSchedulesRaw(requestParameters: PostRatePlanSchedulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/schedules`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRatePlanSchedulesRequestToJSON(requestParameters.ratePlanSchedulesToCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to create Rate Plan schedules. <p><strong>OperationId:</strong>postRatePlanSchedules</p>
     * Create rate plan schedules
     */
    async postRatePlanSchedules(requestParameters: PostRatePlanSchedulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRatePlanSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to update negotiated rate for a given profile. <p><strong>OperationId:</strong>putNegotiatedRates</p>
     * Change negotiated rates 
     */
    async putNegotiatedRatesRaw(requestParameters: PutNegotiatedRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NegotiatedRatesDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/negotiatedRates/{rateCode}`.replace(`{${"rateCode"}}`, encodeURIComponent(String(requestParameters.rateCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostNegotiatedRatesRequestToJSON(requestParameters.negotiatedRates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NegotiatedRatesDetailsFromJSON(jsonValue));
    }

    /**
     * This API allows you to update negotiated rate for a given profile. <p><strong>OperationId:</strong>putNegotiatedRates</p>
     * Change negotiated rates 
     */
    async putNegotiatedRates(requestParameters: PutNegotiatedRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NegotiatedRatesDetails> {
        const response = await this.putNegotiatedRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to  update Rate Plan pricing schedules.<p><strong>OperationId:</strong>putRatePlanSchedules</p>
     * Change rate plan schedules
     */
    async putRatePlanSchedulesRaw(requestParameters: PutRatePlanSchedulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/schedules`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutRatePlanSchedulesRequestToJSON(requestParameters.ratePlanSchedules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to  update Rate Plan pricing schedules.<p><strong>OperationId:</strong>putRatePlanSchedules</p>
     * Change rate plan schedules
     */
    async putRatePlanSchedules(requestParameters: PutRatePlanSchedulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRatePlanSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetBestAvailableRatesDaysOfWeekEnum = {
    Monday: 'Monday',
    Tuesday: 'Tuesday',
    Wednesday: 'Wednesday',
    Thursday: 'Thursday',
    Friday: 'Friday',
    Saturday: 'Saturday',
    Sunday: 'Sunday'
} as const;
export type GetBestAvailableRatesDaysOfWeekEnum = typeof GetBestAvailableRatesDaysOfWeekEnum[keyof typeof GetBestAvailableRatesDaysOfWeekEnum];
/**
 * @export
 */
export const GetBestAvailableRatesLengthOfStayEnum = {
    One: 'One',
    Two: 'Two',
    Three: 'Three',
    Four: 'Four',
    Five: 'Five',
    Six: 'Six',
    Seven: 'Seven',
    Eight: 'Eight'
} as const;
export type GetBestAvailableRatesLengthOfStayEnum = typeof GetBestAvailableRatesLengthOfStayEnum[keyof typeof GetBestAvailableRatesLengthOfStayEnum];
/**
 * @export
 */
export const GetNegotiatedRatesFetchInstructionsEnum = {
    Discounts: 'Discounts'
} as const;
export type GetNegotiatedRatesFetchInstructionsEnum = typeof GetNegotiatedRatesFetchInstructionsEnum[keyof typeof GetNegotiatedRatesFetchInstructionsEnum];
/**
 * @export
 */
export const GetNegotiatedRatesForGivenHotelAndRateFetchInstructionsEnum = {
    Discounts: 'Discounts'
} as const;
export type GetNegotiatedRatesForGivenHotelAndRateFetchInstructionsEnum = typeof GetNegotiatedRatesForGivenHotelAndRateFetchInstructionsEnum[keyof typeof GetNegotiatedRatesForGivenHotelAndRateFetchInstructionsEnum];
/**
 * @export
 */
export const GetNegotiatedRatesForGivenProfileFetchInstructionsEnum = {
    Discounts: 'Discounts'
} as const;
export type GetNegotiatedRatesForGivenProfileFetchInstructionsEnum = typeof GetNegotiatedRatesForGivenProfileFetchInstructionsEnum[keyof typeof GetNegotiatedRatesForGivenProfileFetchInstructionsEnum];
/**
 * @export
 */
export const GetPackageFetchInstructionsEnum = {
    Header: 'Header',
    PostingRules: 'PostingRules',
    CalculatedPrice: 'CalculatedPrice',
    Items: 'Items',
    Details: 'Details',
    UsageDetails: 'UsageDetails'
} as const;
export type GetPackageFetchInstructionsEnum = typeof GetPackageFetchInstructionsEnum[keyof typeof GetPackageFetchInstructionsEnum];
/**
 * @export
 */
export const GetPackagesFetchInstructionsEnum = {
    Header: 'Header',
    PostingRules: 'PostingRules',
    CalculatedPrice: 'CalculatedPrice',
    Items: 'Items',
    Details: 'Details',
    UsageDetails: 'UsageDetails'
} as const;
export type GetPackagesFetchInstructionsEnum = typeof GetPackagesFetchInstructionsEnum[keyof typeof GetPackagesFetchInstructionsEnum];
/**
 * @export
 */
export const GetRatePlanFetchInstructionsEnum = {
    PrimaryDetails: 'PrimaryDetails',
    TransactionDetails: 'TransactionDetails',
    Packages: 'Packages',
    RateCommission: 'RateCommission',
    NegotiatedProfiles: 'NegotiatedProfiles',
    RateControls: 'RateControls',
    RoutingInstructions: 'RoutingInstructions',
    AccessExclusions: 'AccessExclusions',
    ApprovalNotes: 'ApprovalNotes'
} as const;
export type GetRatePlanFetchInstructionsEnum = typeof GetRatePlanFetchInstructionsEnum[keyof typeof GetRatePlanFetchInstructionsEnum];
/**
 * @export
 */
export const GetRatePlansOrderTypeEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
} as const;
export type GetRatePlansOrderTypeEnum = typeof GetRatePlansOrderTypeEnum[keyof typeof GetRatePlansOrderTypeEnum];
/**
 * @export
 */
export const GetRatePlansApprovalStatusEnum = {
    NewUnapproved: 'NewUnapproved',
    ChangedUnapproved: 'ChangedUnapproved',
    Rejected: 'Rejected',
    Approved: 'Approved'
} as const;
export type GetRatePlansApprovalStatusEnum = typeof GetRatePlansApprovalStatusEnum[keyof typeof GetRatePlansApprovalStatusEnum];
