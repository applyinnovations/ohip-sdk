/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangeRateCategoryRequest,
  ChangeRateClassRequest,
  ChangeRateSeasonsRequest,
  ChangeTemplateRateCategoryRequest,
  ChangeTemplateRateClassRequest,
  ChangeTemplateRateSeasonsRequest,
  ExceptionDetailType,
  PostRateCategoryRequest,
  PostRateClassRequest,
  PostRateSeasonsRequest,
  PostTemplateRateCategoryRequest,
  PostTemplateRateClassRequest,
  PostTemplateRateSeasonsRequest,
  RateCategoryDetails,
  RateClassDetails,
  RateSeasonsDetails,
  Status,
  TemplateRateCategoryDetails,
  TemplateRateClassDetails,
  TemplateRateSeasonsDetails,
} from '../models';
import {
    ChangeRateCategoryRequestFromJSON,
    ChangeRateCategoryRequestToJSON,
    ChangeRateClassRequestFromJSON,
    ChangeRateClassRequestToJSON,
    ChangeRateSeasonsRequestFromJSON,
    ChangeRateSeasonsRequestToJSON,
    ChangeTemplateRateCategoryRequestFromJSON,
    ChangeTemplateRateCategoryRequestToJSON,
    ChangeTemplateRateClassRequestFromJSON,
    ChangeTemplateRateClassRequestToJSON,
    ChangeTemplateRateSeasonsRequestFromJSON,
    ChangeTemplateRateSeasonsRequestToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    PostRateCategoryRequestFromJSON,
    PostRateCategoryRequestToJSON,
    PostRateClassRequestFromJSON,
    PostRateClassRequestToJSON,
    PostRateSeasonsRequestFromJSON,
    PostRateSeasonsRequestToJSON,
    PostTemplateRateCategoryRequestFromJSON,
    PostTemplateRateCategoryRequestToJSON,
    PostTemplateRateClassRequestFromJSON,
    PostTemplateRateClassRequestToJSON,
    PostTemplateRateSeasonsRequestFromJSON,
    PostTemplateRateSeasonsRequestToJSON,
    RateCategoryDetailsFromJSON,
    RateCategoryDetailsToJSON,
    RateClassDetailsFromJSON,
    RateClassDetailsToJSON,
    RateSeasonsDetailsFromJSON,
    RateSeasonsDetailsToJSON,
    StatusFromJSON,
    StatusToJSON,
    TemplateRateCategoryDetailsFromJSON,
    TemplateRateCategoryDetailsToJSON,
    TemplateRateClassDetailsFromJSON,
    TemplateRateClassDetailsToJSON,
    TemplateRateSeasonsDetailsFromJSON,
    TemplateRateSeasonsDetailsToJSON,
} from '../models';

export interface ChangeRateCategoryOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rateCategoryToBeChanged?: ChangeRateCategoryRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeRateClassOperationRequest {
    rateClassCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rateClassToBeChanged?: ChangeRateClassRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeRateSeasonsOperationRequest {
    seasonCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rateSeasonsToBeChanged?: ChangeRateSeasonsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTemplateRateCategoryOperationRequest {
    rateCategoryCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateRateCategoryToBeChanged?: ChangeTemplateRateCategoryRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTemplateRateClassOperationRequest {
    rateClassCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateRateClassToBeChanged?: ChangeTemplateRateClassRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTemplateRateSeasonsOperationRequest {
    seasonCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateRateSeasonsToBeChanged?: ChangeTemplateRateSeasonsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRateCategoryRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rateCategory?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRateClassRequest {
    rateClassCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTemplateRateCategoryRequest {
    rateCategoryCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTemplateRateClassRequest {
    rateClassCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRateCategoryRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    limit?: number;
    offset?: number;
    rateCategoryListCodes?: Array<string>;
    rateCategoryDescription?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRateClassRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    limit?: number;
    offset?: number;
    rateClassListCodes?: Array<string>;
    description?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRateSeasonsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    limit?: number;
    offset?: number;
    seasonsCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateRateCategoryRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rateCategoryListCodes?: Array<string>;
    rateCategoryDescription?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateRateClassRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelIds?: Array<string>;
    rateClassListCodes?: Array<string>;
    description?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateRateSeasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    seasonCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRateCategoryOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rateCategoryCriteria?: PostRateCategoryRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRateClassOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rateClassCriteria?: PostRateClassRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRateSeasonsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rateSeasonsCriteria?: PostRateSeasonsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateRateCategoryOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateRateCategoryCriteria?: PostTemplateRateCategoryRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateRateClassOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateRateClassCriteria?: PostTemplateRateClassRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateRateSeasonsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateRateSeasonsCriteria?: PostTemplateRateSeasonsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveRateSeasonsRequest {
    seasonCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTemplateRateSeasonsRequest {
    seasonCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class HotelConfigApi extends runtime.BaseAPI {

    /**
     * This API can be used to Modify a Rate Category e.g.  RACK. Only one rate category can be modified at a time. <p><strong>OperationId:</strong>changeRateCategory</p>
     * Change Rate Category
     */
    async changeRateCategoryRaw(requestParameters: ChangeRateCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateCategories`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeRateCategoryRequestToJSON(requestParameters.rateCategoryToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API can be used to Modify a Rate Category e.g.  RACK. Only one rate category can be modified at a time. <p><strong>OperationId:</strong>changeRateCategory</p>
     * Change Rate Category
     */
    async changeRateCategory(requestParameters: ChangeRateCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeRateCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to updates to rate class. <p><strong>OperationId:</strong>changeRateClass</p>
     * Changes to rate class
     */
    async changeRateClassRaw(requestParameters: ChangeRateClassOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateClasses/{rateClassCode}`.replace(`{${"rateClassCode"}}`, encodeURIComponent(String(requestParameters.rateClassCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeRateClassRequestToJSON(requestParameters.rateClassToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to updates to rate class. <p><strong>OperationId:</strong>changeRateClass</p>
     * Changes to rate class
     */
    async changeRateClass(requestParameters: ChangeRateClassOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeRateClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Hotel Rate Seasons. <p><strong>OperationId:</strong>changeRateSeasons</p>
     * Change Hotel Rate Seasons
     */
    async changeRateSeasonsRaw(requestParameters: ChangeRateSeasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateSeasons/{seasonCode}`.replace(`{${"seasonCode"}}`, encodeURIComponent(String(requestParameters.seasonCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeRateSeasonsRequestToJSON(requestParameters.rateSeasonsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Hotel Rate Seasons. <p><strong>OperationId:</strong>changeRateSeasons</p>
     * Change Hotel Rate Seasons
     */
    async changeRateSeasons(requestParameters: ChangeRateSeasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeRateSeasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to Modify a Template Rate Category. Only one template can be updated at a time. <p><strong>OperationId:</strong>changeTemplateRateCategory</p>
     * Change Template Rate Category
     */
    async changeTemplateRateCategoryRaw(requestParameters: ChangeTemplateRateCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/rateCategories/{rateCategoryCode}`.replace(`{${"rateCategoryCode"}}`, encodeURIComponent(String(requestParameters.rateCategoryCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeTemplateRateCategoryRequestToJSON(requestParameters.templateRateCategoryToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to Modify a Template Rate Category. Only one template can be updated at a time. <p><strong>OperationId:</strong>changeTemplateRateCategory</p>
     * Change Template Rate Category
     */
    async changeTemplateRateCategory(requestParameters: ChangeTemplateRateCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTemplateRateCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to modify template rate class. <p><strong>OperationId:</strong>changeTemplateRateClass</p>
     * Change template rate class
     */
    async changeTemplateRateClassRaw(requestParameters: ChangeTemplateRateClassOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/rateClasses/{rateClassCode}`.replace(`{${"rateClassCode"}}`, encodeURIComponent(String(requestParameters.rateClassCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeTemplateRateClassRequestToJSON(requestParameters.templateRateClassToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to modify template rate class. <p><strong>OperationId:</strong>changeTemplateRateClass</p>
     * Change template rate class
     */
    async changeTemplateRateClass(requestParameters: ChangeTemplateRateClassOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTemplateRateClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Template Rate Seasons. <p><strong>OperationId:</strong>changeTemplateRateSeasons</p>
     * Change Template Rate Seasons
     */
    async changeTemplateRateSeasonsRaw(requestParameters: ChangeTemplateRateSeasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/rateSeasons/{seasonCode}`.replace(`{${"seasonCode"}}`, encodeURIComponent(String(requestParameters.seasonCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeTemplateRateSeasonsRequestToJSON(requestParameters.templateRateSeasonsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Template Rate Seasons. <p><strong>OperationId:</strong>changeTemplateRateSeasons</p>
     * Change Template Rate Seasons
     */
    async changeTemplateRateSeasons(requestParameters: ChangeTemplateRateSeasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTemplateRateSeasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this  delete a Rate Category e.g. RACK. <p><strong>OperationId:</strong>deleteRateCategory</p>
     * Delete Rate Category
     */
    async deleteRateCategoryRaw(requestParameters: DeleteRateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.rateCategory !== undefined) {
            queryParameters['rateCategory'] = requestParameters.rateCategory;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateCategories`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this  delete a Rate Category e.g. RACK. <p><strong>OperationId:</strong>deleteRateCategory</p>
     * Delete Rate Category
     */
    async deleteRateCategory(requestParameters: DeleteRateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRateCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete rate class. <p><strong>OperationId:</strong>deleteRateClass</p>
     * Delete rate class
     */
    async deleteRateClassRaw(requestParameters: DeleteRateClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateClasses/{rateClassCode}`.replace(`{${"rateClassCode"}}`, encodeURIComponent(String(requestParameters.rateClassCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete rate class. <p><strong>OperationId:</strong>deleteRateClass</p>
     * Delete rate class
     */
    async deleteRateClass(requestParameters: DeleteRateClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRateClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete a Template Rate Category. Only one rate category template can be sent as part of the request. <p><strong>OperationId:</strong>deleteTemplateRateCategory</p>
     * Delete a Template Rate Category
     */
    async deleteTemplateRateCategoryRaw(requestParameters: DeleteTemplateRateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/rateCategories/{rateCategoryCode}`.replace(`{${"rateCategoryCode"}}`, encodeURIComponent(String(requestParameters.rateCategoryCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete a Template Rate Category. Only one rate category template can be sent as part of the request. <p><strong>OperationId:</strong>deleteTemplateRateCategory</p>
     * Delete a Template Rate Category
     */
    async deleteTemplateRateCategory(requestParameters: DeleteTemplateRateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTemplateRateCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete template rate class. <p><strong>OperationId:</strong>deleteTemplateRateClass</p>
     * Delete template rate class
     */
    async deleteTemplateRateClassRaw(requestParameters: DeleteTemplateRateClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/rateClasses/{rateClassCode}`.replace(`{${"rateClassCode"}}`, encodeURIComponent(String(requestParameters.rateClassCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete template rate class. <p><strong>OperationId:</strong>deleteTemplateRateClass</p>
     * Delete template rate class
     */
    async deleteTemplateRateClass(requestParameters: DeleteTemplateRateClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTemplateRateClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to search for Rate Categories. The search criteria can include a Rate category, the list of hotelIds and the description of the Rate Category.<p><strong>OperationId:</strong>getRateCategory</p>
     * Get rate category
     */
    async getRateCategoryRaw(requestParameters: GetRateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RateCategoryDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.rateCategoryListCodes) {
            queryParameters['rateCategoryListCodes'] = requestParameters.rateCategoryListCodes;
        }

        if (requestParameters.rateCategoryDescription !== undefined) {
            queryParameters['rateCategoryDescription'] = requestParameters.rateCategoryDescription;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateCategories`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RateCategoryDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to search for Rate Categories. The search criteria can include a Rate category, the list of hotelIds and the description of the Rate Category.<p><strong>OperationId:</strong>getRateCategory</p>
     * Get rate category
     */
    async getRateCategory(requestParameters: GetRateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RateCategoryDetails> {
        const response = await this.getRateCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get rate classes. <p><strong>OperationId:</strong>getRateClass</p>
     * Get rate classes
     */
    async getRateClassRaw(requestParameters: GetRateClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RateClassDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.rateClassListCodes) {
            queryParameters['rateClassListCodes'] = requestParameters.rateClassListCodes;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateClasses`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RateClassDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get rate classes. <p><strong>OperationId:</strong>getRateClass</p>
     * Get rate classes
     */
    async getRateClass(requestParameters: GetRateClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RateClassDetails> {
        const response = await this.getRateClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Hotel Rate Seasons. <p><strong>OperationId:</strong>getRateSeasons</p>
     * Get Hotel Rate Seasons
     */
    async getRateSeasonsRaw(requestParameters: GetRateSeasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RateSeasonsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.seasonsCodes) {
            queryParameters['seasonsCodes'] = requestParameters.seasonsCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateSeasons`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RateSeasonsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Hotel Rate Seasons. <p><strong>OperationId:</strong>getRateSeasons</p>
     * Get Hotel Rate Seasons
     */
    async getRateSeasons(requestParameters: GetRateSeasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RateSeasonsDetails> {
        const response = await this.getRateSeasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to fetch a Template Rate Category. The search criteria can include rate category and the property code. <p><strong>OperationId:</strong>getTemplateRateCategory</p>
     * Get Template Rate Categories
     */
    async getTemplateRateCategoryRaw(requestParameters: GetTemplateRateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateRateCategoryDetails>> {
        const queryParameters: any = {};

        if (requestParameters.rateCategoryListCodes) {
            queryParameters['rateCategoryListCodes'] = requestParameters.rateCategoryListCodes;
        }

        if (requestParameters.rateCategoryDescription !== undefined) {
            queryParameters['rateCategoryDescription'] = requestParameters.rateCategoryDescription;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/rateCategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateRateCategoryDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to fetch a Template Rate Category. The search criteria can include rate category and the property code. <p><strong>OperationId:</strong>getTemplateRateCategory</p>
     * Get Template Rate Categories
     */
    async getTemplateRateCategory(requestParameters: GetTemplateRateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateRateCategoryDetails> {
        const response = await this.getTemplateRateCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get template rate classes. <p><strong>OperationId:</strong>getTemplateRateClass</p>
     * Get template rate classes
     */
    async getTemplateRateClassRaw(requestParameters: GetTemplateRateClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateRateClassDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.rateClassListCodes) {
            queryParameters['rateClassListCodes'] = requestParameters.rateClassListCodes;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/rateClasses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateRateClassDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get template rate classes. <p><strong>OperationId:</strong>getTemplateRateClass</p>
     * Get template rate classes
     */
    async getTemplateRateClass(requestParameters: GetTemplateRateClassRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateRateClassDetails> {
        const response = await this.getTemplateRateClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Template Rate Seasons. <p><strong>OperationId:</strong>getTemplateRateSeasons</p>
     * Get Template Rate Seasons
     */
    async getTemplateRateSeasonsRaw(requestParameters: GetTemplateRateSeasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateRateSeasonsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.seasonCodes) {
            queryParameters['seasonCodes'] = requestParameters.seasonCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/rateSeasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateRateSeasonsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Template Rate Seasons. <p><strong>OperationId:</strong>getTemplateRateSeasons</p>
     * Get Template Rate Seasons
     */
    async getTemplateRateSeasons(requestParameters: GetTemplateRateSeasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateRateSeasonsDetails> {
        const response = await this.getTemplateRateSeasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API can be used to Use this API to create a Rate Category e.g.  RACK. Only one rate category can be Use this API to created at a time. <p><strong>OperationId:</strong>postRateCategory</p>
     * Create Rate Category
     */
    async postRateCategoryRaw(requestParameters: PostRateCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateCategories`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRateCategoryRequestToJSON(requestParameters.rateCategoryCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API can be used to Use this API to create a Rate Category e.g.  RACK. Only one rate category can be Use this API to created at a time. <p><strong>OperationId:</strong>postRateCategory</p>
     * Create Rate Category
     */
    async postRateCategory(requestParameters: PostRateCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRateCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create new rate class. <p><strong>OperationId:</strong>postRateClass</p>
     * Create new rate class
     */
    async postRateClassRaw(requestParameters: PostRateClassOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateClasses`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRateClassRequestToJSON(requestParameters.rateClassCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create new rate class. <p><strong>OperationId:</strong>postRateClass</p>
     * Create new rate class
     */
    async postRateClass(requestParameters: PostRateClassOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRateClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Hotel Rate Seasons. <p><strong>OperationId:</strong>postRateSeasons</p>
     * Create Hotel Rate Seasons
     */
    async postRateSeasonsRaw(requestParameters: PostRateSeasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateSeasons`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRateSeasonsRequestToJSON(requestParameters.rateSeasonsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Hotel Rate Seasons. <p><strong>OperationId:</strong>postRateSeasons</p>
     * Create Hotel Rate Seasons
     */
    async postRateSeasons(requestParameters: PostRateSeasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRateSeasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new Template Rate Category. <p><strong>OperationId:</strong>postTemplateRateCategory</p>
     * Create a Template Rate Category
     */
    async postTemplateRateCategoryRaw(requestParameters: PostTemplateRateCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/rateCategories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTemplateRateCategoryRequestToJSON(requestParameters.templateRateCategoryCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new Template Rate Category. <p><strong>OperationId:</strong>postTemplateRateCategory</p>
     * Create a Template Rate Category
     */
    async postTemplateRateCategory(requestParameters: PostTemplateRateCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateRateCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create new template rate class. <p><strong>OperationId:</strong>postTemplateRateClass</p>
     * Create new template rate class
     */
    async postTemplateRateClassRaw(requestParameters: PostTemplateRateClassOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/rateClasses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTemplateRateClassRequestToJSON(requestParameters.templateRateClassCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create new template rate class. <p><strong>OperationId:</strong>postTemplateRateClass</p>
     * Create new template rate class
     */
    async postTemplateRateClass(requestParameters: PostTemplateRateClassOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateRateClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Template Rate Seasons. <p><strong>OperationId:</strong>postTemplateRateSeasons</p>
     * Create Template Rate Seasons
     */
    async postTemplateRateSeasonsRaw(requestParameters: PostTemplateRateSeasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/rateSeasons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTemplateRateSeasonsRequestToJSON(requestParameters.templateRateSeasonsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Template Rate Seasons. <p><strong>OperationId:</strong>postTemplateRateSeasons</p>
     * Create Template Rate Seasons
     */
    async postTemplateRateSeasons(requestParameters: PostTemplateRateSeasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateRateSeasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Hotel Rate Seasons. <p><strong>OperationId:</strong>removeRateSeasons</p>
     * Delete Hotel Rate Seasons
     */
    async removeRateSeasonsRaw(requestParameters: RemoveRateSeasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateSeasons/{seasonCode}`.replace(`{${"seasonCode"}}`, encodeURIComponent(String(requestParameters.seasonCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Hotel Rate Seasons. <p><strong>OperationId:</strong>removeRateSeasons</p>
     * Delete Hotel Rate Seasons
     */
    async removeRateSeasons(requestParameters: RemoveRateSeasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeRateSeasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Template Rate Seasons. <p><strong>OperationId:</strong>removeTemplateRateSeasons</p>
     * Delete Template Rate Seasons
     */
    async removeTemplateRateSeasonsRaw(requestParameters: RemoveTemplateRateSeasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/rateSeasons/{seasonCode}`.replace(`{${"seasonCode"}}`, encodeURIComponent(String(requestParameters.seasonCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Template Rate Seasons. <p><strong>OperationId:</strong>removeTemplateRateSeasons</p>
     * Delete Template Rate Seasons
     */
    async removeTemplateRateSeasons(requestParameters: RemoveTemplateRateSeasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTemplateRateSeasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
