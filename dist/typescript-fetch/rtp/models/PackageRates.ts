/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { MasterInfoType } from './MasterInfoType';
import {
    MasterInfoTypeFromJSON,
    MasterInfoTypeFromJSONTyped,
    MasterInfoTypeToJSON,
} from './MasterInfoType';
import type { PackageRatesRatePlanList } from './PackageRatesRatePlanList';
import {
    PackageRatesRatePlanListFromJSON,
    PackageRatesRatePlanListFromJSONTyped,
    PackageRatesRatePlanListToJSON,
} from './PackageRatesRatePlanList';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Response object to fetch rate plan codes associated for a package. It contains package's short information.
 * @export
 * @interface PackageRates
 */
export interface PackageRates {
    /**
     * 
     * @type {PackageRatesRatePlanList}
     * @memberof PackageRates
     */
    ratePlanList?: PackageRatesRatePlanList;
    /**
     * Refer to Generic common types document.
     * @type {Array<MasterInfoType>}
     * @memberof PackageRates
     */
    masterInfoList?: Array<MasterInfoType>;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof PackageRates
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof PackageRates
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the PackageRates interface.
 */
export function instanceOfPackageRates(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PackageRatesFromJSON(json: any): PackageRates {
    return PackageRatesFromJSONTyped(json, false);
}

export function PackageRatesFromJSONTyped(json: any, ignoreDiscriminator: boolean): PackageRates {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ratePlanList': !exists(json, 'ratePlanList') ? undefined : PackageRatesRatePlanListFromJSON(json['ratePlanList']),
        'masterInfoList': !exists(json, 'masterInfoList') ? undefined : ((json['masterInfoList'] as Array<any>).map(MasterInfoTypeFromJSON)),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function PackageRatesToJSON(value?: PackageRates | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ratePlanList': PackageRatesRatePlanListToJSON(value.ratePlanList),
        'masterInfoList': value.masterInfoList === undefined ? undefined : ((value.masterInfoList as Array<any>).map(MasterInfoTypeToJSON)),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

