/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TranslationTextType2000 } from './TranslationTextType2000';
import {
    TranslationTextType2000FromJSON,
    TranslationTextType2000FromJSONTyped,
    TranslationTextType2000ToJSON,
} from './TranslationTextType2000';

/**
 * Info URL, Short and Long Info details of the rate plan.
 * @export
 * @interface RatePlanDescriptionsType
 */
export interface RatePlanDescriptionsType {
    /**
     * 
     * @type {TranslationTextType2000}
     * @memberof RatePlanDescriptionsType
     */
    shortInfo?: TranslationTextType2000;
    /**
     * 
     * @type {TranslationTextType2000}
     * @memberof RatePlanDescriptionsType
     */
    longInfo?: TranslationTextType2000;
    /**
     * Info URL is the location associated for more information about the rate plan.
     * @type {string}
     * @memberof RatePlanDescriptionsType
     */
    infoURL?: string;
    /**
     * Rate information template which is configured for the hotel. This value can be used to populate the LongInfo of this rate plan, if desired.
     * @type {string}
     * @memberof RatePlanDescriptionsType
     */
    rateInfoTemplate?: string;
}

/**
 * Check if a given object implements the RatePlanDescriptionsType interface.
 */
export function instanceOfRatePlanDescriptionsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RatePlanDescriptionsTypeFromJSON(json: any): RatePlanDescriptionsType {
    return RatePlanDescriptionsTypeFromJSONTyped(json, false);
}

export function RatePlanDescriptionsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RatePlanDescriptionsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'shortInfo': !exists(json, 'shortInfo') ? undefined : TranslationTextType2000FromJSON(json['shortInfo']),
        'longInfo': !exists(json, 'longInfo') ? undefined : TranslationTextType2000FromJSON(json['longInfo']),
        'infoURL': !exists(json, 'infoURL') ? undefined : json['infoURL'],
        'rateInfoTemplate': !exists(json, 'rateInfoTemplate') ? undefined : json['rateInfoTemplate'],
    };
}

export function RatePlanDescriptionsTypeToJSON(value?: RatePlanDescriptionsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'shortInfo': TranslationTextType2000ToJSON(value.shortInfo),
        'longInfo': TranslationTextType2000ToJSON(value.longInfo),
        'infoURL': value.infoURL,
        'rateInfoTemplate': value.rateInfoTemplate,
    };
}

