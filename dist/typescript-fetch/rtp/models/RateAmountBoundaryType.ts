/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Set of rate amounts for one and/or two adults. This set will represent either the minimum or maximum rate boundary.
 * @export
 * @interface RateAmountBoundaryType
 */
export interface RateAmountBoundaryType {
    /**
     * One person rate amount for the rate boundary.
     * @type {number}
     * @memberof RateAmountBoundaryType
     */
    onePersonRate?: number;
    /**
     * Two person rate amount for the rate boundary.
     * @type {number}
     * @memberof RateAmountBoundaryType
     */
    twoPersonRate?: number;
}

/**
 * Check if a given object implements the RateAmountBoundaryType interface.
 */
export function instanceOfRateAmountBoundaryType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RateAmountBoundaryTypeFromJSON(json: any): RateAmountBoundaryType {
    return RateAmountBoundaryTypeFromJSONTyped(json, false);
}

export function RateAmountBoundaryTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RateAmountBoundaryType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'onePersonRate': !exists(json, 'onePersonRate') ? undefined : json['onePersonRate'],
        'twoPersonRate': !exists(json, 'twoPersonRate') ? undefined : json['twoPersonRate'],
    };
}

export function RateAmountBoundaryTypeToJSON(value?: RateAmountBoundaryType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'onePersonRate': value.onePersonRate,
        'twoPersonRate': value.twoPersonRate,
    };
}

