/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { IndicatorType } from './IndicatorType';
import type { ManagedByOptions } from './ManagedByOptions';
import type { RateAccessExclusionType } from './RateAccessExclusionType';
import type { RatePackagesType } from './RatePackagesType';
import type { RatePlanBasedOnRateType } from './RatePlanBasedOnRateType';
import type { RatePlanClassificationsType } from './RatePlanClassificationsType';
import type { RatePlanCommissionType } from './RatePlanCommissionType';
import type { RatePlanControlsType } from './RatePlanControlsType';
import type { RatePlanDepositType } from './RatePlanDepositType';
import type { RatePlanDescriptionsType } from './RatePlanDescriptionsType';
import type { RatePlanDistributionType } from './RatePlanDistributionType';
import type { RatePlanExternalAttributesType } from './RatePlanExternalAttributesType';
import type { RatePlanNoteType } from './RatePlanNoteType';
import type { RatePlanPrimaryDetailsType } from './RatePlanPrimaryDetailsType';
import type { RatePlanRoutingInstructionsType } from './RatePlanRoutingInstructionsType';
import type { RatePlanScheduleInfoType } from './RatePlanScheduleInfoType';
import type { RatePlanTransactionDetailsType } from './RatePlanTransactionDetailsType';
import type { RatePlanTypeNegotiatedRates } from './RatePlanTypeNegotiatedRates';
import type { RateRoomTypeDetailType } from './RateRoomTypeDetailType';
/**
 * The Rate plan code Details.
 * @export
 * @interface RatePlanType
 */
export interface RatePlanType {
    /**
     *
     * @type {RatePlanPrimaryDetailsType}
     * @memberof RatePlanType
     */
    primaryDetails?: RatePlanPrimaryDetailsType;
    /**
     *
     * @type {RatePlanClassificationsType}
     * @memberof RatePlanType
     */
    classifications?: RatePlanClassificationsType;
    /**
     *
     * @type {RatePlanTransactionDetailsType}
     * @memberof RatePlanType
     */
    transactionDetails?: RatePlanTransactionDetailsType;
    /**
     *
     * @type {RatePlanCommissionType}
     * @memberof RatePlanType
     */
    rateCommission?: RatePlanCommissionType;
    /**
     *
     * @type {RatePlanDepositType}
     * @memberof RatePlanType
     */
    rateDeposit?: RatePlanDepositType;
    /**
     *
     * @type {RatePlanDescriptionsType}
     * @memberof RatePlanType
     */
    descriptions?: RatePlanDescriptionsType;
    /**
     * Details of each room type
     * @type {Array<RateRoomTypeDetailType>}
     * @memberof RatePlanType
     */
    roomTypeList?: Array<RateRoomTypeDetailType>;
    /**
     *
     * @type {RatePackagesType}
     * @memberof RatePlanType
     */
    ratePackages?: RatePackagesType;
    /**
     *
     * @type {RatePlanTypeNegotiatedRates}
     * @memberof RatePlanType
     */
    negotiatedRates?: RatePlanTypeNegotiatedRates;
    /**
     *
     * @type {RatePlanControlsType}
     * @memberof RatePlanType
     */
    controls?: RatePlanControlsType;
    /**
     *
     * @type {RatePlanDistributionType}
     * @memberof RatePlanType
     */
    distribution?: RatePlanDistributionType;
    /**
     * Collection of lamp indicators.
     * @type {Array<IndicatorType>}
     * @memberof RatePlanType
     */
    ratePlanCodeIndicators?: Array<IndicatorType>;
    /**
     * Rate plan type based on rates.
     * @type {Array<RatePlanBasedOnRateType>}
     * @memberof RatePlanType
     */
    ratePlanBasedOnRates?: Array<RatePlanBasedOnRateType>;
    /**
     *
     * @type {RatePlanScheduleInfoType}
     * @memberof RatePlanType
     */
    ratePlanScheduleInfo?: RatePlanScheduleInfoType;
    /**
     *
     * @type {Array<RatePlanNoteType>}
     * @memberof RatePlanType
     */
    approvalNotes?: Array<RatePlanNoteType>;
    /**
     *
     * @type {RatePlanRoutingInstructionsType}
     * @memberof RatePlanType
     */
    routingInstructions?: RatePlanRoutingInstructionsType;
    /**
     *
     * @type {RatePlanExternalAttributesType}
     * @memberof RatePlanType
     */
    externalAttributes?: RatePlanExternalAttributesType;
    /**
     * List of access exclusions.
     * @type {Array<RateAccessExclusionType>}
     * @memberof RatePlanType
     */
    accessExclusions?: Array<RateAccessExclusionType>;
    /**
     * This is a placeholder element for future use. Functionality may not be available for the current implementation.
     * @type {boolean}
     * @memberof RatePlanType
     */
    mobileCheckinAllowed?: boolean;
    /**
     * This is a placeholder element for future use. Functionality may not be available for the current implementation.
     * @type {boolean}
     * @memberof RatePlanType
     */
    mobileCheckoutAllowed?: boolean;
    /**
     * Hotel Code
     * @type {string}
     * @memberof RatePlanType
     */
    hotelId?: string;
    /**
     * Rate plan Code
     * @type {string}
     * @memberof RatePlanType
     */
    ratePlanCode?: string;
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof RatePlanType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof RatePlanType
     */
    creatorId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof RatePlanType
     */
    lastModifyDateTime?: string;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof RatePlanType
     */
    lastModifierId?: string;
    /**
     * Date an item will be purged from a database (e.g., from a live database to an archive).
     * @type {string}
     * @memberof RatePlanType
     */
    purgeDate?: string;
    /**
     * Is rate amount suppressed for the rate plan?
     * @type {boolean}
     * @memberof RatePlanType
     */
    supressRate?: boolean;
    /**
     * Is Rate amount printed on the reports for the rate plan?
     * @type {boolean}
     * @memberof RatePlanType
     */
    printRate?: boolean;
    /**
     * Is rate plan code discounted?
     * @type {boolean}
     * @memberof RatePlanType
     */
    discountAllowed?: boolean;
    /**
     * Is redemption allowed on the rate code?
     * @type {boolean}
     * @memberof RatePlanType
     */
    redemption?: boolean;
    /**
     * Is rate plan code externally controlled?
     * @type {boolean}
     * @memberof RatePlanType
     */
    externallyControlled?: boolean;
    /**
     * Is rate plan code of BAR Rate type?
     * @type {boolean}
     * @memberof RatePlanType
     */
    bARRate?: boolean;
    /**
     * Is rate plan code a daily rate?
     * @type {boolean}
     * @memberof RatePlanType
     */
    daily?: boolean;
    /**
     * Is rate plan code a tiered rate?
     * @type {boolean}
     * @memberof RatePlanType
     */
    tiered?: boolean;
    /**
     * Is rate plan code for day use?
     * @type {boolean}
     * @memberof RatePlanType
     */
    dayUse?: boolean;
    /**
     * Indicates if rate Calendar factors such as adder/multiplier should be used for price calculation.
     * @type {boolean}
     * @memberof RatePlanType
     */
    dayType?: boolean;
    /**
     * Is rate plan code complimentary?
     * @type {boolean}
     * @memberof RatePlanType
     */
    complimentary?: boolean;
    /**
     * Is rate plan code for house use?
     * @type {boolean}
     * @memberof RatePlanType
     */
    houseUse?: boolean;
    /**
     * Is rate plan code only available as a negotiated rate that must be associated with a guest, company, or travel agent profile ?
     * @type {boolean}
     * @memberof RatePlanType
     */
    negotiated?: boolean;
    /**
     * Is rate plan code flagged as an owner rate plan? Owner rate plans have special functionality for no-shows depending on the Rolling Noshow Preference application setting.
     * @type {boolean}
     * @memberof RatePlanType
     */
    ownerRate?: boolean;
    /**
     * Is rate plan code flagged as eligible for memberships? This flag controls whether the guest stay, which this rate plan is attached to, qualifies for point calculations for Frequent Flyer or Frequent Guest programs. If the rate plan associated to the reservation has not been flagged for Membership then the guest will not earn any points/miles for their stay.
     * @type {boolean}
     * @memberof RatePlanType
     */
    membershipEligible?: boolean;
    /**
     * Flag to identify if Rate Code is Advanced Daily Base Rate Code
     * @type {boolean}
     * @memberof RatePlanType
     */
    advancedDailyBase?: boolean;
    /**
     * Flag to identify if Rate Code is Advanced Daily Rate
     * @type {boolean}
     * @memberof RatePlanType
     */
    advancedDailyRate?: boolean;
    /**
     * An amount that act as Floor value for Rate Plan.
     * @type {number}
     * @memberof RatePlanType
     */
    floorAmount?: number;
    /**
     *
     * @type {ManagedByOptions}
     * @memberof RatePlanType
     */
    managedBy?: ManagedByOptions;
}
/**
 * Check if a given object implements the RatePlanType interface.
 */
export declare function instanceOfRatePlanType(value: object): boolean;
export declare function RatePlanTypeFromJSON(json: any): RatePlanType;
export declare function RatePlanTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RatePlanType;
export declare function RatePlanTypeToJSON(value?: RatePlanType | null): any;
