/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AirportsDetails,
  AmenitiesDetails,
  AttractionsDetails,
  ChangeAttractionsRequest,
  ChangeCreditCardTypesRequest,
  ChangeDepartmentsRequest,
  ChangeHotelContactsRequest,
  ChangeHotelNotesRequest,
  CopyDepartmentsRequest,
  CountriesDetails,
  CreditCardTypesDetails,
  CurrencyExchangeRatesDetails,
  DepartmentsDetails,
  ExceptionDetailType,
  HotelDetails,
  HotelDetailsDetails,
  LanguagesDetails,
  OperaSettingsDetails,
  PostAmenitiesRequest,
  PostAttractionsRequest,
  PostCreditCardTypesRequest,
  PostDepartmentsRequest,
  PostHotelContactsRequest,
  PostHotelNotesRequest,
  PostTransportationRequest,
  Status,
  TemplateJobTitlesDetails,
  TransportationDetails,
  TransportationTemplatesDetails,
} from '../models';
import {
    AirportsDetailsFromJSON,
    AirportsDetailsToJSON,
    AmenitiesDetailsFromJSON,
    AmenitiesDetailsToJSON,
    AttractionsDetailsFromJSON,
    AttractionsDetailsToJSON,
    ChangeAttractionsRequestFromJSON,
    ChangeAttractionsRequestToJSON,
    ChangeCreditCardTypesRequestFromJSON,
    ChangeCreditCardTypesRequestToJSON,
    ChangeDepartmentsRequestFromJSON,
    ChangeDepartmentsRequestToJSON,
    ChangeHotelContactsRequestFromJSON,
    ChangeHotelContactsRequestToJSON,
    ChangeHotelNotesRequestFromJSON,
    ChangeHotelNotesRequestToJSON,
    CopyDepartmentsRequestFromJSON,
    CopyDepartmentsRequestToJSON,
    CountriesDetailsFromJSON,
    CountriesDetailsToJSON,
    CreditCardTypesDetailsFromJSON,
    CreditCardTypesDetailsToJSON,
    CurrencyExchangeRatesDetailsFromJSON,
    CurrencyExchangeRatesDetailsToJSON,
    DepartmentsDetailsFromJSON,
    DepartmentsDetailsToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    HotelDetailsFromJSON,
    HotelDetailsToJSON,
    HotelDetailsDetailsFromJSON,
    HotelDetailsDetailsToJSON,
    LanguagesDetailsFromJSON,
    LanguagesDetailsToJSON,
    OperaSettingsDetailsFromJSON,
    OperaSettingsDetailsToJSON,
    PostAmenitiesRequestFromJSON,
    PostAmenitiesRequestToJSON,
    PostAttractionsRequestFromJSON,
    PostAttractionsRequestToJSON,
    PostCreditCardTypesRequestFromJSON,
    PostCreditCardTypesRequestToJSON,
    PostDepartmentsRequestFromJSON,
    PostDepartmentsRequestToJSON,
    PostHotelContactsRequestFromJSON,
    PostHotelContactsRequestToJSON,
    PostHotelNotesRequestFromJSON,
    PostHotelNotesRequestToJSON,
    PostTransportationRequestFromJSON,
    PostTransportationRequestToJSON,
    StatusFromJSON,
    StatusToJSON,
    TemplateJobTitlesDetailsFromJSON,
    TemplateJobTitlesDetailsToJSON,
    TransportationDetailsFromJSON,
    TransportationDetailsToJSON,
    TransportationTemplatesDetailsFromJSON,
    TransportationTemplatesDetailsToJSON,
} from '../models';

export interface ChangeAttractionsOperationRequest {
    attractionCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    attractionsToBeChanged?: ChangeAttractionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeCreditCardTypesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    creditCardTypesToBeChanged?: ChangeCreditCardTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeDepartmentsOperationRequest {
    departmentCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    departmentsToBeChanged?: ChangeDepartmentsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeHotelContactsOperationRequest {
    contactId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelContactsToBeChanged?: ChangeHotelContactsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeHotelNotesOperationRequest {
    noteCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelNotesToBeChanged?: ChangeHotelNotesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyDepartmentsOperationRequest {
    sourceHotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    copyDepartments?: CopyDepartmentsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAirportsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    airportCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAmenitiesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    general?: boolean;
    meeting?: boolean;
    amenityCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAttractionsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    attractionCodes?: Array<string>;
    wildCard?: string;
    classCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCountriesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    countriesCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCreditCardTypesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCurrencyExchangeRatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    exchangeType?: GetCurrencyExchangeRatesExchangeTypeEnum;
    hotelIds?: Array<string>;
    currencyCode?: string;
    currencyCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDepartmentsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    departmentCodes?: Array<string>;
    departmentWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetHotelFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelDetailsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelDetailCodes?: Array<string>;
    hotelDetailCategoriesCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetLanguagesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    languageCodes?: Array<string>;
    description?: string;
    useAsAlternateLanguage?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOperaSettingsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    cROCode?: string;
    parameterNameWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateJobTitlesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    jobTitleCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransportationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transportationCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransportationTemplatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transportationCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAmenitiesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    amenitiesCriteria?: PostAmenitiesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAttractionsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    attractionsCriteria?: PostAttractionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCreditCardTypesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    creditCardTypesCriteria?: PostCreditCardTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostDepartmentsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    departmentsCriteria?: PostDepartmentsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostHotelContactsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelContactsCriteria?: PostHotelContactsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostHotelNotesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelNotesCriteria?: PostHotelNotesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTransportationOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transportationCriteria?: PostTransportationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveAttractionsRequest {
    attractionCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    attractionCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveCreditCardTypesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    creditCardTypesCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveDepartmentsRequest {
    departmentCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveHotelContactsRequest {
    contactId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idExtension?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveHotelNotesRequest {
    noteCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class HotelConfigApi extends runtime.BaseAPI {

    /**
     * This API is used to Use this API to update an existing attraction. . <p><strong>OperationId:</strong>changeAttractions</p>
     * Update an Attraction
     */
    async changeAttractionsRaw(requestParameters: ChangeAttractionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/attractions/{attractionCode}`.replace(`{${"attractionCode"}}`, encodeURIComponent(String(requestParameters.attractionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeAttractionsRequestToJSON(requestParameters.attractionsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API is used to Use this API to update an existing attraction. . <p><strong>OperationId:</strong>changeAttractions</p>
     * Update an Attraction
     */
    async changeAttractions(requestParameters: ChangeAttractionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeAttractionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Credit Card Types. <p><strong>OperationId:</strong>changeCreditCardTypes</p>
     * Change Credit Card Types
     */
    async changeCreditCardTypesRaw(requestParameters: ChangeCreditCardTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/creditcardTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeCreditCardTypesRequestToJSON(requestParameters.creditCardTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Credit Card Types. <p><strong>OperationId:</strong>changeCreditCardTypes</p>
     * Change Credit Card Types
     */
    async changeCreditCardTypes(requestParameters: ChangeCreditCardTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeCreditCardTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Departments. <p><strong>OperationId:</strong>changeDepartments</p>
     * Change Departments
     */
    async changeDepartmentsRaw(requestParameters: ChangeDepartmentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/departments/{departmentCode}`.replace(`{${"departmentCode"}}`, encodeURIComponent(String(requestParameters.departmentCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeDepartmentsRequestToJSON(requestParameters.departmentsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Departments. <p><strong>OperationId:</strong>changeDepartments</p>
     * Change Departments
     */
    async changeDepartments(requestParameters: ChangeDepartmentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeDepartmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Hotel Contact. <p><strong>OperationId:</strong>changeHotelContacts</p>
     * Change Hotel Contact
     */
    async changeHotelContactsRaw(requestParameters: ChangeHotelContactsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/contacts/{contactId}`.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeHotelContactsRequestToJSON(requestParameters.hotelContactsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Hotel Contact. <p><strong>OperationId:</strong>changeHotelContacts</p>
     * Change Hotel Contact
     */
    async changeHotelContacts(requestParameters: ChangeHotelContactsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeHotelContactsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Note information. <p><strong>OperationId:</strong>changeHotelNotes</p>
     * Update Note information
     */
    async changeHotelNotesRaw(requestParameters: ChangeHotelNotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/notes/{noteCode}`.replace(`{${"noteCode"}}`, encodeURIComponent(String(requestParameters.noteCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeHotelNotesRequestToJSON(requestParameters.hotelNotesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Update Note information. <p><strong>OperationId:</strong>changeHotelNotes</p>
     * Update Note information
     */
    async changeHotelNotes(requestParameters: ChangeHotelNotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeHotelNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy Departments. <p><strong>OperationId:</strong>copyDepartments</p>
     *  copy Departments
     */
    async copyDepartmentsRaw(requestParameters: CopyDepartmentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{sourceHotelId}/departments/copy`.replace(`{${"sourceHotelId"}}`, encodeURIComponent(String(requestParameters.sourceHotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyDepartmentsRequestToJSON(requestParameters.copyDepartments),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Copy Departments. <p><strong>OperationId:</strong>copyDepartments</p>
     *  copy Departments
     */
    async copyDepartments(requestParameters: CopyDepartmentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyDepartmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get resort airports. <p><strong>OperationId:</strong>getAirports</p>
     * Get resort airports
     */
    async getAirportsRaw(requestParameters: GetAirportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AirportsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.airportCodes) {
            queryParameters['airportCodes'] = requestParameters.airportCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/airports`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AirportsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get resort airports. <p><strong>OperationId:</strong>getAirports</p>
     * Get resort airports
     */
    async getAirports(requestParameters: GetAirportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AirportsDetails> {
        const response = await this.getAirportsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get amenities. <p><strong>OperationId:</strong>getAmenities</p>
     * Get amenities
     */
    async getAmenitiesRaw(requestParameters: GetAmenitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AmenitiesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.general !== undefined) {
            queryParameters['general'] = requestParameters.general;
        }

        if (requestParameters.meeting !== undefined) {
            queryParameters['meeting'] = requestParameters.meeting;
        }

        if (requestParameters.amenityCodes) {
            queryParameters['amenityCodes'] = requestParameters.amenityCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/amenities`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AmenitiesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get amenities. <p><strong>OperationId:</strong>getAmenities</p>
     * Get amenities
     */
    async getAmenities(requestParameters: GetAmenitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AmenitiesDetails> {
        const response = await this.getAmenitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Attractions. <p><strong>OperationId:</strong>getAttractions</p>
     * Get Attractions
     */
    async getAttractionsRaw(requestParameters: GetAttractionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttractionsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.attractionCodes) {
            queryParameters['attractionCodes'] = requestParameters.attractionCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.classCodes) {
            queryParameters['classCodes'] = requestParameters.classCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/attractions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttractionsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Attractions. <p><strong>OperationId:</strong>getAttractions</p>
     * Get Attractions
     */
    async getAttractions(requestParameters: GetAttractionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttractionsDetails> {
        const response = await this.getAttractionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Countries. <p><strong>OperationId:</strong>getCountries</p>
     * Get Countries
     */
    async getCountriesRaw(requestParameters: GetCountriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountriesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.countriesCodes) {
            queryParameters['countriesCodes'] = requestParameters.countriesCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/countries`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountriesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Countries. <p><strong>OperationId:</strong>getCountries</p>
     * Get Countries
     */
    async getCountries(requestParameters: GetCountriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountriesDetails> {
        const response = await this.getCountriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Credit Card Types. <p><strong>OperationId:</strong>getCreditCardTypes</p>
     * Get Credit Card Types
     */
    async getCreditCardTypesRaw(requestParameters: GetCreditCardTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditCardTypesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/creditcardTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditCardTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Credit Card Types. <p><strong>OperationId:</strong>getCreditCardTypes</p>
     * Get Credit Card Types
     */
    async getCreditCardTypes(requestParameters: GetCreditCardTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditCardTypesDetails> {
        const response = await this.getCreditCardTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch the currency exchange rates when using this API. <p><strong>OperationId:</strong>getCurrencyExchangeRates</p>
     * Get Currency Exchange Rates
     */
    async getCurrencyExchangeRatesRaw(requestParameters: GetCurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyExchangeRatesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.exchangeType !== undefined) {
            queryParameters['exchangeType'] = requestParameters.exchangeType;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        if (requestParameters.currencyCodes) {
            queryParameters['currencyCodes'] = requestParameters.currencyCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/currencyExchangeRates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencyExchangeRatesDetailsFromJSON(jsonValue));
    }

    /**
     * Fetch the currency exchange rates when using this API. <p><strong>OperationId:</strong>getCurrencyExchangeRates</p>
     * Get Currency Exchange Rates
     */
    async getCurrencyExchangeRates(requestParameters: GetCurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyExchangeRatesDetails> {
        const response = await this.getCurrencyExchangeRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Departments. <p><strong>OperationId:</strong>getDepartments</p>
     * Get Departments
     */
    async getDepartmentsRaw(requestParameters: GetDepartmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DepartmentsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.departmentCodes) {
            queryParameters['departmentCodes'] = requestParameters.departmentCodes;
        }

        if (requestParameters.departmentWildCard !== undefined) {
            queryParameters['departmentWildCard'] = requestParameters.departmentWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/departments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DepartmentsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Departments. <p><strong>OperationId:</strong>getDepartments</p>
     * Get Departments
     */
    async getDepartments(requestParameters: GetDepartmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DepartmentsDetails> {
        const response = await this.getDepartmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return hotel configuration information details for a specific property.  Specific areas of configuration can be returned based on the fetchInstructions query parameter such as General, Attraction, Airports, Alternatehotels, Raterange, etc.<p><strong>OperationId:</strong>getHotel</p>
     * Get hotel property configuration details
     */
    async getHotelRaw(requestParameters: GetHotelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to return hotel configuration information details for a specific property.  Specific areas of configuration can be returned based on the fetchInstructions query parameter such as General, Attraction, Airports, Alternatehotels, Raterange, etc.<p><strong>OperationId:</strong>getHotel</p>
     * Get hotel property configuration details
     */
    async getHotel(requestParameters: GetHotelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelDetails> {
        const response = await this.getHotelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get hotel details. <p><strong>OperationId:</strong>getHotelDetails</p>
     * Get hotel details 
     */
    async getHotelDetailsRaw(requestParameters: GetHotelDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelDetailsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelDetailCodes) {
            queryParameters['hotelDetailCodes'] = requestParameters.hotelDetailCodes;
        }

        if (requestParameters.hotelDetailCategoriesCodes) {
            queryParameters['hotelDetailCategoriesCodes'] = requestParameters.hotelDetailCategoriesCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/hotelDetails`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelDetailsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get hotel details. <p><strong>OperationId:</strong>getHotelDetails</p>
     * Get hotel details 
     */
    async getHotelDetails(requestParameters: GetHotelDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelDetailsDetails> {
        const response = await this.getHotelDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Languages. <p><strong>OperationId:</strong>getLanguages</p>
     * Get Languages
     */
    async getLanguagesRaw(requestParameters: GetLanguagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LanguagesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.languageCodes) {
            queryParameters['languageCodes'] = requestParameters.languageCodes;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.useAsAlternateLanguage !== undefined) {
            queryParameters['useAsAlternateLanguage'] = requestParameters.useAsAlternateLanguage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/languages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LanguagesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Languages. <p><strong>OperationId:</strong>getLanguages</p>
     * Get Languages
     */
    async getLanguages(requestParameters: GetLanguagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LanguagesDetails> {
        const response = await this.getLanguagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return OPERA controls based on search criteria such as hotelId, cROCode, parameterNameWildCard.<p><strong>OperationId:</strong>getOperaSettings</p>
     * Get OPERA controls
     */
    async getOperaSettingsRaw(requestParameters: GetOperaSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperaSettingsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.cROCode !== undefined) {
            queryParameters['cROCode'] = requestParameters.cROCode;
        }

        if (requestParameters.parameterNameWildCard !== undefined) {
            queryParameters['parameterNameWildCard'] = requestParameters.parameterNameWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OperaSettingsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to return OPERA controls based on search criteria such as hotelId, cROCode, parameterNameWildCard.<p><strong>OperationId:</strong>getOperaSettings</p>
     * Get OPERA controls
     */
    async getOperaSettings(requestParameters: GetOperaSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperaSettingsDetails> {
        const response = await this.getOperaSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get template job titles. <p><strong>OperationId:</strong>getTemplateJobTitles</p>
     * Get template job titles
     */
    async getTemplateJobTitlesRaw(requestParameters: GetTemplateJobTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateJobTitlesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.jobTitleCodes) {
            queryParameters['jobTitleCodes'] = requestParameters.jobTitleCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/jobTitles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateJobTitlesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get template job titles. <p><strong>OperationId:</strong>getTemplateJobTitles</p>
     * Get template job titles
     */
    async getTemplateJobTitles(requestParameters: GetTemplateJobTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateJobTitlesDetails> {
        const response = await this.getTemplateJobTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get transportation. <p><strong>OperationId:</strong>getTransportation</p>
     * Get transportation
     */
    async getTransportationRaw(requestParameters: GetTransportationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransportationDetails>> {
        const queryParameters: any = {};

        if (requestParameters.transportationCodes) {
            queryParameters['transportationCodes'] = requestParameters.transportationCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transportations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransportationDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get transportation. <p><strong>OperationId:</strong>getTransportation</p>
     * Get transportation
     */
    async getTransportation(requestParameters: GetTransportationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransportationDetails> {
        const response = await this.getTransportationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get transportation templates. <p><strong>OperationId:</strong>getTransportationTemplates</p>
     * Get transportation templates
     */
    async getTransportationTemplatesRaw(requestParameters: GetTransportationTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransportationTemplatesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.transportationCodes) {
            queryParameters['transportationCodes'] = requestParameters.transportationCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transportations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransportationTemplatesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get transportation templates. <p><strong>OperationId:</strong>getTransportationTemplates</p>
     * Get transportation templates
     */
    async getTransportationTemplates(requestParameters: GetTransportationTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransportationTemplatesDetails> {
        const response = await this.getTransportationTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create amenities. <p><strong>OperationId:</strong>postAmenities</p>
     * Create amenities
     */
    async postAmenitiesRaw(requestParameters: PostAmenitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/amenities`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAmenitiesRequestToJSON(requestParameters.amenitiesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create amenities. <p><strong>OperationId:</strong>postAmenities</p>
     * Create amenities
     */
    async postAmenities(requestParameters: PostAmenitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAmenitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API can be used to Use this API to create a new attraction for a property. . <p><strong>OperationId:</strong>postAttractions</p>
     * Create Attractions
     */
    async postAttractionsRaw(requestParameters: PostAttractionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/attractions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAttractionsRequestToJSON(requestParameters.attractionsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API can be used to Use this API to create a new attraction for a property. . <p><strong>OperationId:</strong>postAttractions</p>
     * Create Attractions
     */
    async postAttractions(requestParameters: PostAttractionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAttractionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Credit Card Types. <p><strong>OperationId:</strong>postCreditCardTypes</p>
     * Create Credit Card Types
     */
    async postCreditCardTypesRaw(requestParameters: PostCreditCardTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/creditcardTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCreditCardTypesRequestToJSON(requestParameters.creditCardTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Credit Card Types. <p><strong>OperationId:</strong>postCreditCardTypes</p>
     * Create Credit Card Types
     */
    async postCreditCardTypes(requestParameters: PostCreditCardTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCreditCardTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Departments. <p><strong>OperationId:</strong>postDepartments</p>
     * Create Departments
     */
    async postDepartmentsRaw(requestParameters: PostDepartmentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/departments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostDepartmentsRequestToJSON(requestParameters.departmentsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Departments. <p><strong>OperationId:</strong>postDepartments</p>
     * Create Departments
     */
    async postDepartments(requestParameters: PostDepartmentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postDepartmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Hotel Contacts. <p><strong>OperationId:</strong>postHotelContacts</p>
     * Create Hotel Contacts
     */
    async postHotelContactsRaw(requestParameters: PostHotelContactsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/contacts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostHotelContactsRequestToJSON(requestParameters.hotelContactsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Hotel Contacts. <p><strong>OperationId:</strong>postHotelContacts</p>
     * Create Hotel Contacts
     */
    async postHotelContacts(requestParameters: PostHotelContactsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postHotelContactsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Note information. <p><strong>OperationId:</strong>postHotelNotes</p>
     * Create Note information
     */
    async postHotelNotesRaw(requestParameters: PostHotelNotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/notes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostHotelNotesRequestToJSON(requestParameters.hotelNotesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Note information. <p><strong>OperationId:</strong>postHotelNotes</p>
     * Create Note information
     */
    async postHotelNotes(requestParameters: PostHotelNotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postHotelNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create transportation. <p><strong>OperationId:</strong>postTransportation</p>
     * Create transportation
     */
    async postTransportationRaw(requestParameters: PostTransportationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transportations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTransportationRequestToJSON(requestParameters.transportationCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create transportation. <p><strong>OperationId:</strong>postTransportation</p>
     * Create transportation
     */
    async postTransportation(requestParameters: PostTransportationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTransportationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Use this API to remove an existing attraction. <p><strong>OperationId:</strong>removeAttractions</p>
     * Delete Attractions
     */
    async removeAttractionsRaw(requestParameters: RemoveAttractionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.attractionCodes) {
            queryParameters['attractionCodes'] = requestParameters.attractionCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/attractions/{attractionCode}`.replace(`{${"attractionCode"}}`, encodeURIComponent(String(requestParameters.attractionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  Use this API to remove an existing attraction. <p><strong>OperationId:</strong>removeAttractions</p>
     * Delete Attractions
     */
    async removeAttractions(requestParameters: RemoveAttractionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeAttractionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Credit Card Types. <p><strong>OperationId:</strong>removeCreditCardTypes</p>
     * Delete Credit Card Types
     */
    async removeCreditCardTypesRaw(requestParameters: RemoveCreditCardTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.creditCardTypesCode) {
            queryParameters['creditCardTypesCode'] = requestParameters.creditCardTypesCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/creditcardTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Credit Card Types. <p><strong>OperationId:</strong>removeCreditCardTypes</p>
     * Delete Credit Card Types
     */
    async removeCreditCardTypes(requestParameters: RemoveCreditCardTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeCreditCardTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Departments. <p><strong>OperationId:</strong>removeDepartments</p>
     * Delete Departments
     */
    async removeDepartmentsRaw(requestParameters: RemoveDepartmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/departments/{departmentCode}`.replace(`{${"departmentCode"}}`, encodeURIComponent(String(requestParameters.departmentCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Departments. <p><strong>OperationId:</strong>removeDepartments</p>
     * Delete Departments
     */
    async removeDepartments(requestParameters: RemoveDepartmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeDepartmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Hotel contact. <p><strong>OperationId:</strong>removeHotelContacts</p>
     * Delete Hotel contact
     */
    async removeHotelContactsRaw(requestParameters: RemoveHotelContactsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/contacts/{contactId}`.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Hotel contact. <p><strong>OperationId:</strong>removeHotelContacts</p>
     * Delete Hotel contact
     */
    async removeHotelContacts(requestParameters: RemoveHotelContactsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeHotelContactsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Note information. <p><strong>OperationId:</strong>removeHotelNotes</p>
     * Delete Note information
     */
    async removeHotelNotesRaw(requestParameters: RemoveHotelNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/notes/{noteCode}`.replace(`{${"noteCode"}}`, encodeURIComponent(String(requestParameters.noteCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Note information. <p><strong>OperationId:</strong>removeHotelNotes</p>
     * Delete Note information
     */
    async removeHotelNotes(requestParameters: RemoveHotelNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeHotelNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCurrencyExchangeRatesExchangeTypeEnum = {
    Posting: 'Posting',
    Settlement: 'Settlement',
    Exchangecash: 'Exchangecash',
    Travelagent: 'Travelagent',
    Forecast: 'Forecast',
    Membership: 'Membership',
    Exchangecheck: 'Exchangecheck',
    Certificate: 'Certificate'
} as const;
export type GetCurrencyExchangeRatesExchangeTypeEnum = typeof GetCurrencyExchangeRatesExchangeTypeEnum[keyof typeof GetCurrencyExchangeRatesExchangeTypeEnum];
/**
 * @export
 */
export const GetHotelFetchInstructionsEnum = {
    General: 'General',
    Attraction: 'Attraction',
    Transportation: 'Transportation',
    Package: 'Package',
    Dining: 'Dining',
    Feature: 'Feature',
    Directions: 'Directions',
    GeneralNotes: 'GeneralNotes',
    Airports: 'Airports',
    Alternatehotels: 'Alternatehotels',
    Miscellaneous: 'Miscellaneous',
    Raterange: 'Raterange',
    Contacts: 'Contacts',
    EventSpaces: 'EventSpaces',
    Notes: 'Notes',
    Corporateinformation: 'Corporateinformation',
    Meetingrooms: 'Meetingrooms'
} as const;
export type GetHotelFetchInstructionsEnum = typeof GetHotelFetchInstructionsEnum[keyof typeof GetHotelFetchInstructionsEnum];
