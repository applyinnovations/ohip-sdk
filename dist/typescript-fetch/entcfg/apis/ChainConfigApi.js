"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainConfigApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class ChainConfigApi extends runtime.BaseAPI {
    /**
     * Use this API to update brand codes based on brandCode, brandCodesToBeChanged. Brand codes are used for different hotel brands within a hotel corporation. <p><strong>OperationId:</strong>changeBrandCodes</p>
     * Change Brand Code
     */
    changeBrandCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/brandCodes/{brandCode}`.replace(`{${"brandCode"}}`, encodeURIComponent(String(requestParameters.brandCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ChangeBrandCodesRequestToJSON)(requestParameters.brandCodesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update brand codes based on brandCode, brandCodesToBeChanged. Brand codes are used for different hotel brands within a hotel corporation. <p><strong>OperationId:</strong>changeBrandCodes</p>
     * Change Brand Code
     */
    changeBrandCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeBrandCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Corporate Business Units based on businessUnitCode, corporateBusinessUnitsToBeChanged. <p><strong>OperationId:</strong>changeCorporateBusinessUnits</p>
     * Change Corporate Business Units
     */
    changeCorporateBusinessUnitsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/corporateBusinessUnits/{businessUnitCode}`.replace(`{${"businessUnitCode"}}`, encodeURIComponent(String(requestParameters.businessUnitCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ChangeCorporateBusinessUnitsRequestToJSON)(requestParameters.corporateBusinessUnitsToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Corporate Business Units based on businessUnitCode, corporateBusinessUnitsToBeChanged. <p><strong>OperationId:</strong>changeCorporateBusinessUnits</p>
     * Change Corporate Business Units
     */
    changeCorporateBusinessUnits(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeCorporateBusinessUnitsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update corporate department codes based on departmentCode, corporateDepartmentCodesToBeChanged. <p><strong>OperationId:</strong>changeCorporateDepartmentCodes</p>
     * Change Corporate Department Codes
     */
    changeCorporateDepartmentCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/corporateDepartmentCodes/{departmentCode}`.replace(`{${"departmentCode"}}`, encodeURIComponent(String(requestParameters.departmentCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ChangeCorporateDepartmentCodesRequestToJSON)(requestParameters.corporateDepartmentCodesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update corporate department codes based on departmentCode, corporateDepartmentCodesToBeChanged. <p><strong>OperationId:</strong>changeCorporateDepartmentCodes</p>
     * Change Corporate Department Codes
     */
    changeCorporateDepartmentCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeCorporateDepartmentCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update corporate divisions based on divisionCode, corporateDivisionsToBeChanged. <p><strong>OperationId:</strong>changeCorporateDivisions</p>
     * Change Corporate Divisions
     */
    changeCorporateDivisionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/corporateDivisions/{divisionCode}`.replace(`{${"divisionCode"}}`, encodeURIComponent(String(requestParameters.divisionCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ChangeCorporateDivisionsRequestToJSON)(requestParameters.corporateDivisionsToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update corporate divisions based on divisionCode, corporateDivisionsToBeChanged. <p><strong>OperationId:</strong>changeCorporateDivisions</p>
     * Change Corporate Divisions
     */
    changeCorporateDivisions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeCorporateDivisionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update corporate operating units based on operatingUnitCode, corporateOperatingUnitsToBeChanged. <p><strong>OperationId:</strong>changeCorporateOperatingUnits</p>
     * Change Corporate Operating Units
     */
    changeCorporateOperatingUnitsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/corporateOperatingUnits/{operatingUnitCode}`.replace(`{${"operatingUnitCode"}}`, encodeURIComponent(String(requestParameters.operatingUnitCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ChangeCorporateOperatingUnitsRequestToJSON)(requestParameters.corporateOperatingUnitsToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update corporate operating units based on operatingUnitCode, corporateOperatingUnitsToBeChanged. <p><strong>OperationId:</strong>changeCorporateOperatingUnits</p>
     * Change Corporate Operating Units
     */
    changeCorporateOperatingUnits(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeCorporateOperatingUnitsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update country guest types based on guestTypeCode, countryGuestTypesToBeChanged. <p><strong>OperationId:</strong>changeCountryGuestTypes</p>
     * Change Country Guest Types
     */
    changeCountryGuestTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/countries/guestTypes/{guestTypeCode}`.replace(`{${"guestTypeCode"}}`, encodeURIComponent(String(requestParameters.guestTypeCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ChangeCountryGuestTypesRequestToJSON)(requestParameters.countryGuestTypesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update country guest types based on guestTypeCode, countryGuestTypesToBeChanged. <p><strong>OperationId:</strong>changeCountryGuestTypes</p>
     * Change Country Guest Types
     */
    changeCountryGuestTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeCountryGuestTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update country main groups based on groupCode, countryMainGroupsToBeChanged. <p><strong>OperationId:</strong>changeCountryMainGroups</p>
     * Change Country Main Groups
     */
    changeCountryMainGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/countryMainGroups/{groupCode}`.replace(`{${"groupCode"}}`, encodeURIComponent(String(requestParameters.groupCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ChangeCountryMainGroupsRequestToJSON)(requestParameters.countryMainGroupsToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update country main groups based on groupCode, countryMainGroupsToBeChanged. <p><strong>OperationId:</strong>changeCountryMainGroups</p>
     * Change Country Main Groups
     */
    changeCountryMainGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeCountryMainGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update hotel categories based on categoryCode, hotelCategoriesToBeChanged. <p><strong>OperationId:</strong>changeHotelCategories</p>
     * Change Hotel Categories
     */
    changeHotelCategoriesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotelCategories/{categoryCode}`.replace(`{${"categoryCode"}}`, encodeURIComponent(String(requestParameters.categoryCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ChangeHotelCategoriesRequestToJSON)(requestParameters.hotelCategoriesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update hotel categories based on categoryCode, hotelCategoriesToBeChanged. <p><strong>OperationId:</strong>changeHotelCategories</p>
     * Change Hotel Categories
     */
    changeHotelCategories(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeHotelCategoriesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update note types based on noteTypeCode, noteTypesToBeChanged. <p><strong>OperationId:</strong>changeNoteTypes</p>
     * Change Note Types
     */
    changeNoteTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/noteTypes/{noteTypeCode}`.replace(`{${"noteTypeCode"}}`, encodeURIComponent(String(requestParameters.noteTypeCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ChangeNoteTypesRequestToJSON)(requestParameters.noteTypesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update note types based on noteTypeCode, noteTypesToBeChanged. <p><strong>OperationId:</strong>changeNoteTypes</p>
     * Change Note Types
     */
    changeNoteTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeNoteTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update property detail categories based on categoryCode, propertyDetailCategoriesToBeChanged. <p><strong>OperationId:</strong>changePropertyDetailCategories</p>
     * Change Property Detail Categories
     */
    changePropertyDetailCategoriesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/propertyDetailsCategories/{categoryCode}`.replace(`{${"categoryCode"}}`, encodeURIComponent(String(requestParameters.categoryCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ChangePropertyDetailCategoriesRequestToJSON)(requestParameters.propertyDetailCategoriesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update property detail categories based on categoryCode, propertyDetailCategoriesToBeChanged. <p><strong>OperationId:</strong>changePropertyDetailCategories</p>
     * Change Property Detail Categories
     */
    changePropertyDetailCategories(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changePropertyDetailCategoriesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update region codes based on regionCode, regionsCodeToBeChanged. <p><strong>OperationId:</strong>changeRegionsCode</p>
     * Change Regions Code
     */
    changeRegionsCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/regionCode/{regionCode}`.replace(`{${"regionCode"}}`, encodeURIComponent(String(requestParameters.regionCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ChangeRegionsCodeRequestToJSON)(requestParameters.regionsCodeToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update region codes based on regionCode, regionsCodeToBeChanged. <p><strong>OperationId:</strong>changeRegionsCode</p>
     * Change Regions Code
     */
    changeRegionsCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeRegionsCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update template codes based on code, templateCodesToBeChanged. <p><strong>OperationId:</strong>changeTemplateCodes</p>
     * Change Template Codes
     */
    changeTemplateCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/templateCodes/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ChangeTemplateCodesRequestToJSON)(requestParameters.templateCodesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update template codes based on code, templateCodesToBeChanged. <p><strong>OperationId:</strong>changeTemplateCodes</p>
     * Change Template Codes
     */
    changeTemplateCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeTemplateCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update user defined field groups based on udfGroupCode, userDefinedFieldGroupsToBeChanged. <p><strong>OperationId:</strong>changeUserDefinedFieldGroups</p>
     * Change User Defined Field Groups
     */
    changeUserDefinedFieldGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/userDefinedFieldGroups/{udfGroupCode}`.replace(`{${"udfGroupCode"}}`, encodeURIComponent(String(requestParameters.udfGroupCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ChangeUserDefinedFieldGroupsRequestToJSON)(requestParameters.userDefinedFieldGroupsToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update user defined field groups based on udfGroupCode, userDefinedFieldGroupsToBeChanged. <p><strong>OperationId:</strong>changeUserDefinedFieldGroups</p>
     * Change User Defined Field Groups
     */
    changeUserDefinedFieldGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeUserDefinedFieldGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update user defined field values based on udfValue, userDefinedFieldValuesToBeChanged. The LOV group and LOV values functionality allows a property create a custom group of values to be used in a specified user defined field (UDF). This functionality provides added flexibility in allowing a site to track information or details that are specific to their business and outside of the standard fields offered in the OPERA Cloud. <p><strong>OperationId:</strong>changeUserDefinedFieldValues</p>
     * Change a User Defined Field Value
     */
    changeUserDefinedFieldValuesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/userDefinedFieldValues/{udfValue}`.replace(`{${"udfValue"}}`, encodeURIComponent(String(requestParameters.udfValue))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ChangeUserDefinedFieldValuesRequestToJSON)(requestParameters.userDefinedFieldValuesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update user defined field values based on udfValue, userDefinedFieldValuesToBeChanged. The LOV group and LOV values functionality allows a property create a custom group of values to be used in a specified user defined field (UDF). This functionality provides added flexibility in allowing a site to track information or details that are specific to their business and outside of the standard fields offered in the OPERA Cloud. <p><strong>OperationId:</strong>changeUserDefinedFieldValues</p>
     * Change a User Defined Field Value
     */
    changeUserDefinedFieldValues(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changeUserDefinedFieldValuesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Attraction Classes. <p><strong>OperationId:</strong>deleteAttractionClasses</p>
     * Delete Attraction Classes
     */
    deleteAttractionClassesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/attractionClasses/{attractionClassCode}`.replace(`{${"attractionClassCode"}}`, encodeURIComponent(String(requestParameters.attractionClassCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Attraction Classes. <p><strong>OperationId:</strong>deleteAttractionClasses</p>
     * Delete Attraction Classes
     */
    deleteAttractionClasses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteAttractionClassesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Communication Methods Ent Details. <p><strong>OperationId:</strong>deleteCommunicationMethodsEntDetails</p>
     * Delete Communication Methods Ent Details
     */
    deleteCommunicationMethodsEntDetailsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.communicationMethodsEntDetailsCodes) {
                queryParameters['communicationMethodsEntDetailsCodes'] = requestParameters.communicationMethodsEntDetailsCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/communicationMethodsEntDetails/{communicationMethodsEntDetailsId}`.replace(`{${"communicationMethodsEntDetailsId"}}`, encodeURIComponent(String(requestParameters.communicationMethodsEntDetailsId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Communication Methods Ent Details. <p><strong>OperationId:</strong>deleteCommunicationMethodsEntDetails</p>
     * Delete Communication Methods Ent Details
     */
    deleteCommunicationMethodsEntDetails(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCommunicationMethodsEntDetailsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Marketing Regions. <p><strong>OperationId:</strong>deleteMarketingRegions</p>
     * Delete Marketing Regions
     */
    deleteMarketingRegionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.marketingRegionsCodes) {
                queryParameters['marketingRegionsCodes'] = requestParameters.marketingRegionsCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/marketingRegions/{marketingRegionCode}`.replace(`{${"marketingRegionCode"}}`, encodeURIComponent(String(requestParameters.marketingRegionCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Marketing Regions. <p><strong>OperationId:</strong>deleteMarketingRegions</p>
     * Delete Marketing Regions
     */
    deleteMarketingRegions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteMarketingRegionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Property Types. <p><strong>OperationId:</strong>deletePropertyTypes</p>
     * Delete Property Types
     */
    deletePropertyTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.propertyTypesCodes) {
                queryParameters['propertyTypesCodes'] = requestParameters.propertyTypesCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/propertyTypes/{propertyTypeCode}`.replace(`{${"propertyTypeCode"}}`, encodeURIComponent(String(requestParameters.propertyTypeCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Property Types. <p><strong>OperationId:</strong>deletePropertyTypes</p>
     * Delete Property Types
     */
    deletePropertyTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deletePropertyTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Room Amenities. <p><strong>OperationId:</strong>deleteRoomAmenities</p>
     * Delete Room Amenities
     */
    deleteRoomAmenitiesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.roomAmenitiesCodes) {
                queryParameters['roomAmenitiesCodes'] = requestParameters.roomAmenitiesCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/roomAmenities/{roomAmenitiesId}`.replace(`{${"roomAmenitiesId"}}`, encodeURIComponent(String(requestParameters.roomAmenitiesId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Room Amenities. <p><strong>OperationId:</strong>deleteRoomAmenities</p>
     * Delete Room Amenities
     */
    deleteRoomAmenities(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteRoomAmenitiesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Attraction Classes. <p><strong>OperationId:</strong>getAttractionClasses</p>
     * Get Attraction Classes
     */
    getAttractionClassesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/attractionClasses`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AttractionClassesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Attraction Classes. <p><strong>OperationId:</strong>getAttractionClasses</p>
     * Get Attraction Classes
     */
    getAttractionClasses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAttractionClassesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to return brand codes based on search criteria such as codes, wildCard, description. Brand codes are used for different hotel brands within a hotel corporation.<p><strong>OperationId:</strong>getBrandCodes</p>
     * Get brand codes
     */
    getBrandCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/brandCodes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BrandCodesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to return brand codes based on search criteria such as codes, wildCard, description. Brand codes are used for different hotel brands within a hotel corporation.<p><strong>OperationId:</strong>getBrandCodes</p>
     * Get brand codes
     */
    getBrandCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBrandCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Chains. <p><strong>OperationId:</strong>getChain</p>
     * Get Chains
     */
    getChainRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.enforceSecurity !== undefined) {
                queryParameters['enforceSecurity'] = requestParameters.enforceSecurity;
            }
            if (requestParameters.includeActive !== undefined) {
                queryParameters['includeActive'] = requestParameters.includeActive;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.chainCodes) {
                queryParameters['chainCodes'] = requestParameters.chainCodes;
            }
            if (requestParameters.chainName !== undefined) {
                queryParameters['chainName'] = requestParameters.chainName;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/chain`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ChainDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Chains. <p><strong>OperationId:</strong>getChain</p>
     * Get Chains
     */
    getChain(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChainRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Communication Methods Ent Details. <p><strong>OperationId:</strong>getCommunicationMethodsEntDetails</p>
     * Get Communication Methods Ent Details
     */
    getCommunicationMethodsEntDetailsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/communicationMethodsEntDetails`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CommunicationMethodsEntDetailsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Communication Methods Ent Details. <p><strong>OperationId:</strong>getCommunicationMethodsEntDetails</p>
     * Get Communication Methods Ent Details
     */
    getCommunicationMethodsEntDetails(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCommunicationMethodsEntDetailsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Corporate Business Units. <p><strong>OperationId:</strong>getCorporateBusinessUnits</p>
     * Get Corporate Business Units
     */
    getCorporateBusinessUnitsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/corporateBusinessUnits`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CorporateBusinessUnitsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Corporate Business Units. <p><strong>OperationId:</strong>getCorporateBusinessUnits</p>
     * Get Corporate Business Units
     */
    getCorporateBusinessUnits(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCorporateBusinessUnitsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Corporate Department Codes. <p><strong>OperationId:</strong>getCorporateDepartmentCodes</p>
     * Get Corporate Department Codes
     */
    getCorporateDepartmentCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/corporateDepartmentCodes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CorporateDepartmentCodesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Corporate Department Codes. <p><strong>OperationId:</strong>getCorporateDepartmentCodes</p>
     * Get Corporate Department Codes
     */
    getCorporateDepartmentCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCorporateDepartmentCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Corporate Divisions. <p><strong>OperationId:</strong>getCorporateDivisions</p>
     * Get Corporate Divisions
     */
    getCorporateDivisionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/corporateDivisions`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CorporateDivisionsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Corporate Divisions. <p><strong>OperationId:</strong>getCorporateDivisions</p>
     * Get Corporate Divisions
     */
    getCorporateDivisions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCorporateDivisionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Corporate Operating Units. <p><strong>OperationId:</strong>getCorporateOperatingUnits</p>
     * Get Corporate Operating Units
     */
    getCorporateOperatingUnitsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/corporateOperatingUnits`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CorporateOperatingUnitsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Corporate Operating Units. <p><strong>OperationId:</strong>getCorporateOperatingUnits</p>
     * Get Corporate Operating Units
     */
    getCorporateOperatingUnits(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCorporateOperatingUnitsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Country Guest Types. <p><strong>OperationId:</strong>getCountryGuestTypes</p>
     * Get Country Guest Types
     */
    getCountryGuestTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/countries/guestTypes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CountryGuestTypesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Country Guest Types. <p><strong>OperationId:</strong>getCountryGuestTypes</p>
     * Get Country Guest Types
     */
    getCountryGuestTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCountryGuestTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Country Main Groups. <p><strong>OperationId:</strong>getCountryMainGroups</p>
     * Get Country Main Groups
     */
    getCountryMainGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/countryMainGroups`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CountryMainGroupsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Country Main Groups. <p><strong>OperationId:</strong>getCountryMainGroups</p>
     * Get Country Main Groups
     */
    getCountryMainGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCountryMainGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Default Note text. <p><strong>OperationId:</strong>getDefaultNote</p>
     * Get Default Note text
     */
    getDefaultNoteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.noteType !== undefined) {
                queryParameters['noteType'] = requestParameters.noteType;
            }
            if (requestParameters.noteCode !== undefined) {
                queryParameters['noteCode'] = requestParameters.noteCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/defaultNote`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DefaultNoteDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Default Note text. <p><strong>OperationId:</strong>getDefaultNote</p>
     * Get Default Note text
     */
    getDefaultNote(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getDefaultNoteRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * . <p><strong>OperationId:</strong>getHotelCategories</p>
     * Get Hotel Categories
     */
    getHotelCategoriesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotelCategories`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.HotelCategoriesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * . <p><strong>OperationId:</strong>getHotelCategories</p>
     * Get Hotel Categories
     */
    getHotelCategories(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getHotelCategoriesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get marketing cities by region. <p><strong>OperationId:</strong>getMarketingCitiesByRegion</p>
     * Get marketing cities by region
     */
    getMarketingCitiesByRegionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.regionCode !== undefined) {
                queryParameters['regionCode'] = requestParameters.regionCode;
            }
            if (requestParameters.marketingCity !== undefined) {
                queryParameters['marketingCity'] = requestParameters.marketingCity;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/marketingCitiesByRegion`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MarketingCitiesByRegionDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get marketing cities by region. <p><strong>OperationId:</strong>getMarketingCitiesByRegion</p>
     * Get marketing cities by region
     */
    getMarketingCitiesByRegion(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMarketingCitiesByRegionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Marketing Regions. <p><strong>OperationId:</strong>getMarketingRegions</p>
     * Get Marketing Regions
     */
    getMarketingRegionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/marketingRegions`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MarketingRegionsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Marketing Regions. <p><strong>OperationId:</strong>getMarketingRegions</p>
     * Get Marketing Regions
     */
    getMarketingRegions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMarketingRegionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Note Types. <p><strong>OperationId:</strong>getNoteTypes</p>
     * Get Note Types
     */
    getNoteTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.noteGroup !== undefined) {
                queryParameters['noteGroup'] = requestParameters.noteGroup;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            if (requestParameters.includeDepartmentDetails !== undefined) {
                queryParameters['includeDepartmentDetails'] = requestParameters.includeDepartmentDetails;
            }
            if (requestParameters.noteCode !== undefined) {
                queryParameters['noteCode'] = requestParameters.noteCode;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/noteTypes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.NoteTypesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Note Types. <p><strong>OperationId:</strong>getNoteTypes</p>
     * Get Note Types
     */
    getNoteTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getNoteTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Property Detail Categories. <p><strong>OperationId:</strong>getPropertyDetailCategories</p>
     * Get Property Detail Categories
     */
    getPropertyDetailCategoriesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/propertyDetailsCategories`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PropertyDetailCategoriesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Property Detail Categories. <p><strong>OperationId:</strong>getPropertyDetailCategories</p>
     * Get Property Detail Categories
     */
    getPropertyDetailCategories(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPropertyDetailCategoriesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Property Types based on search criteria such as codes, wildCard, description.  Property types are used for different hotel types i.e. Resort, Business, CityCenter, Motel, BedAndBreakfast.<p><strong>OperationId:</strong>getPropertyTypes</p>
     * Get property types
     */
    getPropertyTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/propertyTypes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PropertyTypesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Property Types based on search criteria such as codes, wildCard, description.  Property types are used for different hotel types i.e. Resort, Business, CityCenter, Motel, BedAndBreakfast.<p><strong>OperationId:</strong>getPropertyTypes</p>
     * Get property types
     */
    getPropertyTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPropertyTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to return region codes based on search criteria such as fetchInactive, codes, wildCard, description. <p><strong>OperationId:</strong>getRegionsCode</p>
     * Get Regions Code
     */
    getRegionsCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/regionCode`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RegionsCodeDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to return region codes based on search criteria such as fetchInactive, codes, wildCard, description. <p><strong>OperationId:</strong>getRegionsCode</p>
     * Get Regions Code
     */
    getRegionsCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRegionsCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get Room Amenities. <p><strong>OperationId:</strong>getRoomAmenities</p>
     * Get Room Amenities
     */
    getRoomAmenitiesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/roomAmenities`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoomAmenitiesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get Room Amenities. <p><strong>OperationId:</strong>getRoomAmenities</p>
     * Get Room Amenities
     */
    getRoomAmenities(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRoomAmenitiesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  Use this API to get Template Codes. <p><strong>OperationId:</strong>getTemplateCodes</p>
     *  Get Template Codes
     */
    getTemplateCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/templateCodes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TemplateCodesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     *  Use this API to get Template Codes. <p><strong>OperationId:</strong>getTemplateCodes</p>
     *  Get Template Codes
     */
    getTemplateCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTemplateCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get User Defined Field Groups. <p><strong>OperationId:</strong>getUserDefinedFieldGroups</p>
     * Get User Defined Field Groups
     */
    getUserDefinedFieldGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.groupCodes) {
                queryParameters['groupCodes'] = requestParameters.groupCodes;
            }
            if (requestParameters.descriptionWildCard !== undefined) {
                queryParameters['descriptionWildCard'] = requestParameters.descriptionWildCard;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/userDefinedFieldGroups`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UserDefinedFieldGroupsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get User Defined Field Groups. <p><strong>OperationId:</strong>getUserDefinedFieldGroups</p>
     * Get User Defined Field Groups
     */
    getUserDefinedFieldGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUserDefinedFieldGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to return User Defined Field (UDF) Values based on search criteria such as groupCode, valueCode, descriptionWildCard.  The LOV Group and LOV Values functionality allows a property to create a custom group of values to be used in a specified user defined field (UDF). This functionality provides added flexibility in allowing a site to track information or details that are specific to their business and outside of the standard fields offered in OPERA Cloud.<p><strong>OperationId:</strong>getUserDefinedFieldValues</p>
     * Get user defined field (UDF) values
     */
    getUserDefinedFieldValuesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.groupCode !== undefined) {
                queryParameters['groupCode'] = requestParameters.groupCode;
            }
            if (requestParameters.valueCodes) {
                queryParameters['valueCodes'] = requestParameters.valueCodes;
            }
            if (requestParameters.descriptionWildCard !== undefined) {
                queryParameters['descriptionWildCard'] = requestParameters.descriptionWildCard;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/userDefinedFieldValues`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.UserDefinedFieldValuesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to return User Defined Field (UDF) Values based on search criteria such as groupCode, valueCode, descriptionWildCard.  The LOV Group and LOV Values functionality allows a property to create a custom group of values to be used in a specified user defined field (UDF). This functionality provides added flexibility in allowing a site to track information or details that are specific to their business and outside of the standard fields offered in OPERA Cloud.<p><strong>OperationId:</strong>getUserDefinedFieldValues</p>
     * Get user defined field (UDF) values
     */
    getUserDefinedFieldValues(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUserDefinedFieldValuesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Attraction Classes. <p><strong>OperationId:</strong>postAttractionClasses</p>
     * Create Attraction Classes
     */
    postAttractionClassesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/attractionClasses`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostAttractionClassesRequestToJSON)(requestParameters.attractionClassesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Attraction Classes. <p><strong>OperationId:</strong>postAttractionClasses</p>
     * Create Attraction Classes
     */
    postAttractionClasses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postAttractionClassesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Brand Codes. <p><strong>OperationId:</strong>postBrandCodes</p>
     * Create Brand Codes
     */
    postBrandCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/brandCodes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostBrandCodesRequestToJSON)(requestParameters.brandCodesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Brand Codes. <p><strong>OperationId:</strong>postBrandCodes</p>
     * Create Brand Codes
     */
    postBrandCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postBrandCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Communication Methods Ent Details. <p><strong>OperationId:</strong>postCommunicationMethodsEntDetails</p>
     * Create Communication Methods Ent Details
     */
    postCommunicationMethodsEntDetailsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/communicationMethodsEntDetails`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostCommunicationMethodsEntDetailsRequestToJSON)(requestParameters.communicationMethodsEntDetailsCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Communication Methods Ent Details. <p><strong>OperationId:</strong>postCommunicationMethodsEntDetails</p>
     * Create Communication Methods Ent Details
     */
    postCommunicationMethodsEntDetails(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCommunicationMethodsEntDetailsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Corporate Business Units. <p><strong>OperationId:</strong>postCorporateBusinessUnits</p>
     * Create Corporate Business Units
     */
    postCorporateBusinessUnitsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/corporateBusinessUnits`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostCorporateBusinessUnitsRequestToJSON)(requestParameters.corporateBusinessUnitsCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Corporate Business Units. <p><strong>OperationId:</strong>postCorporateBusinessUnits</p>
     * Create Corporate Business Units
     */
    postCorporateBusinessUnits(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCorporateBusinessUnitsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Corporate Department Codes. <p><strong>OperationId:</strong>postCorporateDepartmentCodes</p>
     * Create Corporate Department Codes
     */
    postCorporateDepartmentCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/corporateDepartmentCodes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostCorporateDepartmentCodesRequestToJSON)(requestParameters.corporateDepartmentCodesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Corporate Department Codes. <p><strong>OperationId:</strong>postCorporateDepartmentCodes</p>
     * Create Corporate Department Codes
     */
    postCorporateDepartmentCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCorporateDepartmentCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Corporate Divisions. <p><strong>OperationId:</strong>postCorporateDivisions</p>
     * Create Corporate Divisions
     */
    postCorporateDivisionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/corporateDivisions`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostCorporateDivisionsRequestToJSON)(requestParameters.corporateDivisionsCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Corporate Divisions. <p><strong>OperationId:</strong>postCorporateDivisions</p>
     * Create Corporate Divisions
     */
    postCorporateDivisions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCorporateDivisionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Corporate Operating Units. <p><strong>OperationId:</strong>postCorporateOperatingUnits</p>
     * Create Corporate Operating Units
     */
    postCorporateOperatingUnitsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/corporateOperatingUnits`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostCorporateOperatingUnitsRequestToJSON)(requestParameters.corporateOperatingUnitsCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Corporate Operating Units. <p><strong>OperationId:</strong>postCorporateOperatingUnits</p>
     * Create Corporate Operating Units
     */
    postCorporateOperatingUnits(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCorporateOperatingUnitsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Country Guest Types. <p><strong>OperationId:</strong>postCountryGuestTypes</p>
     * Create Country Guest Types
     */
    postCountryGuestTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/countries/guestTypes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostCountryGuestTypesRequestToJSON)(requestParameters.countryGuestTypesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Country Guest Types. <p><strong>OperationId:</strong>postCountryGuestTypes</p>
     * Create Country Guest Types
     */
    postCountryGuestTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCountryGuestTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Country Main Groups. <p><strong>OperationId:</strong>postCountryMainGroups</p>
     * Create Country Main Groups
     */
    postCountryMainGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/countryMainGroups`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostCountryMainGroupsRequestToJSON)(requestParameters.countryMainGroupsCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Country Main Groups. <p><strong>OperationId:</strong>postCountryMainGroups</p>
     * Create Country Main Groups
     */
    postCountryMainGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCountryMainGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * . <p><strong>OperationId:</strong>postHotelCategories</p>
     * Create Hotel Categories
     */
    postHotelCategoriesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotelCategories`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostHotelCategoriesRequestToJSON)(requestParameters.hotelCategoriesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * . <p><strong>OperationId:</strong>postHotelCategories</p>
     * Create Hotel Categories
     */
    postHotelCategories(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postHotelCategoriesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Marketing Regions. <p><strong>OperationId:</strong>postMarketingRegions</p>
     * Create Marketing Regions
     */
    postMarketingRegionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/marketingRegions`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostMarketingRegionsRequestToJSON)(requestParameters.marketingRegionsCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Marketing Regions. <p><strong>OperationId:</strong>postMarketingRegions</p>
     * Create Marketing Regions
     */
    postMarketingRegions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postMarketingRegionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Note Types. <p><strong>OperationId:</strong>postNoteTypes</p>
     * Create Note Types
     */
    postNoteTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/noteTypes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostNoteTypesRequestToJSON)(requestParameters.noteTypesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Note Types. <p><strong>OperationId:</strong>postNoteTypes</p>
     * Create Note Types
     */
    postNoteTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postNoteTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Property Detail Categories. <p><strong>OperationId:</strong>postPropertyDetailCategories</p>
     * Create Property Detail Categories
     */
    postPropertyDetailCategoriesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/propertyDetailsCategories`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostPropertyDetailCategoriesRequestToJSON)(requestParameters.propertyDetailCategoriesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Property Detail Categories. <p><strong>OperationId:</strong>postPropertyDetailCategories</p>
     * Create Property Detail Categories
     */
    postPropertyDetailCategories(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postPropertyDetailCategoriesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Property Types. <p><strong>OperationId:</strong>postPropertyTypes</p>
     * Create Property Types
     */
    postPropertyTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/propertyTypes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostPropertyTypesRequestToJSON)(requestParameters.propertyTypesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Property Types. <p><strong>OperationId:</strong>postPropertyTypes</p>
     * Create Property Types
     */
    postPropertyTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postPropertyTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create region codes. <p><strong>OperationId:</strong>postRegionsCode</p>
     * Create Regions Code
     */
    postRegionsCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/regionCode`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostRegionsCodeRequestToJSON)(requestParameters.regionsCodeCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create region codes. <p><strong>OperationId:</strong>postRegionsCode</p>
     * Create Regions Code
     */
    postRegionsCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postRegionsCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Room Amenities. <p><strong>OperationId:</strong>postRoomAmenities</p>
     * Create Room Amenities
     */
    postRoomAmenitiesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/roomAmenities`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostRoomAmenitiesRequestToJSON)(requestParameters.roomAmenitiesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Room Amenities. <p><strong>OperationId:</strong>postRoomAmenities</p>
     * Create Room Amenities
     */
    postRoomAmenities(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postRoomAmenitiesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create Template Codes. <p><strong>OperationId:</strong>postTemplateCodes</p>
     * Create Template Codes
     */
    postTemplateCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/templateCodes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostTemplateCodesRequestToJSON)(requestParameters.templateCodesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create Template Codes. <p><strong>OperationId:</strong>postTemplateCodes</p>
     * Create Template Codes
     */
    postTemplateCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postTemplateCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create User Defined Field Groups. <p><strong>OperationId:</strong>postUserDefinedFieldGroups</p>
     * Create User Defined Field Groups
     */
    postUserDefinedFieldGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/userDefinedFieldGroups`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostUserDefinedFieldGroupsRequestToJSON)(requestParameters.userDefinedFieldGroupsCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create User Defined Field Groups. <p><strong>OperationId:</strong>postUserDefinedFieldGroups</p>
     * Create User Defined Field Groups
     */
    postUserDefinedFieldGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postUserDefinedFieldGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create a new User Defined Field (UDF) Value. The LOV Group and LOV Values functionality allows a property create a custom group of values to be used in a specified user defined field (UDF).  This functionality provides added flexibility in allowing a site to track information or details that are specific to their business and outside of the standard fields offered in the OPERA Cloud. <p><strong>OperationId:</strong>postUserDefinedFieldValues</p>
     * Create User Defined Field (UDF) Values
     */
    postUserDefinedFieldValuesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/userDefinedFieldValues`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PostUserDefinedFieldValuesRequestToJSON)(requestParameters.userDefinedFieldValuesCriteria),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create a new User Defined Field (UDF) Value. The LOV Group and LOV Values functionality allows a property create a custom group of values to be used in a specified user defined field (UDF).  This functionality provides added flexibility in allowing a site to track information or details that are specific to their business and outside of the standard fields offered in the OPERA Cloud. <p><strong>OperationId:</strong>postUserDefinedFieldValues</p>
     * Create User Defined Field (UDF) Values
     */
    postUserDefinedFieldValues(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postUserDefinedFieldValuesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Attraction Classes. <p><strong>OperationId:</strong>putAttractionClasses</p>
     * Change Attraction Classes
     */
    putAttractionClassesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/attractionClasses/{attractionClassCode}`.replace(`{${"attractionClassCode"}}`, encodeURIComponent(String(requestParameters.attractionClassCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutAttractionClassesRequestToJSON)(requestParameters.attractionClassesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Attraction Classes. <p><strong>OperationId:</strong>putAttractionClasses</p>
     * Change Attraction Classes
     */
    putAttractionClasses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putAttractionClassesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Chain. <p><strong>OperationId:</strong>putChain</p>
     * Change Chain
     */
    putChainRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/chain/{chainCode}`.replace(`{${"chainCode"}}`, encodeURIComponent(String(requestParameters.chainCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutChainRequestToJSON)(requestParameters.chainToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Chain. <p><strong>OperationId:</strong>putChain</p>
     * Change Chain
     */
    putChain(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putChainRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Communication Methods Ent Details. <p><strong>OperationId:</strong>putCommunicationMethodsEntDetails</p>
     * Change Communication Methods Ent Details
     */
    putCommunicationMethodsEntDetailsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/communicationMethodsEntDetails/{communicationMethodsEntDetailsId}`.replace(`{${"communicationMethodsEntDetailsId"}}`, encodeURIComponent(String(requestParameters.communicationMethodsEntDetailsId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutCommunicationMethodsEntDetailsRequestToJSON)(requestParameters.communicationMethodsEntDetailsToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Communication Methods Ent Details. <p><strong>OperationId:</strong>putCommunicationMethodsEntDetails</p>
     * Change Communication Methods Ent Details
     */
    putCommunicationMethodsEntDetails(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putCommunicationMethodsEntDetailsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Marketing Regions. <p><strong>OperationId:</strong>putMarketingRegions</p>
     * Change Marketing Regions
     */
    putMarketingRegionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/marketingRegions/{marketingRegionCode}`.replace(`{${"marketingRegionCode"}}`, encodeURIComponent(String(requestParameters.marketingRegionCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutMarketingRegionsRequestToJSON)(requestParameters.marketingRegionsToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Marketing Regions. <p><strong>OperationId:</strong>putMarketingRegions</p>
     * Change Marketing Regions
     */
    putMarketingRegions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putMarketingRegionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Property Types. <p><strong>OperationId:</strong>putPropertyTypes</p>
     * Change Property Types
     */
    putPropertyTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/propertyTypes/{propertyTypeCode}`.replace(`{${"propertyTypeCode"}}`, encodeURIComponent(String(requestParameters.propertyTypeCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutPropertyTypesRequestToJSON)(requestParameters.propertyTypesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Property Types. <p><strong>OperationId:</strong>putPropertyTypes</p>
     * Change Property Types
     */
    putPropertyTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putPropertyTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update Room Amenities. <p><strong>OperationId:</strong>putRoomAmenities</p>
     * Change Room Amenities
     */
    putRoomAmenitiesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/roomAmenities/{roomAmenitiesId}`.replace(`{${"roomAmenitiesId"}}`, encodeURIComponent(String(requestParameters.roomAmenitiesId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PutRoomAmenitiesRequestToJSON)(requestParameters.roomAmenitiesToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update Room Amenities. <p><strong>OperationId:</strong>putRoomAmenities</p>
     * Change Room Amenities
     */
    putRoomAmenities(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putRoomAmenitiesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete brand codes based on brandCode, brandCodesCodes. Brand codes are used for different hotel brands within a hotel corporation. <p><strong>OperationId:</strong>removeBrandCodes</p>
     * Delete Brand Code
     */
    removeBrandCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.brandCodesCodes) {
                queryParameters['brandCodesCodes'] = requestParameters.brandCodesCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/brandCodes/{brandCode}`.replace(`{${"brandCode"}}`, encodeURIComponent(String(requestParameters.brandCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete brand codes based on brandCode, brandCodesCodes. Brand codes are used for different hotel brands within a hotel corporation. <p><strong>OperationId:</strong>removeBrandCodes</p>
     * Delete Brand Code
     */
    removeBrandCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeBrandCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete Corporate Business Units. <p><strong>OperationId:</strong>removeCorporateBusinessUnits</p>
     * Delete Corporate Business Units
     */
    removeCorporateBusinessUnitsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.corporateBusinessUnitsCodes) {
                queryParameters['corporateBusinessUnitsCodes'] = requestParameters.corporateBusinessUnitsCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/corporateBusinessUnits/{businessUnitCode}`.replace(`{${"businessUnitCode"}}`, encodeURIComponent(String(requestParameters.businessUnitCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete Corporate Business Units. <p><strong>OperationId:</strong>removeCorporateBusinessUnits</p>
     * Delete Corporate Business Units
     */
    removeCorporateBusinessUnits(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeCorporateBusinessUnitsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete corporate department codes based on departmentCode. <p><strong>OperationId:</strong>removeCorporateDepartmentCodes</p>
     * Delete Corporate Department Codes
     */
    removeCorporateDepartmentCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/corporateDepartmentCodes/{departmentCode}`.replace(`{${"departmentCode"}}`, encodeURIComponent(String(requestParameters.departmentCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete corporate department codes based on departmentCode. <p><strong>OperationId:</strong>removeCorporateDepartmentCodes</p>
     * Delete Corporate Department Codes
     */
    removeCorporateDepartmentCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeCorporateDepartmentCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete corporate divisions based on divisionCode, corporateDivisionsCodes. <p><strong>OperationId:</strong>removeCorporateDivisions</p>
     * Delete Corporate Divisions
     */
    removeCorporateDivisionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.corporateDivisionsCodes) {
                queryParameters['corporateDivisionsCodes'] = requestParameters.corporateDivisionsCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/corporateDivisions/{divisionCode}`.replace(`{${"divisionCode"}}`, encodeURIComponent(String(requestParameters.divisionCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete corporate divisions based on divisionCode, corporateDivisionsCodes. <p><strong>OperationId:</strong>removeCorporateDivisions</p>
     * Delete Corporate Divisions
     */
    removeCorporateDivisions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeCorporateDivisionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete corporate operating units based on operatingUnitCode, corporateOperatingUnitsCodes. <p><strong>OperationId:</strong>removeCorporateOperatingUnits</p>
     * Delete Corporate Operating Units
     */
    removeCorporateOperatingUnitsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.corporateOperatingUnitsCodes) {
                queryParameters['corporateOperatingUnitsCodes'] = requestParameters.corporateOperatingUnitsCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/corporateOperatingUnits/{operatingUnitCode}`.replace(`{${"operatingUnitCode"}}`, encodeURIComponent(String(requestParameters.operatingUnitCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete corporate operating units based on operatingUnitCode, corporateOperatingUnitsCodes. <p><strong>OperationId:</strong>removeCorporateOperatingUnits</p>
     * Delete Corporate Operating Units
     */
    removeCorporateOperatingUnits(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeCorporateOperatingUnitsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete country guest types based on guestTypeCode, countryGuestTypesCodes. <p><strong>OperationId:</strong>removeCountryGuestTypes</p>
     * Delete Country Guest Types
     */
    removeCountryGuestTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.countryGuestTypesCodes) {
                queryParameters['countryGuestTypesCodes'] = requestParameters.countryGuestTypesCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/countries/guestTypes/{guestTypeCode}`.replace(`{${"guestTypeCode"}}`, encodeURIComponent(String(requestParameters.guestTypeCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete country guest types based on guestTypeCode, countryGuestTypesCodes. <p><strong>OperationId:</strong>removeCountryGuestTypes</p>
     * Delete Country Guest Types
     */
    removeCountryGuestTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeCountryGuestTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete country main groups based on groupCode, countryMainGroupsCodes. <p><strong>OperationId:</strong>removeCountryMainGroups</p>
     * Delete Country Main Groups
     */
    removeCountryMainGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.countryMainGroupsCodes) {
                queryParameters['countryMainGroupsCodes'] = requestParameters.countryMainGroupsCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/countryMainGroups/{groupCode}`.replace(`{${"groupCode"}}`, encodeURIComponent(String(requestParameters.groupCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete country main groups based on groupCode, countryMainGroupsCodes. <p><strong>OperationId:</strong>removeCountryMainGroups</p>
     * Delete Country Main Groups
     */
    removeCountryMainGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeCountryMainGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete hotel categories based on categoryCode. <p><strong>OperationId:</strong>removeHotelCategories</p>
     * Delete Hotel Categories
     */
    removeHotelCategoriesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotelCategories/{categoryCode}`.replace(`{${"categoryCode"}}`, encodeURIComponent(String(requestParameters.categoryCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete hotel categories based on categoryCode. <p><strong>OperationId:</strong>removeHotelCategories</p>
     * Delete Hotel Categories
     */
    removeHotelCategories(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeHotelCategoriesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete note types based on noteTypeCode, noteGroup. <p><strong>OperationId:</strong>removeNoteTypes</p>
     * Delete Note Types
     */
    removeNoteTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.noteGroup !== undefined) {
                queryParameters['noteGroup'] = requestParameters.noteGroup;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/noteTypes/{noteTypeCode}`.replace(`{${"noteTypeCode"}}`, encodeURIComponent(String(requestParameters.noteTypeCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete note types based on noteTypeCode, noteGroup. <p><strong>OperationId:</strong>removeNoteTypes</p>
     * Delete Note Types
     */
    removeNoteTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeNoteTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete property detail categories based on categoryCode, propertyDetailCategoriesCodes. <p><strong>OperationId:</strong>removePropertyDetailCategories</p>
     * Delete Property Detail Categories
     */
    removePropertyDetailCategoriesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.propertyDetailCategoriesCodes) {
                queryParameters['propertyDetailCategoriesCodes'] = requestParameters.propertyDetailCategoriesCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/propertyDetailsCategories/{categoryCode}`.replace(`{${"categoryCode"}}`, encodeURIComponent(String(requestParameters.categoryCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete property detail categories based on categoryCode, propertyDetailCategoriesCodes. <p><strong>OperationId:</strong>removePropertyDetailCategories</p>
     * Delete Property Detail Categories
     */
    removePropertyDetailCategories(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removePropertyDetailCategoriesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete region codes based on regionCode. <p><strong>OperationId:</strong>removeRegionsCode</p>
     * Delete Regions Code
     */
    removeRegionsCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/regionCode/{regionCode}`.replace(`{${"regionCode"}}`, encodeURIComponent(String(requestParameters.regionCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete region codes based on regionCode. <p><strong>OperationId:</strong>removeRegionsCode</p>
     * Delete Regions Code
     */
    removeRegionsCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeRegionsCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete template codes based on code, templateCodes. <p><strong>OperationId:</strong>removeTemplateCodes</p>
     * Delete Template Codes
     */
    removeTemplateCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.templateCodes) {
                queryParameters['templateCodes'] = requestParameters.templateCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/templateCodes/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete template codes based on code, templateCodes. <p><strong>OperationId:</strong>removeTemplateCodes</p>
     * Delete Template Codes
     */
    removeTemplateCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeTemplateCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete user defined field groups based on udfGroupCode. <p><strong>OperationId:</strong>removeUserDefinedFieldGroups</p>
     * Delete User Defined Field Groups
     */
    removeUserDefinedFieldGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/userDefinedFieldGroups/{udfGroupCode}`.replace(`{${"udfGroupCode"}}`, encodeURIComponent(String(requestParameters.udfGroupCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete user defined field groups based on udfGroupCode. <p><strong>OperationId:</strong>removeUserDefinedFieldGroups</p>
     * Delete User Defined Field Groups
     */
    removeUserDefinedFieldGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeUserDefinedFieldGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete user defined field values based on udfValue, groupCode. The LOV group and LOV values functionality allows a property create a custom group of values to be used in a specified user defined field (UDF). This functionality provides added flexibility in allowing a site to track information or details that are specific to their business and outside of the standard fields offered in the OPERA Cloud. <p><strong>OperationId:</strong>removeUserDefinedFieldValues</p>
     * Delete a User Defined Field Value
     */
    removeUserDefinedFieldValuesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.groupCode !== undefined) {
                queryParameters['groupCode'] = requestParameters.groupCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/userDefinedFieldValues/{udfValue}`.replace(`{${"udfValue"}}`, encodeURIComponent(String(requestParameters.udfValue))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete user defined field values based on udfValue, groupCode. The LOV group and LOV values functionality allows a property create a custom group of values to be used in a specified user defined field (UDF). This functionality provides added flexibility in allowing a site to track information or details that are specific to their business and outside of the standard fields offered in the OPERA Cloud. <p><strong>OperationId:</strong>removeUserDefinedFieldValues</p>
     * Delete a User Defined Field Value
     */
    removeUserDefinedFieldValues(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeUserDefinedFieldValuesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.ChainConfigApi = ChainConfigApi;
