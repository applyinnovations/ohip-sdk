/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AttractionClassesDetails,
  BrandCodesDetails,
  ChainDetails,
  ChangeBrandCodesRequest,
  ChangeCorporateBusinessUnitsRequest,
  ChangeCorporateDepartmentCodesRequest,
  ChangeCorporateDivisionsRequest,
  ChangeCorporateOperatingUnitsRequest,
  ChangeCountryGuestTypesRequest,
  ChangeCountryMainGroupsRequest,
  ChangeHotelCategoriesRequest,
  ChangeNoteTypesRequest,
  ChangePropertyDetailCategoriesRequest,
  ChangeRegionsCodeRequest,
  ChangeTemplateCodesRequest,
  ChangeUserDefinedFieldGroupsRequest,
  ChangeUserDefinedFieldValuesRequest,
  CommunicationMethodsEntDetailsDetails,
  CorporateBusinessUnitsDetails,
  CorporateDepartmentCodesDetails,
  CorporateDivisionsDetails,
  CorporateOperatingUnitsDetails,
  CountryGuestTypesDetails,
  CountryMainGroupsDetails,
  DefaultNoteDetails,
  ExceptionDetailType,
  HotelCategoriesDetails,
  MarketingCitiesByRegionDetails,
  MarketingRegionsDetails,
  NoteTypesDetails,
  PostAttractionClassesRequest,
  PostBrandCodesRequest,
  PostCommunicationMethodsEntDetailsRequest,
  PostCorporateBusinessUnitsRequest,
  PostCorporateDepartmentCodesRequest,
  PostCorporateDivisionsRequest,
  PostCorporateOperatingUnitsRequest,
  PostCountryGuestTypesRequest,
  PostCountryMainGroupsRequest,
  PostHotelCategoriesRequest,
  PostMarketingRegionsRequest,
  PostNoteTypesRequest,
  PostPropertyDetailCategoriesRequest,
  PostPropertyTypesRequest,
  PostRegionsCodeRequest,
  PostRoomAmenitiesRequest,
  PostTemplateCodesRequest,
  PostUserDefinedFieldGroupsRequest,
  PostUserDefinedFieldValuesRequest,
  PropertyDetailCategoriesDetails,
  PropertyTypesDetails,
  PutAttractionClassesRequest,
  PutChainRequest,
  PutCommunicationMethodsEntDetailsRequest,
  PutMarketingRegionsRequest,
  PutPropertyTypesRequest,
  PutRoomAmenitiesRequest,
  RegionsCodeDetails,
  RoomAmenitiesDetails,
  Status,
  TemplateCodesDetails,
  UserDefinedFieldGroupsDetails,
  UserDefinedFieldValuesDetails,
} from '../models';
import {
    AttractionClassesDetailsFromJSON,
    AttractionClassesDetailsToJSON,
    BrandCodesDetailsFromJSON,
    BrandCodesDetailsToJSON,
    ChainDetailsFromJSON,
    ChainDetailsToJSON,
    ChangeBrandCodesRequestFromJSON,
    ChangeBrandCodesRequestToJSON,
    ChangeCorporateBusinessUnitsRequestFromJSON,
    ChangeCorporateBusinessUnitsRequestToJSON,
    ChangeCorporateDepartmentCodesRequestFromJSON,
    ChangeCorporateDepartmentCodesRequestToJSON,
    ChangeCorporateDivisionsRequestFromJSON,
    ChangeCorporateDivisionsRequestToJSON,
    ChangeCorporateOperatingUnitsRequestFromJSON,
    ChangeCorporateOperatingUnitsRequestToJSON,
    ChangeCountryGuestTypesRequestFromJSON,
    ChangeCountryGuestTypesRequestToJSON,
    ChangeCountryMainGroupsRequestFromJSON,
    ChangeCountryMainGroupsRequestToJSON,
    ChangeHotelCategoriesRequestFromJSON,
    ChangeHotelCategoriesRequestToJSON,
    ChangeNoteTypesRequestFromJSON,
    ChangeNoteTypesRequestToJSON,
    ChangePropertyDetailCategoriesRequestFromJSON,
    ChangePropertyDetailCategoriesRequestToJSON,
    ChangeRegionsCodeRequestFromJSON,
    ChangeRegionsCodeRequestToJSON,
    ChangeTemplateCodesRequestFromJSON,
    ChangeTemplateCodesRequestToJSON,
    ChangeUserDefinedFieldGroupsRequestFromJSON,
    ChangeUserDefinedFieldGroupsRequestToJSON,
    ChangeUserDefinedFieldValuesRequestFromJSON,
    ChangeUserDefinedFieldValuesRequestToJSON,
    CommunicationMethodsEntDetailsDetailsFromJSON,
    CommunicationMethodsEntDetailsDetailsToJSON,
    CorporateBusinessUnitsDetailsFromJSON,
    CorporateBusinessUnitsDetailsToJSON,
    CorporateDepartmentCodesDetailsFromJSON,
    CorporateDepartmentCodesDetailsToJSON,
    CorporateDivisionsDetailsFromJSON,
    CorporateDivisionsDetailsToJSON,
    CorporateOperatingUnitsDetailsFromJSON,
    CorporateOperatingUnitsDetailsToJSON,
    CountryGuestTypesDetailsFromJSON,
    CountryGuestTypesDetailsToJSON,
    CountryMainGroupsDetailsFromJSON,
    CountryMainGroupsDetailsToJSON,
    DefaultNoteDetailsFromJSON,
    DefaultNoteDetailsToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    HotelCategoriesDetailsFromJSON,
    HotelCategoriesDetailsToJSON,
    MarketingCitiesByRegionDetailsFromJSON,
    MarketingCitiesByRegionDetailsToJSON,
    MarketingRegionsDetailsFromJSON,
    MarketingRegionsDetailsToJSON,
    NoteTypesDetailsFromJSON,
    NoteTypesDetailsToJSON,
    PostAttractionClassesRequestFromJSON,
    PostAttractionClassesRequestToJSON,
    PostBrandCodesRequestFromJSON,
    PostBrandCodesRequestToJSON,
    PostCommunicationMethodsEntDetailsRequestFromJSON,
    PostCommunicationMethodsEntDetailsRequestToJSON,
    PostCorporateBusinessUnitsRequestFromJSON,
    PostCorporateBusinessUnitsRequestToJSON,
    PostCorporateDepartmentCodesRequestFromJSON,
    PostCorporateDepartmentCodesRequestToJSON,
    PostCorporateDivisionsRequestFromJSON,
    PostCorporateDivisionsRequestToJSON,
    PostCorporateOperatingUnitsRequestFromJSON,
    PostCorporateOperatingUnitsRequestToJSON,
    PostCountryGuestTypesRequestFromJSON,
    PostCountryGuestTypesRequestToJSON,
    PostCountryMainGroupsRequestFromJSON,
    PostCountryMainGroupsRequestToJSON,
    PostHotelCategoriesRequestFromJSON,
    PostHotelCategoriesRequestToJSON,
    PostMarketingRegionsRequestFromJSON,
    PostMarketingRegionsRequestToJSON,
    PostNoteTypesRequestFromJSON,
    PostNoteTypesRequestToJSON,
    PostPropertyDetailCategoriesRequestFromJSON,
    PostPropertyDetailCategoriesRequestToJSON,
    PostPropertyTypesRequestFromJSON,
    PostPropertyTypesRequestToJSON,
    PostRegionsCodeRequestFromJSON,
    PostRegionsCodeRequestToJSON,
    PostRoomAmenitiesRequestFromJSON,
    PostRoomAmenitiesRequestToJSON,
    PostTemplateCodesRequestFromJSON,
    PostTemplateCodesRequestToJSON,
    PostUserDefinedFieldGroupsRequestFromJSON,
    PostUserDefinedFieldGroupsRequestToJSON,
    PostUserDefinedFieldValuesRequestFromJSON,
    PostUserDefinedFieldValuesRequestToJSON,
    PropertyDetailCategoriesDetailsFromJSON,
    PropertyDetailCategoriesDetailsToJSON,
    PropertyTypesDetailsFromJSON,
    PropertyTypesDetailsToJSON,
    PutAttractionClassesRequestFromJSON,
    PutAttractionClassesRequestToJSON,
    PutChainRequestFromJSON,
    PutChainRequestToJSON,
    PutCommunicationMethodsEntDetailsRequestFromJSON,
    PutCommunicationMethodsEntDetailsRequestToJSON,
    PutMarketingRegionsRequestFromJSON,
    PutMarketingRegionsRequestToJSON,
    PutPropertyTypesRequestFromJSON,
    PutPropertyTypesRequestToJSON,
    PutRoomAmenitiesRequestFromJSON,
    PutRoomAmenitiesRequestToJSON,
    RegionsCodeDetailsFromJSON,
    RegionsCodeDetailsToJSON,
    RoomAmenitiesDetailsFromJSON,
    RoomAmenitiesDetailsToJSON,
    StatusFromJSON,
    StatusToJSON,
    TemplateCodesDetailsFromJSON,
    TemplateCodesDetailsToJSON,
    UserDefinedFieldGroupsDetailsFromJSON,
    UserDefinedFieldGroupsDetailsToJSON,
    UserDefinedFieldValuesDetailsFromJSON,
    UserDefinedFieldValuesDetailsToJSON,
} from '../models';

export interface ChangeBrandCodesOperationRequest {
    brandCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    brandCodesToBeChanged?: ChangeBrandCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeCorporateBusinessUnitsOperationRequest {
    businessUnitCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    corporateBusinessUnitsToBeChanged?: ChangeCorporateBusinessUnitsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeCorporateDepartmentCodesOperationRequest {
    departmentCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    corporateDepartmentCodesToBeChanged?: ChangeCorporateDepartmentCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeCorporateDivisionsOperationRequest {
    divisionCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    corporateDivisionsToBeChanged?: ChangeCorporateDivisionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeCorporateOperatingUnitsOperationRequest {
    operatingUnitCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    corporateOperatingUnitsToBeChanged?: ChangeCorporateOperatingUnitsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeCountryGuestTypesOperationRequest {
    guestTypeCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    countryGuestTypesToBeChanged?: ChangeCountryGuestTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeCountryMainGroupsOperationRequest {
    groupCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    countryMainGroupsToBeChanged?: ChangeCountryMainGroupsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeHotelCategoriesOperationRequest {
    categoryCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelCategoriesToBeChanged?: ChangeHotelCategoriesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeNoteTypesOperationRequest {
    noteTypeCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    noteTypesToBeChanged?: ChangeNoteTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangePropertyDetailCategoriesOperationRequest {
    categoryCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    propertyDetailCategoriesToBeChanged?: ChangePropertyDetailCategoriesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeRegionsCodeOperationRequest {
    regionCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    regionsCodeToBeChanged?: ChangeRegionsCodeRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTemplateCodesOperationRequest {
    code?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateCodesToBeChanged?: ChangeTemplateCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeUserDefinedFieldGroupsOperationRequest {
    udfGroupCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    userDefinedFieldGroupsToBeChanged?: ChangeUserDefinedFieldGroupsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeUserDefinedFieldValuesOperationRequest {
    udfValue?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    userDefinedFieldValuesToBeChanged?: ChangeUserDefinedFieldValuesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAttractionClassesRequest {
    attractionClassCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCommunicationMethodsEntDetailsRequest {
    communicationMethodsEntDetailsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    communicationMethodsEntDetailsCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteMarketingRegionsRequest {
    marketingRegionCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    marketingRegionsCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeletePropertyTypesRequest {
    propertyTypeCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    propertyTypesCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRoomAmenitiesRequest {
    roomAmenitiesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomAmenitiesCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAttractionClassesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBrandCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChainRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    enforceSecurity?: boolean;
    includeActive?: boolean;
    includeInactive?: boolean;
    limit?: number;
    chainCodes?: Array<string>;
    chainName?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCommunicationMethodsEntDetailsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCorporateBusinessUnitsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCorporateDepartmentCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCorporateDivisionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCorporateOperatingUnitsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCountryGuestTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCountryMainGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDefaultNoteRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    noteType?: string;
    noteCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelCategoriesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMarketingCitiesByRegionRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    regionCode?: string;
    marketingCity?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMarketingRegionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetNoteTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    noteGroup?: string;
    includeInactive?: boolean;
    includeDepartmentDetails?: boolean;
    noteCode?: string;
    codes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPropertyDetailCategoriesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPropertyTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRegionsCodeRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomAmenitiesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUserDefinedFieldGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    groupCodes?: Array<string>;
    descriptionWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUserDefinedFieldValuesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    groupCode?: string;
    valueCodes?: Array<string>;
    descriptionWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAttractionClassesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    attractionClassesCriteria?: PostAttractionClassesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBrandCodesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    brandCodesCriteria?: PostBrandCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCommunicationMethodsEntDetailsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    communicationMethodsEntDetailsCriteria?: PostCommunicationMethodsEntDetailsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCorporateBusinessUnitsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    corporateBusinessUnitsCriteria?: PostCorporateBusinessUnitsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCorporateDepartmentCodesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    corporateDepartmentCodesCriteria?: PostCorporateDepartmentCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCorporateDivisionsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    corporateDivisionsCriteria?: PostCorporateDivisionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCorporateOperatingUnitsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    corporateOperatingUnitsCriteria?: PostCorporateOperatingUnitsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCountryGuestTypesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    countryGuestTypesCriteria?: PostCountryGuestTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCountryMainGroupsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    countryMainGroupsCriteria?: PostCountryMainGroupsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostHotelCategoriesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelCategoriesCriteria?: PostHotelCategoriesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMarketingRegionsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    marketingRegionsCriteria?: PostMarketingRegionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostNoteTypesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    noteTypesCriteria?: PostNoteTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPropertyDetailCategoriesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    propertyDetailCategoriesCriteria?: PostPropertyDetailCategoriesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPropertyTypesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    propertyTypesCriteria?: PostPropertyTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRegionsCodeOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    regionsCodeCriteria?: PostRegionsCodeRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRoomAmenitiesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomAmenitiesCriteria?: PostRoomAmenitiesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateCodesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateCodesCriteria?: PostTemplateCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostUserDefinedFieldGroupsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    userDefinedFieldGroupsCriteria?: PostUserDefinedFieldGroupsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostUserDefinedFieldValuesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    userDefinedFieldValuesCriteria?: PostUserDefinedFieldValuesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAttractionClassesOperationRequest {
    attractionClassCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    attractionClassesToBeChanged?: PutAttractionClassesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutChainOperationRequest {
    chainCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    chainToBeChanged?: PutChainRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCommunicationMethodsEntDetailsOperationRequest {
    communicationMethodsEntDetailsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    communicationMethodsEntDetailsToBeChanged?: PutCommunicationMethodsEntDetailsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutMarketingRegionsOperationRequest {
    marketingRegionCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    marketingRegionsToBeChanged?: PutMarketingRegionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutPropertyTypesOperationRequest {
    propertyTypeCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    propertyTypesToBeChanged?: PutPropertyTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoomAmenitiesOperationRequest {
    roomAmenitiesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomAmenitiesToBeChanged?: PutRoomAmenitiesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveBrandCodesRequest {
    brandCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    brandCodesCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveCorporateBusinessUnitsRequest {
    businessUnitCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    corporateBusinessUnitsCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveCorporateDepartmentCodesRequest {
    departmentCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveCorporateDivisionsRequest {
    divisionCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    corporateDivisionsCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveCorporateOperatingUnitsRequest {
    operatingUnitCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    corporateOperatingUnitsCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveCountryGuestTypesRequest {
    guestTypeCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    countryGuestTypesCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveCountryMainGroupsRequest {
    groupCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    countryMainGroupsCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveHotelCategoriesRequest {
    categoryCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveNoteTypesRequest {
    noteTypeCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    noteGroup?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemovePropertyDetailCategoriesRequest {
    categoryCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    propertyDetailCategoriesCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveRegionsCodeRequest {
    regionCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTemplateCodesRequest {
    code?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveUserDefinedFieldGroupsRequest {
    udfGroupCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveUserDefinedFieldValuesRequest {
    udfValue?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    groupCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ChainConfigApi extends runtime.BaseAPI {

    /**
     * Use this API to update brand codes based on brandCode, brandCodesToBeChanged. Brand codes are used for different hotel brands within a hotel corporation. <p><strong>OperationId:</strong>changeBrandCodes</p>
     * Change Brand Code
     */
    async changeBrandCodesRaw(requestParameters: ChangeBrandCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/brandCodes/{brandCode}`.replace(`{${"brandCode"}}`, encodeURIComponent(String(requestParameters.brandCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeBrandCodesRequestToJSON(requestParameters.brandCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update brand codes based on brandCode, brandCodesToBeChanged. Brand codes are used for different hotel brands within a hotel corporation. <p><strong>OperationId:</strong>changeBrandCodes</p>
     * Change Brand Code
     */
    async changeBrandCodes(requestParameters: ChangeBrandCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeBrandCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Corporate Business Units based on businessUnitCode, corporateBusinessUnitsToBeChanged. <p><strong>OperationId:</strong>changeCorporateBusinessUnits</p>
     * Change Corporate Business Units
     */
    async changeCorporateBusinessUnitsRaw(requestParameters: ChangeCorporateBusinessUnitsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/corporateBusinessUnits/{businessUnitCode}`.replace(`{${"businessUnitCode"}}`, encodeURIComponent(String(requestParameters.businessUnitCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeCorporateBusinessUnitsRequestToJSON(requestParameters.corporateBusinessUnitsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Corporate Business Units based on businessUnitCode, corporateBusinessUnitsToBeChanged. <p><strong>OperationId:</strong>changeCorporateBusinessUnits</p>
     * Change Corporate Business Units
     */
    async changeCorporateBusinessUnits(requestParameters: ChangeCorporateBusinessUnitsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeCorporateBusinessUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update corporate department codes based on departmentCode, corporateDepartmentCodesToBeChanged. <p><strong>OperationId:</strong>changeCorporateDepartmentCodes</p>
     * Change Corporate Department Codes
     */
    async changeCorporateDepartmentCodesRaw(requestParameters: ChangeCorporateDepartmentCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/corporateDepartmentCodes/{departmentCode}`.replace(`{${"departmentCode"}}`, encodeURIComponent(String(requestParameters.departmentCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeCorporateDepartmentCodesRequestToJSON(requestParameters.corporateDepartmentCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update corporate department codes based on departmentCode, corporateDepartmentCodesToBeChanged. <p><strong>OperationId:</strong>changeCorporateDepartmentCodes</p>
     * Change Corporate Department Codes
     */
    async changeCorporateDepartmentCodes(requestParameters: ChangeCorporateDepartmentCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeCorporateDepartmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update corporate divisions based on divisionCode, corporateDivisionsToBeChanged. <p><strong>OperationId:</strong>changeCorporateDivisions</p>
     * Change Corporate Divisions
     */
    async changeCorporateDivisionsRaw(requestParameters: ChangeCorporateDivisionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/corporateDivisions/{divisionCode}`.replace(`{${"divisionCode"}}`, encodeURIComponent(String(requestParameters.divisionCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeCorporateDivisionsRequestToJSON(requestParameters.corporateDivisionsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update corporate divisions based on divisionCode, corporateDivisionsToBeChanged. <p><strong>OperationId:</strong>changeCorporateDivisions</p>
     * Change Corporate Divisions
     */
    async changeCorporateDivisions(requestParameters: ChangeCorporateDivisionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeCorporateDivisionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update corporate operating units based on operatingUnitCode, corporateOperatingUnitsToBeChanged. <p><strong>OperationId:</strong>changeCorporateOperatingUnits</p>
     * Change Corporate Operating Units
     */
    async changeCorporateOperatingUnitsRaw(requestParameters: ChangeCorporateOperatingUnitsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/corporateOperatingUnits/{operatingUnitCode}`.replace(`{${"operatingUnitCode"}}`, encodeURIComponent(String(requestParameters.operatingUnitCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeCorporateOperatingUnitsRequestToJSON(requestParameters.corporateOperatingUnitsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update corporate operating units based on operatingUnitCode, corporateOperatingUnitsToBeChanged. <p><strong>OperationId:</strong>changeCorporateOperatingUnits</p>
     * Change Corporate Operating Units
     */
    async changeCorporateOperatingUnits(requestParameters: ChangeCorporateOperatingUnitsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeCorporateOperatingUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update country guest types based on guestTypeCode, countryGuestTypesToBeChanged. <p><strong>OperationId:</strong>changeCountryGuestTypes</p>
     * Change Country Guest Types
     */
    async changeCountryGuestTypesRaw(requestParameters: ChangeCountryGuestTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/countries/guestTypes/{guestTypeCode}`.replace(`{${"guestTypeCode"}}`, encodeURIComponent(String(requestParameters.guestTypeCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeCountryGuestTypesRequestToJSON(requestParameters.countryGuestTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update country guest types based on guestTypeCode, countryGuestTypesToBeChanged. <p><strong>OperationId:</strong>changeCountryGuestTypes</p>
     * Change Country Guest Types
     */
    async changeCountryGuestTypes(requestParameters: ChangeCountryGuestTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeCountryGuestTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update country main groups based on groupCode, countryMainGroupsToBeChanged. <p><strong>OperationId:</strong>changeCountryMainGroups</p>
     * Change Country Main Groups
     */
    async changeCountryMainGroupsRaw(requestParameters: ChangeCountryMainGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/countryMainGroups/{groupCode}`.replace(`{${"groupCode"}}`, encodeURIComponent(String(requestParameters.groupCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeCountryMainGroupsRequestToJSON(requestParameters.countryMainGroupsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update country main groups based on groupCode, countryMainGroupsToBeChanged. <p><strong>OperationId:</strong>changeCountryMainGroups</p>
     * Change Country Main Groups
     */
    async changeCountryMainGroups(requestParameters: ChangeCountryMainGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeCountryMainGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update hotel categories based on categoryCode, hotelCategoriesToBeChanged. <p><strong>OperationId:</strong>changeHotelCategories</p>
     * Change Hotel Categories
     */
    async changeHotelCategoriesRaw(requestParameters: ChangeHotelCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelCategories/{categoryCode}`.replace(`{${"categoryCode"}}`, encodeURIComponent(String(requestParameters.categoryCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeHotelCategoriesRequestToJSON(requestParameters.hotelCategoriesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update hotel categories based on categoryCode, hotelCategoriesToBeChanged. <p><strong>OperationId:</strong>changeHotelCategories</p>
     * Change Hotel Categories
     */
    async changeHotelCategories(requestParameters: ChangeHotelCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeHotelCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update note types based on noteTypeCode, noteTypesToBeChanged. <p><strong>OperationId:</strong>changeNoteTypes</p>
     * Change Note Types
     */
    async changeNoteTypesRaw(requestParameters: ChangeNoteTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/noteTypes/{noteTypeCode}`.replace(`{${"noteTypeCode"}}`, encodeURIComponent(String(requestParameters.noteTypeCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeNoteTypesRequestToJSON(requestParameters.noteTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update note types based on noteTypeCode, noteTypesToBeChanged. <p><strong>OperationId:</strong>changeNoteTypes</p>
     * Change Note Types
     */
    async changeNoteTypes(requestParameters: ChangeNoteTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeNoteTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update property detail categories based on categoryCode, propertyDetailCategoriesToBeChanged. <p><strong>OperationId:</strong>changePropertyDetailCategories</p>
     * Change Property Detail Categories
     */
    async changePropertyDetailCategoriesRaw(requestParameters: ChangePropertyDetailCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/propertyDetailsCategories/{categoryCode}`.replace(`{${"categoryCode"}}`, encodeURIComponent(String(requestParameters.categoryCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePropertyDetailCategoriesRequestToJSON(requestParameters.propertyDetailCategoriesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update property detail categories based on categoryCode, propertyDetailCategoriesToBeChanged. <p><strong>OperationId:</strong>changePropertyDetailCategories</p>
     * Change Property Detail Categories
     */
    async changePropertyDetailCategories(requestParameters: ChangePropertyDetailCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changePropertyDetailCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update region codes based on regionCode, regionsCodeToBeChanged. <p><strong>OperationId:</strong>changeRegionsCode</p>
     * Change Regions Code
     */
    async changeRegionsCodeRaw(requestParameters: ChangeRegionsCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/regionCode/{regionCode}`.replace(`{${"regionCode"}}`, encodeURIComponent(String(requestParameters.regionCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeRegionsCodeRequestToJSON(requestParameters.regionsCodeToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update region codes based on regionCode, regionsCodeToBeChanged. <p><strong>OperationId:</strong>changeRegionsCode</p>
     * Change Regions Code
     */
    async changeRegionsCode(requestParameters: ChangeRegionsCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeRegionsCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update template codes based on code, templateCodesToBeChanged. <p><strong>OperationId:</strong>changeTemplateCodes</p>
     * Change Template Codes
     */
    async changeTemplateCodesRaw(requestParameters: ChangeTemplateCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateCodes/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeTemplateCodesRequestToJSON(requestParameters.templateCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update template codes based on code, templateCodesToBeChanged. <p><strong>OperationId:</strong>changeTemplateCodes</p>
     * Change Template Codes
     */
    async changeTemplateCodes(requestParameters: ChangeTemplateCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTemplateCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update user defined field groups based on udfGroupCode, userDefinedFieldGroupsToBeChanged. <p><strong>OperationId:</strong>changeUserDefinedFieldGroups</p>
     * Change User Defined Field Groups
     */
    async changeUserDefinedFieldGroupsRaw(requestParameters: ChangeUserDefinedFieldGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/userDefinedFieldGroups/{udfGroupCode}`.replace(`{${"udfGroupCode"}}`, encodeURIComponent(String(requestParameters.udfGroupCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeUserDefinedFieldGroupsRequestToJSON(requestParameters.userDefinedFieldGroupsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update user defined field groups based on udfGroupCode, userDefinedFieldGroupsToBeChanged. <p><strong>OperationId:</strong>changeUserDefinedFieldGroups</p>
     * Change User Defined Field Groups
     */
    async changeUserDefinedFieldGroups(requestParameters: ChangeUserDefinedFieldGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeUserDefinedFieldGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update user defined field values based on udfValue, userDefinedFieldValuesToBeChanged. The LOV group and LOV values functionality allows a property create a custom group of values to be used in a specified user defined field (UDF). This functionality provides added flexibility in allowing a site to track information or details that are specific to their business and outside of the standard fields offered in the OPERA Cloud. <p><strong>OperationId:</strong>changeUserDefinedFieldValues</p>
     * Change a User Defined Field Value 
     */
    async changeUserDefinedFieldValuesRaw(requestParameters: ChangeUserDefinedFieldValuesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/userDefinedFieldValues/{udfValue}`.replace(`{${"udfValue"}}`, encodeURIComponent(String(requestParameters.udfValue))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeUserDefinedFieldValuesRequestToJSON(requestParameters.userDefinedFieldValuesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update user defined field values based on udfValue, userDefinedFieldValuesToBeChanged. The LOV group and LOV values functionality allows a property create a custom group of values to be used in a specified user defined field (UDF). This functionality provides added flexibility in allowing a site to track information or details that are specific to their business and outside of the standard fields offered in the OPERA Cloud. <p><strong>OperationId:</strong>changeUserDefinedFieldValues</p>
     * Change a User Defined Field Value 
     */
    async changeUserDefinedFieldValues(requestParameters: ChangeUserDefinedFieldValuesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeUserDefinedFieldValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Attraction Classes. <p><strong>OperationId:</strong>deleteAttractionClasses</p>
     * Delete Attraction Classes
     */
    async deleteAttractionClassesRaw(requestParameters: DeleteAttractionClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/attractionClasses/{attractionClassCode}`.replace(`{${"attractionClassCode"}}`, encodeURIComponent(String(requestParameters.attractionClassCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Attraction Classes. <p><strong>OperationId:</strong>deleteAttractionClasses</p>
     * Delete Attraction Classes
     */
    async deleteAttractionClasses(requestParameters: DeleteAttractionClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAttractionClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Communication Methods Ent Details. <p><strong>OperationId:</strong>deleteCommunicationMethodsEntDetails</p>
     * Delete Communication Methods Ent Details
     */
    async deleteCommunicationMethodsEntDetailsRaw(requestParameters: DeleteCommunicationMethodsEntDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.communicationMethodsEntDetailsCodes) {
            queryParameters['communicationMethodsEntDetailsCodes'] = requestParameters.communicationMethodsEntDetailsCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/communicationMethodsEntDetails/{communicationMethodsEntDetailsId}`.replace(`{${"communicationMethodsEntDetailsId"}}`, encodeURIComponent(String(requestParameters.communicationMethodsEntDetailsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Communication Methods Ent Details. <p><strong>OperationId:</strong>deleteCommunicationMethodsEntDetails</p>
     * Delete Communication Methods Ent Details
     */
    async deleteCommunicationMethodsEntDetails(requestParameters: DeleteCommunicationMethodsEntDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCommunicationMethodsEntDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Marketing Regions. <p><strong>OperationId:</strong>deleteMarketingRegions</p>
     * Delete Marketing Regions
     */
    async deleteMarketingRegionsRaw(requestParameters: DeleteMarketingRegionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.marketingRegionsCodes) {
            queryParameters['marketingRegionsCodes'] = requestParameters.marketingRegionsCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/marketingRegions/{marketingRegionCode}`.replace(`{${"marketingRegionCode"}}`, encodeURIComponent(String(requestParameters.marketingRegionCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Marketing Regions. <p><strong>OperationId:</strong>deleteMarketingRegions</p>
     * Delete Marketing Regions
     */
    async deleteMarketingRegions(requestParameters: DeleteMarketingRegionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteMarketingRegionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Property Types. <p><strong>OperationId:</strong>deletePropertyTypes</p>
     * Delete Property Types
     */
    async deletePropertyTypesRaw(requestParameters: DeletePropertyTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.propertyTypesCodes) {
            queryParameters['propertyTypesCodes'] = requestParameters.propertyTypesCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/propertyTypes/{propertyTypeCode}`.replace(`{${"propertyTypeCode"}}`, encodeURIComponent(String(requestParameters.propertyTypeCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Property Types. <p><strong>OperationId:</strong>deletePropertyTypes</p>
     * Delete Property Types
     */
    async deletePropertyTypes(requestParameters: DeletePropertyTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deletePropertyTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Room Amenities. <p><strong>OperationId:</strong>deleteRoomAmenities</p>
     * Delete Room Amenities
     */
    async deleteRoomAmenitiesRaw(requestParameters: DeleteRoomAmenitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.roomAmenitiesCodes) {
            queryParameters['roomAmenitiesCodes'] = requestParameters.roomAmenitiesCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomAmenities/{roomAmenitiesId}`.replace(`{${"roomAmenitiesId"}}`, encodeURIComponent(String(requestParameters.roomAmenitiesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Room Amenities. <p><strong>OperationId:</strong>deleteRoomAmenities</p>
     * Delete Room Amenities
     */
    async deleteRoomAmenities(requestParameters: DeleteRoomAmenitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRoomAmenitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Attraction Classes. <p><strong>OperationId:</strong>getAttractionClasses</p>
     * Get Attraction Classes
     */
    async getAttractionClassesRaw(requestParameters: GetAttractionClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttractionClassesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/attractionClasses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttractionClassesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Attraction Classes. <p><strong>OperationId:</strong>getAttractionClasses</p>
     * Get Attraction Classes
     */
    async getAttractionClasses(requestParameters: GetAttractionClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttractionClassesDetails> {
        const response = await this.getAttractionClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return brand codes based on search criteria such as codes, wildCard, description. Brand codes are used for different hotel brands within a hotel corporation.<p><strong>OperationId:</strong>getBrandCodes</p>
     * Get brand codes
     */
    async getBrandCodesRaw(requestParameters: GetBrandCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BrandCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/brandCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BrandCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to return brand codes based on search criteria such as codes, wildCard, description. Brand codes are used for different hotel brands within a hotel corporation.<p><strong>OperationId:</strong>getBrandCodes</p>
     * Get brand codes
     */
    async getBrandCodes(requestParameters: GetBrandCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BrandCodesDetails> {
        const response = await this.getBrandCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Chains. <p><strong>OperationId:</strong>getChain</p>
     * Get Chains
     */
    async getChainRaw(requestParameters: GetChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainDetails>> {
        const queryParameters: any = {};

        if (requestParameters.enforceSecurity !== undefined) {
            queryParameters['enforceSecurity'] = requestParameters.enforceSecurity;
        }

        if (requestParameters.includeActive !== undefined) {
            queryParameters['includeActive'] = requestParameters.includeActive;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.chainCodes) {
            queryParameters['chainCodes'] = requestParameters.chainCodes;
        }

        if (requestParameters.chainName !== undefined) {
            queryParameters['chainName'] = requestParameters.chainName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/chain`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChainDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Chains. <p><strong>OperationId:</strong>getChain</p>
     * Get Chains
     */
    async getChain(requestParameters: GetChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainDetails> {
        const response = await this.getChainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Communication Methods Ent Details. <p><strong>OperationId:</strong>getCommunicationMethodsEntDetails</p>
     * Get Communication Methods Ent Details
     */
    async getCommunicationMethodsEntDetailsRaw(requestParameters: GetCommunicationMethodsEntDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommunicationMethodsEntDetailsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/communicationMethodsEntDetails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommunicationMethodsEntDetailsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Communication Methods Ent Details. <p><strong>OperationId:</strong>getCommunicationMethodsEntDetails</p>
     * Get Communication Methods Ent Details
     */
    async getCommunicationMethodsEntDetails(requestParameters: GetCommunicationMethodsEntDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommunicationMethodsEntDetailsDetails> {
        const response = await this.getCommunicationMethodsEntDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Corporate Business Units. <p><strong>OperationId:</strong>getCorporateBusinessUnits</p>
     * Get Corporate Business Units
     */
    async getCorporateBusinessUnitsRaw(requestParameters: GetCorporateBusinessUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CorporateBusinessUnitsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/corporateBusinessUnits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CorporateBusinessUnitsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Corporate Business Units. <p><strong>OperationId:</strong>getCorporateBusinessUnits</p>
     * Get Corporate Business Units
     */
    async getCorporateBusinessUnits(requestParameters: GetCorporateBusinessUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CorporateBusinessUnitsDetails> {
        const response = await this.getCorporateBusinessUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Corporate Department Codes. <p><strong>OperationId:</strong>getCorporateDepartmentCodes</p>
     * Get Corporate Department Codes
     */
    async getCorporateDepartmentCodesRaw(requestParameters: GetCorporateDepartmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CorporateDepartmentCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/corporateDepartmentCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CorporateDepartmentCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Corporate Department Codes. <p><strong>OperationId:</strong>getCorporateDepartmentCodes</p>
     * Get Corporate Department Codes
     */
    async getCorporateDepartmentCodes(requestParameters: GetCorporateDepartmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CorporateDepartmentCodesDetails> {
        const response = await this.getCorporateDepartmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Corporate Divisions. <p><strong>OperationId:</strong>getCorporateDivisions</p>
     * Get Corporate Divisions
     */
    async getCorporateDivisionsRaw(requestParameters: GetCorporateDivisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CorporateDivisionsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/corporateDivisions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CorporateDivisionsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Corporate Divisions. <p><strong>OperationId:</strong>getCorporateDivisions</p>
     * Get Corporate Divisions
     */
    async getCorporateDivisions(requestParameters: GetCorporateDivisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CorporateDivisionsDetails> {
        const response = await this.getCorporateDivisionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Corporate Operating Units. <p><strong>OperationId:</strong>getCorporateOperatingUnits</p>
     * Get Corporate Operating Units
     */
    async getCorporateOperatingUnitsRaw(requestParameters: GetCorporateOperatingUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CorporateOperatingUnitsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/corporateOperatingUnits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CorporateOperatingUnitsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Corporate Operating Units. <p><strong>OperationId:</strong>getCorporateOperatingUnits</p>
     * Get Corporate Operating Units
     */
    async getCorporateOperatingUnits(requestParameters: GetCorporateOperatingUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CorporateOperatingUnitsDetails> {
        const response = await this.getCorporateOperatingUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Country Guest Types. <p><strong>OperationId:</strong>getCountryGuestTypes</p>
     * Get Country Guest Types
     */
    async getCountryGuestTypesRaw(requestParameters: GetCountryGuestTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountryGuestTypesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/countries/guestTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryGuestTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Country Guest Types. <p><strong>OperationId:</strong>getCountryGuestTypes</p>
     * Get Country Guest Types
     */
    async getCountryGuestTypes(requestParameters: GetCountryGuestTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountryGuestTypesDetails> {
        const response = await this.getCountryGuestTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Country Main Groups. <p><strong>OperationId:</strong>getCountryMainGroups</p>
     * Get Country Main Groups
     */
    async getCountryMainGroupsRaw(requestParameters: GetCountryMainGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountryMainGroupsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/countryMainGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryMainGroupsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Country Main Groups. <p><strong>OperationId:</strong>getCountryMainGroups</p>
     * Get Country Main Groups
     */
    async getCountryMainGroups(requestParameters: GetCountryMainGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountryMainGroupsDetails> {
        const response = await this.getCountryMainGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Default Note text. <p><strong>OperationId:</strong>getDefaultNote</p>
     * Get Default Note text
     */
    async getDefaultNoteRaw(requestParameters: GetDefaultNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultNoteDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.noteType !== undefined) {
            queryParameters['noteType'] = requestParameters.noteType;
        }

        if (requestParameters.noteCode !== undefined) {
            queryParameters['noteCode'] = requestParameters.noteCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/defaultNote`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultNoteDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Default Note text. <p><strong>OperationId:</strong>getDefaultNote</p>
     * Get Default Note text
     */
    async getDefaultNote(requestParameters: GetDefaultNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultNoteDetails> {
        const response = await this.getDefaultNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * . <p><strong>OperationId:</strong>getHotelCategories</p>
     * Get Hotel Categories
     */
    async getHotelCategoriesRaw(requestParameters: GetHotelCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelCategoriesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelCategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelCategoriesDetailsFromJSON(jsonValue));
    }

    /**
     * . <p><strong>OperationId:</strong>getHotelCategories</p>
     * Get Hotel Categories
     */
    async getHotelCategories(requestParameters: GetHotelCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelCategoriesDetails> {
        const response = await this.getHotelCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get marketing cities by region. <p><strong>OperationId:</strong>getMarketingCitiesByRegion</p>
     * Get marketing cities by region
     */
    async getMarketingCitiesByRegionRaw(requestParameters: GetMarketingCitiesByRegionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarketingCitiesByRegionDetails>> {
        const queryParameters: any = {};

        if (requestParameters.regionCode !== undefined) {
            queryParameters['regionCode'] = requestParameters.regionCode;
        }

        if (requestParameters.marketingCity !== undefined) {
            queryParameters['marketingCity'] = requestParameters.marketingCity;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/marketingCitiesByRegion`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MarketingCitiesByRegionDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get marketing cities by region. <p><strong>OperationId:</strong>getMarketingCitiesByRegion</p>
     * Get marketing cities by region
     */
    async getMarketingCitiesByRegion(requestParameters: GetMarketingCitiesByRegionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarketingCitiesByRegionDetails> {
        const response = await this.getMarketingCitiesByRegionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Marketing Regions. <p><strong>OperationId:</strong>getMarketingRegions</p>
     * Get Marketing Regions
     */
    async getMarketingRegionsRaw(requestParameters: GetMarketingRegionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarketingRegionsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/marketingRegions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MarketingRegionsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Marketing Regions. <p><strong>OperationId:</strong>getMarketingRegions</p>
     * Get Marketing Regions
     */
    async getMarketingRegions(requestParameters: GetMarketingRegionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarketingRegionsDetails> {
        const response = await this.getMarketingRegionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Note Types. <p><strong>OperationId:</strong>getNoteTypes</p>
     * Get Note Types
     */
    async getNoteTypesRaw(requestParameters: GetNoteTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NoteTypesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.noteGroup !== undefined) {
            queryParameters['noteGroup'] = requestParameters.noteGroup;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.includeDepartmentDetails !== undefined) {
            queryParameters['includeDepartmentDetails'] = requestParameters.includeDepartmentDetails;
        }

        if (requestParameters.noteCode !== undefined) {
            queryParameters['noteCode'] = requestParameters.noteCode;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/noteTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoteTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Note Types. <p><strong>OperationId:</strong>getNoteTypes</p>
     * Get Note Types
     */
    async getNoteTypes(requestParameters: GetNoteTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NoteTypesDetails> {
        const response = await this.getNoteTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Property Detail Categories. <p><strong>OperationId:</strong>getPropertyDetailCategories</p>
     * Get Property Detail Categories
     */
    async getPropertyDetailCategoriesRaw(requestParameters: GetPropertyDetailCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyDetailCategoriesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/propertyDetailsCategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyDetailCategoriesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Property Detail Categories. <p><strong>OperationId:</strong>getPropertyDetailCategories</p>
     * Get Property Detail Categories
     */
    async getPropertyDetailCategories(requestParameters: GetPropertyDetailCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyDetailCategoriesDetails> {
        const response = await this.getPropertyDetailCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Property Types based on search criteria such as codes, wildCard, description.  Property types are used for different hotel types i.e. Resort, Business, CityCenter, Motel, BedAndBreakfast.<p><strong>OperationId:</strong>getPropertyTypes</p>
     * Get property types
     */
    async getPropertyTypesRaw(requestParameters: GetPropertyTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyTypesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/propertyTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Property Types based on search criteria such as codes, wildCard, description.  Property types are used for different hotel types i.e. Resort, Business, CityCenter, Motel, BedAndBreakfast.<p><strong>OperationId:</strong>getPropertyTypes</p>
     * Get property types
     */
    async getPropertyTypes(requestParameters: GetPropertyTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyTypesDetails> {
        const response = await this.getPropertyTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return region codes based on search criteria such as fetchInactive, codes, wildCard, description. <p><strong>OperationId:</strong>getRegionsCode</p>
     * Get Regions Code
     */
    async getRegionsCodeRaw(requestParameters: GetRegionsCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegionsCodeDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/regionCode`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionsCodeDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to return region codes based on search criteria such as fetchInactive, codes, wildCard, description. <p><strong>OperationId:</strong>getRegionsCode</p>
     * Get Regions Code
     */
    async getRegionsCode(requestParameters: GetRegionsCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegionsCodeDetails> {
        const response = await this.getRegionsCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Room Amenities. <p><strong>OperationId:</strong>getRoomAmenities</p>
     * Get Room Amenities
     */
    async getRoomAmenitiesRaw(requestParameters: GetRoomAmenitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomAmenitiesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomAmenities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomAmenitiesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Room Amenities. <p><strong>OperationId:</strong>getRoomAmenities</p>
     * Get Room Amenities
     */
    async getRoomAmenities(requestParameters: GetRoomAmenitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomAmenitiesDetails> {
        const response = await this.getRoomAmenitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Use this API to get Template Codes. <p><strong>OperationId:</strong>getTemplateCodes</p>
     *  Get Template Codes
     */
    async getTemplateCodesRaw(requestParameters: GetTemplateCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateCodesDetailsFromJSON(jsonValue));
    }

    /**
     *  Use this API to get Template Codes. <p><strong>OperationId:</strong>getTemplateCodes</p>
     *  Get Template Codes
     */
    async getTemplateCodes(requestParameters: GetTemplateCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateCodesDetails> {
        const response = await this.getTemplateCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get User Defined Field Groups. <p><strong>OperationId:</strong>getUserDefinedFieldGroups</p>
     * Get User Defined Field Groups
     */
    async getUserDefinedFieldGroupsRaw(requestParameters: GetUserDefinedFieldGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDefinedFieldGroupsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.groupCodes) {
            queryParameters['groupCodes'] = requestParameters.groupCodes;
        }

        if (requestParameters.descriptionWildCard !== undefined) {
            queryParameters['descriptionWildCard'] = requestParameters.descriptionWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/userDefinedFieldGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDefinedFieldGroupsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get User Defined Field Groups. <p><strong>OperationId:</strong>getUserDefinedFieldGroups</p>
     * Get User Defined Field Groups
     */
    async getUserDefinedFieldGroups(requestParameters: GetUserDefinedFieldGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDefinedFieldGroupsDetails> {
        const response = await this.getUserDefinedFieldGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return User Defined Field (UDF) Values based on search criteria such as groupCode, valueCode, descriptionWildCard.  The LOV Group and LOV Values functionality allows a property to create a custom group of values to be used in a specified user defined field (UDF). This functionality provides added flexibility in allowing a site to track information or details that are specific to their business and outside of the standard fields offered in OPERA Cloud.<p><strong>OperationId:</strong>getUserDefinedFieldValues</p>
     * Get user defined field (UDF) values
     */
    async getUserDefinedFieldValuesRaw(requestParameters: GetUserDefinedFieldValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDefinedFieldValuesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.groupCode !== undefined) {
            queryParameters['groupCode'] = requestParameters.groupCode;
        }

        if (requestParameters.valueCodes) {
            queryParameters['valueCodes'] = requestParameters.valueCodes;
        }

        if (requestParameters.descriptionWildCard !== undefined) {
            queryParameters['descriptionWildCard'] = requestParameters.descriptionWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/userDefinedFieldValues`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDefinedFieldValuesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to return User Defined Field (UDF) Values based on search criteria such as groupCode, valueCode, descriptionWildCard.  The LOV Group and LOV Values functionality allows a property to create a custom group of values to be used in a specified user defined field (UDF). This functionality provides added flexibility in allowing a site to track information or details that are specific to their business and outside of the standard fields offered in OPERA Cloud.<p><strong>OperationId:</strong>getUserDefinedFieldValues</p>
     * Get user defined field (UDF) values
     */
    async getUserDefinedFieldValues(requestParameters: GetUserDefinedFieldValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDefinedFieldValuesDetails> {
        const response = await this.getUserDefinedFieldValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Attraction Classes. <p><strong>OperationId:</strong>postAttractionClasses</p>
     * Create Attraction Classes
     */
    async postAttractionClassesRaw(requestParameters: PostAttractionClassesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/attractionClasses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAttractionClassesRequestToJSON(requestParameters.attractionClassesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Attraction Classes. <p><strong>OperationId:</strong>postAttractionClasses</p>
     * Create Attraction Classes
     */
    async postAttractionClasses(requestParameters: PostAttractionClassesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAttractionClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Brand Codes. <p><strong>OperationId:</strong>postBrandCodes</p>
     * Create Brand Codes
     */
    async postBrandCodesRaw(requestParameters: PostBrandCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/brandCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostBrandCodesRequestToJSON(requestParameters.brandCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Brand Codes. <p><strong>OperationId:</strong>postBrandCodes</p>
     * Create Brand Codes
     */
    async postBrandCodes(requestParameters: PostBrandCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postBrandCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Communication Methods Ent Details. <p><strong>OperationId:</strong>postCommunicationMethodsEntDetails</p>
     * Create Communication Methods Ent Details
     */
    async postCommunicationMethodsEntDetailsRaw(requestParameters: PostCommunicationMethodsEntDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/communicationMethodsEntDetails`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCommunicationMethodsEntDetailsRequestToJSON(requestParameters.communicationMethodsEntDetailsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Communication Methods Ent Details. <p><strong>OperationId:</strong>postCommunicationMethodsEntDetails</p>
     * Create Communication Methods Ent Details
     */
    async postCommunicationMethodsEntDetails(requestParameters: PostCommunicationMethodsEntDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCommunicationMethodsEntDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Corporate Business Units. <p><strong>OperationId:</strong>postCorporateBusinessUnits</p>
     * Create Corporate Business Units
     */
    async postCorporateBusinessUnitsRaw(requestParameters: PostCorporateBusinessUnitsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/corporateBusinessUnits`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCorporateBusinessUnitsRequestToJSON(requestParameters.corporateBusinessUnitsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Corporate Business Units. <p><strong>OperationId:</strong>postCorporateBusinessUnits</p>
     * Create Corporate Business Units
     */
    async postCorporateBusinessUnits(requestParameters: PostCorporateBusinessUnitsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCorporateBusinessUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Corporate Department Codes. <p><strong>OperationId:</strong>postCorporateDepartmentCodes</p>
     * Create Corporate Department Codes
     */
    async postCorporateDepartmentCodesRaw(requestParameters: PostCorporateDepartmentCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/corporateDepartmentCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCorporateDepartmentCodesRequestToJSON(requestParameters.corporateDepartmentCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Corporate Department Codes. <p><strong>OperationId:</strong>postCorporateDepartmentCodes</p>
     * Create Corporate Department Codes
     */
    async postCorporateDepartmentCodes(requestParameters: PostCorporateDepartmentCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCorporateDepartmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Corporate Divisions. <p><strong>OperationId:</strong>postCorporateDivisions</p>
     * Create Corporate Divisions
     */
    async postCorporateDivisionsRaw(requestParameters: PostCorporateDivisionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/corporateDivisions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCorporateDivisionsRequestToJSON(requestParameters.corporateDivisionsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Corporate Divisions. <p><strong>OperationId:</strong>postCorporateDivisions</p>
     * Create Corporate Divisions
     */
    async postCorporateDivisions(requestParameters: PostCorporateDivisionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCorporateDivisionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Corporate Operating Units. <p><strong>OperationId:</strong>postCorporateOperatingUnits</p>
     * Create Corporate Operating Units
     */
    async postCorporateOperatingUnitsRaw(requestParameters: PostCorporateOperatingUnitsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/corporateOperatingUnits`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCorporateOperatingUnitsRequestToJSON(requestParameters.corporateOperatingUnitsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Corporate Operating Units. <p><strong>OperationId:</strong>postCorporateOperatingUnits</p>
     * Create Corporate Operating Units
     */
    async postCorporateOperatingUnits(requestParameters: PostCorporateOperatingUnitsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCorporateOperatingUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Country Guest Types. <p><strong>OperationId:</strong>postCountryGuestTypes</p>
     * Create Country Guest Types
     */
    async postCountryGuestTypesRaw(requestParameters: PostCountryGuestTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/countries/guestTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCountryGuestTypesRequestToJSON(requestParameters.countryGuestTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Country Guest Types. <p><strong>OperationId:</strong>postCountryGuestTypes</p>
     * Create Country Guest Types
     */
    async postCountryGuestTypes(requestParameters: PostCountryGuestTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCountryGuestTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Country Main Groups. <p><strong>OperationId:</strong>postCountryMainGroups</p>
     * Create Country Main Groups
     */
    async postCountryMainGroupsRaw(requestParameters: PostCountryMainGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/countryMainGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCountryMainGroupsRequestToJSON(requestParameters.countryMainGroupsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Country Main Groups. <p><strong>OperationId:</strong>postCountryMainGroups</p>
     * Create Country Main Groups
     */
    async postCountryMainGroups(requestParameters: PostCountryMainGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCountryMainGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * . <p><strong>OperationId:</strong>postHotelCategories</p>
     * Create Hotel Categories
     */
    async postHotelCategoriesRaw(requestParameters: PostHotelCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelCategories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostHotelCategoriesRequestToJSON(requestParameters.hotelCategoriesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * . <p><strong>OperationId:</strong>postHotelCategories</p>
     * Create Hotel Categories
     */
    async postHotelCategories(requestParameters: PostHotelCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postHotelCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Marketing Regions. <p><strong>OperationId:</strong>postMarketingRegions</p>
     * Create Marketing Regions
     */
    async postMarketingRegionsRaw(requestParameters: PostMarketingRegionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/marketingRegions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostMarketingRegionsRequestToJSON(requestParameters.marketingRegionsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Marketing Regions. <p><strong>OperationId:</strong>postMarketingRegions</p>
     * Create Marketing Regions
     */
    async postMarketingRegions(requestParameters: PostMarketingRegionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMarketingRegionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Note Types. <p><strong>OperationId:</strong>postNoteTypes</p>
     * Create Note Types
     */
    async postNoteTypesRaw(requestParameters: PostNoteTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/noteTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostNoteTypesRequestToJSON(requestParameters.noteTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Note Types. <p><strong>OperationId:</strong>postNoteTypes</p>
     * Create Note Types
     */
    async postNoteTypes(requestParameters: PostNoteTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postNoteTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Property Detail Categories. <p><strong>OperationId:</strong>postPropertyDetailCategories</p>
     * Create Property Detail Categories
     */
    async postPropertyDetailCategoriesRaw(requestParameters: PostPropertyDetailCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/propertyDetailsCategories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostPropertyDetailCategoriesRequestToJSON(requestParameters.propertyDetailCategoriesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Property Detail Categories. <p><strong>OperationId:</strong>postPropertyDetailCategories</p>
     * Create Property Detail Categories
     */
    async postPropertyDetailCategories(requestParameters: PostPropertyDetailCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPropertyDetailCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Property Types. <p><strong>OperationId:</strong>postPropertyTypes</p>
     * Create Property Types
     */
    async postPropertyTypesRaw(requestParameters: PostPropertyTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/propertyTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostPropertyTypesRequestToJSON(requestParameters.propertyTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Property Types. <p><strong>OperationId:</strong>postPropertyTypes</p>
     * Create Property Types
     */
    async postPropertyTypes(requestParameters: PostPropertyTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPropertyTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create region codes. <p><strong>OperationId:</strong>postRegionsCode</p>
     * Create Regions Code
     */
    async postRegionsCodeRaw(requestParameters: PostRegionsCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/regionCode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRegionsCodeRequestToJSON(requestParameters.regionsCodeCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create region codes. <p><strong>OperationId:</strong>postRegionsCode</p>
     * Create Regions Code
     */
    async postRegionsCode(requestParameters: PostRegionsCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRegionsCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Room Amenities. <p><strong>OperationId:</strong>postRoomAmenities</p>
     * Create Room Amenities
     */
    async postRoomAmenitiesRaw(requestParameters: PostRoomAmenitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomAmenities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRoomAmenitiesRequestToJSON(requestParameters.roomAmenitiesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Room Amenities. <p><strong>OperationId:</strong>postRoomAmenities</p>
     * Create Room Amenities
     */
    async postRoomAmenities(requestParameters: PostRoomAmenitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRoomAmenitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Template Codes. <p><strong>OperationId:</strong>postTemplateCodes</p>
     * Create Template Codes
     */
    async postTemplateCodesRaw(requestParameters: PostTemplateCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTemplateCodesRequestToJSON(requestParameters.templateCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Template Codes. <p><strong>OperationId:</strong>postTemplateCodes</p>
     * Create Template Codes
     */
    async postTemplateCodes(requestParameters: PostTemplateCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create User Defined Field Groups. <p><strong>OperationId:</strong>postUserDefinedFieldGroups</p>
     * Create User Defined Field Groups
     */
    async postUserDefinedFieldGroupsRaw(requestParameters: PostUserDefinedFieldGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/userDefinedFieldGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostUserDefinedFieldGroupsRequestToJSON(requestParameters.userDefinedFieldGroupsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create User Defined Field Groups. <p><strong>OperationId:</strong>postUserDefinedFieldGroups</p>
     * Create User Defined Field Groups
     */
    async postUserDefinedFieldGroups(requestParameters: PostUserDefinedFieldGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postUserDefinedFieldGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new User Defined Field (UDF) Value. The LOV Group and LOV Values functionality allows a property create a custom group of values to be used in a specified user defined field (UDF).  This functionality provides added flexibility in allowing a site to track information or details that are specific to their business and outside of the standard fields offered in the OPERA Cloud. <p><strong>OperationId:</strong>postUserDefinedFieldValues</p>
     * Create User Defined Field (UDF) Values
     */
    async postUserDefinedFieldValuesRaw(requestParameters: PostUserDefinedFieldValuesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/userDefinedFieldValues`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostUserDefinedFieldValuesRequestToJSON(requestParameters.userDefinedFieldValuesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new User Defined Field (UDF) Value. The LOV Group and LOV Values functionality allows a property create a custom group of values to be used in a specified user defined field (UDF).  This functionality provides added flexibility in allowing a site to track information or details that are specific to their business and outside of the standard fields offered in the OPERA Cloud. <p><strong>OperationId:</strong>postUserDefinedFieldValues</p>
     * Create User Defined Field (UDF) Values
     */
    async postUserDefinedFieldValues(requestParameters: PostUserDefinedFieldValuesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postUserDefinedFieldValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Attraction Classes. <p><strong>OperationId:</strong>putAttractionClasses</p>
     * Change Attraction Classes
     */
    async putAttractionClassesRaw(requestParameters: PutAttractionClassesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/attractionClasses/{attractionClassCode}`.replace(`{${"attractionClassCode"}}`, encodeURIComponent(String(requestParameters.attractionClassCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutAttractionClassesRequestToJSON(requestParameters.attractionClassesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Attraction Classes. <p><strong>OperationId:</strong>putAttractionClasses</p>
     * Change Attraction Classes
     */
    async putAttractionClasses(requestParameters: PutAttractionClassesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putAttractionClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Chain. <p><strong>OperationId:</strong>putChain</p>
     * Change Chain
     */
    async putChainRaw(requestParameters: PutChainOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/chain/{chainCode}`.replace(`{${"chainCode"}}`, encodeURIComponent(String(requestParameters.chainCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutChainRequestToJSON(requestParameters.chainToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Chain. <p><strong>OperationId:</strong>putChain</p>
     * Change Chain
     */
    async putChain(requestParameters: PutChainOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putChainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Communication Methods Ent Details. <p><strong>OperationId:</strong>putCommunicationMethodsEntDetails</p>
     * Change Communication Methods Ent Details
     */
    async putCommunicationMethodsEntDetailsRaw(requestParameters: PutCommunicationMethodsEntDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/communicationMethodsEntDetails/{communicationMethodsEntDetailsId}`.replace(`{${"communicationMethodsEntDetailsId"}}`, encodeURIComponent(String(requestParameters.communicationMethodsEntDetailsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutCommunicationMethodsEntDetailsRequestToJSON(requestParameters.communicationMethodsEntDetailsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Communication Methods Ent Details. <p><strong>OperationId:</strong>putCommunicationMethodsEntDetails</p>
     * Change Communication Methods Ent Details
     */
    async putCommunicationMethodsEntDetails(requestParameters: PutCommunicationMethodsEntDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCommunicationMethodsEntDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Marketing Regions. <p><strong>OperationId:</strong>putMarketingRegions</p>
     * Change Marketing Regions
     */
    async putMarketingRegionsRaw(requestParameters: PutMarketingRegionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/marketingRegions/{marketingRegionCode}`.replace(`{${"marketingRegionCode"}}`, encodeURIComponent(String(requestParameters.marketingRegionCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutMarketingRegionsRequestToJSON(requestParameters.marketingRegionsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Marketing Regions. <p><strong>OperationId:</strong>putMarketingRegions</p>
     * Change Marketing Regions
     */
    async putMarketingRegions(requestParameters: PutMarketingRegionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putMarketingRegionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Property Types. <p><strong>OperationId:</strong>putPropertyTypes</p>
     * Change Property Types
     */
    async putPropertyTypesRaw(requestParameters: PutPropertyTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/propertyTypes/{propertyTypeCode}`.replace(`{${"propertyTypeCode"}}`, encodeURIComponent(String(requestParameters.propertyTypeCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutPropertyTypesRequestToJSON(requestParameters.propertyTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Property Types. <p><strong>OperationId:</strong>putPropertyTypes</p>
     * Change Property Types
     */
    async putPropertyTypes(requestParameters: PutPropertyTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putPropertyTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Room Amenities. <p><strong>OperationId:</strong>putRoomAmenities</p>
     * Change Room Amenities
     */
    async putRoomAmenitiesRaw(requestParameters: PutRoomAmenitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomAmenities/{roomAmenitiesId}`.replace(`{${"roomAmenitiesId"}}`, encodeURIComponent(String(requestParameters.roomAmenitiesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutRoomAmenitiesRequestToJSON(requestParameters.roomAmenitiesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Room Amenities. <p><strong>OperationId:</strong>putRoomAmenities</p>
     * Change Room Amenities
     */
    async putRoomAmenities(requestParameters: PutRoomAmenitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRoomAmenitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete brand codes based on brandCode, brandCodesCodes. Brand codes are used for different hotel brands within a hotel corporation. <p><strong>OperationId:</strong>removeBrandCodes</p>
     * Delete Brand Code
     */
    async removeBrandCodesRaw(requestParameters: RemoveBrandCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.brandCodesCodes) {
            queryParameters['brandCodesCodes'] = requestParameters.brandCodesCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/brandCodes/{brandCode}`.replace(`{${"brandCode"}}`, encodeURIComponent(String(requestParameters.brandCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete brand codes based on brandCode, brandCodesCodes. Brand codes are used for different hotel brands within a hotel corporation. <p><strong>OperationId:</strong>removeBrandCodes</p>
     * Delete Brand Code
     */
    async removeBrandCodes(requestParameters: RemoveBrandCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeBrandCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Corporate Business Units. <p><strong>OperationId:</strong>removeCorporateBusinessUnits</p>
     * Delete Corporate Business Units
     */
    async removeCorporateBusinessUnitsRaw(requestParameters: RemoveCorporateBusinessUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.corporateBusinessUnitsCodes) {
            queryParameters['corporateBusinessUnitsCodes'] = requestParameters.corporateBusinessUnitsCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/corporateBusinessUnits/{businessUnitCode}`.replace(`{${"businessUnitCode"}}`, encodeURIComponent(String(requestParameters.businessUnitCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Corporate Business Units. <p><strong>OperationId:</strong>removeCorporateBusinessUnits</p>
     * Delete Corporate Business Units
     */
    async removeCorporateBusinessUnits(requestParameters: RemoveCorporateBusinessUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeCorporateBusinessUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete corporate department codes based on departmentCode. <p><strong>OperationId:</strong>removeCorporateDepartmentCodes</p>
     * Delete Corporate Department Codes
     */
    async removeCorporateDepartmentCodesRaw(requestParameters: RemoveCorporateDepartmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/corporateDepartmentCodes/{departmentCode}`.replace(`{${"departmentCode"}}`, encodeURIComponent(String(requestParameters.departmentCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete corporate department codes based on departmentCode. <p><strong>OperationId:</strong>removeCorporateDepartmentCodes</p>
     * Delete Corporate Department Codes
     */
    async removeCorporateDepartmentCodes(requestParameters: RemoveCorporateDepartmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeCorporateDepartmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete corporate divisions based on divisionCode, corporateDivisionsCodes. <p><strong>OperationId:</strong>removeCorporateDivisions</p>
     * Delete Corporate Divisions
     */
    async removeCorporateDivisionsRaw(requestParameters: RemoveCorporateDivisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.corporateDivisionsCodes) {
            queryParameters['corporateDivisionsCodes'] = requestParameters.corporateDivisionsCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/corporateDivisions/{divisionCode}`.replace(`{${"divisionCode"}}`, encodeURIComponent(String(requestParameters.divisionCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete corporate divisions based on divisionCode, corporateDivisionsCodes. <p><strong>OperationId:</strong>removeCorporateDivisions</p>
     * Delete Corporate Divisions
     */
    async removeCorporateDivisions(requestParameters: RemoveCorporateDivisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeCorporateDivisionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete corporate operating units based on operatingUnitCode, corporateOperatingUnitsCodes. <p><strong>OperationId:</strong>removeCorporateOperatingUnits</p>
     * Delete Corporate Operating Units
     */
    async removeCorporateOperatingUnitsRaw(requestParameters: RemoveCorporateOperatingUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.corporateOperatingUnitsCodes) {
            queryParameters['corporateOperatingUnitsCodes'] = requestParameters.corporateOperatingUnitsCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/corporateOperatingUnits/{operatingUnitCode}`.replace(`{${"operatingUnitCode"}}`, encodeURIComponent(String(requestParameters.operatingUnitCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete corporate operating units based on operatingUnitCode, corporateOperatingUnitsCodes. <p><strong>OperationId:</strong>removeCorporateOperatingUnits</p>
     * Delete Corporate Operating Units
     */
    async removeCorporateOperatingUnits(requestParameters: RemoveCorporateOperatingUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeCorporateOperatingUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete country guest types based on guestTypeCode, countryGuestTypesCodes. <p><strong>OperationId:</strong>removeCountryGuestTypes</p>
     * Delete Country Guest Types
     */
    async removeCountryGuestTypesRaw(requestParameters: RemoveCountryGuestTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.countryGuestTypesCodes) {
            queryParameters['countryGuestTypesCodes'] = requestParameters.countryGuestTypesCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/countries/guestTypes/{guestTypeCode}`.replace(`{${"guestTypeCode"}}`, encodeURIComponent(String(requestParameters.guestTypeCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete country guest types based on guestTypeCode, countryGuestTypesCodes. <p><strong>OperationId:</strong>removeCountryGuestTypes</p>
     * Delete Country Guest Types
     */
    async removeCountryGuestTypes(requestParameters: RemoveCountryGuestTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeCountryGuestTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete country main groups based on groupCode, countryMainGroupsCodes. <p><strong>OperationId:</strong>removeCountryMainGroups</p>
     * Delete Country Main Groups
     */
    async removeCountryMainGroupsRaw(requestParameters: RemoveCountryMainGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.countryMainGroupsCodes) {
            queryParameters['countryMainGroupsCodes'] = requestParameters.countryMainGroupsCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/countryMainGroups/{groupCode}`.replace(`{${"groupCode"}}`, encodeURIComponent(String(requestParameters.groupCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete country main groups based on groupCode, countryMainGroupsCodes. <p><strong>OperationId:</strong>removeCountryMainGroups</p>
     * Delete Country Main Groups
     */
    async removeCountryMainGroups(requestParameters: RemoveCountryMainGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeCountryMainGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete hotel categories based on categoryCode. <p><strong>OperationId:</strong>removeHotelCategories</p>
     * Delete Hotel Categories
     */
    async removeHotelCategoriesRaw(requestParameters: RemoveHotelCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelCategories/{categoryCode}`.replace(`{${"categoryCode"}}`, encodeURIComponent(String(requestParameters.categoryCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete hotel categories based on categoryCode. <p><strong>OperationId:</strong>removeHotelCategories</p>
     * Delete Hotel Categories
     */
    async removeHotelCategories(requestParameters: RemoveHotelCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeHotelCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete note types based on noteTypeCode, noteGroup. <p><strong>OperationId:</strong>removeNoteTypes</p>
     * Delete Note Types
     */
    async removeNoteTypesRaw(requestParameters: RemoveNoteTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.noteGroup !== undefined) {
            queryParameters['noteGroup'] = requestParameters.noteGroup;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/noteTypes/{noteTypeCode}`.replace(`{${"noteTypeCode"}}`, encodeURIComponent(String(requestParameters.noteTypeCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete note types based on noteTypeCode, noteGroup. <p><strong>OperationId:</strong>removeNoteTypes</p>
     * Delete Note Types
     */
    async removeNoteTypes(requestParameters: RemoveNoteTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeNoteTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete property detail categories based on categoryCode, propertyDetailCategoriesCodes. <p><strong>OperationId:</strong>removePropertyDetailCategories</p>
     * Delete Property Detail Categories
     */
    async removePropertyDetailCategoriesRaw(requestParameters: RemovePropertyDetailCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.propertyDetailCategoriesCodes) {
            queryParameters['propertyDetailCategoriesCodes'] = requestParameters.propertyDetailCategoriesCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/propertyDetailsCategories/{categoryCode}`.replace(`{${"categoryCode"}}`, encodeURIComponent(String(requestParameters.categoryCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete property detail categories based on categoryCode, propertyDetailCategoriesCodes. <p><strong>OperationId:</strong>removePropertyDetailCategories</p>
     * Delete Property Detail Categories
     */
    async removePropertyDetailCategories(requestParameters: RemovePropertyDetailCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removePropertyDetailCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete region codes based on regionCode. <p><strong>OperationId:</strong>removeRegionsCode</p>
     * Delete Regions Code
     */
    async removeRegionsCodeRaw(requestParameters: RemoveRegionsCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/regionCode/{regionCode}`.replace(`{${"regionCode"}}`, encodeURIComponent(String(requestParameters.regionCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete region codes based on regionCode. <p><strong>OperationId:</strong>removeRegionsCode</p>
     * Delete Regions Code
     */
    async removeRegionsCode(requestParameters: RemoveRegionsCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeRegionsCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete template codes based on code, templateCodes. <p><strong>OperationId:</strong>removeTemplateCodes</p>
     * Delete Template Codes
     */
    async removeTemplateCodesRaw(requestParameters: RemoveTemplateCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.templateCodes) {
            queryParameters['templateCodes'] = requestParameters.templateCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateCodes/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete template codes based on code, templateCodes. <p><strong>OperationId:</strong>removeTemplateCodes</p>
     * Delete Template Codes
     */
    async removeTemplateCodes(requestParameters: RemoveTemplateCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTemplateCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete user defined field groups based on udfGroupCode. <p><strong>OperationId:</strong>removeUserDefinedFieldGroups</p>
     * Delete User Defined Field Groups
     */
    async removeUserDefinedFieldGroupsRaw(requestParameters: RemoveUserDefinedFieldGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/userDefinedFieldGroups/{udfGroupCode}`.replace(`{${"udfGroupCode"}}`, encodeURIComponent(String(requestParameters.udfGroupCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete user defined field groups based on udfGroupCode. <p><strong>OperationId:</strong>removeUserDefinedFieldGroups</p>
     * Delete User Defined Field Groups
     */
    async removeUserDefinedFieldGroups(requestParameters: RemoveUserDefinedFieldGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeUserDefinedFieldGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete user defined field values based on udfValue, groupCode. The LOV group and LOV values functionality allows a property create a custom group of values to be used in a specified user defined field (UDF). This functionality provides added flexibility in allowing a site to track information or details that are specific to their business and outside of the standard fields offered in the OPERA Cloud. <p><strong>OperationId:</strong>removeUserDefinedFieldValues</p>
     * Delete a User Defined Field Value 
     */
    async removeUserDefinedFieldValuesRaw(requestParameters: RemoveUserDefinedFieldValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.groupCode !== undefined) {
            queryParameters['groupCode'] = requestParameters.groupCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/userDefinedFieldValues/{udfValue}`.replace(`{${"udfValue"}}`, encodeURIComponent(String(requestParameters.udfValue))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete user defined field values based on udfValue, groupCode. The LOV group and LOV values functionality allows a property create a custom group of values to be used in a specified user defined field (UDF). This functionality provides added flexibility in allowing a site to track information or details that are specific to their business and outside of the standard fields offered in the OPERA Cloud. <p><strong>OperationId:</strong>removeUserDefinedFieldValues</p>
     * Delete a User Defined Field Value 
     */
    async removeUserDefinedFieldValues(requestParameters: RemoveUserDefinedFieldValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeUserDefinedFieldValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
