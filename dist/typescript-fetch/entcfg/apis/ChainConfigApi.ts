/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AttractionClassesDetails,
  BrandCodesDetails,
  ChangePropertyDetailCategoriesRequest,
  ChangeRegionsCodeRequest,
  CommunicationMethodsEntDetailsDetails,
  CorporateDepartmentCodesDetails,
  CorporateDivisionsDetails,
  CorporateOperatingUnitsDetails,
  CountryGuestTypesDetails,
  CountryMainGroupsDetails,
  DefaultNoteDetails,
  ExceptionDetailType,
  HotelCategoriesDetails,
  PostPropertyDetailCategoriesRequest,
  PostPropertyTypesRequest,
  PostRegionsCodeRequest,
  PropertyDetailCategoriesDetails,
  PropertyTypesDetails,
  PutPropertyTypesRequest,
  RegionsCodeDetails,
  RoomAmenitiesDetails,
  Status,
  TemplateCodesDetails,
  UserDefinedFieldGroupsDetails,
  UserDefinedFieldValuesDetails,
} from '../models';
import {
    AttractionClassesDetailsFromJSON,
    AttractionClassesDetailsToJSON,
    BrandCodesDetailsFromJSON,
    BrandCodesDetailsToJSON,
    ChangePropertyDetailCategoriesRequestFromJSON,
    ChangePropertyDetailCategoriesRequestToJSON,
    ChangeRegionsCodeRequestFromJSON,
    ChangeRegionsCodeRequestToJSON,
    CommunicationMethodsEntDetailsDetailsFromJSON,
    CommunicationMethodsEntDetailsDetailsToJSON,
    CorporateDepartmentCodesDetailsFromJSON,
    CorporateDepartmentCodesDetailsToJSON,
    CorporateDivisionsDetailsFromJSON,
    CorporateDivisionsDetailsToJSON,
    CorporateOperatingUnitsDetailsFromJSON,
    CorporateOperatingUnitsDetailsToJSON,
    CountryGuestTypesDetailsFromJSON,
    CountryGuestTypesDetailsToJSON,
    CountryMainGroupsDetailsFromJSON,
    CountryMainGroupsDetailsToJSON,
    DefaultNoteDetailsFromJSON,
    DefaultNoteDetailsToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    HotelCategoriesDetailsFromJSON,
    HotelCategoriesDetailsToJSON,
    PostPropertyDetailCategoriesRequestFromJSON,
    PostPropertyDetailCategoriesRequestToJSON,
    PostPropertyTypesRequestFromJSON,
    PostPropertyTypesRequestToJSON,
    PostRegionsCodeRequestFromJSON,
    PostRegionsCodeRequestToJSON,
    PropertyDetailCategoriesDetailsFromJSON,
    PropertyDetailCategoriesDetailsToJSON,
    PropertyTypesDetailsFromJSON,
    PropertyTypesDetailsToJSON,
    PutPropertyTypesRequestFromJSON,
    PutPropertyTypesRequestToJSON,
    RegionsCodeDetailsFromJSON,
    RegionsCodeDetailsToJSON,
    RoomAmenitiesDetailsFromJSON,
    RoomAmenitiesDetailsToJSON,
    StatusFromJSON,
    StatusToJSON,
    TemplateCodesDetailsFromJSON,
    TemplateCodesDetailsToJSON,
    UserDefinedFieldGroupsDetailsFromJSON,
    UserDefinedFieldGroupsDetailsToJSON,
    UserDefinedFieldValuesDetailsFromJSON,
    UserDefinedFieldValuesDetailsToJSON,
} from '../models';

export interface ChangePropertyDetailCategoriesOperationRequest {
    categoryCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    propertyDetailCategoriesToBeChanged?: ChangePropertyDetailCategoriesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeRegionsCodeOperationRequest {
    regionCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    regionsCodeToBeChanged?: ChangeRegionsCodeRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeletePropertyTypesRequest {
    propertyTypeCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    propertyTypesCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAttractionClassesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBrandCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCommunicationMethodsEntDetailsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCorporateDepartmentCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCorporateDivisionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCorporateOperatingUnitsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCountryGuestTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCountryMainGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDefaultNoteRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    noteType?: string;
    noteCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelCategoriesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPropertyDetailCategoriesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPropertyTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRegionsCodeRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomAmenitiesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUserDefinedFieldGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    groupCodes?: Array<string>;
    descriptionWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUserDefinedFieldValuesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    groupCode?: string;
    valueCodes?: Array<string>;
    descriptionWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPropertyDetailCategoriesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    propertyDetailCategoriesCriteria?: PostPropertyDetailCategoriesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPropertyTypesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    propertyTypesCriteria?: PostPropertyTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRegionsCodeOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    regionsCodeCriteria?: PostRegionsCodeRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutPropertyTypesOperationRequest {
    propertyTypeCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    propertyTypesToBeChanged?: PutPropertyTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemovePropertyDetailCategoriesRequest {
    categoryCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    propertyDetailCategoriesCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveRegionsCodeRequest {
    regionCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ChainConfigApi extends runtime.BaseAPI {

    /**
     * Use this API to update Property Detail Categories. <p><strong>OperationId:</strong>changePropertyDetailCategories</p>
     * Change Property Detail Categories
     */
    async changePropertyDetailCategoriesRaw(requestParameters: ChangePropertyDetailCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/propertyDetailsCategories/{categoryCode}`.replace(`{${"categoryCode"}}`, encodeURIComponent(String(requestParameters.categoryCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePropertyDetailCategoriesRequestToJSON(requestParameters.propertyDetailCategoriesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Property Detail Categories. <p><strong>OperationId:</strong>changePropertyDetailCategories</p>
     * Change Property Detail Categories
     */
    async changePropertyDetailCategories(requestParameters: ChangePropertyDetailCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changePropertyDetailCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Regions Code. <p><strong>OperationId:</strong>changeRegionsCode</p>
     * Change Regions Code
     */
    async changeRegionsCodeRaw(requestParameters: ChangeRegionsCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/regionCode/{regionCode}`.replace(`{${"regionCode"}}`, encodeURIComponent(String(requestParameters.regionCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeRegionsCodeRequestToJSON(requestParameters.regionsCodeToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Regions Code. <p><strong>OperationId:</strong>changeRegionsCode</p>
     * Change Regions Code
     */
    async changeRegionsCode(requestParameters: ChangeRegionsCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeRegionsCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Property Types. <p><strong>OperationId:</strong>deletePropertyTypes</p>
     * Delete Property Types
     */
    async deletePropertyTypesRaw(requestParameters: DeletePropertyTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.propertyTypesCodes) {
            queryParameters['propertyTypesCodes'] = requestParameters.propertyTypesCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/propertyTypes/{propertyTypeCode}`.replace(`{${"propertyTypeCode"}}`, encodeURIComponent(String(requestParameters.propertyTypeCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Property Types. <p><strong>OperationId:</strong>deletePropertyTypes</p>
     * Delete Property Types
     */
    async deletePropertyTypes(requestParameters: DeletePropertyTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deletePropertyTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Attraction Classes. <p><strong>OperationId:</strong>getAttractionClasses</p>
     * Get Attraction Classes
     */
    async getAttractionClassesRaw(requestParameters: GetAttractionClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttractionClassesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/attractionClasses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttractionClassesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Attraction Classes. <p><strong>OperationId:</strong>getAttractionClasses</p>
     * Get Attraction Classes
     */
    async getAttractionClasses(requestParameters: GetAttractionClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttractionClassesDetails> {
        const response = await this.getAttractionClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return brand codes based on search criteria such as codes, wildCard, description. Brand codes are used for different hotel brands within a hotel corporation.<p><strong>OperationId:</strong>getBrandCodes</p>
     * Get brand codes
     */
    async getBrandCodesRaw(requestParameters: GetBrandCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BrandCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/brandCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BrandCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to return brand codes based on search criteria such as codes, wildCard, description. Brand codes are used for different hotel brands within a hotel corporation.<p><strong>OperationId:</strong>getBrandCodes</p>
     * Get brand codes
     */
    async getBrandCodes(requestParameters: GetBrandCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BrandCodesDetails> {
        const response = await this.getBrandCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Communication Methods Ent Details. <p><strong>OperationId:</strong>getCommunicationMethodsEntDetails</p>
     * Get Communication Methods Ent Details
     */
    async getCommunicationMethodsEntDetailsRaw(requestParameters: GetCommunicationMethodsEntDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommunicationMethodsEntDetailsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/communicationMethodsEntDetails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommunicationMethodsEntDetailsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Communication Methods Ent Details. <p><strong>OperationId:</strong>getCommunicationMethodsEntDetails</p>
     * Get Communication Methods Ent Details
     */
    async getCommunicationMethodsEntDetails(requestParameters: GetCommunicationMethodsEntDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommunicationMethodsEntDetailsDetails> {
        const response = await this.getCommunicationMethodsEntDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Corporate Department Codes. <p><strong>OperationId:</strong>getCorporateDepartmentCodes</p>
     * Get Corporate Department Codes
     */
    async getCorporateDepartmentCodesRaw(requestParameters: GetCorporateDepartmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CorporateDepartmentCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/corporateDepartmentCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CorporateDepartmentCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Corporate Department Codes. <p><strong>OperationId:</strong>getCorporateDepartmentCodes</p>
     * Get Corporate Department Codes
     */
    async getCorporateDepartmentCodes(requestParameters: GetCorporateDepartmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CorporateDepartmentCodesDetails> {
        const response = await this.getCorporateDepartmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Corporate Divisions. <p><strong>OperationId:</strong>getCorporateDivisions</p>
     * Get Corporate Divisions
     */
    async getCorporateDivisionsRaw(requestParameters: GetCorporateDivisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CorporateDivisionsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/corporateDivisions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CorporateDivisionsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Corporate Divisions. <p><strong>OperationId:</strong>getCorporateDivisions</p>
     * Get Corporate Divisions
     */
    async getCorporateDivisions(requestParameters: GetCorporateDivisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CorporateDivisionsDetails> {
        const response = await this.getCorporateDivisionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Corporate Operating Units. <p><strong>OperationId:</strong>getCorporateOperatingUnits</p>
     * Get Corporate Operating Units
     */
    async getCorporateOperatingUnitsRaw(requestParameters: GetCorporateOperatingUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CorporateOperatingUnitsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/corporateOperatingUnits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CorporateOperatingUnitsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Corporate Operating Units. <p><strong>OperationId:</strong>getCorporateOperatingUnits</p>
     * Get Corporate Operating Units
     */
    async getCorporateOperatingUnits(requestParameters: GetCorporateOperatingUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CorporateOperatingUnitsDetails> {
        const response = await this.getCorporateOperatingUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Country Guest Types. <p><strong>OperationId:</strong>getCountryGuestTypes</p>
     * Get Country Guest Types
     */
    async getCountryGuestTypesRaw(requestParameters: GetCountryGuestTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountryGuestTypesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/countries/guestTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryGuestTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Country Guest Types. <p><strong>OperationId:</strong>getCountryGuestTypes</p>
     * Get Country Guest Types
     */
    async getCountryGuestTypes(requestParameters: GetCountryGuestTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountryGuestTypesDetails> {
        const response = await this.getCountryGuestTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Country Main Groups. <p><strong>OperationId:</strong>getCountryMainGroups</p>
     * Get Country Main Groups
     */
    async getCountryMainGroupsRaw(requestParameters: GetCountryMainGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountryMainGroupsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/countryMainGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryMainGroupsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Country Main Groups. <p><strong>OperationId:</strong>getCountryMainGroups</p>
     * Get Country Main Groups
     */
    async getCountryMainGroups(requestParameters: GetCountryMainGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountryMainGroupsDetails> {
        const response = await this.getCountryMainGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Default Note text. <p><strong>OperationId:</strong>getDefaultNote</p>
     * Get Default Note text
     */
    async getDefaultNoteRaw(requestParameters: GetDefaultNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultNoteDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.noteType !== undefined) {
            queryParameters['noteType'] = requestParameters.noteType;
        }

        if (requestParameters.noteCode !== undefined) {
            queryParameters['noteCode'] = requestParameters.noteCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/defaultNote`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultNoteDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Default Note text. <p><strong>OperationId:</strong>getDefaultNote</p>
     * Get Default Note text
     */
    async getDefaultNote(requestParameters: GetDefaultNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultNoteDetails> {
        const response = await this.getDefaultNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * . <p><strong>OperationId:</strong>getHotelCategories</p>
     * Get Hotel Categories
     */
    async getHotelCategoriesRaw(requestParameters: GetHotelCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelCategoriesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelCategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelCategoriesDetailsFromJSON(jsonValue));
    }

    /**
     * . <p><strong>OperationId:</strong>getHotelCategories</p>
     * Get Hotel Categories
     */
    async getHotelCategories(requestParameters: GetHotelCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelCategoriesDetails> {
        const response = await this.getHotelCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Property Detail Categories. <p><strong>OperationId:</strong>getPropertyDetailCategories</p>
     * Get Property Detail Categories
     */
    async getPropertyDetailCategoriesRaw(requestParameters: GetPropertyDetailCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyDetailCategoriesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/propertyDetailsCategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyDetailCategoriesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Property Detail Categories. <p><strong>OperationId:</strong>getPropertyDetailCategories</p>
     * Get Property Detail Categories
     */
    async getPropertyDetailCategories(requestParameters: GetPropertyDetailCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyDetailCategoriesDetails> {
        const response = await this.getPropertyDetailCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Property Types based on search criteria such as codes, wildCard, description.  Property types are used for different hotel types i.e. Resort, Business, CityCenter, Motel, BedAndBreakfast.<p><strong>OperationId:</strong>getPropertyTypes</p>
     * Get property types
     */
    async getPropertyTypesRaw(requestParameters: GetPropertyTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyTypesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/propertyTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Property Types based on search criteria such as codes, wildCard, description.  Property types are used for different hotel types i.e. Resort, Business, CityCenter, Motel, BedAndBreakfast.<p><strong>OperationId:</strong>getPropertyTypes</p>
     * Get property types
     */
    async getPropertyTypes(requestParameters: GetPropertyTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyTypesDetails> {
        const response = await this.getPropertyTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Regions Code. <p><strong>OperationId:</strong>getRegionsCode</p>
     * Get Regions Code
     */
    async getRegionsCodeRaw(requestParameters: GetRegionsCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegionsCodeDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/regionCode`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionsCodeDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Regions Code. <p><strong>OperationId:</strong>getRegionsCode</p>
     * Get Regions Code
     */
    async getRegionsCode(requestParameters: GetRegionsCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegionsCodeDetails> {
        const response = await this.getRegionsCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Room Amenities. <p><strong>OperationId:</strong>getRoomAmenities</p>
     * Get Room Amenities
     */
    async getRoomAmenitiesRaw(requestParameters: GetRoomAmenitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomAmenitiesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomAmenities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomAmenitiesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Room Amenities. <p><strong>OperationId:</strong>getRoomAmenities</p>
     * Get Room Amenities
     */
    async getRoomAmenities(requestParameters: GetRoomAmenitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomAmenitiesDetails> {
        const response = await this.getRoomAmenitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Use this API to get Template Codes. <p><strong>OperationId:</strong>getTemplateCodes</p>
     *  Get Template Codes
     */
    async getTemplateCodesRaw(requestParameters: GetTemplateCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateCodesDetailsFromJSON(jsonValue));
    }

    /**
     *  Use this API to get Template Codes. <p><strong>OperationId:</strong>getTemplateCodes</p>
     *  Get Template Codes
     */
    async getTemplateCodes(requestParameters: GetTemplateCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateCodesDetails> {
        const response = await this.getTemplateCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get User Defined Field Groups. <p><strong>OperationId:</strong>getUserDefinedFieldGroups</p>
     * Get User Defined Field Groups
     */
    async getUserDefinedFieldGroupsRaw(requestParameters: GetUserDefinedFieldGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDefinedFieldGroupsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.groupCodes) {
            queryParameters['groupCodes'] = requestParameters.groupCodes;
        }

        if (requestParameters.descriptionWildCard !== undefined) {
            queryParameters['descriptionWildCard'] = requestParameters.descriptionWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/userDefinedFieldGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDefinedFieldGroupsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get User Defined Field Groups. <p><strong>OperationId:</strong>getUserDefinedFieldGroups</p>
     * Get User Defined Field Groups
     */
    async getUserDefinedFieldGroups(requestParameters: GetUserDefinedFieldGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDefinedFieldGroupsDetails> {
        const response = await this.getUserDefinedFieldGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return User Defined Field (UDF) Values based on search criteria such as groupCode, valueCode, descriptionWildCard.  The LOV Group and LOV Values functionality allows a property to create a custom group of values to be used in a specified user defined field (UDF). This functionality provides added flexibility in allowing a site to track information or details that are specific to their business and outside of the standard fields offered in OPERA Cloud.<p><strong>OperationId:</strong>getUserDefinedFieldValues</p>
     * Get user defined field (UDF) values
     */
    async getUserDefinedFieldValuesRaw(requestParameters: GetUserDefinedFieldValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDefinedFieldValuesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.groupCode !== undefined) {
            queryParameters['groupCode'] = requestParameters.groupCode;
        }

        if (requestParameters.valueCodes) {
            queryParameters['valueCodes'] = requestParameters.valueCodes;
        }

        if (requestParameters.descriptionWildCard !== undefined) {
            queryParameters['descriptionWildCard'] = requestParameters.descriptionWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/userDefinedFieldValues`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDefinedFieldValuesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to return User Defined Field (UDF) Values based on search criteria such as groupCode, valueCode, descriptionWildCard.  The LOV Group and LOV Values functionality allows a property to create a custom group of values to be used in a specified user defined field (UDF). This functionality provides added flexibility in allowing a site to track information or details that are specific to their business and outside of the standard fields offered in OPERA Cloud.<p><strong>OperationId:</strong>getUserDefinedFieldValues</p>
     * Get user defined field (UDF) values
     */
    async getUserDefinedFieldValues(requestParameters: GetUserDefinedFieldValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDefinedFieldValuesDetails> {
        const response = await this.getUserDefinedFieldValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Property Detail Categories. <p><strong>OperationId:</strong>postPropertyDetailCategories</p>
     * Create Property Detail Categories
     */
    async postPropertyDetailCategoriesRaw(requestParameters: PostPropertyDetailCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/propertyDetailsCategories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostPropertyDetailCategoriesRequestToJSON(requestParameters.propertyDetailCategoriesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Property Detail Categories. <p><strong>OperationId:</strong>postPropertyDetailCategories</p>
     * Create Property Detail Categories
     */
    async postPropertyDetailCategories(requestParameters: PostPropertyDetailCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPropertyDetailCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Property Types. <p><strong>OperationId:</strong>postPropertyTypes</p>
     * Create Property Types
     */
    async postPropertyTypesRaw(requestParameters: PostPropertyTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/propertyTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostPropertyTypesRequestToJSON(requestParameters.propertyTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Property Types. <p><strong>OperationId:</strong>postPropertyTypes</p>
     * Create Property Types
     */
    async postPropertyTypes(requestParameters: PostPropertyTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPropertyTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Regions Code. <p><strong>OperationId:</strong>postRegionsCode</p>
     * Create Regions Code
     */
    async postRegionsCodeRaw(requestParameters: PostRegionsCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/regionCode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRegionsCodeRequestToJSON(requestParameters.regionsCodeCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Regions Code. <p><strong>OperationId:</strong>postRegionsCode</p>
     * Create Regions Code
     */
    async postRegionsCode(requestParameters: PostRegionsCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRegionsCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Property Types. <p><strong>OperationId:</strong>putPropertyTypes</p>
     * Change Property Types
     */
    async putPropertyTypesRaw(requestParameters: PutPropertyTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/propertyTypes/{propertyTypeCode}`.replace(`{${"propertyTypeCode"}}`, encodeURIComponent(String(requestParameters.propertyTypeCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutPropertyTypesRequestToJSON(requestParameters.propertyTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Property Types. <p><strong>OperationId:</strong>putPropertyTypes</p>
     * Change Property Types
     */
    async putPropertyTypes(requestParameters: PutPropertyTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putPropertyTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Property Detail Categories. <p><strong>OperationId:</strong>removePropertyDetailCategories</p>
     * Delete Property Detail Categories
     */
    async removePropertyDetailCategoriesRaw(requestParameters: RemovePropertyDetailCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.propertyDetailCategoriesCodes) {
            queryParameters['propertyDetailCategoriesCodes'] = requestParameters.propertyDetailCategoriesCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/propertyDetailsCategories/{categoryCode}`.replace(`{${"categoryCode"}}`, encodeURIComponent(String(requestParameters.categoryCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Property Detail Categories. <p><strong>OperationId:</strong>removePropertyDetailCategories</p>
     * Delete Property Detail Categories
     */
    async removePropertyDetailCategories(requestParameters: RemovePropertyDetailCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removePropertyDetailCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Regions Code. <p><strong>OperationId:</strong>removeRegionsCode</p>
     * Delete Regions Code
     */
    async removeRegionsCodeRaw(requestParameters: RemoveRegionsCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/regionCode/{regionCode}`.replace(`{${"regionCode"}}`, encodeURIComponent(String(requestParameters.regionCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Regions Code. <p><strong>OperationId:</strong>removeRegionsCode</p>
     * Delete Regions Code
     */
    async removeRegionsCode(requestParameters: RemoveRegionsCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeRegionsCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
