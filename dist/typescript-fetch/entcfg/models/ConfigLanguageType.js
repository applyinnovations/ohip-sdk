"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigLanguageTypeToJSON = exports.ConfigLanguageTypeFromJSONTyped = exports.ConfigLanguageTypeFromJSON = exports.instanceOfConfigLanguageType = void 0;
const runtime_1 = require("../runtime");
const TranslationTextType50_1 = require("./TranslationTextType50");
/**
 * Check if a given object implements the ConfigLanguageType interface.
 */
function instanceOfConfigLanguageType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfConfigLanguageType = instanceOfConfigLanguageType;
function ConfigLanguageTypeFromJSON(json) {
    return ConfigLanguageTypeFromJSONTyped(json, false);
}
exports.ConfigLanguageTypeFromJSON = ConfigLanguageTypeFromJSON;
function ConfigLanguageTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : (0, TranslationTextType50_1.TranslationTextType50FromJSON)(json['description']),
        'translationLanguageCode': !(0, runtime_1.exists)(json, 'translationLanguageCode') ? undefined : json['translationLanguageCode'],
        'reportDateLanguage': !(0, runtime_1.exists)(json, 'reportDateLanguage') ? undefined : json['reportDateLanguage'],
        'useAsAlternateLanguage': !(0, runtime_1.exists)(json, 'useAsAlternateLanguage') ? undefined : json['useAsAlternateLanguage'],
        'locale': !(0, runtime_1.exists)(json, 'locale') ? undefined : json['locale'],
        'localeDescription': !(0, runtime_1.exists)(json, 'localeDescription') ? undefined : json['localeDescription'],
        'languageCode': !(0, runtime_1.exists)(json, 'languageCode') ? undefined : json['languageCode'],
    };
}
exports.ConfigLanguageTypeFromJSONTyped = ConfigLanguageTypeFromJSONTyped;
function ConfigLanguageTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'description': (0, TranslationTextType50_1.TranslationTextType50ToJSON)(value.description),
        'translationLanguageCode': value.translationLanguageCode,
        'reportDateLanguage': value.reportDateLanguage,
        'useAsAlternateLanguage': value.useAsAlternateLanguage,
        'locale': value.locale,
        'localeDescription': value.localeDescription,
        'languageCode': value.languageCode,
    };
}
exports.ConfigLanguageTypeToJSON = ConfigLanguageTypeToJSON;
