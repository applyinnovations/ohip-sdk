/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AlternateHotelType } from './AlternateHotelType';
import {
    AlternateHotelTypeFromJSON,
    AlternateHotelTypeFromJSONTyped,
    AlternateHotelTypeToJSON,
} from './AlternateHotelType';
import type { CommentInfoType } from './CommentInfoType';
import {
    CommentInfoTypeFromJSON,
    CommentInfoTypeFromJSONTyped,
    CommentInfoTypeToJSON,
} from './CommentInfoType';
import type { DirectionType } from './DirectionType';
import {
    DirectionTypeFromJSON,
    DirectionTypeFromJSONTyped,
    DirectionTypeToJSON,
} from './DirectionType';
import type { GeneralNoteType } from './GeneralNoteType';
import {
    GeneralNoteTypeFromJSON,
    GeneralNoteTypeFromJSONTyped,
    GeneralNoteTypeToJSON,
} from './GeneralNoteType';
import type { HotelAirportType } from './HotelAirportType';
import {
    HotelAirportTypeFromJSON,
    HotelAirportTypeFromJSONTyped,
    HotelAirportTypeToJSON,
} from './HotelAirportType';
import type { HotelAttractionType } from './HotelAttractionType';
import {
    HotelAttractionTypeFromJSON,
    HotelAttractionTypeFromJSONTyped,
    HotelAttractionTypeToJSON,
} from './HotelAttractionType';
import type { HotelBrochureTypeAccommodationDetails } from './HotelBrochureTypeAccommodationDetails';
import {
    HotelBrochureTypeAccommodationDetailsFromJSON,
    HotelBrochureTypeAccommodationDetailsFromJSONTyped,
    HotelBrochureTypeAccommodationDetailsToJSON,
} from './HotelBrochureTypeAccommodationDetails';
import type { HotelBrochureTypeAddress } from './HotelBrochureTypeAddress';
import {
    HotelBrochureTypeAddressFromJSON,
    HotelBrochureTypeAddressFromJSONTyped,
    HotelBrochureTypeAddressToJSON,
} from './HotelBrochureTypeAddress';
import type { HotelBrochureTypeCommunication } from './HotelBrochureTypeCommunication';
import {
    HotelBrochureTypeCommunicationFromJSON,
    HotelBrochureTypeCommunicationFromJSONTyped,
    HotelBrochureTypeCommunicationToJSON,
} from './HotelBrochureTypeCommunication';
import type { HotelBrochureTypeGeneralInformation } from './HotelBrochureTypeGeneralInformation';
import {
    HotelBrochureTypeGeneralInformationFromJSON,
    HotelBrochureTypeGeneralInformationFromJSONTyped,
    HotelBrochureTypeGeneralInformationToJSON,
} from './HotelBrochureTypeGeneralInformation';
import type { HotelBrochureTypePrimaryDetails } from './HotelBrochureTypePrimaryDetails';
import {
    HotelBrochureTypePrimaryDetailsFromJSON,
    HotelBrochureTypePrimaryDetailsFromJSONTyped,
    HotelBrochureTypePrimaryDetailsToJSON,
} from './HotelBrochureTypePrimaryDetails';
import type { HotelBrochureTypePropertyControls } from './HotelBrochureTypePropertyControls';
import {
    HotelBrochureTypePropertyControlsFromJSON,
    HotelBrochureTypePropertyControlsFromJSONTyped,
    HotelBrochureTypePropertyControlsToJSON,
} from './HotelBrochureTypePropertyControls';
import type { HotelConferenceFacilitiesType } from './HotelConferenceFacilitiesType';
import {
    HotelConferenceFacilitiesTypeFromJSON,
    HotelConferenceFacilitiesTypeFromJSONTyped,
    HotelConferenceFacilitiesTypeToJSON,
} from './HotelConferenceFacilitiesType';
import type { HotelContactType } from './HotelContactType';
import {
    HotelContactTypeFromJSON,
    HotelContactTypeFromJSONTyped,
    HotelContactTypeToJSON,
} from './HotelContactType';
import type { HotelCorporateInformationsType } from './HotelCorporateInformationsType';
import {
    HotelCorporateInformationsTypeFromJSON,
    HotelCorporateInformationsTypeFromJSONTyped,
    HotelCorporateInformationsTypeToJSON,
} from './HotelCorporateInformationsType';
import type { HotelEventSpacesType } from './HotelEventSpacesType';
import {
    HotelEventSpacesTypeFromJSON,
    HotelEventSpacesTypeFromJSONTyped,
    HotelEventSpacesTypeToJSON,
} from './HotelEventSpacesType';
import type { HotelFeatureType } from './HotelFeatureType';
import {
    HotelFeatureTypeFromJSON,
    HotelFeatureTypeFromJSONTyped,
    HotelFeatureTypeToJSON,
} from './HotelFeatureType';
import type { HotelPackageType } from './HotelPackageType';
import {
    HotelPackageTypeFromJSON,
    HotelPackageTypeFromJSONTyped,
    HotelPackageTypeToJSON,
} from './HotelPackageType';
import type { HotelRateRangeType } from './HotelRateRangeType';
import {
    HotelRateRangeTypeFromJSON,
    HotelRateRangeTypeFromJSONTyped,
    HotelRateRangeTypeToJSON,
} from './HotelRateRangeType';
import type { HotelRestaurantType } from './HotelRestaurantType';
import {
    HotelRestaurantTypeFromJSON,
    HotelRestaurantTypeFromJSONTyped,
    HotelRestaurantTypeToJSON,
} from './HotelRestaurantType';
import type { HotelTransportationType } from './HotelTransportationType';
import {
    HotelTransportationTypeFromJSON,
    HotelTransportationTypeFromJSONTyped,
    HotelTransportationTypeToJSON,
} from './HotelTransportationType';
import type { HotelUserDefinedFieldType } from './HotelUserDefinedFieldType';
import {
    HotelUserDefinedFieldTypeFromJSON,
    HotelUserDefinedFieldTypeFromJSONTyped,
    HotelUserDefinedFieldTypeToJSON,
} from './HotelUserDefinedFieldType';
import type { MeetingRoomType } from './MeetingRoomType';
import {
    MeetingRoomTypeFromJSON,
    MeetingRoomTypeFromJSONTyped,
    MeetingRoomTypeToJSON,
} from './MeetingRoomType';

/**
 * Contains the basic configuration information about a Hotel.
 * @export
 * @interface HotelBrochureType
 */
export interface HotelBrochureType {
    /**
     * 
     * @type {HotelBrochureTypeAccommodationDetails}
     * @memberof HotelBrochureType
     */
    accommodationDetails?: HotelBrochureTypeAccommodationDetails;
    /**
     * 
     * @type {HotelBrochureTypeAddress}
     * @memberof HotelBrochureType
     */
    address?: HotelBrochureTypeAddress;
    /**
     * 
     * @type {Array<AlternateHotelType>}
     * @memberof HotelBrochureType
     */
    alternateHotels?: Array<AlternateHotelType>;
    /**
     * 
     * @type {Array<HotelAttractionType>}
     * @memberof HotelBrochureType
     */
    attractions?: Array<HotelAttractionType>;
    /**
     * 
     * @type {string}
     * @memberof HotelBrochureType
     */
    baseLanguage?: string;
    /**
     * The code that identifies a hotel chain or management group. The hotel chain code is decided between vendors. This attribute is optional if the hotel is an independent property that can be identified by the HotelCode attribute.
     * @type {string}
     * @memberof HotelBrochureType
     */
    chainCode?: string;
    /**
     * The name of the hotel chain (e.g., Hilton, Marriott, Hyatt).
     * @type {string}
     * @memberof HotelBrochureType
     */
    chainName?: string;
    /**
     * 
     * @type {HotelBrochureTypeCommunication}
     * @memberof HotelBrochureType
     */
    communication?: HotelBrochureTypeCommunication;
    /**
     * The time when login hotel brochure.
     * @type {string}
     * @memberof HotelBrochureType
     */
    currentTime?: string;
    /**
     * Collection of direction details to get into Hotel.
     * @type {Array<DirectionType>}
     * @memberof HotelBrochureType
     */
    directions?: Array<DirectionType>;
    /**
     * 
     * @type {HotelBrochureTypeGeneralInformation}
     * @memberof HotelBrochureType
     */
    generalInformation?: HotelBrochureTypeGeneralInformation;
    /**
     * Collection of general notes about the Hotel.
     * @type {Array<GeneralNoteType>}
     * @memberof HotelBrochureType
     */
    generalNotes?: Array<GeneralNoteType>;
    /**
     * Collection of Airport details of the Hotel
     * @type {Array<HotelAirportType>}
     * @memberof HotelBrochureType
     */
    hotelAirports?: Array<HotelAirportType>;
    /**
     * 
     * @type {Array<HotelAttractionType>}
     * @memberof HotelBrochureType
     */
    hotelAttractions?: Array<HotelAttractionType>;
    /**
     * The IATA city code; for example DCA, ORD.
     * @type {string}
     * @memberof HotelBrochureType
     */
    hotelCityCode?: string;
    /**
     * A text field used to communicate the context (or source of - ex Sabre, Galileo, Worldspan, Amadeus) the HotelReferenceGroup codes.
     * @type {string}
     * @memberof HotelBrochureType
     */
    hotelCodeContext?: string;
    /**
     * 
     * @type {HotelConferenceFacilitiesType}
     * @memberof HotelBrochureType
     */
    hotelConferenceFacilities?: HotelConferenceFacilitiesType;
    /**
     * Lists of contacts of the hotel.
     * @type {Array<HotelContactType>}
     * @memberof HotelBrochureType
     */
    hotelContacts?: Array<HotelContactType>;
    /**
     * 
     * @type {HotelCorporateInformationsType}
     * @memberof HotelBrochureType
     */
    hotelCorporateInformations?: HotelCorporateInformationsType;
    /**
     * 
     * @type {HotelEventSpacesType}
     * @memberof HotelBrochureType
     */
    hotelEventSpaces?: HotelEventSpacesType;
    /**
     * Collection of Features in the Hotel
     * @type {Array<HotelFeatureType>}
     * @memberof HotelBrochureType
     */
    hotelFeatures?: Array<HotelFeatureType>;
    /**
     * The code that uniquely identifies a single hotel property. The hotel code is decided between vendors.
     * @type {string}
     * @memberof HotelBrochureType
     */
    hotelId?: string;
    /**
     * 
     * @type {Array<HotelUserDefinedFieldType>}
     * @memberof HotelBrochureType
     */
    hotelMiscellaneousInformation?: Array<HotelUserDefinedFieldType>;
    /**
     * A text field used to communicate the proper name of the hotel.
     * @type {string}
     * @memberof HotelBrochureType
     */
    hotelName?: string;
    /**
     * List of Notes of the hotel.
     * @type {Array<CommentInfoType>}
     * @memberof HotelBrochureType
     */
    hotelNotes?: Array<CommentInfoType>;
    /**
     * 
     * @type {Array<HotelPackageType>}
     * @memberof HotelBrochureType
     */
    hotelPackages?: Array<HotelPackageType>;
    /**
     * Lists of rate ranges of the hotel.
     * @type {Array<HotelRateRangeType>}
     * @memberof HotelBrochureType
     */
    hotelRateRanges?: Array<HotelRateRangeType>;
    /**
     * 
     * @type {Array<HotelRestaurantType>}
     * @memberof HotelBrochureType
     */
    hotelRestaurants?: Array<HotelRestaurantType>;
    /**
     * 
     * @type {Array<HotelTransportationType>}
     * @memberof HotelBrochureType
     */
    hotelTransportations?: Array<HotelTransportationType>;
    /**
     * List of meeting rooms of the hotel.
     * @type {Array<MeetingRoomType>}
     * @memberof HotelBrochureType
     */
    meetingRooms?: Array<MeetingRoomType>;
    /**
     * 
     * @type {HotelBrochureTypePrimaryDetails}
     * @memberof HotelBrochureType
     */
    primaryDetails?: HotelBrochureTypePrimaryDetails;
    /**
     * 
     * @type {HotelBrochureTypePropertyControls}
     * @memberof HotelBrochureType
     */
    propertyControls?: HotelBrochureTypePropertyControls;
}

/**
 * Check if a given object implements the HotelBrochureType interface.
 */
export function instanceOfHotelBrochureType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelBrochureTypeFromJSON(json: any): HotelBrochureType {
    return HotelBrochureTypeFromJSONTyped(json, false);
}

export function HotelBrochureTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelBrochureType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accommodationDetails': !exists(json, 'accommodationDetails') ? undefined : HotelBrochureTypeAccommodationDetailsFromJSON(json['accommodationDetails']),
        'address': !exists(json, 'address') ? undefined : HotelBrochureTypeAddressFromJSON(json['address']),
        'alternateHotels': !exists(json, 'alternateHotels') ? undefined : ((json['alternateHotels'] as Array<any>).map(AlternateHotelTypeFromJSON)),
        'attractions': !exists(json, 'attractions') ? undefined : ((json['attractions'] as Array<any>).map(HotelAttractionTypeFromJSON)),
        'baseLanguage': !exists(json, 'baseLanguage') ? undefined : json['baseLanguage'],
        'chainCode': !exists(json, 'chainCode') ? undefined : json['chainCode'],
        'chainName': !exists(json, 'chainName') ? undefined : json['chainName'],
        'communication': !exists(json, 'communication') ? undefined : HotelBrochureTypeCommunicationFromJSON(json['communication']),
        'currentTime': !exists(json, 'currentTime') ? undefined : json['currentTime'],
        'directions': !exists(json, 'directions') ? undefined : ((json['directions'] as Array<any>).map(DirectionTypeFromJSON)),
        'generalInformation': !exists(json, 'generalInformation') ? undefined : HotelBrochureTypeGeneralInformationFromJSON(json['generalInformation']),
        'generalNotes': !exists(json, 'generalNotes') ? undefined : ((json['generalNotes'] as Array<any>).map(GeneralNoteTypeFromJSON)),
        'hotelAirports': !exists(json, 'hotelAirports') ? undefined : ((json['hotelAirports'] as Array<any>).map(HotelAirportTypeFromJSON)),
        'hotelAttractions': !exists(json, 'hotelAttractions') ? undefined : ((json['hotelAttractions'] as Array<any>).map(HotelAttractionTypeFromJSON)),
        'hotelCityCode': !exists(json, 'hotelCityCode') ? undefined : json['hotelCityCode'],
        'hotelCodeContext': !exists(json, 'hotelCodeContext') ? undefined : json['hotelCodeContext'],
        'hotelConferenceFacilities': !exists(json, 'hotelConferenceFacilities') ? undefined : HotelConferenceFacilitiesTypeFromJSON(json['hotelConferenceFacilities']),
        'hotelContacts': !exists(json, 'hotelContacts') ? undefined : ((json['hotelContacts'] as Array<any>).map(HotelContactTypeFromJSON)),
        'hotelCorporateInformations': !exists(json, 'hotelCorporateInformations') ? undefined : HotelCorporateInformationsTypeFromJSON(json['hotelCorporateInformations']),
        'hotelEventSpaces': !exists(json, 'hotelEventSpaces') ? undefined : HotelEventSpacesTypeFromJSON(json['hotelEventSpaces']),
        'hotelFeatures': !exists(json, 'hotelFeatures') ? undefined : ((json['hotelFeatures'] as Array<any>).map(HotelFeatureTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'hotelMiscellaneousInformation': !exists(json, 'hotelMiscellaneousInformation') ? undefined : ((json['hotelMiscellaneousInformation'] as Array<any>).map(HotelUserDefinedFieldTypeFromJSON)),
        'hotelName': !exists(json, 'hotelName') ? undefined : json['hotelName'],
        'hotelNotes': !exists(json, 'hotelNotes') ? undefined : ((json['hotelNotes'] as Array<any>).map(CommentInfoTypeFromJSON)),
        'hotelPackages': !exists(json, 'hotelPackages') ? undefined : ((json['hotelPackages'] as Array<any>).map(HotelPackageTypeFromJSON)),
        'hotelRateRanges': !exists(json, 'hotelRateRanges') ? undefined : ((json['hotelRateRanges'] as Array<any>).map(HotelRateRangeTypeFromJSON)),
        'hotelRestaurants': !exists(json, 'hotelRestaurants') ? undefined : ((json['hotelRestaurants'] as Array<any>).map(HotelRestaurantTypeFromJSON)),
        'hotelTransportations': !exists(json, 'hotelTransportations') ? undefined : ((json['hotelTransportations'] as Array<any>).map(HotelTransportationTypeFromJSON)),
        'meetingRooms': !exists(json, 'meetingRooms') ? undefined : ((json['meetingRooms'] as Array<any>).map(MeetingRoomTypeFromJSON)),
        'primaryDetails': !exists(json, 'primaryDetails') ? undefined : HotelBrochureTypePrimaryDetailsFromJSON(json['primaryDetails']),
        'propertyControls': !exists(json, 'propertyControls') ? undefined : HotelBrochureTypePropertyControlsFromJSON(json['propertyControls']),
    };
}

export function HotelBrochureTypeToJSON(value?: HotelBrochureType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accommodationDetails': HotelBrochureTypeAccommodationDetailsToJSON(value.accommodationDetails),
        'address': HotelBrochureTypeAddressToJSON(value.address),
        'alternateHotels': value.alternateHotels === undefined ? undefined : ((value.alternateHotels as Array<any>).map(AlternateHotelTypeToJSON)),
        'attractions': value.attractions === undefined ? undefined : ((value.attractions as Array<any>).map(HotelAttractionTypeToJSON)),
        'baseLanguage': value.baseLanguage,
        'chainCode': value.chainCode,
        'chainName': value.chainName,
        'communication': HotelBrochureTypeCommunicationToJSON(value.communication),
        'currentTime': value.currentTime,
        'directions': value.directions === undefined ? undefined : ((value.directions as Array<any>).map(DirectionTypeToJSON)),
        'generalInformation': HotelBrochureTypeGeneralInformationToJSON(value.generalInformation),
        'generalNotes': value.generalNotes === undefined ? undefined : ((value.generalNotes as Array<any>).map(GeneralNoteTypeToJSON)),
        'hotelAirports': value.hotelAirports === undefined ? undefined : ((value.hotelAirports as Array<any>).map(HotelAirportTypeToJSON)),
        'hotelAttractions': value.hotelAttractions === undefined ? undefined : ((value.hotelAttractions as Array<any>).map(HotelAttractionTypeToJSON)),
        'hotelCityCode': value.hotelCityCode,
        'hotelCodeContext': value.hotelCodeContext,
        'hotelConferenceFacilities': HotelConferenceFacilitiesTypeToJSON(value.hotelConferenceFacilities),
        'hotelContacts': value.hotelContacts === undefined ? undefined : ((value.hotelContacts as Array<any>).map(HotelContactTypeToJSON)),
        'hotelCorporateInformations': HotelCorporateInformationsTypeToJSON(value.hotelCorporateInformations),
        'hotelEventSpaces': HotelEventSpacesTypeToJSON(value.hotelEventSpaces),
        'hotelFeatures': value.hotelFeatures === undefined ? undefined : ((value.hotelFeatures as Array<any>).map(HotelFeatureTypeToJSON)),
        'hotelId': value.hotelId,
        'hotelMiscellaneousInformation': value.hotelMiscellaneousInformation === undefined ? undefined : ((value.hotelMiscellaneousInformation as Array<any>).map(HotelUserDefinedFieldTypeToJSON)),
        'hotelName': value.hotelName,
        'hotelNotes': value.hotelNotes === undefined ? undefined : ((value.hotelNotes as Array<any>).map(CommentInfoTypeToJSON)),
        'hotelPackages': value.hotelPackages === undefined ? undefined : ((value.hotelPackages as Array<any>).map(HotelPackageTypeToJSON)),
        'hotelRateRanges': value.hotelRateRanges === undefined ? undefined : ((value.hotelRateRanges as Array<any>).map(HotelRateRangeTypeToJSON)),
        'hotelRestaurants': value.hotelRestaurants === undefined ? undefined : ((value.hotelRestaurants as Array<any>).map(HotelRestaurantTypeToJSON)),
        'hotelTransportations': value.hotelTransportations === undefined ? undefined : ((value.hotelTransportations as Array<any>).map(HotelTransportationTypeToJSON)),
        'meetingRooms': value.meetingRooms === undefined ? undefined : ((value.meetingRooms as Array<any>).map(MeetingRoomTypeToJSON)),
        'primaryDetails': HotelBrochureTypePrimaryDetailsToJSON(value.primaryDetails),
        'propertyControls': HotelBrochureTypePropertyControlsToJSON(value.propertyControls),
    };
}

