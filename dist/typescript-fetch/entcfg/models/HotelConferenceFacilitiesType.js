"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HotelConferenceFacilitiesTypeToJSON = exports.HotelConferenceFacilitiesTypeFromJSONTyped = exports.HotelConferenceFacilitiesTypeFromJSON = exports.instanceOfHotelConferenceFacilitiesType = void 0;
const runtime_1 = require("../runtime");
const HotelBanquetSpaceType_1 = require("./HotelBanquetSpaceType");
const HotelConferenceRoomType_1 = require("./HotelConferenceRoomType");
/**
 * Check if a given object implements the HotelConferenceFacilitiesType interface.
 */
function instanceOfHotelConferenceFacilitiesType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfHotelConferenceFacilitiesType = instanceOfHotelConferenceFacilitiesType;
function HotelConferenceFacilitiesTypeFromJSON(json) {
    return HotelConferenceFacilitiesTypeFromJSONTyped(json, false);
}
exports.HotelConferenceFacilitiesTypeFromJSON = HotelConferenceFacilitiesTypeFromJSON;
function HotelConferenceFacilitiesTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelBanquetSpace': !(0, runtime_1.exists)(json, 'hotelBanquetSpace') ? undefined : (0, HotelBanquetSpaceType_1.HotelBanquetSpaceTypeFromJSON)(json['hotelBanquetSpace']),
        'hotelConferenceRooms': !(0, runtime_1.exists)(json, 'hotelConferenceRooms') ? undefined : (json['hotelConferenceRooms'].map(HotelConferenceRoomType_1.HotelConferenceRoomTypeFromJSON)),
    };
}
exports.HotelConferenceFacilitiesTypeFromJSONTyped = HotelConferenceFacilitiesTypeFromJSONTyped;
function HotelConferenceFacilitiesTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelBanquetSpace': (0, HotelBanquetSpaceType_1.HotelBanquetSpaceTypeToJSON)(value.hotelBanquetSpace),
        'hotelConferenceRooms': value.hotelConferenceRooms === undefined ? undefined : (value.hotelConferenceRooms.map(HotelConferenceRoomType_1.HotelConferenceRoomTypeToJSON)),
    };
}
exports.HotelConferenceFacilitiesTypeToJSON = HotelConferenceFacilitiesTypeToJSON;
