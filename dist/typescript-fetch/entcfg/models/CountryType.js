"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CountryTypeToJSON = exports.CountryTypeFromJSONTyped = exports.CountryTypeFromJSON = exports.instanceOfCountryType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the CountryType interface.
 */
function instanceOfCountryType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCountryType = instanceOfCountryType;
function CountryTypeFromJSON(json) {
    return CountryTypeFromJSONTyped(json, false);
}
exports.CountryTypeFromJSON = CountryTypeFromJSON;
function CountryTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': !(0, runtime_1.exists)(json, 'name') ? undefined : json['name'],
        'statisticCode': !(0, runtime_1.exists)(json, 'statisticCode') ? undefined : json['statisticCode'],
        'guestAddressFormat': !(0, runtime_1.exists)(json, 'guestAddressFormat') ? undefined : json['guestAddressFormat'],
        'addressDoctorMode': !(0, runtime_1.exists)(json, 'addressDoctorMode') ? undefined : json['addressDoctorMode'],
        'mainGroup': !(0, runtime_1.exists)(json, 'mainGroup') ? undefined : json['mainGroup'],
        'regionCode': !(0, runtime_1.exists)(json, 'regionCode') ? undefined : json['regionCode'],
        'isoCode': !(0, runtime_1.exists)(json, 'isoCode') ? undefined : json['isoCode'],
        'isoName': !(0, runtime_1.exists)(json, 'isoName') ? undefined : json['isoName'],
        'displaySequence': !(0, runtime_1.exists)(json, 'displaySequence') ? undefined : json['displaySequence'],
        'printSequence': !(0, runtime_1.exists)(json, 'printSequence') ? undefined : json['printSequence'],
        'displayFlag': !(0, runtime_1.exists)(json, 'displayFlag') ? undefined : json['displayFlag'],
        'countryCode': !(0, runtime_1.exists)(json, 'countryCode') ? undefined : json['countryCode'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
    };
}
exports.CountryTypeFromJSONTyped = CountryTypeFromJSONTyped;
function CountryTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'statisticCode': value.statisticCode,
        'guestAddressFormat': value.guestAddressFormat,
        'addressDoctorMode': value.addressDoctorMode,
        'mainGroup': value.mainGroup,
        'regionCode': value.regionCode,
        'isoCode': value.isoCode,
        'isoName': value.isoName,
        'displaySequence': value.displaySequence,
        'printSequence': value.printSequence,
        'displayFlag': value.displayFlag,
        'countryCode': value.countryCode,
        'hotelId': value.hotelId,
    };
}
exports.CountryTypeToJSON = CountryTypeToJSON;
