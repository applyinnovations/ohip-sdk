"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SellMessageTypeToJSON = exports.SellMessageTypeFromJSONTyped = exports.SellMessageTypeFromJSON = exports.instanceOfSellMessageType = void 0;
const runtime_1 = require("../runtime");
const UsedInModuleType_1 = require("./UsedInModuleType");
/**
 * Check if a given object implements the SellMessageType interface.
 */
function instanceOfSellMessageType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfSellMessageType = instanceOfSellMessageType;
function SellMessageTypeFromJSON(json) {
    return SellMessageTypeFromJSONTyped(json, false);
}
exports.SellMessageTypeFromJSON = SellMessageTypeFromJSON;
function SellMessageTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'message': !(0, runtime_1.exists)(json, 'message') ? undefined : json['message'],
        'croCode': !(0, runtime_1.exists)(json, 'croCode') ? undefined : json['croCode'],
        'chainCode': !(0, runtime_1.exists)(json, 'chainCode') ? undefined : json['chainCode'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'roomType': !(0, runtime_1.exists)(json, 'roomType') ? undefined : json['roomType'],
        'ratePlanCode': !(0, runtime_1.exists)(json, 'ratePlanCode') ? undefined : json['ratePlanCode'],
        'languageCode': !(0, runtime_1.exists)(json, 'languageCode') ? undefined : json['languageCode'],
        'stickyFlagYn': !(0, runtime_1.exists)(json, 'stickyFlagYn') ? undefined : json['stickyFlagYn'],
        'usedInModule': !(0, runtime_1.exists)(json, 'usedInModule') ? undefined : (0, UsedInModuleType_1.UsedInModuleTypeFromJSON)(json['usedInModule']),
        'beginDate': !(0, runtime_1.exists)(json, 'beginDate') ? undefined : json['beginDate'],
        'url': !(0, runtime_1.exists)(json, 'url') ? undefined : json['url'],
        'type': !(0, runtime_1.exists)(json, 'type') ? undefined : json['type'],
        'instance': !(0, runtime_1.exists)(json, 'instance') ? undefined : json['instance'],
        'idContext': !(0, runtime_1.exists)(json, 'idContext') ? undefined : json['idContext'],
        'id': !(0, runtime_1.exists)(json, 'id') ? undefined : json['id'],
        'idExtension': !(0, runtime_1.exists)(json, 'idExtension') ? undefined : json['idExtension'],
    };
}
exports.SellMessageTypeFromJSONTyped = SellMessageTypeFromJSONTyped;
function SellMessageTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'message': value.message,
        'croCode': value.croCode,
        'chainCode': value.chainCode,
        'hotelId': value.hotelId,
        'roomType': value.roomType,
        'ratePlanCode': value.ratePlanCode,
        'languageCode': value.languageCode,
        'stickyFlagYn': value.stickyFlagYn,
        'usedInModule': (0, UsedInModuleType_1.UsedInModuleTypeToJSON)(value.usedInModule),
        'beginDate': value.beginDate,
        'url': value.url,
        'type': value.type,
        'instance': value.instance,
        'idContext': value.idContext,
        'id': value.id,
        'idExtension': value.idExtension,
    };
}
exports.SellMessageTypeToJSON = SellMessageTypeToJSON;
