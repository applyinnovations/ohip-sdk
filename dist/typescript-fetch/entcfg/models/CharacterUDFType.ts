/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Used to hold user defined field of Character/String Type.
 * @export
 * @interface CharacterUDFType
 */
export interface CharacterUDFType {
    /**
     * Used to hold user defined field of Character Type. It is highly recommended to use UDFC01, UDFC02,...UDFC40 (Total 40) as Character/String UDF names(commonly used on Reservation, Profile etc.). Name is not restricted using enumeration, to provide flexibility of different name usage if required.
     * @type {string}
     * @memberof CharacterUDFType
     */
    name?: string;
    /**
     * Value of user defined field.
     * @type {string}
     * @memberof CharacterUDFType
     */
    value?: string;
    /**
     * Label of user defined field used by vendors or customers.
     * @type {string}
     * @memberof CharacterUDFType
     */
    alternateName?: string;
}

/**
 * Check if a given object implements the CharacterUDFType interface.
 */
export function instanceOfCharacterUDFType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CharacterUDFTypeFromJSON(json: any): CharacterUDFType {
    return CharacterUDFTypeFromJSONTyped(json, false);
}

export function CharacterUDFTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CharacterUDFType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'value': !exists(json, 'value') ? undefined : json['value'],
        'alternateName': !exists(json, 'alternateName') ? undefined : json['alternateName'],
    };
}

export function CharacterUDFTypeToJSON(value?: CharacterUDFType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'value': value.value,
        'alternateName': value.alternateName,
    };
}

