"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseApplicationSettingTypeToJSON = exports.BaseApplicationSettingTypeFromJSONTyped = exports.BaseApplicationSettingTypeFromJSON = exports.instanceOfBaseApplicationSettingType = exports.BaseApplicationSettingTypeValueTypeEnum = exports.BaseApplicationSettingTypeScopeEnum = void 0;
const runtime_1 = require("../runtime");
const ApplicationSettingConversionType_1 = require("./ApplicationSettingConversionType");
const ApplicationSettingTypeType_1 = require("./ApplicationSettingTypeType");
/**
 * @export
 */
exports.BaseApplicationSettingTypeScopeEnum = {
    P: 'P',
    G: 'G',
    Ch: 'Ch',
    C: 'C'
};
/**
 * @export
 */
exports.BaseApplicationSettingTypeValueTypeEnum = {
    Yn: 'Yn',
    Integer: 'Integer',
    String: 'String',
    SingleSelectLov: 'SingleSelectLov',
    MultiSelectLov: 'MultiSelectLov',
    ShuttleLov: 'ShuttleLov',
    Custom: 'Custom',
    Double: 'Double',
    Secure: 'Secure'
};
/**
 * Check if a given object implements the BaseApplicationSettingType interface.
 */
function instanceOfBaseApplicationSettingType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfBaseApplicationSettingType = instanceOfBaseApplicationSettingType;
function BaseApplicationSettingTypeFromJSON(json) {
    return BaseApplicationSettingTypeFromJSONTyped(json, false);
}
exports.BaseApplicationSettingTypeFromJSON = BaseApplicationSettingTypeFromJSON;
function BaseApplicationSettingTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'conversionType': !(0, runtime_1.exists)(json, 'conversionType') ? undefined : (0, ApplicationSettingConversionType_1.ApplicationSettingConversionTypeFromJSON)(json['conversionType']),
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'displayName': !(0, runtime_1.exists)(json, 'displayName') ? undefined : json['displayName'],
        'editAllowed': !(0, runtime_1.exists)(json, 'editAllowed') ? undefined : json['editAllowed'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'name': !(0, runtime_1.exists)(json, 'name') ? undefined : json['name'],
        'scope': !(0, runtime_1.exists)(json, 'scope') ? undefined : json['scope'],
        'sequence': !(0, runtime_1.exists)(json, 'sequence') ? undefined : json['sequence'],
        'shortDescription': !(0, runtime_1.exists)(json, 'shortDescription') ? undefined : json['shortDescription'],
        'type': !(0, runtime_1.exists)(json, 'type') ? undefined : (0, ApplicationSettingTypeType_1.ApplicationSettingTypeTypeFromJSON)(json['type']),
        'value': !(0, runtime_1.exists)(json, 'value') ? undefined : json['value'],
        'valueType': !(0, runtime_1.exists)(json, 'valueType') ? undefined : json['valueType'],
        'wildCardMatch': !(0, runtime_1.exists)(json, 'wildCardMatch') ? undefined : json['wildCardMatch'],
    };
}
exports.BaseApplicationSettingTypeFromJSONTyped = BaseApplicationSettingTypeFromJSONTyped;
function BaseApplicationSettingTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'conversionType': (0, ApplicationSettingConversionType_1.ApplicationSettingConversionTypeToJSON)(value.conversionType),
        'description': value.description,
        'displayName': value.displayName,
        'editAllowed': value.editAllowed,
        'hotelId': value.hotelId,
        'name': value.name,
        'scope': value.scope,
        'sequence': value.sequence,
        'shortDescription': value.shortDescription,
        'type': (0, ApplicationSettingTypeType_1.ApplicationSettingTypeTypeToJSON)(value.type),
        'value': value.value,
        'valueType': value.valueType,
        'wildCardMatch': value.wildCardMatch,
    };
}
exports.BaseApplicationSettingTypeToJSON = BaseApplicationSettingTypeToJSON;
