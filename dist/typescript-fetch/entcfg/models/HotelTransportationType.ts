/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RelativePositionType } from './RelativePositionType';
import {
    RelativePositionTypeFromJSON,
    RelativePositionTypeFromJSONTyped,
    RelativePositionTypeToJSON,
} from './RelativePositionType';
import type { TelephoneType } from './TelephoneType';
import {
    TelephoneTypeFromJSON,
    TelephoneTypeFromJSONTyped,
    TelephoneTypeToJSON,
} from './TelephoneType';
import type { URLType } from './URLType';
import {
    URLTypeFromJSON,
    URLTypeFromJSONTyped,
    URLTypeToJSON,
} from './URLType';

/**
 * Information about the transportations of the hotel.
 * @export
 * @interface HotelTransportationType
 */
export interface HotelTransportationType {
    /**
     * 
     * @type {TelephoneType}
     * @memberof HotelTransportationType
     */
    phoneNumber?: TelephoneType;
    /**
     * 
     * @type {RelativePositionType}
     * @memberof HotelTransportationType
     */
    relativePosition?: RelativePositionType;
    /**
     * The description of the transportation.
     * @type {string}
     * @memberof HotelTransportationType
     */
    description?: string;
    /**
     * Comments about the transportation.
     * @type {string}
     * @memberof HotelTransportationType
     */
    comments?: string;
    /**
     * The price range of the transportation.
     * @type {string}
     * @memberof HotelTransportationType
     */
    priceRange?: string;
    /**
     * 
     * @type {URLType}
     * @memberof HotelTransportationType
     */
    website?: URLType;
    /**
     * 
     * @type {Array<string>}
     * @memberof HotelTransportationType
     */
    keyOptions?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof HotelTransportationType
     */
    transportationCode?: string;
    /**
     * 
     * @type {string}
     * @memberof HotelTransportationType
     */
    label?: string;
    /**
     * 
     * @type {number}
     * @memberof HotelTransportationType
     */
    orderBy?: number;
}

/**
 * Check if a given object implements the HotelTransportationType interface.
 */
export function instanceOfHotelTransportationType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelTransportationTypeFromJSON(json: any): HotelTransportationType {
    return HotelTransportationTypeFromJSONTyped(json, false);
}

export function HotelTransportationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelTransportationType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'phoneNumber': !exists(json, 'phoneNumber') ? undefined : TelephoneTypeFromJSON(json['phoneNumber']),
        'relativePosition': !exists(json, 'relativePosition') ? undefined : RelativePositionTypeFromJSON(json['relativePosition']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'comments': !exists(json, 'comments') ? undefined : json['comments'],
        'priceRange': !exists(json, 'priceRange') ? undefined : json['priceRange'],
        'website': !exists(json, 'website') ? undefined : URLTypeFromJSON(json['website']),
        'keyOptions': !exists(json, 'keyOptions') ? undefined : json['keyOptions'],
        'transportationCode': !exists(json, 'transportationCode') ? undefined : json['transportationCode'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'orderBy': !exists(json, 'orderBy') ? undefined : json['orderBy'],
    };
}

export function HotelTransportationTypeToJSON(value?: HotelTransportationType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'phoneNumber': TelephoneTypeToJSON(value.phoneNumber),
        'relativePosition': RelativePositionTypeToJSON(value.relativePosition),
        'description': value.description,
        'comments': value.comments,
        'priceRange': value.priceRange,
        'website': URLTypeToJSON(value.website),
        'keyOptions': value.keyOptions,
        'transportationCode': value.transportationCode,
        'label': value.label,
        'orderBy': value.orderBy,
    };
}

