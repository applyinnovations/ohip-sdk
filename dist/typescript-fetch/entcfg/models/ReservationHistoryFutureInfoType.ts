/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FutureListType } from './FutureListType';
import {
    FutureListTypeFromJSON,
    FutureListTypeFromJSONTyped,
    FutureListTypeToJSON,
} from './FutureListType';
import type { HistoryListType } from './HistoryListType';
import {
    HistoryListTypeFromJSON,
    HistoryListTypeFromJSONTyped,
    HistoryListTypeToJSON,
} from './HistoryListType';

/**
 * Information of History and Future Reservation details attached to Profiles.
 * @export
 * @interface ReservationHistoryFutureInfoType
 */
export interface ReservationHistoryFutureInfoType {
    /**
     * 
     * @type {HistoryListType}
     * @memberof ReservationHistoryFutureInfoType
     */
    historyList?: HistoryListType;
    /**
     * 
     * @type {FutureListType}
     * @memberof ReservationHistoryFutureInfoType
     */
    futureList?: FutureListType;
}

/**
 * Check if a given object implements the ReservationHistoryFutureInfoType interface.
 */
export function instanceOfReservationHistoryFutureInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReservationHistoryFutureInfoTypeFromJSON(json: any): ReservationHistoryFutureInfoType {
    return ReservationHistoryFutureInfoTypeFromJSONTyped(json, false);
}

export function ReservationHistoryFutureInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationHistoryFutureInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'historyList': !exists(json, 'historyList') ? undefined : HistoryListTypeFromJSON(json['historyList']),
        'futureList': !exists(json, 'futureList') ? undefined : FutureListTypeFromJSON(json['futureList']),
    };
}

export function ReservationHistoryFutureInfoTypeToJSON(value?: ReservationHistoryFutureInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'historyList': HistoryListTypeToJSON(value.historyList),
        'futureList': FutureListTypeToJSON(value.futureList),
    };
}

