/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DefaultNoteTextDetailType } from './DefaultNoteTextDetailType';
import {
    DefaultNoteTextDetailTypeFromJSON,
    DefaultNoteTextDetailTypeFromJSONTyped,
    DefaultNoteTextDetailTypeToJSON,
} from './DefaultNoteTextDetailType';
import type { GenericHotelCodeCodeType } from './GenericHotelCodeCodeType';
import {
    GenericHotelCodeCodeTypeFromJSON,
    GenericHotelCodeCodeTypeFromJSONTyped,
    GenericHotelCodeCodeTypeToJSON,
} from './GenericHotelCodeCodeType';

/**
 * Note Types Information Type.
 * @export
 * @interface NoteTypeType
 */
export interface NoteTypeType {
    /**
     * Code of the Note Types.
     * @type {string}
     * @memberof NoteTypeType
     */
    code?: string;
    /**
     * Default Note Text if Note Type has default note.
     * @type {string}
     * @memberof NoteTypeType
     */
    defaultNoteText?: string;
    /**
     * Indicates if the Note Types Code is default.
     * @type {boolean}
     * @memberof NoteTypeType
     */
    defaultNoteType?: boolean;
    /**
     * Indicates if the Note Types Code has at least one default text defined.
     * @type {boolean}
     * @memberof NoteTypeType
     */
    defaultText?: boolean;
    /**
     * Indicates if the Note Types Code has department notes.
     * @type {boolean}
     * @memberof NoteTypeType
     */
    departmentNotes?: boolean;
    /**
     * List of HotelCode and Code combinations.
     * @type {Array<GenericHotelCodeCodeType>}
     * @memberof NoteTypeType
     */
    departments?: Array<GenericHotelCodeCodeType>;
    /**
     * Description of the Note Types Code.
     * @type {string}
     * @memberof NoteTypeType
     */
    description?: string;
    /**
     * Display Sequence.
     * @type {number}
     * @memberof NoteTypeType
     */
    displaySequence?: number;
    /**
     * Indicates if the Note Types Code is globally allowed.
     * @type {boolean}
     * @memberof NoteTypeType
     */
    globalAllowed?: boolean;
    /**
     * Indicates if the Note Types Code is inactive.
     * @type {boolean}
     * @memberof NoteTypeType
     */
    inactive?: boolean;
    /**
     * Indicates if the Note Types Code is internal.
     * @type {boolean}
     * @memberof NoteTypeType
     */
    internal?: boolean;
    /**
     * Notes Group of the Note Types code.
     * @type {string}
     * @memberof NoteTypeType
     */
    noteGroup?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NoteTypeType
     */
    notificationAreas?: Array<string>;
    /**
     * Indicates if the Note Types Code is override internal.
     * @type {boolean}
     * @memberof NoteTypeType
     */
    overrideInternal?: boolean;
    /**
     * Collection of individual Default Note Text details.
     * @type {Array<DefaultNoteTextDetailType>}
     * @memberof NoteTypeType
     */
    propertyDefaultNoteTexts?: Array<DefaultNoteTextDetailType>;
}

/**
 * Check if a given object implements the NoteTypeType interface.
 */
export function instanceOfNoteTypeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function NoteTypeTypeFromJSON(json: any): NoteTypeType {
    return NoteTypeTypeFromJSONTyped(json, false);
}

export function NoteTypeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): NoteTypeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'defaultNoteText': !exists(json, 'defaultNoteText') ? undefined : json['defaultNoteText'],
        'defaultNoteType': !exists(json, 'defaultNoteType') ? undefined : json['defaultNoteType'],
        'defaultText': !exists(json, 'defaultText') ? undefined : json['defaultText'],
        'departmentNotes': !exists(json, 'departmentNotes') ? undefined : json['departmentNotes'],
        'departments': !exists(json, 'departments') ? undefined : ((json['departments'] as Array<any>).map(GenericHotelCodeCodeTypeFromJSON)),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'displaySequence': !exists(json, 'displaySequence') ? undefined : json['displaySequence'],
        'globalAllowed': !exists(json, 'globalAllowed') ? undefined : json['globalAllowed'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'internal': !exists(json, 'internal') ? undefined : json['internal'],
        'noteGroup': !exists(json, 'noteGroup') ? undefined : json['noteGroup'],
        'notificationAreas': !exists(json, 'notificationAreas') ? undefined : json['notificationAreas'],
        'overrideInternal': !exists(json, 'overrideInternal') ? undefined : json['overrideInternal'],
        'propertyDefaultNoteTexts': !exists(json, 'propertyDefaultNoteTexts') ? undefined : ((json['propertyDefaultNoteTexts'] as Array<any>).map(DefaultNoteTextDetailTypeFromJSON)),
    };
}

export function NoteTypeTypeToJSON(value?: NoteTypeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'defaultNoteText': value.defaultNoteText,
        'defaultNoteType': value.defaultNoteType,
        'defaultText': value.defaultText,
        'departmentNotes': value.departmentNotes,
        'departments': value.departments === undefined ? undefined : ((value.departments as Array<any>).map(GenericHotelCodeCodeTypeToJSON)),
        'description': value.description,
        'displaySequence': value.displaySequence,
        'globalAllowed': value.globalAllowed,
        'inactive': value.inactive,
        'internal': value.internal,
        'noteGroup': value.noteGroup,
        'notificationAreas': value.notificationAreas,
        'overrideInternal': value.overrideInternal,
        'propertyDefaultNoteTexts': value.propertyDefaultNoteTexts === undefined ? undefined : ((value.propertyDefaultNoteTexts as Array<any>).map(DefaultNoteTextDetailTypeToJSON)),
    };
}

