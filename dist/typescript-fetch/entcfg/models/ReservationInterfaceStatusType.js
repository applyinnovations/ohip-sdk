"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReservationInterfaceStatusTypeToJSON = exports.ReservationInterfaceStatusTypeFromJSONTyped = exports.ReservationInterfaceStatusTypeFromJSON = exports.instanceOfReservationInterfaceStatusType = void 0;
const runtime_1 = require("../runtime");
const HotelInterfaceType_1 = require("./HotelInterfaceType");
const InterfaceRightsStatusType_1 = require("./InterfaceRightsStatusType");
/**
 * Check if a given object implements the ReservationInterfaceStatusType interface.
 */
function instanceOfReservationInterfaceStatusType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfReservationInterfaceStatusType = instanceOfReservationInterfaceStatusType;
function ReservationInterfaceStatusTypeFromJSON(json) {
    return ReservationInterfaceStatusTypeFromJSONTyped(json, false);
}
exports.ReservationInterfaceStatusTypeFromJSON = ReservationInterfaceStatusTypeFromJSON;
function ReservationInterfaceStatusTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'roomExtension': !(0, runtime_1.exists)(json, 'roomExtension') ? undefined : json['roomExtension'],
        'hotelInterface': !(0, runtime_1.exists)(json, 'hotelInterface') ? undefined : (0, HotelInterfaceType_1.HotelInterfaceTypeFromJSON)(json['hotelInterface']),
        'interfaceRights': !(0, runtime_1.exists)(json, 'interfaceRights') ? undefined : (json['interfaceRights'].map(InterfaceRightsStatusType_1.InterfaceRightsStatusTypeFromJSON)),
    };
}
exports.ReservationInterfaceStatusTypeFromJSONTyped = ReservationInterfaceStatusTypeFromJSONTyped;
function ReservationInterfaceStatusTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'roomExtension': value.roomExtension,
        'hotelInterface': (0, HotelInterfaceType_1.HotelInterfaceTypeToJSON)(value.hotelInterface),
        'interfaceRights': value.interfaceRights === undefined ? undefined : (value.interfaceRights.map(InterfaceRightsStatusType_1.InterfaceRightsStatusTypeToJSON)),
    };
}
exports.ReservationInterfaceStatusTypeToJSON = ReservationInterfaceStatusTypeToJSON;
