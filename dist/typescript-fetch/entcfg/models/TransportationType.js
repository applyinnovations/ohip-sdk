"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransportationTypeToJSON = exports.TransportationTypeFromJSONTyped = exports.TransportationTypeFromJSON = exports.instanceOfTransportationType = void 0;
const runtime_1 = require("../runtime");
const RelativePositionType_1 = require("./RelativePositionType");
const TelephoneType_1 = require("./TelephoneType");
const URLType_1 = require("./URLType");
/**
 * Check if a given object implements the TransportationType interface.
 */
function instanceOfTransportationType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfTransportationType = instanceOfTransportationType;
function TransportationTypeFromJSON(json) {
    return TransportationTypeFromJSONTyped(json, false);
}
exports.TransportationTypeFromJSON = TransportationTypeFromJSON;
function TransportationTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'comments': !(0, runtime_1.exists)(json, 'comments') ? undefined : json['comments'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'keyOptions': !(0, runtime_1.exists)(json, 'keyOptions') ? undefined : json['keyOptions'],
        'label': !(0, runtime_1.exists)(json, 'label') ? undefined : json['label'],
        'orderBy': !(0, runtime_1.exists)(json, 'orderBy') ? undefined : json['orderBy'],
        'phoneNumber': !(0, runtime_1.exists)(json, 'phoneNumber') ? undefined : (0, TelephoneType_1.TelephoneTypeFromJSON)(json['phoneNumber']),
        'priceRange': !(0, runtime_1.exists)(json, 'priceRange') ? undefined : json['priceRange'],
        'relativePosition': !(0, runtime_1.exists)(json, 'relativePosition') ? undefined : (0, RelativePositionType_1.RelativePositionTypeFromJSON)(json['relativePosition']),
        'transportationCode': !(0, runtime_1.exists)(json, 'transportationCode') ? undefined : json['transportationCode'],
        'website': !(0, runtime_1.exists)(json, 'website') ? undefined : (0, URLType_1.URLTypeFromJSON)(json['website']),
    };
}
exports.TransportationTypeFromJSONTyped = TransportationTypeFromJSONTyped;
function TransportationTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'comments': value.comments,
        'description': value.description,
        'hotelId': value.hotelId,
        'keyOptions': value.keyOptions,
        'label': value.label,
        'orderBy': value.orderBy,
        'phoneNumber': (0, TelephoneType_1.TelephoneTypeToJSON)(value.phoneNumber),
        'priceRange': value.priceRange,
        'relativePosition': (0, RelativePositionType_1.RelativePositionTypeToJSON)(value.relativePosition),
        'transportationCode': value.transportationCode,
        'website': (0, URLType_1.URLTypeToJSON)(value.website),
    };
}
exports.TransportationTypeToJSON = TransportationTypeToJSON;
