/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HotelDetailValueType } from './HotelDetailValueType';
import {
    HotelDetailValueTypeFromJSON,
    HotelDetailValueTypeFromJSONTyped,
    HotelDetailValueTypeToJSON,
} from './HotelDetailValueType';

/**
 * Base details used for storing information about a hotel detail.
 * @export
 * @interface HotelDetailType
 */
export interface HotelDetailType {
    /**
     * Specifies the hotel detail category.
     * @type {string}
     * @memberof HotelDetailType
     */
    category?: string;
    /**
     * Specifies the hotel detail code.
     * @type {string}
     * @memberof HotelDetailType
     */
    code?: string;
    /**
     * Specifies the hotel detail description.
     * @type {string}
     * @memberof HotelDetailType
     */
    description?: string;
    /**
     * Collection of property level hotel detail values.
     * @type {Array<HotelDetailValueType>}
     * @memberof HotelDetailType
     */
    hotelDetailValues?: Array<HotelDetailValueType>;
    /**
     * Specifies the hotel code of the hotel detail.
     * @type {string}
     * @memberof HotelDetailType
     */
    hotelId?: string;
    /**
     * Specifies the sorting sequence number for the hotel detail.
     * @type {number}
     * @memberof HotelDetailType
     */
    sequence?: number;
}

/**
 * Check if a given object implements the HotelDetailType interface.
 */
export function instanceOfHotelDetailType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelDetailTypeFromJSON(json: any): HotelDetailType {
    return HotelDetailTypeFromJSONTyped(json, false);
}

export function HotelDetailTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelDetailType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'category': !exists(json, 'category') ? undefined : json['category'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'hotelDetailValues': !exists(json, 'hotelDetailValues') ? undefined : ((json['hotelDetailValues'] as Array<any>).map(HotelDetailValueTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
    };
}

export function HotelDetailTypeToJSON(value?: HotelDetailType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'category': value.category,
        'code': value.code,
        'description': value.description,
        'hotelDetailValues': value.hotelDetailValues === undefined ? undefined : ((value.hotelDetailValues as Array<any>).map(HotelDetailValueTypeToJSON)),
        'hotelId': value.hotelId,
        'sequence': value.sequence,
    };
}

