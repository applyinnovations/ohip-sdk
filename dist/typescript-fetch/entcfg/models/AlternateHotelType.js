"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlternateHotelTypeToJSON = exports.AlternateHotelTypeFromJSONTyped = exports.AlternateHotelTypeFromJSON = exports.instanceOfAlternateHotelType = void 0;
const runtime_1 = require("../runtime");
const AddressType_1 = require("./AddressType");
const ChannelSummaryInfoType_1 = require("./ChannelSummaryInfoType");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const CurrencyExchangeRatesType_1 = require("./CurrencyExchangeRatesType");
const HotelAmenityType_1 = require("./HotelAmenityType");
const RateRoomDetailsType_1 = require("./RateRoomDetailsType");
const RelativePositionType_1 = require("./RelativePositionType");
const SellMessagesType_1 = require("./SellMessagesType");
const TelephoneType_1 = require("./TelephoneType");
/**
 * Check if a given object implements the AlternateHotelType interface.
 */
function instanceOfAlternateHotelType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfAlternateHotelType = instanceOfAlternateHotelType;
function AlternateHotelTypeFromJSON(json) {
    return AlternateHotelTypeFromJSONTyped(json, false);
}
exports.AlternateHotelTypeFromJSON = AlternateHotelTypeFromJSON;
function AlternateHotelTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'address': !(0, runtime_1.exists)(json, 'address') ? undefined : (0, AddressType_1.AddressTypeFromJSON)(json['address']),
        'alternate': !(0, runtime_1.exists)(json, 'alternate') ? undefined : json['alternate'],
        'alternateHotelCode': !(0, runtime_1.exists)(json, 'alternateHotelCode') ? undefined : json['alternateHotelCode'],
        'availableRooms': !(0, runtime_1.exists)(json, 'availableRooms') ? undefined : json['availableRooms'],
        'chainCode': !(0, runtime_1.exists)(json, 'chainCode') ? undefined : json['chainCode'],
        'chainName': !(0, runtime_1.exists)(json, 'chainName') ? undefined : json['chainName'],
        'channelSummaryInfo': !(0, runtime_1.exists)(json, 'channelSummaryInfo') ? undefined : (0, ChannelSummaryInfoType_1.ChannelSummaryInfoTypeFromJSON)(json['channelSummaryInfo']),
        'comments': !(0, runtime_1.exists)(json, 'comments') ? undefined : json['comments'],
        'contactNumbers': !(0, runtime_1.exists)(json, 'contactNumbers') ? undefined : (json['contactNumbers'].map(TelephoneType_1.TelephoneTypeFromJSON)),
        'currencyExchangeRates': !(0, runtime_1.exists)(json, 'currencyExchangeRates') ? undefined : (0, CurrencyExchangeRatesType_1.CurrencyExchangeRatesTypeFromJSON)(json['currencyExchangeRates']),
        'direction': !(0, runtime_1.exists)(json, 'direction') ? undefined : json['direction'],
        'displayOrder': !(0, runtime_1.exists)(json, 'displayOrder') ? undefined : json['displayOrder'],
        'event': !(0, runtime_1.exists)(json, 'event') ? undefined : json['event'],
        'hotelAmenities': !(0, runtime_1.exists)(json, 'hotelAmenities') ? undefined : (json['hotelAmenities'].map(HotelAmenityType_1.HotelAmenityTypeFromJSON)),
        'hotelCityCode': !(0, runtime_1.exists)(json, 'hotelCityCode') ? undefined : json['hotelCityCode'],
        'hotelCodeContext': !(0, runtime_1.exists)(json, 'hotelCodeContext') ? undefined : json['hotelCodeContext'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'hotelName': !(0, runtime_1.exists)(json, 'hotelName') ? undefined : json['hotelName'],
        'hotelType': !(0, runtime_1.exists)(json, 'hotelType') ? undefined : json['hotelType'],
        'inventoryRooms': !(0, runtime_1.exists)(json, 'inventoryRooms') ? undefined : json['inventoryRooms'],
        'maxRate': !(0, runtime_1.exists)(json, 'maxRate') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['maxRate']),
        'minRate': !(0, runtime_1.exists)(json, 'minRate') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['minRate']),
        'negotiated': !(0, runtime_1.exists)(json, 'negotiated') ? undefined : json['negotiated'],
        'newAlternateHotelCode': !(0, runtime_1.exists)(json, 'newAlternateHotelCode') ? undefined : json['newAlternateHotelCode'],
        'rateRoomDetails': !(0, runtime_1.exists)(json, 'rateRoomDetails') ? undefined : (0, RateRoomDetailsType_1.RateRoomDetailsTypeFromJSON)(json['rateRoomDetails']),
        'reciprocalRelationship': !(0, runtime_1.exists)(json, 'reciprocalRelationship') ? undefined : json['reciprocalRelationship'],
        'relativePosition': !(0, runtime_1.exists)(json, 'relativePosition') ? undefined : (0, RelativePositionType_1.RelativePositionTypeFromJSON)(json['relativePosition']),
        'sellMessages': !(0, runtime_1.exists)(json, 'sellMessages') ? undefined : (0, SellMessagesType_1.SellMessagesTypeFromJSON)(json['sellMessages']),
    };
}
exports.AlternateHotelTypeFromJSONTyped = AlternateHotelTypeFromJSONTyped;
function AlternateHotelTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'address': (0, AddressType_1.AddressTypeToJSON)(value.address),
        'alternate': value.alternate,
        'alternateHotelCode': value.alternateHotelCode,
        'availableRooms': value.availableRooms,
        'chainCode': value.chainCode,
        'chainName': value.chainName,
        'channelSummaryInfo': (0, ChannelSummaryInfoType_1.ChannelSummaryInfoTypeToJSON)(value.channelSummaryInfo),
        'comments': value.comments,
        'contactNumbers': value.contactNumbers === undefined ? undefined : (value.contactNumbers.map(TelephoneType_1.TelephoneTypeToJSON)),
        'currencyExchangeRates': (0, CurrencyExchangeRatesType_1.CurrencyExchangeRatesTypeToJSON)(value.currencyExchangeRates),
        'direction': value.direction,
        'displayOrder': value.displayOrder,
        'event': value.event,
        'hotelAmenities': value.hotelAmenities === undefined ? undefined : (value.hotelAmenities.map(HotelAmenityType_1.HotelAmenityTypeToJSON)),
        'hotelCityCode': value.hotelCityCode,
        'hotelCodeContext': value.hotelCodeContext,
        'hotelId': value.hotelId,
        'hotelName': value.hotelName,
        'hotelType': value.hotelType,
        'inventoryRooms': value.inventoryRooms,
        'maxRate': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.maxRate),
        'minRate': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.minRate),
        'negotiated': value.negotiated,
        'newAlternateHotelCode': value.newAlternateHotelCode,
        'rateRoomDetails': (0, RateRoomDetailsType_1.RateRoomDetailsTypeToJSON)(value.rateRoomDetails),
        'reciprocalRelationship': value.reciprocalRelationship,
        'relativePosition': (0, RelativePositionType_1.RelativePositionTypeToJSON)(value.relativePosition),
        'sellMessages': (0, SellMessagesType_1.SellMessagesTypeToJSON)(value.sellMessages),
    };
}
exports.AlternateHotelTypeToJSON = AlternateHotelTypeToJSON;
