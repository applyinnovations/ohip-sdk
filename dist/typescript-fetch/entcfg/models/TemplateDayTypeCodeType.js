"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TemplateDayTypeCodeTypeToJSON = exports.TemplateDayTypeCodeTypeFromJSONTyped = exports.TemplateDayTypeCodeTypeFromJSON = exports.instanceOfTemplateDayTypeCodeType = void 0;
const runtime_1 = require("../runtime");
const ColorType_1 = require("./ColorType");
/**
 * Check if a given object implements the TemplateDayTypeCodeType interface.
 */
function instanceOfTemplateDayTypeCodeType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfTemplateDayTypeCodeType = instanceOfTemplateDayTypeCodeType;
function TemplateDayTypeCodeTypeFromJSON(json) {
    return TemplateDayTypeCodeTypeFromJSONTyped(json, false);
}
exports.TemplateDayTypeCodeTypeFromJSON = TemplateDayTypeCodeTypeFromJSON;
function TemplateDayTypeCodeTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'code': !(0, runtime_1.exists)(json, 'code') ? undefined : json['code'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'multiplier': !(0, runtime_1.exists)(json, 'multiplier') ? undefined : json['multiplier'],
        'adder': !(0, runtime_1.exists)(json, 'adder') ? undefined : json['adder'],
        'color': !(0, runtime_1.exists)(json, 'color') ? undefined : (0, ColorType_1.ColorTypeFromJSON)(json['color']),
        'sellSequence': !(0, runtime_1.exists)(json, 'sellSequence') ? undefined : json['sellSequence'],
    };
}
exports.TemplateDayTypeCodeTypeFromJSONTyped = TemplateDayTypeCodeTypeFromJSONTyped;
function TemplateDayTypeCodeTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'code': value.code,
        'description': value.description,
        'multiplier': value.multiplier,
        'adder': value.adder,
        'color': (0, ColorType_1.ColorTypeToJSON)(value.color),
        'sellSequence': value.sellSequence,
    };
}
exports.TemplateDayTypeCodeTypeToJSON = TemplateDayTypeCodeTypeToJSON;
