/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { ApplicationSettingConversionType } from './ApplicationSettingConversionType';
import type { ApplicationSettingLevelType } from './ApplicationSettingLevelType';
import type { ApplicationSettingTypeType } from './ApplicationSettingTypeType';
import type { BaseApplicationSettingType } from './BaseApplicationSettingType';
/**
 * Internal settings that can be of a certain valueType.
 * @export
 * @interface ApplicationSettingType
 */
export interface ApplicationSettingType {
    /**
     *
     * @type {ApplicationSettingConversionType}
     * @memberof ApplicationSettingType
     */
    conversionType?: ApplicationSettingConversionType;
    /**
     *
     * @type {string}
     * @memberof ApplicationSettingType
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ApplicationSettingType
     */
    displayName?: string;
    /**
     *
     * @type {boolean}
     * @memberof ApplicationSettingType
     */
    editAllowed?: boolean;
    /**
     * Each configuration item will come with a HotelCode which will help the configuration to specify what context the update has to be. Eg. _Global,ORS,'CRO', etc.
     * @type {string}
     * @memberof ApplicationSettingType
     */
    hotelId?: string;
    /**
     *
     * @type {string}
     * @memberof ApplicationSettingType
     */
    levelCode?: string;
    /**
     *
     * @type {ApplicationSettingLevelType}
     * @memberof ApplicationSettingType
     */
    levelType?: ApplicationSettingLevelType;
    /**
     *
     * @type {string}
     * @memberof ApplicationSettingType
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ApplicationSettingType
     */
    scope?: ApplicationSettingTypeScopeEnum;
    /**
     *
     * @type {number}
     * @memberof ApplicationSettingType
     */
    sequence?: number;
    /**
     *
     * @type {Array<BaseApplicationSettingType>}
     * @memberof ApplicationSettingType
     */
    settings?: Array<BaseApplicationSettingType>;
    /**
     *
     * @type {string}
     * @memberof ApplicationSettingType
     */
    shortDescription?: string;
    /**
     *
     * @type {ApplicationSettingTypeType}
     * @memberof ApplicationSettingType
     */
    type?: ApplicationSettingTypeType;
    /**
     *
     * @type {string}
     * @memberof ApplicationSettingType
     */
    value?: string;
    /**
     *
     * @type {string}
     * @memberof ApplicationSettingType
     */
    valueType?: ApplicationSettingTypeValueTypeEnum;
    /**
     * A flag which indicate whether a wild card search should be made.
     * @type {boolean}
     * @memberof ApplicationSettingType
     */
    wildCardMatch?: boolean;
}
/**
 * @export
 */
export declare const ApplicationSettingTypeScopeEnum: {
    readonly P: "P";
    readonly G: "G";
    readonly Ch: "Ch";
    readonly C: "C";
};
export type ApplicationSettingTypeScopeEnum = typeof ApplicationSettingTypeScopeEnum[keyof typeof ApplicationSettingTypeScopeEnum];
/**
 * @export
 */
export declare const ApplicationSettingTypeValueTypeEnum: {
    readonly Yn: "Yn";
    readonly Integer: "Integer";
    readonly String: "String";
    readonly SingleSelectLov: "SingleSelectLov";
    readonly MultiSelectLov: "MultiSelectLov";
    readonly ShuttleLov: "ShuttleLov";
    readonly Custom: "Custom";
    readonly Double: "Double";
    readonly Secure: "Secure";
};
export type ApplicationSettingTypeValueTypeEnum = typeof ApplicationSettingTypeValueTypeEnum[keyof typeof ApplicationSettingTypeValueTypeEnum];
/**
 * Check if a given object implements the ApplicationSettingType interface.
 */
export declare function instanceOfApplicationSettingType(value: object): boolean;
export declare function ApplicationSettingTypeFromJSON(json: any): ApplicationSettingType;
export declare function ApplicationSettingTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationSettingType;
export declare function ApplicationSettingTypeToJSON(value?: ApplicationSettingType | null): any;
