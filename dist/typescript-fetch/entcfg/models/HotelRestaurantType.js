"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HotelRestaurantTypeToJSON = exports.HotelRestaurantTypeFromJSONTyped = exports.HotelRestaurantTypeFromJSON = exports.instanceOfHotelRestaurantType = void 0;
const runtime_1 = require("../runtime");
const RestaurantCategoryType_1 = require("./RestaurantCategoryType");
const TimeSpanType_1 = require("./TimeSpanType");
/**
 * Check if a given object implements the HotelRestaurantType interface.
 */
function instanceOfHotelRestaurantType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfHotelRestaurantType = instanceOfHotelRestaurantType;
function HotelRestaurantTypeFromJSON(json) {
    return HotelRestaurantTypeFromJSONTyped(json, false);
}
exports.HotelRestaurantTypeFromJSON = HotelRestaurantTypeFromJSON;
function HotelRestaurantTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'restaurantName': !(0, runtime_1.exists)(json, 'restaurantName') ? undefined : json['restaurantName'],
        'restaurantType': !(0, runtime_1.exists)(json, 'restaurantType') ? undefined : json['restaurantType'],
        'hours': !(0, runtime_1.exists)(json, 'hours') ? undefined : json['hours'],
        'priceRange': !(0, runtime_1.exists)(json, 'priceRange') ? undefined : json['priceRange'],
        'comments': !(0, runtime_1.exists)(json, 'comments') ? undefined : json['comments'],
        'category': !(0, runtime_1.exists)(json, 'category') ? undefined : (0, RestaurantCategoryType_1.RestaurantCategoryTypeFromJSON)(json['category']),
        'timeSpan': !(0, runtime_1.exists)(json, 'timeSpan') ? undefined : (0, TimeSpanType_1.TimeSpanTypeFromJSON)(json['timeSpan']),
        'newRestaurantCode': !(0, runtime_1.exists)(json, 'newRestaurantCode') ? undefined : json['newRestaurantCode'],
        'restaurantCode': !(0, runtime_1.exists)(json, 'restaurantCode') ? undefined : json['restaurantCode'],
        'orderBy': !(0, runtime_1.exists)(json, 'orderBy') ? undefined : json['orderBy'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
    };
}
exports.HotelRestaurantTypeFromJSONTyped = HotelRestaurantTypeFromJSONTyped;
function HotelRestaurantTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'restaurantName': value.restaurantName,
        'restaurantType': value.restaurantType,
        'hours': value.hours,
        'priceRange': value.priceRange,
        'comments': value.comments,
        'category': (0, RestaurantCategoryType_1.RestaurantCategoryTypeToJSON)(value.category),
        'timeSpan': (0, TimeSpanType_1.TimeSpanTypeToJSON)(value.timeSpan),
        'newRestaurantCode': value.newRestaurantCode,
        'restaurantCode': value.restaurantCode,
        'orderBy': value.orderBy,
        'hotelId': value.hotelId,
    };
}
exports.HotelRestaurantTypeToJSON = HotelRestaurantTypeToJSON;
