"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpsellInfoTypeToJSON = exports.UpsellInfoTypeFromJSONTyped = exports.UpsellInfoTypeFromJSON = exports.instanceOfUpsellInfoType = void 0;
const runtime_1 = require("../runtime");
const UpsellInfoTypeOriginalInfo_1 = require("./UpsellInfoTypeOriginalInfo");
const UpsellInfoTypeUpsellInfo_1 = require("./UpsellInfoTypeUpsellInfo");
/**
 * Check if a given object implements the UpsellInfoType interface.
 */
function instanceOfUpsellInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfUpsellInfoType = instanceOfUpsellInfoType;
function UpsellInfoTypeFromJSON(json) {
    return UpsellInfoTypeFromJSONTyped(json, false);
}
exports.UpsellInfoTypeFromJSON = UpsellInfoTypeFromJSON;
function UpsellInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'originalInfo': !(0, runtime_1.exists)(json, 'originalInfo') ? undefined : (0, UpsellInfoTypeOriginalInfo_1.UpsellInfoTypeOriginalInfoFromJSON)(json['originalInfo']),
        'upsellInfo': !(0, runtime_1.exists)(json, 'upsellInfo') ? undefined : (0, UpsellInfoTypeUpsellInfo_1.UpsellInfoTypeUpsellInfoFromJSON)(json['upsellInfo']),
    };
}
exports.UpsellInfoTypeFromJSONTyped = UpsellInfoTypeFromJSONTyped;
function UpsellInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'originalInfo': (0, UpsellInfoTypeOriginalInfo_1.UpsellInfoTypeOriginalInfoToJSON)(value.originalInfo),
        'upsellInfo': (0, UpsellInfoTypeUpsellInfo_1.UpsellInfoTypeUpsellInfoToJSON)(value.upsellInfo),
    };
}
exports.UpsellInfoTypeToJSON = UpsellInfoTypeToJSON;
