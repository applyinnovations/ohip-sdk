"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HotelAirportTypeToJSON = exports.HotelAirportTypeFromJSONTyped = exports.HotelAirportTypeFromJSON = exports.instanceOfHotelAirportType = void 0;
const runtime_1 = require("../runtime");
const RelativePositionType_1 = require("./RelativePositionType");
const TransportationCodeListType_1 = require("./TransportationCodeListType");
/**
 * Check if a given object implements the HotelAirportType interface.
 */
function instanceOfHotelAirportType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfHotelAirportType = instanceOfHotelAirportType;
function HotelAirportTypeFromJSON(json) {
    return HotelAirportTypeFromJSONTyped(json, false);
}
exports.HotelAirportTypeFromJSON = HotelAirportTypeFromJSON;
function HotelAirportTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'airportCode': !(0, runtime_1.exists)(json, 'airportCode') ? undefined : json['airportCode'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'direction': !(0, runtime_1.exists)(json, 'direction') ? undefined : json['direction'],
        'orderSequence': !(0, runtime_1.exists)(json, 'orderSequence') ? undefined : json['orderSequence'],
        'relativePosition': !(0, runtime_1.exists)(json, 'relativePosition') ? undefined : (0, RelativePositionType_1.RelativePositionTypeFromJSON)(json['relativePosition']),
        'transportationList': !(0, runtime_1.exists)(json, 'transportationList') ? undefined : (0, TransportationCodeListType_1.TransportationCodeListTypeFromJSON)(json['transportationList']),
    };
}
exports.HotelAirportTypeFromJSONTyped = HotelAirportTypeFromJSONTyped;
function HotelAirportTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'airportCode': value.airportCode,
        'description': value.description,
        'direction': value.direction,
        'orderSequence': value.orderSequence,
        'relativePosition': (0, RelativePositionType_1.RelativePositionTypeToJSON)(value.relativePosition),
        'transportationList': (0, TransportationCodeListType_1.TransportationCodeListTypeToJSON)(value.transportationList),
    };
}
exports.HotelAirportTypeToJSON = HotelAirportTypeToJSON;
