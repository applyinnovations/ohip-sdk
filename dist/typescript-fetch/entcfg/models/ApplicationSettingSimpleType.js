"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationSettingSimpleTypeToJSON = exports.ApplicationSettingSimpleTypeFromJSONTyped = exports.ApplicationSettingSimpleTypeFromJSON = exports.instanceOfApplicationSettingSimpleType = void 0;
const runtime_1 = require("../runtime");
const ApplicationSettingLevelType_1 = require("./ApplicationSettingLevelType");
/**
 * Check if a given object implements the ApplicationSettingSimpleType interface.
 */
function instanceOfApplicationSettingSimpleType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfApplicationSettingSimpleType = instanceOfApplicationSettingSimpleType;
function ApplicationSettingSimpleTypeFromJSON(json) {
    return ApplicationSettingSimpleTypeFromJSONTyped(json, false);
}
exports.ApplicationSettingSimpleTypeFromJSON = ApplicationSettingSimpleTypeFromJSON;
function ApplicationSettingSimpleTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'configurations': !(0, runtime_1.exists)(json, 'configurations') ? undefined : (json['configurations'].map(ApplicationSettingSimpleTypeFromJSON)),
        'name': !(0, runtime_1.exists)(json, 'name') ? undefined : json['name'],
        'levelType': !(0, runtime_1.exists)(json, 'levelType') ? undefined : (0, ApplicationSettingLevelType_1.ApplicationSettingLevelTypeFromJSON)(json['levelType']),
        'levelCode': !(0, runtime_1.exists)(json, 'levelCode') ? undefined : json['levelCode'],
        'value': !(0, runtime_1.exists)(json, 'value') ? undefined : json['value'],
    };
}
exports.ApplicationSettingSimpleTypeFromJSONTyped = ApplicationSettingSimpleTypeFromJSONTyped;
function ApplicationSettingSimpleTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'configurations': value.configurations === undefined ? undefined : (value.configurations.map(ApplicationSettingSimpleTypeToJSON)),
        'name': value.name,
        'levelType': (0, ApplicationSettingLevelType_1.ApplicationSettingLevelTypeToJSON)(value.levelType),
        'levelCode': value.levelCode,
        'value': value.value,
    };
}
exports.ApplicationSettingSimpleTypeToJSON = ApplicationSettingSimpleTypeToJSON;
