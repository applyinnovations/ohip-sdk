"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivityLogTypeToJSON = exports.ActivityLogTypeFromJSONTyped = exports.ActivityLogTypeFromJSON = exports.instanceOfActivityLogType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the ActivityLogType interface.
 */
function instanceOfActivityLogType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfActivityLogType = instanceOfActivityLogType;
function ActivityLogTypeFromJSON(json) {
    return ActivityLogTypeFromJSONTyped(json, false);
}
exports.ActivityLogTypeFromJSON = ActivityLogTypeFromJSON;
function ActivityLogTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'module': !(0, runtime_1.exists)(json, 'module') ? undefined : json['module'],
        'logDate': !(0, runtime_1.exists)(json, 'logDate') ? undefined : json['logDate'],
        'refActionId': !(0, runtime_1.exists)(json, 'refActionId') ? undefined : json['refActionId'],
        'logUserId': !(0, runtime_1.exists)(json, 'logUserId') ? undefined : json['logUserId'],
        'logUserName': !(0, runtime_1.exists)(json, 'logUserName') ? undefined : json['logUserName'],
        'machineStation': !(0, runtime_1.exists)(json, 'machineStation') ? undefined : json['machineStation'],
        'croCode': !(0, runtime_1.exists)(json, 'croCode') ? undefined : json['croCode'],
        'actionType': !(0, runtime_1.exists)(json, 'actionType') ? undefined : json['actionType'],
        'actionDescription': !(0, runtime_1.exists)(json, 'actionDescription') ? undefined : json['actionDescription'],
        'iPAddress': !(0, runtime_1.exists)(json, 'iPAddress') ? undefined : json['iPAddress'],
        'deviceCode': !(0, runtime_1.exists)(json, 'deviceCode') ? undefined : json['deviceCode'],
    };
}
exports.ActivityLogTypeFromJSONTyped = ActivityLogTypeFromJSONTyped;
function ActivityLogTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'module': value.module,
        'logDate': value.logDate,
        'refActionId': value.refActionId,
        'logUserId': value.logUserId,
        'logUserName': value.logUserName,
        'machineStation': value.machineStation,
        'croCode': value.croCode,
        'actionType': value.actionType,
        'actionDescription': value.actionDescription,
        'iPAddress': value.iPAddress,
        'deviceCode': value.deviceCode,
    };
}
exports.ActivityLogTypeToJSON = ActivityLogTypeToJSON;
