"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Inventory API
 * APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HotelInventoryTypeToJSON = exports.HotelInventoryTypeFromJSONTyped = exports.HotelInventoryTypeFromJSON = exports.instanceOfHotelInventoryType = void 0;
const runtime_1 = require("../runtime");
const InventoryCountsListType_1 = require("./InventoryCountsListType");
const InventoryLevelCountsListType_1 = require("./InventoryLevelCountsListType");
/**
 * Check if a given object implements the HotelInventoryType interface.
 */
function instanceOfHotelInventoryType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfHotelInventoryType = instanceOfHotelInventoryType;
function HotelInventoryTypeFromJSON(json) {
    return HotelInventoryTypeFromJSONTyped(json, false);
}
exports.HotelInventoryTypeFromJSON = HotelInventoryTypeFromJSON;
function HotelInventoryTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'houseInventory': !(0, runtime_1.exists)(json, 'houseInventory') ? undefined : (0, InventoryCountsListType_1.InventoryCountsListTypeFromJSON)(json['houseInventory']),
        'roomClassInventories': !(0, runtime_1.exists)(json, 'roomClassInventories') ? undefined : (json['roomClassInventories'].map(InventoryLevelCountsListType_1.InventoryLevelCountsListTypeFromJSON)),
        'roomTypeInventories': !(0, runtime_1.exists)(json, 'roomTypeInventories') ? undefined : (json['roomTypeInventories'].map(InventoryLevelCountsListType_1.InventoryLevelCountsListTypeFromJSON)),
    };
}
exports.HotelInventoryTypeFromJSONTyped = HotelInventoryTypeFromJSONTyped;
function HotelInventoryTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'houseInventory': (0, InventoryCountsListType_1.InventoryCountsListTypeToJSON)(value.houseInventory),
        'roomClassInventories': value.roomClassInventories === undefined ? undefined : (value.roomClassInventories.map(InventoryLevelCountsListType_1.InventoryLevelCountsListTypeToJSON)),
        'roomTypeInventories': value.roomTypeInventories === undefined ? undefined : (value.roomTypeInventories.map(InventoryLevelCountsListType_1.InventoryLevelCountsListTypeToJSON)),
    };
}
exports.HotelInventoryTypeToJSON = HotelInventoryTypeToJSON;
