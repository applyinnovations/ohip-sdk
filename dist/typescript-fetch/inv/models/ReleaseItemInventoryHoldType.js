"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Inventory API
 * APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReleaseItemInventoryHoldTypeToJSON = exports.ReleaseItemInventoryHoldTypeFromJSONTyped = exports.ReleaseItemInventoryHoldTypeFromJSON = exports.instanceOfReleaseItemInventoryHoldType = void 0;
const runtime_1 = require("../runtime");
const HeldByType_1 = require("./HeldByType");
const TimeSpanType_1 = require("./TimeSpanType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the ReleaseItemInventoryHoldType interface.
 */
function instanceOfReleaseItemInventoryHoldType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfReleaseItemInventoryHoldType = instanceOfReleaseItemInventoryHoldType;
function ReleaseItemInventoryHoldTypeFromJSON(json) {
    return ReleaseItemInventoryHoldTypeFromJSONTyped(json, false);
}
exports.ReleaseItemInventoryHoldTypeFromJSON = ReleaseItemInventoryHoldTypeFromJSON;
function ReleaseItemInventoryHoldTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'heldById': !(0, runtime_1.exists)(json, 'heldById') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['heldById']),
        'heldBy': !(0, runtime_1.exists)(json, 'heldBy') ? undefined : (0, HeldByType_1.HeldByTypeFromJSON)(json['heldBy']),
        'itemHoldId': !(0, runtime_1.exists)(json, 'itemHoldId') ? undefined : json['itemHoldId'],
        'itemId': !(0, runtime_1.exists)(json, 'itemId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['itemId']),
        'itemCode': !(0, runtime_1.exists)(json, 'itemCode') ? undefined : json['itemCode'],
        'reserveDates': !(0, runtime_1.exists)(json, 'reserveDates') ? undefined : (0, TimeSpanType_1.TimeSpanTypeFromJSON)(json['reserveDates']),
    };
}
exports.ReleaseItemInventoryHoldTypeFromJSONTyped = ReleaseItemInventoryHoldTypeFromJSONTyped;
function ReleaseItemInventoryHoldTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'heldById': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.heldById),
        'heldBy': (0, HeldByType_1.HeldByTypeToJSON)(value.heldBy),
        'itemHoldId': value.itemHoldId,
        'itemId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.itemId),
        'itemCode': value.itemCode,
        'reserveDates': (0, TimeSpanType_1.TimeSpanTypeToJSON)(value.reserveDates),
    };
}
exports.ReleaseItemInventoryHoldTypeToJSON = ReleaseItemInventoryHoldTypeToJSON;
