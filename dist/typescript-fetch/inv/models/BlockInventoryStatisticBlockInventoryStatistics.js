"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Inventory API
 * APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockInventoryStatisticBlockInventoryStatisticsToJSON = exports.BlockInventoryStatisticBlockInventoryStatisticsFromJSONTyped = exports.BlockInventoryStatisticBlockInventoryStatisticsFromJSON = exports.instanceOfBlockInventoryStatisticBlockInventoryStatistics = void 0;
const runtime_1 = require("../runtime");
const BlockInventoryStatisticType_1 = require("./BlockInventoryStatisticType");
/**
 * Check if a given object implements the BlockInventoryStatisticBlockInventoryStatistics interface.
 */
function instanceOfBlockInventoryStatisticBlockInventoryStatistics(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfBlockInventoryStatisticBlockInventoryStatistics = instanceOfBlockInventoryStatisticBlockInventoryStatistics;
function BlockInventoryStatisticBlockInventoryStatisticsFromJSON(json) {
    return BlockInventoryStatisticBlockInventoryStatisticsFromJSONTyped(json, false);
}
exports.BlockInventoryStatisticBlockInventoryStatisticsFromJSON = BlockInventoryStatisticBlockInventoryStatisticsFromJSON;
function BlockInventoryStatisticBlockInventoryStatisticsFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'allRowsFetched': !(0, runtime_1.exists)(json, 'allRowsFetched') ? undefined : json['allRowsFetched'],
        'blockInventoryStatistic': !(0, runtime_1.exists)(json, 'blockInventoryStatistic') ? undefined : (json['blockInventoryStatistic'].map(BlockInventoryStatisticType_1.BlockInventoryStatisticTypeFromJSON)),
        'limit': !(0, runtime_1.exists)(json, 'limit') ? undefined : json['limit'],
        'offset': !(0, runtime_1.exists)(json, 'offset') ? undefined : json['offset'],
        'totalPages': !(0, runtime_1.exists)(json, 'totalPages') ? undefined : json['totalPages'],
        'totalRows': !(0, runtime_1.exists)(json, 'totalRows') ? undefined : json['totalRows'],
    };
}
exports.BlockInventoryStatisticBlockInventoryStatisticsFromJSONTyped = BlockInventoryStatisticBlockInventoryStatisticsFromJSONTyped;
function BlockInventoryStatisticBlockInventoryStatisticsToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'allRowsFetched': value.allRowsFetched,
        'blockInventoryStatistic': value.blockInventoryStatistic === undefined ? undefined : (value.blockInventoryStatistic.map(BlockInventoryStatisticType_1.BlockInventoryStatisticTypeToJSON)),
        'limit': value.limit,
        'offset': value.offset,
        'totalPages': value.totalPages,
        'totalRows': value.totalRows,
    };
}
exports.BlockInventoryStatisticBlockInventoryStatisticsToJSON = BlockInventoryStatisticBlockInventoryStatisticsToJSON;
