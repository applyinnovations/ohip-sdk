"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Inventory API
 * APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockDetailStatisticTypeToJSON = exports.BlockDetailStatisticTypeFromJSONTyped = exports.BlockDetailStatisticTypeFromJSON = exports.instanceOfBlockDetailStatisticType = void 0;
const runtime_1 = require("../runtime");
const BlockInfoType_1 = require("./BlockInfoType");
const BlockStatusStatisticType_1 = require("./BlockStatusStatisticType");
/**
 * Check if a given object implements the BlockDetailStatisticType interface.
 */
function instanceOfBlockDetailStatisticType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfBlockDetailStatisticType = instanceOfBlockDetailStatisticType;
function BlockDetailStatisticTypeFromJSON(json) {
    return BlockDetailStatisticTypeFromJSONTyped(json, false);
}
exports.BlockDetailStatisticTypeFromJSON = BlockDetailStatisticTypeFromJSON;
function BlockDetailStatisticTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'blockInformation': !(0, runtime_1.exists)(json, 'blockInformation') ? undefined : (0, BlockInfoType_1.BlockInfoTypeFromJSON)(json['blockInformation']),
        'blockStatistics': !(0, runtime_1.exists)(json, 'blockStatistics') ? undefined : (json['blockStatistics'].map(BlockStatusStatisticType_1.BlockStatusStatisticTypeFromJSON)),
    };
}
exports.BlockDetailStatisticTypeFromJSONTyped = BlockDetailStatisticTypeFromJSONTyped;
function BlockDetailStatisticTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'blockInformation': (0, BlockInfoType_1.BlockInfoTypeToJSON)(value.blockInformation),
        'blockStatistics': value.blockStatistics === undefined ? undefined : (value.blockStatistics.map(BlockStatusStatisticType_1.BlockStatusStatisticTypeToJSON)),
    };
}
exports.BlockDetailStatisticTypeToJSON = BlockDetailStatisticTypeToJSON;
