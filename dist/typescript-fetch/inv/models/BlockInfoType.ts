/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Inventory API
 * APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockClassificationType } from './BlockClassificationType';
import {
    BlockClassificationTypeFromJSON,
    BlockClassificationTypeFromJSONTyped,
    BlockClassificationTypeToJSON,
} from './BlockClassificationType';
import type { BlockNonCompeteType } from './BlockNonCompeteType';
import {
    BlockNonCompeteTypeFromJSON,
    BlockNonCompeteTypeFromJSONTyped,
    BlockNonCompeteTypeToJSON,
} from './BlockNonCompeteType';
import type { BlockRateProtectionType } from './BlockRateProtectionType';
import {
    BlockRateProtectionTypeFromJSON,
    BlockRateProtectionTypeFromJSONTyped,
    BlockRateProtectionTypeToJSON,
} from './BlockRateProtectionType';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { StatusColorType } from './StatusColorType';
import {
    StatusColorTypeFromJSON,
    StatusColorTypeFromJSONTyped,
    StatusColorTypeToJSON,
} from './StatusColorType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Contains information of the business block .
 * @export
 * @interface BlockInfoType
 */
export interface BlockInfoType {
    /**
     * The hotel code of the business block.
     * @type {string}
     * @memberof BlockInfoType
     */
    hotelId?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof BlockInfoType
     */
    blockId?: UniqueIDType;
    /**
     * Name of the business block.
     * @type {string}
     * @memberof BlockInfoType
     */
    blockName?: string;
    /**
     * Block code for the block.
     * @type {string}
     * @memberof BlockInfoType
     */
    blockCode?: string;
    /**
     * Start date for this block.
     * @type {Date}
     * @memberof BlockInfoType
     */
    startDate?: Date;
    /**
     * End date for this block.
     * @type {Date}
     * @memberof BlockInfoType
     */
    endDate?: Date;
    /**
     * Date after which unused block rooms should be returned to house.
     * @type {Date}
     * @memberof BlockInfoType
     */
    cutOffDate?: Date;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof BlockInfoType
     */
    blockStatus?: CodeDescriptionType;
    /**
     * 
     * @type {StatusColorType}
     * @memberof BlockInfoType
     */
    blockStatusColor?: StatusColorType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof BlockInfoType
     */
    accountId?: UniqueIDType;
    /**
     * Account name attached to the business block.
     * @type {string}
     * @memberof BlockInfoType
     */
    accountName?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof BlockInfoType
     */
    contactId?: UniqueIDType;
    /**
     * Contact name attached to the business block.
     * @type {string}
     * @memberof BlockInfoType
     */
    contactName?: string;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof BlockInfoType
     */
    roomSalesManager?: CodeDescriptionType;
    /**
     * Currency Code attached to the business block.
     * @type {string}
     * @memberof BlockInfoType
     */
    currencyCode?: string;
    /**
     * Average room rate of the business block.
     * @type {number}
     * @memberof BlockInfoType
     */
    averageRoomRate?: number;
    /**
     * Indicates the likelihood of the block moving to the next active block status.
     * @type {string}
     * @memberof BlockInfoType
     */
    conversionCode?: string;
    /**
     * Indicates the ranking of the block.
     * @type {string}
     * @memberof BlockInfoType
     */
    rankingCode?: string;
    /**
     * Guarantee Code for the block.
     * @type {string}
     * @memberof BlockInfoType
     */
    guaranteeCode?: string;
    /**
     * 
     * @type {BlockRateProtectionType}
     * @memberof BlockInfoType
     */
    rateProtectionDetails?: BlockRateProtectionType;
    /**
     * 
     * @type {BlockNonCompeteType}
     * @memberof BlockInfoType
     */
    nonCompeteDetails?: BlockNonCompeteType;
    /**
     * 
     * @type {BlockClassificationType}
     * @memberof BlockInfoType
     */
    blockClassification?: BlockClassificationType;
}

/**
 * Check if a given object implements the BlockInfoType interface.
 */
export function instanceOfBlockInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockInfoTypeFromJSON(json: any): BlockInfoType {
    return BlockInfoTypeFromJSONTyped(json, false);
}

export function BlockInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'blockId': !exists(json, 'blockId') ? undefined : UniqueIDTypeFromJSON(json['blockId']),
        'blockName': !exists(json, 'blockName') ? undefined : json['blockName'],
        'blockCode': !exists(json, 'blockCode') ? undefined : json['blockCode'],
        'startDate': !exists(json, 'startDate') ? undefined : (new Date(json['startDate'])),
        'endDate': !exists(json, 'endDate') ? undefined : (new Date(json['endDate'])),
        'cutOffDate': !exists(json, 'cutOffDate') ? undefined : (new Date(json['cutOffDate'])),
        'blockStatus': !exists(json, 'blockStatus') ? undefined : CodeDescriptionTypeFromJSON(json['blockStatus']),
        'blockStatusColor': !exists(json, 'blockStatusColor') ? undefined : StatusColorTypeFromJSON(json['blockStatusColor']),
        'accountId': !exists(json, 'accountId') ? undefined : UniqueIDTypeFromJSON(json['accountId']),
        'accountName': !exists(json, 'accountName') ? undefined : json['accountName'],
        'contactId': !exists(json, 'contactId') ? undefined : UniqueIDTypeFromJSON(json['contactId']),
        'contactName': !exists(json, 'contactName') ? undefined : json['contactName'],
        'roomSalesManager': !exists(json, 'roomSalesManager') ? undefined : CodeDescriptionTypeFromJSON(json['roomSalesManager']),
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
        'averageRoomRate': !exists(json, 'averageRoomRate') ? undefined : json['averageRoomRate'],
        'conversionCode': !exists(json, 'conversionCode') ? undefined : json['conversionCode'],
        'rankingCode': !exists(json, 'rankingCode') ? undefined : json['rankingCode'],
        'guaranteeCode': !exists(json, 'guaranteeCode') ? undefined : json['guaranteeCode'],
        'rateProtectionDetails': !exists(json, 'rateProtectionDetails') ? undefined : BlockRateProtectionTypeFromJSON(json['rateProtectionDetails']),
        'nonCompeteDetails': !exists(json, 'nonCompeteDetails') ? undefined : BlockNonCompeteTypeFromJSON(json['nonCompeteDetails']),
        'blockClassification': !exists(json, 'blockClassification') ? undefined : BlockClassificationTypeFromJSON(json['blockClassification']),
    };
}

export function BlockInfoTypeToJSON(value?: BlockInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'blockId': UniqueIDTypeToJSON(value.blockId),
        'blockName': value.blockName,
        'blockCode': value.blockCode,
        'startDate': value.startDate === undefined ? undefined : (value.startDate.toISOString().substr(0,10)),
        'endDate': value.endDate === undefined ? undefined : (value.endDate.toISOString().substr(0,10)),
        'cutOffDate': value.cutOffDate === undefined ? undefined : (value.cutOffDate.toISOString().substr(0,10)),
        'blockStatus': CodeDescriptionTypeToJSON(value.blockStatus),
        'blockStatusColor': StatusColorTypeToJSON(value.blockStatusColor),
        'accountId': UniqueIDTypeToJSON(value.accountId),
        'accountName': value.accountName,
        'contactId': UniqueIDTypeToJSON(value.contactId),
        'contactName': value.contactName,
        'roomSalesManager': CodeDescriptionTypeToJSON(value.roomSalesManager),
        'currencyCode': value.currencyCode,
        'averageRoomRate': value.averageRoomRate,
        'conversionCode': value.conversionCode,
        'rankingCode': value.rankingCode,
        'guaranteeCode': value.guaranteeCode,
        'rateProtectionDetails': BlockRateProtectionTypeToJSON(value.rateProtectionDetails),
        'nonCompeteDetails': BlockNonCompeteTypeToJSON(value.nonCompeteDetails),
        'blockClassification': BlockClassificationTypeToJSON(value.blockClassification),
    };
}

