/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Inventory API
 * APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockInventoryStatisticType } from './BlockInventoryStatisticType';
import {
    BlockInventoryStatisticTypeFromJSON,
    BlockInventoryStatisticTypeFromJSONTyped,
    BlockInventoryStatisticTypeToJSON,
} from './BlockInventoryStatisticType';

/**
 * List of block inventory statistics that is grouped by statistic date.
 * @export
 * @interface BlockInventoryStatisticBlockInventoryStatistics
 */
export interface BlockInventoryStatisticBlockInventoryStatistics {
    /**
     * Summary and Detail statistic for block inventory that is group by statistic date.
     * @type {Array<BlockInventoryStatisticType>}
     * @memberof BlockInventoryStatisticBlockInventoryStatistics
     */
    blockInventoryStatistic?: Array<BlockInventoryStatisticType>;
    /**
     * Evaluated total page count based on the requested max fetch count.
     * @type {number}
     * @memberof BlockInventoryStatisticBlockInventoryStatistics
     */
    totalPages?: number;
    /**
     * Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
     * @type {number}
     * @memberof BlockInventoryStatisticBlockInventoryStatistics
     */
    offset?: number;
    /**
     * Indicates maximum number of records a Web Service should return.
     * @type {number}
     * @memberof BlockInventoryStatisticBlockInventoryStatistics
     */
    limit?: number;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof BlockInventoryStatisticBlockInventoryStatistics
     */
    allRowsFetched?: boolean;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof BlockInventoryStatisticBlockInventoryStatistics
     */
    totalRows?: number;
}

/**
 * Check if a given object implements the BlockInventoryStatisticBlockInventoryStatistics interface.
 */
export function instanceOfBlockInventoryStatisticBlockInventoryStatistics(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockInventoryStatisticBlockInventoryStatisticsFromJSON(json: any): BlockInventoryStatisticBlockInventoryStatistics {
    return BlockInventoryStatisticBlockInventoryStatisticsFromJSONTyped(json, false);
}

export function BlockInventoryStatisticBlockInventoryStatisticsFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockInventoryStatisticBlockInventoryStatistics {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockInventoryStatistic': !exists(json, 'blockInventoryStatistic') ? undefined : ((json['blockInventoryStatistic'] as Array<any>).map(BlockInventoryStatisticTypeFromJSON)),
        'totalPages': !exists(json, 'totalPages') ? undefined : json['totalPages'],
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'allRowsFetched': !exists(json, 'allRowsFetched') ? undefined : json['allRowsFetched'],
        'totalRows': !exists(json, 'totalRows') ? undefined : json['totalRows'],
    };
}

export function BlockInventoryStatisticBlockInventoryStatisticsToJSON(value?: BlockInventoryStatisticBlockInventoryStatistics | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockInventoryStatistic': value.blockInventoryStatistic === undefined ? undefined : ((value.blockInventoryStatistic as Array<any>).map(BlockInventoryStatisticTypeToJSON)),
        'totalPages': value.totalPages,
        'offset': value.offset,
        'limit': value.limit,
        'allRowsFetched': value.allRowsFetched,
        'totalRows': value.totalRows,
    };
}

