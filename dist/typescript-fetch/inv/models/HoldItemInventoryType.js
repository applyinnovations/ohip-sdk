"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Inventory API
 * APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HoldItemInventoryTypeToJSON = exports.HoldItemInventoryTypeFromJSONTyped = exports.HoldItemInventoryTypeFromJSON = exports.instanceOfHoldItemInventoryType = void 0;
const runtime_1 = require("../runtime");
const HeldByType_1 = require("./HeldByType");
const HoldItemInfoType_1 = require("./HoldItemInfoType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the HoldItemInventoryType interface.
 */
function instanceOfHoldItemInventoryType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfHoldItemInventoryType = instanceOfHoldItemInventoryType;
function HoldItemInventoryTypeFromJSON(json) {
    return HoldItemInventoryTypeFromJSONTyped(json, false);
}
exports.HoldItemInventoryTypeFromJSON = HoldItemInventoryTypeFromJSON;
function HoldItemInventoryTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'heldById': !(0, runtime_1.exists)(json, 'heldById') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['heldById']),
        'heldBy': !(0, runtime_1.exists)(json, 'heldBy') ? undefined : (0, HeldByType_1.HeldByTypeFromJSON)(json['heldBy']),
        'itemHoldId': !(0, runtime_1.exists)(json, 'itemHoldId') ? undefined : json['itemHoldId'],
        'holdItemInfoList': !(0, runtime_1.exists)(json, 'holdItemInfoList') ? undefined : (json['holdItemInfoList'].map(HoldItemInfoType_1.HoldItemInfoTypeFromJSON)),
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'overrideInventory': !(0, runtime_1.exists)(json, 'overrideInventory') ? undefined : json['overrideInventory'],
    };
}
exports.HoldItemInventoryTypeFromJSONTyped = HoldItemInventoryTypeFromJSONTyped;
function HoldItemInventoryTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'heldById': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.heldById),
        'heldBy': (0, HeldByType_1.HeldByTypeToJSON)(value.heldBy),
        'itemHoldId': value.itemHoldId,
        'holdItemInfoList': value.holdItemInfoList === undefined ? undefined : (value.holdItemInfoList.map(HoldItemInfoType_1.HoldItemInfoTypeToJSON)),
        'hotelId': value.hotelId,
        'overrideInventory': value.overrideInventory,
    };
}
exports.HoldItemInventoryTypeToJSON = HoldItemInventoryTypeToJSON;
