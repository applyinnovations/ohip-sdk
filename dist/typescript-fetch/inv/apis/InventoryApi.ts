/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Inventory API
 * APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionDetailType,
  HotelInventory,
  ItemInventory,
  PostHoldItemInventoryRequest,
  Status,
} from '../models';
import {
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    HotelInventoryFromJSON,
    HotelInventoryToJSON,
    ItemInventoryFromJSON,
    ItemInventoryToJSON,
    PostHoldItemInventoryRequestFromJSON,
    PostHoldItemInventoryRequestToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models';

export interface GetHotelInventoryRequest {
    hotelId?: string;
    dateRangeStart?: Date;
    dateRangeEnd?: Date;
    roomCountRequested?: number;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeTentativeInventory?: boolean;
    dailyInventory?: boolean;
    houseLevel?: boolean;
    roomTypes?: Array<string>;
    roomClasses?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetItemInventoryRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    endTime?: string;
    startTime?: string;
    itemClass?: string;
    itemPool?: Array<string>;
    itemCode?: Array<string>;
    defaultDuration?: number;
    fixedCharge?: boolean;
    outsideStay?: boolean;
    requiredForBooking?: boolean;
    sellInEvent?: boolean;
    sellInReservation?: boolean;
    sellSeparate?: boolean;
    welcomeOffer?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostHoldItemInventoryOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    holdItemInventory?: PostHoldItemInventoryRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class InventoryApi extends runtime.BaseAPI {

    /**
     * You can use this API to retrieve the inventory for a specified hotel. Narrow down your results using the query parameters such as a date range, room type, room class, and/or tentative inventory included. <p><strong>OperationId:</strong>getHotelInventory</p>
     * Get hotel inventory
     */
    async getHotelInventoryRaw(requestParameters: GetHotelInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelInventory>> {
        const queryParameters: any = {};

        if (requestParameters.dateRangeStart !== undefined) {
            queryParameters['dateRangeStart'] = (requestParameters.dateRangeStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.dateRangeEnd !== undefined) {
            queryParameters['dateRangeEnd'] = (requestParameters.dateRangeEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomCountRequested !== undefined) {
            queryParameters['roomCountRequested'] = requestParameters.roomCountRequested;
        }

        if (requestParameters.includeTentativeInventory !== undefined) {
            queryParameters['includeTentativeInventory'] = requestParameters.includeTentativeInventory;
        }

        if (requestParameters.dailyInventory !== undefined) {
            queryParameters['dailyInventory'] = requestParameters.dailyInventory;
        }

        if (requestParameters.houseLevel !== undefined) {
            queryParameters['houseLevel'] = requestParameters.houseLevel;
        }

        if (requestParameters.roomTypes) {
            queryParameters['roomTypes'] = requestParameters.roomTypes;
        }

        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/hotelInventory`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelInventoryFromJSON(jsonValue));
    }

    /**
     * You can use this API to retrieve the inventory for a specified hotel. Narrow down your results using the query parameters such as a date range, room type, room class, and/or tentative inventory included. <p><strong>OperationId:</strong>getHotelInventory</p>
     * Get hotel inventory
     */
    async getHotelInventory(requestParameters: GetHotelInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelInventory> {
        const response = await this.getHotelInventoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will fetch a hotels Item inventory for a specified date range that you can provided in the request. <p><strong>OperationId:</strong>getItemInventory</p>
     * Get item inventory
     */
    async getItemInventoryRaw(requestParameters: GetItemInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemInventory>> {
        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['endTime'] = requestParameters.endTime;
        }

        if (requestParameters.startTime !== undefined) {
            queryParameters['startTime'] = requestParameters.startTime;
        }

        if (requestParameters.itemClass !== undefined) {
            queryParameters['itemClass'] = requestParameters.itemClass;
        }

        if (requestParameters.itemPool) {
            queryParameters['itemPool'] = requestParameters.itemPool;
        }

        if (requestParameters.itemCode) {
            queryParameters['itemCode'] = requestParameters.itemCode;
        }

        if (requestParameters.defaultDuration !== undefined) {
            queryParameters['defaultDuration'] = requestParameters.defaultDuration;
        }

        if (requestParameters.fixedCharge !== undefined) {
            queryParameters['fixedCharge'] = requestParameters.fixedCharge;
        }

        if (requestParameters.outsideStay !== undefined) {
            queryParameters['outsideStay'] = requestParameters.outsideStay;
        }

        if (requestParameters.requiredForBooking !== undefined) {
            queryParameters['requiredForBooking'] = requestParameters.requiredForBooking;
        }

        if (requestParameters.sellInEvent !== undefined) {
            queryParameters['sellInEvent'] = requestParameters.sellInEvent;
        }

        if (requestParameters.sellInReservation !== undefined) {
            queryParameters['sellInReservation'] = requestParameters.sellInReservation;
        }

        if (requestParameters.sellSeparate !== undefined) {
            queryParameters['sellSeparate'] = requestParameters.sellSeparate;
        }

        if (requestParameters.welcomeOffer !== undefined) {
            queryParameters['welcomeOffer'] = requestParameters.welcomeOffer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/itemInventory`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemInventoryFromJSON(jsonValue));
    }

    /**
     * This will fetch a hotels Item inventory for a specified date range that you can provided in the request. <p><strong>OperationId:</strong>getItemInventory</p>
     * Get item inventory
     */
    async getItemInventory(requestParameters: GetItemInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemInventory> {
        const response = await this.getItemInventoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to hold Item Inventory. <p><strong>OperationId:</strong>postHoldItemInventory</p>
     * Hold item inventory
     */
    async postHoldItemInventoryRaw(requestParameters: PostHoldItemInventoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/itemInventoryHold`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostHoldItemInventoryRequestToJSON(requestParameters.holdItemInventory),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to hold Item Inventory. <p><strong>OperationId:</strong>postHoldItemInventory</p>
     * Hold item inventory
     */
    async postHoldItemInventory(requestParameters: PostHoldItemInventoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postHoldItemInventoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
