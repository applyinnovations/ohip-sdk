/**
 * OPERA Cloud Inventory API
 * APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { ChangeSellLimitByDateRangeRequest, ChangeSellLimitByDateRequest, HoldItemInventory, HoldItemsInventory, HotelInventory, ItemInventory, PutHoldItemsInventoryRequest, PutItemInventoryHoldRequest, ReleasedItemInventoryHeld, SellLimitByDateResponse, SellLimitResponse, Status } from '../models';
export interface ChangeSellLimitByDateOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    sellLimit?: ChangeSellLimitByDateRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ChangeSellLimitByDateRangeOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    sellLimitByRange?: ChangeSellLimitByDateRangeRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetHoldItemsInventoryRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    itemHoldId?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetHotelInventoryRequest {
    hotelId?: string;
    dateRangeStart?: Date;
    dateRangeEnd?: Date;
    roomCountRequested?: number;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeTentativeInventory?: boolean;
    dailyInventory?: boolean;
    houseLevel?: boolean;
    roomTypes?: Array<string>;
    roomClasses?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetItemInventoryRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    endTime?: string;
    startTime?: string;
    itemClass?: string;
    itemPool?: Array<string>;
    itemCode?: Array<string>;
    defaultDuration?: number;
    fixedCharge?: boolean;
    outsideStay?: boolean;
    requiredForBooking?: boolean;
    sellInEvent?: boolean;
    sellInReservation?: boolean;
    sellSeparate?: boolean;
    welcomeOffer?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostHoldItemInventoryRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    holdItemInventory?: PutHoldItemsInventoryRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutHoldItemsInventoryOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    holdItemInventory?: PutHoldItemsInventoryRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutItemInventoryHoldOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    releaseItemInventoryHold?: PutItemInventoryHoldRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class InventoryApi extends runtime.BaseAPI {
    /**
     * You can use this API to create sell limits in OPERA by date. <p><strong>OperationId:</strong>changeSellLimitByDate</p>
     * Set sell limits by date
     */
    changeSellLimitByDateRaw(requestParameters: ChangeSellLimitByDateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SellLimitResponse>>;
    /**
     * You can use this API to create sell limits in OPERA by date. <p><strong>OperationId:</strong>changeSellLimitByDate</p>
     * Set sell limits by date
     */
    changeSellLimitByDate(requestParameters: ChangeSellLimitByDateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SellLimitResponse>;
    /**
     * You can use this API to create sell limits in OPERA by date range. <p><strong>OperationId:</strong>changeSellLimitByDateRange</p>
     * Set sell limits by date range
     */
    changeSellLimitByDateRangeRaw(requestParameters: ChangeSellLimitByDateRangeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SellLimitByDateResponse>>;
    /**
     * You can use this API to create sell limits in OPERA by date range. <p><strong>OperationId:</strong>changeSellLimitByDateRange</p>
     * Set sell limits by date range
     */
    changeSellLimitByDateRange(requestParameters: ChangeSellLimitByDateRangeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SellLimitByDateResponse>;
    /**
     * Fetch item inventory that is currently being held. <p><strong>OperationId:</strong>getHoldItemsInventory</p>
     * Get items inventory that are held
     */
    getHoldItemsInventoryRaw(requestParameters: GetHoldItemsInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HoldItemsInventory>>;
    /**
     * Fetch item inventory that is currently being held. <p><strong>OperationId:</strong>getHoldItemsInventory</p>
     * Get items inventory that are held
     */
    getHoldItemsInventory(requestParameters: GetHoldItemsInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HoldItemsInventory>;
    /**
     * You can use this API to retrieve the inventory for a specified hotel. Narrow down your results using the query parameters such as a date range, room type, room class, and/or tentative inventory included. <p><strong>OperationId:</strong>getHotelInventory</p>
     * Get hotel inventory
     */
    getHotelInventoryRaw(requestParameters: GetHotelInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelInventory>>;
    /**
     * You can use this API to retrieve the inventory for a specified hotel. Narrow down your results using the query parameters such as a date range, room type, room class, and/or tentative inventory included. <p><strong>OperationId:</strong>getHotelInventory</p>
     * Get hotel inventory
     */
    getHotelInventory(requestParameters: GetHotelInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelInventory>;
    /**
     * This will fetch a hotels Item inventory for a specified date range that you can provided in the request. <p><strong>OperationId:</strong>getItemInventory</p>
     * Get item inventory
     */
    getItemInventoryRaw(requestParameters: GetItemInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemInventory>>;
    /**
     * This will fetch a hotels Item inventory for a specified date range that you can provided in the request. <p><strong>OperationId:</strong>getItemInventory</p>
     * Get item inventory
     */
    getItemInventory(requestParameters: GetItemInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemInventory>;
    /**
     * Use this API to hold Item Inventory. <p><strong>OperationId:</strong>postHoldItemInventory</p>
     * Hold item inventory
     */
    postHoldItemInventoryRaw(requestParameters: PostHoldItemInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to hold Item Inventory. <p><strong>OperationId:</strong>postHoldItemInventory</p>
     * Hold item inventory
     */
    postHoldItemInventory(requestParameters: PostHoldItemInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can update item inventory that is being held using this API. <p><strong>OperationId:</strong>putHoldItemsInventory</p>
     * update items inventory that are held
     */
    putHoldItemsInventoryRaw(requestParameters: PutHoldItemsInventoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HoldItemInventory>>;
    /**
     * You can update item inventory that is being held using this API. <p><strong>OperationId:</strong>putHoldItemsInventory</p>
     * update items inventory that are held
     */
    putHoldItemsInventory(requestParameters: PutHoldItemsInventoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HoldItemInventory>;
    /**
     * This API will release item inventory that has been held. <p><strong>OperationId:</strong>putItemInventoryHold</p>
     * Release item inventory held
     */
    putItemInventoryHoldRaw(requestParameters: PutItemInventoryHoldOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReleasedItemInventoryHeld>>;
    /**
     * This API will release item inventory that has been held. <p><strong>OperationId:</strong>putItemInventoryHold</p>
     * Release item inventory held
     */
    putItemInventoryHold(requestParameters: PutItemInventoryHoldOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReleasedItemInventoryHeld>;
}
