"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdditionalAmountTypeToJSON = exports.AdditionalAmountTypeFromJSONTyped = exports.AdditionalAmountTypeFromJSON = exports.instanceOfAdditionalAmountType = exports.AdditionalAmountTypeAmountTypeEnum = void 0;
const runtime_1 = require("../runtime");
/**
 * @export
 */
exports.AdditionalAmountTypeAmountTypeEnum = {
    AdditionalAdult: 'AdditionalAdult',
    AdditionalChild: 'AdditionalChild',
    AdditionalRollawayBed: 'AdditionalRollawayBed',
    AdditionalCrib: 'AdditionalCrib',
    AdditionalRollawayCrib: 'AdditionalRollawayCrib'
};
/**
 * Check if a given object implements the AdditionalAmountType interface.
 */
function instanceOfAdditionalAmountType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfAdditionalAmountType = instanceOfAdditionalAmountType;
function AdditionalAmountTypeFromJSON(json) {
    return AdditionalAmountTypeFromJSONTyped(json, false);
}
exports.AdditionalAmountTypeFromJSON = AdditionalAmountTypeFromJSON;
function AdditionalAmountTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'amount': !(0, runtime_1.exists)(json, 'amount') ? undefined : json['amount'],
        'amountType': !(0, runtime_1.exists)(json, 'amountType') ? undefined : json['amountType'],
        'currencyCode': !(0, runtime_1.exists)(json, 'currencyCode') ? undefined : json['currencyCode'],
    };
}
exports.AdditionalAmountTypeFromJSONTyped = AdditionalAmountTypeFromJSONTyped;
function AdditionalAmountTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'amount': value.amount,
        'amountType': value.amountType,
        'currencyCode': value.currencyCode,
    };
}
exports.AdditionalAmountTypeToJSON = AdditionalAmountTypeToJSON;
