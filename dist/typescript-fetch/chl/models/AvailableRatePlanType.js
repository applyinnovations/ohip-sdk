"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AvailableRatePlanTypeToJSON = exports.AvailableRatePlanTypeFromJSONTyped = exports.AvailableRatePlanTypeFromJSON = exports.instanceOfAvailableRatePlanType = void 0;
const runtime_1 = require("../runtime");
const AvailableRoomType_1 = require("./AvailableRoomType");
/**
 * Check if a given object implements the AvailableRatePlanType interface.
 */
function instanceOfAvailableRatePlanType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfAvailableRatePlanType = instanceOfAvailableRatePlanType;
function AvailableRatePlanTypeFromJSON(json) {
    return AvailableRatePlanTypeFromJSONTyped(json, false);
}
exports.AvailableRatePlanTypeFromJSON = AvailableRatePlanTypeFromJSON;
function AvailableRatePlanTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'availableRooms': !(0, runtime_1.exists)(json, 'availableRooms') ? undefined : (json['availableRooms'].map(AvailableRoomType_1.AvailableRoomTypeFromJSON)),
        'currency': !(0, runtime_1.exists)(json, 'currency') ? undefined : json['currency'],
        'marketingInfo': !(0, runtime_1.exists)(json, 'marketingInfo') ? undefined : json['marketingInfo'],
        'ratePlanCode': !(0, runtime_1.exists)(json, 'ratePlanCode') ? undefined : json['ratePlanCode'],
        'ratePlanDesc': !(0, runtime_1.exists)(json, 'ratePlanDesc') ? undefined : json['ratePlanDesc'],
        'taxInfo': !(0, runtime_1.exists)(json, 'taxInfo') ? undefined : json['taxInfo'],
    };
}
exports.AvailableRatePlanTypeFromJSONTyped = AvailableRatePlanTypeFromJSONTyped;
function AvailableRatePlanTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'availableRooms': value.availableRooms === undefined ? undefined : (value.availableRooms.map(AvailableRoomType_1.AvailableRoomTypeToJSON)),
        'currency': value.currency,
        'marketingInfo': value.marketingInfo,
        'ratePlanCode': value.ratePlanCode,
        'ratePlanDesc': value.ratePlanDesc,
        'taxInfo': value.taxInfo,
    };
}
exports.AvailableRatePlanTypeToJSON = AvailableRatePlanTypeToJSON;
