"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelNegProfileTypeToJSON = exports.ChannelNegProfileTypeFromJSONTyped = exports.ChannelNegProfileTypeFromJSON = exports.instanceOfChannelNegProfileType = void 0;
const runtime_1 = require("../runtime");
const ChannelNegRateAccessType_1 = require("./ChannelNegRateAccessType");
const PersonNameType_1 = require("./PersonNameType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the ChannelNegProfileType interface.
 */
function instanceOfChannelNegProfileType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfChannelNegProfileType = instanceOfChannelNegProfileType;
function ChannelNegProfileTypeFromJSON(json) {
    return ChannelNegProfileTypeFromJSONTyped(json, false);
}
exports.ChannelNegProfileTypeFromJSON = ChannelNegProfileTypeFromJSON;
function ChannelNegProfileTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'uniqueId': !(0, runtime_1.exists)(json, 'uniqueId') ? undefined : (json['uniqueId'].map(UniqueIDType_1.UniqueIDTypeFromJSON)),
        'formerName': !(0, runtime_1.exists)(json, 'formerName') ? undefined : (0, PersonNameType_1.PersonNameTypeFromJSON)(json['formerName']),
        'accessInfoList': !(0, runtime_1.exists)(json, 'accessInfoList') ? undefined : (json['accessInfoList'].map(ChannelNegRateAccessType_1.ChannelNegRateAccessTypeFromJSON)),
    };
}
exports.ChannelNegProfileTypeFromJSONTyped = ChannelNegProfileTypeFromJSONTyped;
function ChannelNegProfileTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'uniqueId': value.uniqueId === undefined ? undefined : (value.uniqueId.map(UniqueIDType_1.UniqueIDTypeToJSON)),
        'formerName': (0, PersonNameType_1.PersonNameTypeToJSON)(value.formerName),
        'accessInfoList': value.accessInfoList === undefined ? undefined : (value.accessInfoList.map(ChannelNegRateAccessType_1.ChannelNegRateAccessTypeToJSON)),
    };
}
exports.ChannelNegProfileTypeToJSON = ChannelNegProfileTypeToJSON;
