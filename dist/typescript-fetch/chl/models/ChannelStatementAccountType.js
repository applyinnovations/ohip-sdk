"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelStatementAccountTypeToJSON = exports.ChannelStatementAccountTypeFromJSONTyped = exports.ChannelStatementAccountTypeFromJSON = exports.instanceOfChannelStatementAccountType = void 0;
const runtime_1 = require("../runtime");
const ChannelStatementDetailType_1 = require("./ChannelStatementDetailType");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the ChannelStatementAccountType interface.
 */
function instanceOfChannelStatementAccountType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfChannelStatementAccountType = instanceOfChannelStatementAccountType;
function ChannelStatementAccountTypeFromJSON(json) {
    return ChannelStatementAccountTypeFromJSONTyped(json, false);
}
exports.ChannelStatementAccountTypeFromJSON = ChannelStatementAccountTypeFromJSON;
function ChannelStatementAccountTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'accountCode': !(0, runtime_1.exists)(json, 'accountCode') ? undefined : json['accountCode'],
        'beginDate': !(0, runtime_1.exists)(json, 'beginDate') ? undefined : json['beginDate'],
        'channelAccountStatementDetails': !(0, runtime_1.exists)(json, 'channelAccountStatementDetails') ? undefined : (json['channelAccountStatementDetails'].map(ChannelStatementDetailType_1.ChannelStatementDetailTypeFromJSON)),
        'contractId': !(0, runtime_1.exists)(json, 'contractId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['contractId']),
        'endDate': !(0, runtime_1.exists)(json, 'endDate') ? undefined : json['endDate'],
        'note': !(0, runtime_1.exists)(json, 'note') ? undefined : json['note'],
        'profileId': !(0, runtime_1.exists)(json, 'profileId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['profileId']),
        'totalDetailsAmount': !(0, runtime_1.exists)(json, 'totalDetailsAmount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['totalDetailsAmount']),
    };
}
exports.ChannelStatementAccountTypeFromJSONTyped = ChannelStatementAccountTypeFromJSONTyped;
function ChannelStatementAccountTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'accountCode': value.accountCode,
        'beginDate': value.beginDate,
        'channelAccountStatementDetails': value.channelAccountStatementDetails === undefined ? undefined : (value.channelAccountStatementDetails.map(ChannelStatementDetailType_1.ChannelStatementDetailTypeToJSON)),
        'contractId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.contractId),
        'endDate': value.endDate,
        'note': value.note,
        'profileId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.profileId),
        'totalDetailsAmount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.totalDetailsAmount),
    };
}
exports.ChannelStatementAccountTypeToJSON = ChannelStatementAccountTypeToJSON;
