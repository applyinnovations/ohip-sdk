"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelTypeToJSON = exports.ChannelTypeFromJSONTyped = exports.ChannelTypeFromJSON = exports.instanceOfChannelType = void 0;
const runtime_1 = require("../runtime");
const ParameterType_1 = require("./ParameterType");
const SystemCarrierType_1 = require("./SystemCarrierType");
const SystemErrorType_1 = require("./SystemErrorType");
const SystemInfoType_1 = require("./SystemInfoType");
const SystemRateCategoryType_1 = require("./SystemRateCategoryType");
const SystemRateLevelType_1 = require("./SystemRateLevelType");
const SystemRoomTypeType_1 = require("./SystemRoomTypeType");
/**
 * Check if a given object implements the ChannelType interface.
 */
function instanceOfChannelType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfChannelType = instanceOfChannelType;
function ChannelTypeFromJSON(json) {
    return ChannelTypeFromJSONTyped(json, false);
}
exports.ChannelTypeFromJSON = ChannelTypeFromJSON;
function ChannelTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'addOnLicense': !(0, runtime_1.exists)(json, 'addOnLicense') ? undefined : json['addOnLicense'],
        'carriers': !(0, runtime_1.exists)(json, 'carriers') ? undefined : (json['carriers'].map(SystemCarrierType_1.SystemCarrierTypeFromJSON)),
        'errorCodes': !(0, runtime_1.exists)(json, 'errorCodes') ? undefined : (json['errorCodes'].map(SystemErrorType_1.SystemErrorTypeFromJSON)),
        'parameters': !(0, runtime_1.exists)(json, 'parameters') ? undefined : (json['parameters'].map(ParameterType_1.ParameterTypeFromJSON)),
        'rateCategories': !(0, runtime_1.exists)(json, 'rateCategories') ? undefined : (json['rateCategories'].map(SystemRateCategoryType_1.SystemRateCategoryTypeFromJSON)),
        'rateLevels': !(0, runtime_1.exists)(json, 'rateLevels') ? undefined : (json['rateLevels'].map(SystemRateLevelType_1.SystemRateLevelTypeFromJSON)),
        'roomTypes': !(0, runtime_1.exists)(json, 'roomTypes') ? undefined : (json['roomTypes'].map(SystemRoomTypeType_1.SystemRoomTypeTypeFromJSON)),
        'sellBy': !(0, runtime_1.exists)(json, 'sellBy') ? undefined : json['sellBy'],
        'systemInfo': !(0, runtime_1.exists)(json, 'systemInfo') ? undefined : (0, SystemInfoType_1.SystemInfoTypeFromJSON)(json['systemInfo']),
    };
}
exports.ChannelTypeFromJSONTyped = ChannelTypeFromJSONTyped;
function ChannelTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'addOnLicense': value.addOnLicense,
        'carriers': value.carriers === undefined ? undefined : (value.carriers.map(SystemCarrierType_1.SystemCarrierTypeToJSON)),
        'errorCodes': value.errorCodes === undefined ? undefined : (value.errorCodes.map(SystemErrorType_1.SystemErrorTypeToJSON)),
        'parameters': value.parameters === undefined ? undefined : (value.parameters.map(ParameterType_1.ParameterTypeToJSON)),
        'rateCategories': value.rateCategories === undefined ? undefined : (value.rateCategories.map(SystemRateCategoryType_1.SystemRateCategoryTypeToJSON)),
        'rateLevels': value.rateLevels === undefined ? undefined : (value.rateLevels.map(SystemRateLevelType_1.SystemRateLevelTypeToJSON)),
        'roomTypes': value.roomTypes === undefined ? undefined : (value.roomTypes.map(SystemRoomTypeType_1.SystemRoomTypeTypeToJSON)),
        'sellBy': value.sellBy,
        'systemInfo': (0, SystemInfoType_1.SystemInfoTypeToJSON)(value.systemInfo),
    };
}
exports.ChannelTypeToJSON = ChannelTypeToJSON;
