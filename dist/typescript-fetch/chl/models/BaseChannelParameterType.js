"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseChannelParameterTypeToJSON = exports.BaseChannelParameterTypeFromJSONTyped = exports.BaseChannelParameterTypeFromJSON = exports.instanceOfBaseChannelParameterType = exports.BaseChannelParameterTypeScopeEnum = exports.BaseChannelParameterTypeParameterTypeEnum = void 0;
const runtime_1 = require("../runtime");
const ChannelParameterValueType_1 = require("./ChannelParameterValueType");
/**
 * @export
 */
exports.BaseChannelParameterTypeParameterTypeEnum = {
    P: 'P',
    S: 'S'
};
/**
 * @export
 */
exports.BaseChannelParameterTypeScopeEnum = {
    H: 'H',
    P: 'P'
};
/**
 * Check if a given object implements the BaseChannelParameterType interface.
 */
function instanceOfBaseChannelParameterType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfBaseChannelParameterType = instanceOfBaseChannelParameterType;
function BaseChannelParameterTypeFromJSON(json) {
    return BaseChannelParameterTypeFromJSONTyped(json, false);
}
exports.BaseChannelParameterTypeFromJSON = BaseChannelParameterTypeFromJSON;
function BaseChannelParameterTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'parameterDescription': !(0, runtime_1.exists)(json, 'parameterDescription') ? undefined : json['parameterDescription'],
        'parameterDisplay': !(0, runtime_1.exists)(json, 'parameterDisplay') ? undefined : json['parameterDisplay'],
        'parameterName': !(0, runtime_1.exists)(json, 'parameterName') ? undefined : json['parameterName'],
        'parameterType': !(0, runtime_1.exists)(json, 'parameterType') ? undefined : json['parameterType'],
        'parameterValue': !(0, runtime_1.exists)(json, 'parameterValue') ? undefined : json['parameterValue'],
        'scope': !(0, runtime_1.exists)(json, 'scope') ? undefined : json['scope'],
        'sequence': !(0, runtime_1.exists)(json, 'sequence') ? undefined : json['sequence'],
        'shortDescription': !(0, runtime_1.exists)(json, 'shortDescription') ? undefined : json['shortDescription'],
        'valueType': !(0, runtime_1.exists)(json, 'valueType') ? undefined : (0, ChannelParameterValueType_1.ChannelParameterValueTypeFromJSON)(json['valueType']),
    };
}
exports.BaseChannelParameterTypeFromJSONTyped = BaseChannelParameterTypeFromJSONTyped;
function BaseChannelParameterTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'parameterDescription': value.parameterDescription,
        'parameterDisplay': value.parameterDisplay,
        'parameterName': value.parameterName,
        'parameterType': value.parameterType,
        'parameterValue': value.parameterValue,
        'scope': value.scope,
        'sequence': value.sequence,
        'shortDescription': value.shortDescription,
        'valueType': (0, ChannelParameterValueType_1.ChannelParameterValueTypeToJSON)(value.valueType),
    };
}
exports.BaseChannelParameterTypeToJSON = BaseChannelParameterTypeToJSON;
