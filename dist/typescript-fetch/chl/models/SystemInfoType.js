"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemInfoTypeToJSON = exports.SystemInfoTypeFromJSONTyped = exports.SystemInfoTypeFromJSON = exports.instanceOfSystemInfoType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the SystemInfoType interface.
 */
function instanceOfSystemInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfSystemInfoType = instanceOfSystemInfoType;
function SystemInfoTypeFromJSON(json) {
    return SystemInfoTypeFromJSONTyped(json, false);
}
exports.SystemInfoTypeFromJSON = SystemInfoTypeFromJSON;
function SystemInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'systemName': !(0, runtime_1.exists)(json, 'systemName') ? undefined : json['systemName'],
        'websiteURL': !(0, runtime_1.exists)(json, 'websiteURL') ? undefined : json['websiteURL'],
        'iconURL': !(0, runtime_1.exists)(json, 'iconURL') ? undefined : json['iconURL'],
        'systemCode': !(0, runtime_1.exists)(json, 'systemCode') ? undefined : json['systemCode'],
        'systemType': !(0, runtime_1.exists)(json, 'systemType') ? undefined : json['systemType'],
        'systemSubType': !(0, runtime_1.exists)(json, 'systemSubType') ? undefined : json['systemSubType'],
        'inactive': !(0, runtime_1.exists)(json, 'inactive') ? undefined : json['inactive'],
    };
}
exports.SystemInfoTypeFromJSONTyped = SystemInfoTypeFromJSONTyped;
function SystemInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'systemName': value.systemName,
        'websiteURL': value.websiteURL,
        'iconURL': value.iconURL,
        'systemCode': value.systemCode,
        'systemType': value.systemType,
        'systemSubType': value.systemSubType,
        'inactive': value.inactive,
    };
}
exports.SystemInfoTypeToJSON = SystemInfoTypeToJSON;
