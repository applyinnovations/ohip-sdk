"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BookingChannelInfoTypeToJSON = exports.BookingChannelInfoTypeFromJSONTyped = exports.BookingChannelInfoTypeFromJSON = exports.instanceOfBookingChannelInfoType = void 0;
const runtime_1 = require("../runtime");
const HotelMappingType_1 = require("./HotelMappingType");
const ParameterType_1 = require("./ParameterType");
/**
 * Check if a given object implements the BookingChannelInfoType interface.
 */
function instanceOfBookingChannelInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfBookingChannelInfoType = instanceOfBookingChannelInfoType;
function BookingChannelInfoTypeFromJSON(json) {
    return BookingChannelInfoTypeFromJSONTyped(json, false);
}
exports.BookingChannelInfoTypeFromJSON = BookingChannelInfoTypeFromJSON;
function BookingChannelInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'bookingChannelCode': !(0, runtime_1.exists)(json, 'bookingChannelCode') ? undefined : json['bookingChannelCode'],
        'bookingChannelType': !(0, runtime_1.exists)(json, 'bookingChannelType') ? undefined : json['bookingChannelType'],
        'configurationParameters': !(0, runtime_1.exists)(json, 'configurationParameters') ? undefined : (json['configurationParameters'].map(ParameterType_1.ParameterTypeFromJSON)),
        'hotelMappings': !(0, runtime_1.exists)(json, 'hotelMappings') ? undefined : (json['hotelMappings'].map(HotelMappingType_1.HotelMappingTypeFromJSON)),
        'name': !(0, runtime_1.exists)(json, 'name') ? undefined : json['name'],
    };
}
exports.BookingChannelInfoTypeFromJSONTyped = BookingChannelInfoTypeFromJSONTyped;
function BookingChannelInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'bookingChannelCode': value.bookingChannelCode,
        'bookingChannelType': value.bookingChannelType,
        'configurationParameters': value.configurationParameters === undefined ? undefined : (value.configurationParameters.map(ParameterType_1.ParameterTypeToJSON)),
        'hotelMappings': value.hotelMappings === undefined ? undefined : (value.hotelMappings.map(HotelMappingType_1.HotelMappingTypeToJSON)),
        'name': value.name,
    };
}
exports.BookingChannelInfoTypeToJSON = BookingChannelInfoTypeToJSON;
