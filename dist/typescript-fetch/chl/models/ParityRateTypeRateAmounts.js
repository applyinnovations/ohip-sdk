"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParityRateTypeRateAmountsToJSON = exports.ParityRateTypeRateAmountsFromJSONTyped = exports.ParityRateTypeRateAmountsFromJSON = exports.instanceOfParityRateTypeRateAmounts = void 0;
const runtime_1 = require("../runtime");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
/**
 * Check if a given object implements the ParityRateTypeRateAmounts interface.
 */
function instanceOfParityRateTypeRateAmounts(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfParityRateTypeRateAmounts = instanceOfParityRateTypeRateAmounts;
function ParityRateTypeRateAmountsFromJSON(json) {
    return ParityRateTypeRateAmountsFromJSONTyped(json, false);
}
exports.ParityRateTypeRateAmountsFromJSON = ParityRateTypeRateAmountsFromJSON;
function ParityRateTypeRateAmountsFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'cancellationAmount': !(0, runtime_1.exists)(json, 'cancellationAmount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['cancellationAmount']),
        'commissionAmount': !(0, runtime_1.exists)(json, 'commissionAmount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['commissionAmount']),
        'depositAmount': !(0, runtime_1.exists)(json, 'depositAmount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['depositAmount']),
        'taxAmount': !(0, runtime_1.exists)(json, 'taxAmount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['taxAmount']),
        'totalAmount': !(0, runtime_1.exists)(json, 'totalAmount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['totalAmount']),
    };
}
exports.ParityRateTypeRateAmountsFromJSONTyped = ParityRateTypeRateAmountsFromJSONTyped;
function ParityRateTypeRateAmountsToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'cancellationAmount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.cancellationAmount),
        'commissionAmount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.commissionAmount),
        'depositAmount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.depositAmount),
        'taxAmount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.taxAmount),
        'totalAmount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.totalAmount),
    };
}
exports.ParityRateTypeRateAmountsToJSON = ParityRateTypeRateAmountsToJSON;
