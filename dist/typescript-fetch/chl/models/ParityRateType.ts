/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AdditionalAmountType } from './AdditionalAmountType';
import {
    AdditionalAmountTypeFromJSON,
    AdditionalAmountTypeFromJSONTyped,
    AdditionalAmountTypeToJSON,
} from './AdditionalAmountType';
import type { AdditionalDetailType } from './AdditionalDetailType';
import {
    AdditionalDetailTypeFromJSON,
    AdditionalDetailTypeFromJSONTyped,
    AdditionalDetailTypeToJSON,
} from './AdditionalDetailType';
import type { EnhancedDescriptionType } from './EnhancedDescriptionType';
import {
    EnhancedDescriptionTypeFromJSON,
    EnhancedDescriptionTypeFromJSONTyped,
    EnhancedDescriptionTypeToJSON,
} from './EnhancedDescriptionType';
import type { ParityRateTypeRateAmounts } from './ParityRateTypeRateAmounts';
import {
    ParityRateTypeRateAmountsFromJSON,
    ParityRateTypeRateAmountsFromJSONTyped,
    ParityRateTypeRateAmountsToJSON,
} from './ParityRateTypeRateAmounts';
import type { ParityRateTypeTotalPricingAmounts } from './ParityRateTypeTotalPricingAmounts';
import {
    ParityRateTypeTotalPricingAmountsFromJSON,
    ParityRateTypeTotalPricingAmountsFromJSONTyped,
    ParityRateTypeTotalPricingAmountsToJSON,
} from './ParityRateTypeTotalPricingAmounts';

/**
 * Minimum and Maximum Rate on specific arrival date.
 * @export
 * @interface ParityRateType
 */
export interface ParityRateType {
    /**
     * 
     * @type {Array<AdditionalAmountType>}
     * @memberof ParityRateType
     */
    additionalAmounts?: Array<AdditionalAmountType>;
    /**
     * 
     * @type {Array<AdditionalDetailType>}
     * @memberof ParityRateType
     */
    additionalDetailList?: Array<AdditionalDetailType>;
    /**
     * A monetary amount.
     * @type {number}
     * @memberof ParityRateType
     */
    amount?: number;
    /**
     * Arrival Date.
     * @type {Date}
     * @memberof ParityRateType
     */
    arrivalDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof ParityRateType
     */
    availableRooms?: number;
    /**
     * 
     * @type {string}
     * @memberof ParityRateType
     */
    channelRatePlanCategory?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ParityRateType
     */
    closed?: boolean;
    /**
     * Provides a currency code to reflect the currency in which an amount may be expressed.
     * @type {string}
     * @memberof ParityRateType
     */
    currencyCode?: string;
    /**
     * 
     * @type {ParityRateTypeRateAmounts}
     * @memberof ParityRateType
     */
    rateAmounts?: ParityRateTypeRateAmounts;
    /**
     * 
     * @type {boolean}
     * @memberof ParityRateType
     */
    rateChangesOverDays?: boolean;
    /**
     * 
     * @type {EnhancedDescriptionType}
     * @memberof ParityRateType
     */
    rateDescription?: EnhancedDescriptionType;
    /**
     * 
     * @type {string}
     * @memberof ParityRateType
     */
    rateFrequency?: string;
    /**
     * 
     * @type {string}
     * @memberof ParityRateType
     */
    ratePlanDescription?: string;
    /**
     * 
     * @type {EnhancedDescriptionType}
     * @memberof ParityRateType
     */
    roomTypeDescription?: EnhancedDescriptionType;
    /**
     * Status Code related to functionality.
     * @type {string}
     * @memberof ParityRateType
     */
    statusCode?: string;
    /**
     * Description of Status Code.
     * @type {string}
     * @memberof ParityRateType
     */
    statusDescription?: string;
    /**
     * 
     * @type {ParityRateTypeTotalPricingAmounts}
     * @memberof ParityRateType
     */
    totalPricingAmounts?: ParityRateTypeTotalPricingAmounts;
    /**
     * 
     * @type {boolean}
     * @memberof ParityRateType
     */
    weekendDay?: boolean;
}

/**
 * Check if a given object implements the ParityRateType interface.
 */
export function instanceOfParityRateType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ParityRateTypeFromJSON(json: any): ParityRateType {
    return ParityRateTypeFromJSONTyped(json, false);
}

export function ParityRateTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ParityRateType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'additionalAmounts': !exists(json, 'additionalAmounts') ? undefined : ((json['additionalAmounts'] as Array<any>).map(AdditionalAmountTypeFromJSON)),
        'additionalDetailList': !exists(json, 'additionalDetailList') ? undefined : ((json['additionalDetailList'] as Array<any>).map(AdditionalDetailTypeFromJSON)),
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'arrivalDate': !exists(json, 'arrivalDate') ? undefined : (new Date(json['arrivalDate'])),
        'availableRooms': !exists(json, 'availableRooms') ? undefined : json['availableRooms'],
        'channelRatePlanCategory': !exists(json, 'channelRatePlanCategory') ? undefined : json['channelRatePlanCategory'],
        'closed': !exists(json, 'closed') ? undefined : json['closed'],
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
        'rateAmounts': !exists(json, 'rateAmounts') ? undefined : ParityRateTypeRateAmountsFromJSON(json['rateAmounts']),
        'rateChangesOverDays': !exists(json, 'rateChangesOverDays') ? undefined : json['rateChangesOverDays'],
        'rateDescription': !exists(json, 'rateDescription') ? undefined : EnhancedDescriptionTypeFromJSON(json['rateDescription']),
        'rateFrequency': !exists(json, 'rateFrequency') ? undefined : json['rateFrequency'],
        'ratePlanDescription': !exists(json, 'ratePlanDescription') ? undefined : json['ratePlanDescription'],
        'roomTypeDescription': !exists(json, 'roomTypeDescription') ? undefined : EnhancedDescriptionTypeFromJSON(json['roomTypeDescription']),
        'statusCode': !exists(json, 'statusCode') ? undefined : json['statusCode'],
        'statusDescription': !exists(json, 'statusDescription') ? undefined : json['statusDescription'],
        'totalPricingAmounts': !exists(json, 'totalPricingAmounts') ? undefined : ParityRateTypeTotalPricingAmountsFromJSON(json['totalPricingAmounts']),
        'weekendDay': !exists(json, 'weekendDay') ? undefined : json['weekendDay'],
    };
}

export function ParityRateTypeToJSON(value?: ParityRateType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'additionalAmounts': value.additionalAmounts === undefined ? undefined : ((value.additionalAmounts as Array<any>).map(AdditionalAmountTypeToJSON)),
        'additionalDetailList': value.additionalDetailList === undefined ? undefined : ((value.additionalDetailList as Array<any>).map(AdditionalDetailTypeToJSON)),
        'amount': value.amount,
        'arrivalDate': value.arrivalDate === undefined ? undefined : (value.arrivalDate.toISOString().substr(0,10)),
        'availableRooms': value.availableRooms,
        'channelRatePlanCategory': value.channelRatePlanCategory,
        'closed': value.closed,
        'currencyCode': value.currencyCode,
        'rateAmounts': ParityRateTypeRateAmountsToJSON(value.rateAmounts),
        'rateChangesOverDays': value.rateChangesOverDays,
        'rateDescription': EnhancedDescriptionTypeToJSON(value.rateDescription),
        'rateFrequency': value.rateFrequency,
        'ratePlanDescription': value.ratePlanDescription,
        'roomTypeDescription': EnhancedDescriptionTypeToJSON(value.roomTypeDescription),
        'statusCode': value.statusCode,
        'statusDescription': value.statusDescription,
        'totalPricingAmounts': ParityRateTypeTotalPricingAmountsToJSON(value.totalPricingAmounts),
        'weekendDay': value.weekendDay,
    };
}

