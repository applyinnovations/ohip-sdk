/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChannelAccountContractInformationType } from './ChannelAccountContractInformationType';
import {
    ChannelAccountContractInformationTypeFromJSON,
    ChannelAccountContractInformationTypeFromJSONTyped,
    ChannelAccountContractInformationTypeToJSON,
} from './ChannelAccountContractInformationType';
import type { ProfileId } from './ProfileId';
import {
    ProfileIdFromJSON,
    ProfileIdFromJSONTyped,
    ProfileIdToJSON,
} from './ProfileId';

/**
 * Channel account contracts type to hold account and contract details.
 * @export
 * @interface ChannelAccountContractsType
 */
export interface ChannelAccountContractsType {
    /**
     * Holds Account code of the channel account.
     * @type {string}
     * @memberof ChannelAccountContractsType
     */
    accountCode?: string;
    /**
     * Holds Account Name of the channel account.
     * @type {string}
     * @memberof ChannelAccountContractsType
     */
    accountName?: string;
    /**
     * Channel account contract information object to hold details of channel account contract.
     * @type {Array<ChannelAccountContractInformationType>}
     * @memberof ChannelAccountContractsType
     */
    channelAccountContractsInformation?: Array<ChannelAccountContractInformationType>;
    /**
     * 
     * @type {ProfileId}
     * @memberof ChannelAccountContractsType
     */
    profileId?: ProfileId;
}

/**
 * Check if a given object implements the ChannelAccountContractsType interface.
 */
export function instanceOfChannelAccountContractsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChannelAccountContractsTypeFromJSON(json: any): ChannelAccountContractsType {
    return ChannelAccountContractsTypeFromJSONTyped(json, false);
}

export function ChannelAccountContractsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelAccountContractsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accountCode': !exists(json, 'accountCode') ? undefined : json['accountCode'],
        'accountName': !exists(json, 'accountName') ? undefined : json['accountName'],
        'channelAccountContractsInformation': !exists(json, 'channelAccountContractsInformation') ? undefined : ((json['channelAccountContractsInformation'] as Array<any>).map(ChannelAccountContractInformationTypeFromJSON)),
        'profileId': !exists(json, 'profileId') ? undefined : ProfileIdFromJSON(json['profileId']),
    };
}

export function ChannelAccountContractsTypeToJSON(value?: ChannelAccountContractsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accountCode': value.accountCode,
        'accountName': value.accountName,
        'channelAccountContractsInformation': value.channelAccountContractsInformation === undefined ? undefined : ((value.channelAccountContractsInformation as Array<any>).map(ChannelAccountContractInformationTypeToJSON)),
        'profileId': ProfileIdToJSON(value.profileId),
    };
}

