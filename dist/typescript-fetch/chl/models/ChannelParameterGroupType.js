"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelParameterGroupTypeToJSON = exports.ChannelParameterGroupTypeFromJSONTyped = exports.ChannelParameterGroupTypeFromJSON = exports.instanceOfChannelParameterGroupType = void 0;
const runtime_1 = require("../runtime");
const ChannelParameterType_1 = require("./ChannelParameterType");
/**
 * Check if a given object implements the ChannelParameterGroupType interface.
 */
function instanceOfChannelParameterGroupType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfChannelParameterGroupType = instanceOfChannelParameterGroupType;
function ChannelParameterGroupTypeFromJSON(json) {
    return ChannelParameterGroupTypeFromJSONTyped(json, false);
}
exports.ChannelParameterGroupTypeFromJSON = ChannelParameterGroupTypeFromJSON;
function ChannelParameterGroupTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'channelParameters': !(0, runtime_1.exists)(json, 'channelParameters') ? undefined : (json['channelParameters'].map(ChannelParameterType_1.ChannelParameterTypeFromJSON)),
        'groupName': !(0, runtime_1.exists)(json, 'groupName') ? undefined : json['groupName'],
        'groupDisplayName': !(0, runtime_1.exists)(json, 'groupDisplayName') ? undefined : json['groupDisplayName'],
    };
}
exports.ChannelParameterGroupTypeFromJSONTyped = ChannelParameterGroupTypeFromJSONTyped;
function ChannelParameterGroupTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'channelParameters': value.channelParameters === undefined ? undefined : (value.channelParameters.map(ChannelParameterType_1.ChannelParameterTypeToJSON)),
        'groupName': value.groupName,
        'groupDisplayName': value.groupDisplayName,
    };
}
exports.ChannelParameterGroupTypeToJSON = ChannelParameterGroupTypeToJSON;
