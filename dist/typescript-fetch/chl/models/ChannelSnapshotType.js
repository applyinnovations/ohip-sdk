"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelSnapshotTypeToJSON = exports.ChannelSnapshotTypeFromJSONTyped = exports.ChannelSnapshotTypeFromJSON = exports.instanceOfChannelSnapshotType = void 0;
const runtime_1 = require("../runtime");
const RestrictionInfoType_1 = require("./RestrictionInfoType");
/**
 * Check if a given object implements the ChannelSnapshotType interface.
 */
function instanceOfChannelSnapshotType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfChannelSnapshotType = instanceOfChannelSnapshotType;
function ChannelSnapshotTypeFromJSON(json) {
    return ChannelSnapshotTypeFromJSONTyped(json, false);
}
exports.ChannelSnapshotTypeFromJSON = ChannelSnapshotTypeFromJSON;
function ChannelSnapshotTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'availableRooms': !(0, runtime_1.exists)(json, 'availableRooms') ? undefined : json['availableRooms'],
        'date': !(0, runtime_1.exists)(json, 'date') ? undefined : json['date'],
        'inventoryRooms': !(0, runtime_1.exists)(json, 'inventoryRooms') ? undefined : json['inventoryRooms'],
        'restrictionsInfo': !(0, runtime_1.exists)(json, 'restrictionsInfo') ? undefined : (json['restrictionsInfo'].map(RestrictionInfoType_1.RestrictionInfoTypeFromJSON)),
        'roomsSold': !(0, runtime_1.exists)(json, 'roomsSold') ? undefined : json['roomsSold'],
        'sellLimit': !(0, runtime_1.exists)(json, 'sellLimit') ? undefined : json['sellLimit'],
        'tentativeRoomsSold': !(0, runtime_1.exists)(json, 'tentativeRoomsSold') ? undefined : json['tentativeRoomsSold'],
    };
}
exports.ChannelSnapshotTypeFromJSONTyped = ChannelSnapshotTypeFromJSONTyped;
function ChannelSnapshotTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'availableRooms': value.availableRooms,
        'date': value.date,
        'inventoryRooms': value.inventoryRooms,
        'restrictionsInfo': value.restrictionsInfo === undefined ? undefined : (value.restrictionsInfo.map(RestrictionInfoType_1.RestrictionInfoTypeToJSON)),
        'roomsSold': value.roomsSold,
        'sellLimit': value.sellLimit,
        'tentativeRoomsSold': value.tentativeRoomsSold,
    };
}
exports.ChannelSnapshotTypeToJSON = ChannelSnapshotTypeToJSON;
