"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelMarketingTextsInfoToJSON = exports.ChannelMarketingTextsInfoFromJSONTyped = exports.ChannelMarketingTextsInfoFromJSON = exports.instanceOfChannelMarketingTextsInfo = void 0;
const runtime_1 = require("../runtime");
const BookingChannelInfoType_1 = require("./BookingChannelInfoType");
const HotelChannelInfoType_1 = require("./HotelChannelInfoType");
const InstanceLink_1 = require("./InstanceLink");
const MarketingTextType_1 = require("./MarketingTextType");
const WarningType_1 = require("./WarningType");
/**
 * Check if a given object implements the ChannelMarketingTextsInfo interface.
 */
function instanceOfChannelMarketingTextsInfo(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfChannelMarketingTextsInfo = instanceOfChannelMarketingTextsInfo;
function ChannelMarketingTextsInfoFromJSON(json) {
    return ChannelMarketingTextsInfoFromJSONTyped(json, false);
}
exports.ChannelMarketingTextsInfoFromJSON = ChannelMarketingTextsInfoFromJSON;
function ChannelMarketingTextsInfoFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'marketingTexts': !(0, runtime_1.exists)(json, 'marketingTexts') ? undefined : (json['marketingTexts'].map(MarketingTextType_1.MarketingTextTypeFromJSON)),
        'hotelsInfo': !(0, runtime_1.exists)(json, 'hotelsInfo') ? undefined : (json['hotelsInfo'].map(HotelChannelInfoType_1.HotelChannelInfoTypeFromJSON)),
        'bookingChannelsInfo': !(0, runtime_1.exists)(json, 'bookingChannelsInfo') ? undefined : (json['bookingChannelsInfo'].map(BookingChannelInfoType_1.BookingChannelInfoTypeFromJSON)),
        'links': !(0, runtime_1.exists)(json, 'links') ? undefined : (json['links'].map(InstanceLink_1.InstanceLinkFromJSON)),
        'warnings': !(0, runtime_1.exists)(json, 'warnings') ? undefined : (json['warnings'].map(WarningType_1.WarningTypeFromJSON)),
    };
}
exports.ChannelMarketingTextsInfoFromJSONTyped = ChannelMarketingTextsInfoFromJSONTyped;
function ChannelMarketingTextsInfoToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'marketingTexts': value.marketingTexts === undefined ? undefined : (value.marketingTexts.map(MarketingTextType_1.MarketingTextTypeToJSON)),
        'hotelsInfo': value.hotelsInfo === undefined ? undefined : (value.hotelsInfo.map(HotelChannelInfoType_1.HotelChannelInfoTypeToJSON)),
        'bookingChannelsInfo': value.bookingChannelsInfo === undefined ? undefined : (value.bookingChannelsInfo.map(BookingChannelInfoType_1.BookingChannelInfoTypeToJSON)),
        'links': value.links === undefined ? undefined : (value.links.map(InstanceLink_1.InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : (value.warnings.map(WarningType_1.WarningTypeToJSON)),
    };
}
exports.ChannelMarketingTextsInfoToJSON = ChannelMarketingTextsInfoToJSON;
