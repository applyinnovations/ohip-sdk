"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelAccountInformationTypeToJSON = exports.ChannelAccountInformationTypeFromJSONTyped = exports.ChannelAccountInformationTypeFromJSON = exports.instanceOfChannelAccountInformationType = void 0;
const runtime_1 = require("../runtime");
const ChannelAccountCommunicationType_1 = require("./ChannelAccountCommunicationType");
const ChannelAccountContactType_1 = require("./ChannelAccountContactType");
const ChannelAccountContractInformationType_1 = require("./ChannelAccountContractInformationType");
const ChannelAccountDetailsType_1 = require("./ChannelAccountDetailsType");
const ChannelAccountNotesType_1 = require("./ChannelAccountNotesType");
const ChannelAccountSetupDetailsType_1 = require("./ChannelAccountSetupDetailsType");
const IndicatorType_1 = require("./IndicatorType");
/**
 * Check if a given object implements the ChannelAccountInformationType interface.
 */
function instanceOfChannelAccountInformationType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfChannelAccountInformationType = instanceOfChannelAccountInformationType;
function ChannelAccountInformationTypeFromJSON(json) {
    return ChannelAccountInformationTypeFromJSONTyped(json, false);
}
exports.ChannelAccountInformationTypeFromJSON = ChannelAccountInformationTypeFromJSON;
function ChannelAccountInformationTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'accountDetails': !(0, runtime_1.exists)(json, 'accountDetails') ? undefined : (0, ChannelAccountDetailsType_1.ChannelAccountDetailsTypeFromJSON)(json['accountDetails']),
        'accountSetupDetails': !(0, runtime_1.exists)(json, 'accountSetupDetails') ? undefined : (0, ChannelAccountSetupDetailsType_1.ChannelAccountSetupDetailsTypeFromJSON)(json['accountSetupDetails']),
        'channelAccountIndicators': !(0, runtime_1.exists)(json, 'channelAccountIndicators') ? undefined : (json['channelAccountIndicators'].map(IndicatorType_1.IndicatorTypeFromJSON)),
        'channelAccountNotes': !(0, runtime_1.exists)(json, 'channelAccountNotes') ? undefined : (0, ChannelAccountNotesType_1.ChannelAccountNotesTypeFromJSON)(json['channelAccountNotes']),
        'communicationDetails': !(0, runtime_1.exists)(json, 'communicationDetails') ? undefined : (0, ChannelAccountCommunicationType_1.ChannelAccountCommunicationTypeFromJSON)(json['communicationDetails']),
        'contactInformation': !(0, runtime_1.exists)(json, 'contactInformation') ? undefined : (0, ChannelAccountContactType_1.ChannelAccountContactTypeFromJSON)(json['contactInformation']),
        'contractInformation': !(0, runtime_1.exists)(json, 'contractInformation') ? undefined : (json['contractInformation'].map(ChannelAccountContractInformationType_1.ChannelAccountContractInformationTypeFromJSON)),
    };
}
exports.ChannelAccountInformationTypeFromJSONTyped = ChannelAccountInformationTypeFromJSONTyped;
function ChannelAccountInformationTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'accountDetails': (0, ChannelAccountDetailsType_1.ChannelAccountDetailsTypeToJSON)(value.accountDetails),
        'accountSetupDetails': (0, ChannelAccountSetupDetailsType_1.ChannelAccountSetupDetailsTypeToJSON)(value.accountSetupDetails),
        'channelAccountIndicators': value.channelAccountIndicators === undefined ? undefined : (value.channelAccountIndicators.map(IndicatorType_1.IndicatorTypeToJSON)),
        'channelAccountNotes': (0, ChannelAccountNotesType_1.ChannelAccountNotesTypeToJSON)(value.channelAccountNotes),
        'communicationDetails': (0, ChannelAccountCommunicationType_1.ChannelAccountCommunicationTypeToJSON)(value.communicationDetails),
        'contactInformation': (0, ChannelAccountContactType_1.ChannelAccountContactTypeToJSON)(value.contactInformation),
        'contractInformation': value.contractInformation === undefined ? undefined : (value.contractInformation.map(ChannelAccountContractInformationType_1.ChannelAccountContractInformationTypeToJSON)),
    };
}
exports.ChannelAccountInformationTypeToJSON = ChannelAccountInformationTypeToJSON;
