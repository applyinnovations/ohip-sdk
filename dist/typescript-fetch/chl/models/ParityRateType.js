"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParityRateTypeToJSON = exports.ParityRateTypeFromJSONTyped = exports.ParityRateTypeFromJSON = exports.instanceOfParityRateType = void 0;
const runtime_1 = require("../runtime");
const AdditionalAmountType_1 = require("./AdditionalAmountType");
const AdditionalDetailType_1 = require("./AdditionalDetailType");
const EnhancedDescriptionType_1 = require("./EnhancedDescriptionType");
const ParityRateTypeRateAmounts_1 = require("./ParityRateTypeRateAmounts");
const ParityRateTypeTotalPricingAmounts_1 = require("./ParityRateTypeTotalPricingAmounts");
/**
 * Check if a given object implements the ParityRateType interface.
 */
function instanceOfParityRateType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfParityRateType = instanceOfParityRateType;
function ParityRateTypeFromJSON(json) {
    return ParityRateTypeFromJSONTyped(json, false);
}
exports.ParityRateTypeFromJSON = ParityRateTypeFromJSON;
function ParityRateTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'additionalDetailList': !(0, runtime_1.exists)(json, 'additionalDetailList') ? undefined : (json['additionalDetailList'].map(AdditionalDetailType_1.AdditionalDetailTypeFromJSON)),
        'roomTypeDescription': !(0, runtime_1.exists)(json, 'roomTypeDescription') ? undefined : (0, EnhancedDescriptionType_1.EnhancedDescriptionTypeFromJSON)(json['roomTypeDescription']),
        'rateDescription': !(0, runtime_1.exists)(json, 'rateDescription') ? undefined : (0, EnhancedDescriptionType_1.EnhancedDescriptionTypeFromJSON)(json['rateDescription']),
        'ratePlanDescription': !(0, runtime_1.exists)(json, 'ratePlanDescription') ? undefined : json['ratePlanDescription'],
        'channelRatePlanCategory': !(0, runtime_1.exists)(json, 'channelRatePlanCategory') ? undefined : json['channelRatePlanCategory'],
        'rateFrequency': !(0, runtime_1.exists)(json, 'rateFrequency') ? undefined : json['rateFrequency'],
        'availableRooms': !(0, runtime_1.exists)(json, 'availableRooms') ? undefined : json['availableRooms'],
        'additionalAmounts': !(0, runtime_1.exists)(json, 'additionalAmounts') ? undefined : (json['additionalAmounts'].map(AdditionalAmountType_1.AdditionalAmountTypeFromJSON)),
        'rateAmounts': !(0, runtime_1.exists)(json, 'rateAmounts') ? undefined : (0, ParityRateTypeRateAmounts_1.ParityRateTypeRateAmountsFromJSON)(json['rateAmounts']),
        'totalPricingAmounts': !(0, runtime_1.exists)(json, 'totalPricingAmounts') ? undefined : (0, ParityRateTypeTotalPricingAmounts_1.ParityRateTypeTotalPricingAmountsFromJSON)(json['totalPricingAmounts']),
        'arrivalDate': !(0, runtime_1.exists)(json, 'arrivalDate') ? undefined : json['arrivalDate'],
        'weekendDay': !(0, runtime_1.exists)(json, 'weekendDay') ? undefined : json['weekendDay'],
        'closed': !(0, runtime_1.exists)(json, 'closed') ? undefined : json['closed'],
        'amount': !(0, runtime_1.exists)(json, 'amount') ? undefined : json['amount'],
        'currencyCode': !(0, runtime_1.exists)(json, 'currencyCode') ? undefined : json['currencyCode'],
        'statusCode': !(0, runtime_1.exists)(json, 'statusCode') ? undefined : json['statusCode'],
        'statusDescription': !(0, runtime_1.exists)(json, 'statusDescription') ? undefined : json['statusDescription'],
        'rateChangesOverDays': !(0, runtime_1.exists)(json, 'rateChangesOverDays') ? undefined : json['rateChangesOverDays'],
    };
}
exports.ParityRateTypeFromJSONTyped = ParityRateTypeFromJSONTyped;
function ParityRateTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'additionalDetailList': value.additionalDetailList === undefined ? undefined : (value.additionalDetailList.map(AdditionalDetailType_1.AdditionalDetailTypeToJSON)),
        'roomTypeDescription': (0, EnhancedDescriptionType_1.EnhancedDescriptionTypeToJSON)(value.roomTypeDescription),
        'rateDescription': (0, EnhancedDescriptionType_1.EnhancedDescriptionTypeToJSON)(value.rateDescription),
        'ratePlanDescription': value.ratePlanDescription,
        'channelRatePlanCategory': value.channelRatePlanCategory,
        'rateFrequency': value.rateFrequency,
        'availableRooms': value.availableRooms,
        'additionalAmounts': value.additionalAmounts === undefined ? undefined : (value.additionalAmounts.map(AdditionalAmountType_1.AdditionalAmountTypeToJSON)),
        'rateAmounts': (0, ParityRateTypeRateAmounts_1.ParityRateTypeRateAmountsToJSON)(value.rateAmounts),
        'totalPricingAmounts': (0, ParityRateTypeTotalPricingAmounts_1.ParityRateTypeTotalPricingAmountsToJSON)(value.totalPricingAmounts),
        'arrivalDate': value.arrivalDate,
        'weekendDay': value.weekendDay,
        'closed': value.closed,
        'amount': value.amount,
        'currencyCode': value.currencyCode,
        'statusCode': value.statusCode,
        'statusDescription': value.statusDescription,
        'rateChangesOverDays': value.rateChangesOverDays,
    };
}
exports.ParityRateTypeToJSON = ParityRateTypeToJSON;
