"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdditionalDetailTypeToJSON = exports.AdditionalDetailTypeFromJSONTyped = exports.AdditionalDetailTypeFromJSON = exports.instanceOfAdditionalDetailType = exports.AdditionalDetailTypeDetailTypeEnum = void 0;
const runtime_1 = require("../runtime");
/**
 * @export
 */
exports.AdditionalDetailTypeDetailTypeEnum = {
    CancelPolicy: 'CancelPolicy',
    CommissionPolicy: 'CommissionPolicy',
    GuaranteePolicy: 'GuaranteePolicy',
    DepositPolicy: 'DepositPolicy',
    PenaltyPolicy: 'PenaltyPolicy',
    MarketingInformation: 'MarketingInformation',
    Promotion: 'Promotion',
    TaxInformation: 'TaxInformation',
    Other: 'Other'
};
/**
 * Check if a given object implements the AdditionalDetailType interface.
 */
function instanceOfAdditionalDetailType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfAdditionalDetailType = instanceOfAdditionalDetailType;
function AdditionalDetailTypeFromJSON(json) {
    return AdditionalDetailTypeFromJSONTyped(json, false);
}
exports.AdditionalDetailTypeFromJSON = AdditionalDetailTypeFromJSON;
function AdditionalDetailTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'detailType': !(0, runtime_1.exists)(json, 'detailType') ? undefined : json['detailType'],
        'otherDetailType': !(0, runtime_1.exists)(json, 'otherDetailType') ? undefined : json['otherDetailType'],
    };
}
exports.AdditionalDetailTypeFromJSONTyped = AdditionalDetailTypeFromJSONTyped;
function AdditionalDetailTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'description': value.description,
        'detailType': value.detailType,
        'otherDetailType': value.otherDetailType,
    };
}
exports.AdditionalDetailTypeToJSON = AdditionalDetailTypeToJSON;
