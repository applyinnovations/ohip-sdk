/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { ContractFeeTypeType } from './ContractFeeTypeType';
import type { ContractPriceFrequencyType } from './ContractPriceFrequencyType';
import type { ContractPricingType } from './ContractPricingType';
import type { ContractRangeInformationType } from './ContractRangeInformationType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import type { OrderByListTypeInner } from './OrderByListTypeInner';
import type { UniqueIDType } from './UniqueIDType';
/**
 * To hold channel account contract element detailed information.
 * @export
 * @interface ChannelStatementDetailType
 */
export interface ChannelStatementDetailType {
    /**
     * Holds channel of the contract element.
     * @type {string}
     * @memberof ChannelStatementDetailType
     */
    bookingChannelCode?: string;
    /**
     * Holds channel type of the contract element.
     * @type {string}
     * @memberof ChannelStatementDetailType
     */
    bookingChannelType?: string;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof ChannelStatementDetailType
     */
    contractAmount?: CurrencyAmountType;
    /**
     *
     * @type {UniqueIDType}
     * @memberof ChannelStatementDetailType
     */
    contractId?: UniqueIDType;
    /**
     *
     * @type {ContractPricingType}
     * @memberof ChannelStatementDetailType
     */
    contractPricing?: ContractPricingType;
    /**
     *
     * @type {ContractRangeInformationType}
     * @memberof ChannelStatementDetailType
     */
    contractRangeInformation?: ContractRangeInformationType;
    /**
     *
     * @type {ContractFeeTypeType}
     * @memberof ChannelStatementDetailType
     */
    feeType?: ContractFeeTypeType;
    /**
     *
     * @type {ContractPriceFrequencyType}
     * @memberof ChannelStatementDetailType
     */
    frequency?: ContractPriceFrequencyType;
    /**
     * Holds the property for the statement detail.
     * @type {string}
     * @memberof ChannelStatementDetailType
     */
    hotelId?: string;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof ChannelStatementDetailType
     */
    invoiceAmount?: CurrencyAmountType;
    /**
     * Holds Note for the contract element.
     * @type {string}
     * @memberof ChannelStatementDetailType
     */
    note?: string;
    /**
     * Holds the value of property that user changed from to find and update.
     * @type {string}
     * @memberof ChannelStatementDetailType
     */
    oldHotelCode?: string;
    /**
     *
     * @type {Array<OrderByListTypeInner>}
     * @memberof ChannelStatementDetailType
     */
    orderByList?: Array<OrderByListTypeInner>;
    /**
     * Number of Units (transactions, rooms or properties).
     * @type {number}
     * @memberof ChannelStatementDetailType
     */
    quantity?: number;
    /**
     * Holds Routing account. If no value is provided, it will be defaulted to *
     * @type {string}
     * @memberof ChannelStatementDetailType
     */
    routingAccount?: string;
    /**
     * Sequence identifies contract element per contract.
     * @type {number}
     * @memberof ChannelStatementDetailType
     */
    sequence?: number;
    /**
     *
     * @type {UniqueIDType}
     * @memberof ChannelStatementDetailType
     */
    statementId?: UniqueIDType;
}
/**
 * Check if a given object implements the ChannelStatementDetailType interface.
 */
export declare function instanceOfChannelStatementDetailType(value: object): boolean;
export declare function ChannelStatementDetailTypeFromJSON(json: any): ChannelStatementDetailType;
export declare function ChannelStatementDetailTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelStatementDetailType;
export declare function ChannelStatementDetailTypeToJSON(value?: ChannelStatementDetailType | null): any;
