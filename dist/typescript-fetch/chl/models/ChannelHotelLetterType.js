"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelHotelLetterTypeToJSON = exports.ChannelHotelLetterTypeFromJSONTyped = exports.ChannelHotelLetterTypeFromJSON = exports.instanceOfChannelHotelLetterType = void 0;
const runtime_1 = require("../runtime");
const CodeDescriptionType_1 = require("./CodeDescriptionType");
const LetterTypeType_1 = require("./LetterTypeType");
const WarningType_1 = require("./WarningType");
/**
 * Check if a given object implements the ChannelHotelLetterType interface.
 */
function instanceOfChannelHotelLetterType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfChannelHotelLetterType = instanceOfChannelHotelLetterType;
function ChannelHotelLetterTypeFromJSON(json) {
    return ChannelHotelLetterTypeFromJSONTyped(json, false);
}
exports.ChannelHotelLetterTypeFromJSON = ChannelHotelLetterTypeFromJSON;
function ChannelHotelLetterTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'bookingChannel': !(0, runtime_1.exists)(json, 'bookingChannel') ? undefined : (0, CodeDescriptionType_1.CodeDescriptionTypeFromJSON)(json['bookingChannel']),
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'languageCode': !(0, runtime_1.exists)(json, 'languageCode') ? undefined : (0, CodeDescriptionType_1.CodeDescriptionTypeFromJSON)(json['languageCode']),
        'letterName': !(0, runtime_1.exists)(json, 'letterName') ? undefined : json['letterName'],
        'letterType': !(0, runtime_1.exists)(json, 'letterType') ? undefined : (0, LetterTypeType_1.LetterTypeTypeFromJSON)(json['letterType']),
        'warnings': !(0, runtime_1.exists)(json, 'warnings') ? undefined : (json['warnings'].map(WarningType_1.WarningTypeFromJSON)),
    };
}
exports.ChannelHotelLetterTypeFromJSONTyped = ChannelHotelLetterTypeFromJSONTyped;
function ChannelHotelLetterTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'bookingChannel': (0, CodeDescriptionType_1.CodeDescriptionTypeToJSON)(value.bookingChannel),
        'hotelId': value.hotelId,
        'languageCode': (0, CodeDescriptionType_1.CodeDescriptionTypeToJSON)(value.languageCode),
        'letterName': value.letterName,
        'letterType': (0, LetterTypeType_1.LetterTypeTypeToJSON)(value.letterType),
        'warnings': value.warnings === undefined ? undefined : (value.warnings.map(WarningType_1.WarningTypeToJSON)),
    };
}
exports.ChannelHotelLetterTypeToJSON = ChannelHotelLetterTypeToJSON;
