"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnhancedDescriptionTypeToJSON = exports.EnhancedDescriptionTypeFromJSONTyped = exports.EnhancedDescriptionTypeFromJSON = exports.instanceOfEnhancedDescriptionType = void 0;
const runtime_1 = require("../runtime");
const TranslationTextType2000_1 = require("./TranslationTextType2000");
const TranslationTextType50_1 = require("./TranslationTextType50");
/**
 * Check if a given object implements the EnhancedDescriptionType interface.
 */
function instanceOfEnhancedDescriptionType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfEnhancedDescriptionType = instanceOfEnhancedDescriptionType;
function EnhancedDescriptionTypeFromJSON(json) {
    return EnhancedDescriptionTypeFromJSONTyped(json, false);
}
exports.EnhancedDescriptionTypeFromJSON = EnhancedDescriptionTypeFromJSON;
function EnhancedDescriptionTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : (0, TranslationTextType2000_1.TranslationTextType2000FromJSON)(json['description']),
        'enhancedDesc1': !(0, runtime_1.exists)(json, 'enhancedDesc1') ? undefined : (0, TranslationTextType50_1.TranslationTextType50FromJSON)(json['enhancedDesc1']),
        'enhancedDesc2': !(0, runtime_1.exists)(json, 'enhancedDesc2') ? undefined : (0, TranslationTextType50_1.TranslationTextType50FromJSON)(json['enhancedDesc2']),
        'enhancedDesc3': !(0, runtime_1.exists)(json, 'enhancedDesc3') ? undefined : (0, TranslationTextType50_1.TranslationTextType50FromJSON)(json['enhancedDesc3']),
        'shortDescription': !(0, runtime_1.exists)(json, 'shortDescription') ? undefined : (0, TranslationTextType2000_1.TranslationTextType2000FromJSON)(json['shortDescription']),
        'source': !(0, runtime_1.exists)(json, 'source') ? undefined : json['source'],
    };
}
exports.EnhancedDescriptionTypeFromJSONTyped = EnhancedDescriptionTypeFromJSONTyped;
function EnhancedDescriptionTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'description': (0, TranslationTextType2000_1.TranslationTextType2000ToJSON)(value.description),
        'enhancedDesc1': (0, TranslationTextType50_1.TranslationTextType50ToJSON)(value.enhancedDesc1),
        'enhancedDesc2': (0, TranslationTextType50_1.TranslationTextType50ToJSON)(value.enhancedDesc2),
        'enhancedDesc3': (0, TranslationTextType50_1.TranslationTextType50ToJSON)(value.enhancedDesc3),
        'shortDescription': (0, TranslationTextType2000_1.TranslationTextType2000ToJSON)(value.shortDescription),
        'source': value.source,
    };
}
exports.EnhancedDescriptionTypeToJSON = EnhancedDescriptionTypeToJSON;
