/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { BaseChannelParameterType } from './BaseChannelParameterType';
import type { ChannelParameterLevelType } from './ChannelParameterLevelType';
import type { ChannelParameterValueType } from './ChannelParameterValueType';
/**
 * Parameters details for the Channel.
 * @export
 * @interface ChannelParameterType
 */
export interface ChannelParameterType {
    /**
     * Name of the parameter in the channel.
     * @type {string}
     * @memberof ChannelParameterType
     */
    parameterName?: string;
    /**
     * The display name for the parameter in the channel.
     * @type {string}
     * @memberof ChannelParameterType
     */
    parameterDisplay?: string;
    /**
     * Short description for the parameter.
     * @type {string}
     * @memberof ChannelParameterType
     */
    shortDescription?: string;
    /**
     * The Description for the parameter.
     * @type {string}
     * @memberof ChannelParameterType
     */
    parameterDescription?: string;
    /**
     * The Value of the parameter.
     * @type {string}
     * @memberof ChannelParameterType
     */
    parameterValue?: string;
    /**
     * Hotel code identifying the parameters related to the Hotel.
     * @type {string}
     * @memberof ChannelParameterType
     */
    hotelId?: string;
    /**
     * The type of the parameter, the possible types are P (Parameter), Setting (S).
     * @type {string}
     * @memberof ChannelParameterType
     */
    parameterType?: ChannelParameterTypeParameterTypeEnum;
    /**
     * Whether this is a global or property level parameter.
     * @type {string}
     * @memberof ChannelParameterType
     */
    scope?: ChannelParameterTypeScopeEnum;
    /**
     *
     * @type {ChannelParameterValueType}
     * @memberof ChannelParameterType
     */
    valueType?: ChannelParameterValueType;
    /**
     * Sequence number for displaying the parameter in the channel.
     * @type {number}
     * @memberof ChannelParameterType
     */
    sequence?: number;
    /**
     *
     * @type {Array<BaseChannelParameterType>}
     * @memberof ChannelParameterType
     */
    parameters?: Array<BaseChannelParameterType>;
    /**
     *
     * @type {ChannelParameterLevelType}
     * @memberof ChannelParameterType
     */
    levelType?: ChannelParameterLevelType;
    /**
     *
     * @type {string}
     * @memberof ChannelParameterType
     */
    levelCode?: string;
}
/**
 * @export
 */
export declare const ChannelParameterTypeParameterTypeEnum: {
    readonly P: "P";
    readonly S: "S";
};
export type ChannelParameterTypeParameterTypeEnum = typeof ChannelParameterTypeParameterTypeEnum[keyof typeof ChannelParameterTypeParameterTypeEnum];
/**
 * @export
 */
export declare const ChannelParameterTypeScopeEnum: {
    readonly H: "H";
    readonly P: "P";
};
export type ChannelParameterTypeScopeEnum = typeof ChannelParameterTypeScopeEnum[keyof typeof ChannelParameterTypeScopeEnum];
/**
 * Check if a given object implements the ChannelParameterType interface.
 */
export declare function instanceOfChannelParameterType(value: object): boolean;
export declare function ChannelParameterTypeFromJSON(json: any): ChannelParameterType;
export declare function ChannelParameterTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelParameterType;
export declare function ChannelParameterTypeToJSON(value?: ChannelParameterType | null): any;
