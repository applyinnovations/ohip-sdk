"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarketingTextTypeToJSON = exports.MarketingTextTypeFromJSONTyped = exports.MarketingTextTypeFromJSON = exports.instanceOfMarketingTextType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the MarketingTextType interface.
 */
function instanceOfMarketingTextType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfMarketingTextType = instanceOfMarketingTextType;
function MarketingTextTypeFromJSON(json) {
    return MarketingTextTypeFromJSONTyped(json, false);
}
exports.MarketingTextTypeFromJSON = MarketingTextTypeFromJSON;
function MarketingTextTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'beginDate': !(0, runtime_1.exists)(json, 'beginDate') ? undefined : (new Date(json['beginDate'])),
        'bookingChannelCode': !(0, runtime_1.exists)(json, 'bookingChannelCode') ? undefined : json['bookingChannelCode'],
        'endDate': !(0, runtime_1.exists)(json, 'endDate') ? undefined : (new Date(json['endDate'])),
        'globalTextYN': !(0, runtime_1.exists)(json, 'globalTextYN') ? undefined : json['globalTextYN'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'marketingText': !(0, runtime_1.exists)(json, 'marketingText') ? undefined : json['marketingText'],
        'newBeginDate': !(0, runtime_1.exists)(json, 'newBeginDate') ? undefined : (new Date(json['newBeginDate'])),
        'newHotelCode': !(0, runtime_1.exists)(json, 'newHotelCode') ? undefined : json['newHotelCode'],
        'newPolicyDetail': !(0, runtime_1.exists)(json, 'newPolicyDetail') ? undefined : json['newPolicyDetail'],
        'newPolicyType': !(0, runtime_1.exists)(json, 'newPolicyType') ? undefined : json['newPolicyType'],
        'newTransactionType': !(0, runtime_1.exists)(json, 'newTransactionType') ? undefined : json['newTransactionType'],
        'policyDetail': !(0, runtime_1.exists)(json, 'policyDetail') ? undefined : json['policyDetail'],
        'policyType': !(0, runtime_1.exists)(json, 'policyType') ? undefined : json['policyType'],
        'transactionType': !(0, runtime_1.exists)(json, 'transactionType') ? undefined : json['transactionType'],
    };
}
exports.MarketingTextTypeFromJSONTyped = MarketingTextTypeFromJSONTyped;
function MarketingTextTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'beginDate': value.beginDate === undefined ? undefined : (value.beginDate.toISOString().substr(0, 10)),
        'bookingChannelCode': value.bookingChannelCode,
        'endDate': value.endDate === undefined ? undefined : (value.endDate.toISOString().substr(0, 10)),
        'globalTextYN': value.globalTextYN,
        'hotelId': value.hotelId,
        'marketingText': value.marketingText,
        'newBeginDate': value.newBeginDate === undefined ? undefined : (value.newBeginDate.toISOString().substr(0, 10)),
        'newHotelCode': value.newHotelCode,
        'newPolicyDetail': value.newPolicyDetail,
        'newPolicyType': value.newPolicyType,
        'newTransactionType': value.newTransactionType,
        'policyDetail': value.policyDetail,
        'policyType': value.policyType,
        'transactionType': value.transactionType,
    };
}
exports.MarketingTextTypeToJSON = MarketingTextTypeToJSON;
