/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { ChannelParameterValueType } from './ChannelParameterValueType';
/**
 * Parameters details for the Channel.
 * @export
 * @interface BaseChannelParameterType
 */
export interface BaseChannelParameterType {
    /**
     * Hotel code identifying the parameters related to the Hotel.
     * @type {string}
     * @memberof BaseChannelParameterType
     */
    hotelId?: string;
    /**
     * The Description for the parameter.
     * @type {string}
     * @memberof BaseChannelParameterType
     */
    parameterDescription?: string;
    /**
     * The display name for the parameter in the channel.
     * @type {string}
     * @memberof BaseChannelParameterType
     */
    parameterDisplay?: string;
    /**
     * Name of the parameter in the channel.
     * @type {string}
     * @memberof BaseChannelParameterType
     */
    parameterName?: string;
    /**
     * The type of the parameter, the possible types are P (Parameter), Setting (S).
     * @type {string}
     * @memberof BaseChannelParameterType
     */
    parameterType?: BaseChannelParameterTypeParameterTypeEnum;
    /**
     * The Value of the parameter.
     * @type {string}
     * @memberof BaseChannelParameterType
     */
    parameterValue?: string;
    /**
     * Whether this is a global or property level parameter.
     * @type {string}
     * @memberof BaseChannelParameterType
     */
    scope?: BaseChannelParameterTypeScopeEnum;
    /**
     * Sequence number for displaying the parameter in the channel.
     * @type {number}
     * @memberof BaseChannelParameterType
     */
    sequence?: number;
    /**
     * Short description for the parameter.
     * @type {string}
     * @memberof BaseChannelParameterType
     */
    shortDescription?: string;
    /**
     *
     * @type {ChannelParameterValueType}
     * @memberof BaseChannelParameterType
     */
    valueType?: ChannelParameterValueType;
}
/**
 * @export
 */
export declare const BaseChannelParameterTypeParameterTypeEnum: {
    readonly P: "P";
    readonly S: "S";
};
export type BaseChannelParameterTypeParameterTypeEnum = typeof BaseChannelParameterTypeParameterTypeEnum[keyof typeof BaseChannelParameterTypeParameterTypeEnum];
/**
 * @export
 */
export declare const BaseChannelParameterTypeScopeEnum: {
    readonly H: "H";
    readonly P: "P";
};
export type BaseChannelParameterTypeScopeEnum = typeof BaseChannelParameterTypeScopeEnum[keyof typeof BaseChannelParameterTypeScopeEnum];
/**
 * Check if a given object implements the BaseChannelParameterType interface.
 */
export declare function instanceOfBaseChannelParameterType(value: object): boolean;
export declare function BaseChannelParameterTypeFromJSON(json: any): BaseChannelParameterType;
export declare function BaseChannelParameterTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BaseChannelParameterType;
export declare function BaseChannelParameterTypeToJSON(value?: BaseChannelParameterType | null): any;
