"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetChannelInventorySnapshotByRoomTypeSnapshotLevelEnum = exports.GetChannelInventorySnapshotSnapshotLevelEnum = exports.AvailabilityApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class AvailabilityApi extends runtime.BaseAPI {
    /**
     * Operation to fetch the room availability and restrictions for a given property in relation to channels. <p><strong>OperationId:</strong>getChannelInventorySnapshot</p>
     * Gets hotel\'s rooms and restrictions channel availability
     */
    getChannelInventorySnapshotRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getChannelInventorySnapshot.');
            }
            if (requestParameters.fromDate === null || requestParameters.fromDate === undefined) {
                throw new runtime.RequiredError('fromDate', 'Required parameter requestParameters.fromDate was null or undefined when calling getChannelInventorySnapshot.');
            }
            const queryParameters = {};
            if (requestParameters.fromDate !== undefined) {
                queryParameters['fromDate'] = requestParameters.fromDate;
            }
            if (requestParameters.friday !== undefined) {
                queryParameters['friday'] = requestParameters.friday;
            }
            if (requestParameters.monday !== undefined) {
                queryParameters['monday'] = requestParameters.monday;
            }
            if (requestParameters.saturday !== undefined) {
                queryParameters['saturday'] = requestParameters.saturday;
            }
            if (requestParameters.sunday !== undefined) {
                queryParameters['sunday'] = requestParameters.sunday;
            }
            if (requestParameters.thursday !== undefined) {
                queryParameters['thursday'] = requestParameters.thursday;
            }
            if (requestParameters.tuesday !== undefined) {
                queryParameters['tuesday'] = requestParameters.tuesday;
            }
            if (requestParameters.wednesday !== undefined) {
                queryParameters['wednesday'] = requestParameters.wednesday;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.bookingChannelCodes) {
                queryParameters['bookingChannelCodes'] = requestParameters.bookingChannelCodes;
            }
            if (requestParameters.channelRoomTypes) {
                queryParameters['channelRoomTypes'] = requestParameters.channelRoomTypes;
            }
            if (requestParameters.snapshotLevel !== undefined) {
                queryParameters['snapshotLevel'] = requestParameters.snapshotLevel;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/inventorySnapshot`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelInventorySnapshotFromJSON)(jsonValue));
        });
    }
    /**
     * Operation to fetch the room availability and restrictions for a given property in relation to channels. <p><strong>OperationId:</strong>getChannelInventorySnapshot</p>
     * Gets hotel\'s rooms and restrictions channel availability
     */
    getChannelInventorySnapshot(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelInventorySnapshotRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Operation to fetch the room availability and restrictions for a given property and room type in relation to channels. <p><strong>OperationId:</strong>getChannelInventorySnapshotByRoomType</p>
     * Gets hotel room\'s restrictions and channel availability
     */
    getChannelInventorySnapshotByRoomTypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.roomTypeCode === null || requestParameters.roomTypeCode === undefined) {
                throw new runtime.RequiredError('roomTypeCode', 'Required parameter requestParameters.roomTypeCode was null or undefined when calling getChannelInventorySnapshotByRoomType.');
            }
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling getChannelInventorySnapshotByRoomType.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getChannelInventorySnapshotByRoomType.');
            }
            if (requestParameters.fromDate === null || requestParameters.fromDate === undefined) {
                throw new runtime.RequiredError('fromDate', 'Required parameter requestParameters.fromDate was null or undefined when calling getChannelInventorySnapshotByRoomType.');
            }
            const queryParameters = {};
            if (requestParameters.fromDate !== undefined) {
                queryParameters['fromDate'] = requestParameters.fromDate;
            }
            if (requestParameters.friday !== undefined) {
                queryParameters['friday'] = requestParameters.friday;
            }
            if (requestParameters.monday !== undefined) {
                queryParameters['monday'] = requestParameters.monday;
            }
            if (requestParameters.saturday !== undefined) {
                queryParameters['saturday'] = requestParameters.saturday;
            }
            if (requestParameters.sunday !== undefined) {
                queryParameters['sunday'] = requestParameters.sunday;
            }
            if (requestParameters.thursday !== undefined) {
                queryParameters['thursday'] = requestParameters.thursday;
            }
            if (requestParameters.tuesday !== undefined) {
                queryParameters['tuesday'] = requestParameters.tuesday;
            }
            if (requestParameters.wednesday !== undefined) {
                queryParameters['wednesday'] = requestParameters.wednesday;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.snapshotLevel !== undefined) {
                queryParameters['snapshotLevel'] = requestParameters.snapshotLevel;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/channels/{channelCode}/rooms/{roomTypeCode}/inventorySnapshot`.replace(`{${"roomTypeCode"}}`, encodeURIComponent(String(requestParameters.roomTypeCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelInventorySnapshotFromJSON)(jsonValue));
        });
    }
    /**
     * Operation to fetch the room availability and restrictions for a given property and room type in relation to channels. <p><strong>OperationId:</strong>getChannelInventorySnapshotByRoomType</p>
     * Gets hotel room\'s restrictions and channel availability
     */
    getChannelInventorySnapshotByRoomType(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelInventorySnapshotByRoomTypeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to fetch the General Availability Simulator. <p><strong>OperationId:</strong>getGeneralAvailabilitySimulator</p>
     * Gets the General Availability
     */
    getGeneralAvailabilitySimulatorRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getGeneralAvailabilitySimulator.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.bookingChannelCode !== undefined) {
                queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
            }
            if (requestParameters.arrival !== undefined) {
                queryParameters['arrival'] = requestParameters.arrival;
            }
            if (requestParameters.adults !== undefined) {
                queryParameters['adults'] = requestParameters.adults;
            }
            if (requestParameters.nights !== undefined) {
                queryParameters['nights'] = requestParameters.nights;
            }
            if (requestParameters.children !== undefined) {
                queryParameters['children'] = requestParameters.children;
            }
            if (requestParameters.noOfRooms !== undefined) {
                queryParameters['noOfRooms'] = requestParameters.noOfRooms;
            }
            if (requestParameters.channelRatePlanCode) {
                queryParameters['channelRatePlanCode'] = requestParameters.channelRatePlanCode;
            }
            if (requestParameters.rateAccessCode !== undefined) {
                queryParameters['rateAccessCode'] = requestParameters.rateAccessCode;
            }
            if (requestParameters.corpIdIATA !== undefined) {
                queryParameters['corpIdIATA'] = requestParameters.corpIdIATA;
            }
            if (requestParameters.inventoryBlockCode !== undefined) {
                queryParameters['inventoryBlockCode'] = requestParameters.inventoryBlockCode;
            }
            if (requestParameters.promotionCode !== undefined) {
                queryParameters['promotionCode'] = requestParameters.promotionCode;
            }
            if (requestParameters.currencyCode !== undefined) {
                queryParameters['currencyCode'] = requestParameters.currencyCode;
            }
            if (requestParameters.language !== undefined) {
                queryParameters['language'] = requestParameters.language;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/generalAvailabilitySimulator`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GeneralAvailabilitySimulatorFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to fetch the General Availability Simulator. <p><strong>OperationId:</strong>getGeneralAvailabilitySimulator</p>
     * Gets the General Availability
     */
    getGeneralAvailabilitySimulator(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getGeneralAvailabilitySimulatorRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Operation to Fetch the Rate Parity. The rate parity search criteria can include room types, rate plans, promotion code, rate access code or chain codes. <p><strong>OperationId:</strong>getRateParity</p>
     * Gets channel\'s rate configuration
     */
    getRateParityRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRateParity.');
            }
            const queryParameters = {};
            if (requestParameters.comparisonType !== undefined) {
                queryParameters['comparisonType'] = requestParameters.comparisonType;
            }
            if (requestParameters.language !== undefined) {
                queryParameters['language'] = requestParameters.language;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.numberOfDays !== undefined) {
                queryParameters['numberOfDays'] = requestParameters.numberOfDays;
            }
            if (requestParameters.channelCode) {
                queryParameters['channelCode'] = requestParameters.channelCode;
            }
            if (requestParameters.roomType) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.ratePlanCode) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.channelRoomType) {
                queryParameters['channelRoomType'] = requestParameters.channelRoomType;
            }
            if (requestParameters.channelRatePlanCode) {
                queryParameters['channelRatePlanCode'] = requestParameters.channelRatePlanCode;
            }
            if (requestParameters.chainCode) {
                queryParameters['chainCode'] = requestParameters.chainCode;
            }
            if (requestParameters.rateAccessCode !== undefined) {
                queryParameters['rateAccessCode'] = requestParameters.rateAccessCode;
            }
            if (requestParameters.inventoryBlockCode !== undefined) {
                queryParameters['inventoryBlockCode'] = requestParameters.inventoryBlockCode;
            }
            if (requestParameters.promotionCode !== undefined) {
                queryParameters['promotionCode'] = requestParameters.promotionCode;
            }
            if (requestParameters.qualifyingProfileCategory !== undefined) {
                queryParameters['qualifyingProfileCategory'] = requestParameters.qualifyingProfileCategory;
            }
            if (requestParameters.qualifyingProfileId !== undefined) {
                queryParameters['qualifyingProfileId'] = requestParameters.qualifyingProfileId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rateParity`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RateParityFromJSON)(jsonValue));
        });
    }
    /**
     * Operation to Fetch the Rate Parity. The rate parity search criteria can include room types, rate plans, promotion code, rate access code or chain codes. <p><strong>OperationId:</strong>getRateParity</p>
     * Gets channel\'s rate configuration
     */
    getRateParity(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRateParityRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Operation to Fetch the Regional Rate Parity. <p><strong>OperationId:</strong>getRegionalRateParity</p>
     * Gets the regional rate parity
     */
    getRegionalRateParityRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.language !== undefined) {
                queryParameters['language'] = requestParameters.language;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.numberOfDays !== undefined) {
                queryParameters['numberOfDays'] = requestParameters.numberOfDays;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.channelCode) {
                queryParameters['channelCode'] = requestParameters.channelCode;
            }
            if (requestParameters.ratePlanCode) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.channelRatePlanCode) {
                queryParameters['channelRatePlanCode'] = requestParameters.channelRatePlanCode;
            }
            if (requestParameters.chainCode !== undefined) {
                queryParameters['chainCode'] = requestParameters.chainCode;
            }
            if (requestParameters.rateAccessCode !== undefined) {
                queryParameters['rateAccessCode'] = requestParameters.rateAccessCode;
            }
            if (requestParameters.qualifyingProfileCategory !== undefined) {
                queryParameters['qualifyingProfileCategory'] = requestParameters.qualifyingProfileCategory;
            }
            if (requestParameters.qualifyingProfileId !== undefined) {
                queryParameters['qualifyingProfileId'] = requestParameters.qualifyingProfileId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/availability/summary`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RegionalRateParityFromJSON)(jsonValue));
        });
    }
    /**
     * Operation to Fetch the Regional Rate Parity. <p><strong>OperationId:</strong>getRegionalRateParity</p>
     * Gets the regional rate parity
     */
    getRegionalRateParity(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRegionalRateParityRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.AvailabilityApi = AvailabilityApi;
/**
 * @export
 */
exports.GetChannelInventorySnapshotSnapshotLevelEnum = {
    BookingChannel: 'BookingChannel',
    ChannelRoomType: 'ChannelRoomType'
};
/**
 * @export
 */
exports.GetChannelInventorySnapshotByRoomTypeSnapshotLevelEnum = {
    BookingChannel: 'BookingChannel',
    ChannelRoomType: 'ChannelRoomType'
};
