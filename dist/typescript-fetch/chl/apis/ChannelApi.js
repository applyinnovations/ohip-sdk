"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetStatementDetailsStatisticsFetchInstructionsEnum = exports.GetChannelRoomsGlobalDescriptionsGlobalDescriptionTypeEnum = exports.GetChannelRatesGlobalDescriptionsGlobalDescriptionTypeEnum = exports.GetChannelRateRoomSeqChannelRateRoomParameterNameEnum = exports.GetChannelMarketingTextFetchInstructionsEnum = exports.GetChannelHotelLettersLetterTypeEnum = exports.GetChannelBillingStatementDetailsOrderTypeEnum = exports.GetChannelAccountsOrderTypeEnum = exports.GetChannelAccountsAccountTypeEnum = exports.GetChannelAccountContractElementsOrderTypeEnum = exports.GetChannelAccountFetchInstructionsEnum = exports.GetChannelFetchInstructionsEnum = exports.DeleteChannelRoomsGlobalDescriptionsGlobalDescTypeEnum = exports.DeleteChannelRatesGlobalDescriptionsGlobalDescTypeEnum = exports.DeleteChannelNegotiatedRateNameTypeEnum = exports.DeleteChannelHotelLettersLetterTypeEnum = exports.DeleteAmenitiesMappingAmenityGroupEnum = exports.ChannelApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class ChannelApi extends runtime.BaseAPI {
    /**
     * This API creates copy of channel account contracts. <p><strong>OperationId:</strong>copyChannelAccountContracts</p>
     * Creates copy of channel account contracts
     */
    copyChannelAccountContractsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelAccountContractsCopy === null || requestParameters.channelAccountContractsCopy === undefined) {
                throw new runtime.RequiredError('channelAccountContractsCopy', 'Required parameter requestParameters.channelAccountContractsCopy was null or undefined when calling copyChannelAccountContracts.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/account/contracts/copy`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelAccountContractsCopyToJSON)(requestParameters.channelAccountContractsCopy),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelAccountContractsDetailsCopyFromJSON)(jsonValue));
        });
    }
    /**
     * This API creates copy of channel account contracts. <p><strong>OperationId:</strong>copyChannelAccountContracts</p>
     * Creates copy of channel account contracts
     */
    copyChannelAccountContracts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyChannelAccountContractsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to copy one channel\'s mapping for marketing messages to another channel and hotel mapping. <p><strong>OperationId:</strong>copyChannelMarketingText</p>
     * Allows to copy marketing message to another channel and hotel
     */
    copyChannelMarketingTextRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelMarketingTextCopy === null || requestParameters.channelMarketingTextCopy === undefined) {
                throw new runtime.RequiredError('channelMarketingTextCopy', 'Required parameter requestParameters.channelMarketingTextCopy was null or undefined when calling copyChannelMarketingText.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/marketingText/copy`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelMarketingTextCopyToJSON)(requestParameters.channelMarketingTextCopy),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to copy one channel\'s mapping for marketing messages to another channel and hotel mapping. <p><strong>OperationId:</strong>copyChannelMarketingText</p>
     * Allows to copy marketing message to another channel and hotel
     */
    copyChannelMarketingText(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyChannelMarketingTextRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to copy global distribution system\'s fee and tax configurations from one hotel to another hotel within same chain/tenant <p><strong>OperationId:</strong>copyTotalPricingElements</p>
     * Allows to copy total pricing tax and fees to another hotel id
     */
    copyTotalPricingElementsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.totalPricingElementsCopy === null || requestParameters.totalPricingElementsCopy === undefined) {
                throw new runtime.RequiredError('totalPricingElementsCopy', 'Required parameter requestParameters.totalPricingElementsCopy was null or undefined when calling copyTotalPricingElements.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/totalPricing/copy`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TotalPricingElementsCopyToJSON)(requestParameters.totalPricingElementsCopy),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to copy global distribution system\'s fee and tax configurations from one hotel to another hotel within same chain/tenant <p><strong>OperationId:</strong>copyTotalPricingElements</p>
     * Allows to copy total pricing tax and fees to another hotel id
     */
    copyTotalPricingElements(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyTotalPricingElementsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete channel amenities mapping <p><strong>OperationId:</strong>deleteAmenitiesMapping</p>
     * Deletes channel amenities configuration
     */
    deleteAmenitiesMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            if (requestParameters.systemCode !== undefined) {
                queryParameters['systemCode'] = requestParameters.systemCode;
            }
            if (requestParameters.systemSubType !== undefined) {
                queryParameters['systemSubType'] = requestParameters.systemSubType;
            }
            if (requestParameters.systemType !== undefined) {
                queryParameters['systemType'] = requestParameters.systemType;
            }
            if (requestParameters.systemName !== undefined) {
                queryParameters['systemName'] = requestParameters.systemName;
            }
            if (requestParameters.websiteURL !== undefined) {
                queryParameters['websiteURL'] = requestParameters.websiteURL;
            }
            if (requestParameters.iconURL !== undefined) {
                queryParameters['iconURL'] = requestParameters.iconURL;
            }
            if (requestParameters.localSystemCode) {
                queryParameters['localSystemCode'] = requestParameters.localSystemCode;
            }
            if (requestParameters.externalSystemCode) {
                queryParameters['externalSystemCode'] = requestParameters.externalSystemCode;
            }
            if (requestParameters.description) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.amenityGroup) {
                queryParameters['amenityGroup'] = requestParameters.amenityGroup;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/amenities`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete channel amenities mapping <p><strong>OperationId:</strong>deleteAmenitiesMapping</p>
     * Deletes channel amenities configuration
     */
    deleteAmenitiesMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteAmenitiesMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API deletes channel account contracts. <p><strong>OperationId:</strong>deleteChannelAccountContracts</p>
     * Deletes channel account contracts.
     */
    deleteChannelAccountContractsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.id !== undefined) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idExtension !== undefined) {
                queryParameters['idExtension'] = requestParameters.idExtension;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.id1) {
                queryParameters['id1'] = requestParameters.id1;
            }
            if (requestParameters.idExtension1) {
                queryParameters['idExtension1'] = requestParameters.idExtension1;
            }
            if (requestParameters.idContext1) {
                queryParameters['idContext1'] = requestParameters.idContext1;
            }
            if (requestParameters.type1) {
                queryParameters['type1'] = requestParameters.type1;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/account/contracts`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API deletes channel account contracts. <p><strong>OperationId:</strong>deleteChannelAccountContracts</p>
     * Deletes channel account contracts.
     */
    deleteChannelAccountContracts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteChannelAccountContractsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API deletes channel billing statements. <p><strong>OperationId:</strong>deleteChannelBillingStatements</p>
     * Deletes channel billing statements.
     */
    deleteChannelBillingStatementsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.id) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idExtension) {
                queryParameters['idExtension'] = requestParameters.idExtension;
            }
            if (requestParameters.idContext) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type) {
                queryParameters['type'] = requestParameters.type;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/billingStatements`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API deletes channel billing statements. <p><strong>OperationId:</strong>deleteChannelBillingStatements</p>
     * Deletes channel billing statements.
     */
    deleteChannelBillingStatements(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteChannelBillingStatementsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete channel mapping for OPERA credit cards to channel for a given hotel id. <p><strong>OperationId:</strong>deleteChannelCardTypeMapping</p>
     * Deletes channel credit card mapping for a hotel
     */
    deleteChannelCardTypeMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cardTypeCode === null || requestParameters.cardTypeCode === undefined) {
                throw new runtime.RequiredError('cardTypeCode', 'Required parameter requestParameters.cardTypeCode was null or undefined when calling deleteChannelCardTypeMapping.');
            }
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling deleteChannelCardTypeMapping.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteChannelCardTypeMapping.');
            }
            const queryParameters = {};
            if (requestParameters.channelCardType !== undefined) {
                queryParameters['channelCardType'] = requestParameters.channelCardType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/channels/{channelCode}/cardType/{cardTypeCode}`.replace(`{${"cardTypeCode"}}`, encodeURIComponent(String(requestParameters.cardTypeCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete channel mapping for OPERA credit cards to channel for a given hotel id. <p><strong>OperationId:</strong>deleteChannelCardTypeMapping</p>
     * Deletes channel credit card mapping for a hotel
     */
    deleteChannelCardTypeMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteChannelCardTypeMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete sub-channel (carrier) configuration for a given channel code. <p><strong>OperationId:</strong>deleteChannelCarriers</p>
     * Deletes sub channel configuration
     */
    deleteChannelCarriersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.bookingChannelCodes === null || requestParameters.bookingChannelCodes === undefined) {
                throw new runtime.RequiredError('bookingChannelCodes', 'Required parameter requestParameters.bookingChannelCodes was null or undefined when calling deleteChannelCarriers.');
            }
            if (requestParameters.carriers === null || requestParameters.carriers === undefined) {
                throw new runtime.RequiredError('carriers', 'Required parameter requestParameters.carriers was null or undefined when calling deleteChannelCarriers.');
            }
            const queryParameters = {};
            if (requestParameters.bookingChannelCodes) {
                queryParameters['bookingChannelCodes'] = requestParameters.bookingChannelCodes;
            }
            if (requestParameters.carriers) {
                queryParameters['carriers'] = requestParameters.carriers;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/subChannels`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete sub-channel (carrier) configuration for a given channel code. <p><strong>OperationId:</strong>deleteChannelCarriers</p>
     * Deletes sub channel configuration
     */
    deleteChannelCarriers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteChannelCarriersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete channel error code mapping configurations. <p><strong>OperationId:</strong>deleteChannelErrors</p>
     * Deletes channel error codes
     */
    deleteChannelErrorsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.bookingChannelCode) {
                queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
            }
            if (requestParameters.error) {
                queryParameters['error'] = requestParameters.error;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/errorCodes`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete channel error code mapping configurations. <p><strong>OperationId:</strong>deleteChannelErrors</p>
     * Deletes channel error codes
     */
    deleteChannelErrors(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteChannelErrorsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete channel guarantee code mapping to OPERA guarantee code for a given property. <p><strong>OperationId:</strong>deleteChannelGuaranteeCodeMapping</p>
     * Deletes channel guarantee code mapping for a hotel
     */
    deleteChannelGuaranteeCodeMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.guaranteeCode === null || requestParameters.guaranteeCode === undefined) {
                throw new runtime.RequiredError('guaranteeCode', 'Required parameter requestParameters.guaranteeCode was null or undefined when calling deleteChannelGuaranteeCodeMapping.');
            }
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling deleteChannelGuaranteeCodeMapping.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteChannelGuaranteeCodeMapping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/channels/{channelCode}/guarantees/{guaranteeCode}`.replace(`{${"guaranteeCode"}}`, encodeURIComponent(String(requestParameters.guaranteeCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete channel guarantee code mapping to OPERA guarantee code for a given property. <p><strong>OperationId:</strong>deleteChannelGuaranteeCodeMapping</p>
     * Deletes channel guarantee code mapping for a hotel
     */
    deleteChannelGuaranteeCodeMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteChannelGuaranteeCodeMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete channel property confirmation letter configuration. <p><strong>OperationId:</strong>deleteChannelHotelLetters</p>
     * Deletes channel property confirmation letter mapping
     */
    deleteChannelHotelLettersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.code !== undefined) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.hotelId) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.code1 !== undefined) {
                queryParameters['code1'] = requestParameters.code1;
            }
            if (requestParameters.description1 !== undefined) {
                queryParameters['description1'] = requestParameters.description1;
            }
            if (requestParameters.letterType) {
                queryParameters['letterType'] = requestParameters.letterType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/confirmationLetters`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete channel property confirmation letter configuration. <p><strong>OperationId:</strong>deleteChannelHotelLetters</p>
     * Deletes channel property confirmation letter mapping
     */
    deleteChannelHotelLetters(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteChannelHotelLettersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete channel mapping for marketing messages. <p><strong>OperationId:</strong>deleteChannelMarketingText</p>
     * Deletes channel marketing messages
     */
    deleteChannelMarketingTextRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.beginDate) {
                queryParameters['beginDate'] = requestParameters.beginDate;
            }
            if (requestParameters.bookingChannelCode) {
                queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
            }
            if (requestParameters.endDate) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.globalTextYN) {
                queryParameters['globalTextYN'] = requestParameters.globalTextYN;
            }
            if (requestParameters.hotelId) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.marketingText) {
                queryParameters['marketingText'] = requestParameters.marketingText;
            }
            if (requestParameters.policyDetail) {
                queryParameters['policyDetail'] = requestParameters.policyDetail;
            }
            if (requestParameters.policyType) {
                queryParameters['policyType'] = requestParameters.policyType;
            }
            if (requestParameters.transactionType) {
                queryParameters['transactionType'] = requestParameters.transactionType;
            }
            if (requestParameters.newHotelId) {
                queryParameters['newHotelId'] = requestParameters.newHotelId;
            }
            if (requestParameters.newTransactionType) {
                queryParameters['newTransactionType'] = requestParameters.newTransactionType;
            }
            if (requestParameters.newPolicyType) {
                queryParameters['newPolicyType'] = requestParameters.newPolicyType;
            }
            if (requestParameters.newPolicyDetail) {
                queryParameters['newPolicyDetail'] = requestParameters.newPolicyDetail;
            }
            if (requestParameters.newBeginDate) {
                queryParameters['newBeginDate'] = requestParameters.newBeginDate;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/marketingText`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete channel mapping for marketing messages. <p><strong>OperationId:</strong>deleteChannelMarketingText</p>
     * Deletes channel marketing messages
     */
    deleteChannelMarketingText(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteChannelMarketingTextRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update channel\'s negotiated rate code mapping including negotiated profile, negotiate rate access code, start date, end date, and sequence. <p><strong>OperationId:</strong>deleteChannelNegotiatedRate</p>
     * Deletes channel negotiate rate
     */
    deleteChannelNegotiatedRateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.bookingChannelCode !== undefined) {
                queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
            }
            if (requestParameters.channelRatePlanCode !== undefined) {
                queryParameters['channelRatePlanCode'] = requestParameters.channelRatePlanCode;
            }
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.id) {
                queryParameters['id'] = requestParameters.id;
            }
            if (requestParameters.idContext) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.externalSystem !== undefined) {
                queryParameters['externalSystem'] = requestParameters.externalSystem;
            }
            if (requestParameters.language !== undefined) {
                queryParameters['language'] = requestParameters.language;
            }
            if (requestParameters.nameType !== undefined) {
                queryParameters['nameType'] = requestParameters.nameType;
            }
            if (requestParameters.namePrefix !== undefined) {
                queryParameters['namePrefix'] = requestParameters.namePrefix;
            }
            if (requestParameters.givenName !== undefined) {
                queryParameters['givenName'] = requestParameters.givenName;
            }
            if (requestParameters.middleName !== undefined) {
                queryParameters['middleName'] = requestParameters.middleName;
            }
            if (requestParameters.surname !== undefined) {
                queryParameters['surname'] = requestParameters.surname;
            }
            if (requestParameters.nameSuffix !== undefined) {
                queryParameters['nameSuffix'] = requestParameters.nameSuffix;
            }
            if (requestParameters.nameTitle !== undefined) {
                queryParameters['nameTitle'] = requestParameters.nameTitle;
            }
            if (requestParameters.nameTitleSuffix !== undefined) {
                queryParameters['nameTitleSuffix'] = requestParameters.nameTitleSuffix;
            }
            if (requestParameters.envelopeGreeting !== undefined) {
                queryParameters['envelopeGreeting'] = requestParameters.envelopeGreeting;
            }
            if (requestParameters.salutation !== undefined) {
                queryParameters['salutation'] = requestParameters.salutation;
            }
            if (requestParameters.accessCode) {
                queryParameters['accessCode'] = requestParameters.accessCode;
            }
            if (requestParameters.end) {
                queryParameters['end'] = requestParameters.end;
            }
            if (requestParameters.start) {
                queryParameters['start'] = requestParameters.start;
            }
            if (requestParameters.newAccessCode !== undefined) {
                queryParameters['newAccessCode'] = requestParameters.newAccessCode;
            }
            if (requestParameters.channelRatePlanCodeOrder !== undefined) {
                queryParameters['channelRatePlanCodeOrder'] = requestParameters.channelRatePlanCodeOrder;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/negotiatedRates`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update channel\'s negotiated rate code mapping including negotiated profile, negotiate rate access code, start date, end date, and sequence. <p><strong>OperationId:</strong>deleteChannelNegotiatedRate</p>
     * Deletes channel negotiate rate
     */
    deleteChannelNegotiatedRate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteChannelNegotiatedRateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API deletes channel tenants mapping. <p><strong>OperationId:</strong>deleteChannelOrgMapping</p>
     * Deletes channel tenants mapping.
     */
    deleteChannelOrgMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.tenantCode === null || requestParameters.tenantCode === undefined) {
                throw new runtime.RequiredError('tenantCode', 'Required parameter requestParameters.tenantCode was null or undefined when calling deleteChannelOrgMapping.');
            }
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling deleteChannelOrgMapping.');
            }
            const queryParameters = {};
            if (requestParameters.chainCode !== undefined) {
                queryParameters['chainCode'] = requestParameters.chainCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/{channelCode}/tenants/{tenantCode}`.replace(`{${"tenantCode"}}`, encodeURIComponent(String(requestParameters.tenantCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API deletes channel tenants mapping. <p><strong>OperationId:</strong>deleteChannelOrgMapping</p>
     * Deletes channel tenants mapping.
     */
    deleteChannelOrgMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteChannelOrgMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete channel rate categories for a given channel. <p><strong>OperationId:</strong>deleteChannelRateCategories</p>
     * Deletes given channel\'s rate categories
     */
    deleteChannelRateCategoriesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.bookingChannelCodes === null || requestParameters.bookingChannelCodes === undefined) {
                throw new runtime.RequiredError('bookingChannelCodes', 'Required parameter requestParameters.bookingChannelCodes was null or undefined when calling deleteChannelRateCategories.');
            }
            if (requestParameters.rateCategories === null || requestParameters.rateCategories === undefined) {
                throw new runtime.RequiredError('rateCategories', 'Required parameter requestParameters.rateCategories was null or undefined when calling deleteChannelRateCategories.');
            }
            const queryParameters = {};
            if (requestParameters.bookingChannelCodes) {
                queryParameters['bookingChannelCodes'] = requestParameters.bookingChannelCodes;
            }
            if (requestParameters.rateCategories) {
                queryParameters['rateCategories'] = requestParameters.rateCategories;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/rateCategories`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete channel rate categories for a given channel. <p><strong>OperationId:</strong>deleteChannelRateCategories</p>
     * Deletes given channel\'s rate categories
     */
    deleteChannelRateCategories(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteChannelRateCategoriesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete channel rate level code\'s description. <p><strong>OperationId:</strong>deleteChannelRateLevels</p>
     * Deletes channel rate level
     */
    deleteChannelRateLevelsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.bookingChannelCodes === null || requestParameters.bookingChannelCodes === undefined) {
                throw new runtime.RequiredError('bookingChannelCodes', 'Required parameter requestParameters.bookingChannelCodes was null or undefined when calling deleteChannelRateLevels.');
            }
            if (requestParameters.rateLevels === null || requestParameters.rateLevels === undefined) {
                throw new runtime.RequiredError('rateLevels', 'Required parameter requestParameters.rateLevels was null or undefined when calling deleteChannelRateLevels.');
            }
            const queryParameters = {};
            if (requestParameters.bookingChannelCodes) {
                queryParameters['bookingChannelCodes'] = requestParameters.bookingChannelCodes;
            }
            if (requestParameters.rateLevels) {
                queryParameters['rateLevels'] = requestParameters.rateLevels;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/rateLevels`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete channel rate level code\'s description. <p><strong>OperationId:</strong>deleteChannelRateLevels</p>
     * Deletes channel rate level
     */
    deleteChannelRateLevels(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteChannelRateLevelsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete channel property rate mapping including channel rate code, start date, end date, rate level, channel rate description. <p><strong>OperationId:</strong>deleteChannelRateMapping</p>
     * Deletes channel property rate mapping
     */
    deleteChannelRateMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.bookingChannelCode) {
                queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
            }
            if (requestParameters.channelRatePlanCode) {
                queryParameters['channelRatePlanCode'] = requestParameters.channelRatePlanCode;
            }
            if (requestParameters.hasChannelNegotiatedRates) {
                queryParameters['hasChannelNegotiatedRates'] = requestParameters.hasChannelNegotiatedRates;
            }
            if (requestParameters.hasNegotiatedRates) {
                queryParameters['hasNegotiatedRates'] = requestParameters.hasNegotiatedRates;
            }
            if (requestParameters.hotelId) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.ratePlanCode) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/rates`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete channel property rate mapping including channel rate code, start date, end date, rate level, channel rate description. <p><strong>OperationId:</strong>deleteChannelRateMapping</p>
     * Deletes channel property rate mapping
     */
    deleteChannelRateMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteChannelRateMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete global rate description for given hotel id and rate code. <p><strong>OperationId:</strong>deleteChannelRatesGlobalDescriptions</p>
     * Deletes global rate descriptions
     */
    deleteChannelRatesGlobalDescriptionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.hotelId) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.code !== undefined) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.code1 !== undefined) {
                queryParameters['code1'] = requestParameters.code1;
            }
            if (requestParameters.description1 !== undefined) {
                queryParameters['description1'] = requestParameters.description1;
            }
            if (requestParameters.globalDescType) {
                queryParameters['globalDescType'] = requestParameters.globalDescType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/rates/globalDescriptions`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete global rate description for given hotel id and rate code. <p><strong>OperationId:</strong>deleteChannelRatesGlobalDescriptions</p>
     * Deletes global rate descriptions
     */
    deleteChannelRatesGlobalDescriptions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteChannelRatesGlobalDescriptionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete channel room mapping to OPERA hotel\'s room mapping including channel room type code, start date, end date, room order. <p><strong>OperationId:</strong>deleteChannelRoomMapping</p>
     * Deletes channel property room mapping
     */
    deleteChannelRoomMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.roomTypeCode === null || requestParameters.roomTypeCode === undefined) {
                throw new runtime.RequiredError('roomTypeCode', 'Required parameter requestParameters.roomTypeCode was null or undefined when calling deleteChannelRoomMapping.');
            }
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling deleteChannelRoomMapping.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteChannelRoomMapping.');
            }
            const queryParameters = {};
            if (requestParameters.beginDate !== undefined) {
                queryParameters['beginDate'] = requestParameters.beginDate;
            }
            if (requestParameters.channelRoomType !== undefined) {
                queryParameters['channelRoomType'] = requestParameters.channelRoomType;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/channels/{channelCode}/rooms/{roomTypeCode}`.replace(`{${"roomTypeCode"}}`, encodeURIComponent(String(requestParameters.roomTypeCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete channel room mapping to OPERA hotel\'s room mapping including channel room type code, start date, end date, room order. <p><strong>OperationId:</strong>deleteChannelRoomMapping</p>
     * Deletes channel property room mapping
     */
    deleteChannelRoomMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteChannelRoomMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete channel configuration. <p><strong>OperationId:</strong>deleteChannelRoomTypes</p>
     * Delete channel configuration
     */
    deleteChannelRoomTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.bookingChannelCodes === null || requestParameters.bookingChannelCodes === undefined) {
                throw new runtime.RequiredError('bookingChannelCodes', 'Required parameter requestParameters.bookingChannelCodes was null or undefined when calling deleteChannelRoomTypes.');
            }
            if (requestParameters.roomTypes === null || requestParameters.roomTypes === undefined) {
                throw new runtime.RequiredError('roomTypes', 'Required parameter requestParameters.roomTypes was null or undefined when calling deleteChannelRoomTypes.');
            }
            const queryParameters = {};
            if (requestParameters.bookingChannelCodes) {
                queryParameters['bookingChannelCodes'] = requestParameters.bookingChannelCodes;
            }
            if (requestParameters.roomTypes) {
                queryParameters['roomTypes'] = requestParameters.roomTypes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/roomTypes`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete channel configuration. <p><strong>OperationId:</strong>deleteChannelRoomTypes</p>
     * Delete channel configuration
     */
    deleteChannelRoomTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteChannelRoomTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete global room description for given hotel id and room type code. <p><strong>OperationId:</strong>deleteChannelRoomsGlobalDescriptions</p>
     * Deletes global room descriptions
     */
    deleteChannelRoomsGlobalDescriptionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.hotelId) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.code !== undefined) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.code1 !== undefined) {
                queryParameters['code1'] = requestParameters.code1;
            }
            if (requestParameters.description1 !== undefined) {
                queryParameters['description1'] = requestParameters.description1;
            }
            if (requestParameters.globalDescType) {
                queryParameters['globalDescType'] = requestParameters.globalDescType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/rooms/globalDescriptions`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete global room description for given hotel id and room type code. <p><strong>OperationId:</strong>deleteChannelRoomsGlobalDescriptions</p>
     * Deletes global room descriptions
     */
    deleteChannelRoomsGlobalDescriptions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteChannelRoomsGlobalDescriptionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete channel credit card code mapping to OPERA credit card code. <p><strong>OperationId:</strong>deleteCreditCardsMapping</p>
     * Deletes channel credit card mapping
     */
    deleteCreditCardsMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            if (requestParameters.systemCode !== undefined) {
                queryParameters['systemCode'] = requestParameters.systemCode;
            }
            if (requestParameters.systemSubType !== undefined) {
                queryParameters['systemSubType'] = requestParameters.systemSubType;
            }
            if (requestParameters.systemType !== undefined) {
                queryParameters['systemType'] = requestParameters.systemType;
            }
            if (requestParameters.systemName !== undefined) {
                queryParameters['systemName'] = requestParameters.systemName;
            }
            if (requestParameters.websiteURL !== undefined) {
                queryParameters['websiteURL'] = requestParameters.websiteURL;
            }
            if (requestParameters.iconURL !== undefined) {
                queryParameters['iconURL'] = requestParameters.iconURL;
            }
            if (requestParameters.localSystemCode) {
                queryParameters['localSystemCode'] = requestParameters.localSystemCode;
            }
            if (requestParameters.externalSystemCode) {
                queryParameters['externalSystemCode'] = requestParameters.externalSystemCode;
            }
            if (requestParameters.description) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/cardTypes`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete channel credit card code mapping to OPERA credit card code. <p><strong>OperationId:</strong>deleteCreditCardsMapping</p>
     * Deletes channel credit card mapping
     */
    deleteCreditCardsMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCreditCardsMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete channel mapping to OPERA currency codes. <p><strong>OperationId:</strong>deleteCurrenciesMapping</p>
     * Deletes channel currency code mapping
     */
    deleteCurrenciesMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            if (requestParameters.systemCode !== undefined) {
                queryParameters['systemCode'] = requestParameters.systemCode;
            }
            if (requestParameters.systemSubType !== undefined) {
                queryParameters['systemSubType'] = requestParameters.systemSubType;
            }
            if (requestParameters.systemType !== undefined) {
                queryParameters['systemType'] = requestParameters.systemType;
            }
            if (requestParameters.systemName !== undefined) {
                queryParameters['systemName'] = requestParameters.systemName;
            }
            if (requestParameters.websiteURL !== undefined) {
                queryParameters['websiteURL'] = requestParameters.websiteURL;
            }
            if (requestParameters.iconURL !== undefined) {
                queryParameters['iconURL'] = requestParameters.iconURL;
            }
            if (requestParameters.localSystemCode) {
                queryParameters['localSystemCode'] = requestParameters.localSystemCode;
            }
            if (requestParameters.externalSystemCode) {
                queryParameters['externalSystemCode'] = requestParameters.externalSystemCode;
            }
            if (requestParameters.description) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.lanyonDecimalPosition) {
                queryParameters['lanyonDecimalPosition'] = requestParameters.lanyonDecimalPosition;
            }
            if (requestParameters.channelDecimalPosition) {
                queryParameters['channelDecimalPosition'] = requestParameters.channelDecimalPosition;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/currencies`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete channel mapping to OPERA currency codes. <p><strong>OperationId:</strong>deleteCurrenciesMapping</p>
     * Deletes channel currency code mapping
     */
    deleteCurrenciesMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCurrenciesMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete existing distribution rate template. <p><strong>OperationId:</strong>deleteDistributionTemplates</p>
     * Deletes rate templates configurations
     */
    deleteDistributionTemplatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.code) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.hotelId) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/distributionTemplates`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete existing distribution rate template. <p><strong>OperationId:</strong>deleteDistributionTemplates</p>
     * Deletes rate templates configurations
     */
    deleteDistributionTemplates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteDistributionTemplatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete channel\'s guarantee codes mapping to OPERA guarantee codes. <p><strong>OperationId:</strong>deleteGuaranteesMapping</p>
     * Deletes channel guarantee code mapping
     */
    deleteGuaranteesMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            if (requestParameters.systemCode !== undefined) {
                queryParameters['systemCode'] = requestParameters.systemCode;
            }
            if (requestParameters.systemSubType !== undefined) {
                queryParameters['systemSubType'] = requestParameters.systemSubType;
            }
            if (requestParameters.systemType !== undefined) {
                queryParameters['systemType'] = requestParameters.systemType;
            }
            if (requestParameters.systemName !== undefined) {
                queryParameters['systemName'] = requestParameters.systemName;
            }
            if (requestParameters.websiteURL !== undefined) {
                queryParameters['websiteURL'] = requestParameters.websiteURL;
            }
            if (requestParameters.iconURL !== undefined) {
                queryParameters['iconURL'] = requestParameters.iconURL;
            }
            if (requestParameters.localSystemCode) {
                queryParameters['localSystemCode'] = requestParameters.localSystemCode;
            }
            if (requestParameters.externalSystemCode) {
                queryParameters['externalSystemCode'] = requestParameters.externalSystemCode;
            }
            if (requestParameters.description) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.requirementCode) {
                queryParameters['requirementCode'] = requestParameters.requirementCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/guarantees`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete channel\'s guarantee codes mapping to OPERA guarantee codes. <p><strong>OperationId:</strong>deleteGuaranteesMapping</p>
     * Deletes channel guarantee code mapping
     */
    deleteGuaranteesMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteGuaranteesMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete channel mapping to OPERA hotel id including channel hotel code, room sell limit per reservation, city code, end date. <p><strong>OperationId:</strong>deleteHotelsMapping</p>
     * Deletes channel hotel mapping
     */
    deleteHotelsMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            if (requestParameters.systemCode !== undefined) {
                queryParameters['systemCode'] = requestParameters.systemCode;
            }
            if (requestParameters.systemSubType !== undefined) {
                queryParameters['systemSubType'] = requestParameters.systemSubType;
            }
            if (requestParameters.systemType !== undefined) {
                queryParameters['systemType'] = requestParameters.systemType;
            }
            if (requestParameters.systemName !== undefined) {
                queryParameters['systemName'] = requestParameters.systemName;
            }
            if (requestParameters.websiteURL !== undefined) {
                queryParameters['websiteURL'] = requestParameters.websiteURL;
            }
            if (requestParameters.iconURL !== undefined) {
                queryParameters['iconURL'] = requestParameters.iconURL;
            }
            if (requestParameters.localSystemCode) {
                queryParameters['localSystemCode'] = requestParameters.localSystemCode;
            }
            if (requestParameters.externalSystemCode) {
                queryParameters['externalSystemCode'] = requestParameters.externalSystemCode;
            }
            if (requestParameters.description) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.city) {
                queryParameters['city'] = requestParameters.city;
            }
            if (requestParameters.roomLimit) {
                queryParameters['roomLimit'] = requestParameters.roomLimit;
            }
            if (requestParameters.bookingLimit) {
                queryParameters['bookingLimit'] = requestParameters.bookingLimit;
            }
            if (requestParameters.hotelChainId) {
                queryParameters['hotelChainId'] = requestParameters.hotelChainId;
            }
            if (requestParameters.chainCode) {
                queryParameters['chainCode'] = requestParameters.chainCode;
            }
            if (requestParameters.prevailingRates) {
                queryParameters['prevailingRates'] = requestParameters.prevailingRates;
            }
            if (requestParameters.aRIEnabled) {
                queryParameters['aRIEnabled'] = requestParameters.aRIEnabled;
            }
            if (requestParameters.addOnLicense) {
                queryParameters['addOnLicense'] = requestParameters.addOnLicense;
            }
            if (requestParameters.available !== undefined) {
                queryParameters['available'] = requestParameters.available;
            }
            if (requestParameters.defaultRateCode !== undefined) {
                queryParameters['defaultRateCode'] = requestParameters.defaultRateCode;
            }
            if (requestParameters.defaultRateCode1) {
                queryParameters['defaultRateCode1'] = requestParameters.defaultRateCode1;
            }
            if (requestParameters.lowRevenueThreshold) {
                queryParameters['lowRevenueThreshold'] = requestParameters.lowRevenueThreshold;
            }
            if (requestParameters.highRevenueThreshold) {
                queryParameters['highRevenueThreshold'] = requestParameters.highRevenueThreshold;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/hotels`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete channel mapping to OPERA hotel id including channel hotel code, room sell limit per reservation, city code, end date. <p><strong>OperationId:</strong>deleteHotelsMapping</p>
     * Deletes channel hotel mapping
     */
    deleteHotelsMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteHotelsMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete global distribution channels tax and fee configurations. <p><strong>OperationId:</strong>deleteTotalPricingElements</p>
     * Deletes total pricing tax and fee types
     */
    deleteTotalPricingElementsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.hotelId) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.code !== undefined) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/totalPricing`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete global distribution channels tax and fee configurations. <p><strong>OperationId:</strong>deleteTotalPricingElements</p>
     * Deletes total pricing tax and fee types
     */
    deleteTotalPricingElements(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteTotalPricingElementsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API generates channel billing statements. <p><strong>OperationId:</strong>generateChannelBillingStatements</p>
     * This API generates channel billing statements.
     */
    generateChannelBillingStatementsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelBillingStatements === null || requestParameters.channelBillingStatements === undefined) {
                throw new runtime.RequiredError('channelBillingStatements', 'Required parameter requestParameters.channelBillingStatements was null or undefined when calling generateChannelBillingStatements.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/billingStatements/generate`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelBillingStatementsToJSON)(requestParameters.channelBillingStatements),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API generates channel billing statements. <p><strong>OperationId:</strong>generateChannelBillingStatements</p>
     * This API generates channel billing statements.
     */
    generateChannelBillingStatements(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.generateChannelBillingStatementsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get channel amenities mapping. <p><strong>OperationId:</strong>getAmenitiesMapping</p>
     * Gets channel amenities configuration
     */
    getAmenitiesMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.systemCode !== undefined) {
                queryParameters['systemCode'] = requestParameters.systemCode;
            }
            if (requestParameters.systemType !== undefined) {
                queryParameters['systemType'] = requestParameters.systemType;
            }
            if (requestParameters.systemSubType !== undefined) {
                queryParameters['systemSubType'] = requestParameters.systemSubType;
            }
            if (requestParameters.systemRateType !== undefined) {
                queryParameters['systemRateType'] = requestParameters.systemRateType;
            }
            if (requestParameters.localSystemCodes) {
                queryParameters['localSystemCodes'] = requestParameters.localSystemCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/amenities/mapping`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AmenitiesMappingFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get channel amenities mapping. <p><strong>OperationId:</strong>getAmenitiesMapping</p>
     * Gets channel amenities configuration
     */
    getAmenitiesMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAmenitiesMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API retrieves channel information for the given channel code. <p><strong>OperationId:</strong>getChannel</p>
     * Gets channel detail
     */
    getChannelRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling getChannel.');
            }
            const queryParameters = {};
            if (requestParameters.includeInactive) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/{channelCode}`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelFromJSON)(jsonValue));
        });
    }
    /**
     * This API retrieves channel information for the given channel code. <p><strong>OperationId:</strong>getChannel</p>
     * Gets channel detail
     */
    getChannel(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get existing channel account for a given OPERA profile id. <p><strong>OperationId:</strong>getChannelAccount</p>
     * Gets channel accounts
     */
    getChannelAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountProfileId === null || requestParameters.accountProfileId === undefined) {
                throw new runtime.RequiredError('accountProfileId', 'Required parameter requestParameters.accountProfileId was null or undefined when calling getChannelAccount.');
            }
            const queryParameters = {};
            if (requestParameters.markAsRecentlyAccessed !== undefined) {
                queryParameters['markAsRecentlyAccessed'] = requestParameters.markAsRecentlyAccessed;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/accounts/{accountProfileId}`.replace(`{${"accountProfileId"}}`, encodeURIComponent(String(requestParameters.accountProfileId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelAccountFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get existing channel account for a given OPERA profile id. <p><strong>OperationId:</strong>getChannelAccount</p>
     * Gets channel accounts
     */
    getChannelAccount(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelAccountRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get existing cannel account contract for a given OPERA profile id. <p><strong>OperationId:</strong>getChannelAccountContractElements</p>
     * Gets channel account contracts for given profile Id.
     */
    getChannelAccountContractElementsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.contractId === null || requestParameters.contractId === undefined) {
                throw new runtime.RequiredError('contractId', 'Required parameter requestParameters.contractId was null or undefined when calling getChannelAccountContractElements.');
            }
            if (requestParameters.accountProfileId === null || requestParameters.accountProfileId === undefined) {
                throw new runtime.RequiredError('accountProfileId', 'Required parameter requestParameters.accountProfileId was null or undefined when calling getChannelAccountContractElements.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.attributeName) {
                queryParameters['attributeName'] = requestParameters.attributeName;
            }
            if (requestParameters.orderType) {
                queryParameters['orderType'] = requestParameters.orderType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/accounts/{accountProfileId}/contracts/{contractId}`.replace(`{${"contractId"}}`, encodeURIComponent(String(requestParameters.contractId))).replace(`{${"accountProfileId"}}`, encodeURIComponent(String(requestParameters.accountProfileId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelAccountContractElementsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get existing cannel account contract for a given OPERA profile id. <p><strong>OperationId:</strong>getChannelAccountContractElements</p>
     * Gets channel account contracts for given profile Id.
     */
    getChannelAccountContractElements(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelAccountContractElementsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API retrieves channel accounts. <p><strong>OperationId:</strong>getChannelAccounts</p>
     * This API retrieves channel accounts.
     */
    getChannelAccountsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.excludeInactive !== undefined) {
                queryParameters['excludeInactive'] = requestParameters.excludeInactive;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.hotelId) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.accountType !== undefined) {
                queryParameters['accountType'] = requestParameters.accountType;
            }
            if (requestParameters.accountName !== undefined) {
                queryParameters['accountName'] = requestParameters.accountName;
            }
            if (requestParameters.accountCode !== undefined) {
                queryParameters['accountCode'] = requestParameters.accountCode;
            }
            if (requestParameters.contractExpInDays !== undefined) {
                queryParameters['contractExpInDays'] = requestParameters.contractExpInDays;
            }
            if (requestParameters.attributeName) {
                queryParameters['attributeName'] = requestParameters.attributeName;
            }
            if (requestParameters.orderType) {
                queryParameters['orderType'] = requestParameters.orderType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/accounts`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelAccountsSummaryFromJSON)(jsonValue));
        });
    }
    /**
     * This API retrieves channel accounts. <p><strong>OperationId:</strong>getChannelAccounts</p>
     * This API retrieves channel accounts.
     */
    getChannelAccounts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelAccountsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API retrieves channel billing statement for a given statement Id. <p><strong>OperationId:</strong>getChannelBillingStatement</p>
     * Retrieves channel billing statement for a given statement Id
     */
    getChannelBillingStatementRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.statementId === null || requestParameters.statementId === undefined) {
                throw new runtime.RequiredError('statementId', 'Required parameter requestParameters.statementId was null or undefined when calling getChannelBillingStatement.');
            }
            const queryParameters = {};
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.idType !== undefined) {
                queryParameters['idType'] = requestParameters.idType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/billingStatements/{statementId}`.replace(`{${"statementId"}}`, encodeURIComponent(String(requestParameters.statementId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelBillingStatementFromJSON)(jsonValue));
        });
    }
    /**
     * This API retrieves channel billing statement for a given statement Id. <p><strong>OperationId:</strong>getChannelBillingStatement</p>
     * Retrieves channel billing statement for a given statement Id
     */
    getChannelBillingStatement(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelBillingStatementRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API retrieves channel billing statement details for a given statement Id. <p><strong>OperationId:</strong>getChannelBillingStatementDetails</p>
     * Retrieves channel billing statement details for a given statement Id
     */
    getChannelBillingStatementDetailsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.statementId === null || requestParameters.statementId === undefined) {
                throw new runtime.RequiredError('statementId', 'Required parameter requestParameters.statementId was null or undefined when calling getChannelBillingStatementDetails.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.contractId !== undefined) {
                queryParameters['contractId'] = requestParameters.contractId;
            }
            if (requestParameters.contractIdType !== undefined) {
                queryParameters['contractIdType'] = requestParameters.contractIdType;
            }
            if (requestParameters.attributeName) {
                queryParameters['attributeName'] = requestParameters.attributeName;
            }
            if (requestParameters.orderType) {
                queryParameters['orderType'] = requestParameters.orderType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/billingStatements/{statementId}/details`.replace(`{${"statementId"}}`, encodeURIComponent(String(requestParameters.statementId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelBillingStatementDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API retrieves channel billing statement details for a given statement Id. <p><strong>OperationId:</strong>getChannelBillingStatementDetails</p>
     * Retrieves channel billing statement details for a given statement Id
     */
    getChannelBillingStatementDetails(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelBillingStatementDetailsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API retrieves channel billing statements. <p><strong>OperationId:</strong>getChannelBillingStatements</p>
     * Retrieves channel billing statements.
     */
    getChannelBillingStatementsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.includeLocked !== undefined) {
                queryParameters['includeLocked'] = requestParameters.includeLocked;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.statementId !== undefined) {
                queryParameters['statementId'] = requestParameters.statementId;
            }
            if (requestParameters.statementIdType !== undefined) {
                queryParameters['statementIdType'] = requestParameters.statementIdType;
            }
            if (requestParameters.beginDate !== undefined) {
                queryParameters['beginDate'] = requestParameters.beginDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.profileId) {
                queryParameters['profileId'] = requestParameters.profileId;
            }
            if (requestParameters.profileIdType) {
                queryParameters['profileIdType'] = requestParameters.profileIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/billingStatements`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelBillingStatementSummariesFromJSON)(jsonValue));
        });
    }
    /**
     * This API retrieves channel billing statements. <p><strong>OperationId:</strong>getChannelBillingStatements</p>
     * Retrieves channel billing statements.
     */
    getChannelBillingStatements(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelBillingStatementsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get channel mapping for OPERA credit cards to channel for a given hotel id. <p><strong>OperationId:</strong>getChannelCardTypeMappings</p>
     * Gets channel credit card mapping for a hotel
     */
    getChannelCardTypeMappingsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
                throw new runtime.RequiredError('hotelIds', 'Required parameter requestParameters.hotelIds was null or undefined when calling getChannelCardTypeMappings.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.bookingChannelCodes) {
                queryParameters['bookingChannelCodes'] = requestParameters.bookingChannelCodes;
            }
            if (requestParameters.cardTypes) {
                queryParameters['cardTypes'] = requestParameters.cardTypes;
            }
            if (requestParameters.channelCardTypes) {
                queryParameters['channelCardTypes'] = requestParameters.channelCardTypes;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            if (requestParameters.fetchUnmapped !== undefined) {
                queryParameters['fetchUnmapped'] = requestParameters.fetchUnmapped;
            }
            if (requestParameters.fetchMapped !== undefined) {
                queryParameters['fetchMapped'] = requestParameters.fetchMapped;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/cardType/mappings`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelCardTypeMappingDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get channel mapping for OPERA credit cards to channel for a given hotel id. <p><strong>OperationId:</strong>getChannelCardTypeMappings</p>
     * Gets channel credit card mapping for a hotel
     */
    getChannelCardTypeMappings(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelCardTypeMappingsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API  to get the list of the channel guarantee code mappings to the OPERA guarantee codes. <p><strong>OperationId:</strong>getChannelGuaranteeCodeMappings</p>
     * Gets channel guarantee code mappings
     */
    getChannelGuaranteeCodeMappingsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getChannelGuaranteeCodeMappings.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.bookingChannelCodes) {
                queryParameters['bookingChannelCodes'] = requestParameters.bookingChannelCodes;
            }
            if (requestParameters.guaranteeCode) {
                queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
            }
            if (requestParameters.channelGuaranteeCode) {
                queryParameters['channelGuaranteeCode'] = requestParameters.channelGuaranteeCode;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            if (requestParameters.fetchUnmapped !== undefined) {
                queryParameters['fetchUnmapped'] = requestParameters.fetchUnmapped;
            }
            if (requestParameters.fetchMapped !== undefined) {
                queryParameters['fetchMapped'] = requestParameters.fetchMapped;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/channels/guarantees`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelGuaranteeCodeMappingDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API  to get the list of the channel guarantee code mappings to the OPERA guarantee codes. <p><strong>OperationId:</strong>getChannelGuaranteeCodeMappings</p>
     * Gets channel guarantee code mappings
     */
    getChannelGuaranteeCodeMappings(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelGuaranteeCodeMappingsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get the channel mappings to the OPERA hotel id, including hotel details for channel hotel code, room sell limit per reservation, city code and end date. <p><strong>OperationId:</strong>getChannelHotelCodeMapping</p>
     * Get channel hotel mappings
     */
    getChannelHotelCodeMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling getChannelHotelCodeMapping.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.channelHotelCode !== undefined) {
                queryParameters['channelHotelCode'] = requestParameters.channelHotelCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/{channelCode}/hotels`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelHotelCodeMappingFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get the channel mappings to the OPERA hotel id, including hotel details for channel hotel code, room sell limit per reservation, city code and end date. <p><strong>OperationId:</strong>getChannelHotelCodeMapping</p>
     * Get channel hotel mappings
     */
    getChannelHotelCodeMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelHotelCodeMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get channel property confirmation letter configuration <p><strong>OperationId:</strong>getChannelHotelLetters</p>
     * Gets channel property confirmation letter mapping
     */
    getChannelHotelLettersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.channelCode) {
                queryParameters['channelCode'] = requestParameters.channelCode;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.language !== undefined) {
                queryParameters['language'] = requestParameters.language;
            }
            if (requestParameters.letterType !== undefined) {
                queryParameters['letterType'] = requestParameters.letterType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/confirmationLetters`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FetchedChannelHotelLettersFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get channel property confirmation letter configuration <p><strong>OperationId:</strong>getChannelHotelLetters</p>
     * Gets channel property confirmation letter mapping
     */
    getChannelHotelLetters(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelHotelLettersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get channel mapping for marketing messages. <p><strong>OperationId:</strong>getChannelMarketingText</p>
     * Gets channel marketing messages
     */
    getChannelMarketingTextRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.transactionType !== undefined) {
                queryParameters['transactionType'] = requestParameters.transactionType;
            }
            if (requestParameters.policyType !== undefined) {
                queryParameters['policyType'] = requestParameters.policyType;
            }
            if (requestParameters.policyDetail !== undefined) {
                queryParameters['policyDetail'] = requestParameters.policyDetail;
            }
            if (requestParameters.beginDate !== undefined) {
                queryParameters['beginDate'] = requestParameters.beginDate;
            }
            if (requestParameters.filterHotelIds) {
                queryParameters['filterHotelIds'] = requestParameters.filterHotelIds;
            }
            if (requestParameters.bookingChannelCode) {
                queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
            }
            if (requestParameters.transactionTypes) {
                queryParameters['transactionTypes'] = requestParameters.transactionTypes;
            }
            if (requestParameters.policyTypesPolicyType) {
                queryParameters['policyTypesPolicyType'] = requestParameters.policyTypesPolicyType;
            }
            if (requestParameters.policyDetailPolicyDetail) {
                queryParameters['policyDetailPolicyDetail'] = requestParameters.policyDetailPolicyDetail;
            }
            if (requestParameters.showGlobal !== undefined) {
                queryParameters['showGlobal'] = requestParameters.showGlobal;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.channelCode) {
                queryParameters['channelCode'] = requestParameters.channelCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/marketingText`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelMarketingTextsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get channel mapping for marketing messages. <p><strong>OperationId:</strong>getChannelMarketingText</p>
     * Gets channel marketing messages
     */
    getChannelMarketingText(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelMarketingTextRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update channel\'s negotiated rate code mapping including negotiated profile, negotiate rate access code, start date, end date, and sequence. <p><strong>OperationId:</strong>getChannelNegotiatedRate</p>
     * Gets channel negotiate rate
     */
    getChannelNegotiatedRateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.bookingChannelCode !== undefined) {
                queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
            }
            if (requestParameters.channelRatePlanCode !== undefined) {
                queryParameters['channelRatePlanCode'] = requestParameters.channelRatePlanCode;
            }
            if (requestParameters.accessCode !== undefined) {
                queryParameters['accessCode'] = requestParameters.accessCode;
            }
            if (requestParameters.uniqueId) {
                queryParameters['uniqueId'] = requestParameters.uniqueId;
            }
            if (requestParameters.uniqueIdType) {
                queryParameters['uniqueIdType'] = requestParameters.uniqueIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/negotiatedRates`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelNegotiatedRateDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update channel\'s negotiated rate code mapping including negotiated profile, negotiate rate access code, start date, end date, and sequence. <p><strong>OperationId:</strong>getChannelNegotiatedRate</p>
     * Gets channel negotiate rate
     */
    getChannelNegotiatedRate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelNegotiatedRateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API retrieves channel tenants mapping. <p><strong>OperationId:</strong>getChannelOrgMapping</p>
     * Retrieves channel tenants mapping.
     */
    getChannelOrgMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.tenantCode === null || requestParameters.tenantCode === undefined) {
                throw new runtime.RequiredError('tenantCode', 'Required parameter requestParameters.tenantCode was null or undefined when calling getChannelOrgMapping.');
            }
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling getChannelOrgMapping.');
            }
            const queryParameters = {};
            if (requestParameters.chainCode !== undefined) {
                queryParameters['chainCode'] = requestParameters.chainCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/{channelCode}/tenants/{tenantCode}`.replace(`{${"tenantCode"}}`, encodeURIComponent(String(requestParameters.tenantCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelOrgMappingsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API retrieves channel tenants mapping. <p><strong>OperationId:</strong>getChannelOrgMapping</p>
     * Retrieves channel tenants mapping.
     */
    getChannelOrgMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelOrgMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get list of channel parameters and their settings. <p><strong>OperationId:</strong>getChannelParameters</p>
     * Retrieves channel parameters.
     */
    getChannelParametersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling getChannelParameters.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getChannelParameters.');
            }
            const queryParameters = {};
            if (requestParameters.parameterNameWildCard !== undefined) {
                queryParameters['parameterNameWildCard'] = requestParameters.parameterNameWildCard;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/channels/{channelCode}/parameters`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelParameterMappingFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get list of channel parameters and their settings. <p><strong>OperationId:</strong>getChannelParameters</p>
     * Retrieves channel parameters.
     */
    getChannelParameters(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelParametersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to retrieve channel policies mapping. <p><strong>OperationId:</strong>getChannelPolicies</p>
     * Retrieves the channel policies
     */
    getChannelPoliciesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling getChannelPolicies.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getChannelPolicies.');
            }
            const queryParameters = {};
            if (requestParameters.requestType !== undefined) {
                queryParameters['requestType'] = requestParameters.requestType;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            if (requestParameters.duration !== undefined) {
                queryParameters['duration'] = requestParameters.duration;
            }
            if (requestParameters.channelRatePlanCode) {
                queryParameters['channelRatePlanCode'] = requestParameters.channelRatePlanCode;
            }
            if (requestParameters.channelRoomTypeCode) {
                queryParameters['channelRoomTypeCode'] = requestParameters.channelRoomTypeCode;
            }
            if (requestParameters.ratePlanCode) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.roomTypeCode) {
                queryParameters['roomTypeCode'] = requestParameters.roomTypeCode;
            }
            if (requestParameters.corporateId !== undefined) {
                queryParameters['corporateId'] = requestParameters.corporateId;
            }
            if (requestParameters.corporateIdType !== undefined) {
                queryParameters['corporateIdType'] = requestParameters.corporateIdType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/channels/{channelCode}/policies`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelPoliciesFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to retrieve channel policies mapping. <p><strong>OperationId:</strong>getChannelPolicies</p>
     * Retrieves the channel policies
     */
    getChannelPolicies(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelPoliciesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get global rate description for given hotel id and rate code. <p><strong>OperationId:</strong>getChannelRateCodeGlobalDesc</p>
     * Gets global rate descriptions
     */
    getChannelRateCodeGlobalDescRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
                throw new runtime.RequiredError('ratePlanCode', 'Required parameter requestParameters.ratePlanCode was null or undefined when calling getChannelRateCodeGlobalDesc.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getChannelRateCodeGlobalDesc.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rates/{ratePlanCode}/globalDescription`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelEnhancedGlobalDescriptionFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get global rate description for given hotel id and rate code. <p><strong>OperationId:</strong>getChannelRateCodeGlobalDesc</p>
     * Gets global rate descriptions
     */
    getChannelRateCodeGlobalDesc(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelRateCodeGlobalDescRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get channel property rate mapping including channel rate code, start date, end date, rate level, channel rate description. <p><strong>OperationId:</strong>getChannelRateMapping</p>
     * Gets channel property rate mapping
     */
    getChannelRateMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.hotelId) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.channelCode) {
                queryParameters['channelCode'] = requestParameters.channelCode;
            }
            if (requestParameters.ratePlanCodes) {
                queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
            }
            if (requestParameters.channelRatePlanCodes) {
                queryParameters['channelRatePlanCodes'] = requestParameters.channelRatePlanCodes;
            }
            if (requestParameters.ratePlanCategories) {
                queryParameters['ratePlanCategories'] = requestParameters.ratePlanCategories;
            }
            if (requestParameters.channelRatePlanCategories) {
                queryParameters['channelRatePlanCategories'] = requestParameters.channelRatePlanCategories;
            }
            if (requestParameters.includeUnmappedRatePlans !== undefined) {
                queryParameters['includeUnmappedRatePlans'] = requestParameters.includeUnmappedRatePlans;
            }
            if (requestParameters.onlyUnmappedRatePlans !== undefined) {
                queryParameters['onlyUnmappedRatePlans'] = requestParameters.onlyUnmappedRatePlans;
            }
            if (requestParameters.includeInactiveMappings !== undefined) {
                queryParameters['includeInactiveMappings'] = requestParameters.includeInactiveMappings;
            }
            if (requestParameters.onlyNegotiatedRates !== undefined) {
                queryParameters['onlyNegotiatedRates'] = requestParameters.onlyNegotiatedRates;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/rates`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelRateMappingsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get channel property rate mapping including channel rate code, start date, end date, rate level, channel rate description. <p><strong>OperationId:</strong>getChannelRateMapping</p>
     * Gets channel property rate mapping
     */
    getChannelRateMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelRateMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get sequence for given channel property rate room mapping. <p><strong>OperationId:</strong>getChannelRateRoomSeq</p>
     * Gets channel property rateroom sequence
     */
    getChannelRateRoomSeqRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling getChannelRateRoomSeq.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.ratePlanCode !== undefined) {
                queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
            }
            if (requestParameters.roomType !== undefined) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.channelRatePlanCode !== undefined) {
                queryParameters['channelRatePlanCode'] = requestParameters.channelRatePlanCode;
            }
            if (requestParameters.channelRoomType !== undefined) {
                queryParameters['channelRoomType'] = requestParameters.channelRoomType;
            }
            if (requestParameters.channelRateRoomParameterName) {
                queryParameters['channelRateRoomParameterName'] = requestParameters.channelRateRoomParameterName;
            }
            if (requestParameters.channelRateRoomParameterValue) {
                queryParameters['channelRateRoomParameterValue'] = requestParameters.channelRateRoomParameterValue;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/{channelCode}/rateRoomSequences`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelRateRoomSequenceDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get sequence for given channel property rate room mapping. <p><strong>OperationId:</strong>getChannelRateRoomSeq</p>
     * Gets channel property rateroom sequence
     */
    getChannelRateRoomSeq(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelRateRoomSeqRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get global rate description for given hotel id. <p><strong>OperationId:</strong>getChannelRatesGlobalDescriptions</p>
     * Gets global rate descriptions
     */
    getChannelRatesGlobalDescriptionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.ratePlanCodes) {
                queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
            }
            if (requestParameters.roomTypes) {
                queryParameters['roomTypes'] = requestParameters.roomTypes;
            }
            if (requestParameters.globalDescriptionType !== undefined) {
                queryParameters['globalDescriptionType'] = requestParameters.globalDescriptionType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/rates/globalDescriptions`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelGlobalDescriptionsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get global rate description for given hotel id. <p><strong>OperationId:</strong>getChannelRatesGlobalDescriptions</p>
     * Gets global rate descriptions
     */
    getChannelRatesGlobalDescriptions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelRatesGlobalDescriptionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get channel room mapping to OPERA hotel\'s room mapping including channel room type code, start date, end date, room order. <p><strong>OperationId:</strong>getChannelRoomMapping</p>
     * Gets channel property room mapping
     */
    getChannelRoomMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getChannelRoomMapping.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.bookingChannelCodes) {
                queryParameters['bookingChannelCodes'] = requestParameters.bookingChannelCodes;
            }
            if (requestParameters.roomTypes) {
                queryParameters['roomTypes'] = requestParameters.roomTypes;
            }
            if (requestParameters.channelRoomTypes) {
                queryParameters['channelRoomTypes'] = requestParameters.channelRoomTypes;
            }
            if (requestParameters.includeInactiveMappings !== undefined) {
                queryParameters['includeInactiveMappings'] = requestParameters.includeInactiveMappings;
            }
            if (requestParameters.includeUnmappedRoomTypes !== undefined) {
                queryParameters['includeUnmappedRoomTypes'] = requestParameters.includeUnmappedRoomTypes;
            }
            if (requestParameters.onlyUnmappedRoomTypes !== undefined) {
                queryParameters['onlyUnmappedRoomTypes'] = requestParameters.onlyUnmappedRoomTypes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rooms/mapping`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelRoomMappingsSummaryFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get channel room mapping to OPERA hotel\'s room mapping including channel room type code, start date, end date, room order. <p><strong>OperationId:</strong>getChannelRoomMapping</p>
     * Gets channel property room mapping
     */
    getChannelRoomMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelRoomMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API retrieves channel room mapping by room type. <p><strong>OperationId:</strong>getChannelRoomMappingById</p>
     * Gets channel room mapping by room type
     */
    getChannelRoomMappingByIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.roomTypeCode === null || requestParameters.roomTypeCode === undefined) {
                throw new runtime.RequiredError('roomTypeCode', 'Required parameter requestParameters.roomTypeCode was null or undefined when calling getChannelRoomMappingById.');
            }
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling getChannelRoomMappingById.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getChannelRoomMappingById.');
            }
            const queryParameters = {};
            if (requestParameters.beginDate !== undefined) {
                queryParameters['beginDate'] = requestParameters.beginDate;
            }
            if (requestParameters.channelRoomType !== undefined) {
                queryParameters['channelRoomType'] = requestParameters.channelRoomType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/channels/{channelCode}/rooms/{roomTypeCode}`.replace(`{${"roomTypeCode"}}`, encodeURIComponent(String(requestParameters.roomTypeCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelRoomMappingFromJSON)(jsonValue));
        });
    }
    /**
     * This API retrieves channel room mapping by room type. <p><strong>OperationId:</strong>getChannelRoomMappingById</p>
     * Gets channel room mapping by room type
     */
    getChannelRoomMappingById(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelRoomMappingByIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get global room description for given hotel id and room type code. <p><strong>OperationId:</strong>getChannelRoomTypeGlobalDesc</p>
     * Gets global room descriptions
     */
    getChannelRoomTypeGlobalDescRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.roomType === null || requestParameters.roomType === undefined) {
                throw new runtime.RequiredError('roomType', 'Required parameter requestParameters.roomType was null or undefined when calling getChannelRoomTypeGlobalDesc.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getChannelRoomTypeGlobalDesc.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/rooms/{roomType}/globalDescription`.replace(`{${"roomType"}}`, encodeURIComponent(String(requestParameters.roomType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelEnhancedGlobalDescriptionFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get global room description for given hotel id and room type code. <p><strong>OperationId:</strong>getChannelRoomTypeGlobalDesc</p>
     * Gets global room descriptions
     */
    getChannelRoomTypeGlobalDesc(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelRoomTypeGlobalDescRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get global room description for given hotel id and room type code. <p><strong>OperationId:</strong>getChannelRoomsGlobalDescriptions</p>
     * Gets global room descriptions
     */
    getChannelRoomsGlobalDescriptionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.ratePlanCodes) {
                queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
            }
            if (requestParameters.roomTypes) {
                queryParameters['roomTypes'] = requestParameters.roomTypes;
            }
            if (requestParameters.globalDescriptionType !== undefined) {
                queryParameters['globalDescriptionType'] = requestParameters.globalDescriptionType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/rooms/globalDescriptions`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelGlobalDescriptionsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get global room description for given hotel id and room type code. <p><strong>OperationId:</strong>getChannelRoomsGlobalDescriptions</p>
     * Gets global room descriptions
     */
    getChannelRoomsGlobalDescriptions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelRoomsGlobalDescriptionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get list of channels from OPERA. <p><strong>OperationId:</strong>getChannels</p>
     * Gets list of channels
     */
    getChannelsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.channelCode !== undefined) {
                queryParameters['channelCode'] = requestParameters.channelCode;
            }
            if (requestParameters.systemType !== undefined) {
                queryParameters['systemType'] = requestParameters.systemType;
            }
            if (requestParameters.systemSubType !== undefined) {
                queryParameters['systemSubType'] = requestParameters.systemSubType;
            }
            if (requestParameters.systemRateType !== undefined) {
                queryParameters['systemRateType'] = requestParameters.systemRateType;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get list of channels from OPERA. <p><strong>OperationId:</strong>getChannels</p>
     * Gets list of channels
     */
    getChannels(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getChannelsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get channel credit card code mapping to OPERA credit card code. <p><strong>OperationId:</strong>getCreditCardsMapping</p>
     * Gets channel credit card mapping
     */
    getCreditCardsMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.systemCode !== undefined) {
                queryParameters['systemCode'] = requestParameters.systemCode;
            }
            if (requestParameters.systemType !== undefined) {
                queryParameters['systemType'] = requestParameters.systemType;
            }
            if (requestParameters.systemSubType !== undefined) {
                queryParameters['systemSubType'] = requestParameters.systemSubType;
            }
            if (requestParameters.systemRateType !== undefined) {
                queryParameters['systemRateType'] = requestParameters.systemRateType;
            }
            if (requestParameters.localSystemCodes) {
                queryParameters['localSystemCodes'] = requestParameters.localSystemCodes;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/cardTypes/mapping`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CreditCardsMappingFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get channel credit card code mapping to OPERA credit card code. <p><strong>OperationId:</strong>getCreditCardsMapping</p>
     * Gets channel credit card mapping
     */
    getCreditCardsMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCreditCardsMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update channel mapping to OPERA currency codes. <p><strong>OperationId:</strong>getCurrenciesMapping</p>
     * Gets channel currency code mapping
     */
    getCurrenciesMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.systemCode !== undefined) {
                queryParameters['systemCode'] = requestParameters.systemCode;
            }
            if (requestParameters.systemType !== undefined) {
                queryParameters['systemType'] = requestParameters.systemType;
            }
            if (requestParameters.systemSubType !== undefined) {
                queryParameters['systemSubType'] = requestParameters.systemSubType;
            }
            if (requestParameters.systemRateType !== undefined) {
                queryParameters['systemRateType'] = requestParameters.systemRateType;
            }
            if (requestParameters.localSystemCodes) {
                queryParameters['localSystemCodes'] = requestParameters.localSystemCodes;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/currencies/mapping`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CurrenciesMappingFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update channel mapping to OPERA currency codes. <p><strong>OperationId:</strong>getCurrenciesMapping</p>
     * Gets channel currency code mapping
     */
    getCurrenciesMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCurrenciesMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API retrieves distribution templates. <p><strong>OperationId:</strong>getDistributionTemplates</p>
     * Retrieves distribution templates
     */
    getDistributionTemplatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.isChain !== undefined) {
                queryParameters['isChain'] = requestParameters.isChain;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.types) {
                queryParameters['types'] = requestParameters.types;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/distributionTemplates`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DistributionTemplatesFromJSON)(jsonValue));
        });
    }
    /**
     * This API retrieves distribution templates. <p><strong>OperationId:</strong>getDistributionTemplates</p>
     * Retrieves distribution templates
     */
    getDistributionTemplates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getDistributionTemplatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get channel guarantee code mapping to OPERA guarantee code for a given hotel. <p><strong>OperationId:</strong>getGuaranteesMapping</p>
     * Gets channel guarantee code mapping for a hotel
     */
    getGuaranteesMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.systemCode !== undefined) {
                queryParameters['systemCode'] = requestParameters.systemCode;
            }
            if (requestParameters.systemType !== undefined) {
                queryParameters['systemType'] = requestParameters.systemType;
            }
            if (requestParameters.systemSubType !== undefined) {
                queryParameters['systemSubType'] = requestParameters.systemSubType;
            }
            if (requestParameters.systemRateType !== undefined) {
                queryParameters['systemRateType'] = requestParameters.systemRateType;
            }
            if (requestParameters.localSystemCodes) {
                queryParameters['localSystemCodes'] = requestParameters.localSystemCodes;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/guarantees/mapping`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GuaranteesMappingFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get channel guarantee code mapping to OPERA guarantee code for a given hotel. <p><strong>OperationId:</strong>getGuaranteesMapping</p>
     * Gets channel guarantee code mapping for a hotel
     */
    getGuaranteesMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getGuaranteesMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get channel mapping to OPERA hotel id including channel hotel code, room sell limit per reservation, city code, end date. <p><strong>OperationId:</strong>getHotelsMapping</p>
     * Gets channel hotel mapping
     */
    getHotelsMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.systemCode !== undefined) {
                queryParameters['systemCode'] = requestParameters.systemCode;
            }
            if (requestParameters.systemType !== undefined) {
                queryParameters['systemType'] = requestParameters.systemType;
            }
            if (requestParameters.systemSubType !== undefined) {
                queryParameters['systemSubType'] = requestParameters.systemSubType;
            }
            if (requestParameters.systemRateType !== undefined) {
                queryParameters['systemRateType'] = requestParameters.systemRateType;
            }
            if (requestParameters.localSystemCodes) {
                queryParameters['localSystemCodes'] = requestParameters.localSystemCodes;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/hotels/mapping`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PropertiesMappingFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get channel mapping to OPERA hotel id including channel hotel code, room sell limit per reservation, city code, end date. <p><strong>OperationId:</strong>getHotelsMapping</p>
     * Gets channel hotel mapping
     */
    getHotelsMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getHotelsMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API retrieves billing statement details statistics. <p><strong>OperationId:</strong>getStatementDetailsStatistics</p>
     * Retrieves billing statement details statistics.
     */
    getStatementDetailsStatisticsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.statementId === null || requestParameters.statementId === undefined) {
                throw new runtime.RequiredError('statementId', 'Required parameter requestParameters.statementId was null or undefined when calling getStatementDetailsStatistics.');
            }
            const queryParameters = {};
            if (requestParameters.contractId !== undefined) {
                queryParameters['contractId'] = requestParameters.contractId;
            }
            if (requestParameters.contractIdType !== undefined) {
                queryParameters['contractIdType'] = requestParameters.contractIdType;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/billingStatements/{statementId}/statistics`.replace(`{${"statementId"}}`, encodeURIComponent(String(requestParameters.statementId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatementDetailsStatisticsFromJSON)(jsonValue));
        });
    }
    /**
     * This API retrieves billing statement details statistics. <p><strong>OperationId:</strong>getStatementDetailsStatistics</p>
     * Retrieves billing statement details statistics.
     */
    getStatementDetailsStatistics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getStatementDetailsStatisticsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get global distribution channels tax and fee configurations. <p><strong>OperationId:</strong>getTotalPricingElements</p>
     * Gets total pricing tax and fee types
     */
    getTotalPricingElementsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getTotalPricingElements.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.elementCodes) {
                queryParameters['elementCodes'] = requestParameters.elementCodes;
            }
            if (requestParameters.transactionCodes) {
                queryParameters['transactionCodes'] = requestParameters.transactionCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/channels/totalPricing`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TotalPricingElementsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get global distribution channels tax and fee configurations. <p><strong>OperationId:</strong>getTotalPricingElements</p>
     * Gets total pricing tax and fee types
     */
    getTotalPricingElements(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTotalPricingElementsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update channel room description <p><strong>OperationId:</strong>manageChannelRoomMapping</p>
     * Updates channel room configuration
     */
    manageChannelRoomMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelRoomMappings === null || requestParameters.channelRoomMappings === undefined) {
                throw new runtime.RequiredError('channelRoomMappings', 'Required parameter requestParameters.channelRoomMappings was null or undefined when calling manageChannelRoomMapping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/rooms`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelRoomMappingsToJSON)(requestParameters.channelRoomMappings),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update channel room description <p><strong>OperationId:</strong>manageChannelRoomMapping</p>
     * Updates channel room configuration
     */
    manageChannelRoomMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.manageChannelRoomMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add channel amenities mapping <p><strong>OperationId:</strong>postAmenitiesMapping</p>
     * Adds channel amenities configuration
     */
    postAmenitiesMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.amenities === null || requestParameters.amenities === undefined) {
                throw new runtime.RequiredError('amenities', 'Required parameter requestParameters.amenities was null or undefined when calling postAmenitiesMapping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/amenities`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AmenitiesToJSON)(requestParameters.amenities),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add channel amenities mapping <p><strong>OperationId:</strong>postAmenitiesMapping</p>
     * Adds channel amenities configuration
     */
    postAmenitiesMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postAmenitiesMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API adds channel account contracts for given profile Id. <p><strong>OperationId:</strong>postChannelAccountContracts</p>
     * Adds channel account contracts for given profile Id.
     */
    postChannelAccountContractsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountProfileId === null || requestParameters.accountProfileId === undefined) {
                throw new runtime.RequiredError('accountProfileId', 'Required parameter requestParameters.accountProfileId was null or undefined when calling postChannelAccountContracts.');
            }
            if (requestParameters.channelAccountContracts === null || requestParameters.channelAccountContracts === undefined) {
                throw new runtime.RequiredError('channelAccountContracts', 'Required parameter requestParameters.channelAccountContracts was null or undefined when calling postChannelAccountContracts.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/accounts/{accountProfileId}/contracts`.replace(`{${"accountProfileId"}}`, encodeURIComponent(String(requestParameters.accountProfileId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelAccountContractsToJSON)(requestParameters.channelAccountContracts),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API adds channel account contracts for given profile Id. <p><strong>OperationId:</strong>postChannelAccountContracts</p>
     * Adds channel account contracts for given profile Id.
     */
    postChannelAccountContracts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChannelAccountContractsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API adds channel accounts. <p><strong>OperationId:</strong>postChannelAccounts</p>
     * Adds channel accounts.
     */
    postChannelAccountsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelAccounts === null || requestParameters.channelAccounts === undefined) {
                throw new runtime.RequiredError('channelAccounts', 'Required parameter requestParameters.channelAccounts was null or undefined when calling postChannelAccounts.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/accounts`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelAccountsToJSON)(requestParameters.channelAccounts),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API adds channel accounts. <p><strong>OperationId:</strong>postChannelAccounts</p>
     * Adds channel accounts.
     */
    postChannelAccounts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChannelAccountsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API adds channel billing statements. <p><strong>OperationId:</strong>postChannelBillingStatements</p>
     * Adds channel billing statements.
     */
    postChannelBillingStatementsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelBillingStatements === null || requestParameters.channelBillingStatements === undefined) {
                throw new runtime.RequiredError('channelBillingStatements', 'Required parameter requestParameters.channelBillingStatements was null or undefined when calling postChannelBillingStatements.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/billingStatements`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelBillingStatementsToJSON)(requestParameters.channelBillingStatements),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API adds channel billing statements. <p><strong>OperationId:</strong>postChannelBillingStatements</p>
     * Adds channel billing statements.
     */
    postChannelBillingStatements(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChannelBillingStatementsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add channel mapping for OPERA credit cards to channel for a given hotel id <p><strong>OperationId:</strong>postChannelCardTypeMapping</p>
     * Adds channel credit card mapping for a hotel
     */
    postChannelCardTypeMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cardTypeCode === null || requestParameters.cardTypeCode === undefined) {
                throw new runtime.RequiredError('cardTypeCode', 'Required parameter requestParameters.cardTypeCode was null or undefined when calling postChannelCardTypeMapping.');
            }
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling postChannelCardTypeMapping.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postChannelCardTypeMapping.');
            }
            if (requestParameters.channelCardTypeMappings === null || requestParameters.channelCardTypeMappings === undefined) {
                throw new runtime.RequiredError('channelCardTypeMappings', 'Required parameter requestParameters.channelCardTypeMappings was null or undefined when calling postChannelCardTypeMapping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/channels/{channelCode}/cardType/{cardTypeCode}`.replace(`{${"cardTypeCode"}}`, encodeURIComponent(String(requestParameters.cardTypeCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelCardTypeMappingsToJSON)(requestParameters.channelCardTypeMappings),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add channel mapping for OPERA credit cards to channel for a given hotel id <p><strong>OperationId:</strong>postChannelCardTypeMapping</p>
     * Adds channel credit card mapping for a hotel
     */
    postChannelCardTypeMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChannelCardTypeMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add sub-channel (carrier) configuration for a given channel code <p><strong>OperationId:</strong>postChannelCarriers</p>
     * Adds sub channel configuration
     */
    postChannelCarriersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling postChannelCarriers.');
            }
            if (requestParameters.channelCarriers === null || requestParameters.channelCarriers === undefined) {
                throw new runtime.RequiredError('channelCarriers', 'Required parameter requestParameters.channelCarriers was null or undefined when calling postChannelCarriers.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/{channelCode}/subChannels`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelCarriersToJSON)(requestParameters.channelCarriers),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add sub-channel (carrier) configuration for a given channel code <p><strong>OperationId:</strong>postChannelCarriers</p>
     * Adds sub channel configuration
     */
    postChannelCarriers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChannelCarriersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add channel error code mapping configurations <p><strong>OperationId:</strong>postChannelErrors</p>
     * Adds channel error codes
     */
    postChannelErrorsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling postChannelErrors.');
            }
            if (requestParameters.channelErrors === null || requestParameters.channelErrors === undefined) {
                throw new runtime.RequiredError('channelErrors', 'Required parameter requestParameters.channelErrors was null or undefined when calling postChannelErrors.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/{channelCode}/errorCodes`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelErrorsToJSON)(requestParameters.channelErrors),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add channel error code mapping configurations <p><strong>OperationId:</strong>postChannelErrors</p>
     * Adds channel error codes
     */
    postChannelErrors(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChannelErrorsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add channel guarantee code mapping to OPERA guarantee code for a given hotel <p><strong>OperationId:</strong>postChannelGuaranteeCodeMapping</p>
     * Adds channel guarantee code mapping for a hotel
     */
    postChannelGuaranteeCodeMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.guaranteeCode === null || requestParameters.guaranteeCode === undefined) {
                throw new runtime.RequiredError('guaranteeCode', 'Required parameter requestParameters.guaranteeCode was null or undefined when calling postChannelGuaranteeCodeMapping.');
            }
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling postChannelGuaranteeCodeMapping.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postChannelGuaranteeCodeMapping.');
            }
            if (requestParameters.channelGuaranteeCodeMappings === null || requestParameters.channelGuaranteeCodeMappings === undefined) {
                throw new runtime.RequiredError('channelGuaranteeCodeMappings', 'Required parameter requestParameters.channelGuaranteeCodeMappings was null or undefined when calling postChannelGuaranteeCodeMapping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/channels/{channelCode}/guarantees/{guaranteeCode}`.replace(`{${"guaranteeCode"}}`, encodeURIComponent(String(requestParameters.guaranteeCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelGuaranteeCodeMappingsToJSON)(requestParameters.channelGuaranteeCodeMappings),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add channel guarantee code mapping to OPERA guarantee code for a given hotel <p><strong>OperationId:</strong>postChannelGuaranteeCodeMapping</p>
     * Adds channel guarantee code mapping for a hotel
     */
    postChannelGuaranteeCodeMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChannelGuaranteeCodeMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add channel property confirmation letter configuration <p><strong>OperationId:</strong>postChannelHotelLetters</p>
     * Adds channel property confirmation letter mapping
     */
    postChannelHotelLettersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelHotelLettersToBeCreated === null || requestParameters.channelHotelLettersToBeCreated === undefined) {
                throw new runtime.RequiredError('channelHotelLettersToBeCreated', 'Required parameter requestParameters.channelHotelLettersToBeCreated was null or undefined when calling postChannelHotelLetters.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/confirmationLetters`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelHotelLettersToBeCreatedToJSON)(requestParameters.channelHotelLettersToBeCreated),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add channel property confirmation letter configuration <p><strong>OperationId:</strong>postChannelHotelLetters</p>
     * Adds channel property confirmation letter mapping
     */
    postChannelHotelLetters(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChannelHotelLettersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add channel mapping for marketing messages <p><strong>OperationId:</strong>postChannelMarketingText</p>
     * Adds channel marketing messages
     */
    postChannelMarketingTextRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelMarketingText === null || requestParameters.channelMarketingText === undefined) {
                throw new runtime.RequiredError('channelMarketingText', 'Required parameter requestParameters.channelMarketingText was null or undefined when calling postChannelMarketingText.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/marketingText`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelMarketingTextToJSON)(requestParameters.channelMarketingText),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add channel mapping for marketing messages <p><strong>OperationId:</strong>postChannelMarketingText</p>
     * Adds channel marketing messages
     */
    postChannelMarketingText(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChannelMarketingTextRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add channel\'s negotiated rate code mapping with an OPERA profile for a given hotel id <p><strong>OperationId:</strong>postChannelNegotiatedRate</p>
     * Adds channel negotiate rate
     */
    postChannelNegotiatedRateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelNegotiatedRates === null || requestParameters.channelNegotiatedRates === undefined) {
                throw new runtime.RequiredError('channelNegotiatedRates', 'Required parameter requestParameters.channelNegotiatedRates was null or undefined when calling postChannelNegotiatedRate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/negotiatedRates`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelNegotiatedRatesToJSON)(requestParameters.channelNegotiatedRates),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add channel\'s negotiated rate code mapping with an OPERA profile for a given hotel id <p><strong>OperationId:</strong>postChannelNegotiatedRate</p>
     * Adds channel negotiate rate
     */
    postChannelNegotiatedRate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChannelNegotiatedRateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API adds channel tenants. <p><strong>OperationId:</strong>postChannelOrgMapping</p>
     * Adds channel tenants.
     */
    postChannelOrgMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling postChannelOrgMapping.');
            }
            if (requestParameters.channelOrgMapping === null || requestParameters.channelOrgMapping === undefined) {
                throw new runtime.RequiredError('channelOrgMapping', 'Required parameter requestParameters.channelOrgMapping was null or undefined when calling postChannelOrgMapping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/{channelCode}/tenants`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelOrgMappingToJSON)(requestParameters.channelOrgMapping),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API adds channel tenants. <p><strong>OperationId:</strong>postChannelOrgMapping</p>
     * Adds channel tenants.
     */
    postChannelOrgMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChannelOrgMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add channel rate categories for a given channel. <p><strong>OperationId:</strong>postChannelRateCategories</p>
     * Adds given channel\'s rate categories
     */
    postChannelRateCategoriesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling postChannelRateCategories.');
            }
            if (requestParameters.channelRateCategories === null || requestParameters.channelRateCategories === undefined) {
                throw new runtime.RequiredError('channelRateCategories', 'Required parameter requestParameters.channelRateCategories was null or undefined when calling postChannelRateCategories.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/{channelCode}/rateCategories`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelRateCategoriesToJSON)(requestParameters.channelRateCategories),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add channel rate categories for a given channel. <p><strong>OperationId:</strong>postChannelRateCategories</p>
     * Adds given channel\'s rate categories
     */
    postChannelRateCategories(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChannelRateCategoriesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add channel rate level configurations <p><strong>OperationId:</strong>postChannelRateLevels</p>
     * Adds channel rate level
     */
    postChannelRateLevelsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling postChannelRateLevels.');
            }
            if (requestParameters.channelRateLevels === null || requestParameters.channelRateLevels === undefined) {
                throw new runtime.RequiredError('channelRateLevels', 'Required parameter requestParameters.channelRateLevels was null or undefined when calling postChannelRateLevels.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/{channelCode}/rateLevels`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelRateLevelsToJSON)(requestParameters.channelRateLevels),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add channel rate level configurations <p><strong>OperationId:</strong>postChannelRateLevels</p>
     * Adds channel rate level
     */
    postChannelRateLevels(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChannelRateLevelsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add channel property rate mapping with OPERA hotel rate <p><strong>OperationId:</strong>postChannelRateMapping</p>
     * Adds channel property rate mapping
     */
    postChannelRateMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelRateMapping === null || requestParameters.channelRateMapping === undefined) {
                throw new runtime.RequiredError('channelRateMapping', 'Required parameter requestParameters.channelRateMapping was null or undefined when calling postChannelRateMapping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/rates`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelRateMappingToJSON)(requestParameters.channelRateMapping),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add channel property rate mapping with OPERA hotel rate <p><strong>OperationId:</strong>postChannelRateMapping</p>
     * Adds channel property rate mapping
     */
    postChannelRateMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChannelRateMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to link (distribute) channel a rate code to channel room types. <p><strong>OperationId:</strong>postChannelRates</p>
     * Distributes channel rate mappings to channel room types
     */
    postChannelRatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postChannelRates.');
            }
            if (requestParameters.channelRates === null || requestParameters.channelRates === undefined) {
                throw new runtime.RequiredError('channelRates', 'Required parameter requestParameters.channelRates was null or undefined when calling postChannelRates.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/channels/rates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelRatesToJSON)(requestParameters.channelRates),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to link (distribute) channel a rate code to channel room types. <p><strong>OperationId:</strong>postChannelRates</p>
     * Distributes channel rate mappings to channel room types
     */
    postChannelRates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChannelRatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to adds global room description for given hotel id and room type code <p><strong>OperationId:</strong>postChannelRatesGlobalDescriptions</p>
     * Adds global room descriptions
     */
    postChannelRatesGlobalDescriptionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelGlobalDescriptions === null || requestParameters.channelGlobalDescriptions === undefined) {
                throw new runtime.RequiredError('channelGlobalDescriptions', 'Required parameter requestParameters.channelGlobalDescriptions was null or undefined when calling postChannelRatesGlobalDescriptions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/rates/globalDescriptions`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelGlobalDescriptionsToJSON)(requestParameters.channelGlobalDescriptions),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to adds global room description for given hotel id and room type code <p><strong>OperationId:</strong>postChannelRatesGlobalDescriptions</p>
     * Adds global room descriptions
     */
    postChannelRatesGlobalDescriptions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChannelRatesGlobalDescriptionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add channel room mapping to OPERA hotel\'s room. <p><strong>OperationId:</strong>postChannelRoomMapping</p>
     * Adds channel property room mapping
     */
    postChannelRoomMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelRoomMappings === null || requestParameters.channelRoomMappings === undefined) {
                throw new runtime.RequiredError('channelRoomMappings', 'Required parameter requestParameters.channelRoomMappings was null or undefined when calling postChannelRoomMapping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/rooms`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelRoomMappingsToJSON)(requestParameters.channelRoomMappings),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add channel room mapping to OPERA hotel\'s room. <p><strong>OperationId:</strong>postChannelRoomMapping</p>
     * Adds channel property room mapping
     */
    postChannelRoomMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChannelRoomMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to link (distribute) channel a room type to channel rate codes. <p><strong>OperationId:</strong>postChannelRoomTypeRate</p>
     * Distributes channel room rate mappings.
     */
    postChannelRoomTypeRateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelRoomType === null || requestParameters.channelRoomType === undefined) {
                throw new runtime.RequiredError('channelRoomType', 'Required parameter requestParameters.channelRoomType was null or undefined when calling postChannelRoomTypeRate.');
            }
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling postChannelRoomTypeRate.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postChannelRoomTypeRate.');
            }
            if (requestParameters.channelRates === null || requestParameters.channelRates === undefined) {
                throw new runtime.RequiredError('channelRates', 'Required parameter requestParameters.channelRates was null or undefined when calling postChannelRoomTypeRate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/channels/{channelCode}/rooms/{channelRoomType}/rates`.replace(`{${"channelRoomType"}}`, encodeURIComponent(String(requestParameters.channelRoomType))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelRatesToJSON)(requestParameters.channelRates),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to link (distribute) channel a room type to channel rate codes. <p><strong>OperationId:</strong>postChannelRoomTypeRate</p>
     * Distributes channel room rate mappings.
     */
    postChannelRoomTypeRate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChannelRoomTypeRateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add channel room configuration <p><strong>OperationId:</strong>postChannelRoomTypes</p>
     * Adds channel room
     */
    postChannelRoomTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling postChannelRoomTypes.');
            }
            if (requestParameters.channelRoomTypes === null || requestParameters.channelRoomTypes === undefined) {
                throw new runtime.RequiredError('channelRoomTypes', 'Required parameter requestParameters.channelRoomTypes was null or undefined when calling postChannelRoomTypes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/{channelCode}/roomTypes`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelRoomTypesToJSON)(requestParameters.channelRoomTypes),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add channel room configuration <p><strong>OperationId:</strong>postChannelRoomTypes</p>
     * Adds channel room
     */
    postChannelRoomTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChannelRoomTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add global rate description for given hotel id and rate code <p><strong>OperationId:</strong>postChannelRoomsGlobalDescriptions</p>
     * Adds global rate descriptions
     */
    postChannelRoomsGlobalDescriptionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelGlobalDescriptions === null || requestParameters.channelGlobalDescriptions === undefined) {
                throw new runtime.RequiredError('channelGlobalDescriptions', 'Required parameter requestParameters.channelGlobalDescriptions was null or undefined when calling postChannelRoomsGlobalDescriptions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/rooms/globalDescriptions`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelGlobalDescriptionsToJSON)(requestParameters.channelGlobalDescriptions),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add global rate description for given hotel id and rate code <p><strong>OperationId:</strong>postChannelRoomsGlobalDescriptions</p>
     * Adds global rate descriptions
     */
    postChannelRoomsGlobalDescriptions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChannelRoomsGlobalDescriptionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add new channel code in OPERA <p><strong>OperationId:</strong>postChannels</p>
     * Adds new channel
     */
    postChannelsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channels === null || requestParameters.channels === undefined) {
                throw new runtime.RequiredError('channels', 'Required parameter requestParameters.channels was null or undefined when calling postChannels.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelsToJSON)(requestParameters.channels),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add new channel code in OPERA <p><strong>OperationId:</strong>postChannels</p>
     * Adds new channel
     */
    postChannels(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postChannelsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add channel mapping for OPERA Credit cards <p><strong>OperationId:</strong>postCreditCardsMapping</p>
     * Adds channel credit card mapping
     */
    postCreditCardsMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.creditCards === null || requestParameters.creditCards === undefined) {
                throw new runtime.RequiredError('creditCards', 'Required parameter requestParameters.creditCards was null or undefined when calling postCreditCardsMapping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/cardTypes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CreditCardsToJSON)(requestParameters.creditCards),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add channel mapping for OPERA Credit cards <p><strong>OperationId:</strong>postCreditCardsMapping</p>
     * Adds channel credit card mapping
     */
    postCreditCardsMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCreditCardsMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add channel currency code mapping to OPERA currency codes. <p><strong>OperationId:</strong>postCurrenciesMapping</p>
     * Adds channel currency code mapping
     */
    postCurrenciesMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.currencies === null || requestParameters.currencies === undefined) {
                throw new runtime.RequiredError('currencies', 'Required parameter requestParameters.currencies was null or undefined when calling postCurrenciesMapping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/currencies`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CurrenciesToJSON)(requestParameters.currencies),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add channel currency code mapping to OPERA currency codes. <p><strong>OperationId:</strong>postCurrenciesMapping</p>
     * Adds channel currency code mapping
     */
    postCurrenciesMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCurrenciesMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add a distribution rate template. <p><strong>OperationId:</strong>postDistributionTemplates</p>
     * Adds rate templates configurations
     */
    postDistributionTemplatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.distributionTemplates === null || requestParameters.distributionTemplates === undefined) {
                throw new runtime.RequiredError('distributionTemplates', 'Required parameter requestParameters.distributionTemplates was null or undefined when calling postDistributionTemplates.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/distributionTemplates`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DistributionTemplatesToJSON)(requestParameters.distributionTemplates),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add a distribution rate template. <p><strong>OperationId:</strong>postDistributionTemplates</p>
     * Adds rate templates configurations
     */
    postDistributionTemplates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postDistributionTemplatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add channel\'s guarantee codes mapping to OPERA guarantee codes. <p><strong>OperationId:</strong>postGuaranteesMapping</p>
     * Adds channel guarantee code mapping
     */
    postGuaranteesMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.guarantees === null || requestParameters.guarantees === undefined) {
                throw new runtime.RequiredError('guarantees', 'Required parameter requestParameters.guarantees was null or undefined when calling postGuaranteesMapping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/guarantees`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GuaranteesToJSON)(requestParameters.guarantees),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add channel\'s guarantee codes mapping to OPERA guarantee codes. <p><strong>OperationId:</strong>postGuaranteesMapping</p>
     * Adds channel guarantee code mapping
     */
    postGuaranteesMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postGuaranteesMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add channel mapping to OPERA hotel id including channel hotel code, room sell limit per reservation, city code, end date. <p><strong>OperationId:</strong>postHotelsMapping</p>
     * Adds channel hotel mapping
     */
    postHotelsMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.properties === null || requestParameters.properties === undefined) {
                throw new runtime.RequiredError('properties', 'Required parameter requestParameters.properties was null or undefined when calling postHotelsMapping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/hotels`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PropertiesToJSON)(requestParameters.properties),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add channel mapping to OPERA hotel id including channel hotel code, room sell limit per reservation, city code, end date. <p><strong>OperationId:</strong>postHotelsMapping</p>
     * Adds channel hotel mapping
     */
    postHotelsMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postHotelsMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to add global distribution channels tax and fee configurations. <p><strong>OperationId:</strong>postTotalPricingElements</p>
     * Adds total pricing tax and fee types
     */
    postTotalPricingElementsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.totalPricingElements === null || requestParameters.totalPricingElements === undefined) {
                throw new runtime.RequiredError('totalPricingElements', 'Required parameter requestParameters.totalPricingElements was null or undefined when calling postTotalPricingElements.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/totalPricing`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TotalPricingElementsToJSON)(requestParameters.totalPricingElements),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to add global distribution channels tax and fee configurations. <p><strong>OperationId:</strong>postTotalPricingElements</p>
     * Adds total pricing tax and fee types
     */
    postTotalPricingElements(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postTotalPricingElementsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API changes publishes channel availability. <p><strong>OperationId:</strong>publishChannelAvailability</p>
     * Publishes channel availability.
     */
    publishChannelAvailabilityRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelAvailability === null || requestParameters.channelAvailability === undefined) {
                throw new runtime.RequiredError('channelAvailability', 'Required parameter requestParameters.channelAvailability was null or undefined when calling publishChannelAvailability.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/availability/publish`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelAvailabilityToJSON)(requestParameters.channelAvailability),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API changes publishes channel availability. <p><strong>OperationId:</strong>publishChannelAvailability</p>
     * Publishes channel availability.
     */
    publishChannelAvailability(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.publishChannelAvailabilityRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API changes the channel rate plans for given channel code. <p><strong>OperationId:</strong>publishChannelRatePlans</p>
     * Publishes channel rate plan codes
     */
    publishChannelRatePlansRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling publishChannelRatePlans.');
            }
            if (requestParameters.channelRatePlans === null || requestParameters.channelRatePlans === undefined) {
                throw new runtime.RequiredError('channelRatePlans', 'Required parameter requestParameters.channelRatePlans was null or undefined when calling publishChannelRatePlans.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/{channelCode}/ratePlans`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelRatePlansToJSON)(requestParameters.channelRatePlans),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API changes the channel rate plans for given channel code. <p><strong>OperationId:</strong>publishChannelRatePlans</p>
     * Publishes channel rate plan codes
     */
    publishChannelRatePlans(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.publishChannelRatePlansRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API changes the channel restrictions. <p><strong>OperationId:</strong>publishChannelRestrictions</p>
     * Publishes channel restrictions
     */
    publishChannelRestrictionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelRestrictions === null || requestParameters.channelRestrictions === undefined) {
                throw new runtime.RequiredError('channelRestrictions', 'Required parameter requestParameters.channelRestrictions was null or undefined when calling publishChannelRestrictions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/restrictions/publish`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelRestrictionsToJSON)(requestParameters.channelRestrictions),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API changes the channel restrictions. <p><strong>OperationId:</strong>publishChannelRestrictions</p>
     * Publishes channel restrictions
     */
    publishChannelRestrictions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.publishChannelRestrictionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API changes the channel rate plans for given Hotel Id. <p><strong>OperationId:</strong>publishHotelChannelRatePlans</p>
     * Publishes channel hotel rate plan codes
     */
    publishHotelChannelRatePlansRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling publishHotelChannelRatePlans.');
            }
            if (requestParameters.channelRatePlans === null || requestParameters.channelRatePlans === undefined) {
                throw new runtime.RequiredError('channelRatePlans', 'Required parameter requestParameters.channelRatePlans was null or undefined when calling publishHotelChannelRatePlans.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/channels/ratePlans`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelRatePlansToJSON)(requestParameters.channelRatePlans),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API changes the channel rate plans for given Hotel Id. <p><strong>OperationId:</strong>publishHotelChannelRatePlans</p>
     * Publishes channel hotel rate plan codes
     */
    publishHotelChannelRatePlans(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.publishHotelChannelRatePlansRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update channel amenities mapping <p><strong>OperationId:</strong>putAmenitiesMapping</p>
     * Updates channel amenities configuration
     */
    putAmenitiesMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.amenities === null || requestParameters.amenities === undefined) {
                throw new runtime.RequiredError('amenities', 'Required parameter requestParameters.amenities was null or undefined when calling putAmenitiesMapping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/amenities`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AmenitiesToJSON)(requestParameters.amenities),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update channel amenities mapping <p><strong>OperationId:</strong>putAmenitiesMapping</p>
     * Updates channel amenities configuration
     */
    putAmenitiesMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putAmenitiesMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update existing cannel account contract for a given OPERA profile id <p><strong>OperationId:</strong>putChannelAccountContracts</p>
     * Updates channel account contracts for given profile Id.
     */
    putChannelAccountContractsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountProfileId === null || requestParameters.accountProfileId === undefined) {
                throw new runtime.RequiredError('accountProfileId', 'Required parameter requestParameters.accountProfileId was null or undefined when calling putChannelAccountContracts.');
            }
            if (requestParameters.channelAccountContracts === null || requestParameters.channelAccountContracts === undefined) {
                throw new runtime.RequiredError('channelAccountContracts', 'Required parameter requestParameters.channelAccountContracts was null or undefined when calling putChannelAccountContracts.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/accounts/{accountProfileId}/contracts`.replace(`{${"accountProfileId"}}`, encodeURIComponent(String(requestParameters.accountProfileId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelAccountContractsToJSON)(requestParameters.channelAccountContracts),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update existing cannel account contract for a given OPERA profile id <p><strong>OperationId:</strong>putChannelAccountContracts</p>
     * Updates channel account contracts for given profile Id.
     */
    putChannelAccountContracts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putChannelAccountContractsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update existing channel account for a given OPERA profile id <p><strong>OperationId:</strong>putChannelAccounts</p>
     * Updates channel accounts
     */
    putChannelAccountsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelAccountsToChange === null || requestParameters.channelAccountsToChange === undefined) {
                throw new runtime.RequiredError('channelAccountsToChange', 'Required parameter requestParameters.channelAccountsToChange was null or undefined when calling putChannelAccounts.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/accounts`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.channelAccountsToChange.map(index_1.ChannelAccountTypeToJSON),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update existing channel account for a given OPERA profile id <p><strong>OperationId:</strong>putChannelAccounts</p>
     * Updates channel accounts
     */
    putChannelAccounts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putChannelAccountsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update channels billing statements for a given OPERA statement id <p><strong>OperationId:</strong>putChannelBillingStatements</p>
     * Updates channel billing statement details
     */
    putChannelBillingStatementsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelBillingStatements === null || requestParameters.channelBillingStatements === undefined) {
                throw new runtime.RequiredError('channelBillingStatements', 'Required parameter requestParameters.channelBillingStatements was null or undefined when calling putChannelBillingStatements.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/billingStatements`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelBillingStatementsToJSON)(requestParameters.channelBillingStatements),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update channels billing statements for a given OPERA statement id <p><strong>OperationId:</strong>putChannelBillingStatements</p>
     * Updates channel billing statement details
     */
    putChannelBillingStatements(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putChannelBillingStatementsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update channel mapping for OPERA credit cards to channel for a given hotel id <p><strong>OperationId:</strong>putChannelCardTypeMapping</p>
     * Updates channel credit card mapping for a hotel
     */
    putChannelCardTypeMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cardTypeCode === null || requestParameters.cardTypeCode === undefined) {
                throw new runtime.RequiredError('cardTypeCode', 'Required parameter requestParameters.cardTypeCode was null or undefined when calling putChannelCardTypeMapping.');
            }
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling putChannelCardTypeMapping.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putChannelCardTypeMapping.');
            }
            if (requestParameters.channelCardTypeMappings === null || requestParameters.channelCardTypeMappings === undefined) {
                throw new runtime.RequiredError('channelCardTypeMappings', 'Required parameter requestParameters.channelCardTypeMappings was null or undefined when calling putChannelCardTypeMapping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/channels/{channelCode}/cardType/{cardTypeCode}`.replace(`{${"cardTypeCode"}}`, encodeURIComponent(String(requestParameters.cardTypeCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelCardTypeMappingsToJSON)(requestParameters.channelCardTypeMappings),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update channel mapping for OPERA credit cards to channel for a given hotel id <p><strong>OperationId:</strong>putChannelCardTypeMapping</p>
     * Updates channel credit card mapping for a hotel
     */
    putChannelCardTypeMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putChannelCardTypeMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update sub-channel (carrier) configuration for a given channel code <p><strong>OperationId:</strong>putChannelCarriers</p>
     * Updates sub channel configuration
     */
    putChannelCarriersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling putChannelCarriers.');
            }
            if (requestParameters.channelCarriers === null || requestParameters.channelCarriers === undefined) {
                throw new runtime.RequiredError('channelCarriers', 'Required parameter requestParameters.channelCarriers was null or undefined when calling putChannelCarriers.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/{channelCode}/subChannels`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelCarriersToJSON)(requestParameters.channelCarriers),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update sub-channel (carrier) configuration for a given channel code <p><strong>OperationId:</strong>putChannelCarriers</p>
     * Updates sub channel configuration
     */
    putChannelCarriers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putChannelCarriersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update channel error code mapping configurations <p><strong>OperationId:</strong>putChannelErrors</p>
     * Updates channel error codes
     */
    putChannelErrorsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling putChannelErrors.');
            }
            if (requestParameters.channelErrors === null || requestParameters.channelErrors === undefined) {
                throw new runtime.RequiredError('channelErrors', 'Required parameter requestParameters.channelErrors was null or undefined when calling putChannelErrors.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/{channelCode}/errorCodes`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelErrorsToJSON)(requestParameters.channelErrors),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update channel error code mapping configurations <p><strong>OperationId:</strong>putChannelErrors</p>
     * Updates channel error codes
     */
    putChannelErrors(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putChannelErrorsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update channel guarantee code mapping to OPERA guarantee code for a given hotel <p><strong>OperationId:</strong>putChannelGuaranteeCodeMapping</p>
     * Updates channel guarantee code mapping for a hotel
     */
    putChannelGuaranteeCodeMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.guaranteeCode === null || requestParameters.guaranteeCode === undefined) {
                throw new runtime.RequiredError('guaranteeCode', 'Required parameter requestParameters.guaranteeCode was null or undefined when calling putChannelGuaranteeCodeMapping.');
            }
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling putChannelGuaranteeCodeMapping.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putChannelGuaranteeCodeMapping.');
            }
            if (requestParameters.channelGuaranteeCodeMappings === null || requestParameters.channelGuaranteeCodeMappings === undefined) {
                throw new runtime.RequiredError('channelGuaranteeCodeMappings', 'Required parameter requestParameters.channelGuaranteeCodeMappings was null or undefined when calling putChannelGuaranteeCodeMapping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/channels/{channelCode}/guarantees/{guaranteeCode}`.replace(`{${"guaranteeCode"}}`, encodeURIComponent(String(requestParameters.guaranteeCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelGuaranteeCodeMappingsToJSON)(requestParameters.channelGuaranteeCodeMappings),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update channel guarantee code mapping to OPERA guarantee code for a given hotel <p><strong>OperationId:</strong>putChannelGuaranteeCodeMapping</p>
     * Updates channel guarantee code mapping for a hotel
     */
    putChannelGuaranteeCodeMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putChannelGuaranteeCodeMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update channel property confirmation letter configuration <p><strong>OperationId:</strong>putChannelHotelLetters</p>
     * Updates channel property confirmation letter mapping
     */
    putChannelHotelLettersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelHotelLettersToBeChanged === null || requestParameters.channelHotelLettersToBeChanged === undefined) {
                throw new runtime.RequiredError('channelHotelLettersToBeChanged', 'Required parameter requestParameters.channelHotelLettersToBeChanged was null or undefined when calling putChannelHotelLetters.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/confirmationLetters`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelHotelLettersToBeChangedToJSON)(requestParameters.channelHotelLettersToBeChanged),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update channel property confirmation letter configuration <p><strong>OperationId:</strong>putChannelHotelLetters</p>
     * Updates channel property confirmation letter mapping
     */
    putChannelHotelLetters(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putChannelHotelLettersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update channel mapping for marketing messages <p><strong>OperationId:</strong>putChannelMarketingText</p>
     * Updates channel marketing messages
     */
    putChannelMarketingTextRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelMarketingTextToChange === null || requestParameters.channelMarketingTextToChange === undefined) {
                throw new runtime.RequiredError('channelMarketingTextToChange', 'Required parameter requestParameters.channelMarketingTextToChange was null or undefined when calling putChannelMarketingText.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/marketingText`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelMarketingTextToChangeToJSON)(requestParameters.channelMarketingTextToChange),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update channel mapping for marketing messages <p><strong>OperationId:</strong>putChannelMarketingText</p>
     * Updates channel marketing messages
     */
    putChannelMarketingText(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putChannelMarketingTextRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update channel\'s negotiated rate code mapping including negotiated profile, negotiate rate access code, start date, end date, and sequence. <p><strong>OperationId:</strong>putChannelNegotiatedRate</p>
     * Updates channel negotiate rate
     */
    putChannelNegotiatedRateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelNegotiatedRates === null || requestParameters.channelNegotiatedRates === undefined) {
                throw new runtime.RequiredError('channelNegotiatedRates', 'Required parameter requestParameters.channelNegotiatedRates was null or undefined when calling putChannelNegotiatedRate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/negotiatedRates`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelNegotiatedRatesToJSON)(requestParameters.channelNegotiatedRates),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update channel\'s negotiated rate code mapping including negotiated profile, negotiate rate access code, start date, end date, and sequence. <p><strong>OperationId:</strong>putChannelNegotiatedRate</p>
     * Updates channel negotiate rate
     */
    putChannelNegotiatedRate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putChannelNegotiatedRateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API changes channel tenants mapping. <p><strong>OperationId:</strong>putChannelOrgMapping</p>
     * Updates channel tenants mapping.
     */
    putChannelOrgMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.tenantCode === null || requestParameters.tenantCode === undefined) {
                throw new runtime.RequiredError('tenantCode', 'Required parameter requestParameters.tenantCode was null or undefined when calling putChannelOrgMapping.');
            }
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling putChannelOrgMapping.');
            }
            if (requestParameters.channelOrgMapping === null || requestParameters.channelOrgMapping === undefined) {
                throw new runtime.RequiredError('channelOrgMapping', 'Required parameter requestParameters.channelOrgMapping was null or undefined when calling putChannelOrgMapping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/{channelCode}/tenants/{tenantCode}`.replace(`{${"tenantCode"}}`, encodeURIComponent(String(requestParameters.tenantCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelOrgMappingToJSON)(requestParameters.channelOrgMapping),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API changes channel tenants mapping. <p><strong>OperationId:</strong>putChannelOrgMapping</p>
     * Updates channel tenants mapping.
     */
    putChannelOrgMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putChannelOrgMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to active/inactive channel controls. It also allows to update channel control settings. <p><strong>OperationId:</strong>putChannelParameters</p>
     * Updates channel control settings
     */
    putChannelParametersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling putChannelParameters.');
            }
            if (requestParameters.changeChannelParameters === null || requestParameters.changeChannelParameters === undefined) {
                throw new runtime.RequiredError('changeChannelParameters', 'Required parameter requestParameters.changeChannelParameters was null or undefined when calling putChannelParameters.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/{channelCode}/parameters`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChangeChannelParametersToJSON)(requestParameters.changeChannelParameters),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to active/inactive channel controls. It also allows to update channel control settings. <p><strong>OperationId:</strong>putChannelParameters</p>
     * Updates channel control settings
     */
    putChannelParameters(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putChannelParametersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update channel rate categories for a given channel. <p><strong>OperationId:</strong>putChannelRateCategories</p>
     * Updates given channel\'s rate categories
     */
    putChannelRateCategoriesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling putChannelRateCategories.');
            }
            if (requestParameters.channelRateCategories === null || requestParameters.channelRateCategories === undefined) {
                throw new runtime.RequiredError('channelRateCategories', 'Required parameter requestParameters.channelRateCategories was null or undefined when calling putChannelRateCategories.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/{channelCode}/rateCategories`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelRateCategoriesToJSON)(requestParameters.channelRateCategories),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update channel rate categories for a given channel. <p><strong>OperationId:</strong>putChannelRateCategories</p>
     * Updates given channel\'s rate categories
     */
    putChannelRateCategories(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putChannelRateCategoriesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update channel rate level code\'s description <p><strong>OperationId:</strong>putChannelRateLevels</p>
     * Updates channel rate level
     */
    putChannelRateLevelsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling putChannelRateLevels.');
            }
            if (requestParameters.channelRateLevels === null || requestParameters.channelRateLevels === undefined) {
                throw new runtime.RequiredError('channelRateLevels', 'Required parameter requestParameters.channelRateLevels was null or undefined when calling putChannelRateLevels.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/{channelCode}/rateLevels`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelRateLevelsToJSON)(requestParameters.channelRateLevels),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update channel rate level code\'s description <p><strong>OperationId:</strong>putChannelRateLevels</p>
     * Updates channel rate level
     */
    putChannelRateLevels(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putChannelRateLevelsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update channel property rate mapping including channel rate code, start date, end date, rate level, channel rate description. <p><strong>OperationId:</strong>putChannelRateMapping</p>
     * Updates channel property rate mapping
     */
    putChannelRateMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelRateMapping === null || requestParameters.channelRateMapping === undefined) {
                throw new runtime.RequiredError('channelRateMapping', 'Required parameter requestParameters.channelRateMapping was null or undefined when calling putChannelRateMapping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/rates`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelRateMappingToJSON)(requestParameters.channelRateMapping),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update channel property rate mapping including channel rate code, start date, end date, rate level, channel rate description. <p><strong>OperationId:</strong>putChannelRateMapping</p>
     * Updates channel property rate mapping
     */
    putChannelRateMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putChannelRateMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update sequence for given channel property rate room mapping  <p><strong>OperationId:</strong>putChannelRateRoomSeq</p>
     * Updates channel property rateroom sequence
     */
    putChannelRateRoomSeqRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelRateRoomSequence === null || requestParameters.channelRateRoomSequence === undefined) {
                throw new runtime.RequiredError('channelRateRoomSequence', 'Required parameter requestParameters.channelRateRoomSequence was null or undefined when calling putChannelRateRoomSeq.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/rates/roomSequence`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelRateRoomSequenceToJSON)(requestParameters.channelRateRoomSequence),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update sequence for given channel property rate room mapping  <p><strong>OperationId:</strong>putChannelRateRoomSeq</p>
     * Updates channel property rateroom sequence
     */
    putChannelRateRoomSeq(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putChannelRateRoomSeqRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update global rate description for given hotel id and rate code <p><strong>OperationId:</strong>putChannelRatesGlobalDescriptions</p>
     * Updates global rate descriptions
     */
    putChannelRatesGlobalDescriptionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelGlobalDescriptions === null || requestParameters.channelGlobalDescriptions === undefined) {
                throw new runtime.RequiredError('channelGlobalDescriptions', 'Required parameter requestParameters.channelGlobalDescriptions was null or undefined when calling putChannelRatesGlobalDescriptions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/rates/globalDescriptions`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelGlobalDescriptionsToJSON)(requestParameters.channelGlobalDescriptions),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update global rate description for given hotel id and rate code <p><strong>OperationId:</strong>putChannelRatesGlobalDescriptions</p>
     * Updates global rate descriptions
     */
    putChannelRatesGlobalDescriptions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putChannelRatesGlobalDescriptionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update channel room mapping to OPERA hotel\'s room mapping including channel room type code, start date, end date, room order. <p><strong>OperationId:</strong>putChannelRoomMapping</p>
     * Updates channel property room mapping
     */
    putChannelRoomMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.roomTypeCode === null || requestParameters.roomTypeCode === undefined) {
                throw new runtime.RequiredError('roomTypeCode', 'Required parameter requestParameters.roomTypeCode was null or undefined when calling putChannelRoomMapping.');
            }
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling putChannelRoomMapping.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putChannelRoomMapping.');
            }
            if (requestParameters.channelRoomMapping === null || requestParameters.channelRoomMapping === undefined) {
                throw new runtime.RequiredError('channelRoomMapping', 'Required parameter requestParameters.channelRoomMapping was null or undefined when calling putChannelRoomMapping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/channels/{channelCode}/rooms/{roomTypeCode}`.replace(`{${"roomTypeCode"}}`, encodeURIComponent(String(requestParameters.roomTypeCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelRoomMappingToJSON)(requestParameters.channelRoomMapping),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update channel room mapping to OPERA hotel\'s room mapping including channel room type code, start date, end date, room order. <p><strong>OperationId:</strong>putChannelRoomMapping</p>
     * Updates channel property room mapping
     */
    putChannelRoomMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putChannelRoomMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update channel room description <p><strong>OperationId:</strong>putChannelRoomTypes</p>
     * Updates channel room
     */
    putChannelRoomTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling putChannelRoomTypes.');
            }
            if (requestParameters.channelRoomTypes === null || requestParameters.channelRoomTypes === undefined) {
                throw new runtime.RequiredError('channelRoomTypes', 'Required parameter requestParameters.channelRoomTypes was null or undefined when calling putChannelRoomTypes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/{channelCode}/roomTypes`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelRoomTypesToJSON)(requestParameters.channelRoomTypes),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update channel room description <p><strong>OperationId:</strong>putChannelRoomTypes</p>
     * Updates channel room
     */
    putChannelRoomTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putChannelRoomTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update global room description for given hotel id and room type code <p><strong>OperationId:</strong>putChannelRoomsGlobalDescriptions</p>
     * Updates global room descriptions
     */
    putChannelRoomsGlobalDescriptionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelGlobalDescriptions === null || requestParameters.channelGlobalDescriptions === undefined) {
                throw new runtime.RequiredError('channelGlobalDescriptions', 'Required parameter requestParameters.channelGlobalDescriptions was null or undefined when calling putChannelRoomsGlobalDescriptions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/rooms/globalDescriptions`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelGlobalDescriptionsToJSON)(requestParameters.channelGlobalDescriptions),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update global room description for given hotel id and room type code <p><strong>OperationId:</strong>putChannelRoomsGlobalDescriptions</p>
     * Updates global room descriptions
     */
    putChannelRoomsGlobalDescriptions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putChannelRoomsGlobalDescriptionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update channel configuration <p><strong>OperationId:</strong>putChannels</p>
     * Update channel configuration
     */
    putChannelsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channels === null || requestParameters.channels === undefined) {
                throw new runtime.RequiredError('channels', 'Required parameter requestParameters.channels was null or undefined when calling putChannels.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelsToJSON)(requestParameters.channels),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update channel configuration <p><strong>OperationId:</strong>putChannels</p>
     * Update channel configuration
     */
    putChannels(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putChannelsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update channel credit card code mapping to OPERA credit card code <p><strong>OperationId:</strong>putCreditCardsMapping</p>
     * Updates channel credit card mapping
     */
    putCreditCardsMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.creditCards === null || requestParameters.creditCards === undefined) {
                throw new runtime.RequiredError('creditCards', 'Required parameter requestParameters.creditCards was null or undefined when calling putCreditCardsMapping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/cardTypes`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CreditCardsToJSON)(requestParameters.creditCards),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update channel credit card code mapping to OPERA credit card code <p><strong>OperationId:</strong>putCreditCardsMapping</p>
     * Updates channel credit card mapping
     */
    putCreditCardsMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putCreditCardsMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update channel mapping to OPERA currency codes <p><strong>OperationId:</strong>putCurrenciesMapping</p>
     * Updates channel currency code mapping
     */
    putCurrenciesMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.currencies === null || requestParameters.currencies === undefined) {
                throw new runtime.RequiredError('currencies', 'Required parameter requestParameters.currencies was null or undefined when calling putCurrenciesMapping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/currencies`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CurrenciesToJSON)(requestParameters.currencies),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update channel mapping to OPERA currency codes <p><strong>OperationId:</strong>putCurrenciesMapping</p>
     * Updates channel currency code mapping
     */
    putCurrenciesMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putCurrenciesMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update existing distribution rate template <p><strong>OperationId:</strong>putDistributionTemplates</p>
     * Updates rate templates configurations
     */
    putDistributionTemplatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.distributionTemplates === null || requestParameters.distributionTemplates === undefined) {
                throw new runtime.RequiredError('distributionTemplates', 'Required parameter requestParameters.distributionTemplates was null or undefined when calling putDistributionTemplates.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/distributionTemplates`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DistributionTemplatesToJSON)(requestParameters.distributionTemplates),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update existing distribution rate template <p><strong>OperationId:</strong>putDistributionTemplates</p>
     * Updates rate templates configurations
     */
    putDistributionTemplates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putDistributionTemplatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update channel\'s guarantee codes mapping to OPERA guarantee codes <p><strong>OperationId:</strong>putGuaranteesMapping</p>
     * Updates channel guarantee code mapping
     */
    putGuaranteesMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.guarantees === null || requestParameters.guarantees === undefined) {
                throw new runtime.RequiredError('guarantees', 'Required parameter requestParameters.guarantees was null or undefined when calling putGuaranteesMapping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/guarantees`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.GuaranteesToJSON)(requestParameters.guarantees),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update channel\'s guarantee codes mapping to OPERA guarantee codes <p><strong>OperationId:</strong>putGuaranteesMapping</p>
     * Updates channel guarantee code mapping
     */
    putGuaranteesMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putGuaranteesMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update channel mapping to OPERA hotel id including channel hotel code, room sell limit per reservation, city code, end date <p><strong>OperationId:</strong>putHotelsMapping</p>
     * Updates channel hotel mapping
     */
    putHotelsMappingRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.properties === null || requestParameters.properties === undefined) {
                throw new runtime.RequiredError('properties', 'Required parameter requestParameters.properties was null or undefined when calling putHotelsMapping.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/hotels`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.PropertiesToJSON)(requestParameters.properties),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update channel mapping to OPERA hotel id including channel hotel code, room sell limit per reservation, city code, end date <p><strong>OperationId:</strong>putHotelsMapping</p>
     * Updates channel hotel mapping
     */
    putHotelsMapping(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putHotelsMappingRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update OPERA rate\'s global description for global distribution type channels <p><strong>OperationId:</strong>putRateGlobalDescription</p>
     * Updates global descriptions for a rate
     */
    putRateGlobalDescriptionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelRateCode === null || requestParameters.channelRateCode === undefined) {
                throw new runtime.RequiredError('channelRateCode', 'Required parameter requestParameters.channelRateCode was null or undefined when calling putRateGlobalDescription.');
            }
            if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
                throw new runtime.RequiredError('channelCode', 'Required parameter requestParameters.channelCode was null or undefined when calling putRateGlobalDescription.');
            }
            if (requestParameters.channelGlobalDescription === null || requestParameters.channelGlobalDescription === undefined) {
                throw new runtime.RequiredError('channelGlobalDescription', 'Required parameter requestParameters.channelGlobalDescription was null or undefined when calling putRateGlobalDescription.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/{channelCode}/rates/{channelRateCode}/globalDescription`.replace(`{${"channelRateCode"}}`, encodeURIComponent(String(requestParameters.channelRateCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelGlobalDescriptionToJSON)(requestParameters.channelGlobalDescription),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update OPERA rate\'s global description for global distribution type channels <p><strong>OperationId:</strong>putRateGlobalDescription</p>
     * Updates global descriptions for a rate
     */
    putRateGlobalDescription(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putRateGlobalDescriptionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update OPERA room\'s global description for global distribution type channels <p><strong>OperationId:</strong>putRoomDescription</p>
     * Update global descriptions for a room
     */
    putRoomDescriptionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.channelGlobalDescription === null || requestParameters.channelGlobalDescription === undefined) {
                throw new runtime.RequiredError('channelGlobalDescription', 'Required parameter requestParameters.channelGlobalDescription was null or undefined when calling putRoomDescription.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/channels/rooms/globalDescription`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelGlobalDescriptionToJSON)(requestParameters.channelGlobalDescription),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update OPERA room\'s global description for global distribution type channels <p><strong>OperationId:</strong>putRoomDescription</p>
     * Update global descriptions for a room
     */
    putRoomDescription(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putRoomDescriptionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update global distribution channels tax and fee configurations <p><strong>OperationId:</strong>putTotalPricingElements</p>
     * Updates total pricing tax and fee types
     */
    putTotalPricingElementsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.totalPricingElements === null || requestParameters.totalPricingElements === undefined) {
                throw new runtime.RequiredError('totalPricingElements', 'Required parameter requestParameters.totalPricingElements was null or undefined when calling putTotalPricingElements.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/totalPricing`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TotalPricingElementsToJSON)(requestParameters.totalPricingElements),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update global distribution channels tax and fee configurations <p><strong>OperationId:</strong>putTotalPricingElements</p>
     * Updates total pricing tax and fee types
     */
    putTotalPricingElements(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putTotalPricingElementsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.ChannelApi = ChannelApi;
/**
 * @export
 */
exports.DeleteAmenitiesMappingAmenityGroupEnum = {
    PropertyFeatures: 'PropertyFeatures',
    RoomFeatures: 'RoomFeatures',
    ProductsFeatures: 'ProductsFeatures',
    BedCodes: 'BedCodes'
};
/**
 * @export
 */
exports.DeleteChannelHotelLettersLetterTypeEnum = {
    Confirmation: 'Confirmation',
    Cancellation: 'Cancellation',
    BanquetEventOrder: 'BanquetEventOrder',
    Contract: 'Contract',
    Inquiry: 'Inquiry'
};
/**
 * @export
 */
exports.DeleteChannelNegotiatedRateNameTypeEnum = {
    Primary: 'Primary',
    Alternate: 'Alternate',
    Incognito: 'Incognito',
    External: 'External',
    Phonetic: 'Phonetic'
};
/**
 * @export
 */
exports.DeleteChannelRatesGlobalDescriptionsGlobalDescTypeEnum = {
    RoomType: 'RoomType',
    RatePlan: 'RatePlan'
};
/**
 * @export
 */
exports.DeleteChannelRoomsGlobalDescriptionsGlobalDescTypeEnum = {
    RoomType: 'RoomType',
    RatePlan: 'RatePlan'
};
/**
 * @export
 */
exports.GetChannelFetchInstructionsEnum = {
    RateLevel: 'RateLevel',
    Error: 'Error',
    RoomType: 'RoomType',
    Carrier: 'Carrier',
    RateCategory: 'RateCategory'
};
/**
 * @export
 */
exports.GetChannelAccountFetchInstructionsEnum = {
    PrimaryDetails: 'PrimaryDetails',
    Communication: 'Communication',
    Contact: 'Contact',
    Notes: 'Notes',
    Contracts: 'Contracts',
    Statements: 'Statements',
    Indicators: 'Indicators'
};
/**
 * @export
 */
exports.GetChannelAccountContractElementsOrderTypeEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
};
/**
 * @export
 */
exports.GetChannelAccountsAccountTypeEnum = {
    Property: 'Property',
    Chain: 'Chain',
    Dealer: 'Dealer',
    Subsidiary: 'Subsidiary',
    Routing: 'Routing',
    Template: 'Template'
};
/**
 * @export
 */
exports.GetChannelAccountsOrderTypeEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
};
/**
 * @export
 */
exports.GetChannelBillingStatementDetailsOrderTypeEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
};
/**
 * @export
 */
exports.GetChannelHotelLettersLetterTypeEnum = {
    Confirmation: 'Confirmation',
    Cancellation: 'Cancellation',
    BanquetEventOrder: 'BanquetEventOrder',
    Contract: 'Contract',
    Inquiry: 'Inquiry'
};
/**
 * @export
 */
exports.GetChannelMarketingTextFetchInstructionsEnum = {
    Marketingtext: 'Marketingtext',
    Amenity: 'Amenity',
    Carrier: 'Carrier',
    Currency: 'Currency',
    Error: 'Error',
    Guarantee: 'Guarantee',
    Ratecategory: 'Ratecategory'
};
/**
 * @export
 */
exports.GetChannelRateRoomSeqChannelRateRoomParameterNameEnum = {
    ShowInactive: 'ShowInactive'
};
/**
 * @export
 */
exports.GetChannelRatesGlobalDescriptionsGlobalDescriptionTypeEnum = {
    RoomType: 'RoomType',
    RatePlan: 'RatePlan'
};
/**
 * @export
 */
exports.GetChannelRoomsGlobalDescriptionsGlobalDescriptionTypeEnum = {
    RoomType: 'RoomType',
    RatePlan: 'RatePlan'
};
/**
 * @export
 */
exports.GetStatementDetailsStatisticsFetchInstructionsEnum = {
    ByResort: 'ByResort',
    ByChannel: 'ByChannel',
    ByChannelType: 'ByChannelType',
    ByFeeType: 'ByFeeType'
};
