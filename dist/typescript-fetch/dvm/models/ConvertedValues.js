"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud DataValueMapping Service API
 * APIs which offer external systems to config and use values different than what are configured in opera<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConvertedValuesToJSON = exports.ConvertedValuesFromJSONTyped = exports.ConvertedValuesFromJSON = exports.instanceOfConvertedValues = void 0;
const runtime_1 = require("../runtime");
const ConversionHotelInfoType_1 = require("./ConversionHotelInfoType");
const ConvertedValueType_1 = require("./ConvertedValueType");
const InstanceLink_1 = require("./InstanceLink");
const WarningType_1 = require("./WarningType");
/**
 * Check if a given object implements the ConvertedValues interface.
 */
function instanceOfConvertedValues(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfConvertedValues = instanceOfConvertedValues;
function ConvertedValuesFromJSON(json) {
    return ConvertedValuesFromJSONTyped(json, false);
}
exports.ConvertedValuesFromJSON = ConvertedValuesFromJSON;
function ConvertedValuesFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'externalSystem': !(0, runtime_1.exists)(json, 'externalSystem') ? undefined : json['externalSystem'],
        'hotelInfo': !(0, runtime_1.exists)(json, 'hotelInfo') ? undefined : (0, ConversionHotelInfoType_1.ConversionHotelInfoTypeFromJSON)(json['hotelInfo']),
        'convertedValues': !(0, runtime_1.exists)(json, 'convertedValues') ? undefined : (json['convertedValues'].map(ConvertedValueType_1.ConvertedValueTypeFromJSON)),
        'links': !(0, runtime_1.exists)(json, 'links') ? undefined : (json['links'].map(InstanceLink_1.InstanceLinkFromJSON)),
        'warnings': !(0, runtime_1.exists)(json, 'warnings') ? undefined : (json['warnings'].map(WarningType_1.WarningTypeFromJSON)),
    };
}
exports.ConvertedValuesFromJSONTyped = ConvertedValuesFromJSONTyped;
function ConvertedValuesToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'externalSystem': value.externalSystem,
        'hotelInfo': (0, ConversionHotelInfoType_1.ConversionHotelInfoTypeToJSON)(value.hotelInfo),
        'convertedValues': value.convertedValues === undefined ? undefined : (value.convertedValues.map(ConvertedValueType_1.ConvertedValueTypeToJSON)),
        'links': value.links === undefined ? undefined : (value.links.map(InstanceLink_1.InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : (value.warnings.map(WarningType_1.WarningTypeToJSON)),
    };
}
exports.ConvertedValuesToJSON = ConvertedValuesToJSON;
