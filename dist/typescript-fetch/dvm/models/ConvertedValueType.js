"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud DataValueMapping Service API
 * APIs which offer external systems to config and use values different than what are configured in opera<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConvertedValueTypeToJSON = exports.ConvertedValueTypeFromJSONTyped = exports.ConvertedValueTypeFromJSON = exports.instanceOfConvertedValueType = void 0;
const runtime_1 = require("../runtime");
const DataValueMappingCodeType_1 = require("./DataValueMappingCodeType");
/**
 * Check if a given object implements the ConvertedValueType interface.
 */
function instanceOfConvertedValueType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfConvertedValueType = instanceOfConvertedValueType;
function ConvertedValueTypeFromJSON(json) {
    return ConvertedValueTypeFromJSONTyped(json, false);
}
exports.ConvertedValueTypeFromJSON = ConvertedValueTypeFromJSON;
function ConvertedValueTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'conversionCode': !(0, runtime_1.exists)(json, 'conversionCode') ? undefined : (0, DataValueMappingCodeType_1.DataValueMappingCodeTypeFromJSON)(json['conversionCode']),
        'crsDefaultConversion': !(0, runtime_1.exists)(json, 'crsDefaultConversion') ? undefined : json['crsDefaultConversion'],
        'externalValue': !(0, runtime_1.exists)(json, 'externalValue') ? undefined : json['externalValue'],
        'masterValue': !(0, runtime_1.exists)(json, 'masterValue') ? undefined : json['masterValue'],
        'operaValue': !(0, runtime_1.exists)(json, 'operaValue') ? undefined : json['operaValue'],
        'pmsDefaultConversion': !(0, runtime_1.exists)(json, 'pmsDefaultConversion') ? undefined : json['pmsDefaultConversion'],
    };
}
exports.ConvertedValueTypeFromJSONTyped = ConvertedValueTypeFromJSONTyped;
function ConvertedValueTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'conversionCode': (0, DataValueMappingCodeType_1.DataValueMappingCodeTypeToJSON)(value.conversionCode),
        'crsDefaultConversion': value.crsDefaultConversion,
        'externalValue': value.externalValue,
        'masterValue': value.masterValue,
        'operaValue': value.operaValue,
        'pmsDefaultConversion': value.pmsDefaultConversion,
    };
}
exports.ConvertedValueTypeToJSON = ConvertedValueTypeToJSON;
