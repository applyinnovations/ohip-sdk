/**
 * OPERA Cloud DataValueMapping Service API
 * APIs which offer external systems to config and use values different than what are configured in opera<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { DataValueMappingCodeType } from './DataValueMappingCodeType';
/**
 * Details of the converted value.
 * @export
 * @interface ConvertedValueType
 */
export interface ConvertedValueType {
    /**
     *
     * @type {DataValueMappingCodeType}
     * @memberof ConvertedValueType
     */
    conversionCode?: DataValueMappingCodeType;
    /**
     * The flag will be true for all the conversions that are crs defaults. In case there are more than one conversions available in opera.
     * @type {boolean}
     * @memberof ConvertedValueType
     */
    crsDefaultConversion?: boolean;
    /**
     * Value used by the external vendors.
     * @type {string}
     * @memberof ConvertedValueType
     */
    externalValue?: string;
    /**
     * Opera Master Value
     * @type {string}
     * @memberof ConvertedValueType
     */
    masterValue?: string;
    /**
     * Opera Value
     * @type {string}
     * @memberof ConvertedValueType
     */
    operaValue?: string;
    /**
     * The flag will be true for all the conversions that are pms defaults. In case there are more than one conversions available in opera.
     * @type {boolean}
     * @memberof ConvertedValueType
     */
    pmsDefaultConversion?: boolean;
}
/**
 * Check if a given object implements the ConvertedValueType interface.
 */
export declare function instanceOfConvertedValueType(value: object): boolean;
export declare function ConvertedValueTypeFromJSON(json: any): ConvertedValueType;
export declare function ConvertedValueTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConvertedValueType;
export declare function ConvertedValueTypeToJSON(value?: ConvertedValueType | null): any;
