/**
 * OPERA Cloud DataValueMapping Service API
 * APIs which offer external systems to config and use values different than what are configured in opera<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { ConversionHotelInfoType } from './ConversionHotelInfoType';
import type { ConvertedValuesType } from './ConvertedValuesType';
import type { Links } from './Links';
import type { WarningsType } from './WarningsType';
/**
 *
 * @export
 * @interface ConvertedValues
 */
export interface ConvertedValues {
    /**
     *
     * @type {ConvertedValuesType}
     * @memberof ConvertedValues
     */
    convertedValues?: ConvertedValuesType;
    /**
     * ExternalSystem for which the conversion is needed.
     * @type {string}
     * @memberof ConvertedValues
     */
    externalSystem?: string;
    /**
     *
     * @type {ConversionHotelInfoType}
     * @memberof ConvertedValues
     */
    hotelInfo?: ConversionHotelInfoType;
    /**
     *
     * @type {Links}
     * @memberof ConvertedValues
     */
    links?: Links;
    /**
     *
     * @type {WarningsType}
     * @memberof ConvertedValues
     */
    warnings?: WarningsType;
}
/**
 * Check if a given object implements the ConvertedValues interface.
 */
export declare function instanceOfConvertedValues(value: object): boolean;
export declare function ConvertedValuesFromJSON(json: any): ConvertedValues;
export declare function ConvertedValuesFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConvertedValues;
export declare function ConvertedValuesToJSON(value?: ConvertedValues | null): any;
