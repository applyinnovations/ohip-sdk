"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud DataValueMapping Service API
 * APIs which offer external systems to config and use values different than what are configured in opera<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultValueTypeToJSON = exports.DefaultValueTypeFromJSONTyped = exports.DefaultValueTypeFromJSON = exports.instanceOfDefaultValueType = void 0;
const runtime_1 = require("../runtime");
const DefaultValueCodeType_1 = require("./DefaultValueCodeType");
/**
 * Check if a given object implements the DefaultValueType interface.
 */
function instanceOfDefaultValueType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfDefaultValueType = instanceOfDefaultValueType;
function DefaultValueTypeFromJSON(json) {
    return DefaultValueTypeFromJSONTyped(json, false);
}
exports.DefaultValueTypeFromJSON = DefaultValueTypeFromJSON;
function DefaultValueTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'defaultValueType': !(0, runtime_1.exists)(json, 'defaultValueType') ? undefined : (0, DefaultValueCodeType_1.DefaultValueCodeTypeFromJSON)(json['defaultValueType']),
        'externalDefault': !(0, runtime_1.exists)(json, 'externalDefault') ? undefined : json['externalDefault'],
        'operaDefault': !(0, runtime_1.exists)(json, 'operaDefault') ? undefined : json['operaDefault'],
    };
}
exports.DefaultValueTypeFromJSONTyped = DefaultValueTypeFromJSONTyped;
function DefaultValueTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'defaultValueType': (0, DefaultValueCodeType_1.DefaultValueCodeTypeToJSON)(value.defaultValueType),
        'externalDefault': value.externalDefault,
        'operaDefault': value.operaDefault,
    };
}
exports.DefaultValueTypeToJSON = DefaultValueTypeToJSON;
