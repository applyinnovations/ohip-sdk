/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Provisioning Service API
 * APIs to cater to provisioning and deprovisioning of new properties and chains in OPERA.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Response object which will contain all the List of valid currencies in the environment.
 * @export
 * @interface Currencies
 */
export interface Currencies {
    /**
     * List of currencies available in the environment.
     * @type {Array<string>}
     * @memberof Currencies
     */
    currencyList?: Array<string>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof Currencies
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the Currencies interface.
 */
export function instanceOfCurrencies(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CurrenciesFromJSON(json: any): Currencies {
    return CurrenciesFromJSONTyped(json, false);
}

export function CurrenciesFromJSONTyped(json: any, ignoreDiscriminator: boolean): Currencies {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'currencyList': !exists(json, 'currencyList') ? undefined : json['currencyList'],
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function CurrenciesToJSON(value?: Currencies | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'currencyList': value.currencyList,
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

