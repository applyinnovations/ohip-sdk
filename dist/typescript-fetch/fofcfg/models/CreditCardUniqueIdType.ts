/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CreditCardServiceActionType } from './CreditCardServiceActionType';
import {
    CreditCardServiceActionTypeFromJSON,
    CreditCardServiceActionTypeFromJSONTyped,
    CreditCardServiceActionTypeToJSON,
} from './CreditCardServiceActionType';

/**
 * Information about the credit card unique id.
 * @export
 * @interface CreditCardUniqueIdType
 */
export interface CreditCardUniqueIdType {
    /**
     * 
     * @type {CreditCardServiceActionType}
     * @memberof CreditCardUniqueIdType
     */
    actionType?: CreditCardServiceActionType;
    /**
     * Flag to determine if the credit card was swiped/manually entered , This element is only used when PAYMENT SERVICES DIRECTIVE (PSD2) Opera Control is active.
     * @type {boolean}
     * @memberof CreditCardUniqueIdType
     */
    cardPresent?: boolean;
    /**
     * Customer Initiated Transaction(CIT) Id for Credit Cards. This is only used when PAYMENT SERVICES DIRECTIVE (PSD2) Opera Control is active.
     * @type {string}
     * @memberof CreditCardUniqueIdType
     */
    citId?: string;
    /**
     * Card name holder.
     * @type {string}
     * @memberof CreditCardUniqueIdType
     */
    creditCardName?: string;
    /**
     * Credit card number.
     * @type {string}
     * @memberof CreditCardUniqueIdType
     */
    creditCardNumber?: string;
    /**
     * Last 4 digits of a credit card.
     * @type {string}
     * @memberof CreditCardUniqueIdType
     */
    creditCardNumberLast4Digits?: string;
    /**
     * Credit card type.
     * @type {string}
     * @memberof CreditCardUniqueIdType
     */
    creditCardType?: string;
    /**
     * Expiration date in string representation.
     * @type {string}
     * @memberof CreditCardUniqueIdType
     */
    expirationDateString?: string;
    /**
     * Terminal ID from where this request originated.
     * @type {string}
     * @memberof CreditCardUniqueIdType
     */
    terminalId?: string;
    /**
     * Unique id of credit card.
     * @type {string}
     * @memberof CreditCardUniqueIdType
     */
    uniqueId?: string;
}

/**
 * Check if a given object implements the CreditCardUniqueIdType interface.
 */
export function instanceOfCreditCardUniqueIdType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CreditCardUniqueIdTypeFromJSON(json: any): CreditCardUniqueIdType {
    return CreditCardUniqueIdTypeFromJSONTyped(json, false);
}

export function CreditCardUniqueIdTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreditCardUniqueIdType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'actionType': !exists(json, 'actionType') ? undefined : CreditCardServiceActionTypeFromJSON(json['actionType']),
        'cardPresent': !exists(json, 'cardPresent') ? undefined : json['cardPresent'],
        'citId': !exists(json, 'citId') ? undefined : json['citId'],
        'creditCardName': !exists(json, 'creditCardName') ? undefined : json['creditCardName'],
        'creditCardNumber': !exists(json, 'creditCardNumber') ? undefined : json['creditCardNumber'],
        'creditCardNumberLast4Digits': !exists(json, 'creditCardNumberLast4Digits') ? undefined : json['creditCardNumberLast4Digits'],
        'creditCardType': !exists(json, 'creditCardType') ? undefined : json['creditCardType'],
        'expirationDateString': !exists(json, 'expirationDateString') ? undefined : json['expirationDateString'],
        'terminalId': !exists(json, 'terminalId') ? undefined : json['terminalId'],
        'uniqueId': !exists(json, 'uniqueId') ? undefined : json['uniqueId'],
    };
}

export function CreditCardUniqueIdTypeToJSON(value?: CreditCardUniqueIdType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'actionType': CreditCardServiceActionTypeToJSON(value.actionType),
        'cardPresent': value.cardPresent,
        'citId': value.citId,
        'creditCardName': value.creditCardName,
        'creditCardNumber': value.creditCardNumber,
        'creditCardNumberLast4Digits': value.creditCardNumberLast4Digits,
        'creditCardType': value.creditCardType,
        'expirationDateString': value.expirationDateString,
        'terminalId': value.terminalId,
        'uniqueId': value.uniqueId,
    };
}

