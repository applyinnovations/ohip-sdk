/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Payment Transaction Code usage details.
 * @export
 * @interface PaymentTrxUsageType
 */
export interface PaymentTrxUsageType {
    /**
     * True indicates the payment Transaction Code is used for AR payments.
     * @type {boolean}
     * @memberof PaymentTrxUsageType
     */
    aR?: boolean;
    /**
     * Indicates whether Profiles are shared across the Hotels within the chain or not.
     * @type {boolean}
     * @memberof PaymentTrxUsageType
     */
    cashier?: boolean;
    /**
     * True indicates the payment Transaction Code is used for Comp payments.
     * @type {boolean}
     * @memberof PaymentTrxUsageType
     */
    comp?: boolean;
    /**
     * True indicates the payment Transaction Code is used for deposits.
     * @type {boolean}
     * @memberof PaymentTrxUsageType
     */
    deposit?: boolean;
    /**
     * True indicates the payment Transaction Code is used for inter hotel deposits.
     * @type {boolean}
     * @memberof PaymentTrxUsageType
     */
    interHotelDeposit?: boolean;
    /**
     * True indicates the payment Transaction Code inter hotel payments.
     * @type {boolean}
     * @memberof PaymentTrxUsageType
     */
    interHotelPayment?: boolean;
}

/**
 * Check if a given object implements the PaymentTrxUsageType interface.
 */
export function instanceOfPaymentTrxUsageType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PaymentTrxUsageTypeFromJSON(json: any): PaymentTrxUsageType {
    return PaymentTrxUsageTypeFromJSONTyped(json, false);
}

export function PaymentTrxUsageTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentTrxUsageType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'aR': !exists(json, 'aR') ? undefined : json['aR'],
        'cashier': !exists(json, 'cashier') ? undefined : json['cashier'],
        'comp': !exists(json, 'comp') ? undefined : json['comp'],
        'deposit': !exists(json, 'deposit') ? undefined : json['deposit'],
        'interHotelDeposit': !exists(json, 'interHotelDeposit') ? undefined : json['interHotelDeposit'],
        'interHotelPayment': !exists(json, 'interHotelPayment') ? undefined : json['interHotelPayment'],
    };
}

export function PaymentTrxUsageTypeToJSON(value?: PaymentTrxUsageType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'aR': value.aR,
        'cashier': value.cashier,
        'comp': value.comp,
        'deposit': value.deposit,
        'interHotelDeposit': value.interHotelDeposit,
        'interHotelPayment': value.interHotelPayment,
    };
}

