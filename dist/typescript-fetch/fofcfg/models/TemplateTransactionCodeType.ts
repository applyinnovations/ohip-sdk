/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { ExportMappingLinkedCodeType } from './ExportMappingLinkedCodeType';
import {
    ExportMappingLinkedCodeTypeFromJSON,
    ExportMappingLinkedCodeTypeFromJSONTyped,
    ExportMappingLinkedCodeTypeToJSON,
} from './ExportMappingLinkedCodeType';
import type { GLMappingType } from './GLMappingType';
import {
    GLMappingTypeFromJSON,
    GLMappingTypeFromJSONTyped,
    GLMappingTypeToJSON,
} from './GLMappingType';
import type { GeneratesSetupType } from './GeneratesSetupType';
import {
    GeneratesSetupTypeFromJSON,
    GeneratesSetupTypeFromJSONTyped,
    GeneratesSetupTypeToJSON,
} from './GeneratesSetupType';
import type { PaymentTrxSetupType } from './PaymentTrxSetupType';
import {
    PaymentTrxSetupTypeFromJSON,
    PaymentTrxSetupTypeFromJSONTyped,
    PaymentTrxSetupTypeToJSON,
} from './PaymentTrxSetupType';
import type { TransactionAdjustmentType } from './TransactionAdjustmentType';
import {
    TransactionAdjustmentTypeFromJSON,
    TransactionAdjustmentTypeFromJSONTyped,
    TransactionAdjustmentTypeToJSON,
} from './TransactionAdjustmentType';
import type { TranslationTextType2000 } from './TranslationTextType2000';
import {
    TranslationTextType2000FromJSON,
    TranslationTextType2000FromJSONTyped,
    TranslationTextType2000ToJSON,
} from './TranslationTextType2000';
import type { TrxCodeAmountsType } from './TrxCodeAmountsType';
import {
    TrxCodeAmountsTypeFromJSON,
    TrxCodeAmountsTypeFromJSONTyped,
    TrxCodeAmountsTypeToJSON,
} from './TrxCodeAmountsType';
import type { TrxCodeClassificationType } from './TrxCodeClassificationType';
import {
    TrxCodeClassificationTypeFromJSON,
    TrxCodeClassificationTypeFromJSONTyped,
    TrxCodeClassificationTypeToJSON,
} from './TrxCodeClassificationType';
import type { TrxSetupType } from './TrxSetupType';
import {
    TrxSetupTypeFromJSON,
    TrxSetupTypeFromJSONTyped,
    TrxSetupTypeToJSON,
} from './TrxSetupType';

/**
 * Transaction Code configuration details.
 * @export
 * @interface TemplateTransactionCodeType
 */
export interface TemplateTransactionCodeType {
    /**
     * 
     * @type {TrxCodeClassificationType}
     * @memberof TemplateTransactionCodeType
     */
    classification?: TrxCodeClassificationType;
    /**
     * 
     * @type {TranslationTextType2000}
     * @memberof TemplateTransactionCodeType
     */
    description?: TranslationTextType2000;
    /**
     * 
     * @type {PaymentTrxSetupType}
     * @memberof TemplateTransactionCodeType
     */
    paymentSetup?: PaymentTrxSetupType;
    /**
     * 
     * @type {TrxSetupType}
     * @memberof TemplateTransactionCodeType
     */
    trxSetup?: TrxSetupType;
    /**
     * Transaction code to be used to make adjustments on the posting made using this transaction code.
     * @type {string}
     * @memberof TemplateTransactionCodeType
     */
    adjustmentCode?: string;
    /**
     * Combination of Adjustment Reason Code and Transaction Adjustment Code.
     * @type {Array<TransactionAdjustmentType>}
     * @memberof TemplateTransactionCodeType
     */
    transactionAdjustments?: Array<TransactionAdjustmentType>;
    /**
     * Transaction code to be used to make service recovery adjustments on the posting made using this transaction code.
     * @type {string}
     * @memberof TemplateTransactionCodeType
     */
    serviceRecoveryAdjustmentCode?: string;
    /**
     * 
     * @type {TrxCodeAmountsType}
     * @memberof TemplateTransactionCodeType
     */
    amounts?: TrxCodeAmountsType;
    /**
     * 
     * @type {GeneratesSetupType}
     * @memberof TemplateTransactionCodeType
     */
    generatesSetup?: GeneratesSetupType;
    /**
     * 
     * @type {GLMappingType}
     * @memberof TemplateTransactionCodeType
     */
    gLMapping?: GLMappingType;
    /**
     * Code and description of the standard transaction code associated to this comp transaction code.
     * @type {Array<CodeDescriptionType>}
     * @memberof TemplateTransactionCodeType
     */
    associatedTransactionCodes?: Array<CodeDescriptionType>;
    /**
     * Flag to identify if this transaction code already used as service recovery adjustment code.
     * @type {boolean}
     * @memberof TemplateTransactionCodeType
     */
    allowServiceRecovery?: boolean;
    /**
     * Unique Universal product code of the article.
     * @type {string}
     * @memberof TemplateTransactionCodeType
     */
    universalProductCode?: string;
    /**
     * Mapping code and value attached to Transaction Code.
     * @type {Array<ExportMappingLinkedCodeType>}
     * @memberof TemplateTransactionCodeType
     */
    mappingCodes?: Array<ExportMappingLinkedCodeType>;
    /**
     * Unique Transaction Code.
     * @type {string}
     * @memberof TemplateTransactionCodeType
     */
    code?: string;
    /**
     * If true indicates this transaction codes is for Comp Accounting.
     * @type {boolean}
     * @memberof TemplateTransactionCodeType
     */
    compTransaction?: boolean;
}

/**
 * Check if a given object implements the TemplateTransactionCodeType interface.
 */
export function instanceOfTemplateTransactionCodeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TemplateTransactionCodeTypeFromJSON(json: any): TemplateTransactionCodeType {
    return TemplateTransactionCodeTypeFromJSONTyped(json, false);
}

export function TemplateTransactionCodeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TemplateTransactionCodeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'classification': !exists(json, 'classification') ? undefined : TrxCodeClassificationTypeFromJSON(json['classification']),
        'description': !exists(json, 'description') ? undefined : TranslationTextType2000FromJSON(json['description']),
        'paymentSetup': !exists(json, 'paymentSetup') ? undefined : PaymentTrxSetupTypeFromJSON(json['paymentSetup']),
        'trxSetup': !exists(json, 'trxSetup') ? undefined : TrxSetupTypeFromJSON(json['trxSetup']),
        'adjustmentCode': !exists(json, 'adjustmentCode') ? undefined : json['adjustmentCode'],
        'transactionAdjustments': !exists(json, 'transactionAdjustments') ? undefined : ((json['transactionAdjustments'] as Array<any>).map(TransactionAdjustmentTypeFromJSON)),
        'serviceRecoveryAdjustmentCode': !exists(json, 'serviceRecoveryAdjustmentCode') ? undefined : json['serviceRecoveryAdjustmentCode'],
        'amounts': !exists(json, 'amounts') ? undefined : TrxCodeAmountsTypeFromJSON(json['amounts']),
        'generatesSetup': !exists(json, 'generatesSetup') ? undefined : GeneratesSetupTypeFromJSON(json['generatesSetup']),
        'gLMapping': !exists(json, 'gLMapping') ? undefined : GLMappingTypeFromJSON(json['gLMapping']),
        'associatedTransactionCodes': !exists(json, 'associatedTransactionCodes') ? undefined : ((json['associatedTransactionCodes'] as Array<any>).map(CodeDescriptionTypeFromJSON)),
        'allowServiceRecovery': !exists(json, 'allowServiceRecovery') ? undefined : json['allowServiceRecovery'],
        'universalProductCode': !exists(json, 'universalProductCode') ? undefined : json['universalProductCode'],
        'mappingCodes': !exists(json, 'mappingCodes') ? undefined : ((json['mappingCodes'] as Array<any>).map(ExportMappingLinkedCodeTypeFromJSON)),
        'code': !exists(json, 'code') ? undefined : json['code'],
        'compTransaction': !exists(json, 'compTransaction') ? undefined : json['compTransaction'],
    };
}

export function TemplateTransactionCodeTypeToJSON(value?: TemplateTransactionCodeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'classification': TrxCodeClassificationTypeToJSON(value.classification),
        'description': TranslationTextType2000ToJSON(value.description),
        'paymentSetup': PaymentTrxSetupTypeToJSON(value.paymentSetup),
        'trxSetup': TrxSetupTypeToJSON(value.trxSetup),
        'adjustmentCode': value.adjustmentCode,
        'transactionAdjustments': value.transactionAdjustments === undefined ? undefined : ((value.transactionAdjustments as Array<any>).map(TransactionAdjustmentTypeToJSON)),
        'serviceRecoveryAdjustmentCode': value.serviceRecoveryAdjustmentCode,
        'amounts': TrxCodeAmountsTypeToJSON(value.amounts),
        'generatesSetup': GeneratesSetupTypeToJSON(value.generatesSetup),
        'gLMapping': GLMappingTypeToJSON(value.gLMapping),
        'associatedTransactionCodes': value.associatedTransactionCodes === undefined ? undefined : ((value.associatedTransactionCodes as Array<any>).map(CodeDescriptionTypeToJSON)),
        'allowServiceRecovery': value.allowServiceRecovery,
        'universalProductCode': value.universalProductCode,
        'mappingCodes': value.mappingCodes === undefined ? undefined : ((value.mappingCodes as Array<any>).map(ExportMappingLinkedCodeTypeToJSON)),
        'code': value.code,
        'compTransaction': value.compTransaction,
    };
}

