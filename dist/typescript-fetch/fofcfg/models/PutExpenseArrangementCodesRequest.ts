/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExpenseArrangementCodeType } from './ExpenseArrangementCodeType';
import {
    ExpenseArrangementCodeTypeFromJSON,
    ExpenseArrangementCodeTypeFromJSONTyped,
    ExpenseArrangementCodeTypeToJSON,
} from './ExpenseArrangementCodeType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * 
 * @export
 * @interface PutExpenseArrangementCodesRequest
 */
export interface PutExpenseArrangementCodesRequest {
    /**
     * Details for expense arrangement code along with associated transaction codes.
     * @type {Array<ExpenseArrangementCodeType>}
     * @memberof PutExpenseArrangementCodesRequest
     */
    expenseArrangementCodes?: Array<ExpenseArrangementCodeType>;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof PutExpenseArrangementCodesRequest
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof PutExpenseArrangementCodesRequest
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the PutExpenseArrangementCodesRequest interface.
 */
export function instanceOfPutExpenseArrangementCodesRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PutExpenseArrangementCodesRequestFromJSON(json: any): PutExpenseArrangementCodesRequest {
    return PutExpenseArrangementCodesRequestFromJSONTyped(json, false);
}

export function PutExpenseArrangementCodesRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PutExpenseArrangementCodesRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'expenseArrangementCodes': !exists(json, 'expenseArrangementCodes') ? undefined : ((json['expenseArrangementCodes'] as Array<any>).map(ExpenseArrangementCodeTypeFromJSON)),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function PutExpenseArrangementCodesRequestToJSON(value?: PutExpenseArrangementCodesRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'expenseArrangementCodes': value.expenseArrangementCodes === undefined ? undefined : ((value.expenseArrangementCodes as Array<any>).map(ExpenseArrangementCodeTypeToJSON)),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

