/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CodeDescriptionType } from './CodeDescriptionType';
import type { MembershipTypeLevelType } from './MembershipTypeLevelType';
import type { ThresholdDetailsType } from './ThresholdDetailsType';
import type { TransactionDiversionRuleLevelType } from './TransactionDiversionRuleLevelType';
import type { TransactionDiversionRuleTypeType } from './TransactionDiversionRuleTypeType';
/**
 * A Transaction Diversion Rule Type
 * @export
 * @interface TransactionDiversionRuleType
 */
export interface TransactionDiversionRuleType {
    /**
     * Transaction Diversion Code
     * @type {string}
     * @memberof TransactionDiversionRuleType
     */
    code?: string;
    /**
     * User defined message for the Transaction Diversion Rule.
     * @type {string}
     * @memberof TransactionDiversionRuleType
     */
    description?: string;
    /**
     * User configured Sequence number.
     * @type {number}
     * @memberof TransactionDiversionRuleType
     */
    displaySequence?: number;
    /**
     * Hotel code with which Transaction Diversion Rule is associated.
     * @type {string}
     * @memberof TransactionDiversionRuleType
     */
    hotelId?: string;
    /**
     * Indicator that tells whether the transaction diversion rule is active or not.
     * @type {boolean}
     * @memberof TransactionDiversionRuleType
     */
    inactive?: boolean;
    /**
     *
     * @type {TransactionDiversionRuleLevelType}
     * @memberof TransactionDiversionRuleType
     */
    level?: TransactionDiversionRuleLevelType;
    /**
     *
     * @type {MembershipTypeLevelType}
     * @memberof TransactionDiversionRuleType
     */
    membership?: MembershipTypeLevelType;
    /**
     * Room number to receive all the diverted transactions configured for this instruction.
     * @type {string}
     * @memberof TransactionDiversionRuleType
     */
    targetRoom?: string;
    /**
     *
     * @type {ThresholdDetailsType}
     * @memberof TransactionDiversionRuleType
     */
    thresholds?: ThresholdDetailsType;
    /**
     * Collection of Transaction Code List
     * @type {Array<CodeDescriptionType>}
     * @memberof TransactionDiversionRuleType
     */
    transactionCodes?: Array<CodeDescriptionType>;
    /**
     *
     * @type {TransactionDiversionRuleTypeType}
     * @memberof TransactionDiversionRuleType
     */
    type?: TransactionDiversionRuleTypeType;
    /**
     * VIP code to consider while applying Diversion Instruction.
     * @type {string}
     * @memberof TransactionDiversionRuleType
     */
    vipCode?: string;
}
/**
 * Check if a given object implements the TransactionDiversionRuleType interface.
 */
export declare function instanceOfTransactionDiversionRuleType(value: object): boolean;
export declare function TransactionDiversionRuleTypeFromJSON(json: any): TransactionDiversionRuleType;
export declare function TransactionDiversionRuleTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionDiversionRuleType;
export declare function TransactionDiversionRuleTypeToJSON(value?: TransactionDiversionRuleType | null): any;
