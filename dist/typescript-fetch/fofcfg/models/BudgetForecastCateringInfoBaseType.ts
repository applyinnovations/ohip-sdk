/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CateringCodeInformationBaseType } from './CateringCodeInformationBaseType';
import {
    CateringCodeInformationBaseTypeFromJSON,
    CateringCodeInformationBaseTypeFromJSONTyped,
    CateringCodeInformationBaseTypeToJSON,
} from './CateringCodeInformationBaseType';

/**
 * Budget Forecast information for budget Catering codes.
 * @export
 * @interface BudgetForecastCateringInfoBaseType
 */
export interface BudgetForecastCateringInfoBaseType {
    /**
     * Budget Forecast information for Catering segment code .
     * @type {Array<CateringCodeInformationBaseType>}
     * @memberof BudgetForecastCateringInfoBaseType
     */
    cateringCodeInformation?: Array<CateringCodeInformationBaseType>;
    /**
     * Flag to indicate if covers information has to be included.
     * @type {boolean}
     * @memberof BudgetForecastCateringInfoBaseType
     */
    covers?: boolean;
    /**
     * Flag to indicate if revenue information has to be included.
     * @type {boolean}
     * @memberof BudgetForecastCateringInfoBaseType
     */
    revenue?: boolean;
}

/**
 * Check if a given object implements the BudgetForecastCateringInfoBaseType interface.
 */
export function instanceOfBudgetForecastCateringInfoBaseType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BudgetForecastCateringInfoBaseTypeFromJSON(json: any): BudgetForecastCateringInfoBaseType {
    return BudgetForecastCateringInfoBaseTypeFromJSONTyped(json, false);
}

export function BudgetForecastCateringInfoBaseTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BudgetForecastCateringInfoBaseType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cateringCodeInformation': !exists(json, 'cateringCodeInformation') ? undefined : ((json['cateringCodeInformation'] as Array<any>).map(CateringCodeInformationBaseTypeFromJSON)),
        'covers': !exists(json, 'covers') ? undefined : json['covers'],
        'revenue': !exists(json, 'revenue') ? undefined : json['revenue'],
    };
}

export function BudgetForecastCateringInfoBaseTypeToJSON(value?: BudgetForecastCateringInfoBaseType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cateringCodeInformation': value.cateringCodeInformation === undefined ? undefined : ((value.cateringCodeInformation as Array<any>).map(CateringCodeInformationBaseTypeToJSON)),
        'covers': value.covers,
        'revenue': value.revenue,
    };
}

