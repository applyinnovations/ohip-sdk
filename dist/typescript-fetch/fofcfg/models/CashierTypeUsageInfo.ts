/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CashierTypeUsageInfoHistory } from './CashierTypeUsageInfoHistory';
import {
    CashierTypeUsageInfoHistoryFromJSON,
    CashierTypeUsageInfoHistoryFromJSONTyped,
    CashierTypeUsageInfoHistoryToJSON,
} from './CashierTypeUsageInfoHistory';

/**
 * Information about how the cashier is used.
 * @export
 * @interface CashierTypeUsageInfo
 */
export interface CashierTypeUsageInfo {
    /**
     * The Maximum Daily Uses for the cashier.
     * @type {number}
     * @memberof CashierTypeUsageInfo
     */
    maximumDailyUses?: number;
    /**
     * 
     * @type {CashierTypeUsageInfoHistory}
     * @memberof CashierTypeUsageInfo
     */
    history?: CashierTypeUsageInfoHistory;
}

/**
 * Check if a given object implements the CashierTypeUsageInfo interface.
 */
export function instanceOfCashierTypeUsageInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CashierTypeUsageInfoFromJSON(json: any): CashierTypeUsageInfo {
    return CashierTypeUsageInfoFromJSONTyped(json, false);
}

export function CashierTypeUsageInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CashierTypeUsageInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'maximumDailyUses': !exists(json, 'maximumDailyUses') ? undefined : json['maximumDailyUses'],
        'history': !exists(json, 'history') ? undefined : CashierTypeUsageInfoHistoryFromJSON(json['history']),
    };
}

export function CashierTypeUsageInfoToJSON(value?: CashierTypeUsageInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'maximumDailyUses': value.maximumDailyUses,
        'history': CashierTypeUsageInfoHistoryToJSON(value.history),
    };
}

