/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CompTypeType } from './CompTypeType';
import {
    CompTypeTypeFromJSON,
    CompTypeTypeFromJSONTyped,
    CompTypeTypeToJSON,
} from './CompTypeType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * 
 * @export
 * @interface PostCompTypesRequest
 */
export interface PostCompTypesRequest {
    /**
     * List of Comp Types.
     * @type {Array<CompTypeType>}
     * @memberof PostCompTypesRequest
     */
    compTypes?: Array<CompTypeType>;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof PostCompTypesRequest
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof PostCompTypesRequest
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the PostCompTypesRequest interface.
 */
export function instanceOfPostCompTypesRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PostCompTypesRequestFromJSON(json: any): PostCompTypesRequest {
    return PostCompTypesRequestFromJSONTyped(json, false);
}

export function PostCompTypesRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostCompTypesRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'compTypes': !exists(json, 'compTypes') ? undefined : ((json['compTypes'] as Array<any>).map(CompTypeTypeFromJSON)),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function PostCompTypesRequestToJSON(value?: PostCompTypesRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'compTypes': value.compTypes === undefined ? undefined : ((value.compTypes as Array<any>).map(CompTypeTypeToJSON)),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

