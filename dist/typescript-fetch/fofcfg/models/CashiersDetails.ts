/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CashierType } from './CashierType';
import {
    CashierTypeFromJSON,
    CashierTypeFromJSONTyped,
    CashierTypeToJSON,
} from './CashierType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * 
 * @export
 * @interface CashiersDetails
 */
export interface CashiersDetails {
    /**
     * Details about a cashier.
     * @type {Array<CashierType>}
     * @memberof CashiersDetails
     */
    cashiers?: Array<CashierType>;
    /**
     * Evaluated total page count based on the requested max fetch count.
     * @type {number}
     * @memberof CashiersDetails
     */
    totalPages?: number;
    /**
     * Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
     * @type {number}
     * @memberof CashiersDetails
     */
    offset?: number;
    /**
     * Indicates maximum number of records a Web Service should return.
     * @type {number}
     * @memberof CashiersDetails
     */
    limit?: number;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof CashiersDetails
     */
    hasMore?: boolean;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof CashiersDetails
     */
    totalResults?: number;
    /**
     * Total number of rows returned
     * @type {number}
     * @memberof CashiersDetails
     */
    count?: number;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof CashiersDetails
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof CashiersDetails
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the CashiersDetails interface.
 */
export function instanceOfCashiersDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CashiersDetailsFromJSON(json: any): CashiersDetails {
    return CashiersDetailsFromJSONTyped(json, false);
}

export function CashiersDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CashiersDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cashiers': !exists(json, 'cashiers') ? undefined : ((json['cashiers'] as Array<any>).map(CashierTypeFromJSON)),
        'totalPages': !exists(json, 'totalPages') ? undefined : json['totalPages'],
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
        'count': !exists(json, 'count') ? undefined : json['count'],
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function CashiersDetailsToJSON(value?: CashiersDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cashiers': value.cashiers === undefined ? undefined : ((value.cashiers as Array<any>).map(CashierTypeToJSON)),
        'totalPages': value.totalPages,
        'offset': value.offset,
        'limit': value.limit,
        'hasMore': value.hasMore,
        'totalResults': value.totalResults,
        'count': value.count,
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

