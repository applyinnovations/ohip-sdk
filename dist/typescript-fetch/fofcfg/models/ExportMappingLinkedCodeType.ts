/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Details of linked code.
 * @export
 * @interface ExportMappingLinkedCodeType
 */
export interface ExportMappingLinkedCodeType {
    /**
     * Linked code.
     * @type {string}
     * @memberof ExportMappingLinkedCodeType
     */
    linkedCode?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ExportMappingLinkedCodeType
     */
    exportMappingId?: UniqueIDType;
    /**
     * Mapping code attached to linked code.
     * @type {string}
     * @memberof ExportMappingLinkedCodeType
     */
    exportMappingCode?: string;
    /**
     * Default value.
     * @type {string}
     * @memberof ExportMappingLinkedCodeType
     */
    defaultMappedValue?: string;
    /**
     * Linked code.
     * @type {string}
     * @memberof ExportMappingLinkedCodeType
     */
    mappedValue?: string;
    /**
     * Description of the export mapping type.
     * @type {string}
     * @memberof ExportMappingLinkedCodeType
     */
    mappingTypeDescription?: string;
    /**
     * Description of the export mapping code.
     * @type {string}
     * @memberof ExportMappingLinkedCodeType
     */
    mappingCodeDescription?: string;
    /**
     * Name of the LOV group to be used.
     * @type {string}
     * @memberof ExportMappingLinkedCodeType
     */
    lovName?: string;
}

/**
 * Check if a given object implements the ExportMappingLinkedCodeType interface.
 */
export function instanceOfExportMappingLinkedCodeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExportMappingLinkedCodeTypeFromJSON(json: any): ExportMappingLinkedCodeType {
    return ExportMappingLinkedCodeTypeFromJSONTyped(json, false);
}

export function ExportMappingLinkedCodeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExportMappingLinkedCodeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'linkedCode': !exists(json, 'linkedCode') ? undefined : json['linkedCode'],
        'exportMappingId': !exists(json, 'exportMappingId') ? undefined : UniqueIDTypeFromJSON(json['exportMappingId']),
        'exportMappingCode': !exists(json, 'exportMappingCode') ? undefined : json['exportMappingCode'],
        'defaultMappedValue': !exists(json, 'defaultMappedValue') ? undefined : json['defaultMappedValue'],
        'mappedValue': !exists(json, 'mappedValue') ? undefined : json['mappedValue'],
        'mappingTypeDescription': !exists(json, 'mappingTypeDescription') ? undefined : json['mappingTypeDescription'],
        'mappingCodeDescription': !exists(json, 'mappingCodeDescription') ? undefined : json['mappingCodeDescription'],
        'lovName': !exists(json, 'lovName') ? undefined : json['lovName'],
    };
}

export function ExportMappingLinkedCodeTypeToJSON(value?: ExportMappingLinkedCodeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'linkedCode': value.linkedCode,
        'exportMappingId': UniqueIDTypeToJSON(value.exportMappingId),
        'exportMappingCode': value.exportMappingCode,
        'defaultMappedValue': value.defaultMappedValue,
        'mappedValue': value.mappedValue,
        'mappingTypeDescription': value.mappingTypeDescription,
        'mappingCodeDescription': value.mappingCodeDescription,
        'lovName': value.lovName,
    };
}

