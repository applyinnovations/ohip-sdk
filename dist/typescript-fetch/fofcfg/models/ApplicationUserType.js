"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationUserTypeToJSON = exports.ApplicationUserTypeFromJSONTyped = exports.ApplicationUserTypeFromJSON = exports.instanceOfApplicationUserType = void 0;
const runtime_1 = require("../runtime");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the ApplicationUserType interface.
 */
function instanceOfApplicationUserType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfApplicationUserType = instanceOfApplicationUserType;
function ApplicationUserTypeFromJSON(json) {
    return ApplicationUserTypeFromJSONTyped(json, false);
}
exports.ApplicationUserTypeFromJSON = ApplicationUserTypeFromJSON;
function ApplicationUserTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'appUser': !(0, runtime_1.exists)(json, 'appUser') ? undefined : json['appUser'],
        'appUserId': !(0, runtime_1.exists)(json, 'appUserId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['appUserId']),
    };
}
exports.ApplicationUserTypeFromJSONTyped = ApplicationUserTypeFromJSONTyped;
function ApplicationUserTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'appUser': value.appUser,
        'appUserId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.appUserId),
    };
}
exports.ApplicationUserTypeToJSON = ApplicationUserTypeToJSON;
