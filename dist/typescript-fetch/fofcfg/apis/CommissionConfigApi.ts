/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BankAccountsInfo,
  CommissionCodeDetail,
  CommissionCodesSummary,
  ExceptionDetailType,
  PutCommissionCodesRequest,
  PutConfigBankAccountsRequest,
  PutStopProcessingReasonsRequest,
  Status,
  StopProcessingReasons,
} from '../models';
import {
    BankAccountsInfoFromJSON,
    BankAccountsInfoToJSON,
    CommissionCodeDetailFromJSON,
    CommissionCodeDetailToJSON,
    CommissionCodesSummaryFromJSON,
    CommissionCodesSummaryToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    PutCommissionCodesRequestFromJSON,
    PutCommissionCodesRequestToJSON,
    PutConfigBankAccountsRequestFromJSON,
    PutConfigBankAccountsRequestToJSON,
    PutStopProcessingReasonsRequestFromJSON,
    PutStopProcessingReasonsRequestToJSON,
    StatusFromJSON,
    StatusToJSON,
    StopProcessingReasonsFromJSON,
    StopProcessingReasonsToJSON,
} from '../models';

export interface DeleteCommissionCodesRequest {
    hotelIds?: Array<string>;
    commissionCodes?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteConfigBankAccountsRequest {
    hotelId?: Array<string>;
    bankAccountID?: Array<number>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteStopProcessingReasonsRequest {
    codes?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCommissionCodeRequest {
    commissionCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCommissionCodesRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    commissionCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetConfigBankAccountsRequest {
    hotels?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    bankCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetStopProcessingReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCommissionCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    commissionCodes?: PutCommissionCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostConfigBankAccountsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    bankAccounts?: PutConfigBankAccountsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostStopProcessingReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    stopProcessingReasons?: PutStopProcessingReasonsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCommissionCodesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    commissionCodes?: PutCommissionCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutConfigBankAccountsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    bankAccounts?: PutConfigBankAccountsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutStopProcessingReasonsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    stopProcessingReasons?: PutStopProcessingReasonsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class CommissionConfigApi extends runtime.BaseAPI {

    /**
     *  <p><strong>OperationId:</strong>deleteCommissionCodes</p>
     * Operation to remove commission codes.
     */
    async deleteCommissionCodesRaw(requestParameters: DeleteCommissionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.commissionCodes) {
            queryParameters['commissionCodes'] = requestParameters.commissionCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/commissionCodes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteCommissionCodes</p>
     * Operation to remove commission codes.
     */
    async deleteCommissionCodes(requestParameters: DeleteCommissionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCommissionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteConfigBankAccounts</p>
     * Operation to remove config bank accounts.
     */
    async deleteConfigBankAccountsRaw(requestParameters: DeleteConfigBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.bankAccountID) {
            queryParameters['bankAccountID'] = requestParameters.bankAccountID;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/configBankAccounts`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteConfigBankAccounts</p>
     * Operation to remove config bank accounts.
     */
    async deleteConfigBankAccounts(requestParameters: DeleteConfigBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteConfigBankAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteStopProcessingReasons</p>
     * Operation to remove stop processing reasons.
     */
    async deleteStopProcessingReasonsRaw(requestParameters: DeleteStopProcessingReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/stopProcessingReasons`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteStopProcessingReasons</p>
     * Operation to remove stop processing reasons.
     */
    async deleteStopProcessingReasons(requestParameters: DeleteStopProcessingReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteStopProcessingReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getCommissionCode</p>
     * Operation to fetch commission code.
     */
    async getCommissionCodeRaw(requestParameters: GetCommissionCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionCodeDetail>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissionCode/{commissionCode}`.replace(`{${"commissionCode"}}`, encodeURIComponent(String(requestParameters.commissionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommissionCodeDetailFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getCommissionCode</p>
     * Operation to fetch commission code.
     */
    async getCommissionCode(requestParameters: GetCommissionCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionCodeDetail> {
        const response = await this.getCommissionCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getCommissionCodes</p>
     * Operation to fetch commission codes.
     */
    async getCommissionCodesRaw(requestParameters: GetCommissionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionCodesSummary>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.commissionCodes) {
            queryParameters['commissionCodes'] = requestParameters.commissionCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/commissionCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommissionCodesSummaryFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getCommissionCodes</p>
     * Operation to fetch commission codes.
     */
    async getCommissionCodes(requestParameters: GetCommissionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionCodesSummary> {
        const response = await this.getCommissionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getConfigBankAccounts</p>
     * Operation to fetch config bank accounts.
     */
    async getConfigBankAccountsRaw(requestParameters: GetConfigBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountsInfo>> {
        const queryParameters: any = {};

        if (requestParameters.hotels) {
            queryParameters['hotels'] = requestParameters.hotels;
        }

        if (requestParameters.bankCodes) {
            queryParameters['bankCodes'] = requestParameters.bankCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/configBankAccounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankAccountsInfoFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getConfigBankAccounts</p>
     * Operation to fetch config bank accounts.
     */
    async getConfigBankAccounts(requestParameters: GetConfigBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountsInfo> {
        const response = await this.getConfigBankAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getStopProcessingReasons</p>
     * Operation to fetch stop processing reasons.
     */
    async getStopProcessingReasonsRaw(requestParameters: GetStopProcessingReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StopProcessingReasons>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/stopProcessingReasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StopProcessingReasonsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getStopProcessingReasons</p>
     * Operation to fetch stop processing reasons.
     */
    async getStopProcessingReasons(requestParameters: GetStopProcessingReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StopProcessingReasons> {
        const response = await this.getStopProcessingReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>postCommissionCodes</p>
     * Operation to create commission codes.
     */
    async postCommissionCodesRaw(requestParameters: PostCommissionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/commissionCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutCommissionCodesRequestToJSON(requestParameters.commissionCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>postCommissionCodes</p>
     * Operation to create commission codes.
     */
    async postCommissionCodes(requestParameters: PostCommissionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCommissionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>postConfigBankAccounts</p>
     * Operation to create config bank accounts.
     */
    async postConfigBankAccountsRaw(requestParameters: PostConfigBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/configBankAccounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutConfigBankAccountsRequestToJSON(requestParameters.bankAccounts),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>postConfigBankAccounts</p>
     * Operation to create config bank accounts.
     */
    async postConfigBankAccounts(requestParameters: PostConfigBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postConfigBankAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>postStopProcessingReasons</p>
     * Operation to create stop processing reasons.
     */
    async postStopProcessingReasonsRaw(requestParameters: PostStopProcessingReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/stopProcessingReasons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutStopProcessingReasonsRequestToJSON(requestParameters.stopProcessingReasons),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>postStopProcessingReasons</p>
     * Operation to create stop processing reasons.
     */
    async postStopProcessingReasons(requestParameters: PostStopProcessingReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postStopProcessingReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putCommissionCodes</p>
     * Operation to change commission codes.
     */
    async putCommissionCodesRaw(requestParameters: PutCommissionCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/commissionCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutCommissionCodesRequestToJSON(requestParameters.commissionCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putCommissionCodes</p>
     * Operation to change commission codes.
     */
    async putCommissionCodes(requestParameters: PutCommissionCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCommissionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putConfigBankAccounts</p>
     * Operation to change config bank accounts.
     */
    async putConfigBankAccountsRaw(requestParameters: PutConfigBankAccountsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/configBankAccounts`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutConfigBankAccountsRequestToJSON(requestParameters.bankAccounts),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putConfigBankAccounts</p>
     * Operation to change config bank accounts.
     */
    async putConfigBankAccounts(requestParameters: PutConfigBankAccountsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putConfigBankAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putStopProcessingReasons</p>
     * Operation to change stop processing reasons.
     */
    async putStopProcessingReasonsRaw(requestParameters: PutStopProcessingReasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StopProcessingReasons>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/stopProcessingReasons`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutStopProcessingReasonsRequestToJSON(requestParameters.stopProcessingReasons),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StopProcessingReasonsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putStopProcessingReasons</p>
     * Operation to change stop processing reasons.
     */
    async putStopProcessingReasons(requestParameters: PutStopProcessingReasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StopProcessingReasons> {
        const response = await this.putStopProcessingReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
