"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommissionConfigApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class CommissionConfigApi extends runtime.BaseAPI {
    /**
     *  <p><strong>OperationId:</strong>deleteCommissionCodes</p>
     * Operation to remove commission codes.
     */
    deleteCommissionCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
                throw new runtime.RequiredError('hotelIds', 'Required parameter requestParameters.hotelIds was null or undefined when calling deleteCommissionCodes.');
            }
            if (requestParameters.commissionCodes === null || requestParameters.commissionCodes === undefined) {
                throw new runtime.RequiredError('commissionCodes', 'Required parameter requestParameters.commissionCodes was null or undefined when calling deleteCommissionCodes.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.commissionCodes) {
                queryParameters['commissionCodes'] = requestParameters.commissionCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/commissionCodes`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>deleteCommissionCodes</p>
     * Operation to remove commission codes.
     */
    deleteCommissionCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCommissionCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>deleteConfigBankAccounts</p>
     * Operation to remove config bank accounts.
     */
    deleteConfigBankAccountsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteConfigBankAccounts.');
            }
            if (requestParameters.bankAccountID === null || requestParameters.bankAccountID === undefined) {
                throw new runtime.RequiredError('bankAccountID', 'Required parameter requestParameters.bankAccountID was null or undefined when calling deleteConfigBankAccounts.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.bankAccountID) {
                queryParameters['bankAccountID'] = requestParameters.bankAccountID;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/configBankAccounts`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>deleteConfigBankAccounts</p>
     * Operation to remove config bank accounts.
     */
    deleteConfigBankAccounts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteConfigBankAccountsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>deleteStopProcessingReasons</p>
     * Operation to remove stop processing reasons.
     */
    deleteStopProcessingReasonsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.codes === null || requestParameters.codes === undefined) {
                throw new runtime.RequiredError('codes', 'Required parameter requestParameters.codes was null or undefined when calling deleteStopProcessingReasons.');
            }
            const queryParameters = {};
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/stopProcessingReasons`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>deleteStopProcessingReasons</p>
     * Operation to remove stop processing reasons.
     */
    deleteStopProcessingReasons(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteStopProcessingReasonsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getCommissionCode</p>
     * Operation to fetch commission code.
     */
    getCommissionCodeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.commissionCode === null || requestParameters.commissionCode === undefined) {
                throw new runtime.RequiredError('commissionCode', 'Required parameter requestParameters.commissionCode was null or undefined when calling getCommissionCode.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCommissionCode.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/commissionCode/{commissionCode}`.replace(`{${"commissionCode"}}`, encodeURIComponent(String(requestParameters.commissionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CommissionCodeDetailFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getCommissionCode</p>
     * Operation to fetch commission code.
     */
    getCommissionCode(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCommissionCodeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getCommissionCodes</p>
     * Operation to fetch commission codes.
     */
    getCommissionCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
                throw new runtime.RequiredError('hotelIds', 'Required parameter requestParameters.hotelIds was null or undefined when calling getCommissionCodes.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.commissionCodes) {
                queryParameters['commissionCodes'] = requestParameters.commissionCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/commissionCodes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CommissionCodesSummaryFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getCommissionCodes</p>
     * Operation to fetch commission codes.
     */
    getCommissionCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCommissionCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getConfigBankAccounts</p>
     * Operation to fetch config bank accounts.
     */
    getConfigBankAccountsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotels === null || requestParameters.hotels === undefined) {
                throw new runtime.RequiredError('hotels', 'Required parameter requestParameters.hotels was null or undefined when calling getConfigBankAccounts.');
            }
            const queryParameters = {};
            if (requestParameters.hotels) {
                queryParameters['hotels'] = requestParameters.hotels;
            }
            if (requestParameters.bankCodes) {
                queryParameters['bankCodes'] = requestParameters.bankCodes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/configBankAccounts`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BankAccountsInfoFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getConfigBankAccounts</p>
     * Operation to fetch config bank accounts.
     */
    getConfigBankAccounts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getConfigBankAccountsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getStopProcessingReasons</p>
     * Operation to fetch stop processing reasons.
     */
    getStopProcessingReasonsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/stopProcessingReasons`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StopProcessingReasonsFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getStopProcessingReasons</p>
     * Operation to fetch stop processing reasons.
     */
    getStopProcessingReasons(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getStopProcessingReasonsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>postCommissionCodes</p>
     * Operation to create commission codes.
     */
    postCommissionCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.commissionCodes === null || requestParameters.commissionCodes === undefined) {
                throw new runtime.RequiredError('commissionCodes', 'Required parameter requestParameters.commissionCodes was null or undefined when calling postCommissionCodes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/commissionCodes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CommissionCodesToJSON)(requestParameters.commissionCodes),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>postCommissionCodes</p>
     * Operation to create commission codes.
     */
    postCommissionCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postCommissionCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>postConfigBankAccounts</p>
     * Operation to create config bank accounts.
     */
    postConfigBankAccountsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.bankAccounts === null || requestParameters.bankAccounts === undefined) {
                throw new runtime.RequiredError('bankAccounts', 'Required parameter requestParameters.bankAccounts was null or undefined when calling postConfigBankAccounts.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/configBankAccounts`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BankAccountsToJSON)(requestParameters.bankAccounts),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>postConfigBankAccounts</p>
     * Operation to create config bank accounts.
     */
    postConfigBankAccounts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postConfigBankAccountsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>postStopProcessingReasons</p>
     * Operation to create stop processing reasons.
     */
    postStopProcessingReasonsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.stopProcessingReasons === null || requestParameters.stopProcessingReasons === undefined) {
                throw new runtime.RequiredError('stopProcessingReasons', 'Required parameter requestParameters.stopProcessingReasons was null or undefined when calling postStopProcessingReasons.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/stopProcessingReasons`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.StopProcessingReasonsToJSON)(requestParameters.stopProcessingReasons),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>postStopProcessingReasons</p>
     * Operation to create stop processing reasons.
     */
    postStopProcessingReasons(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postStopProcessingReasonsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>putCommissionCodes</p>
     * Operation to change commission codes.
     */
    putCommissionCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.commissionCodes === null || requestParameters.commissionCodes === undefined) {
                throw new runtime.RequiredError('commissionCodes', 'Required parameter requestParameters.commissionCodes was null or undefined when calling putCommissionCodes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/commissionCodes`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CommissionCodesToJSON)(requestParameters.commissionCodes),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>putCommissionCodes</p>
     * Operation to change commission codes.
     */
    putCommissionCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putCommissionCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>putConfigBankAccounts</p>
     * Operation to change config bank accounts.
     */
    putConfigBankAccountsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.bankAccounts === null || requestParameters.bankAccounts === undefined) {
                throw new runtime.RequiredError('bankAccounts', 'Required parameter requestParameters.bankAccounts was null or undefined when calling putConfigBankAccounts.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/configBankAccounts`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BankAccountsToJSON)(requestParameters.bankAccounts),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>putConfigBankAccounts</p>
     * Operation to change config bank accounts.
     */
    putConfigBankAccounts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putConfigBankAccountsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>putStopProcessingReasons</p>
     * Operation to change stop processing reasons.
     */
    putStopProcessingReasonsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.stopProcessingReasons === null || requestParameters.stopProcessingReasons === undefined) {
                throw new runtime.RequiredError('stopProcessingReasons', 'Required parameter requestParameters.stopProcessingReasons was null or undefined when calling putStopProcessingReasons.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/stopProcessingReasons`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.StopProcessingReasonsToJSON)(requestParameters.stopProcessingReasons),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StopProcessingReasonsFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>putStopProcessingReasons</p>
     * Operation to change stop processing reasons.
     */
    putStopProcessingReasons(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putStopProcessingReasonsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.CommissionConfigApi = CommissionConfigApi;
