/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { BankAccounts, BankAccountsInfo, CommissionCodeDetail, CommissionCodes, CommissionCodesSummary, Status, StopProcessingReasons } from '../models/index';
export interface DeleteCommissionCodesRequest {
    hotelIds: Array<string>;
    commissionCodes: Array<string>;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteConfigBankAccountsRequest {
    hotelId: Array<string>;
    bankAccountID: Array<number>;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteStopProcessingReasonsRequest {
    codes: Array<string>;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCommissionCodeRequest {
    commissionCode: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCommissionCodesRequest {
    hotelIds: Array<string>;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    commissionCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetConfigBankAccountsRequest {
    hotels: Array<string>;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    bankCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetStopProcessingReasonsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCommissionCodesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    commissionCodes: CommissionCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostConfigBankAccountsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    bankAccounts: BankAccounts;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostStopProcessingReasonsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    stopProcessingReasons: StopProcessingReasons;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutCommissionCodesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    commissionCodes: CommissionCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutConfigBankAccountsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    bankAccounts: BankAccounts;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutStopProcessingReasonsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    stopProcessingReasons: StopProcessingReasons;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class CommissionConfigApi extends runtime.BaseAPI {
    /**
     *  <p><strong>OperationId:</strong>deleteCommissionCodes</p>
     * Operation to remove commission codes.
     */
    deleteCommissionCodesRaw(requestParameters: DeleteCommissionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>deleteCommissionCodes</p>
     * Operation to remove commission codes.
     */
    deleteCommissionCodes(requestParameters: DeleteCommissionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>deleteConfigBankAccounts</p>
     * Operation to remove config bank accounts.
     */
    deleteConfigBankAccountsRaw(requestParameters: DeleteConfigBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>deleteConfigBankAccounts</p>
     * Operation to remove config bank accounts.
     */
    deleteConfigBankAccounts(requestParameters: DeleteConfigBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>deleteStopProcessingReasons</p>
     * Operation to remove stop processing reasons.
     */
    deleteStopProcessingReasonsRaw(requestParameters: DeleteStopProcessingReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>deleteStopProcessingReasons</p>
     * Operation to remove stop processing reasons.
     */
    deleteStopProcessingReasons(requestParameters: DeleteStopProcessingReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>getCommissionCode</p>
     * Operation to fetch commission code.
     */
    getCommissionCodeRaw(requestParameters: GetCommissionCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionCodeDetail>>;
    /**
     *  <p><strong>OperationId:</strong>getCommissionCode</p>
     * Operation to fetch commission code.
     */
    getCommissionCode(requestParameters: GetCommissionCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionCodeDetail>;
    /**
     *  <p><strong>OperationId:</strong>getCommissionCodes</p>
     * Operation to fetch commission codes.
     */
    getCommissionCodesRaw(requestParameters: GetCommissionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionCodesSummary>>;
    /**
     *  <p><strong>OperationId:</strong>getCommissionCodes</p>
     * Operation to fetch commission codes.
     */
    getCommissionCodes(requestParameters: GetCommissionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionCodesSummary>;
    /**
     *  <p><strong>OperationId:</strong>getConfigBankAccounts</p>
     * Operation to fetch config bank accounts.
     */
    getConfigBankAccountsRaw(requestParameters: GetConfigBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountsInfo>>;
    /**
     *  <p><strong>OperationId:</strong>getConfigBankAccounts</p>
     * Operation to fetch config bank accounts.
     */
    getConfigBankAccounts(requestParameters: GetConfigBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountsInfo>;
    /**
     *  <p><strong>OperationId:</strong>getStopProcessingReasons</p>
     * Operation to fetch stop processing reasons.
     */
    getStopProcessingReasonsRaw(requestParameters: GetStopProcessingReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StopProcessingReasons>>;
    /**
     *  <p><strong>OperationId:</strong>getStopProcessingReasons</p>
     * Operation to fetch stop processing reasons.
     */
    getStopProcessingReasons(requestParameters: GetStopProcessingReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StopProcessingReasons>;
    /**
     *  <p><strong>OperationId:</strong>postCommissionCodes</p>
     * Operation to create commission codes.
     */
    postCommissionCodesRaw(requestParameters: PostCommissionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>postCommissionCodes</p>
     * Operation to create commission codes.
     */
    postCommissionCodes(requestParameters: PostCommissionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>postConfigBankAccounts</p>
     * Operation to create config bank accounts.
     */
    postConfigBankAccountsRaw(requestParameters: PostConfigBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>postConfigBankAccounts</p>
     * Operation to create config bank accounts.
     */
    postConfigBankAccounts(requestParameters: PostConfigBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>postStopProcessingReasons</p>
     * Operation to create stop processing reasons.
     */
    postStopProcessingReasonsRaw(requestParameters: PostStopProcessingReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>postStopProcessingReasons</p>
     * Operation to create stop processing reasons.
     */
    postStopProcessingReasons(requestParameters: PostStopProcessingReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>putCommissionCodes</p>
     * Operation to change commission codes.
     */
    putCommissionCodesRaw(requestParameters: PutCommissionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>putCommissionCodes</p>
     * Operation to change commission codes.
     */
    putCommissionCodes(requestParameters: PutCommissionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>putConfigBankAccounts</p>
     * Operation to change config bank accounts.
     */
    putConfigBankAccountsRaw(requestParameters: PutConfigBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>putConfigBankAccounts</p>
     * Operation to change config bank accounts.
     */
    putConfigBankAccounts(requestParameters: PutConfigBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>putStopProcessingReasons</p>
     * Operation to change stop processing reasons.
     */
    putStopProcessingReasonsRaw(requestParameters: PutStopProcessingReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StopProcessingReasons>>;
    /**
     *  <p><strong>OperationId:</strong>putStopProcessingReasons</p>
     * Operation to change stop processing reasons.
     */
    putStopProcessingReasons(requestParameters: PutStopProcessingReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StopProcessingReasons>;
}
