/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdjustmentCodes,
  ArticlesInfo,
  AuthorizerGroups,
  CalculatedPosting,
  CashierNumber,
  CashiersDetails,
  ChangeCompTypesRequest,
  ChangeFolioTypeLegendMappingConfigRequest,
  CompTypesDetails,
  CompTypesStatus,
  CurrencyExchangeServiceTaxes,
  DailyPlanCodes,
  ExceptionDetailType,
  ExchangeRateType,
  ExpenseArrangementCodes,
  FiscalFolioParameters,
  FolioTypeLegendMappingConfigStatus,
  FolioTypeLegendMappingsConfigDetails,
  HotelTransactionCode,
  HotelTransactionCodes,
  HotelTransactionSubgroups,
  OperaControlSequences,
  PaymentMethodsInfo,
  PostAuthorizerGroupsRequest,
  PostCompTypesRequest,
  PostFolioTypeLegendMappingConfigRequest,
  PostTemplateTransactionSubgroupsRequest,
  PostTransactionGeneratesRequest,
  PostTransactionGroupsRequest,
  PutAdjustmentCodesRequest,
  PutArticlesRequest,
  PutAuthorizationConfigRuleRequest,
  PutAuthorizerGroupsRequest,
  PutCashiersRequest,
  PutCurrencyExchangeServiceTaxesRequest,
  PutDailyPlanCodesRequest,
  PutExpenseArrangementCodesRequest,
  PutFiscalFolioParametersRequest,
  PutTemplateTransactionCodesRequest,
  PutTransactionCodesRequest,
  RevenueBucketCodes,
  RoutingInstructions,
  Status,
  TaxTypes,
  TemplateTransactionCodes,
  TemplateTransactionGroups,
  TemplateTransactionSubgroups,
  TransactionCodes,
  TransactionGroups,
} from '../models';
import {
    AdjustmentCodesFromJSON,
    AdjustmentCodesToJSON,
    ArticlesInfoFromJSON,
    ArticlesInfoToJSON,
    AuthorizerGroupsFromJSON,
    AuthorizerGroupsToJSON,
    CalculatedPostingFromJSON,
    CalculatedPostingToJSON,
    CashierNumberFromJSON,
    CashierNumberToJSON,
    CashiersDetailsFromJSON,
    CashiersDetailsToJSON,
    ChangeCompTypesRequestFromJSON,
    ChangeCompTypesRequestToJSON,
    ChangeFolioTypeLegendMappingConfigRequestFromJSON,
    ChangeFolioTypeLegendMappingConfigRequestToJSON,
    CompTypesDetailsFromJSON,
    CompTypesDetailsToJSON,
    CompTypesStatusFromJSON,
    CompTypesStatusToJSON,
    CurrencyExchangeServiceTaxesFromJSON,
    CurrencyExchangeServiceTaxesToJSON,
    DailyPlanCodesFromJSON,
    DailyPlanCodesToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    ExchangeRateTypeFromJSON,
    ExchangeRateTypeToJSON,
    ExpenseArrangementCodesFromJSON,
    ExpenseArrangementCodesToJSON,
    FiscalFolioParametersFromJSON,
    FiscalFolioParametersToJSON,
    FolioTypeLegendMappingConfigStatusFromJSON,
    FolioTypeLegendMappingConfigStatusToJSON,
    FolioTypeLegendMappingsConfigDetailsFromJSON,
    FolioTypeLegendMappingsConfigDetailsToJSON,
    HotelTransactionCodeFromJSON,
    HotelTransactionCodeToJSON,
    HotelTransactionCodesFromJSON,
    HotelTransactionCodesToJSON,
    HotelTransactionSubgroupsFromJSON,
    HotelTransactionSubgroupsToJSON,
    OperaControlSequencesFromJSON,
    OperaControlSequencesToJSON,
    PaymentMethodsInfoFromJSON,
    PaymentMethodsInfoToJSON,
    PostAuthorizerGroupsRequestFromJSON,
    PostAuthorizerGroupsRequestToJSON,
    PostCompTypesRequestFromJSON,
    PostCompTypesRequestToJSON,
    PostFolioTypeLegendMappingConfigRequestFromJSON,
    PostFolioTypeLegendMappingConfigRequestToJSON,
    PostTemplateTransactionSubgroupsRequestFromJSON,
    PostTemplateTransactionSubgroupsRequestToJSON,
    PostTransactionGeneratesRequestFromJSON,
    PostTransactionGeneratesRequestToJSON,
    PostTransactionGroupsRequestFromJSON,
    PostTransactionGroupsRequestToJSON,
    PutAdjustmentCodesRequestFromJSON,
    PutAdjustmentCodesRequestToJSON,
    PutArticlesRequestFromJSON,
    PutArticlesRequestToJSON,
    PutAuthorizationConfigRuleRequestFromJSON,
    PutAuthorizationConfigRuleRequestToJSON,
    PutAuthorizerGroupsRequestFromJSON,
    PutAuthorizerGroupsRequestToJSON,
    PutCashiersRequestFromJSON,
    PutCashiersRequestToJSON,
    PutCurrencyExchangeServiceTaxesRequestFromJSON,
    PutCurrencyExchangeServiceTaxesRequestToJSON,
    PutDailyPlanCodesRequestFromJSON,
    PutDailyPlanCodesRequestToJSON,
    PutExpenseArrangementCodesRequestFromJSON,
    PutExpenseArrangementCodesRequestToJSON,
    PutFiscalFolioParametersRequestFromJSON,
    PutFiscalFolioParametersRequestToJSON,
    PutTemplateTransactionCodesRequestFromJSON,
    PutTemplateTransactionCodesRequestToJSON,
    PutTransactionCodesRequestFromJSON,
    PutTransactionCodesRequestToJSON,
    RevenueBucketCodesFromJSON,
    RevenueBucketCodesToJSON,
    RoutingInstructionsFromJSON,
    RoutingInstructionsToJSON,
    StatusFromJSON,
    StatusToJSON,
    TaxTypesFromJSON,
    TaxTypesToJSON,
    TemplateTransactionCodesFromJSON,
    TemplateTransactionCodesToJSON,
    TemplateTransactionGroupsFromJSON,
    TemplateTransactionGroupsToJSON,
    TemplateTransactionSubgroupsFromJSON,
    TemplateTransactionSubgroupsToJSON,
    TransactionCodesFromJSON,
    TransactionCodesToJSON,
    TransactionGroupsFromJSON,
    TransactionGroupsToJSON,
} from '../models';

export interface CalculatePostingRequest {
    transactionCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    postingAmount?: number;
    taxType?: string;
    guestBalance?: number;
    roomType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeCompTypesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    compTypesToBeChanged?: ChangeCompTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeFolioTypeLegendMappingConfigOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioTypeLegendMappingConfigToBeChanged?: ChangeFolioTypeLegendMappingConfigRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAdjustmentCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    adjustmentCode?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteArticlesRequest {
    hotelId?: string;
    articleCodes?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    articleHotelId?: Array<string>;
    inactive?: Array<boolean>;
    orderSequence?: Array<number>;
    description?: Array<string>;
    transactionCode?: Array<string>;
    amount?: number;
    currencyCode?: string;
    availableForPostIt?: boolean;
    color?: DeleteArticlesColorEnum;
    universalProductCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAuthorizationConfigRuleRequest {
    hotelId?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomType?: Array<string>;
    roomClassHotelId?: string;
    roomClassCode?: string;
    sourceCodeHotelId?: string;
    sourceCode?: string;
    rateCategory?: string;
    rateCode?: Array<string>;
    guaranteeCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAuthorizerGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    authorizerGroup?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCurrencyExchangeServiceTaxesRequest {
    hotelId?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    currencyExchangeServiceTaxCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteExpenseArrangementCodesRequest {
    hotelId?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteFiscalFolioParametersRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: Array<string>;
    partner?: Array<string>;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAdjustmentCodesRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    adjustmentCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetArticlesRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionCodes?: Array<string>;
    articleCodes?: Array<string>;
    universalProductCode?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAuthorizerGroupsRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    authorizerGroupsCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAvailableCashierNumberRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCashiersRequest {
    cashierIDs?: Array<number>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    name?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCompTypesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    compTypeCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCurrencyExchangeServiceTaxesRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    codes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDailyPlanCodesRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeTransactionCodes?: boolean;
    arrangementCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetExpenseArrangementCodesRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeTransactionCodes?: boolean;
    arrangementCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFiscalFolioParametersRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    codes?: Array<string>;
    wildCard?: string;
    internal?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFolioTypeLegendMappingsConfigRequest {
    hotelId?: string;
    legendCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFuturePastExchangeRatesRequest {
    currencyCode?: string;
    hotelId?: string;
    exchangeTypes?: GetFuturePastExchangeRatesExchangeTypesEnum;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    dateRangeStart?: Date;
    dateRangeEnd?: Date;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOperaControlSequencesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    countryCode?: string;
    code?: Array<string>;
    hotelCode?: Array<string>;
    fetchInstruction?: Set<GetOperaControlSequencesFetchInstructionEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPaymentMethodsRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    transactionCodes?: Array<string>;
    paymentMethods?: Array<string>;
    fetchInstructions?: Set<GetPaymentMethodsFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRevenueBucketCodesRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    trxCodeArrangementCodes?: Array<string>;
    wildCard?: string;
    trxCodeArrangementType?: GetRevenueBucketCodesTrxCodeArrangementTypeEnum;
    code?: Array<string>;
    revenueBucketTypesWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoutingInstructionsRequest {
    hotelId?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    trxCodeArrangementCode?: Array<string>;
    wildCard?: string;
    compAccounting?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTaxTypesRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taxTypeCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateTransactionCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    compTransactionCodes?: boolean;
    includeInactive?: boolean;
    transactionGroupCodes?: Array<string>;
    transactionSubgroupsCodes?: Array<string>;
    transactionCodes?: Array<string>;
    wildCard?: string;
    description?: string;
    brandCode?: string;
    universalProductCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateTransactionGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionGroupCodes?: Array<string>;
    wildCard?: string;
    transactionGroupType?: GetTemplateTransactionGroupsTransactionGroupTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateTransactionSubgroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionGroupCodes?: Array<string>;
    transactionSubgroupsCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionCodeRequest {
    transactionCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetTransactionCodeFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionCodesRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    compTransactionCodes?: boolean;
    includeInactive?: boolean;
    transactionGroupCodes?: Array<string>;
    transactionSubgroupsCodes?: Array<string>;
    transactionCodes?: Array<string>;
    wildCard?: string;
    description?: string;
    brandCode?: string;
    universalProductCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionGroupsRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionGroupCodes?: Array<string>;
    wildCard?: string;
    transactionGroupType?: GetTransactionGroupsTransactionGroupTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionSubgroupsRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionGroupCodes?: Array<string>;
    transactionSubgroupsCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAdjustmentCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    adjustmentCodes?: PutAdjustmentCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostArticlesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    articles?: PutArticlesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAuthorizationConfigRuleRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    authorizationConfigRules?: PutAuthorizationConfigRuleRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAuthorizerGroupsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    authorizerGroups?: PostAuthorizerGroupsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCashiersRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cashiers?: PutCashiersRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCompTypesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    compTypesCriteria?: PostCompTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCurrencyExchangeServiceTaxesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    currencyExchangeServiceTaxes?: PutCurrencyExchangeServiceTaxesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostExpenseArrangementCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    expenseArrangementCodes?: PutExpenseArrangementCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostFolioTypeLegendMappingConfigOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioTypeLegendMappingConfigCriteria?: PostFolioTypeLegendMappingConfigRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateTransactionCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateTransactionCodes?: PutTemplateTransactionCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateTransactionSubgroupsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateTransactionSubgroups?: PostTemplateTransactionSubgroupsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTransactionCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelTransactionCodes?: PutTransactionCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTransactionGeneratesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelTransactionGenerates?: PostTransactionGeneratesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTransactionGroupsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionGroups?: PostTransactionGroupsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAdjustmentCodesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    adjustmentCodes?: PutAdjustmentCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutArticlesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    articles?: PutArticlesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAuthorizationConfigRuleOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    authorizationConfigRules?: PutAuthorizationConfigRuleRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAuthorizerGroupsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    authorizerGroupsToChange?: PutAuthorizerGroupsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCashiersOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cashiers?: PutCashiersRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCurrencyExchangeServiceTaxesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    currencyExchangeServiceTaxes?: PutCurrencyExchangeServiceTaxesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutDailyPlanCodesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    dailyPlanCodes?: PutDailyPlanCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutExpenseArrangementCodesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    expenseArrangementCodes?: PutExpenseArrangementCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutFiscalFolioParametersOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fiscalFolioParameters?: PutFiscalFolioParametersRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTemplateTransactionCodesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateTransactionCodes?: PutTemplateTransactionCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTransactionCodesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelTransactionCodes?: PutTransactionCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveCompTypesRequest {
    compTypesCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveFolioTypeLegendMappingConfigRequest {
    legendCode?: string;
    folioType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class CashieringConfigApi extends runtime.BaseAPI {

    /**
     * Operation to test posting amount. <p><strong>OperationId:</strong>calculatePosting</p>
     * Operation to CalculatePosting.
     */
    async calculatePostingRaw(requestParameters: CalculatePostingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CalculatedPosting>> {
        const queryParameters: any = {};

        if (requestParameters.postingAmount !== undefined) {
            queryParameters['postingAmount'] = requestParameters.postingAmount;
        }

        if (requestParameters.taxType !== undefined) {
            queryParameters['taxType'] = requestParameters.taxType;
        }

        if (requestParameters.guestBalance !== undefined) {
            queryParameters['guestBalance'] = requestParameters.guestBalance;
        }

        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactionCodes/{transactionCode}/chargeSimulations`.replace(`{${"transactionCode"}}`, encodeURIComponent(String(requestParameters.transactionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CalculatedPostingFromJSON(jsonValue));
    }

    /**
     * Operation to test posting amount. <p><strong>OperationId:</strong>calculatePosting</p>
     * Operation to CalculatePosting.
     */
    async calculatePosting(requestParameters: CalculatePostingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CalculatedPosting> {
        const response = await this.calculatePostingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to Change Comp Types. <p><strong>OperationId:</strong>changeCompTypes</p>
     * Operation to Change Comp Types.
     */
    async changeCompTypesRaw(requestParameters: ChangeCompTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompTypesStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/compTypes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeCompTypesRequestToJSON(requestParameters.compTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompTypesStatusFromJSON(jsonValue));
    }

    /**
     * Operation to Change Comp Types. <p><strong>OperationId:</strong>changeCompTypes</p>
     * Operation to Change Comp Types.
     */
    async changeCompTypes(requestParameters: ChangeCompTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompTypesStatus> {
        const response = await this.changeCompTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change folio type legend mappings config. <p><strong>OperationId:</strong>changeFolioTypeLegendMappingConfig</p>
     * Operation to change folio type legend mappings config.
     */
    async changeFolioTypeLegendMappingConfigRaw(requestParameters: ChangeFolioTypeLegendMappingConfigOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolioTypeLegendMappingConfigStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/folioTypeLegendMappings`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeFolioTypeLegendMappingConfigRequestToJSON(requestParameters.folioTypeLegendMappingConfigToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolioTypeLegendMappingConfigStatusFromJSON(jsonValue));
    }

    /**
     * Operation to change folio type legend mappings config. <p><strong>OperationId:</strong>changeFolioTypeLegendMappingConfig</p>
     * Operation to change folio type legend mappings config.
     */
    async changeFolioTypeLegendMappingConfig(requestParameters: ChangeFolioTypeLegendMappingConfigOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolioTypeLegendMappingConfigStatus> {
        const response = await this.changeFolioTypeLegendMappingConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove Adjustment Codes. <p><strong>OperationId:</strong>deleteAdjustmentCodes</p>
     * Operation to delete AdjustmentCodes.
     */
    async deleteAdjustmentCodesRaw(requestParameters: DeleteAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.adjustmentCode !== undefined) {
            queryParameters['adjustmentCode'] = requestParameters.adjustmentCode;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelAdjustmentCodes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove Adjustment Codes. <p><strong>OperationId:</strong>deleteAdjustmentCodes</p>
     * Operation to delete AdjustmentCodes.
     */
    async deleteAdjustmentCodes(requestParameters: DeleteAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAdjustmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove articles. <p><strong>OperationId:</strong>deleteArticles</p>
     * Operation to delete Articles.
     */
    async deleteArticlesRaw(requestParameters: DeleteArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.articleCodes) {
            queryParameters['articleCodes'] = requestParameters.articleCodes;
        }

        if (requestParameters.articleHotelId) {
            queryParameters['articleHotelId'] = requestParameters.articleHotelId;
        }

        if (requestParameters.inactive) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        if (requestParameters.orderSequence) {
            queryParameters['orderSequence'] = requestParameters.orderSequence;
        }

        if (requestParameters.description) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.transactionCode) {
            queryParameters['transactionCode'] = requestParameters.transactionCode;
        }

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        if (requestParameters.availableForPostIt !== undefined) {
            queryParameters['availableForPostIt'] = requestParameters.availableForPostIt;
        }

        if (requestParameters.color !== undefined) {
            queryParameters['color'] = requestParameters.color;
        }

        if (requestParameters.universalProductCode) {
            queryParameters['universalProductCode'] = requestParameters.universalProductCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/articles`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove articles. <p><strong>OperationId:</strong>deleteArticles</p>
     * Operation to delete Articles.
     */
    async deleteArticles(requestParameters: DeleteArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteArticlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteAuthorizationConfigRule</p>
     * Operation to delete AuthorizationConfigRule.
     */
    async deleteAuthorizationConfigRuleRaw(requestParameters: DeleteAuthorizationConfigRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.roomClassHotelId !== undefined) {
            queryParameters['roomClassHotelId'] = requestParameters.roomClassHotelId;
        }

        if (requestParameters.roomClassCode !== undefined) {
            queryParameters['roomClassCode'] = requestParameters.roomClassCode;
        }

        if (requestParameters.sourceCodeHotelId !== undefined) {
            queryParameters['sourceCodeHotelId'] = requestParameters.sourceCodeHotelId;
        }

        if (requestParameters.sourceCode !== undefined) {
            queryParameters['sourceCode'] = requestParameters.sourceCode;
        }

        if (requestParameters.rateCategory !== undefined) {
            queryParameters['rateCategory'] = requestParameters.rateCategory;
        }

        if (requestParameters.rateCode) {
            queryParameters['rateCode'] = requestParameters.rateCode;
        }

        if (requestParameters.guaranteeCode) {
            queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/authorizationConfigRule`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteAuthorizationConfigRule</p>
     * Operation to delete AuthorizationConfigRule.
     */
    async deleteAuthorizationConfigRule(requestParameters: DeleteAuthorizationConfigRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAuthorizationConfigRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove Authorizer Groups. <p><strong>OperationId:</strong>deleteAuthorizerGroups</p>
     * Operation to delete AuthorizerGroups.
     */
    async deleteAuthorizerGroupsRaw(requestParameters: DeleteAuthorizerGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.authorizerGroup !== undefined) {
            queryParameters['authorizerGroup'] = requestParameters.authorizerGroup;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/authorizerGroups`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove Authorizer Groups. <p><strong>OperationId:</strong>deleteAuthorizerGroups</p>
     * Operation to delete AuthorizerGroups.
     */
    async deleteAuthorizerGroups(requestParameters: DeleteAuthorizerGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAuthorizerGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove currency exchange service taxes. <p><strong>OperationId:</strong>deleteCurrencyExchangeServiceTaxes</p>
     * Operation to delete CurrencyExchangeServiceTaxes.
     */
    async deleteCurrencyExchangeServiceTaxesRaw(requestParameters: DeleteCurrencyExchangeServiceTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.currencyExchangeServiceTaxCode) {
            queryParameters['currencyExchangeServiceTaxCode'] = requestParameters.currencyExchangeServiceTaxCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/currencyExchangeServiceTaxes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove currency exchange service taxes. <p><strong>OperationId:</strong>deleteCurrencyExchangeServiceTaxes</p>
     * Operation to delete CurrencyExchangeServiceTaxes.
     */
    async deleteCurrencyExchangeServiceTaxes(requestParameters: DeleteCurrencyExchangeServiceTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCurrencyExchangeServiceTaxesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteExpenseArrangementCodes</p>
     * Operation to delete ExpenseArrangementCodes.
     */
    async deleteExpenseArrangementCodesRaw(requestParameters: DeleteExpenseArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/expenseArrangementCodes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteExpenseArrangementCodes</p>
     * Operation to delete ExpenseArrangementCodes.
     */
    async deleteExpenseArrangementCodes(requestParameters: DeleteExpenseArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteExpenseArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove Fiscal Folio Parameters. <p><strong>OperationId:</strong>deleteFiscalFolioParameters</p>
     * Operation to delete FiscalFolioParameters.
     */
    async deleteFiscalFolioParametersRaw(requestParameters: DeleteFiscalFolioParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.partner) {
            queryParameters['partner'] = requestParameters.partner;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalFolioParameters`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove Fiscal Folio Parameters. <p><strong>OperationId:</strong>deleteFiscalFolioParameters</p>
     * Operation to delete FiscalFolioParameters.
     */
    async deleteFiscalFolioParameters(requestParameters: DeleteFiscalFolioParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteFiscalFolioParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Adjustment Codes. <p><strong>OperationId:</strong>getAdjustmentCodes</p>
     * Operation to fetch AdjustmentCodes.
     */
    async getAdjustmentCodesRaw(requestParameters: GetAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdjustmentCodes>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.adjustmentCodes) {
            queryParameters['adjustmentCodes'] = requestParameters.adjustmentCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelAdjustmentCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdjustmentCodesFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Adjustment Codes. <p><strong>OperationId:</strong>getAdjustmentCodes</p>
     * Operation to fetch AdjustmentCodes.
     */
    async getAdjustmentCodes(requestParameters: GetAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdjustmentCodes> {
        const response = await this.getAdjustmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return articles for one or multiple properties based on search criteria such as hotelIds, transactionCodes, articleCodes, etc. One transaction code can sometimes serve as an umbrella for multiple articles, which can be posted using that transaction code.  For example, a single mini bar food transaction code might cover potato chips, crackers, peanuts, pretzels, and so on.<p><strong>OperationId:</strong>getArticles</p>
     * Get articles
     */
    async getArticlesRaw(requestParameters: GetArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArticlesInfo>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.transactionCodes) {
            queryParameters['transactionCodes'] = requestParameters.transactionCodes;
        }

        if (requestParameters.articleCodes) {
            queryParameters['articleCodes'] = requestParameters.articleCodes;
        }

        if (requestParameters.universalProductCode !== undefined) {
            queryParameters['universalProductCode'] = requestParameters.universalProductCode;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/articles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticlesInfoFromJSON(jsonValue));
    }

    /**
     * Use this API to return articles for one or multiple properties based on search criteria such as hotelIds, transactionCodes, articleCodes, etc. One transaction code can sometimes serve as an umbrella for multiple articles, which can be posted using that transaction code.  For example, a single mini bar food transaction code might cover potato chips, crackers, peanuts, pretzels, and so on.<p><strong>OperationId:</strong>getArticles</p>
     * Get articles
     */
    async getArticles(requestParameters: GetArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArticlesInfo> {
        const response = await this.getArticlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Authorizer Groups. <p><strong>OperationId:</strong>getAuthorizerGroups</p>
     * Operation to fetch AuthorizerGroups.
     */
    async getAuthorizerGroupsRaw(requestParameters: GetAuthorizerGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizerGroups>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.authorizerGroupsCodes) {
            queryParameters['authorizerGroupsCodes'] = requestParameters.authorizerGroupsCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/authorizerGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorizerGroupsFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Authorizer Groups. <p><strong>OperationId:</strong>getAuthorizerGroups</p>
     * Operation to fetch AuthorizerGroups.
     */
    async getAuthorizerGroups(requestParameters: GetAuthorizerGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizerGroups> {
        const response = await this.getAuthorizerGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The operation returns a next available Cashier Number to be used while creating a new Cashier. <p><strong>OperationId:</strong>getAvailableCashierNumber</p>
     * Operation to fetch AvailableCashierNumber.
     */
    async getAvailableCashierNumberRaw(requestParameters: GetAvailableCashierNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashierNumber>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cashiers/nextAvailable`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashierNumberFromJSON(jsonValue));
    }

    /**
     * The operation returns a next available Cashier Number to be used while creating a new Cashier. <p><strong>OperationId:</strong>getAvailableCashierNumber</p>
     * Operation to fetch AvailableCashierNumber.
     */
    async getAvailableCashierNumber(requestParameters: GetAvailableCashierNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashierNumber> {
        const response = await this.getAvailableCashierNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return Cashier information based on search criteria such as cashierIDs, limit, name. <p><strong>OperationId:</strong>getCashiers</p>
     * Get cashiers
     */
    async getCashiersRaw(requestParameters: GetCashiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashiersDetails>> {
        const queryParameters: any = {};

        if (requestParameters.cashierIDs) {
            queryParameters['cashierIDs'] = requestParameters.cashierIDs;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cashierDetails/cashiers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashiersDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to return Cashier information based on search criteria such as cashierIDs, limit, name. <p><strong>OperationId:</strong>getCashiers</p>
     * Get cashiers
     */
    async getCashiers(requestParameters: GetCashiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashiersDetails> {
        const response = await this.getCashiersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to Fetch Comp TYpes. <p><strong>OperationId:</strong>getCompTypes</p>
     * Operation to Fetch Comp Types.
     */
    async getCompTypesRaw(requestParameters: GetCompTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompTypesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.compTypeCode !== undefined) {
            queryParameters['compTypeCode'] = requestParameters.compTypeCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/compTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Operation to Fetch Comp TYpes. <p><strong>OperationId:</strong>getCompTypes</p>
     * Operation to Fetch Comp Types.
     */
    async getCompTypes(requestParameters: GetCompTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompTypesDetails> {
        const response = await this.getCompTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch currency exchange service taxes. <p><strong>OperationId:</strong>getCurrencyExchangeServiceTaxes</p>
     * Operation to fetch CurrencyExchangeServiceTaxes.
     */
    async getCurrencyExchangeServiceTaxesRaw(requestParameters: GetCurrencyExchangeServiceTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyExchangeServiceTaxes>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/currencyExchangeServiceTaxes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencyExchangeServiceTaxesFromJSON(jsonValue));
    }

    /**
     * Operation to fetch currency exchange service taxes. <p><strong>OperationId:</strong>getCurrencyExchangeServiceTaxes</p>
     * Operation to fetch CurrencyExchangeServiceTaxes.
     */
    async getCurrencyExchangeServiceTaxes(requestParameters: GetCurrencyExchangeServiceTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyExchangeServiceTaxes> {
        const response = await this.getCurrencyExchangeServiceTaxesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getDailyPlanCodes</p>
     * Operation to fetch DailyPlanCodes.
     */
    async getDailyPlanCodesRaw(requestParameters: GetDailyPlanCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DailyPlanCodes>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.includeTransactionCodes !== undefined) {
            queryParameters['includeTransactionCodes'] = requestParameters.includeTransactionCodes;
        }

        if (requestParameters.arrangementCodes) {
            queryParameters['arrangementCodes'] = requestParameters.arrangementCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/dailyPlanCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DailyPlanCodesFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getDailyPlanCodes</p>
     * Operation to fetch DailyPlanCodes.
     */
    async getDailyPlanCodes(requestParameters: GetDailyPlanCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DailyPlanCodes> {
        const response = await this.getDailyPlanCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getExpenseArrangementCodes</p>
     * Operation to fetch ExpenseArrangementCodes.
     */
    async getExpenseArrangementCodesRaw(requestParameters: GetExpenseArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpenseArrangementCodes>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.includeTransactionCodes !== undefined) {
            queryParameters['includeTransactionCodes'] = requestParameters.includeTransactionCodes;
        }

        if (requestParameters.arrangementCodes) {
            queryParameters['arrangementCodes'] = requestParameters.arrangementCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/expenseArrangementCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseArrangementCodesFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getExpenseArrangementCodes</p>
     * Operation to fetch ExpenseArrangementCodes.
     */
    async getExpenseArrangementCodes(requestParameters: GetExpenseArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpenseArrangementCodes> {
        const response = await this.getExpenseArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Fiscal Folio Parameters. <p><strong>OperationId:</strong>getFiscalFolioParameters</p>
     * Operation to fetch FiscalFolioParameters.
     */
    async getFiscalFolioParametersRaw(requestParameters: GetFiscalFolioParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FiscalFolioParameters>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.internal !== undefined) {
            queryParameters['internal'] = requestParameters.internal;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalFolioParameters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FiscalFolioParametersFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Fiscal Folio Parameters. <p><strong>OperationId:</strong>getFiscalFolioParameters</p>
     * Operation to fetch FiscalFolioParameters.
     */
    async getFiscalFolioParameters(requestParameters: GetFiscalFolioParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FiscalFolioParameters> {
        const response = await this.getFiscalFolioParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch folio type legend mappings config. <p><strong>OperationId:</strong>getFolioTypeLegendMappingsConfig</p>
     * Operation to fetch folio type legend mappings config.
     */
    async getFolioTypeLegendMappingsConfigRaw(requestParameters: GetFolioTypeLegendMappingsConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolioTypeLegendMappingsConfigDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.legendCode !== undefined) {
            queryParameters['legendCode'] = requestParameters.legendCode;
        }

        if (requestParameters.folioType !== undefined) {
            queryParameters['folioType'] = requestParameters.folioType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/folioTypeLegendMappings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolioTypeLegendMappingsConfigDetailsFromJSON(jsonValue));
    }

    /**
     * Operation to fetch folio type legend mappings config. <p><strong>OperationId:</strong>getFolioTypeLegendMappingsConfig</p>
     * Operation to fetch folio type legend mappings config.
     */
    async getFolioTypeLegendMappingsConfig(requestParameters: GetFolioTypeLegendMappingsConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolioTypeLegendMappingsConfigDetails> {
        const response = await this.getFolioTypeLegendMappingsConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to Fetch Future Past Exchange Rates. <p><strong>OperationId:</strong>getFuturePastExchangeRates</p>
     * Operation to fetch FuturePastExchangeRates.
     */
    async getFuturePastExchangeRatesRaw(requestParameters: GetFuturePastExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExchangeRateType>>> {
        const queryParameters: any = {};

        if (requestParameters.exchangeTypes !== undefined) {
            queryParameters['exchangeTypes'] = requestParameters.exchangeTypes;
        }

        if (requestParameters.dateRangeStart !== undefined) {
            queryParameters['dateRangeStart'] = (requestParameters.dateRangeStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.dateRangeEnd !== undefined) {
            queryParameters['dateRangeEnd'] = (requestParameters.dateRangeEnd as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/exchangeRates/{currencyCode}`.replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExchangeRateTypeFromJSON));
    }

    /**
     * Operation to Fetch Future Past Exchange Rates. <p><strong>OperationId:</strong>getFuturePastExchangeRates</p>
     * Operation to fetch FuturePastExchangeRates.
     */
    async getFuturePastExchangeRates(requestParameters: GetFuturePastExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExchangeRateType>> {
        const response = await this.getFuturePastExchangeRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Opera Document Sequences. <p><strong>OperationId:</strong>getOperaControlSequences</p>
     * Operation to fetch OperaControlSequences.
     */
    async getOperaControlSequencesRaw(requestParameters: GetOperaControlSequencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperaControlSequences>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.countryCode !== undefined) {
            queryParameters['countryCode'] = requestParameters.countryCode;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.hotelCode) {
            queryParameters['HotelCode'] = requestParameters.hotelCode;
        }

        if (requestParameters.fetchInstruction) {
            queryParameters['fetchInstruction'] = requestParameters.fetchInstruction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/operaControlSequences`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OperaControlSequencesFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Opera Document Sequences. <p><strong>OperationId:</strong>getOperaControlSequences</p>
     * Operation to fetch OperaControlSequences.
     */
    async getOperaControlSequences(requestParameters: GetOperaControlSequencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperaControlSequences> {
        const response = await this.getOperaControlSequencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch payment methods. <p><strong>OperationId:</strong>getPaymentMethods</p>
     * Operation to fetch PaymentMethods.
     */
    async getPaymentMethodsRaw(requestParameters: GetPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentMethodsInfo>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.transactionCodes) {
            queryParameters['transactionCodes'] = requestParameters.transactionCodes;
        }

        if (requestParameters.paymentMethods) {
            queryParameters['paymentMethods'] = requestParameters.paymentMethods;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelPaymentMethods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentMethodsInfoFromJSON(jsonValue));
    }

    /**
     * Operation to fetch payment methods. <p><strong>OperationId:</strong>getPaymentMethods</p>
     * Operation to fetch PaymentMethods.
     */
    async getPaymentMethods(requestParameters: GetPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentMethodsInfo> {
        const response = await this.getPaymentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Revenue Bucket Codes. <p><strong>OperationId:</strong>getRevenueBucketCodes</p>
     * Operation to fetch RevenueBucketCodes.
     */
    async getRevenueBucketCodesRaw(requestParameters: GetRevenueBucketCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RevenueBucketCodes>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.trxCodeArrangementCodes) {
            queryParameters['trxCodeArrangementCodes'] = requestParameters.trxCodeArrangementCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.trxCodeArrangementType !== undefined) {
            queryParameters['trxCodeArrangementType'] = requestParameters.trxCodeArrangementType;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.revenueBucketTypesWildCard !== undefined) {
            queryParameters['revenueBucketTypesWildCard'] = requestParameters.revenueBucketTypesWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueBucketCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RevenueBucketCodesFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Revenue Bucket Codes. <p><strong>OperationId:</strong>getRevenueBucketCodes</p>
     * Operation to fetch RevenueBucketCodes.
     */
    async getRevenueBucketCodes(requestParameters: GetRevenueBucketCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RevenueBucketCodes> {
        const response = await this.getRevenueBucketCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return routing instructions based on search criteria such as hotelId, trxCodeArrangementCode, wildCard.  Routing instructions are used to route specific charges to different destinations.<p><strong>OperationId:</strong>getRoutingInstructions</p>
     * Get routing instructions
     */
    async getRoutingInstructionsRaw(requestParameters: GetRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoutingInstructions>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.trxCodeArrangementCode) {
            queryParameters['trxCodeArrangementCode'] = requestParameters.trxCodeArrangementCode.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.compAccounting !== undefined) {
            queryParameters['compAccounting'] = requestParameters.compAccounting;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/routingInstructions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoutingInstructionsFromJSON(jsonValue));
    }

    /**
     * Use this API to return routing instructions based on search criteria such as hotelId, trxCodeArrangementCode, wildCard.  Routing instructions are used to route specific charges to different destinations.<p><strong>OperationId:</strong>getRoutingInstructions</p>
     * Get routing instructions
     */
    async getRoutingInstructions(requestParameters: GetRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoutingInstructions> {
        const response = await this.getRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Tax Types. <p><strong>OperationId:</strong>getTaxTypes</p>
     * Operation to fetch TaxTypes.
     */
    async getTaxTypesRaw(requestParameters: GetTaxTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxTypes>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.taxTypeCodes) {
            queryParameters['taxTypeCodes'] = requestParameters.taxTypeCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelTaxTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxTypesFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Tax Types. <p><strong>OperationId:</strong>getTaxTypes</p>
     * Operation to fetch TaxTypes.
     */
    async getTaxTypes(requestParameters: GetTaxTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxTypes> {
        const response = await this.getTaxTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return template transaction codes summaries based on search criteria such as transactionGroupCodes, transactionSubgroupsCodes, transactionCodes, wildCard, etc.<p><strong>OperationId:</strong>getTemplateTransactionCodes</p>
     * Get template transaction codes
     */
    async getTemplateTransactionCodesRaw(requestParameters: GetTemplateTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateTransactionCodes>> {
        const queryParameters: any = {};

        if (requestParameters.compTransactionCodes !== undefined) {
            queryParameters['compTransactionCodes'] = requestParameters.compTransactionCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.transactionGroupCodes) {
            queryParameters['transactionGroupCodes'] = requestParameters.transactionGroupCodes;
        }

        if (requestParameters.transactionSubgroupsCodes) {
            queryParameters['transactionSubgroupsCodes'] = requestParameters.transactionSubgroupsCodes;
        }

        if (requestParameters.transactionCodes) {
            queryParameters['transactionCodes'] = requestParameters.transactionCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.brandCode !== undefined) {
            queryParameters['brandCode'] = requestParameters.brandCode;
        }

        if (requestParameters.universalProductCode !== undefined) {
            queryParameters['universalProductCode'] = requestParameters.universalProductCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateTransactionCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateTransactionCodesFromJSON(jsonValue));
    }

    /**
     * Use this API to return template transaction codes summaries based on search criteria such as transactionGroupCodes, transactionSubgroupsCodes, transactionCodes, wildCard, etc.<p><strong>OperationId:</strong>getTemplateTransactionCodes</p>
     * Get template transaction codes
     */
    async getTemplateTransactionCodes(requestParameters: GetTemplateTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateTransactionCodes> {
        const response = await this.getTemplateTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch template transaction group. <p><strong>OperationId:</strong>getTemplateTransactionGroups</p>
     * Operation to fetch TemplateTransactionGroups.
     */
    async getTemplateTransactionGroupsRaw(requestParameters: GetTemplateTransactionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateTransactionGroups>> {
        const queryParameters: any = {};

        if (requestParameters.transactionGroupCodes) {
            queryParameters['transactionGroupCodes'] = requestParameters.transactionGroupCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.transactionGroupType !== undefined) {
            queryParameters['transactionGroupType'] = requestParameters.transactionGroupType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateTransactionGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateTransactionGroupsFromJSON(jsonValue));
    }

    /**
     * Operation to fetch template transaction group. <p><strong>OperationId:</strong>getTemplateTransactionGroups</p>
     * Operation to fetch TemplateTransactionGroups.
     */
    async getTemplateTransactionGroups(requestParameters: GetTemplateTransactionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateTransactionGroups> {
        const response = await this.getTemplateTransactionGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch template transaction subgroups <p><strong>OperationId:</strong>getTemplateTransactionSubgroups</p>
     * Operation to fetch TemplateTransactionSubgroups.
     */
    async getTemplateTransactionSubgroupsRaw(requestParameters: GetTemplateTransactionSubgroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateTransactionSubgroups>> {
        const queryParameters: any = {};

        if (requestParameters.transactionGroupCodes) {
            queryParameters['transactionGroupCodes'] = requestParameters.transactionGroupCodes;
        }

        if (requestParameters.transactionSubgroupsCodes) {
            queryParameters['transactionSubgroupsCodes'] = requestParameters.transactionSubgroupsCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateTransactionSubGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateTransactionSubgroupsFromJSON(jsonValue));
    }

    /**
     * Operation to fetch template transaction subgroups <p><strong>OperationId:</strong>getTemplateTransactionSubgroups</p>
     * Operation to fetch TemplateTransactionSubgroups.
     */
    async getTemplateTransactionSubgroups(requestParameters: GetTemplateTransactionSubgroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateTransactionSubgroups> {
        const response = await this.getTemplateTransactionSubgroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return transaction codes based on search criteria such as hotelIds, transactionGroupCodes, transactionSubgroupsCodes, transactionCodes, description, etc.<p><strong>OperationId:</strong>getTransactionCodes</p>
     * Get transaction codes
     */
    async getTransactionCodeRaw(requestParameters: GetTransactionCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelTransactionCode>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactionCodes/{transactionCode}/hotelTransactionCode`.replace(`{${"transactionCode"}}`, encodeURIComponent(String(requestParameters.transactionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelTransactionCodeFromJSON(jsonValue));
    }

    /**
     * Use this API to return transaction codes based on search criteria such as hotelIds, transactionGroupCodes, transactionSubgroupsCodes, transactionCodes, description, etc.<p><strong>OperationId:</strong>getTransactionCodes</p>
     * Get transaction codes
     */
    async getTransactionCode(requestParameters: GetTransactionCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelTransactionCode> {
        const response = await this.getTransactionCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch transaction codes. <p><strong>OperationId:</strong>getTransactionCodes</p>
     * Operation to fetch TransactionCodes.
     */
    async getTransactionCodesRaw(requestParameters: GetTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelTransactionCodes>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.compTransactionCodes !== undefined) {
            queryParameters['compTransactionCodes'] = requestParameters.compTransactionCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.transactionGroupCodes) {
            queryParameters['transactionGroupCodes'] = requestParameters.transactionGroupCodes;
        }

        if (requestParameters.transactionSubgroupsCodes) {
            queryParameters['transactionSubgroupsCodes'] = requestParameters.transactionSubgroupsCodes;
        }

        if (requestParameters.transactionCodes) {
            queryParameters['transactionCodes'] = requestParameters.transactionCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.brandCode !== undefined) {
            queryParameters['brandCode'] = requestParameters.brandCode;
        }

        if (requestParameters.universalProductCode !== undefined) {
            queryParameters['universalProductCode'] = requestParameters.universalProductCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelTransactionCodesFromJSON(jsonValue));
    }

    /**
     * Operation to fetch transaction codes. <p><strong>OperationId:</strong>getTransactionCodes</p>
     * Operation to fetch TransactionCodes.
     */
    async getTransactionCodes(requestParameters: GetTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelTransactionCodes> {
        const response = await this.getTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch transaction groups. <p><strong>OperationId:</strong>getTransactionGroups</p>
     * Operation to fetch TransactionGroups.
     */
    async getTransactionGroupsRaw(requestParameters: GetTransactionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionGroups>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.transactionGroupCodes) {
            queryParameters['transactionGroupCodes'] = requestParameters.transactionGroupCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.transactionGroupType !== undefined) {
            queryParameters['transactionGroupType'] = requestParameters.transactionGroupType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionGroupsFromJSON(jsonValue));
    }

    /**
     * Operation to fetch transaction groups. <p><strong>OperationId:</strong>getTransactionGroups</p>
     * Operation to fetch TransactionGroups.
     */
    async getTransactionGroups(requestParameters: GetTransactionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionGroups> {
        const response = await this.getTransactionGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch transaction sub groups. <p><strong>OperationId:</strong>getTransactionSubgroups</p>
     * Operation to fetch TransactionSubgroups.
     */
    async getTransactionSubgroupsRaw(requestParameters: GetTransactionSubgroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelTransactionSubgroups>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.transactionGroupCodes) {
            queryParameters['transactionGroupCodes'] = requestParameters.transactionGroupCodes;
        }

        if (requestParameters.transactionSubgroupsCodes) {
            queryParameters['transactionSubgroupsCodes'] = requestParameters.transactionSubgroupsCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionSubGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelTransactionSubgroupsFromJSON(jsonValue));
    }

    /**
     * Operation to fetch transaction sub groups. <p><strong>OperationId:</strong>getTransactionSubgroups</p>
     * Operation to fetch TransactionSubgroups.
     */
    async getTransactionSubgroups(requestParameters: GetTransactionSubgroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelTransactionSubgroups> {
        const response = await this.getTransactionSubgroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create Adjustment Codes. <p><strong>OperationId:</strong>postAdjustmentCodes</p>
     * Operation to create AdjustmentCodes.
     */
    async postAdjustmentCodesRaw(requestParameters: PostAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelAdjustmentCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutAdjustmentCodesRequestToJSON(requestParameters.adjustmentCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create Adjustment Codes. <p><strong>OperationId:</strong>postAdjustmentCodes</p>
     * Operation to create AdjustmentCodes.
     */
    async postAdjustmentCodes(requestParameters: PostAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAdjustmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create articles. <p><strong>OperationId:</strong>postArticles</p>
     * Operation to create Articles.
     */
    async postArticlesRaw(requestParameters: PostArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/articles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutArticlesRequestToJSON(requestParameters.articles),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create articles. <p><strong>OperationId:</strong>postArticles</p>
     * Operation to create Articles.
     */
    async postArticles(requestParameters: PostArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postArticlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>postAuthorizationConfigRule</p>
     * Operation to create AuthorizationConfigRule.
     */
    async postAuthorizationConfigRuleRaw(requestParameters: PostAuthorizationConfigRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/authorizationConfigRule`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutAuthorizationConfigRuleRequestToJSON(requestParameters.authorizationConfigRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>postAuthorizationConfigRule</p>
     * Operation to create AuthorizationConfigRule.
     */
    async postAuthorizationConfigRule(requestParameters: PostAuthorizationConfigRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAuthorizationConfigRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create Authorizer Groups. <p><strong>OperationId:</strong>postAuthorizerGroups</p>
     * Operation to create AuthorizerGroups.
     */
    async postAuthorizerGroupsRaw(requestParameters: PostAuthorizerGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/authorizerGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAuthorizerGroupsRequestToJSON(requestParameters.authorizerGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create Authorizer Groups. <p><strong>OperationId:</strong>postAuthorizerGroups</p>
     * Operation to create AuthorizerGroups.
     */
    async postAuthorizerGroups(requestParameters: PostAuthorizerGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAuthorizerGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to Create Cashier. <p><strong>OperationId:</strong>postCashiers</p>
     * Operation to create Cashiers.
     */
    async postCashiersRaw(requestParameters: PostCashiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cashiers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutCashiersRequestToJSON(requestParameters.cashiers),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to Create Cashier. <p><strong>OperationId:</strong>postCashiers</p>
     * Operation to create Cashiers.
     */
    async postCashiers(requestParameters: PostCashiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCashiersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to Create Comp Types <p><strong>OperationId:</strong>postCompTypes</p>
     * Operation to Create Comp Types
     */
    async postCompTypesRaw(requestParameters: PostCompTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/compTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCompTypesRequestToJSON(requestParameters.compTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to Create Comp Types <p><strong>OperationId:</strong>postCompTypes</p>
     * Operation to Create Comp Types
     */
    async postCompTypes(requestParameters: PostCompTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCompTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create currency exchange service taxes. <p><strong>OperationId:</strong>postCurrencyExchangeServiceTaxes</p>
     * Operation to create CurrencyExchangeServiceTaxes.
     */
    async postCurrencyExchangeServiceTaxesRaw(requestParameters: PostCurrencyExchangeServiceTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/currencyExchangeServiceTaxes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutCurrencyExchangeServiceTaxesRequestToJSON(requestParameters.currencyExchangeServiceTaxes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create currency exchange service taxes. <p><strong>OperationId:</strong>postCurrencyExchangeServiceTaxes</p>
     * Operation to create CurrencyExchangeServiceTaxes.
     */
    async postCurrencyExchangeServiceTaxes(requestParameters: PostCurrencyExchangeServiceTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCurrencyExchangeServiceTaxesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>postExpenseArrangementCodes</p>
     * Operation to create ExpenseArrangementCodes.
     */
    async postExpenseArrangementCodesRaw(requestParameters: PostExpenseArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/expenseArrangementCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutExpenseArrangementCodesRequestToJSON(requestParameters.expenseArrangementCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>postExpenseArrangementCodes</p>
     * Operation to create ExpenseArrangementCodes.
     */
    async postExpenseArrangementCodes(requestParameters: PostExpenseArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postExpenseArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create folio type legend mappings config. <p><strong>OperationId:</strong>postFolioTypeLegendMappingConfig</p>
     * Operation to create folio type legend mappings config.
     */
    async postFolioTypeLegendMappingConfigRaw(requestParameters: PostFolioTypeLegendMappingConfigOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/folioTypeLegendMappings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostFolioTypeLegendMappingConfigRequestToJSON(requestParameters.folioTypeLegendMappingConfigCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create folio type legend mappings config. <p><strong>OperationId:</strong>postFolioTypeLegendMappingConfig</p>
     * Operation to create folio type legend mappings config.
     */
    async postFolioTypeLegendMappingConfig(requestParameters: PostFolioTypeLegendMappingConfigOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postFolioTypeLegendMappingConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create template transaction codes.<p><strong>OperationId:</strong>postTemplateTransactionCodes</p>
     * Post template transaction codes
     */
    async postTemplateTransactionCodesRaw(requestParameters: PostTemplateTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateTransactionCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutTemplateTransactionCodesRequestToJSON(requestParameters.templateTransactionCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create template transaction codes.<p><strong>OperationId:</strong>postTemplateTransactionCodes</p>
     * Post template transaction codes
     */
    async postTemplateTransactionCodes(requestParameters: PostTemplateTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create template transaction subgroups <p><strong>OperationId:</strong>postTemplateTransactionSubgroups</p>
     * Operation to create TemplateTransactionSubgroups.
     */
    async postTemplateTransactionSubgroupsRaw(requestParameters: PostTemplateTransactionSubgroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateTransactionSubGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTemplateTransactionSubgroupsRequestToJSON(requestParameters.templateTransactionSubgroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create template transaction subgroups <p><strong>OperationId:</strong>postTemplateTransactionSubgroups</p>
     * Operation to create TemplateTransactionSubgroups.
     */
    async postTemplateTransactionSubgroups(requestParameters: PostTemplateTransactionSubgroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateTransactionSubgroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create transaction codes for a specific property.<p><strong>OperationId:</strong>postTransactionCodes</p>
     * Post transaction codes
     */
    async postTransactionCodesRaw(requestParameters: PostTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutTransactionCodesRequestToJSON(requestParameters.hotelTransactionCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create transaction codes for a specific property.<p><strong>OperationId:</strong>postTransactionCodes</p>
     * Post transaction codes
     */
    async postTransactionCodes(requestParameters: PostTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create transaction generates for a specific property.  Generates are rules used to calculate and post additional charges, such as service charges and taxes, when a particular sales charge transaction code is posted to guest, package or AR ledgers.<p><strong>OperationId:</strong>postTransactionGenerates</p>
     * Post transaction generates
     */
    async postTransactionGeneratesRaw(requestParameters: PostTransactionGeneratesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/generates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTransactionGeneratesRequestToJSON(requestParameters.hotelTransactionGenerates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create transaction generates for a specific property.  Generates are rules used to calculate and post additional charges, such as service charges and taxes, when a particular sales charge transaction code is posted to guest, package or AR ledgers.<p><strong>OperationId:</strong>postTransactionGenerates</p>
     * Post transaction generates
     */
    async postTransactionGenerates(requestParameters: PostTransactionGeneratesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTransactionGeneratesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create transaction groups. <p><strong>OperationId:</strong>postTransactionGroups</p>
     * Operation to create TransactionGroups.
     */
    async postTransactionGroupsRaw(requestParameters: PostTransactionGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTransactionGroupsRequestToJSON(requestParameters.transactionGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create transaction groups. <p><strong>OperationId:</strong>postTransactionGroups</p>
     * Operation to create TransactionGroups.
     */
    async postTransactionGroups(requestParameters: PostTransactionGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTransactionGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change Adjustment Codes. <p><strong>OperationId:</strong>putAdjustmentCodes</p>
     * Operation to change AdjustmentCodes.
     */
    async putAdjustmentCodesRaw(requestParameters: PutAdjustmentCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelAdjustmentCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutAdjustmentCodesRequestToJSON(requestParameters.adjustmentCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change Adjustment Codes. <p><strong>OperationId:</strong>putAdjustmentCodes</p>
     * Operation to change AdjustmentCodes.
     */
    async putAdjustmentCodes(requestParameters: PutAdjustmentCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putAdjustmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change articles. <p><strong>OperationId:</strong>putArticles</p>
     * Operation to change Articles.
     */
    async putArticlesRaw(requestParameters: PutArticlesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/articles`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutArticlesRequestToJSON(requestParameters.articles),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change articles. <p><strong>OperationId:</strong>putArticles</p>
     * Operation to change Articles.
     */
    async putArticles(requestParameters: PutArticlesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putArticlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putAuthorizationConfigRule</p>
     * Operation to change AuthorizationConfigRule.
     */
    async putAuthorizationConfigRuleRaw(requestParameters: PutAuthorizationConfigRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/authorizationConfigRule`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutAuthorizationConfigRuleRequestToJSON(requestParameters.authorizationConfigRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putAuthorizationConfigRule</p>
     * Operation to change AuthorizationConfigRule.
     */
    async putAuthorizationConfigRule(requestParameters: PutAuthorizationConfigRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putAuthorizationConfigRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change Authorizer Groups. <p><strong>OperationId:</strong>putAuthorizerGroups</p>
     * Operation to change AuthorizerGroups.
     */
    async putAuthorizerGroupsRaw(requestParameters: PutAuthorizerGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/authorizerGroups`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutAuthorizerGroupsRequestToJSON(requestParameters.authorizerGroupsToChange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change Authorizer Groups. <p><strong>OperationId:</strong>putAuthorizerGroups</p>
     * Operation to change AuthorizerGroups.
     */
    async putAuthorizerGroups(requestParameters: PutAuthorizerGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putAuthorizerGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This Operation to Change a Cashier. <p><strong>OperationId:</strong>putCashiers</p>
     * Operation to change CashiersDetails.
     */
    async putCashiersRaw(requestParameters: PutCashiersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cashiers`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutCashiersRequestToJSON(requestParameters.cashiers),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This Operation to Change a Cashier. <p><strong>OperationId:</strong>putCashiers</p>
     * Operation to change CashiersDetails.
     */
    async putCashiers(requestParameters: PutCashiersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCashiersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change currency exchange service taxes. <p><strong>OperationId:</strong>putCurrencyExchangeServiceTaxes</p>
     * Operation to change ExchangeServiceTaxes.
     */
    async putCurrencyExchangeServiceTaxesRaw(requestParameters: PutCurrencyExchangeServiceTaxesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/currencyExchangeServiceTaxes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutCurrencyExchangeServiceTaxesRequestToJSON(requestParameters.currencyExchangeServiceTaxes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change currency exchange service taxes. <p><strong>OperationId:</strong>putCurrencyExchangeServiceTaxes</p>
     * Operation to change ExchangeServiceTaxes.
     */
    async putCurrencyExchangeServiceTaxes(requestParameters: PutCurrencyExchangeServiceTaxesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCurrencyExchangeServiceTaxesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putDailyPlanCodes</p>
     * Operation to change DailyPlanCodes.
     */
    async putDailyPlanCodesRaw(requestParameters: PutDailyPlanCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/dailyPlanCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutDailyPlanCodesRequestToJSON(requestParameters.dailyPlanCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putDailyPlanCodes</p>
     * Operation to change DailyPlanCodes.
     */
    async putDailyPlanCodes(requestParameters: PutDailyPlanCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putDailyPlanCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putExpenseArrangementCodes</p>
     * Operation to change ExpenseArrangementCodes.
     */
    async putExpenseArrangementCodesRaw(requestParameters: PutExpenseArrangementCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/expenseArrangementCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutExpenseArrangementCodesRequestToJSON(requestParameters.expenseArrangementCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putExpenseArrangementCodes</p>
     * Operation to change ExpenseArrangementCodes.
     */
    async putExpenseArrangementCodes(requestParameters: PutExpenseArrangementCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putExpenseArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change Fiscal Folio Parameters. <p><strong>OperationId:</strong>putFiscalFolioParameters</p>
     * Operation to change FiscalFolioParameters.
     */
    async putFiscalFolioParametersRaw(requestParameters: PutFiscalFolioParametersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalFolioParameters`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutFiscalFolioParametersRequestToJSON(requestParameters.fiscalFolioParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change Fiscal Folio Parameters. <p><strong>OperationId:</strong>putFiscalFolioParameters</p>
     * Operation to change FiscalFolioParameters.
     */
    async putFiscalFolioParameters(requestParameters: PutFiscalFolioParametersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putFiscalFolioParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change template transaction codes. <p><strong>OperationId:</strong>putTemplateTransactionCodes</p>
     * Operation to change TemplateTransactionCodes.
     */
    async putTemplateTransactionCodesRaw(requestParameters: PutTemplateTransactionCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateTransactionCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutTemplateTransactionCodesRequestToJSON(requestParameters.templateTransactionCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change template transaction codes. <p><strong>OperationId:</strong>putTemplateTransactionCodes</p>
     * Operation to change TemplateTransactionCodes.
     */
    async putTemplateTransactionCodes(requestParameters: PutTemplateTransactionCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTemplateTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update transaction codes for a specific property.<p><strong>OperationId:</strong>putTransactionCodes</p>
     * Put transaction codes
     */
    async putTransactionCodesRaw(requestParameters: PutTransactionCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionCodes>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutTransactionCodesRequestToJSON(requestParameters.hotelTransactionCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionCodesFromJSON(jsonValue));
    }

    /**
     * Use this API to update transaction codes for a specific property.<p><strong>OperationId:</strong>putTransactionCodes</p>
     * Put transaction codes
     */
    async putTransactionCodes(requestParameters: PutTransactionCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionCodes> {
        const response = await this.putTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to Remove Comp Types. <p><strong>OperationId:</strong>removeCompTypes</p>
     * Operation to Remove Comp Types.
     */
    async removeCompTypesRaw(requestParameters: RemoveCompTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/compTypes/codes/{compTypesCode}`.replace(`{${"compTypesCode"}}`, encodeURIComponent(String(requestParameters.compTypesCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to Remove Comp Types. <p><strong>OperationId:</strong>removeCompTypes</p>
     * Operation to Remove Comp Types.
     */
    async removeCompTypes(requestParameters: RemoveCompTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeCompTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove folio type legend mappings config. <p><strong>OperationId:</strong>removeFolioTypeLegendMappingConfig</p>
     * Operation to remove folio type legend mappings config.
     */
    async removeFolioTypeLegendMappingConfigRaw(requestParameters: RemoveFolioTypeLegendMappingConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/folios/{folioType}/legends/{legendCode}`.replace(`{${"legendCode"}}`, encodeURIComponent(String(requestParameters.legendCode))).replace(`{${"folioType"}}`, encodeURIComponent(String(requestParameters.folioType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove folio type legend mappings config. <p><strong>OperationId:</strong>removeFolioTypeLegendMappingConfig</p>
     * Operation to remove folio type legend mappings config.
     */
    async removeFolioTypeLegendMappingConfig(requestParameters: RemoveFolioTypeLegendMappingConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeFolioTypeLegendMappingConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const DeleteArticlesColorEnum = {
    Red: 'Red',
    DarkRed: 'DarkRed',
    Green: 'Green',
    DarkGreen: 'DarkGreen',
    LightGreen: 'LightGreen',
    Orange: 'Orange',
    White: 'White',
    Yellow: 'Yellow',
    DarkYellow: 'DarkYellow',
    Purple: 'Purple',
    Brown: 'Brown',
    Gray: 'Gray',
    Aqua: 'Aqua',
    Chocolate: 'Chocolate',
    Blue: 'Blue',
    LightBlue: 'LightBlue',
    DarkBlue: 'DarkBlue',
    Cyan: 'Cyan',
    DarkCyan: 'DarkCyan',
    Magenta: 'Magenta',
    DarkMagenta: 'DarkMagenta',
    Black: 'Black'
} as const;
export type DeleteArticlesColorEnum = typeof DeleteArticlesColorEnum[keyof typeof DeleteArticlesColorEnum];
/**
 * @export
 */
export const GetFuturePastExchangeRatesExchangeTypesEnum = {
    Cash: 'Cash',
    Settlement: 'Settlement',
    Posting: 'Posting',
    Check: 'Check',
    TaCommission: 'TACommission',
    Membership: 'Membership',
    Certificate: 'Certificate'
} as const;
export type GetFuturePastExchangeRatesExchangeTypesEnum = typeof GetFuturePastExchangeRatesExchangeTypesEnum[keyof typeof GetFuturePastExchangeRatesExchangeTypesEnum];
/**
 * @export
 */
export const GetOperaControlSequencesFetchInstructionEnum = {
    BillFolioTypes: 'BillFolioTypes',
    ArInvoice: 'ArInvoice'
} as const;
export type GetOperaControlSequencesFetchInstructionEnum = typeof GetOperaControlSequencesFetchInstructionEnum[keyof typeof GetOperaControlSequencesFetchInstructionEnum];
/**
 * @export
 */
export const GetPaymentMethodsFetchInstructionsEnum = {
    CardRanges: 'CardRanges'
} as const;
export type GetPaymentMethodsFetchInstructionsEnum = typeof GetPaymentMethodsFetchInstructionsEnum[keyof typeof GetPaymentMethodsFetchInstructionsEnum];
/**
 * @export
 */
export const GetRevenueBucketCodesTrxCodeArrangementTypeEnum = {
    Default: 'Default',
    Fiscal: 'Fiscal'
} as const;
export type GetRevenueBucketCodesTrxCodeArrangementTypeEnum = typeof GetRevenueBucketCodesTrxCodeArrangementTypeEnum[keyof typeof GetRevenueBucketCodesTrxCodeArrangementTypeEnum];
/**
 * @export
 */
export const GetTemplateTransactionGroupsTransactionGroupTypeEnum = {
    Revenue: 'Revenue',
    Payment: 'Payment',
    Wrapper: 'Wrapper'
} as const;
export type GetTemplateTransactionGroupsTransactionGroupTypeEnum = typeof GetTemplateTransactionGroupsTransactionGroupTypeEnum[keyof typeof GetTemplateTransactionGroupsTransactionGroupTypeEnum];
/**
 * @export
 */
export const GetTransactionCodeFetchInstructionsEnum = {
    Header: 'Header',
    Generates: 'Generates',
    Glmapping: 'Glmapping',
    AssociatedTrxCodes: 'AssociatedTrxCodes',
    MappingCodes: 'MappingCodes'
} as const;
export type GetTransactionCodeFetchInstructionsEnum = typeof GetTransactionCodeFetchInstructionsEnum[keyof typeof GetTransactionCodeFetchInstructionsEnum];
/**
 * @export
 */
export const GetTransactionGroupsTransactionGroupTypeEnum = {
    Revenue: 'Revenue',
    Payment: 'Payment',
    Wrapper: 'Wrapper'
} as const;
export type GetTransactionGroupsTransactionGroupTypeEnum = typeof GetTransactionGroupsTransactionGroupTypeEnum[keyof typeof GetTransactionGroupsTransactionGroupTypeEnum];
