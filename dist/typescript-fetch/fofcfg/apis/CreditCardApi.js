"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidateCreditCardTypeEmailFolioInfoEmailFormatEnum = exports.ValidateCreditCardTypeProcessingEnum = exports.ValidateCreditCardTypeCardTypeEnum = exports.ValidateCreditCardTypeCardNumberTypeEnum = exports.GetHotelInterfaceCustomDataFetchInstructionsEnum = exports.GetCreditCardInfoAccessTransactionTypeEnum = exports.CreditCardApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class CreditCardApi extends runtime.BaseAPI {
    /**
     *  <p><strong>OperationId:</strong>decodeCard</p>
     * Operation to Decode Card.
     */
    decodeCardRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling decodeCard.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.trackData !== undefined) {
                queryParameters['trackData'] = requestParameters.trackData;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/creditCards/decode`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DecodedCardFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>decodeCard</p>
     * Operation to Decode Card.
     */
    decodeCard(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.decodeCardRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getAuthorizationRule</p>
     * Operation to fetch AuthorizationRule.
     */
    getAuthorizationRuleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.reservationId !== undefined) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.idExtension !== undefined) {
                queryParameters['idExtension'] = requestParameters.idExtension;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.guaranteeCode !== undefined) {
                queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
            }
            if (requestParameters.rateCode !== undefined) {
                queryParameters['rateCode'] = requestParameters.rateCode;
            }
            if (requestParameters.roomType !== undefined) {
                queryParameters['roomType'] = requestParameters.roomType;
            }
            if (requestParameters.sourceCode !== undefined) {
                queryParameters['sourceCode'] = requestParameters.sourceCode;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/authorizationRule`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AuthorizationRuleFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getAuthorizationRule</p>
     * Operation to fetch AuthorizationRule.
     */
    getAuthorizationRule(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAuthorizationRuleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getCardReaderDelimiters</p>
     * Operation to fetch CardReaderDelimiters.
     */
    getCardReaderDelimitersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.deviceID !== undefined) {
                queryParameters['deviceID'] = requestParameters.deviceID;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/cardReaderDelimiters`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CardReaderDelimitersFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getCardReaderDelimiters</p>
     * Operation to fetch CardReaderDelimiters.
     */
    getCardReaderDelimiters(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCardReaderDelimitersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to return the token inclusive cardType and expirationDate for the credit card used in a specific reservation. Oracle does not provide any credit card numbers. Include the hotelId and the cardId in the parameters. The cardId can be returned with the getReservation operation. <p><strong>OperationId:</strong>getCreditCardInfo</p>
     * Get credit card token information
     */
    getCreditCardInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getCreditCardInfo.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.reservationId !== undefined) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.idExtension !== undefined) {
                queryParameters['idExtension'] = requestParameters.idExtension;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.cardId !== undefined) {
                queryParameters['cardId'] = requestParameters.cardId;
            }
            if (requestParameters.cardIdExtension !== undefined) {
                queryParameters['cardIdExtension'] = requestParameters.cardIdExtension;
            }
            if (requestParameters.cardIdContext !== undefined) {
                queryParameters['cardIdContext'] = requestParameters.cardIdContext;
            }
            if (requestParameters.cardIdType !== undefined) {
                queryParameters['cardIdType'] = requestParameters.cardIdType;
            }
            if (requestParameters.accessTransactionType !== undefined) {
                queryParameters['accessTransactionType'] = requestParameters.accessTransactionType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/creditCardInfo`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CreditCardInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to return the token inclusive cardType and expirationDate for the credit card used in a specific reservation. Oracle does not provide any credit card numbers. Include the hotelId and the cardId in the parameters. The cardId can be returned with the getReservation operation. <p><strong>OperationId:</strong>getCreditCardInfo</p>
     * Get credit card token information
     */
    getCreditCardInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCreditCardInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getCreditCardReaderDevices</p>
     * Operation to fetch CreditCardReaderDevices.
     */
    getCreditCardReaderDevicesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/creditCards/readerDevices`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CreditCardReaderDevicesFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getCreditCardReaderDevices</p>
     * Operation to fetch CreditCardReaderDevices.
     */
    getCreditCardReaderDevices(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCreditCardReaderDevicesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getCreditCardUniqueId</p>
     * Operation to fetch CreditCardUniqueId.
     */
    getCreditCardUniqueIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.creditCardUniqueIdRQ === null || requestParameters.creditCardUniqueIdRQ === undefined) {
                throw new runtime.RequiredError('creditCardUniqueIdRQ', 'Required parameter requestParameters.creditCardUniqueIdRQ was null or undefined when calling getCreditCardUniqueId.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/creditCards/vaultedId`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CreditCardUniqueIdRQToJSON)(requestParameters.creditCardUniqueIdRQ),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CreditCardUniqueIdFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getCreditCardUniqueId</p>
     * Operation to fetch CreditCardUniqueId.
     */
    getCreditCardUniqueId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCreditCardUniqueIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Operation to fetch hotel interface custom data. <p><strong>OperationId:</strong>getHotelInterfaceCustomData</p>
     * Operation to fetch hotel interface custom data.
     */
    getHotelInterfaceCustomDataRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.interfaceLogoId === null || requestParameters.interfaceLogoId === undefined) {
                throw new runtime.RequiredError('interfaceLogoId', 'Required parameter requestParameters.interfaceLogoId was null or undefined when calling getHotelInterfaceCustomData.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getHotelInterfaceCustomData.');
            }
            const queryParameters = {};
            if (requestParameters.fetchInstructions !== undefined) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/interfaces/{interfaceLogoId}/customData`.replace(`{${"interfaceLogoId"}}`, encodeURIComponent(String(requestParameters.interfaceLogoId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.HotelInterfaceDetailFromJSON)(jsonValue));
        });
    }
    /**
     * Operation to fetch hotel interface custom data. <p><strong>OperationId:</strong>getHotelInterfaceCustomData</p>
     * Operation to fetch hotel interface custom data.
     */
    getHotelInterfaceCustomData(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getHotelInterfaceCustomDataRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getPrepaidCard</p>
     * Operation to fetch Prepaid Card.
     */
    getPrepaidCardRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getPrepaidCard.');
            }
            if (requestParameters.cardNumber === null || requestParameters.cardNumber === undefined) {
                throw new runtime.RequiredError('cardNumber', 'Required parameter requestParameters.cardNumber was null or undefined when calling getPrepaidCard.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.cardNumber !== undefined) {
                queryParameters['cardNumber'] = requestParameters.cardNumber;
            }
            if (requestParameters.interfaceId !== undefined) {
                queryParameters['interfaceId'] = requestParameters.interfaceId;
            }
            if (requestParameters.interfaceIdType !== undefined) {
                queryParameters['interfaceIdType'] = requestParameters.interfaceIdType;
            }
            if (requestParameters.reservationId !== undefined) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.reservationIdType !== undefined) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            if (requestParameters.pin !== undefined) {
                queryParameters['pin'] = requestParameters.pin;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/prepaidCard`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PrepaidCardDetailsFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getPrepaidCard</p>
     * Operation to fetch Prepaid Card.
     */
    getPrepaidCard(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPrepaidCardRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getPrepaidCardBalance</p>
     * Operation to fetch prepaid card balance.
     */
    getPrepaidCardBalanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getPrepaidCardBalance.');
            }
            if (requestParameters.cardNumber === null || requestParameters.cardNumber === undefined) {
                throw new runtime.RequiredError('cardNumber', 'Required parameter requestParameters.cardNumber was null or undefined when calling getPrepaidCardBalance.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.cardNumber !== undefined) {
                queryParameters['cardNumber'] = requestParameters.cardNumber;
            }
            if (requestParameters.interfaceId !== undefined) {
                queryParameters['interfaceId'] = requestParameters.interfaceId;
            }
            if (requestParameters.interfaceIdType !== undefined) {
                queryParameters['interfaceIdType'] = requestParameters.interfaceIdType;
            }
            if (requestParameters.reservationId !== undefined) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.reservationIdType !== undefined) {
                queryParameters['reservationIdType'] = requestParameters.reservationIdType;
            }
            if (requestParameters.pin !== undefined) {
                queryParameters['pin'] = requestParameters.pin;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/prepaidCardBalance`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PrepaidCardBalanceDetailsFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getPrepaidCardBalance</p>
     * Operation to fetch prepaid card balance.
     */
    getPrepaidCardBalance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPrepaidCardBalanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getPrepaidCards</p>
     * Operation to fetch PrepaidCards.
     */
    getPrepaidCardsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getPrepaidCards.');
            }
            const queryParameters = {};
            if (requestParameters.hotelId !== undefined) {
                queryParameters['hotelId'] = requestParameters.hotelId;
            }
            if (requestParameters.includeCardDetails !== undefined) {
                queryParameters['includeCardDetails'] = requestParameters.includeCardDetails;
            }
            if (requestParameters.reservationId !== undefined) {
                queryParameters['reservationId'] = requestParameters.reservationId;
            }
            if (requestParameters.idExtension !== undefined) {
                queryParameters['idExtension'] = requestParameters.idExtension;
            }
            if (requestParameters.idContext !== undefined) {
                queryParameters['idContext'] = requestParameters.idContext;
            }
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.cardNo !== undefined) {
                queryParameters['cardNo'] = requestParameters.cardNo;
            }
            if (requestParameters.roomNo !== undefined) {
                queryParameters['roomNo'] = requestParameters.roomNo;
            }
            if (requestParameters.nameWildCard !== undefined) {
                queryParameters['nameWildCard'] = requestParameters.nameWildCard;
            }
            if (requestParameters.firstNameWildCard !== undefined) {
                queryParameters['firstNameWildCard'] = requestParameters.firstNameWildCard;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/prepaidCards`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.PrepaidCardsFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getPrepaidCards</p>
     * Operation to fetch PrepaidCards.
     */
    getPrepaidCards(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPrepaidCardsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Operation to update one or more secure application settings. <p><strong>OperationId:</strong>putSecureApplicationSettings</p>
     * Operation to change AR SecureApplicationSettings.
     */
    putSecureApplicationSettingsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.applicationSecureSetting === null || requestParameters.applicationSecureSetting === undefined) {
                throw new runtime.RequiredError('applicationSecureSetting', 'Required parameter requestParameters.applicationSecureSetting was null or undefined when calling putSecureApplicationSettings.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/secureApplicationSettings`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ApplicationSecureSettingToJSON)(requestParameters.applicationSecureSetting),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Operation to update one or more secure application settings. <p><strong>OperationId:</strong>putSecureApplicationSettings</p>
     * Operation to change AR SecureApplicationSettings.
     */
    putSecureApplicationSettings(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putSecureApplicationSettingsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Operation to update hotel interface custom data. <p><strong>OperationId:</strong>updateInterfaceCustomData</p>
     * Operation to update hotel interface custom data.
     */
    updateInterfaceCustomDataRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.interfaceLogoId === null || requestParameters.interfaceLogoId === undefined) {
                throw new runtime.RequiredError('interfaceLogoId', 'Required parameter requestParameters.interfaceLogoId was null or undefined when calling updateInterfaceCustomData.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling updateInterfaceCustomData.');
            }
            if (requestParameters.hotelInterfaceDetail === null || requestParameters.hotelInterfaceDetail === undefined) {
                throw new runtime.RequiredError('hotelInterfaceDetail', 'Required parameter requestParameters.hotelInterfaceDetail was null or undefined when calling updateInterfaceCustomData.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/interfaces/{interfaceLogoId}/customData`.replace(`{${"interfaceLogoId"}}`, encodeURIComponent(String(requestParameters.interfaceLogoId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.HotelInterfaceDetailToJSON)(requestParameters.hotelInterfaceDetail),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Operation to update hotel interface custom data. <p><strong>OperationId:</strong>updateInterfaceCustomData</p>
     * Operation to update hotel interface custom data.
     */
    updateInterfaceCustomData(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateInterfaceCustomDataRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>validateCreditCardType</p>
     * Operation to validate CreditCardType.
     */
    validateCreditCardTypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.reservationID !== undefined) {
                queryParameters['reservationID'] = requestParameters.reservationID;
            }
            if (requestParameters.reservationIDIdExtension !== undefined) {
                queryParameters['reservationIDIdExtension'] = requestParameters.reservationIDIdExtension;
            }
            if (requestParameters.reservationIDIdContext !== undefined) {
                queryParameters['reservationIDIdContext'] = requestParameters.reservationIDIdContext;
            }
            if (requestParameters.reservationIDType !== undefined) {
                queryParameters['reservationIDType'] = requestParameters.reservationIDType;
            }
            if (requestParameters.paymentMethodDescription !== undefined) {
                queryParameters['paymentMethodDescription'] = requestParameters.paymentMethodDescription;
            }
            if (requestParameters.paymentMethodFolioView !== undefined) {
                queryParameters['paymentMethodFolioView'] = requestParameters.paymentMethodFolioView;
            }
            if (requestParameters.paymentMethod !== undefined) {
                queryParameters['paymentMethod'] = requestParameters.paymentMethod;
            }
            if (requestParameters.attachCreditCardToProfile !== undefined) {
                queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
            }
            if (requestParameters.cardHolderName !== undefined) {
                queryParameters['cardHolderName'] = requestParameters.cardHolderName;
            }
            if (requestParameters.cardNumber !== undefined) {
                queryParameters['cardNumber'] = requestParameters.cardNumber;
            }
            if (requestParameters.cardNumberLast4Digits !== undefined) {
                queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
            }
            if (requestParameters.cardNumberMasked !== undefined) {
                queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
            }
            if (requestParameters.cardNumberType !== undefined) {
                queryParameters['cardNumberType'] = requestParameters.cardNumberType;
            }
            if (requestParameters.cardType !== undefined) {
                queryParameters['cardType'] = requestParameters.cardType;
            }
            if (requestParameters.expirationDate !== undefined) {
                queryParameters['expirationDate'] = requestParameters.expirationDate;
            }
            if (requestParameters.expirationDateExpired !== undefined) {
                queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
            }
            if (requestParameters.expirationDateMasked !== undefined) {
                queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
            }
            if (requestParameters.processing !== undefined) {
                queryParameters['processing'] = requestParameters.processing;
            }
            if (requestParameters.swiped !== undefined) {
                queryParameters['swiped'] = requestParameters.swiped;
            }
            if (requestParameters.userDefinedCardType !== undefined) {
                queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
            }
            if (requestParameters.cardId !== undefined) {
                queryParameters['cardId'] = requestParameters.cardId;
            }
            if (requestParameters.cardIdExtension !== undefined) {
                queryParameters['cardIdExtension'] = requestParameters.cardIdExtension;
            }
            if (requestParameters.cardIdContext !== undefined) {
                queryParameters['cardIdContext'] = requestParameters.cardIdContext;
            }
            if (requestParameters.cardIdType !== undefined) {
                queryParameters['cardIdType'] = requestParameters.cardIdType;
            }
            if (requestParameters.currentAuthorizedAmount !== undefined) {
                queryParameters['currentAuthorizedAmount'] = requestParameters.currentAuthorizedAmount;
            }
            if (requestParameters.currentAuthorizedAmountCurrencyCode !== undefined) {
                queryParameters['currentAuthorizedAmountCurrencyCode'] = requestParameters.currentAuthorizedAmountCurrencyCode;
            }
            if (requestParameters.approvalAmountNeeded !== undefined) {
                queryParameters['approvalAmountNeeded'] = requestParameters.approvalAmountNeeded;
            }
            if (requestParameters.approvalAmountNeededCurrencyCode !== undefined) {
                queryParameters['approvalAmountNeededCurrencyCode'] = requestParameters.approvalAmountNeededCurrencyCode;
            }
            if (requestParameters.balanceAmount !== undefined) {
                queryParameters['balanceAmount'] = requestParameters.balanceAmount;
            }
            if (requestParameters.balanceCurrencyCode !== undefined) {
                queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
            }
            if (requestParameters.authorizationRuleCode !== undefined) {
                queryParameters['authorizationRuleCode'] = requestParameters.authorizationRuleCode;
            }
            if (requestParameters.authorizationRuleAmount !== undefined) {
                queryParameters['authorizationRuleAmount'] = requestParameters.authorizationRuleAmount;
            }
            if (requestParameters.authorizationRuleCurrencyCode !== undefined) {
                queryParameters['authorizationRuleCurrencyCode'] = requestParameters.authorizationRuleCurrencyCode;
            }
            if (requestParameters.authorizationRulePercent !== undefined) {
                queryParameters['authorizationRulePercent'] = requestParameters.authorizationRulePercent;
            }
            if (requestParameters.emailFolio !== undefined) {
                queryParameters['emailFolio'] = requestParameters.emailFolio;
            }
            if (requestParameters.emailFolioInfoId !== undefined) {
                queryParameters['emailFolioInfoId'] = requestParameters.emailFolioInfoId;
            }
            if (requestParameters.emailFolioInfoIDExtension !== undefined) {
                queryParameters['emailFolioInfoIDExtension'] = requestParameters.emailFolioInfoIDExtension;
            }
            if (requestParameters.emailFolioInfoIDContext !== undefined) {
                queryParameters['emailFolioInfoIDContext'] = requestParameters.emailFolioInfoIDContext;
            }
            if (requestParameters.emailFolioInfoType !== undefined) {
                queryParameters['emailFolioInfoType'] = requestParameters.emailFolioInfoType;
            }
            if (requestParameters.emailFolioInfoCreateDateTime !== undefined) {
                queryParameters['emailFolioInfoCreateDateTime'] = requestParameters.emailFolioInfoCreateDateTime;
            }
            if (requestParameters.emailFolioInfoCreatorID !== undefined) {
                queryParameters['emailFolioInfoCreatorID'] = requestParameters.emailFolioInfoCreatorID;
            }
            if (requestParameters.emailFolioInfoEmailAddress !== undefined) {
                queryParameters['emailFolioInfoEmailAddress'] = requestParameters.emailFolioInfoEmailAddress;
            }
            if (requestParameters.emailFolioInfoEmailFormat !== undefined) {
                queryParameters['emailFolioInfoEmailFormat'] = requestParameters.emailFolioInfoEmailFormat;
            }
            if (requestParameters.emailFolioInfoLastModifierID !== undefined) {
                queryParameters['emailFolioInfoLastModifierID'] = requestParameters.emailFolioInfoLastModifierID;
            }
            if (requestParameters.emailFolioInfoLastModifyDateTime !== undefined) {
                queryParameters['emailFolioInfoLastModifyDateTime'] = requestParameters.emailFolioInfoLastModifyDateTime;
            }
            if (requestParameters.emailFolioInfoOrderSequence !== undefined) {
                queryParameters['emailFolioInfoOrderSequence'] = requestParameters.emailFolioInfoOrderSequence;
            }
            if (requestParameters.emailFolioInfoPrimaryInd !== undefined) {
                queryParameters['emailFolioInfoPrimaryInd'] = requestParameters.emailFolioInfoPrimaryInd;
            }
            if (requestParameters.emailFolioInfoPurgeDate !== undefined) {
                queryParameters['emailFolioInfoPurgeDate'] = requestParameters.emailFolioInfoPurgeDate;
            }
            if (requestParameters.emailEmailFolioInfoType !== undefined) {
                queryParameters['emailEmailFolioInfoType'] = requestParameters.emailEmailFolioInfoType;
            }
            if (requestParameters.emailFolioInfoTypeDescription !== undefined) {
                queryParameters['emailFolioInfoTypeDescription'] = requestParameters.emailFolioInfoTypeDescription;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/creditCardTypes/validate`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CreditCardTypeValidationStatusFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>validateCreditCardType</p>
     * Operation to validate CreditCardType.
     */
    validateCreditCardType(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.validateCreditCardTypeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.CreditCardApi = CreditCardApi;
/**
 * @export
 */
exports.GetCreditCardInfoAccessTransactionTypeEnum = {
    Additional: 'Additional',
    ArPayment: 'ArPayment',
    Batch: 'Batch',
    BatchDeposit: 'BatchDeposit',
    BatchDepositRefund: 'BatchDepositRefund',
    Billing: 'Billing',
    CheckIn: 'CheckIn',
    CheckInManualAuth: 'CheckInManualAuth',
    Deposit: 'Deposit',
    EndOfDay: 'EndOfDay',
    EndOfDayDeposit: 'EndOfDayDeposit',
    Manual: 'Manual',
    Other: 'Other',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    PreCheckIn: 'PreCheckIn',
    Refund: 'Refund',
    Scheduled: 'Scheduled'
};
/**
 * @export
 */
exports.GetHotelInterfaceCustomDataFetchInstructionsEnum = {
    PrimaryInfo: 'PrimaryInfo',
    AdditionalInfo: 'AdditionalInfo',
    GeneralInfo: 'GeneralInfo',
    CommunicationInfo: 'CommunicationInfo',
    IfcTranslation: 'IfcTranslation',
    IfcClassOfService: 'IfcClassOfService',
    IfcImportRooms: 'IfcImportRooms',
    WorkstationSetupInfo: 'WorkstationSetupInfo',
    PostingsInfo: 'PostingsInfo',
    CustomDataInfo: 'CustomDataInfo',
    ExportDataInfo: 'ExportDataInfo',
    TransactionCodesInfo: 'TransactionCodesInfo'
};
/**
 * @export
 */
exports.ValidateCreditCardTypeCardNumberTypeEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
};
/**
 * @export
 */
exports.ValidateCreditCardTypeCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
};
/**
 * @export
 */
exports.ValidateCreditCardTypeProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
};
/**
 * @export
 */
exports.ValidateCreditCardTypeEmailFolioInfoEmailFormatEnum = {
    Html: 'Html',
    Text: 'Text'
};
