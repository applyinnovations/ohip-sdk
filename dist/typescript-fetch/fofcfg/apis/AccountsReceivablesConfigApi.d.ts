/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { ArAccountTypes, ArFlaggedReasons, Status } from '../models/index';
export interface DeleteARAccountTypesRequest {
    hotelId: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    accountTypes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteARFlaggedReasonsRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    codes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetARAccountTypesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    accountType?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetARFlaggedReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reasonCodes?: Array<string>;
    reasonWildCard?: string;
    description?: string;
    propertyCodes?: Array<string>;
    propertyWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostARAccountTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    arAccountTypes: ArAccountTypes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostARFlaggedReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    arFlaggedReasons: ArFlaggedReasons;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutARAccountTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    arAccountTypes: ArAccountTypes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutARFlaggedReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    arFlaggedReasons: ArFlaggedReasons;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class AccountsReceivablesConfigApi extends runtime.BaseAPI {
    /**
     * Operation to remove account types. <p><strong>OperationId:</strong>deleteARAccountTypes</p>
     * Operation to remove AR Account types.
     */
    deleteARAccountTypesRaw(requestParameters: DeleteARAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to remove account types. <p><strong>OperationId:</strong>deleteARAccountTypes</p>
     * Operation to remove AR Account types.
     */
    deleteARAccountTypes(requestParameters: DeleteARAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>deleteARFlaggedReasons</p>
     * Operation to remove AR flagged reasons.
     */
    deleteARFlaggedReasonsRaw(requestParameters: DeleteARFlaggedReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>deleteARFlaggedReasons</p>
     * Operation to remove AR flagged reasons.
     */
    deleteARFlaggedReasons(requestParameters: DeleteARFlaggedReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Operation to fetch account types. <p><strong>OperationId:</strong>getARAccountTypes</p>
     * Operation to fetch AR account types.
     */
    getARAccountTypesRaw(requestParameters: GetARAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArAccountTypes>>;
    /**
     * Operation to fetch account types. <p><strong>OperationId:</strong>getARAccountTypes</p>
     * Operation to fetch AR account types.
     */
    getARAccountTypes(requestParameters: GetARAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArAccountTypes>;
    /**
     *  <p><strong>OperationId:</strong>getARFlaggedReasons</p>
     * Operation to fetch AR flagged reasons.
     */
    getARFlaggedReasonsRaw(requestParameters: GetARFlaggedReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArFlaggedReasons>>;
    /**
     *  <p><strong>OperationId:</strong>getARFlaggedReasons</p>
     * Operation to fetch AR flagged reasons.
     */
    getARFlaggedReasons(requestParameters: GetARFlaggedReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArFlaggedReasons>;
    /**
     * Operation to create account types. <p><strong>OperationId:</strong>postARAccountTypes</p>
     * Operation to create AR Account Types.
     */
    postARAccountTypesRaw(requestParameters: PostARAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to create account types. <p><strong>OperationId:</strong>postARAccountTypes</p>
     * Operation to create AR Account Types.
     */
    postARAccountTypes(requestParameters: PostARAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>postARFlaggedReasons</p>
     * Operation to create AR flagged reasons.
     */
    postARFlaggedReasonsRaw(requestParameters: PostARFlaggedReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>postARFlaggedReasons</p>
     * Operation to create AR flagged reasons.
     */
    postARFlaggedReasons(requestParameters: PostARFlaggedReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Operation to change account types. <p><strong>OperationId:</strong>putARAccountTypes</p>
     * Operation to modify AR Account Types.
     */
    putARAccountTypesRaw(requestParameters: PutARAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to change account types. <p><strong>OperationId:</strong>putARAccountTypes</p>
     * Operation to modify AR Account Types.
     */
    putARAccountTypes(requestParameters: PutARAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>putARFlaggedReasons</p>
     * Operation to change AR flagged reasons.
     */
    putARFlaggedReasonsRaw(requestParameters: PutARFlaggedReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     *  <p><strong>OperationId:</strong>putARFlaggedReasons</p>
     * Operation to change AR flagged reasons.
     */
    putARFlaggedReasons(requestParameters: PutARFlaggedReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
}
