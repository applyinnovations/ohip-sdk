/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionDetailType,
  TrackItActionsDetails,
  TrackItLocationsDetails,
} from '../models';
import {
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    TrackItActionsDetailsFromJSON,
    TrackItActionsDetailsToJSON,
    TrackItLocationsDetailsFromJSON,
    TrackItLocationsDetailsToJSON,
} from '../models';

export interface GetTrackItActionsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    codes?: Array<string>;
    wildCard?: string;
    showInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTrackItLocationsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    codes?: Array<string>;
    wildCard?: string;
    showInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class HotelConfigApi extends runtime.BaseAPI {

    /**
     * Use this API to get Track it Actions. <p><strong>OperationId:</strong>getTrackItActions</p>
     * Get Track it Actions
     */
    async getTrackItActionsRaw(requestParameters: GetTrackItActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackItActionsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.showInactive !== undefined) {
            queryParameters['showInactive'] = requestParameters.showInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItActions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackItActionsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Track it Actions. <p><strong>OperationId:</strong>getTrackItActions</p>
     * Get Track it Actions
     */
    async getTrackItActions(requestParameters: GetTrackItActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackItActionsDetails> {
        const response = await this.getTrackItActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Track it Locations. <p><strong>OperationId:</strong>getTrackItLocations</p>
     * Get Track it Locations
     */
    async getTrackItLocationsRaw(requestParameters: GetTrackItLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackItLocationsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.showInactive !== undefined) {
            queryParameters['showInactive'] = requestParameters.showInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItLocations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackItLocationsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Track it Locations. <p><strong>OperationId:</strong>getTrackItLocations</p>
     * Get Track it Locations
     */
    async getTrackItLocations(requestParameters: GetTrackItLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackItLocationsDetails> {
        const response = await this.getTrackItLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
