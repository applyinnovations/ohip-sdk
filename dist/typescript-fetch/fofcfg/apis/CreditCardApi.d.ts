/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AuthorizationRule, CardReaderDelimiters, CreditCardInfo, CreditCardReaderDevices, CreditCardTypeValidationStatus, CreditCardUniqueId, DecodedCard, GetCreditCardUniqueIdRequest, HotelInterfaceDetail, PrepaidCardBalanceDetails, PrepaidCardDetails, PrepaidCards, PutSecureApplicationSettingsRequest, Status, UpdateInterfaceCustomDataRequest } from '../models';
export interface DecodeCardRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    trackData?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetAuthorizationRuleRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    reservationId?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    guaranteeCode?: string;
    rateCode?: string;
    roomType?: string;
    sourceCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCardReaderDelimitersRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    deviceID?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCreditCardInfoRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationId?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    cardId?: string;
    cardIdExtension?: number;
    cardIdContext?: string;
    cardIdType?: string;
    accessTransactionType?: GetCreditCardInfoAccessTransactionTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCreditCardReaderDevicesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetCreditCardUniqueIdOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    creditCardUniqueIdRQ?: GetCreditCardUniqueIdRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetHotelInterfaceCustomDataRequest {
    interfaceLogoId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: GetHotelInterfaceCustomDataFetchInstructionsEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetPrepaidCardRequest {
    hotelId?: string;
    cardNumber?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    interfaceId?: string;
    interfaceIdType?: string;
    reservationId?: string;
    reservationIdType?: string;
    pin?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetPrepaidCardBalanceRequest {
    hotelId?: string;
    cardNumber?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    interfaceId?: string;
    interfaceIdType?: string;
    reservationId?: string;
    reservationIdType?: string;
    pin?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetPrepaidCardsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeCardDetails?: boolean;
    reservationId?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    cardNo?: string;
    roomNo?: string;
    nameWildCard?: string;
    firstNameWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutSecureApplicationSettingsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    applicationSecureSetting?: PutSecureApplicationSettingsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface UpdateInterfaceCustomDataOperationRequest {
    interfaceLogoId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelInterfaceDetail?: UpdateInterfaceCustomDataRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ValidateCreditCardTypeRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationID?: string;
    reservationIDIdExtension?: number;
    reservationIDIdContext?: string;
    reservationIDType?: string;
    paymentMethodDescription?: string;
    paymentMethodFolioView?: number;
    paymentMethod?: string;
    attachCreditCardToProfile?: boolean;
    cardHolderName?: string;
    cardNumber?: string;
    cardNumberLast4Digits?: string;
    cardNumberMasked?: string;
    cardNumberType?: ValidateCreditCardTypeCardNumberTypeEnum;
    cardType?: ValidateCreditCardTypeCardTypeEnum;
    expirationDate?: Date;
    expirationDateExpired?: boolean;
    expirationDateMasked?: string;
    processing?: ValidateCreditCardTypeProcessingEnum;
    swiped?: boolean;
    userDefinedCardType?: string;
    cardId?: string;
    cardIdExtension?: number;
    cardIdContext?: string;
    cardIdType?: string;
    currentAuthorizedAmount?: number;
    currentAuthorizedAmountCurrencyCode?: string;
    approvalAmountNeeded?: number;
    approvalAmountNeededCurrencyCode?: string;
    balanceAmount?: number;
    balanceCurrencyCode?: string;
    authorizationRuleCode?: number;
    authorizationRuleAmount?: number;
    authorizationRuleCurrencyCode?: string;
    authorizationRulePercent?: number;
    emailFolio?: boolean;
    emailFolioInfoId?: string;
    emailFolioInfoIDExtension?: number;
    emailFolioInfoIDContext?: string;
    emailFolioInfoType?: string;
    emailFolioInfoCreateDateTime?: string;
    emailFolioInfoCreatorID?: string;
    emailFolioInfoEmailAddress?: string;
    emailFolioInfoEmailFormat?: ValidateCreditCardTypeEmailFolioInfoEmailFormatEnum;
    emailFolioInfoLastModifierID?: string;
    emailFolioInfoLastModifyDateTime?: string;
    emailFolioInfoOrderSequence?: number;
    emailFolioInfoPrimaryInd?: boolean;
    emailFolioInfoPurgeDate?: Date;
    emailEmailFolioInfoType?: string;
    emailFolioInfoTypeDescription?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class CreditCardApi extends runtime.BaseAPI {
    /**
     *  <p><strong>OperationId:</strong>decodeCard</p>
     * Operation to Decode Card.
     */
    decodeCardRaw(requestParameters: DecodeCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DecodedCard>>;
    /**
     *  <p><strong>OperationId:</strong>decodeCard</p>
     * Operation to Decode Card.
     */
    decodeCard(requestParameters: DecodeCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DecodedCard>;
    /**
     *  <p><strong>OperationId:</strong>getAuthorizationRule</p>
     * Operation to fetch AuthorizationRule.
     */
    getAuthorizationRuleRaw(requestParameters: GetAuthorizationRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizationRule>>;
    /**
     *  <p><strong>OperationId:</strong>getAuthorizationRule</p>
     * Operation to fetch AuthorizationRule.
     */
    getAuthorizationRule(requestParameters: GetAuthorizationRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizationRule>;
    /**
     *  <p><strong>OperationId:</strong>getCardReaderDelimiters</p>
     * Operation to fetch CardReaderDelimiters.
     */
    getCardReaderDelimitersRaw(requestParameters: GetCardReaderDelimitersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CardReaderDelimiters>>;
    /**
     *  <p><strong>OperationId:</strong>getCardReaderDelimiters</p>
     * Operation to fetch CardReaderDelimiters.
     */
    getCardReaderDelimiters(requestParameters: GetCardReaderDelimitersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CardReaderDelimiters>;
    /**
     * Use this API to return the token inclusive cardType and expirationDate for the credit card used in a specific reservation. Oracle does not provide any credit card numbers. Include the hotelId and the cardId in the parameters. The cardId can be returned with the getReservation operation. <p><strong>OperationId:</strong>getCreditCardInfo</p>
     * Get credit card token information
     */
    getCreditCardInfoRaw(requestParameters: GetCreditCardInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditCardInfo>>;
    /**
     * Use this API to return the token inclusive cardType and expirationDate for the credit card used in a specific reservation. Oracle does not provide any credit card numbers. Include the hotelId and the cardId in the parameters. The cardId can be returned with the getReservation operation. <p><strong>OperationId:</strong>getCreditCardInfo</p>
     * Get credit card token information
     */
    getCreditCardInfo(requestParameters: GetCreditCardInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditCardInfo>;
    /**
     *  <p><strong>OperationId:</strong>getCreditCardReaderDevices</p>
     * Operation to fetch CreditCardReaderDevices.
     */
    getCreditCardReaderDevicesRaw(requestParameters: GetCreditCardReaderDevicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditCardReaderDevices>>;
    /**
     *  <p><strong>OperationId:</strong>getCreditCardReaderDevices</p>
     * Operation to fetch CreditCardReaderDevices.
     */
    getCreditCardReaderDevices(requestParameters: GetCreditCardReaderDevicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditCardReaderDevices>;
    /**
     *  <p><strong>OperationId:</strong>getCreditCardUniqueId</p>
     * Operation to fetch CreditCardUniqueId.
     */
    getCreditCardUniqueIdRaw(requestParameters: GetCreditCardUniqueIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditCardUniqueId>>;
    /**
     *  <p><strong>OperationId:</strong>getCreditCardUniqueId</p>
     * Operation to fetch CreditCardUniqueId.
     */
    getCreditCardUniqueId(requestParameters: GetCreditCardUniqueIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditCardUniqueId>;
    /**
     * Operation to fetch hotel interface custom data. <p><strong>OperationId:</strong>getHotelInterfaceCustomData</p>
     * Operation to fetch hotel interface custom data.
     */
    getHotelInterfaceCustomDataRaw(requestParameters: GetHotelInterfaceCustomDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelInterfaceDetail>>;
    /**
     * Operation to fetch hotel interface custom data. <p><strong>OperationId:</strong>getHotelInterfaceCustomData</p>
     * Operation to fetch hotel interface custom data.
     */
    getHotelInterfaceCustomData(requestParameters: GetHotelInterfaceCustomDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelInterfaceDetail>;
    /**
     *  <p><strong>OperationId:</strong>getPrepaidCard</p>
     * Operation to fetch Prepaid Card.
     */
    getPrepaidCardRaw(requestParameters: GetPrepaidCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrepaidCardDetails>>;
    /**
     *  <p><strong>OperationId:</strong>getPrepaidCard</p>
     * Operation to fetch Prepaid Card.
     */
    getPrepaidCard(requestParameters: GetPrepaidCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrepaidCardDetails>;
    /**
     *  <p><strong>OperationId:</strong>getPrepaidCardBalance</p>
     * Operation to fetch prepaid card balance.
     */
    getPrepaidCardBalanceRaw(requestParameters: GetPrepaidCardBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrepaidCardBalanceDetails>>;
    /**
     *  <p><strong>OperationId:</strong>getPrepaidCardBalance</p>
     * Operation to fetch prepaid card balance.
     */
    getPrepaidCardBalance(requestParameters: GetPrepaidCardBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrepaidCardBalanceDetails>;
    /**
     *  <p><strong>OperationId:</strong>getPrepaidCards</p>
     * Operation to fetch PrepaidCards.
     */
    getPrepaidCardsRaw(requestParameters: GetPrepaidCardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrepaidCards>>;
    /**
     *  <p><strong>OperationId:</strong>getPrepaidCards</p>
     * Operation to fetch PrepaidCards.
     */
    getPrepaidCards(requestParameters: GetPrepaidCardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrepaidCards>;
    /**
     * Operation to update one or more secure application settings. <p><strong>OperationId:</strong>putSecureApplicationSettings</p>
     * Operation to change AR SecureApplicationSettings.
     */
    putSecureApplicationSettingsRaw(requestParameters: PutSecureApplicationSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to update one or more secure application settings. <p><strong>OperationId:</strong>putSecureApplicationSettings</p>
     * Operation to change AR SecureApplicationSettings.
     */
    putSecureApplicationSettings(requestParameters: PutSecureApplicationSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Operation to update hotel interface custom data. <p><strong>OperationId:</strong>updateInterfaceCustomData</p>
     * Operation to update hotel interface custom data.
     */
    updateInterfaceCustomDataRaw(requestParameters: UpdateInterfaceCustomDataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Operation to update hotel interface custom data. <p><strong>OperationId:</strong>updateInterfaceCustomData</p>
     * Operation to update hotel interface custom data.
     */
    updateInterfaceCustomData(requestParameters: UpdateInterfaceCustomDataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     *  <p><strong>OperationId:</strong>validateCreditCardType</p>
     * Operation to validate CreditCardType.
     */
    validateCreditCardTypeRaw(requestParameters: ValidateCreditCardTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditCardTypeValidationStatus>>;
    /**
     *  <p><strong>OperationId:</strong>validateCreditCardType</p>
     * Operation to validate CreditCardType.
     */
    validateCreditCardType(requestParameters: ValidateCreditCardTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditCardTypeValidationStatus>;
}
/**
 * @export
 */
export declare const GetCreditCardInfoAccessTransactionTypeEnum: {
    readonly Additional: "Additional";
    readonly ArPayment: "ArPayment";
    readonly Batch: "Batch";
    readonly BatchDeposit: "BatchDeposit";
    readonly BatchDepositRefund: "BatchDepositRefund";
    readonly Billing: "Billing";
    readonly CheckIn: "CheckIn";
    readonly CheckInManualAuth: "CheckInManualAuth";
    readonly Deposit: "Deposit";
    readonly EndOfDay: "EndOfDay";
    readonly EndOfDayDeposit: "EndOfDayDeposit";
    readonly Manual: "Manual";
    readonly Other: "Other";
    readonly PasserBy: "PasserBy";
    readonly PostIt: "PostIt";
    readonly PreCheckIn: "PreCheckIn";
    readonly Refund: "Refund";
    readonly Scheduled: "Scheduled";
};
export type GetCreditCardInfoAccessTransactionTypeEnum = typeof GetCreditCardInfoAccessTransactionTypeEnum[keyof typeof GetCreditCardInfoAccessTransactionTypeEnum];
/**
 * @export
 */
export declare const GetHotelInterfaceCustomDataFetchInstructionsEnum: {
    readonly PrimaryInfo: "PrimaryInfo";
    readonly AdditionalInfo: "AdditionalInfo";
    readonly GeneralInfo: "GeneralInfo";
    readonly CommunicationInfo: "CommunicationInfo";
    readonly IfcTranslation: "IfcTranslation";
    readonly IfcClassOfService: "IfcClassOfService";
    readonly IfcImportRooms: "IfcImportRooms";
    readonly WorkstationSetupInfo: "WorkstationSetupInfo";
    readonly PostingsInfo: "PostingsInfo";
    readonly CustomDataInfo: "CustomDataInfo";
    readonly ExportDataInfo: "ExportDataInfo";
    readonly TransactionCodesInfo: "TransactionCodesInfo";
};
export type GetHotelInterfaceCustomDataFetchInstructionsEnum = typeof GetHotelInterfaceCustomDataFetchInstructionsEnum[keyof typeof GetHotelInterfaceCustomDataFetchInstructionsEnum];
/**
 * @export
 */
export declare const ValidateCreditCardTypeCardNumberTypeEnum: {
    readonly CardNumber: "CardNumber";
    readonly Token: "Token";
};
export type ValidateCreditCardTypeCardNumberTypeEnum = typeof ValidateCreditCardTypeCardNumberTypeEnum[keyof typeof ValidateCreditCardTypeCardNumberTypeEnum];
/**
 * @export
 */
export declare const ValidateCreditCardTypeCardTypeEnum: {
    readonly Ab: "Ab";
    readonly Am: "Am";
    readonly Ax: "Ax";
    readonly Cb: "Cb";
    readonly Dc: "Dc";
    readonly Ds: "Ds";
    readonly Dt: "Dt";
    readonly Ec: "Ec";
    readonly Er: "Er";
    readonly Jc: "Jc";
    readonly Jl: "Jl";
    readonly Mc: "Mc";
    readonly Nb: "Nb";
    readonly So: "So";
    readonly St: "St";
    readonly Sw: "Sw";
    readonly Va: "Va";
    readonly Xy: "Xy";
    readonly Zz: "Zz";
    readonly Cp: "Cp";
    readonly Cu: "Cu";
};
export type ValidateCreditCardTypeCardTypeEnum = typeof ValidateCreditCardTypeCardTypeEnum[keyof typeof ValidateCreditCardTypeCardTypeEnum];
/**
 * @export
 */
export declare const ValidateCreditCardTypeProcessingEnum: {
    readonly Eft: "Eft";
    readonly Manual: "Manual";
};
export type ValidateCreditCardTypeProcessingEnum = typeof ValidateCreditCardTypeProcessingEnum[keyof typeof ValidateCreditCardTypeProcessingEnum];
/**
 * @export
 */
export declare const ValidateCreditCardTypeEmailFolioInfoEmailFormatEnum: {
    readonly Html: "Html";
    readonly Text: "Text";
};
export type ValidateCreditCardTypeEmailFolioInfoEmailFormatEnum = typeof ValidateCreditCardTypeEmailFolioInfoEmailFormatEnum[keyof typeof ValidateCreditCardTypeEmailFolioInfoEmailFormatEnum];
