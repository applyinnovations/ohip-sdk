/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering Outbound API
 * APIs to cater for Cashiering related external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApproveCompPostingsRequest,
  AuthorizeCompRedemptionsRS,
  AuthorizeCompRedemptionsRequest,
  ExceptionDetailType,
  FetchCompRedemptionsRS,
  PostCompRedemptionsRS,
  PostCompRedemptionsRequest,
  ReverseCompRedemptionsRequest,
  SendCompTransactionsStatus,
  Status,
} from '../models';
import {
    ApproveCompPostingsRequestFromJSON,
    ApproveCompPostingsRequestToJSON,
    AuthorizeCompRedemptionsRSFromJSON,
    AuthorizeCompRedemptionsRSToJSON,
    AuthorizeCompRedemptionsRequestFromJSON,
    AuthorizeCompRedemptionsRequestToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    FetchCompRedemptionsRSFromJSON,
    FetchCompRedemptionsRSToJSON,
    PostCompRedemptionsRSFromJSON,
    PostCompRedemptionsRSToJSON,
    PostCompRedemptionsRequestFromJSON,
    PostCompRedemptionsRequestToJSON,
    ReverseCompRedemptionsRequestFromJSON,
    ReverseCompRedemptionsRequestToJSON,
    SendCompTransactionsStatusFromJSON,
    SendCompTransactionsStatusToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models';

export interface ApproveCompPostingsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    postings?: ApproveCompPostingsRequest;
    acceptLanguage?: string;
}

export interface AuthorizeCompRedemptionsOperationRequest {
    membershipId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    authorizeCompRedemptions?: AuthorizeCompRedemptionsRequest;
    acceptLanguage?: string;
}

export interface GetCompRedemptionsRequest {
    membershipId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    acceptLanguage?: string;
}

export interface PostCompRedemptionsOperationRequest {
    membershipId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    postCompRedemptions?: PostCompRedemptionsRequest;
    acceptLanguage?: string;
}

export interface ReverseCompPostingsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    postings?: ApproveCompPostingsRequest;
    acceptLanguage?: string;
}

export interface ReverseCompRedemptionsOperationRequest {
    membershipId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    reverseCompRedemptions?: ReverseCompRedemptionsRequest;
    acceptLanguage?: string;
}

/**
 * 
 */
export class CashieringApi extends runtime.BaseAPI {

    /**
     * You can use this API to submit Comp Transactions. <p><strong>OperationId:</strong>approveCompPostings</p>
     * Operation to request for comp postings approval.
     */
    async approveCompPostingsRaw(requestParameters: ApproveCompPostingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendCompTransactionsStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/compPostingsApproval`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApproveCompPostingsRequestToJSON(requestParameters.postings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SendCompTransactionsStatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to submit Comp Transactions. <p><strong>OperationId:</strong>approveCompPostings</p>
     * Operation to request for comp postings approval.
     */
    async approveCompPostings(requestParameters: ApproveCompPostingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendCompTransactionsStatus> {
        const response = await this.approveCompPostingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to authorize complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>authorizeCompRedemptions</p>
     * Operation to authorize complimentary redemptions for a guest having PTS Membership Type
     */
    async authorizeCompRedemptionsRaw(requestParameters: AuthorizeCompRedemptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizeCompRedemptionsRS>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/memberships/{membershipId}/compRedemptionAuthorizations`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthorizeCompRedemptionsRequestToJSON(requestParameters.authorizeCompRedemptions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorizeCompRedemptionsRSFromJSON(jsonValue));
    }

    /**
     * You can use this API to authorize complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>authorizeCompRedemptions</p>
     * Operation to authorize complimentary redemptions for a guest having PTS Membership Type
     */
    async authorizeCompRedemptions(requestParameters: AuthorizeCompRedemptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizeCompRedemptionsRS> {
        const response = await this.authorizeCompRedemptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>getCompRedemptions</p>
     * Operation to get complimentary redemptions for a guest having PTS Membership Type
     */
    async getCompRedemptionsRaw(requestParameters: GetCompRedemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchCompRedemptionsRS>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/memberships/{membershipId}/compRedemptions`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchCompRedemptionsRSFromJSON(jsonValue));
    }

    /**
     * You can use this API to get complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>getCompRedemptions</p>
     * Operation to get complimentary redemptions for a guest having PTS Membership Type
     */
    async getCompRedemptions(requestParameters: GetCompRedemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchCompRedemptionsRS> {
        const response = await this.getCompRedemptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to post complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>postCompRedemptions</p>
     * Operation to post complimentary redemptions for a guest having PTS Membership Type
     */
    async postCompRedemptionsRaw(requestParameters: PostCompRedemptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostCompRedemptionsRS>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/memberships/{membershipId}/compRedemptionPostings`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCompRedemptionsRequestToJSON(requestParameters.postCompRedemptions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostCompRedemptionsRSFromJSON(jsonValue));
    }

    /**
     * You can use this API to post complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>postCompRedemptions</p>
     * Operation to post complimentary redemptions for a guest having PTS Membership Type
     */
    async postCompRedemptions(requestParameters: PostCompRedemptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostCompRedemptionsRS> {
        const response = await this.postCompRedemptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to reverse Comp Transactions. <p><strong>OperationId:</strong>reverseCompPostings</p>
     * Operation to request for comp postings reversal.
     */
    async reverseCompPostingsRaw(requestParameters: ReverseCompPostingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/compPostingsReversal`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApproveCompPostingsRequestToJSON(requestParameters.postings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to reverse Comp Transactions. <p><strong>OperationId:</strong>reverseCompPostings</p>
     * Operation to request for comp postings reversal.
     */
    async reverseCompPostings(requestParameters: ReverseCompPostingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.reverseCompPostingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to reverse complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>reverseCompRedemptions</p>
     * Operation to reverse complimentary redemptions for a guest having PTS Membership Type
     */
    async reverseCompRedemptionsRaw(requestParameters: ReverseCompRedemptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/memberships/{membershipId}/compRedemptionReversals`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReverseCompRedemptionsRequestToJSON(requestParameters.reverseCompRedemptions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to reverse complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>reverseCompRedemptions</p>
     * Operation to reverse complimentary redemptions for a guest having PTS Membership Type
     */
    async reverseCompRedemptions(requestParameters: ReverseCompRedemptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.reverseCompRedemptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
