/**
 * OPERA Cloud Cashiering Outbound API
 * APIs to cater for Cashiering related external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AuthorizeCompRedemptionsRQ, AuthorizeCompRedemptionsRS, CompTransactionsCriteriaType, FetchCompRedemptionsRS, PostCompRedemptionsRQ, PostCompRedemptionsRS, ReverseCompRedemptionsRQ, SendCompTransactionsStatus, Status } from '../models/index';
export interface ApproveCompPostingsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    postings: CompTransactionsCriteriaType;
    acceptLanguage?: string;
}
export interface AuthorizeCompRedemptionsRequest {
    membershipId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    authorizeCompRedemptions: AuthorizeCompRedemptionsRQ;
    acceptLanguage?: string;
}
export interface GetCompRedemptionsRequest {
    membershipId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    acceptLanguage?: string;
}
export interface PostCompRedemptionsRequest {
    membershipId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    postCompRedemptions: PostCompRedemptionsRQ;
    acceptLanguage?: string;
}
export interface ReverseCompPostingsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    postings: CompTransactionsCriteriaType;
    acceptLanguage?: string;
}
export interface ReverseCompRedemptionsRequest {
    membershipId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    reverseCompRedemptions: ReverseCompRedemptionsRQ;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class CashieringApi extends runtime.BaseAPI {
    /**
     * You can use this API to submit Comp Transactions. <p><strong>OperationId:</strong>approveCompPostings</p>
     * Operation to request for comp postings approval.
     */
    approveCompPostingsRaw(requestParameters: ApproveCompPostingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendCompTransactionsStatus>>;
    /**
     * You can use this API to submit Comp Transactions. <p><strong>OperationId:</strong>approveCompPostings</p>
     * Operation to request for comp postings approval.
     */
    approveCompPostings(requestParameters: ApproveCompPostingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendCompTransactionsStatus>;
    /**
     * You can use this API to authorize complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>authorizeCompRedemptions</p>
     * Operation to authorize complimentary redemptions for a guest having PTS Membership Type
     */
    authorizeCompRedemptionsRaw(requestParameters: AuthorizeCompRedemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizeCompRedemptionsRS>>;
    /**
     * You can use this API to authorize complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>authorizeCompRedemptions</p>
     * Operation to authorize complimentary redemptions for a guest having PTS Membership Type
     */
    authorizeCompRedemptions(requestParameters: AuthorizeCompRedemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizeCompRedemptionsRS>;
    /**
     * You can use this API to get complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>getCompRedemptions</p>
     * Operation to get complimentary redemptions for a guest having PTS Membership Type
     */
    getCompRedemptionsRaw(requestParameters: GetCompRedemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchCompRedemptionsRS>>;
    /**
     * You can use this API to get complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>getCompRedemptions</p>
     * Operation to get complimentary redemptions for a guest having PTS Membership Type
     */
    getCompRedemptions(requestParameters: GetCompRedemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchCompRedemptionsRS>;
    /**
     * You can use this API to post complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>postCompRedemptions</p>
     * Operation to post complimentary redemptions for a guest having PTS Membership Type
     */
    postCompRedemptionsRaw(requestParameters: PostCompRedemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostCompRedemptionsRS>>;
    /**
     * You can use this API to post complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>postCompRedemptions</p>
     * Operation to post complimentary redemptions for a guest having PTS Membership Type
     */
    postCompRedemptions(requestParameters: PostCompRedemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostCompRedemptionsRS>;
    /**
     * You can use this API to reverse Comp Transactions. <p><strong>OperationId:</strong>reverseCompPostings</p>
     * Operation to request for comp postings reversal.
     */
    reverseCompPostingsRaw(requestParameters: ReverseCompPostingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to reverse Comp Transactions. <p><strong>OperationId:</strong>reverseCompPostings</p>
     * Operation to request for comp postings reversal.
     */
    reverseCompPostings(requestParameters: ReverseCompPostingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to reverse complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>reverseCompRedemptions</p>
     * Operation to reverse complimentary redemptions for a guest having PTS Membership Type
     */
    reverseCompRedemptionsRaw(requestParameters: ReverseCompRedemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to reverse complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>reverseCompRedemptions</p>
     * Operation to reverse complimentary redemptions for a guest having PTS Membership Type
     */
    reverseCompRedemptions(requestParameters: ReverseCompRedemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
}
