"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering Outbound API
 * APIs to cater for Cashiering related external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApproveCompPostingsRequestToJSON = exports.ApproveCompPostingsRequestFromJSONTyped = exports.ApproveCompPostingsRequestFromJSON = exports.instanceOfApproveCompPostingsRequest = void 0;
const runtime_1 = require("../runtime");
const CompTransactionType_1 = require("./CompTransactionType");
/**
 * Check if a given object implements the ApproveCompPostingsRequest interface.
 */
function instanceOfApproveCompPostingsRequest(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfApproveCompPostingsRequest = instanceOfApproveCompPostingsRequest;
function ApproveCompPostingsRequestFromJSON(json) {
    return ApproveCompPostingsRequestFromJSONTyped(json, false);
}
exports.ApproveCompPostingsRequestFromJSON = ApproveCompPostingsRequestFromJSON;
function ApproveCompPostingsRequestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'compPostings': !(0, runtime_1.exists)(json, 'compPostings') ? undefined : (json['compPostings'].map(CompTransactionType_1.CompTransactionTypeFromJSON)),
    };
}
exports.ApproveCompPostingsRequestFromJSONTyped = ApproveCompPostingsRequestFromJSONTyped;
function ApproveCompPostingsRequestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'compPostings': value.compPostings === undefined ? undefined : (value.compPostings.map(CompTransactionType_1.CompTransactionTypeToJSON)),
    };
}
exports.ApproveCompPostingsRequestToJSON = ApproveCompPostingsRequestToJSON;
