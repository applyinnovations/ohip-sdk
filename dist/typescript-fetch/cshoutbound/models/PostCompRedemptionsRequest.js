"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering Outbound API
 * APIs to cater for Cashiering related external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostCompRedemptionsRequestToJSON = exports.PostCompRedemptionsRequestFromJSONTyped = exports.PostCompRedemptionsRequestFromJSON = exports.instanceOfPostCompRedemptionsRequest = void 0;
const runtime_1 = require("../runtime");
const PostCompRedemptionsRQCompRedemptionsType_1 = require("./PostCompRedemptionsRQCompRedemptionsType");
/**
 * Check if a given object implements the PostCompRedemptionsRequest interface.
 */
function instanceOfPostCompRedemptionsRequest(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfPostCompRedemptionsRequest = instanceOfPostCompRedemptionsRequest;
function PostCompRedemptionsRequestFromJSON(json) {
    return PostCompRedemptionsRequestFromJSONTyped(json, false);
}
exports.PostCompRedemptionsRequestFromJSON = PostCompRedemptionsRequestFromJSON;
function PostCompRedemptionsRequestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'compRedemptions': !(0, runtime_1.exists)(json, 'compRedemptions') ? undefined : (0, PostCompRedemptionsRQCompRedemptionsType_1.PostCompRedemptionsRQCompRedemptionsTypeFromJSON)(json['compRedemptions']),
    };
}
exports.PostCompRedemptionsRequestFromJSONTyped = PostCompRedemptionsRequestFromJSONTyped;
function PostCompRedemptionsRequestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'compRedemptions': (0, PostCompRedemptionsRQCompRedemptionsType_1.PostCompRedemptionsRQCompRedemptionsTypeToJSON)(value.compRedemptions),
    };
}
exports.PostCompRedemptionsRequestToJSON = PostCompRedemptionsRequestToJSON;
