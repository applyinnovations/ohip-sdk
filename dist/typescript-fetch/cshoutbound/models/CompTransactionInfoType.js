"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering Outbound API
 * APIs to cater for Cashiering related external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompTransactionInfoTypeToJSON = exports.CompTransactionInfoTypeFromJSONTyped = exports.CompTransactionInfoTypeFromJSON = exports.instanceOfCompTransactionInfoType = void 0;
const runtime_1 = require("../runtime");
const CurrencyAmountType_1 = require("./CurrencyAmountType");
/**
 * Check if a given object implements the CompTransactionInfoType interface.
 */
function instanceOfCompTransactionInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCompTransactionInfoType = instanceOfCompTransactionInfoType;
function CompTransactionInfoTypeFromJSON(json) {
    return CompTransactionInfoTypeFromJSONTyped(json, false);
}
exports.CompTransactionInfoTypeFromJSON = CompTransactionInfoTypeFromJSON;
function CompTransactionInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'transactionId': !(0, runtime_1.exists)(json, 'transactionId') ? undefined : json['transactionId'],
        'transactionCode': !(0, runtime_1.exists)(json, 'transactionCode') ? undefined : json['transactionCode'],
        'transactionDescription': !(0, runtime_1.exists)(json, 'transactionDescription') ? undefined : json['transactionDescription'],
        'roomId': !(0, runtime_1.exists)(json, 'roomId') ? undefined : json['roomId'],
        'confirmationNo': !(0, runtime_1.exists)(json, 'confirmationNo') ? undefined : json['confirmationNo'],
        'approvalDate': !(0, runtime_1.exists)(json, 'approvalDate') ? undefined : (new Date(json['approvalDate'])),
        'approvalStatus': !(0, runtime_1.exists)(json, 'approvalStatus') ? undefined : json['approvalStatus'],
        'approvalCode': !(0, runtime_1.exists)(json, 'approvalCode') ? undefined : json['approvalCode'],
        'approvalMessage': !(0, runtime_1.exists)(json, 'approvalMessage') ? undefined : json['approvalMessage'],
        'amount': !(0, runtime_1.exists)(json, 'amount') ? undefined : (0, CurrencyAmountType_1.CurrencyAmountTypeFromJSON)(json['amount']),
        'name': !(0, runtime_1.exists)(json, 'name') ? undefined : json['name'],
        'firstName': !(0, runtime_1.exists)(json, 'firstName') ? undefined : json['firstName'],
    };
}
exports.CompTransactionInfoTypeFromJSONTyped = CompTransactionInfoTypeFromJSONTyped;
function CompTransactionInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'transactionId': value.transactionId,
        'transactionCode': value.transactionCode,
        'transactionDescription': value.transactionDescription,
        'roomId': value.roomId,
        'confirmationNo': value.confirmationNo,
        'approvalDate': value.approvalDate === undefined ? undefined : (value.approvalDate.toISOString().substr(0, 10)),
        'approvalStatus': value.approvalStatus,
        'approvalCode': value.approvalCode,
        'approvalMessage': value.approvalMessage,
        'amount': (0, CurrencyAmountType_1.CurrencyAmountTypeToJSON)(value.amount),
        'name': value.name,
        'firstName': value.firstName,
    };
}
exports.CompTransactionInfoTypeToJSON = CompTransactionInfoTypeToJSON;
