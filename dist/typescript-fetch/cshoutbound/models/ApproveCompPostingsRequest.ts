/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering Outbound API
 * APIs to cater for Cashiering related external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CompTransactionType } from './CompTransactionType';
import {
    CompTransactionTypeFromJSON,
    CompTransactionTypeFromJSONTyped,
    CompTransactionTypeToJSON,
} from './CompTransactionType';

/**
 * 
 * @export
 * @interface ApproveCompPostingsRequest
 */
export interface ApproveCompPostingsRequest {
    /**
     * List of transactions to be submitted to the vendor.
     * @type {Array<CompTransactionType>}
     * @memberof ApproveCompPostingsRequest
     */
    compPostings?: Array<CompTransactionType>;
}

/**
 * Check if a given object implements the ApproveCompPostingsRequest interface.
 */
export function instanceOfApproveCompPostingsRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ApproveCompPostingsRequestFromJSON(json: any): ApproveCompPostingsRequest {
    return ApproveCompPostingsRequestFromJSONTyped(json, false);
}

export function ApproveCompPostingsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApproveCompPostingsRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'compPostings': !exists(json, 'compPostings') ? undefined : ((json['compPostings'] as Array<any>).map(CompTransactionTypeFromJSON)),
    };
}

export function ApproveCompPostingsRequestToJSON(value?: ApproveCompPostingsRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'compPostings': value.compPostings === undefined ? undefined : ((value.compPostings as Array<any>).map(CompTransactionTypeToJSON)),
    };
}

