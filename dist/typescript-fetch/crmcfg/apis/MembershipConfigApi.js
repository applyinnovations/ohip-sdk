"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetMembershipTypeRulesRuleBasedOnEnum = exports.GetMembershipTypeRulesProgramTypeEnum = exports.GetMembershipTypeRuleFetchInstructionsEnum = exports.GetMembershipTypeFetchInstructionsEnum = exports.MembershipConfigApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class MembershipConfigApi extends runtime.BaseAPI {
    /**
     * You can use this API to delete Membership Awards. <p><strong>OperationId:</strong>deleteMembershipAwards</p>
     * Delete Membership Awards
     */
    deleteMembershipAwardsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipAwardsId === null || requestParameters.membershipAwardsId === undefined) {
                throw new runtime.RequiredError('membershipAwardsId', 'Required parameter requestParameters.membershipAwardsId was null or undefined when calling deleteMembershipAwards.');
            }
            const queryParameters = {};
            if (requestParameters.membershipType) {
                queryParameters['membershipType'] = requestParameters.membershipType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipAwards/{membershipAwardsId}`.replace(`{${"membershipAwardsId"}}`, encodeURIComponent(String(requestParameters.membershipAwardsId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete Membership Awards. <p><strong>OperationId:</strong>deleteMembershipAwards</p>
     * Delete Membership Awards
     */
    deleteMembershipAwards(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteMembershipAwardsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will allow you to delete s Membership Benefit Programs of a Membership Type.  <p><strong>OperationId:</strong>deleteMembershipBenefitPrograms</p>
     * Delete Membership Benedict Program
     */
    deleteMembershipBenefitProgramsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipBenefitProgramsId === null || requestParameters.membershipBenefitProgramsId === undefined) {
                throw new runtime.RequiredError('membershipBenefitProgramsId', 'Required parameter requestParameters.membershipBenefitProgramsId was null or undefined when calling deleteMembershipBenefitPrograms.');
            }
            const queryParameters = {};
            if (requestParameters.membershipType) {
                queryParameters['membershipType'] = requestParameters.membershipType;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipBenefitPrograms/{membershipBenefitProgramsId}`.replace(`{${"membershipBenefitProgramsId"}}`, encodeURIComponent(String(requestParameters.membershipBenefitProgramsId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API will allow you to delete s Membership Benefit Programs of a Membership Type.  <p><strong>OperationId:</strong>deleteMembershipBenefitPrograms</p>
     * Delete Membership Benedict Program
     */
    deleteMembershipBenefitPrograms(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteMembershipBenefitProgramsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete an existing membership class. <p><strong>OperationId:</strong>deleteMembershipClasses</p>
     * Delete Membership classes
     */
    deleteMembershipClassesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipClassId === null || requestParameters.membershipClassId === undefined) {
                throw new runtime.RequiredError('membershipClassId', 'Required parameter requestParameters.membershipClassId was null or undefined when calling deleteMembershipClasses.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipClasses/{membershipClassId}`.replace(`{${"membershipClassId"}}`, encodeURIComponent(String(requestParameters.membershipClassId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete an existing membership class. <p><strong>OperationId:</strong>deleteMembershipClasses</p>
     * Delete Membership classes
     */
    deleteMembershipClasses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteMembershipClassesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * delete an existing membership group. <p><strong>OperationId:</strong>deleteMembershipEnrollmentGroups</p>
     * Remove Membership enrollment groups
     */
    deleteMembershipEnrollmentGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipEnrollmentGroupsId === null || requestParameters.membershipEnrollmentGroupsId === undefined) {
                throw new runtime.RequiredError('membershipEnrollmentGroupsId', 'Required parameter requestParameters.membershipEnrollmentGroupsId was null or undefined when calling deleteMembershipEnrollmentGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipEnrollmentGroups/{membershipEnrollmentGroupsId}`.replace(`{${"membershipEnrollmentGroupsId"}}`, encodeURIComponent(String(requestParameters.membershipEnrollmentGroupsId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * delete an existing membership group. <p><strong>OperationId:</strong>deleteMembershipEnrollmentGroups</p>
     * Remove Membership enrollment groups
     */
    deleteMembershipEnrollmentGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteMembershipEnrollmentGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to delete Membership levels. <p><strong>OperationId:</strong>deleteMembershipLevels</p>
     * Delete Membership levels
     */
    deleteMembershipLevelsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipLevelsId === null || requestParameters.membershipLevelsId === undefined) {
                throw new runtime.RequiredError('membershipLevelsId', 'Required parameter requestParameters.membershipLevelsId was null or undefined when calling deleteMembershipLevels.');
            }
            const queryParameters = {};
            if (requestParameters.type) {
                queryParameters['type'] = requestParameters.type;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipLevels/{membershipLevelsId}`.replace(`{${"membershipLevelsId"}}`, encodeURIComponent(String(requestParameters.membershipLevelsId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete Membership levels. <p><strong>OperationId:</strong>deleteMembershipLevels</p>
     * Delete Membership levels
     */
    deleteMembershipLevels(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteMembershipLevelsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to delete Membership market groups. <p><strong>OperationId:</strong>deleteMembershipMarketGroups</p>
     * Delete Membership market groups
     */
    deleteMembershipMarketGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipMarketGroupId === null || requestParameters.membershipMarketGroupId === undefined) {
                throw new runtime.RequiredError('membershipMarketGroupId', 'Required parameter requestParameters.membershipMarketGroupId was null or undefined when calling deleteMembershipMarketGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipMarketGroups/{membershipMarketGroupId}`.replace(`{${"membershipMarketGroupId"}}`, encodeURIComponent(String(requestParameters.membershipMarketGroupId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete Membership market groups. <p><strong>OperationId:</strong>deleteMembershipMarketGroups</p>
     * Delete Membership market groups
     */
    deleteMembershipMarketGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteMembershipMarketGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to delete Membership property groups. <p><strong>OperationId:</strong>deleteMembershipPropertyGroups</p>
     * Delete Membership property groups
     */
    deleteMembershipPropertyGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipPropertyGroupsId === null || requestParameters.membershipPropertyGroupsId === undefined) {
                throw new runtime.RequiredError('membershipPropertyGroupsId', 'Required parameter requestParameters.membershipPropertyGroupsId was null or undefined when calling deleteMembershipPropertyGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipPropertyGroups/{membershipPropertyGroupsId}`.replace(`{${"membershipPropertyGroupsId"}}`, encodeURIComponent(String(requestParameters.membershipPropertyGroupsId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete Membership property groups. <p><strong>OperationId:</strong>deleteMembershipPropertyGroups</p>
     * Delete Membership property groups
     */
    deleteMembershipPropertyGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteMembershipPropertyGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to delete Membership rate groups. <p><strong>OperationId:</strong>deleteMembershipRateGroups</p>
     * Delete Membership rate groups
     */
    deleteMembershipRateGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipRateGroupId === null || requestParameters.membershipRateGroupId === undefined) {
                throw new runtime.RequiredError('membershipRateGroupId', 'Required parameter requestParameters.membershipRateGroupId was null or undefined when calling deleteMembershipRateGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipRateGroups/{membershipRateGroupId}`.replace(`{${"membershipRateGroupId"}}`, encodeURIComponent(String(requestParameters.membershipRateGroupId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete Membership rate groups. <p><strong>OperationId:</strong>deleteMembershipRateGroups</p>
     * Delete Membership rate groups
     */
    deleteMembershipRateGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteMembershipRateGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to delete Membership type rules. <p><strong>OperationId:</strong>deleteMembershipTypeRules</p>
     * Delete Membership type rules
     */
    deleteMembershipTypeRulesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipTypeRulesId === null || requestParameters.membershipTypeRulesId === undefined) {
                throw new runtime.RequiredError('membershipTypeRulesId', 'Required parameter requestParameters.membershipTypeRulesId was null or undefined when calling deleteMembershipTypeRules.');
            }
            const queryParameters = {};
            if (requestParameters.membershipPointsSequence) {
                queryParameters['membershipPointsSequence'] = requestParameters.membershipPointsSequence;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipTypeRules/{membershipTypeRulesId}`.replace(`{${"membershipTypeRulesId"}}`, encodeURIComponent(String(requestParameters.membershipTypeRulesId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to delete Membership type rules. <p><strong>OperationId:</strong>deleteMembershipTypeRules</p>
     * Delete Membership type rules
     */
    deleteMembershipTypeRules(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteMembershipTypeRulesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete an existing Membership Type <p><strong>OperationId:</strong>deleteMembershipTypes</p>
     * Delete Membership type
     */
    deleteMembershipTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipTypeId === null || requestParameters.membershipTypeId === undefined) {
                throw new runtime.RequiredError('membershipTypeId', 'Required parameter requestParameters.membershipTypeId was null or undefined when calling deleteMembershipTypes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipTypes/{membershipTypeId}`.replace(`{${"membershipTypeId"}}`, encodeURIComponent(String(requestParameters.membershipTypeId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete an existing Membership Type <p><strong>OperationId:</strong>deleteMembershipTypes</p>
     * Delete Membership type
     */
    deleteMembershipTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteMembershipTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Membership Awards. <p><strong>OperationId:</strong>getMembershipAwards</p>
     * Get Membership Awards
     */
    getMembershipAwardsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.membershipType !== undefined) {
                queryParameters['membershipType'] = requestParameters.membershipType;
            }
            if (requestParameters.awardCodes) {
                queryParameters['awardCodes'] = requestParameters.awardCodes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.validForDate !== undefined) {
                queryParameters['validForDate'] = requestParameters.validForDate;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            if (requestParameters.includeDetails !== undefined) {
                queryParameters['includeDetails'] = requestParameters.includeDetails;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipAwards`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipAwardsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Membership Awards. <p><strong>OperationId:</strong>getMembershipAwards</p>
     * Get Membership Awards
     */
    getMembershipAwards(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipAwardsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to fetch Membership Benefit Programs of Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria - primary central setup, not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>getMembershipBenefitPrograms</p>
     * Retrieve a Membership Benefit Program
     */
    getMembershipBenefitProgramsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.membershipType !== undefined) {
                queryParameters['membershipType'] = requestParameters.membershipType;
            }
            if (requestParameters.code !== undefined) {
                queryParameters['code'] = requestParameters.code;
            }
            if (requestParameters.end !== undefined) {
                queryParameters['end'] = requestParameters.end;
            }
            if (requestParameters.start !== undefined) {
                queryParameters['start'] = requestParameters.start;
            }
            if (requestParameters.minimumLevel !== undefined) {
                queryParameters['minimumLevel'] = requestParameters.minimumLevel;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipBenefitPrograms`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipBenefitProgramsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to fetch Membership Benefit Programs of Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria - primary central setup, not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>getMembershipBenefitPrograms</p>
     * Retrieve a Membership Benefit Program
     */
    getMembershipBenefitPrograms(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipBenefitProgramsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve a list of membership classes that are configured. <p><strong>OperationId:</strong>getMembershipClasses</p>
     * Get Membership classes
     */
    getMembershipClassesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipClasses`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipClassesInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve a list of membership classes that are configured. <p><strong>OperationId:</strong>getMembershipClasses</p>
     * Get Membership classes
     */
    getMembershipClasses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipClassesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve a list of membership Enrollment Groups that are configured. <p><strong>OperationId:</strong>getMembershipEnrollmentGroups</p>
     * Get Membership enrollment groups
     */
    getMembershipEnrollmentGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.enrollmentCodes) {
                queryParameters['enrollmentCodes'] = requestParameters.enrollmentCodes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipEnrollmentGroups`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipEnrollmentGroupsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve a list of membership Enrollment Groups that are configured. <p><strong>OperationId:</strong>getMembershipEnrollmentGroups</p>
     * Get Membership enrollment groups
     */
    getMembershipEnrollmentGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipEnrollmentGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Membership levels. <p><strong>OperationId:</strong>getMembershipLevels</p>
     * Get Membership levels
     */
    getMembershipLevelsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipTypeCode === null || requestParameters.membershipTypeCode === undefined) {
                throw new runtime.RequiredError('membershipTypeCode', 'Required parameter requestParameters.membershipTypeCode was null or undefined when calling getMembershipLevels.');
            }
            const queryParameters = {};
            if (requestParameters.membershipTypeCode !== undefined) {
                queryParameters['membershipTypeCode'] = requestParameters.membershipTypeCode;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            if (requestParameters.includeFolioTexts !== undefined) {
                queryParameters['includeFolioTexts'] = requestParameters.includeFolioTexts;
            }
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipLevels`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipLevelsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Membership levels. <p><strong>OperationId:</strong>getMembershipLevels</p>
     * Get Membership levels
     */
    getMembershipLevels(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipLevelsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Membership market groups. <p><strong>OperationId:</strong>getMembershipMarketGroups</p>
     * Get Membership market groups
     */
    getMembershipMarketGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipMarketGroups`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipMarketGroupsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Membership market groups. <p><strong>OperationId:</strong>getMembershipMarketGroups</p>
     * Get Membership market groups
     */
    getMembershipMarketGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipMarketGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Membership property groups. <p><strong>OperationId:</strong>getMembershipPropertyGroups</p>
     * Get Membership property groups
     */
    getMembershipPropertyGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipPropertyGroups`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipPropertyGroupsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Membership property groups. <p><strong>OperationId:</strong>getMembershipPropertyGroups</p>
     * Get Membership property groups
     */
    getMembershipPropertyGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipPropertyGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Membership rate groups. <p><strong>OperationId:</strong>getMembershipRateGroups</p>
     * Get Membership rate groups
     */
    getMembershipRateGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipRateGroups`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipRateGroupsInfoFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Membership rate groups. <p><strong>OperationId:</strong>getMembershipRateGroups</p>
     * Get Membership rate groups
     */
    getMembershipRateGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipRateGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to get a specific Membership Type and its details. <p><strong>OperationId:</strong>getMembershipType</p>
     * Get a Membership type
     */
    getMembershipTypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipTypeId === null || requestParameters.membershipTypeId === undefined) {
                throw new runtime.RequiredError('membershipTypeId', 'Required parameter requestParameters.membershipTypeId was null or undefined when calling getMembershipType.');
            }
            const queryParameters = {};
            if (requestParameters.membershipTypeCode !== undefined) {
                queryParameters['membershipTypeCode'] = requestParameters.membershipTypeCode;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipTypes/{membershipTypeId}`.replace(`{${"membershipTypeId"}}`, encodeURIComponent(String(requestParameters.membershipTypeId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipTypesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get a specific Membership Type and its details. <p><strong>OperationId:</strong>getMembershipType</p>
     * Get a Membership type
     */
    getMembershipType(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipTypeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to get Membership type rule details. <p><strong>OperationId:</strong>getMembershipTypeRule</p>
     * Get Membership type rule details
     */
    getMembershipTypeRuleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipTypeRulesId === null || requestParameters.membershipTypeRulesId === undefined) {
                throw new runtime.RequiredError('membershipTypeRulesId', 'Required parameter requestParameters.membershipTypeRulesId was null or undefined when calling getMembershipTypeRule.');
            }
            const queryParameters = {};
            if (requestParameters.membershipType !== undefined) {
                queryParameters['membershipType'] = requestParameters.membershipType;
            }
            if (requestParameters.membershipPointsSequence !== undefined) {
                queryParameters['membershipPointsSequence'] = requestParameters.membershipPointsSequence;
            }
            if (requestParameters.fetchInstructions) {
                queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipTypeRules/{membershipTypeRulesId}`.replace(`{${"membershipTypeRulesId"}}`, encodeURIComponent(String(requestParameters.membershipTypeRulesId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipTypeRuleFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to get Membership type rule details. <p><strong>OperationId:</strong>getMembershipTypeRule</p>
     * Get Membership type rule details
     */
    getMembershipTypeRule(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipTypeRuleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * get Membership type rules based on criteria <p><strong>OperationId:</strong>getMembershipTypeRules</p>
     * Get Membership type rules
     */
    getMembershipTypeRulesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.membershipTypesCodes) {
                queryParameters['membershipTypesCodes'] = requestParameters.membershipTypesCodes;
            }
            if (requestParameters.programType !== undefined) {
                queryParameters['programType'] = requestParameters.programType;
            }
            if (requestParameters.ruleCode !== undefined) {
                queryParameters['ruleCode'] = requestParameters.ruleCode;
            }
            if (requestParameters.ruleBasedOn !== undefined) {
                queryParameters['ruleBasedOn'] = requestParameters.ruleBasedOn;
            }
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipTypeRules`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipTypeRulesInfoFromJSON)(jsonValue));
        });
    }
    /**
     * get Membership type rules based on criteria <p><strong>OperationId:</strong>getMembershipTypeRules</p>
     * Get Membership type rules
     */
    getMembershipTypeRules(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipTypeRulesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Membership types enable you to identify, organize, and manage the membership programs on a profile. For example, your property might have a guest loyalty program that awards guests based on the amount of revenue generated or the number of stays per year. You would create a specific membership type for this program. This API will retrieve all configured Membership Types configured.<p><strong>OperationId:</strong>getMembershipTypes</p>
     * Get membership types
     */
    getMembershipTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.includeInactive !== undefined) {
                queryParameters['includeInactive'] = requestParameters.includeInactive;
            }
            if (requestParameters.membershipTypesCodes) {
                queryParameters['membershipTypesCodes'] = requestParameters.membershipTypesCodes;
            }
            if (requestParameters.membershipTypesWildCard !== undefined) {
                queryParameters['membershipTypesWildCard'] = requestParameters.membershipTypesWildCard;
            }
            if (requestParameters.membershipClassesCodes) {
                queryParameters['membershipClassesCodes'] = requestParameters.membershipClassesCodes;
            }
            if (requestParameters.membershipClassesWildCard !== undefined) {
                queryParameters['membershipClassesWildCard'] = requestParameters.membershipClassesWildCard;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipTypes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipTypesFromJSON)(jsonValue));
        });
    }
    /**
     * Membership types enable you to identify, organize, and manage the membership programs on a profile. For example, your property might have a guest loyalty program that awards guests based on the amount of revenue generated or the number of stays per year. You would create a specific membership type for this program. This API will retrieve all configured Membership Types configured.<p><strong>OperationId:</strong>getMembershipTypes</p>
     * Get membership types
     */
    getMembershipTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMembershipTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Membership Awards. <p><strong>OperationId:</strong>postMembershipAwards</p>
     * Create Membership Awards
     */
    postMembershipAwardsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipAwards === null || requestParameters.membershipAwards === undefined) {
                throw new runtime.RequiredError('membershipAwards', 'Required parameter requestParameters.membershipAwards was null or undefined when calling postMembershipAwards.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipAwards`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipAwardsToJSON)(requestParameters.membershipAwards),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Membership Awards. <p><strong>OperationId:</strong>postMembershipAwards</p>
     * Create Membership Awards
     */
    postMembershipAwards(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postMembershipAwardsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API is used to create Membership Benefit Programs of a Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria  - primary  central setup,  not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>postMembershipBenefitPrograms</p>
     * Create Membership Benefit Program
     */
    postMembershipBenefitProgramsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipBenefitPrograms === null || requestParameters.membershipBenefitPrograms === undefined) {
                throw new runtime.RequiredError('membershipBenefitPrograms', 'Required parameter requestParameters.membershipBenefitPrograms was null or undefined when calling postMembershipBenefitPrograms.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipBenefitPrograms`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipBenefitProgramsToJSON)(requestParameters.membershipBenefitPrograms),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API is used to create Membership Benefit Programs of a Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria  - primary  central setup,  not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>postMembershipBenefitPrograms</p>
     * Create Membership Benefit Program
     */
    postMembershipBenefitPrograms(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postMembershipBenefitProgramsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new membership class. <p><strong>OperationId:</strong>postMembershipClasses</p>
     * Create Membership classes
     */
    postMembershipClassesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipClasses === null || requestParameters.membershipClasses === undefined) {
                throw new runtime.RequiredError('membershipClasses', 'Required parameter requestParameters.membershipClasses was null or undefined when calling postMembershipClasses.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipClasses`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipClassesToJSON)(requestParameters.membershipClasses),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new membership class. <p><strong>OperationId:</strong>postMembershipClasses</p>
     * Create Membership classes
     */
    postMembershipClasses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postMembershipClassesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new membership enrollment group. <p><strong>OperationId:</strong>postMembershipEnrollmentGroups</p>
     * Create Membership enrollment groups
     */
    postMembershipEnrollmentGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipEnrollmentGroups === null || requestParameters.membershipEnrollmentGroups === undefined) {
                throw new runtime.RequiredError('membershipEnrollmentGroups', 'Required parameter requestParameters.membershipEnrollmentGroups was null or undefined when calling postMembershipEnrollmentGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipEnrollmentGroups`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipEnrollmentGroupsToJSON)(requestParameters.membershipEnrollmentGroups),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new membership enrollment group. <p><strong>OperationId:</strong>postMembershipEnrollmentGroups</p>
     * Create Membership enrollment groups
     */
    postMembershipEnrollmentGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postMembershipEnrollmentGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to Set Membership folio texts. <p><strong>OperationId:</strong>postMembershipFolioTexts</p>
     * Set Membership folio texts
     */
    postMembershipFolioTextsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipFolioTexts === null || requestParameters.membershipFolioTexts === undefined) {
                throw new runtime.RequiredError('membershipFolioTexts', 'Required parameter requestParameters.membershipFolioTexts was null or undefined when calling postMembershipFolioTexts.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipFolioTexts`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipFolioTextsToJSON)(requestParameters.membershipFolioTexts),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to Set Membership folio texts. <p><strong>OperationId:</strong>postMembershipFolioTexts</p>
     * Set Membership folio texts
     */
    postMembershipFolioTexts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postMembershipFolioTextsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Membership levels. <p><strong>OperationId:</strong>postMembershipLevels</p>
     * Create Membership levels
     */
    postMembershipLevelsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipLevels === null || requestParameters.membershipLevels === undefined) {
                throw new runtime.RequiredError('membershipLevels', 'Required parameter requestParameters.membershipLevels was null or undefined when calling postMembershipLevels.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipLevels`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipLevelsToJSON)(requestParameters.membershipLevels),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Membership levels. <p><strong>OperationId:</strong>postMembershipLevels</p>
     * Create Membership levels
     */
    postMembershipLevels(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postMembershipLevelsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Membership market groups. <p><strong>OperationId:</strong>postMembershipMarketGroups</p>
     * Create Membership market groups
     */
    postMembershipMarketGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipMarketGroups === null || requestParameters.membershipMarketGroups === undefined) {
                throw new runtime.RequiredError('membershipMarketGroups', 'Required parameter requestParameters.membershipMarketGroups was null or undefined when calling postMembershipMarketGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipMarketGroups`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipMarketGroupsToJSON)(requestParameters.membershipMarketGroups),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Membership market groups. <p><strong>OperationId:</strong>postMembershipMarketGroups</p>
     * Create Membership market groups
     */
    postMembershipMarketGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postMembershipMarketGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Membership property groups. <p><strong>OperationId:</strong>postMembershipPropertyGroups</p>
     * Create Membership property groups
     */
    postMembershipPropertyGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipPropertyGroups === null || requestParameters.membershipPropertyGroups === undefined) {
                throw new runtime.RequiredError('membershipPropertyGroups', 'Required parameter requestParameters.membershipPropertyGroups was null or undefined when calling postMembershipPropertyGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipPropertyGroups`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipPropertyGroupsToJSON)(requestParameters.membershipPropertyGroups),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Membership property groups. <p><strong>OperationId:</strong>postMembershipPropertyGroups</p>
     * Create Membership property groups
     */
    postMembershipPropertyGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postMembershipPropertyGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Membership rate groups. <p><strong>OperationId:</strong>postMembershipRateGroups</p>
     * Create Membership rate groups
     */
    postMembershipRateGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipRateGroups === null || requestParameters.membershipRateGroups === undefined) {
                throw new runtime.RequiredError('membershipRateGroups', 'Required parameter requestParameters.membershipRateGroups was null or undefined when calling postMembershipRateGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipRateGroups`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipRateGroupsToJSON)(requestParameters.membershipRateGroups),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Membership rate groups. <p><strong>OperationId:</strong>postMembershipRateGroups</p>
     * Create Membership rate groups
     */
    postMembershipRateGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postMembershipRateGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to create Membership type rules. <p><strong>OperationId:</strong>postMembershipTypeRules</p>
     * Create Membership type rules
     */
    postMembershipTypeRulesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipTypeRules === null || requestParameters.membershipTypeRules === undefined) {
                throw new runtime.RequiredError('membershipTypeRules', 'Required parameter requestParameters.membershipTypeRules was null or undefined when calling postMembershipTypeRules.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipTypeRules`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipTypeRulesToJSON)(requestParameters.membershipTypeRules),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipTypeRulesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to create Membership type rules. <p><strong>OperationId:</strong>postMembershipTypeRules</p>
     * Create Membership type rules
     */
    postMembershipTypeRules(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postMembershipTypeRulesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Membership types enable you to identify, organize, and manage the membership programs on a profile. For example, your property might have a guest loyalty program that awards guests based on the amount of revenue generated or the number of stays per year. You would create a specific membership type for this program. <p><strong>OperationId:</strong>postMembershipTypes</p>
     * Create Membership types
     */
    postMembershipTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipTypes === null || requestParameters.membershipTypes === undefined) {
                throw new runtime.RequiredError('membershipTypes', 'Required parameter requestParameters.membershipTypes was null or undefined when calling postMembershipTypes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipTypes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipTypesToJSON)(requestParameters.membershipTypes),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Membership types enable you to identify, organize, and manage the membership programs on a profile. For example, your property might have a guest loyalty program that awards guests based on the amount of revenue generated or the number of stays per year. You would create a specific membership type for this program. <p><strong>OperationId:</strong>postMembershipTypes</p>
     * Create Membership types
     */
    postMembershipTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postMembershipTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to change Membership Awards. <p><strong>OperationId:</strong>putMembershipAwards</p>
     * Change Membership Awards
     */
    putMembershipAwardsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipAwardsId === null || requestParameters.membershipAwardsId === undefined) {
                throw new runtime.RequiredError('membershipAwardsId', 'Required parameter requestParameters.membershipAwardsId was null or undefined when calling putMembershipAwards.');
            }
            if (requestParameters.membershipAwards === null || requestParameters.membershipAwards === undefined) {
                throw new runtime.RequiredError('membershipAwards', 'Required parameter requestParameters.membershipAwards was null or undefined when calling putMembershipAwards.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipAwards/{membershipAwardsId}`.replace(`{${"membershipAwardsId"}}`, encodeURIComponent(String(requestParameters.membershipAwardsId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipAwardsToJSON)(requestParameters.membershipAwards),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to change Membership Awards. <p><strong>OperationId:</strong>putMembershipAwards</p>
     * Change Membership Awards
     */
    putMembershipAwards(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putMembershipAwardsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API allows you to modify Membership Benefit Programs of Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria  - primary central setup, not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>putMembershipBenefitPrograms</p>
     * Change Membership Benefit Program
     */
    putMembershipBenefitProgramsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipBenefitProgramsId === null || requestParameters.membershipBenefitProgramsId === undefined) {
                throw new runtime.RequiredError('membershipBenefitProgramsId', 'Required parameter requestParameters.membershipBenefitProgramsId was null or undefined when calling putMembershipBenefitPrograms.');
            }
            if (requestParameters.membershipBenefitPrograms === null || requestParameters.membershipBenefitPrograms === undefined) {
                throw new runtime.RequiredError('membershipBenefitPrograms', 'Required parameter requestParameters.membershipBenefitPrograms was null or undefined when calling putMembershipBenefitPrograms.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipBenefitPrograms/{membershipBenefitProgramsId}`.replace(`{${"membershipBenefitProgramsId"}}`, encodeURIComponent(String(requestParameters.membershipBenefitProgramsId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipBenefitProgramsToJSON)(requestParameters.membershipBenefitPrograms),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This API allows you to modify Membership Benefit Programs of Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria  - primary central setup, not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>putMembershipBenefitPrograms</p>
     * Change Membership Benefit Program
     */
    putMembershipBenefitPrograms(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putMembershipBenefitProgramsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update an existing membership class <p><strong>OperationId:</strong>putMembershipClasses</p>
     * Change Membership classes
     */
    putMembershipClassesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipClassId === null || requestParameters.membershipClassId === undefined) {
                throw new runtime.RequiredError('membershipClassId', 'Required parameter requestParameters.membershipClassId was null or undefined when calling putMembershipClasses.');
            }
            if (requestParameters.membershipClasses === null || requestParameters.membershipClasses === undefined) {
                throw new runtime.RequiredError('membershipClasses', 'Required parameter requestParameters.membershipClasses was null or undefined when calling putMembershipClasses.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipClasses/{membershipClassId}`.replace(`{${"membershipClassId"}}`, encodeURIComponent(String(requestParameters.membershipClassId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipClassesToJSON)(requestParameters.membershipClasses),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipClassesInfoFromJSON)(jsonValue));
        });
    }
    /**
     * Update an existing membership class <p><strong>OperationId:</strong>putMembershipClasses</p>
     * Change Membership classes
     */
    putMembershipClasses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putMembershipClassesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update an existing membership group. <p><strong>OperationId:</strong>putMembershipEnrollmentGroups</p>
     * Change Membership enrollment groups
     */
    putMembershipEnrollmentGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipEnrollmentGroupsId === null || requestParameters.membershipEnrollmentGroupsId === undefined) {
                throw new runtime.RequiredError('membershipEnrollmentGroupsId', 'Required parameter requestParameters.membershipEnrollmentGroupsId was null or undefined when calling putMembershipEnrollmentGroups.');
            }
            if (requestParameters.membershipEnrollmentGroups === null || requestParameters.membershipEnrollmentGroups === undefined) {
                throw new runtime.RequiredError('membershipEnrollmentGroups', 'Required parameter requestParameters.membershipEnrollmentGroups was null or undefined when calling putMembershipEnrollmentGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipEnrollmentGroups/{membershipEnrollmentGroupsId}`.replace(`{${"membershipEnrollmentGroupsId"}}`, encodeURIComponent(String(requestParameters.membershipEnrollmentGroupsId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipEnrollmentGroupsToJSON)(requestParameters.membershipEnrollmentGroups),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Update an existing membership group. <p><strong>OperationId:</strong>putMembershipEnrollmentGroups</p>
     * Change Membership enrollment groups
     */
    putMembershipEnrollmentGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putMembershipEnrollmentGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to change Membership levels. <p><strong>OperationId:</strong>putMembershipLevels</p>
     * Change Membership levels
     */
    putMembershipLevelsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipLevelsId === null || requestParameters.membershipLevelsId === undefined) {
                throw new runtime.RequiredError('membershipLevelsId', 'Required parameter requestParameters.membershipLevelsId was null or undefined when calling putMembershipLevels.');
            }
            if (requestParameters.membershipLevels === null || requestParameters.membershipLevels === undefined) {
                throw new runtime.RequiredError('membershipLevels', 'Required parameter requestParameters.membershipLevels was null or undefined when calling putMembershipLevels.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipLevels/{membershipLevelsId}`.replace(`{${"membershipLevelsId"}}`, encodeURIComponent(String(requestParameters.membershipLevelsId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipLevelsToJSON)(requestParameters.membershipLevels),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to change Membership levels. <p><strong>OperationId:</strong>putMembershipLevels</p>
     * Change Membership levels
     */
    putMembershipLevels(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putMembershipLevelsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to change Membership market groups. <p><strong>OperationId:</strong>putMembershipMarketGroups</p>
     * Change Membership market groups
     */
    putMembershipMarketGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipMarketGroupId === null || requestParameters.membershipMarketGroupId === undefined) {
                throw new runtime.RequiredError('membershipMarketGroupId', 'Required parameter requestParameters.membershipMarketGroupId was null or undefined when calling putMembershipMarketGroups.');
            }
            if (requestParameters.membershipMarketGroups === null || requestParameters.membershipMarketGroups === undefined) {
                throw new runtime.RequiredError('membershipMarketGroups', 'Required parameter requestParameters.membershipMarketGroups was null or undefined when calling putMembershipMarketGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipMarketGroups/{membershipMarketGroupId}`.replace(`{${"membershipMarketGroupId"}}`, encodeURIComponent(String(requestParameters.membershipMarketGroupId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipMarketGroupsToJSON)(requestParameters.membershipMarketGroups),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to change Membership market groups. <p><strong>OperationId:</strong>putMembershipMarketGroups</p>
     * Change Membership market groups
     */
    putMembershipMarketGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putMembershipMarketGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to change Membership property groups. <p><strong>OperationId:</strong>putMembershipPropertyGroups</p>
     * Change Membership property groups
     */
    putMembershipPropertyGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipPropertyGroupsId === null || requestParameters.membershipPropertyGroupsId === undefined) {
                throw new runtime.RequiredError('membershipPropertyGroupsId', 'Required parameter requestParameters.membershipPropertyGroupsId was null or undefined when calling putMembershipPropertyGroups.');
            }
            if (requestParameters.membershipPropertyGroups === null || requestParameters.membershipPropertyGroups === undefined) {
                throw new runtime.RequiredError('membershipPropertyGroups', 'Required parameter requestParameters.membershipPropertyGroups was null or undefined when calling putMembershipPropertyGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipPropertyGroups/{membershipPropertyGroupsId}`.replace(`{${"membershipPropertyGroupsId"}}`, encodeURIComponent(String(requestParameters.membershipPropertyGroupsId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipPropertyGroupsToJSON)(requestParameters.membershipPropertyGroups),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to change Membership property groups. <p><strong>OperationId:</strong>putMembershipPropertyGroups</p>
     * Change Membership property groups
     */
    putMembershipPropertyGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putMembershipPropertyGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to change Membership rate groups. <p><strong>OperationId:</strong>putMembershipRateGroups</p>
     * Change Membership rate groups
     */
    putMembershipRateGroupsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipRateGroupId === null || requestParameters.membershipRateGroupId === undefined) {
                throw new runtime.RequiredError('membershipRateGroupId', 'Required parameter requestParameters.membershipRateGroupId was null or undefined when calling putMembershipRateGroups.');
            }
            if (requestParameters.membershipRateGroups === null || requestParameters.membershipRateGroups === undefined) {
                throw new runtime.RequiredError('membershipRateGroups', 'Required parameter requestParameters.membershipRateGroups was null or undefined when calling putMembershipRateGroups.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipRateGroups/{membershipRateGroupId}`.replace(`{${"membershipRateGroupId"}}`, encodeURIComponent(String(requestParameters.membershipRateGroupId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipRateGroupsToJSON)(requestParameters.membershipRateGroups),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to change Membership rate groups. <p><strong>OperationId:</strong>putMembershipRateGroups</p>
     * Change Membership rate groups
     */
    putMembershipRateGroups(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putMembershipRateGroupsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update an existing Membership Type <p><strong>OperationId:</strong>putMembershipType</p>
     * Change Membership type
     */
    putMembershipTypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipTypeId === null || requestParameters.membershipTypeId === undefined) {
                throw new runtime.RequiredError('membershipTypeId', 'Required parameter requestParameters.membershipTypeId was null or undefined when calling putMembershipType.');
            }
            if (requestParameters.membershipTypeChangeInstructions === null || requestParameters.membershipTypeChangeInstructions === undefined) {
                throw new runtime.RequiredError('membershipTypeChangeInstructions', 'Required parameter requestParameters.membershipTypeChangeInstructions was null or undefined when calling putMembershipType.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipTypes/{membershipTypeId}`.replace(`{${"membershipTypeId"}}`, encodeURIComponent(String(requestParameters.membershipTypeId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipTypeChangeInstructionsToJSON)(requestParameters.membershipTypeChangeInstructions),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MembershipTypesFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update an existing Membership Type <p><strong>OperationId:</strong>putMembershipType</p>
     * Change Membership type
     */
    putMembershipType(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putMembershipTypeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can use this API to change Membership type rules. <p><strong>OperationId:</strong>putMembershipTypeRules</p>
     * Change Membership type rules
     */
    putMembershipTypeRulesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.membershipTypeRulesId === null || requestParameters.membershipTypeRulesId === undefined) {
                throw new runtime.RequiredError('membershipTypeRulesId', 'Required parameter requestParameters.membershipTypeRulesId was null or undefined when calling putMembershipTypeRules.');
            }
            if (requestParameters.membershipTypeRules === null || requestParameters.membershipTypeRules === undefined) {
                throw new runtime.RequiredError('membershipTypeRules', 'Required parameter requestParameters.membershipTypeRules was null or undefined when calling putMembershipTypeRules.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/membershipTypeRules/{membershipTypeRulesId}`.replace(`{${"membershipTypeRulesId"}}`, encodeURIComponent(String(requestParameters.membershipTypeRulesId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MembershipTypeRulesToJSON)(requestParameters.membershipTypeRules),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can use this API to change Membership type rules. <p><strong>OperationId:</strong>putMembershipTypeRules</p>
     * Change Membership type rules
     */
    putMembershipTypeRules(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putMembershipTypeRulesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.MembershipConfigApi = MembershipConfigApi;
/**
 * @export
 */
exports.GetMembershipTypeFetchInstructionsEnum = {
    PrimaryDetails: 'PrimaryDetails',
    CardNumberDetails: 'CardNumberDetails',
    PointsDetails: 'PointsDetails',
    ExceptionCriteriaDetails: 'ExceptionCriteriaDetails',
    AdditionalDetails: 'AdditionalDetails',
    EnrollmentDetails: 'EnrollmentDetails',
    Levels: 'Levels'
};
/**
 * @export
 */
exports.GetMembershipTypeRuleFetchInstructionsEnum = {
    RuleDefinition: 'RuleDefinition',
    PointsDefinition: 'PointsDefinition',
    RuleConditions: 'RuleConditions'
};
/**
 * @export
 */
exports.GetMembershipTypeRulesProgramTypeEnum = {
    All: 'All',
    Points: 'Points',
    Tier: 'Tier'
};
/**
 * @export
 */
exports.GetMembershipTypeRulesRuleBasedOnEnum = {
    Revenue: 'Revenue',
    Stay: 'Stay',
    Nights: 'Nights',
    Enrollment: 'Enrollment',
    TierUpgrade: 'TierUpgrade',
    Renewal: 'Renewal',
    Rfm: 'Rfm'
};
