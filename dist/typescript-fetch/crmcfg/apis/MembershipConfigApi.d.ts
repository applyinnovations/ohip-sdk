/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { MembershipAwardsInfo, MembershipBenefitProgramsInfo, MembershipClassesInfo, MembershipEnrollmentGroupsInfo, MembershipLevelsInfo, MembershipMarketGroupsInfo, MembershipPropertyGroupsInfo, MembershipRateGroupsInfo, MembershipTypeRule, MembershipTypeRulesDetails, MembershipTypeRulesInfo, MembershipTypes, MembershipTypesDetails, PostMembershipAwardsRequest, PostMembershipBenefitProgramsRequest, PostMembershipClassesRequest, PostMembershipEnrollmentGroupsRequest, PostMembershipFolioTextsRequest, PostMembershipLevelsRequest, PostMembershipMarketGroupsRequest, PostMembershipPropertyGroupsRequest, PostMembershipRateGroupsRequest, PostMembershipTypeRulesRequest, PostMembershipTypesRequest, PutMembershipTypeRequest, Status } from '../models';
export interface DeleteMembershipAwardsRequest {
    membershipAwardsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteMembershipBenefitProgramsRequest {
    membershipBenefitProgramsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteMembershipClassesRequest {
    membershipClassId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteMembershipEnrollmentGroupsRequest {
    membershipEnrollmentGroupsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteMembershipLevelsRequest {
    membershipLevelsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    type?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteMembershipMarketGroupsRequest {
    membershipMarketGroupId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteMembershipPropertyGroupsRequest {
    membershipPropertyGroupsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteMembershipRateGroupsRequest {
    membershipRateGroupId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteMembershipTypeRulesRequest {
    membershipTypeRulesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipPointsSequence?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteMembershipTypesRequest {
    membershipTypeId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipAwardsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipType?: string;
    awardCodes?: Array<string>;
    wildCard?: string;
    description?: string;
    validForDate?: Date;
    includeInactive?: boolean;
    includeDetails?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipBenefitProgramsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipType?: string;
    code?: string;
    end?: Date;
    start?: Date;
    minimumLevel?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipClassesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipEnrollmentGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    enrollmentCodes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipLevelsRequest {
    membershipTypeCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactive?: boolean;
    includeFolioTexts?: boolean;
    hotelIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipMarketGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipPropertyGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipRateGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipTypeRequest {
    membershipTypeId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipTypeCode?: string;
    fetchInstructions?: Set<GetMembershipTypeFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipTypeRuleRequest {
    membershipTypeRulesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipType?: string;
    membershipPointsSequence?: number;
    fetchInstructions?: Set<GetMembershipTypeRuleFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipTypeRulesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipTypesCodes?: Array<string>;
    programType?: GetMembershipTypeRulesProgramTypeEnum;
    ruleCode?: string;
    ruleBasedOn?: GetMembershipTypeRulesRuleBasedOnEnum;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetMembershipTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactive?: boolean;
    membershipTypesCodes?: Array<string>;
    membershipTypesWildCard?: string;
    membershipClassesCodes?: Array<string>;
    membershipClassesWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostMembershipAwardsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipAwards?: PostMembershipAwardsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostMembershipBenefitProgramsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipBenefitPrograms?: PostMembershipBenefitProgramsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostMembershipClassesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipClasses?: PostMembershipClassesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostMembershipEnrollmentGroupsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipEnrollmentGroups?: PostMembershipEnrollmentGroupsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostMembershipFolioTextsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipFolioTexts?: PostMembershipFolioTextsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostMembershipLevelsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipLevels?: PostMembershipLevelsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostMembershipMarketGroupsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipMarketGroups?: PostMembershipMarketGroupsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostMembershipPropertyGroupsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipPropertyGroups?: PostMembershipPropertyGroupsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostMembershipRateGroupsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipRateGroups?: PostMembershipRateGroupsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostMembershipTypeRulesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipTypeRules?: PostMembershipTypeRulesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostMembershipTypesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipTypes?: PostMembershipTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutMembershipAwardsRequest {
    membershipAwardsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipAwards?: PostMembershipAwardsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutMembershipBenefitProgramsRequest {
    membershipBenefitProgramsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipBenefitPrograms?: PostMembershipBenefitProgramsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutMembershipClassesRequest {
    membershipClassId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipClasses?: PostMembershipClassesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutMembershipEnrollmentGroupsRequest {
    membershipEnrollmentGroupsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipEnrollmentGroups?: PostMembershipEnrollmentGroupsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutMembershipLevelsRequest {
    membershipLevelsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipLevels?: PostMembershipLevelsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutMembershipMarketGroupsRequest {
    membershipMarketGroupId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipMarketGroups?: PostMembershipMarketGroupsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutMembershipPropertyGroupsRequest {
    membershipPropertyGroupsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipPropertyGroups?: PostMembershipPropertyGroupsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutMembershipRateGroupsRequest {
    membershipRateGroupId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipRateGroups?: PostMembershipRateGroupsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutMembershipTypeOperationRequest {
    membershipTypeId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipTypeChangeInstructions?: PutMembershipTypeRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutMembershipTypeRulesRequest {
    membershipTypeRulesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipTypeRules?: PostMembershipTypeRulesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class MembershipConfigApi extends runtime.BaseAPI {
    /**
     * You can use this API to delete Membership Awards. <p><strong>OperationId:</strong>deleteMembershipAwards</p>
     * Delete Membership Awards
     */
    deleteMembershipAwardsRaw(requestParameters: DeleteMembershipAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to delete Membership Awards. <p><strong>OperationId:</strong>deleteMembershipAwards</p>
     * Delete Membership Awards
     */
    deleteMembershipAwards(requestParameters: DeleteMembershipAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API will allow you to delete s Membership Benefit Programs of a Membership Type.  <p><strong>OperationId:</strong>deleteMembershipBenefitPrograms</p>
     * Delete Membership Benedict Program
     */
    deleteMembershipBenefitProgramsRaw(requestParameters: DeleteMembershipBenefitProgramsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API will allow you to delete s Membership Benefit Programs of a Membership Type.  <p><strong>OperationId:</strong>deleteMembershipBenefitPrograms</p>
     * Delete Membership Benedict Program
     */
    deleteMembershipBenefitPrograms(requestParameters: DeleteMembershipBenefitProgramsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Delete an existing membership class. <p><strong>OperationId:</strong>deleteMembershipClasses</p>
     * Delete Membership classes
     */
    deleteMembershipClassesRaw(requestParameters: DeleteMembershipClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Delete an existing membership class. <p><strong>OperationId:</strong>deleteMembershipClasses</p>
     * Delete Membership classes
     */
    deleteMembershipClasses(requestParameters: DeleteMembershipClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * delete an existing membership group. <p><strong>OperationId:</strong>deleteMembershipEnrollmentGroups</p>
     * Remove Membership enrollment groups
     */
    deleteMembershipEnrollmentGroupsRaw(requestParameters: DeleteMembershipEnrollmentGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * delete an existing membership group. <p><strong>OperationId:</strong>deleteMembershipEnrollmentGroups</p>
     * Remove Membership enrollment groups
     */
    deleteMembershipEnrollmentGroups(requestParameters: DeleteMembershipEnrollmentGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to delete Membership levels. <p><strong>OperationId:</strong>deleteMembershipLevels</p>
     * Delete Membership levels
     */
    deleteMembershipLevelsRaw(requestParameters: DeleteMembershipLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to delete Membership levels. <p><strong>OperationId:</strong>deleteMembershipLevels</p>
     * Delete Membership levels
     */
    deleteMembershipLevels(requestParameters: DeleteMembershipLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to delete Membership market groups. <p><strong>OperationId:</strong>deleteMembershipMarketGroups</p>
     * Delete Membership market groups
     */
    deleteMembershipMarketGroupsRaw(requestParameters: DeleteMembershipMarketGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to delete Membership market groups. <p><strong>OperationId:</strong>deleteMembershipMarketGroups</p>
     * Delete Membership market groups
     */
    deleteMembershipMarketGroups(requestParameters: DeleteMembershipMarketGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to delete Membership property groups. <p><strong>OperationId:</strong>deleteMembershipPropertyGroups</p>
     * Delete Membership property groups
     */
    deleteMembershipPropertyGroupsRaw(requestParameters: DeleteMembershipPropertyGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to delete Membership property groups. <p><strong>OperationId:</strong>deleteMembershipPropertyGroups</p>
     * Delete Membership property groups
     */
    deleteMembershipPropertyGroups(requestParameters: DeleteMembershipPropertyGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to delete Membership rate groups. <p><strong>OperationId:</strong>deleteMembershipRateGroups</p>
     * Delete Membership rate groups
     */
    deleteMembershipRateGroupsRaw(requestParameters: DeleteMembershipRateGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to delete Membership rate groups. <p><strong>OperationId:</strong>deleteMembershipRateGroups</p>
     * Delete Membership rate groups
     */
    deleteMembershipRateGroups(requestParameters: DeleteMembershipRateGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to delete Membership type rules. <p><strong>OperationId:</strong>deleteMembershipTypeRules</p>
     * Delete Membership type rules
     */
    deleteMembershipTypeRulesRaw(requestParameters: DeleteMembershipTypeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to delete Membership type rules. <p><strong>OperationId:</strong>deleteMembershipTypeRules</p>
     * Delete Membership type rules
     */
    deleteMembershipTypeRules(requestParameters: DeleteMembershipTypeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete an existing Membership Type <p><strong>OperationId:</strong>deleteMembershipTypes</p>
     * Delete Membership type
     */
    deleteMembershipTypesRaw(requestParameters: DeleteMembershipTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete an existing Membership Type <p><strong>OperationId:</strong>deleteMembershipTypes</p>
     * Delete Membership type
     */
    deleteMembershipTypes(requestParameters: DeleteMembershipTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to get Membership Awards. <p><strong>OperationId:</strong>getMembershipAwards</p>
     * Get Membership Awards
     */
    getMembershipAwardsRaw(requestParameters: GetMembershipAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipAwardsInfo>>;
    /**
     * You can use this API to get Membership Awards. <p><strong>OperationId:</strong>getMembershipAwards</p>
     * Get Membership Awards
     */
    getMembershipAwards(requestParameters: GetMembershipAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipAwardsInfo>;
    /**
     * This API allows you to fetch Membership Benefit Programs of Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria - primary central setup, not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>getMembershipBenefitPrograms</p>
     * Retrieve a Membership Benefit Program
     */
    getMembershipBenefitProgramsRaw(requestParameters: GetMembershipBenefitProgramsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipBenefitProgramsInfo>>;
    /**
     * This API allows you to fetch Membership Benefit Programs of Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria - primary central setup, not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>getMembershipBenefitPrograms</p>
     * Retrieve a Membership Benefit Program
     */
    getMembershipBenefitPrograms(requestParameters: GetMembershipBenefitProgramsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipBenefitProgramsInfo>;
    /**
     * Retrieve a list of membership classes that are configured. <p><strong>OperationId:</strong>getMembershipClasses</p>
     * Get Membership classes
     */
    getMembershipClassesRaw(requestParameters: GetMembershipClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipClassesInfo>>;
    /**
     * Retrieve a list of membership classes that are configured. <p><strong>OperationId:</strong>getMembershipClasses</p>
     * Get Membership classes
     */
    getMembershipClasses(requestParameters: GetMembershipClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipClassesInfo>;
    /**
     * Retrieve a list of membership Enrollment Groups that are configured. <p><strong>OperationId:</strong>getMembershipEnrollmentGroups</p>
     * Get Membership enrollment groups
     */
    getMembershipEnrollmentGroupsRaw(requestParameters: GetMembershipEnrollmentGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipEnrollmentGroupsInfo>>;
    /**
     * Retrieve a list of membership Enrollment Groups that are configured. <p><strong>OperationId:</strong>getMembershipEnrollmentGroups</p>
     * Get Membership enrollment groups
     */
    getMembershipEnrollmentGroups(requestParameters: GetMembershipEnrollmentGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipEnrollmentGroupsInfo>;
    /**
     * You can use this API to get Membership levels. <p><strong>OperationId:</strong>getMembershipLevels</p>
     * Get Membership levels
     */
    getMembershipLevelsRaw(requestParameters: GetMembershipLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipLevelsInfo>>;
    /**
     * You can use this API to get Membership levels. <p><strong>OperationId:</strong>getMembershipLevels</p>
     * Get Membership levels
     */
    getMembershipLevels(requestParameters: GetMembershipLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipLevelsInfo>;
    /**
     * You can use this API to get Membership market groups. <p><strong>OperationId:</strong>getMembershipMarketGroups</p>
     * Get Membership market groups
     */
    getMembershipMarketGroupsRaw(requestParameters: GetMembershipMarketGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipMarketGroupsInfo>>;
    /**
     * You can use this API to get Membership market groups. <p><strong>OperationId:</strong>getMembershipMarketGroups</p>
     * Get Membership market groups
     */
    getMembershipMarketGroups(requestParameters: GetMembershipMarketGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipMarketGroupsInfo>;
    /**
     * You can use this API to get Membership property groups. <p><strong>OperationId:</strong>getMembershipPropertyGroups</p>
     * Get Membership property groups
     */
    getMembershipPropertyGroupsRaw(requestParameters: GetMembershipPropertyGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipPropertyGroupsInfo>>;
    /**
     * You can use this API to get Membership property groups. <p><strong>OperationId:</strong>getMembershipPropertyGroups</p>
     * Get Membership property groups
     */
    getMembershipPropertyGroups(requestParameters: GetMembershipPropertyGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipPropertyGroupsInfo>;
    /**
     * You can use this API to get Membership rate groups. <p><strong>OperationId:</strong>getMembershipRateGroups</p>
     * Get Membership rate groups
     */
    getMembershipRateGroupsRaw(requestParameters: GetMembershipRateGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipRateGroupsInfo>>;
    /**
     * You can use this API to get Membership rate groups. <p><strong>OperationId:</strong>getMembershipRateGroups</p>
     * Get Membership rate groups
     */
    getMembershipRateGroups(requestParameters: GetMembershipRateGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipRateGroupsInfo>;
    /**
     * Use this API to get a specific Membership Type and its details. <p><strong>OperationId:</strong>getMembershipType</p>
     * Get a Membership type
     */
    getMembershipTypeRaw(requestParameters: GetMembershipTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipTypesDetails>>;
    /**
     * Use this API to get a specific Membership Type and its details. <p><strong>OperationId:</strong>getMembershipType</p>
     * Get a Membership type
     */
    getMembershipType(requestParameters: GetMembershipTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipTypesDetails>;
    /**
     * You can use this API to get Membership type rule details. <p><strong>OperationId:</strong>getMembershipTypeRule</p>
     * Get Membership type rule details
     */
    getMembershipTypeRuleRaw(requestParameters: GetMembershipTypeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipTypeRule>>;
    /**
     * You can use this API to get Membership type rule details. <p><strong>OperationId:</strong>getMembershipTypeRule</p>
     * Get Membership type rule details
     */
    getMembershipTypeRule(requestParameters: GetMembershipTypeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipTypeRule>;
    /**
     * get Membership type rules based on criteria <p><strong>OperationId:</strong>getMembershipTypeRules</p>
     * Get Membership type rules
     */
    getMembershipTypeRulesRaw(requestParameters: GetMembershipTypeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipTypeRulesInfo>>;
    /**
     * get Membership type rules based on criteria <p><strong>OperationId:</strong>getMembershipTypeRules</p>
     * Get Membership type rules
     */
    getMembershipTypeRules(requestParameters: GetMembershipTypeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipTypeRulesInfo>;
    /**
     * Membership types enable you to identify, organize, and manage the membership programs on a profile. For example, your property might have a guest loyalty program that awards guests based on the amount of revenue generated or the number of stays per year. You would create a specific membership type for this program. This API will retrieve all configured Membership Types configured.<p><strong>OperationId:</strong>getMembershipTypes</p>
     * Get membership types
     */
    getMembershipTypesRaw(requestParameters: GetMembershipTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipTypes>>;
    /**
     * Membership types enable you to identify, organize, and manage the membership programs on a profile. For example, your property might have a guest loyalty program that awards guests based on the amount of revenue generated or the number of stays per year. You would create a specific membership type for this program. This API will retrieve all configured Membership Types configured.<p><strong>OperationId:</strong>getMembershipTypes</p>
     * Get membership types
     */
    getMembershipTypes(requestParameters: GetMembershipTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipTypes>;
    /**
     * You can use this API to create Membership Awards. <p><strong>OperationId:</strong>postMembershipAwards</p>
     * Create Membership Awards
     */
    postMembershipAwardsRaw(requestParameters: PostMembershipAwardsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to create Membership Awards. <p><strong>OperationId:</strong>postMembershipAwards</p>
     * Create Membership Awards
     */
    postMembershipAwards(requestParameters: PostMembershipAwardsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API is used to create Membership Benefit Programs of a Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria  - primary  central setup,  not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>postMembershipBenefitPrograms</p>
     * Create Membership Benefit Program
     */
    postMembershipBenefitProgramsRaw(requestParameters: PostMembershipBenefitProgramsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API is used to create Membership Benefit Programs of a Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria  - primary  central setup,  not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>postMembershipBenefitPrograms</p>
     * Create Membership Benefit Program
     */
    postMembershipBenefitPrograms(requestParameters: PostMembershipBenefitProgramsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Create a new membership class. <p><strong>OperationId:</strong>postMembershipClasses</p>
     * Create Membership classes
     */
    postMembershipClassesRaw(requestParameters: PostMembershipClassesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Create a new membership class. <p><strong>OperationId:</strong>postMembershipClasses</p>
     * Create Membership classes
     */
    postMembershipClasses(requestParameters: PostMembershipClassesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Create a new membership enrollment group. <p><strong>OperationId:</strong>postMembershipEnrollmentGroups</p>
     * Create Membership enrollment groups
     */
    postMembershipEnrollmentGroupsRaw(requestParameters: PostMembershipEnrollmentGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Create a new membership enrollment group. <p><strong>OperationId:</strong>postMembershipEnrollmentGroups</p>
     * Create Membership enrollment groups
     */
    postMembershipEnrollmentGroups(requestParameters: PostMembershipEnrollmentGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to Set Membership folio texts. <p><strong>OperationId:</strong>postMembershipFolioTexts</p>
     * Set Membership folio texts
     */
    postMembershipFolioTextsRaw(requestParameters: PostMembershipFolioTextsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to Set Membership folio texts. <p><strong>OperationId:</strong>postMembershipFolioTexts</p>
     * Set Membership folio texts
     */
    postMembershipFolioTexts(requestParameters: PostMembershipFolioTextsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to create Membership levels. <p><strong>OperationId:</strong>postMembershipLevels</p>
     * Create Membership levels
     */
    postMembershipLevelsRaw(requestParameters: PostMembershipLevelsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to create Membership levels. <p><strong>OperationId:</strong>postMembershipLevels</p>
     * Create Membership levels
     */
    postMembershipLevels(requestParameters: PostMembershipLevelsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to create Membership market groups. <p><strong>OperationId:</strong>postMembershipMarketGroups</p>
     * Create Membership market groups
     */
    postMembershipMarketGroupsRaw(requestParameters: PostMembershipMarketGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to create Membership market groups. <p><strong>OperationId:</strong>postMembershipMarketGroups</p>
     * Create Membership market groups
     */
    postMembershipMarketGroups(requestParameters: PostMembershipMarketGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to create Membership property groups. <p><strong>OperationId:</strong>postMembershipPropertyGroups</p>
     * Create Membership property groups
     */
    postMembershipPropertyGroupsRaw(requestParameters: PostMembershipPropertyGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to create Membership property groups. <p><strong>OperationId:</strong>postMembershipPropertyGroups</p>
     * Create Membership property groups
     */
    postMembershipPropertyGroups(requestParameters: PostMembershipPropertyGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to create Membership rate groups. <p><strong>OperationId:</strong>postMembershipRateGroups</p>
     * Create Membership rate groups
     */
    postMembershipRateGroupsRaw(requestParameters: PostMembershipRateGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to create Membership rate groups. <p><strong>OperationId:</strong>postMembershipRateGroups</p>
     * Create Membership rate groups
     */
    postMembershipRateGroups(requestParameters: PostMembershipRateGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to create Membership type rules. <p><strong>OperationId:</strong>postMembershipTypeRules</p>
     * Create Membership type rules
     */
    postMembershipTypeRulesRaw(requestParameters: PostMembershipTypeRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipTypeRulesDetails>>;
    /**
     * You can use this API to create Membership type rules. <p><strong>OperationId:</strong>postMembershipTypeRules</p>
     * Create Membership type rules
     */
    postMembershipTypeRules(requestParameters: PostMembershipTypeRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipTypeRulesDetails>;
    /**
     * Membership types enable you to identify, organize, and manage the membership programs on a profile. For example, your property might have a guest loyalty program that awards guests based on the amount of revenue generated or the number of stays per year. You would create a specific membership type for this program. <p><strong>OperationId:</strong>postMembershipTypes</p>
     * Create Membership types
     */
    postMembershipTypesRaw(requestParameters: PostMembershipTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Membership types enable you to identify, organize, and manage the membership programs on a profile. For example, your property might have a guest loyalty program that awards guests based on the amount of revenue generated or the number of stays per year. You would create a specific membership type for this program. <p><strong>OperationId:</strong>postMembershipTypes</p>
     * Create Membership types
     */
    postMembershipTypes(requestParameters: PostMembershipTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to change Membership Awards. <p><strong>OperationId:</strong>putMembershipAwards</p>
     * Change Membership Awards
     */
    putMembershipAwardsRaw(requestParameters: PutMembershipAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to change Membership Awards. <p><strong>OperationId:</strong>putMembershipAwards</p>
     * Change Membership Awards
     */
    putMembershipAwards(requestParameters: PutMembershipAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API allows you to modify Membership Benefit Programs of Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria  - primary central setup, not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>putMembershipBenefitPrograms</p>
     * Change Membership Benefit Program
     */
    putMembershipBenefitProgramsRaw(requestParameters: PutMembershipBenefitProgramsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API allows you to modify Membership Benefit Programs of Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria  - primary central setup, not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>putMembershipBenefitPrograms</p>
     * Change Membership Benefit Program
     */
    putMembershipBenefitPrograms(requestParameters: PutMembershipBenefitProgramsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Update an existing membership class <p><strong>OperationId:</strong>putMembershipClasses</p>
     * Change Membership classes
     */
    putMembershipClassesRaw(requestParameters: PutMembershipClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipClassesInfo>>;
    /**
     * Update an existing membership class <p><strong>OperationId:</strong>putMembershipClasses</p>
     * Change Membership classes
     */
    putMembershipClasses(requestParameters: PutMembershipClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipClassesInfo>;
    /**
     * Update an existing membership group. <p><strong>OperationId:</strong>putMembershipEnrollmentGroups</p>
     * Change Membership enrollment groups
     */
    putMembershipEnrollmentGroupsRaw(requestParameters: PutMembershipEnrollmentGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Update an existing membership group. <p><strong>OperationId:</strong>putMembershipEnrollmentGroups</p>
     * Change Membership enrollment groups
     */
    putMembershipEnrollmentGroups(requestParameters: PutMembershipEnrollmentGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to change Membership levels. <p><strong>OperationId:</strong>putMembershipLevels</p>
     * Change Membership levels
     */
    putMembershipLevelsRaw(requestParameters: PutMembershipLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to change Membership levels. <p><strong>OperationId:</strong>putMembershipLevels</p>
     * Change Membership levels
     */
    putMembershipLevels(requestParameters: PutMembershipLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to change Membership market groups. <p><strong>OperationId:</strong>putMembershipMarketGroups</p>
     * Change Membership market groups
     */
    putMembershipMarketGroupsRaw(requestParameters: PutMembershipMarketGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to change Membership market groups. <p><strong>OperationId:</strong>putMembershipMarketGroups</p>
     * Change Membership market groups
     */
    putMembershipMarketGroups(requestParameters: PutMembershipMarketGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to change Membership property groups. <p><strong>OperationId:</strong>putMembershipPropertyGroups</p>
     * Change Membership property groups
     */
    putMembershipPropertyGroupsRaw(requestParameters: PutMembershipPropertyGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to change Membership property groups. <p><strong>OperationId:</strong>putMembershipPropertyGroups</p>
     * Change Membership property groups
     */
    putMembershipPropertyGroups(requestParameters: PutMembershipPropertyGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to change Membership rate groups. <p><strong>OperationId:</strong>putMembershipRateGroups</p>
     * Change Membership rate groups
     */
    putMembershipRateGroupsRaw(requestParameters: PutMembershipRateGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to change Membership rate groups. <p><strong>OperationId:</strong>putMembershipRateGroups</p>
     * Change Membership rate groups
     */
    putMembershipRateGroups(requestParameters: PutMembershipRateGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to update an existing Membership Type <p><strong>OperationId:</strong>putMembershipType</p>
     * Change Membership type
     */
    putMembershipTypeRaw(requestParameters: PutMembershipTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipTypes>>;
    /**
     * Use this API to update an existing Membership Type <p><strong>OperationId:</strong>putMembershipType</p>
     * Change Membership type
     */
    putMembershipType(requestParameters: PutMembershipTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipTypes>;
    /**
     * You can use this API to change Membership type rules. <p><strong>OperationId:</strong>putMembershipTypeRules</p>
     * Change Membership type rules
     */
    putMembershipTypeRulesRaw(requestParameters: PutMembershipTypeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You can use this API to change Membership type rules. <p><strong>OperationId:</strong>putMembershipTypeRules</p>
     * Change Membership type rules
     */
    putMembershipTypeRules(requestParameters: PutMembershipTypeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
}
/**
 * @export
 */
export declare const GetMembershipTypeFetchInstructionsEnum: {
    readonly PrimaryDetails: "PrimaryDetails";
    readonly CardNumberDetails: "CardNumberDetails";
    readonly PointsDetails: "PointsDetails";
    readonly ExceptionCriteriaDetails: "ExceptionCriteriaDetails";
    readonly AdditionalDetails: "AdditionalDetails";
    readonly EnrollmentDetails: "EnrollmentDetails";
    readonly Levels: "Levels";
};
export type GetMembershipTypeFetchInstructionsEnum = typeof GetMembershipTypeFetchInstructionsEnum[keyof typeof GetMembershipTypeFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetMembershipTypeRuleFetchInstructionsEnum: {
    readonly RuleDefinition: "RuleDefinition";
    readonly PointsDefinition: "PointsDefinition";
    readonly RuleConditions: "RuleConditions";
};
export type GetMembershipTypeRuleFetchInstructionsEnum = typeof GetMembershipTypeRuleFetchInstructionsEnum[keyof typeof GetMembershipTypeRuleFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetMembershipTypeRulesProgramTypeEnum: {
    readonly All: "All";
    readonly Points: "Points";
    readonly Tier: "Tier";
};
export type GetMembershipTypeRulesProgramTypeEnum = typeof GetMembershipTypeRulesProgramTypeEnum[keyof typeof GetMembershipTypeRulesProgramTypeEnum];
/**
 * @export
 */
export declare const GetMembershipTypeRulesRuleBasedOnEnum: {
    readonly Revenue: "Revenue";
    readonly Stay: "Stay";
    readonly Nights: "Nights";
    readonly Enrollment: "Enrollment";
    readonly TierUpgrade: "TierUpgrade";
    readonly Renewal: "Renewal";
    readonly Rfm: "Rfm";
};
export type GetMembershipTypeRulesRuleBasedOnEnum = typeof GetMembershipTypeRulesRuleBasedOnEnum[keyof typeof GetMembershipTypeRulesRuleBasedOnEnum];
