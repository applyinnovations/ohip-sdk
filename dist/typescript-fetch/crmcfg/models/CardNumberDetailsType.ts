/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CardNumberGenerationModeType } from './CardNumberGenerationModeType';
import {
    CardNumberGenerationModeTypeFromJSON,
    CardNumberGenerationModeTypeFromJSONTyped,
    CardNumberGenerationModeTypeToJSON,
} from './CardNumberGenerationModeType';
import type { MembershipCardValidationRuleType } from './MembershipCardValidationRuleType';
import {
    MembershipCardValidationRuleTypeFromJSON,
    MembershipCardValidationRuleTypeFromJSONTyped,
    MembershipCardValidationRuleTypeToJSON,
} from './MembershipCardValidationRuleType';

/**
 * Card Number of membership type.
 * @export
 * @interface CardNumberDetailsType
 */
export interface CardNumberDetailsType {
    /**
     * Indicates if the multiple membership cards may be issued with the same membership number.
     * @type {boolean}
     * @memberof CardNumberDetailsType
     */
    allowDuplicateCardNumbers?: boolean;
    /**
     * 
     * @type {CardNumberGenerationModeType}
     * @memberof CardNumberDetailsType
     */
    cardNumberBasedOn?: CardNumberGenerationModeType;
    /**
     * Indicates is there a microchip that stores information which can be used to verify the validity of the membership and authenticate the customer based on a personal identification number (PIN).
     * @type {boolean}
     * @memberof CardNumberDetailsType
     */
    chipAndPin?: boolean;
    /**
     * Indicates External System from which card number will be generated.
     * @type {string}
     * @memberof CardNumberDetailsType
     */
    database?: string;
    /**
     * Indicates if the membership expiration date is required for validation of the profile membership information.
     * @type {boolean}
     * @memberof CardNumberDetailsType
     */
    expirationDateRequired?: boolean;
    /**
     * 
     * @type {MembershipCardValidationRuleType}
     * @memberof CardNumberDetailsType
     */
    membershipCardValidationRule?: MembershipCardValidationRuleType;
    /**
     * Indicates is the membership card is validated through the interface.
     * @type {boolean}
     * @memberof CardNumberDetailsType
     */
    validationByInterface?: boolean;
}

/**
 * Check if a given object implements the CardNumberDetailsType interface.
 */
export function instanceOfCardNumberDetailsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CardNumberDetailsTypeFromJSON(json: any): CardNumberDetailsType {
    return CardNumberDetailsTypeFromJSONTyped(json, false);
}

export function CardNumberDetailsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CardNumberDetailsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allowDuplicateCardNumbers': !exists(json, 'allowDuplicateCardNumbers') ? undefined : json['allowDuplicateCardNumbers'],
        'cardNumberBasedOn': !exists(json, 'cardNumberBasedOn') ? undefined : CardNumberGenerationModeTypeFromJSON(json['cardNumberBasedOn']),
        'chipAndPin': !exists(json, 'chipAndPin') ? undefined : json['chipAndPin'],
        'database': !exists(json, 'database') ? undefined : json['database'],
        'expirationDateRequired': !exists(json, 'expirationDateRequired') ? undefined : json['expirationDateRequired'],
        'membershipCardValidationRule': !exists(json, 'membershipCardValidationRule') ? undefined : MembershipCardValidationRuleTypeFromJSON(json['membershipCardValidationRule']),
        'validationByInterface': !exists(json, 'validationByInterface') ? undefined : json['validationByInterface'],
    };
}

export function CardNumberDetailsTypeToJSON(value?: CardNumberDetailsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allowDuplicateCardNumbers': value.allowDuplicateCardNumbers,
        'cardNumberBasedOn': CardNumberGenerationModeTypeToJSON(value.cardNumberBasedOn),
        'chipAndPin': value.chipAndPin,
        'database': value.database,
        'expirationDateRequired': value.expirationDateRequired,
        'membershipCardValidationRule': MembershipCardValidationRuleTypeToJSON(value.membershipCardValidationRule),
        'validationByInterface': value.validationByInterface,
    };
}

