/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { ColorType } from './ColorType';
import type { HotelFolioTextType } from './HotelFolioTextType';
/**
 * A Type that holds key values, that uniquely identifies a membership level
 * @export
 * @interface MembershipLevelType
 */
export interface MembershipLevelType {
    /**
     * Membership type
     * @type {string}
     * @memberof MembershipLevelType
     */
    type?: string;
    /**
     * Membership level
     * @type {string}
     * @memberof MembershipLevelType
     */
    code?: string;
    /**
     * Description of the Membership level.
     * @type {string}
     * @memberof MembershipLevelType
     */
    description?: string;
    /**
     * Label of the Membership level.
     * @type {string}
     * @memberof MembershipLevelType
     */
    label?: string;
    /**
     * Rank of Membership level.
     * @type {number}
     * @memberof MembershipLevelType
     */
    rank?: number;
    /**
     * VIP level associated to the Membership level.
     * @type {string}
     * @memberof MembershipLevelType
     */
    vip?: string;
    /**
     *
     * @type {ColorType}
     * @memberof MembershipLevelType
     */
    displayColor?: ColorType;
    /**
     * Inactive flag for a Membership level.
     * @type {boolean}
     * @memberof MembershipLevelType
     */
    inactive?: boolean;
    /**
     * Collection of hotel folio texts
     * @type {Array<HotelFolioTextType>}
     * @memberof MembershipLevelType
     */
    folioTexts?: Array<HotelFolioTextType>;
    /**
     * Indicates whether memberships upgraded or downgraded to or from this level will be included in the Membership Export.
     * @type {boolean}
     * @memberof MembershipLevelType
     */
    fulfillment?: boolean;
    /**
     * Indicates whether memberships level is restricted to prevent users from making changes to it.
     * @type {boolean}
     * @memberof MembershipLevelType
     */
    changesRestricted?: boolean;
    /**
     * Select the number of graces the member will be allowed before the membership level auto-renews based on the member current points. It is available when the Tier Management Reset option is selected on Membership Type.
     * @type {number}
     * @memberof MembershipLevelType
     */
    autoRenewGrace?: number;
    /**
     * Specify the time limit (from 1 to 5 years) for membership card expiration for this level
     * @type {number}
     * @memberof MembershipLevelType
     */
    cardValidYears?: number;
    /**
     * Indicates whether memberships level is restricted to prevent users from making changes to it. It is available when the Advanced Enrollment option is selected on Membership Type.
     * @type {boolean}
     * @memberof MembershipLevelType
     */
    restrictedLevel?: boolean;
    /**
     * Indicates whether membership has expired by the time the membership record is uploaded, the members card will be renewed and updated with a new expiration date.
     * @type {boolean}
     * @memberof MembershipLevelType
     */
    renewCard?: boolean;
    /**
     * Indicates whether membership fee payment is required upon upgrade to this membership level.
     * @type {boolean}
     * @memberof MembershipLevelType
     */
    feeRequired?: boolean;
    /**
     * The lowest level in which this level can be downgraded to.
     * @type {string}
     * @memberof MembershipLevelType
     */
    maxDowngradeLevel?: string;
    /**
     * Number of transaction(s) for each stay. Value will be 2 in case of double dipping otherwise it will be null or 1.
     * @type {number}
     * @memberof MembershipLevelType
     */
    numberOfTransactions?: number;
}
/**
 * Check if a given object implements the MembershipLevelType interface.
 */
export declare function instanceOfMembershipLevelType(value: object): boolean;
export declare function MembershipLevelTypeFromJSON(json: any): MembershipLevelType;
export declare function MembershipLevelTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipLevelType;
export declare function MembershipLevelTypeToJSON(value?: MembershipLevelType | null): any;
