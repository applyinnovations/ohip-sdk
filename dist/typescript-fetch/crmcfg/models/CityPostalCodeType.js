"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CityPostalCodeTypeToJSON = exports.CityPostalCodeTypeFromJSONTyped = exports.CityPostalCodeTypeFromJSON = exports.instanceOfCityPostalCodeType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the CityPostalCodeType interface.
 */
function instanceOfCityPostalCodeType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfCityPostalCodeType = instanceOfCityPostalCodeType;
function CityPostalCodeTypeFromJSON(json) {
    return CityPostalCodeTypeFromJSONTyped(json, false);
}
exports.CityPostalCodeTypeFromJSON = CityPostalCodeTypeFromJSON;
function CityPostalCodeTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'city': !(0, runtime_1.exists)(json, 'city') ? undefined : json['city'],
        'cityPostalCodeId': !(0, runtime_1.exists)(json, 'cityPostalCodeId') ? undefined : json['cityPostalCodeId'],
        'countryCode': !(0, runtime_1.exists)(json, 'countryCode') ? undefined : json['countryCode'],
        'districtCode': !(0, runtime_1.exists)(json, 'districtCode') ? undefined : json['districtCode'],
        'fiscalRegionCode': !(0, runtime_1.exists)(json, 'fiscalRegionCode') ? undefined : json['fiscalRegionCode'],
        'postalCodeFrom': !(0, runtime_1.exists)(json, 'postalCodeFrom') ? undefined : json['postalCodeFrom'],
        'postalCodeTo': !(0, runtime_1.exists)(json, 'postalCodeTo') ? undefined : json['postalCodeTo'],
        'stateCode': !(0, runtime_1.exists)(json, 'stateCode') ? undefined : json['stateCode'],
        'territoryCode': !(0, runtime_1.exists)(json, 'territoryCode') ? undefined : json['territoryCode'],
    };
}
exports.CityPostalCodeTypeFromJSONTyped = CityPostalCodeTypeFromJSONTyped;
function CityPostalCodeTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'city': value.city,
        'cityPostalCodeId': value.cityPostalCodeId,
        'countryCode': value.countryCode,
        'districtCode': value.districtCode,
        'fiscalRegionCode': value.fiscalRegionCode,
        'postalCodeFrom': value.postalCodeFrom,
        'postalCodeTo': value.postalCodeTo,
        'stateCode': value.stateCode,
        'territoryCode': value.territoryCode,
    };
}
exports.CityPostalCodeTypeToJSON = CityPostalCodeTypeToJSON;
