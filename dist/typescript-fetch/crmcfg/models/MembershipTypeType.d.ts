/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AttachMembershipToReservationRuleType } from './AttachMembershipToReservationRuleType';
import type { AutoGenerateCardNumberType } from './AutoGenerateCardNumberType';
import type { AwardPointsType } from './AwardPointsType';
import type { CardNumberDetailsType } from './CardNumberDetailsType';
import type { EnrollmentMatchRuleType } from './EnrollmentMatchRuleType';
import type { MembershipActionType } from './MembershipActionType';
import type { MembershipAwardGenerationMethodType } from './MembershipAwardGenerationMethodType';
import type { MembershipHandlingType } from './MembershipHandlingType';
import type { MembershipLevelType } from './MembershipLevelType';
import type { MembershipTypeAdditionalInfoType } from './MembershipTypeAdditionalInfoType';
import type { TierPointsType } from './TierPointsType';
import type { TranslationTextType2000 } from './TranslationTextType2000';
/**
 * A representation of the information contained by a membership type.
 * @export
 * @interface MembershipTypeType
 */
export interface MembershipTypeType {
    /**
     *
     * @type {MembershipTypeAdditionalInfoType}
     * @memberof MembershipTypeType
     */
    additionalDetails?: MembershipTypeAdditionalInfoType;
    /**
     * Indicates that the award points to each membership holder attached to the shared reservation.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    allowShares?: boolean;
    /**
     * Indicates when the membership action to be taken .
     * @type {Array<AttachMembershipToReservationRuleType>}
     * @memberof MembershipTypeType
     */
    attachMembershipToReservationRule?: Array<AttachMembershipToReservationRuleType>;
    /**
     *
     * @type {MembershipAwardGenerationMethodType}
     * @memberof MembershipTypeType
     */
    awardGenerationMethod?: MembershipAwardGenerationMethodType;
    /**
     *
     * @type {AwardPointsType}
     * @memberof MembershipTypeType
     */
    awardPointsDetail?: AwardPointsType;
    /**
     * Indicates the membership type is for a Booker.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    bookerProgramYn?: boolean;
    /**
     *
     * @type {CardNumberDetailsType}
     * @memberof MembershipTypeType
     */
    cardDetails?: CardNumberDetailsType;
    /**
     *
     * @type {AutoGenerateCardNumberType}
     * @memberof MembershipTypeType
     */
    cardNumberAutoGenerateDetails?: AutoGenerateCardNumberType;
    /**
     * Indicates how the award points for this membership type will be managed.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    centralSetup?: boolean;
    /**
     * Add the booker membership to company profile type.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    companyYn?: boolean;
    /**
     * Add the booker membership to contact profile type.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    contactYn?: boolean;
    /**
     * The currency in which user would like to calculate the membership points.
     * @type {string}
     * @memberof MembershipTypeType
     */
    currency?: string;
    /**
     * Description of the membership type.
     * @type {string}
     * @memberof MembershipTypeType
     */
    description?: string;
    /**
     * Flag that indicates Profile Address is editable during Enrollment.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    enrollmentAddressAllowed?: boolean;
    /**
     * Flag that indicates Birthdate field is editable during Enrollment.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    enrollmentBirthdateAllowed?: boolean;
    /**
     * Indicates whether enrollment code is required or not.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    enrollmentCodeRequiredYn?: boolean;
    /**
     * Flag that indicates Profile Communication is editable during Enrollment.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    enrollmentCommunicationAllowed?: boolean;
    /**
     * Flag that indicates Fee is editable during Enrollment.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    enrollmentFeeAllowed?: boolean;
    /**
     *
     * @type {EnrollmentMatchRuleType}
     * @memberof MembershipTypeType
     */
    enrollmentMatchRule?: EnrollmentMatchRuleType;
    /**
     * Exchange type to be used in the currency conversion.
     * @type {string}
     * @memberof MembershipTypeType
     */
    exchangeType?: string;
    /**
     * Indicates exclude profiles with an active membership of this type from the automatic purge utility.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    excludeProfileFromPurge?: boolean;
    /**
     * Indicates database for external system for Membership Type.
     * @type {string}
     * @memberof MembershipTypeType
     */
    externalDatabase?: string;
    /**
     * Flag that affects how a Membership Type is added, edited or deleted from a profile.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    externallyControlled?: boolean;
    /**
     *
     * @type {TranslationTextType2000}
     * @memberof MembershipTypeType
     */
    folioMessageFBAPosting?: TranslationTextType2000;
    /**
     * Add the booker membership to group profile type.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    groupYn?: boolean;
    /**
     *
     * @type {MembershipHandlingType}
     * @memberof MembershipTypeType
     */
    handlingDetails?: MembershipHandlingType;
    /**
     * Indicates if this membership type has a point calculation rule.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    hasPointCalculationRule?: boolean;
    /**
     * Indicates if the membership type is inactive.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    inactive?: boolean;
    /**
     * This flag indicates whether the membership class attached to the membership type is eligible for loyalty program or not.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    isLoyaltyProgram?: boolean;
    /**
     *
     * @type {TranslationTextType2000}
     * @memberof MembershipTypeType
     */
    memberFolioMessage?: TranslationTextType2000;
    /**
     *
     * @type {MembershipActionType}
     * @memberof MembershipTypeType
     */
    membershipAction?: MembershipActionType;
    /**
     * Membership Class code.
     * @type {string}
     * @memberof MembershipTypeType
     */
    membershipClass?: string;
    /**
     * Collection of membership levels
     * @type {Array<MembershipLevelType>}
     * @memberof MembershipTypeType
     */
    membershipLevels?: Array<MembershipLevelType>;
    /**
     * Membership Type code.
     * @type {string}
     * @memberof MembershipTypeType
     */
    membershipType?: string;
    /**
     * Allows the user to input a value by which the base number of points is multiplied.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    multiplier?: boolean;
    /**
     *
     * @type {TranslationTextType2000}
     * @memberof MembershipTypeType
     */
    nonMemberFolioMessage?: TranslationTextType2000;
    /**
     * The cost per point.
     * @type {string}
     * @memberof MembershipTypeType
     */
    pointCost?: string;
    /**
     * Label used to refer to points for this membership type
     * @type {string}
     * @memberof MembershipTypeType
     */
    pointsLabel?: string;
    /**
     * Indicates whether primary membership or not.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    primaryMembership?: boolean;
    /**
     * Print Folio Message on confirmation.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    printFolioMsgOnConfirmation?: boolean;
    /**
     * Defines the priority order of this membership type.
     * @type {number}
     * @memberof MembershipTypeType
     */
    ranking?: number;
    /**
     * Indicates whether to re-issue the membership card or not, when it is lost / stolen.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    reIssueNewCard?: boolean;
    /**
     * Indicates that the reservation that is eligible for points would have its data processed by the End of Day procedures and transferred to the interface.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    sendCheckoutToInterface?: boolean;
    /**
     * Sequence number that controls the position of the membership type when displayed in lists.
     * @type {number}
     * @memberof MembershipTypeType
     */
    sequence?: number;
    /**
     * Add the booker membership to source profile type.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    sourceYn?: boolean;
    /**
     *
     * @type {TierPointsType}
     * @memberof MembershipTypeType
     */
    tierPointsDetails?: TierPointsType;
    /**
     * Add the booker membership to travel agent profile type.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    travelAgentYn?: boolean;
}
/**
 * Check if a given object implements the MembershipTypeType interface.
 */
export declare function instanceOfMembershipTypeType(value: object): boolean;
export declare function MembershipTypeTypeFromJSON(json: any): MembershipTypeType;
export declare function MembershipTypeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipTypeType;
export declare function MembershipTypeTypeToJSON(value?: MembershipTypeType | null): any;
