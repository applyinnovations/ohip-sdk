/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Information about the country state.
 * @export
 * @interface StateType
 */
export interface StateType {
    /**
     * The country which the state belongs to.
     * @type {string}
     * @memberof StateType
     */
    countryCode?: string;
    /**
     * The description of the state.
     * @type {string}
     * @memberof StateType
     */
    description?: string;
    /**
     * The sequence number of the state.
     * @type {number}
     * @memberof StateType
     */
    sequence?: number;
    /**
     * The code of the state.
     * @type {string}
     * @memberof StateType
     */
    stateCode?: string;
    /**
     * Unique identifier of the state.
     * @type {number}
     * @memberof StateType
     */
    stateID?: number;
}

/**
 * Check if a given object implements the StateType interface.
 */
export function instanceOfStateType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StateTypeFromJSON(json: any): StateType {
    return StateTypeFromJSONTyped(json, false);
}

export function StateTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): StateType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
        'stateCode': !exists(json, 'stateCode') ? undefined : json['stateCode'],
        'stateID': !exists(json, 'stateID') ? undefined : json['stateID'],
    };
}

export function StateTypeToJSON(value?: StateType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'countryCode': value.countryCode,
        'description': value.description,
        'sequence': value.sequence,
        'stateCode': value.stateCode,
        'stateID': value.stateID,
    };
}

