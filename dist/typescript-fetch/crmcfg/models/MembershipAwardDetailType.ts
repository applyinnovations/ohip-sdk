/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DateRangeType } from './DateRangeType';
import {
    DateRangeTypeFromJSON,
    DateRangeTypeFromJSONTyped,
    DateRangeTypeToJSON,
} from './DateRangeType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Values by which membership award is uniquely identied.
 * @export
 * @interface MembershipAwardDetailType
 */
export interface MembershipAwardDetailType {
    /**
     * Membership Award Code.
     * @type {string}
     * @memberof MembershipAwardDetailType
     */
    awardCode?: string;
    /**
     * Membership Award Detail Code.
     * @type {string}
     * @memberof MembershipAwardDetailType
     */
    code?: string;
    /**
     * 
     * @type {DateRangeType}
     * @memberof MembershipAwardDetailType
     */
    dateRange?: DateRangeType;
    /**
     * Upgrade from Room.
     * @type {string}
     * @memberof MembershipAwardDetailType
     */
    fromRoom?: string;
    /**
     * Upgrade from Room Group.
     * @type {string}
     * @memberof MembershipAwardDetailType
     */
    fromRoomGroup?: string;
    /**
     * Identify whether Room or Room Group upgrade record.
     * @type {boolean}
     * @memberof MembershipAwardDetailType
     */
    groupUpgrade?: boolean;
    /**
     * Hotel code to which the record belongs.
     * @type {string}
     * @memberof MembershipAwardDetailType
     */
    hotelId?: string;
    /**
     * Inactive flag for Membership Award detail (Rate/Product/upgrade).
     * @type {boolean}
     * @memberof MembershipAwardDetailType
     */
    inactive?: boolean;
    /**
     * Membership type for which awards are defined.
     * @type {string}
     * @memberof MembershipAwardDetailType
     */
    membershipType?: string;
    /**
     * Points required to upgrade.
     * @type {number}
     * @memberof MembershipAwardDetailType
     */
    pointsRequired?: number;
    /**
     * Upgrade to Room.
     * @type {string}
     * @memberof MembershipAwardDetailType
     */
    toRoom?: string;
    /**
     * Upgrade to Room Group.
     * @type {string}
     * @memberof MembershipAwardDetailType
     */
    toRoomGroup?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof MembershipAwardDetailType
     */
    upgradeId?: UniqueIDType;
}

/**
 * Check if a given object implements the MembershipAwardDetailType interface.
 */
export function instanceOfMembershipAwardDetailType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MembershipAwardDetailTypeFromJSON(json: any): MembershipAwardDetailType {
    return MembershipAwardDetailTypeFromJSONTyped(json, false);
}

export function MembershipAwardDetailTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipAwardDetailType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'awardCode': !exists(json, 'awardCode') ? undefined : json['awardCode'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'dateRange': !exists(json, 'dateRange') ? undefined : DateRangeTypeFromJSON(json['dateRange']),
        'fromRoom': !exists(json, 'fromRoom') ? undefined : json['fromRoom'],
        'fromRoomGroup': !exists(json, 'fromRoomGroup') ? undefined : json['fromRoomGroup'],
        'groupUpgrade': !exists(json, 'groupUpgrade') ? undefined : json['groupUpgrade'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'membershipType': !exists(json, 'membershipType') ? undefined : json['membershipType'],
        'pointsRequired': !exists(json, 'pointsRequired') ? undefined : json['pointsRequired'],
        'toRoom': !exists(json, 'toRoom') ? undefined : json['toRoom'],
        'toRoomGroup': !exists(json, 'toRoomGroup') ? undefined : json['toRoomGroup'],
        'upgradeId': !exists(json, 'upgradeId') ? undefined : UniqueIDTypeFromJSON(json['upgradeId']),
    };
}

export function MembershipAwardDetailTypeToJSON(value?: MembershipAwardDetailType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'awardCode': value.awardCode,
        'code': value.code,
        'dateRange': DateRangeTypeToJSON(value.dateRange),
        'fromRoom': value.fromRoom,
        'fromRoomGroup': value.fromRoomGroup,
        'groupUpgrade': value.groupUpgrade,
        'hotelId': value.hotelId,
        'inactive': value.inactive,
        'membershipType': value.membershipType,
        'pointsRequired': value.pointsRequired,
        'toRoom': value.toRoom,
        'toRoomGroup': value.toRoomGroup,
        'upgradeId': UniqueIDTypeToJSON(value.upgradeId),
    };
}

