/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MembershipTypeRuleGeneralConditionsType } from './MembershipTypeRuleGeneralConditionsType';
import {
    MembershipTypeRuleGeneralConditionsTypeFromJSON,
    MembershipTypeRuleGeneralConditionsTypeFromJSONTyped,
    MembershipTypeRuleGeneralConditionsTypeToJSON,
} from './MembershipTypeRuleGeneralConditionsType';
import type { MembershipTypeRuleRateConditionsType } from './MembershipTypeRuleRateConditionsType';
import {
    MembershipTypeRuleRateConditionsTypeFromJSON,
    MembershipTypeRuleRateConditionsTypeFromJSONTyped,
    MembershipTypeRuleRateConditionsTypeToJSON,
} from './MembershipTypeRuleRateConditionsType';
import type { MembershipTypeRuleReservationConditionsType } from './MembershipTypeRuleReservationConditionsType';
import {
    MembershipTypeRuleReservationConditionsTypeFromJSON,
    MembershipTypeRuleReservationConditionsTypeFromJSONTyped,
    MembershipTypeRuleReservationConditionsTypeToJSON,
} from './MembershipTypeRuleReservationConditionsType';
import type { MembershipTypeRuleRoomConditionsType } from './MembershipTypeRuleRoomConditionsType';
import {
    MembershipTypeRuleRoomConditionsTypeFromJSON,
    MembershipTypeRuleRoomConditionsTypeFromJSONTyped,
    MembershipTypeRuleRoomConditionsTypeToJSON,
} from './MembershipTypeRuleRoomConditionsType';
import type { MembershipTypeRuleSegmentationConditionsType } from './MembershipTypeRuleSegmentationConditionsType';
import {
    MembershipTypeRuleSegmentationConditionsTypeFromJSON,
    MembershipTypeRuleSegmentationConditionsTypeFromJSONTyped,
    MembershipTypeRuleSegmentationConditionsTypeToJSON,
} from './MembershipTypeRuleSegmentationConditionsType';

/**
 * Membership Type Rule Conditions.
 * @export
 * @interface MembershipTypeRuleConditionsType
 */
export interface MembershipTypeRuleConditionsType {
    /**
     * 
     * @type {MembershipTypeRuleGeneralConditionsType}
     * @memberof MembershipTypeRuleConditionsType
     */
    generalConditions?: MembershipTypeRuleGeneralConditionsType;
    /**
     * 
     * @type {MembershipTypeRuleRateConditionsType}
     * @memberof MembershipTypeRuleConditionsType
     */
    rateConditions?: MembershipTypeRuleRateConditionsType;
    /**
     * 
     * @type {MembershipTypeRuleRoomConditionsType}
     * @memberof MembershipTypeRuleConditionsType
     */
    roomConditions?: MembershipTypeRuleRoomConditionsType;
    /**
     * 
     * @type {MembershipTypeRuleSegmentationConditionsType}
     * @memberof MembershipTypeRuleConditionsType
     */
    segmentationConditions?: MembershipTypeRuleSegmentationConditionsType;
    /**
     * 
     * @type {MembershipTypeRuleReservationConditionsType}
     * @memberof MembershipTypeRuleConditionsType
     */
    reservationConditions?: MembershipTypeRuleReservationConditionsType;
}

/**
 * Check if a given object implements the MembershipTypeRuleConditionsType interface.
 */
export function instanceOfMembershipTypeRuleConditionsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MembershipTypeRuleConditionsTypeFromJSON(json: any): MembershipTypeRuleConditionsType {
    return MembershipTypeRuleConditionsTypeFromJSONTyped(json, false);
}

export function MembershipTypeRuleConditionsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipTypeRuleConditionsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'generalConditions': !exists(json, 'generalConditions') ? undefined : MembershipTypeRuleGeneralConditionsTypeFromJSON(json['generalConditions']),
        'rateConditions': !exists(json, 'rateConditions') ? undefined : MembershipTypeRuleRateConditionsTypeFromJSON(json['rateConditions']),
        'roomConditions': !exists(json, 'roomConditions') ? undefined : MembershipTypeRuleRoomConditionsTypeFromJSON(json['roomConditions']),
        'segmentationConditions': !exists(json, 'segmentationConditions') ? undefined : MembershipTypeRuleSegmentationConditionsTypeFromJSON(json['segmentationConditions']),
        'reservationConditions': !exists(json, 'reservationConditions') ? undefined : MembershipTypeRuleReservationConditionsTypeFromJSON(json['reservationConditions']),
    };
}

export function MembershipTypeRuleConditionsTypeToJSON(value?: MembershipTypeRuleConditionsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'generalConditions': MembershipTypeRuleGeneralConditionsTypeToJSON(value.generalConditions),
        'rateConditions': MembershipTypeRuleRateConditionsTypeToJSON(value.rateConditions),
        'roomConditions': MembershipTypeRuleRoomConditionsTypeToJSON(value.roomConditions),
        'segmentationConditions': MembershipTypeRuleSegmentationConditionsTypeToJSON(value.segmentationConditions),
        'reservationConditions': MembershipTypeRuleReservationConditionsTypeToJSON(value.reservationConditions),
    };
}

