/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Information about the City and Postal Code.
 * @export
 * @interface CityPostalCodeType
 */
export interface CityPostalCodeType {
    /**
     * The identifier of the city and postal code.
     * @type {number}
     * @memberof CityPostalCodeType
     */
    cityPostalCodeId?: number;
    /**
     * The start range of the city and postal code.
     * @type {string}
     * @memberof CityPostalCodeType
     */
    postalCodeFrom?: string;
    /**
     * The end range of the city and postal code.
     * @type {string}
     * @memberof CityPostalCodeType
     */
    postalCodeTo?: string;
    /**
     * The name of the city which the City and Postal belongs to.
     * @type {string}
     * @memberof CityPostalCodeType
     */
    city?: string;
    /**
     * The District which the City and Postal belongs to.
     * @type {string}
     * @memberof CityPostalCodeType
     */
    districtCode?: string;
    /**
     * The State which the City and Postal belongs to.
     * @type {string}
     * @memberof CityPostalCodeType
     */
    stateCode?: string;
    /**
     * The Territoty which the City and Postal belongs to.
     * @type {string}
     * @memberof CityPostalCodeType
     */
    territoryCode?: string;
    /**
     * The Country which the City and Postal belongs to.
     * @type {string}
     * @memberof CityPostalCodeType
     */
    countryCode?: string;
    /**
     * The Fiscal Region Code which the City and Postal belongs to.
     * @type {string}
     * @memberof CityPostalCodeType
     */
    fiscalRegionCode?: string;
}

/**
 * Check if a given object implements the CityPostalCodeType interface.
 */
export function instanceOfCityPostalCodeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CityPostalCodeTypeFromJSON(json: any): CityPostalCodeType {
    return CityPostalCodeTypeFromJSONTyped(json, false);
}

export function CityPostalCodeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CityPostalCodeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cityPostalCodeId': !exists(json, 'cityPostalCodeId') ? undefined : json['cityPostalCodeId'],
        'postalCodeFrom': !exists(json, 'postalCodeFrom') ? undefined : json['postalCodeFrom'],
        'postalCodeTo': !exists(json, 'postalCodeTo') ? undefined : json['postalCodeTo'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'districtCode': !exists(json, 'districtCode') ? undefined : json['districtCode'],
        'stateCode': !exists(json, 'stateCode') ? undefined : json['stateCode'],
        'territoryCode': !exists(json, 'territoryCode') ? undefined : json['territoryCode'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'fiscalRegionCode': !exists(json, 'fiscalRegionCode') ? undefined : json['fiscalRegionCode'],
    };
}

export function CityPostalCodeTypeToJSON(value?: CityPostalCodeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cityPostalCodeId': value.cityPostalCodeId,
        'postalCodeFrom': value.postalCodeFrom,
        'postalCodeTo': value.postalCodeTo,
        'city': value.city,
        'districtCode': value.districtCode,
        'stateCode': value.stateCode,
        'territoryCode': value.territoryCode,
        'countryCode': value.countryCode,
        'fiscalRegionCode': value.fiscalRegionCode,
    };
}

