/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MultipleRoomsType } from './MultipleRoomsType';
import {
    MultipleRoomsTypeFromJSON,
    MultipleRoomsTypeFromJSONTyped,
    MultipleRoomsTypeToJSON,
} from './MultipleRoomsType';

/**
 * Criteria for detecting exceptions in points calculation
 * @export
 * @interface AwardsExceptionCriteriaType
 */
export interface AwardsExceptionCriteriaType {
    /**
     * 
     * @type {MultipleRoomsType}
     * @memberof AwardsExceptionCriteriaType
     */
    multipleRooms?: MultipleRoomsType;
    /**
     * Back to Back stay at a Single Property
     * @type {boolean}
     * @memberof AwardsExceptionCriteriaType
     */
    bBSingleProperty?: boolean;
    /**
     * Back to back stay at a Single Group
     * @type {boolean}
     * @memberof AwardsExceptionCriteriaType
     */
    bBSingleGroup?: boolean;
    /**
     * Cross Membership Back to Back Stays
     * @type {boolean}
     * @memberof AwardsExceptionCriteriaType
     */
    bBCrossMembership?: boolean;
    /**
     * Number of days while awaiting an external accept/reject response file.
     * @type {number}
     * @memberof AwardsExceptionCriteriaType
     */
    externalProcessingException?: number;
}

/**
 * Check if a given object implements the AwardsExceptionCriteriaType interface.
 */
export function instanceOfAwardsExceptionCriteriaType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AwardsExceptionCriteriaTypeFromJSON(json: any): AwardsExceptionCriteriaType {
    return AwardsExceptionCriteriaTypeFromJSONTyped(json, false);
}

export function AwardsExceptionCriteriaTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AwardsExceptionCriteriaType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'multipleRooms': !exists(json, 'multipleRooms') ? undefined : MultipleRoomsTypeFromJSON(json['multipleRooms']),
        'bBSingleProperty': !exists(json, 'bBSingleProperty') ? undefined : json['bBSingleProperty'],
        'bBSingleGroup': !exists(json, 'bBSingleGroup') ? undefined : json['bBSingleGroup'],
        'bBCrossMembership': !exists(json, 'bBCrossMembership') ? undefined : json['bBCrossMembership'],
        'externalProcessingException': !exists(json, 'externalProcessingException') ? undefined : json['externalProcessingException'],
    };
}

export function AwardsExceptionCriteriaTypeToJSON(value?: AwardsExceptionCriteriaType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'multipleRooms': MultipleRoomsTypeToJSON(value.multipleRooms),
        'bBSingleProperty': value.bBSingleProperty,
        'bBSingleGroup': value.bBSingleGroup,
        'bBCrossMembership': value.bBCrossMembership,
        'externalProcessingException': value.externalProcessingException,
    };
}

