/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CommunicationRoleType } from './CommunicationRoleType';
/**
 * Communication Type details.
 * @export
 * @interface CommunicationTypeType
 */
export interface CommunicationTypeType {
    /**
     *
     * @type {CommunicationRoleType}
     * @memberof CommunicationTypeType
     */
    role?: CommunicationRoleType;
    /**
     * Communication Type description.
     * @type {string}
     * @memberof CommunicationTypeType
     */
    description?: string;
    /**
     * Communication Type SMS Text Message enabled.
     * @type {boolean}
     * @memberof CommunicationTypeType
     */
    textEnabled?: boolean;
    /**
     * Communication Type sequence.
     * @type {number}
     * @memberof CommunicationTypeType
     */
    sequence?: number;
    /**
     * Unique Communication Type Code.
     * @type {string}
     * @memberof CommunicationTypeType
     */
    code?: string;
}
/**
 * Check if a given object implements the CommunicationTypeType interface.
 */
export declare function instanceOfCommunicationTypeType(value: object): boolean;
export declare function CommunicationTypeTypeFromJSON(json: any): CommunicationTypeType;
export declare function CommunicationTypeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommunicationTypeType;
export declare function CommunicationTypeTypeToJSON(value?: CommunicationTypeType | null): any;
