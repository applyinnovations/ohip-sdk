"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreferenceTypeToJSON = exports.PreferenceTypeFromJSONTyped = exports.PreferenceTypeFromJSON = exports.instanceOfPreferenceType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the PreferenceType interface.
 */
function instanceOfPreferenceType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfPreferenceType = instanceOfPreferenceType;
function PreferenceTypeFromJSON(json) {
    return PreferenceTypeFromJSONTyped(json, false);
}
exports.PreferenceTypeFromJSON = PreferenceTypeFromJSON;
function PreferenceTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'preferenceValue': !(0, runtime_1.exists)(json, 'preferenceValue') ? undefined : json['preferenceValue'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'global': !(0, runtime_1.exists)(json, 'global') ? undefined : json['global'],
        'source': !(0, runtime_1.exists)(json, 'source') ? undefined : json['source'],
        'hotels': !(0, runtime_1.exists)(json, 'hotels') ? undefined : json['hotels'],
        'preferenceId': !(0, runtime_1.exists)(json, 'preferenceId') ? undefined : json['preferenceId'],
        'excludedPreferencesCount': !(0, runtime_1.exists)(json, 'excludedPreferencesCount') ? undefined : json['excludedPreferencesCount'],
        'copyToProfile': !(0, runtime_1.exists)(json, 'copyToProfile') ? undefined : json['copyToProfile'],
    };
}
exports.PreferenceTypeFromJSONTyped = PreferenceTypeFromJSONTyped;
function PreferenceTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'preferenceValue': value.preferenceValue,
        'description': value.description,
        'global': value.global,
        'source': value.source,
        'hotels': value.hotels,
        'preferenceId': value.preferenceId,
        'excludedPreferencesCount': value.excludedPreferencesCount,
        'copyToProfile': value.copyToProfile,
    };
}
exports.PreferenceTypeToJSON = PreferenceTypeToJSON;
