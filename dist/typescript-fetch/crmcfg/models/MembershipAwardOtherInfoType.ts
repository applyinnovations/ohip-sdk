/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Information related to Other Award.
 * @export
 * @interface MembershipAwardOtherInfoType
 */
export interface MembershipAwardOtherInfoType {
    /**
     * The actual value of the award, in the amount of currency.
     * @type {number}
     * @memberof MembershipAwardOtherInfoType
     */
    awardValue?: number;
    /**
     * Display set for other type of awards for export purpose.
     * @type {string}
     * @memberof MembershipAwardOtherInfoType
     */
    displaySet?: string;
    /**
     * Message for Other awards.
     * @type {string}
     * @memberof MembershipAwardOtherInfoType
     */
    messageLine1?: string;
    /**
     * Message for Other awards.
     * @type {string}
     * @memberof MembershipAwardOtherInfoType
     */
    messageLine2?: string;
    /**
     * Message for Other awards.
     * @type {string}
     * @memberof MembershipAwardOtherInfoType
     */
    messageLine3?: string;
    /**
     * Message for Other awards.
     * @type {string}
     * @memberof MembershipAwardOtherInfoType
     */
    messageLine4?: string;
    /**
     * Points required to avail/redeem this award.
     * @type {number}
     * @memberof MembershipAwardOtherInfoType
     */
    pointsRequired?: number;
}

/**
 * Check if a given object implements the MembershipAwardOtherInfoType interface.
 */
export function instanceOfMembershipAwardOtherInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MembershipAwardOtherInfoTypeFromJSON(json: any): MembershipAwardOtherInfoType {
    return MembershipAwardOtherInfoTypeFromJSONTyped(json, false);
}

export function MembershipAwardOtherInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipAwardOtherInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'awardValue': !exists(json, 'awardValue') ? undefined : json['awardValue'],
        'displaySet': !exists(json, 'displaySet') ? undefined : json['displaySet'],
        'messageLine1': !exists(json, 'messageLine1') ? undefined : json['messageLine1'],
        'messageLine2': !exists(json, 'messageLine2') ? undefined : json['messageLine2'],
        'messageLine3': !exists(json, 'messageLine3') ? undefined : json['messageLine3'],
        'messageLine4': !exists(json, 'messageLine4') ? undefined : json['messageLine4'],
        'pointsRequired': !exists(json, 'pointsRequired') ? undefined : json['pointsRequired'],
    };
}

export function MembershipAwardOtherInfoTypeToJSON(value?: MembershipAwardOtherInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'awardValue': value.awardValue,
        'displaySet': value.displaySet,
        'messageLine1': value.messageLine1,
        'messageLine2': value.messageLine2,
        'messageLine3': value.messageLine3,
        'messageLine4': value.messageLine4,
        'pointsRequired': value.pointsRequired,
    };
}

