"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MembershipTypeRuleSegmentationConditionsTypeToJSON = exports.MembershipTypeRuleSegmentationConditionsTypeFromJSONTyped = exports.MembershipTypeRuleSegmentationConditionsTypeFromJSON = exports.instanceOfMembershipTypeRuleSegmentationConditionsType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the MembershipTypeRuleSegmentationConditionsType interface.
 */
function instanceOfMembershipTypeRuleSegmentationConditionsType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfMembershipTypeRuleSegmentationConditionsType = instanceOfMembershipTypeRuleSegmentationConditionsType;
function MembershipTypeRuleSegmentationConditionsTypeFromJSON(json) {
    return MembershipTypeRuleSegmentationConditionsTypeFromJSONTyped(json, false);
}
exports.MembershipTypeRuleSegmentationConditionsTypeFromJSON = MembershipTypeRuleSegmentationConditionsTypeFromJSON;
function MembershipTypeRuleSegmentationConditionsTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'marketCode': !(0, runtime_1.exists)(json, 'marketCode') ? undefined : json['marketCode'],
        'marketGroup': !(0, runtime_1.exists)(json, 'marketGroup') ? undefined : json['marketGroup'],
        'excludeMarketGroup': !(0, runtime_1.exists)(json, 'excludeMarketGroup') ? undefined : json['excludeMarketGroup'],
        'sourceCode': !(0, runtime_1.exists)(json, 'sourceCode') ? undefined : json['sourceCode'],
        'sourceGroup': !(0, runtime_1.exists)(json, 'sourceGroup') ? undefined : json['sourceGroup'],
        'excludeSourceGroup': !(0, runtime_1.exists)(json, 'excludeSourceGroup') ? undefined : json['excludeSourceGroup'],
    };
}
exports.MembershipTypeRuleSegmentationConditionsTypeFromJSONTyped = MembershipTypeRuleSegmentationConditionsTypeFromJSONTyped;
function MembershipTypeRuleSegmentationConditionsTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'marketCode': value.marketCode,
        'marketGroup': value.marketGroup,
        'excludeMarketGroup': value.excludeMarketGroup,
        'sourceCode': value.sourceCode,
        'sourceGroup': value.sourceGroup,
        'excludeSourceGroup': value.excludeSourceGroup,
    };
}
exports.MembershipTypeRuleSegmentationConditionsTypeToJSON = MembershipTypeRuleSegmentationConditionsTypeToJSON;
