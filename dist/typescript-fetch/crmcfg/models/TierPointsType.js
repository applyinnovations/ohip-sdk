"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TierPointsTypeToJSON = exports.TierPointsTypeFromJSONTyped = exports.TierPointsTypeFromJSON = exports.instanceOfTierPointsType = void 0;
const runtime_1 = require("../runtime");
const NumberOfYearsType_1 = require("./NumberOfYearsType");
const PointsCalculationDateType_1 = require("./PointsCalculationDateType");
const UpgradeDowngradeForCalendarPeriodType_1 = require("./UpgradeDowngradeForCalendarPeriodType");
/**
 * Check if a given object implements the TierPointsType interface.
 */
function instanceOfTierPointsType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfTierPointsType = instanceOfTierPointsType;
function TierPointsTypeFromJSON(json) {
    return TierPointsTypeFromJSONTyped(json, false);
}
exports.TierPointsTypeFromJSON = TierPointsTypeFromJSON;
function TierPointsTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'nonMemberPoints': !(0, runtime_1.exists)(json, 'nonMemberPoints') ? undefined : json['nonMemberPoints'],
        'basedOn': !(0, runtime_1.exists)(json, 'basedOn') ? undefined : (0, PointsCalculationDateType_1.PointsCalculationDateTypeFromJSON)(json['basedOn']),
        'tierExpirationMonth': !(0, runtime_1.exists)(json, 'tierExpirationMonth') ? undefined : json['tierExpirationMonth'],
        'requalifyOnUpgrade': !(0, runtime_1.exists)(json, 'requalifyOnUpgrade') ? undefined : json['requalifyOnUpgrade'],
        'downgradeRenewalInAutoJob': !(0, runtime_1.exists)(json, 'downgradeRenewalInAutoJob') ? undefined : json['downgradeRenewalInAutoJob'],
        'upgradePeriodRolling': !(0, runtime_1.exists)(json, 'upgradePeriodRolling') ? undefined : (0, NumberOfYearsType_1.NumberOfYearsTypeFromJSON)(json['upgradePeriodRolling']),
        'downgradePeriodRolling': !(0, runtime_1.exists)(json, 'downgradePeriodRolling') ? undefined : (0, NumberOfYearsType_1.NumberOfYearsTypeFromJSON)(json['downgradePeriodRolling']),
        'upgradePeriodCalendar': !(0, runtime_1.exists)(json, 'upgradePeriodCalendar') ? undefined : (0, UpgradeDowngradeForCalendarPeriodType_1.UpgradeDowngradeForCalendarPeriodTypeFromJSON)(json['upgradePeriodCalendar']),
        'downgradePeriodCalendar': !(0, runtime_1.exists)(json, 'downgradePeriodCalendar') ? undefined : (0, UpgradeDowngradeForCalendarPeriodType_1.UpgradeDowngradeForCalendarPeriodTypeFromJSON)(json['downgradePeriodCalendar']),
        'enableTierManagementReset': !(0, runtime_1.exists)(json, 'enableTierManagementReset') ? undefined : json['enableTierManagementReset'],
    };
}
exports.TierPointsTypeFromJSONTyped = TierPointsTypeFromJSONTyped;
function TierPointsTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'nonMemberPoints': value.nonMemberPoints,
        'basedOn': (0, PointsCalculationDateType_1.PointsCalculationDateTypeToJSON)(value.basedOn),
        'tierExpirationMonth': value.tierExpirationMonth,
        'requalifyOnUpgrade': value.requalifyOnUpgrade,
        'downgradeRenewalInAutoJob': value.downgradeRenewalInAutoJob,
        'upgradePeriodRolling': (0, NumberOfYearsType_1.NumberOfYearsTypeToJSON)(value.upgradePeriodRolling),
        'downgradePeriodRolling': (0, NumberOfYearsType_1.NumberOfYearsTypeToJSON)(value.downgradePeriodRolling),
        'upgradePeriodCalendar': (0, UpgradeDowngradeForCalendarPeriodType_1.UpgradeDowngradeForCalendarPeriodTypeToJSON)(value.upgradePeriodCalendar),
        'downgradePeriodCalendar': (0, UpgradeDowngradeForCalendarPeriodType_1.UpgradeDowngradeForCalendarPeriodTypeToJSON)(value.downgradePeriodCalendar),
        'enableTierManagementReset': value.enableTierManagementReset,
    };
}
exports.TierPointsTypeToJSON = TierPointsTypeToJSON;
