"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MembershipAwardTypeToJSON = exports.MembershipAwardTypeFromJSONTyped = exports.MembershipAwardTypeFromJSON = exports.instanceOfMembershipAwardType = void 0;
const runtime_1 = require("../runtime");
const DateRangeType_1 = require("./DateRangeType");
const MembershipAwardBasedOnType_1 = require("./MembershipAwardBasedOnType");
const MembershipAwardDetailType_1 = require("./MembershipAwardDetailType");
const MembershipAwardFinancialTransactionInfoType_1 = require("./MembershipAwardFinancialTransactionInfoType");
const MembershipAwardOtherInfoType_1 = require("./MembershipAwardOtherInfoType");
const MembershipAwardProductInfoType_1 = require("./MembershipAwardProductInfoType");
const MembershipAwardRateInfoType_1 = require("./MembershipAwardRateInfoType");
const MembershipAwardUpgradeInfoType_1 = require("./MembershipAwardUpgradeInfoType");
/**
 * Check if a given object implements the MembershipAwardType interface.
 */
function instanceOfMembershipAwardType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfMembershipAwardType = instanceOfMembershipAwardType;
function MembershipAwardTypeFromJSON(json) {
    return MembershipAwardTypeFromJSONTyped(json, false);
}
exports.MembershipAwardTypeFromJSON = MembershipAwardTypeFromJSON;
function MembershipAwardTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'autoConsume': !(0, runtime_1.exists)(json, 'autoConsume') ? undefined : json['autoConsume'],
        'awardBasedOn': !(0, runtime_1.exists)(json, 'awardBasedOn') ? undefined : (0, MembershipAwardBasedOnType_1.MembershipAwardBasedOnTypeFromJSON)(json['awardBasedOn']),
        'awardCode': !(0, runtime_1.exists)(json, 'awardCode') ? undefined : json['awardCode'],
        'awardDetails': !(0, runtime_1.exists)(json, 'awardDetails') ? undefined : (json['awardDetails'].map(MembershipAwardDetailType_1.MembershipAwardDetailTypeFromJSON)),
        'awardQuantity': !(0, runtime_1.exists)(json, 'awardQuantity') ? undefined : json['awardQuantity'],
        'billingGroup': !(0, runtime_1.exists)(json, 'billingGroup') ? undefined : json['billingGroup'],
        'dateRange': !(0, runtime_1.exists)(json, 'dateRange') ? undefined : (0, DateRangeType_1.DateRangeTypeFromJSON)(json['dateRange']),
        'displaySequence': !(0, runtime_1.exists)(json, 'displaySequence') ? undefined : json['displaySequence'],
        'financialTransactionInfo': !(0, runtime_1.exists)(json, 'financialTransactionInfo') ? undefined : (0, MembershipAwardFinancialTransactionInfoType_1.MembershipAwardFinancialTransactionInfoTypeFromJSON)(json['financialTransactionInfo']),
        'forceVerification': !(0, runtime_1.exists)(json, 'forceVerification') ? undefined : json['forceVerification'],
        'inactive': !(0, runtime_1.exists)(json, 'inactive') ? undefined : json['inactive'],
        'longDescription': !(0, runtime_1.exists)(json, 'longDescription') ? undefined : json['longDescription'],
        'membershipLevel': !(0, runtime_1.exists)(json, 'membershipLevel') ? undefined : json['membershipLevel'],
        'membershipType': !(0, runtime_1.exists)(json, 'membershipType') ? undefined : json['membershipType'],
        'otherInfo': !(0, runtime_1.exists)(json, 'otherInfo') ? undefined : (0, MembershipAwardOtherInfoType_1.MembershipAwardOtherInfoTypeFromJSON)(json['otherInfo']),
        'productInfo': !(0, runtime_1.exists)(json, 'productInfo') ? undefined : (0, MembershipAwardProductInfoType_1.MembershipAwardProductInfoTypeFromJSON)(json['productInfo']),
        'rateInfo': !(0, runtime_1.exists)(json, 'rateInfo') ? undefined : (0, MembershipAwardRateInfoType_1.MembershipAwardRateInfoTypeFromJSON)(json['rateInfo']),
        'ruleScheduleCode': !(0, runtime_1.exists)(json, 'ruleScheduleCode') ? undefined : json['ruleScheduleCode'],
        'shortDescription': !(0, runtime_1.exists)(json, 'shortDescription') ? undefined : json['shortDescription'],
        'upgradeInfo': !(0, runtime_1.exists)(json, 'upgradeInfo') ? undefined : (0, MembershipAwardUpgradeInfoType_1.MembershipAwardUpgradeInfoTypeFromJSON)(json['upgradeInfo']),
    };
}
exports.MembershipAwardTypeFromJSONTyped = MembershipAwardTypeFromJSONTyped;
function MembershipAwardTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'autoConsume': value.autoConsume,
        'awardBasedOn': (0, MembershipAwardBasedOnType_1.MembershipAwardBasedOnTypeToJSON)(value.awardBasedOn),
        'awardCode': value.awardCode,
        'awardDetails': value.awardDetails === undefined ? undefined : (value.awardDetails.map(MembershipAwardDetailType_1.MembershipAwardDetailTypeToJSON)),
        'awardQuantity': value.awardQuantity,
        'billingGroup': value.billingGroup,
        'dateRange': (0, DateRangeType_1.DateRangeTypeToJSON)(value.dateRange),
        'displaySequence': value.displaySequence,
        'financialTransactionInfo': (0, MembershipAwardFinancialTransactionInfoType_1.MembershipAwardFinancialTransactionInfoTypeToJSON)(value.financialTransactionInfo),
        'forceVerification': value.forceVerification,
        'inactive': value.inactive,
        'longDescription': value.longDescription,
        'membershipLevel': value.membershipLevel,
        'membershipType': value.membershipType,
        'otherInfo': (0, MembershipAwardOtherInfoType_1.MembershipAwardOtherInfoTypeToJSON)(value.otherInfo),
        'productInfo': (0, MembershipAwardProductInfoType_1.MembershipAwardProductInfoTypeToJSON)(value.productInfo),
        'rateInfo': (0, MembershipAwardRateInfoType_1.MembershipAwardRateInfoTypeToJSON)(value.rateInfo),
        'ruleScheduleCode': value.ruleScheduleCode,
        'shortDescription': value.shortDescription,
        'upgradeInfo': (0, MembershipAwardUpgradeInfoType_1.MembershipAwardUpgradeInfoTypeToJSON)(value.upgradeInfo),
    };
}
exports.MembershipAwardTypeToJSON = MembershipAwardTypeToJSON;
