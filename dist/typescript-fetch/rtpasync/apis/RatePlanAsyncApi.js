"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Opera Cloud Rate Plan Asynchronous Service API
 * APIs catering to the Rate Plan asynchronous related functionality in a hotel.  This includes adding/updating daily rates&apos; pricing schedules and best available rates by day or length of stay. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RatePlanAsyncApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class RatePlanAsyncApi extends runtime.BaseAPI {
    /**
     * Use this API to get the result of the process to set best available rate plans, which will include details of any data that has been failed to process. You can get the value of the summaryId from the Location header returned by the getBestAvailableRatePlansProcessStatus operation after the process is completed. <p><strong>OperationId:</strong>getBestAvailableRatePlans</p>
     * Get results of a daily rate plan schedule process
     */
    getBestAvailableRatePlansRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
                throw new runtime.RequiredError('requestId', 'Required parameter requestParameters.requestId was null or undefined when calling getBestAvailableRatePlans.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getBestAvailableRatePlans.');
            }
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling getBestAvailableRatePlans.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/ratePlans/bestAvailableLOS/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BestAvailableRatePlansStatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get the result of the process to set best available rate plans, which will include details of any data that has been failed to process. You can get the value of the summaryId from the Location header returned by the getBestAvailableRatePlansProcessStatus operation after the process is completed. <p><strong>OperationId:</strong>getBestAvailableRatePlans</p>
     * Get results of a daily rate plan schedule process
     */
    getBestAvailableRatePlans(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBestAvailableRatePlansRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to check whether the setting of best available rate plans process is completed. You can get value of summaryId from the Location header returned by the startSetBestAvailableRatePlansProcess operation.<p><strong>OperationId:</strong>getBestAvailableRatePlansProcessStatus</p>
     * Check status of setting best available rate plans process
     */
    getBestAvailableRatePlansProcessStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
                throw new runtime.RequiredError('requestId', 'Required parameter requestParameters.requestId was null or undefined when calling getBestAvailableRatePlansProcessStatus.');
            }
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling getBestAvailableRatePlansProcessStatus.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getBestAvailableRatePlansProcessStatus.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/ratePlans/bestAvailableLOS/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Use this API to check whether the setting of best available rate plans process is completed. You can get value of summaryId from the Location header returned by the startSetBestAvailableRatePlansProcess operation.<p><strong>OperationId:</strong>getBestAvailableRatePlansProcessStatus</p>
     * Check status of setting best available rate plans process
     */
    getBestAvailableRatePlansProcessStatus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getBestAvailableRatePlansProcessStatusRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Use this API to get the result of the daily rate plans schedule process, which will include details of any data that has failed to process. You can get the value of the summaryId from the Location header returned by the getDailyRatePlanSchedulesProcessStatus operation after the process is completed. <p><strong>OperationId:</strong>getDailyRatePlanSchedules</p>
     * Get results of a daily rate plan schedule process
     */
    getDailyRatePlanSchedulesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
                throw new runtime.RequiredError('requestId', 'Required parameter requestParameters.requestId was null or undefined when calling getDailyRatePlanSchedules.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getDailyRatePlanSchedules.');
            }
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling getDailyRatePlanSchedules.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/ratePlans/dailySchedules/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DailyRatePlanSchedulesStatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to get the result of the daily rate plans schedule process, which will include details of any data that has failed to process. You can get the value of the summaryId from the Location header returned by the getDailyRatePlanSchedulesProcessStatus operation after the process is completed. <p><strong>OperationId:</strong>getDailyRatePlanSchedules</p>
     * Get results of a daily rate plan schedule process
     */
    getDailyRatePlanSchedules(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getDailyRatePlanSchedulesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to check whether the rate plan pricing schedule process is completed. You can get value of summaryId from the Location header returned by the startSetDailyRatePlanSchedulesProcess operation.<p><strong>OperationId:</strong>getDailyRatePlanSchedulesProcessStatus</p>
     * Check status of setting daily rate plan schedule process
     */
    getDailyRatePlanSchedulesProcessStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
                throw new runtime.RequiredError('requestId', 'Required parameter requestParameters.requestId was null or undefined when calling getDailyRatePlanSchedulesProcessStatus.');
            }
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling getDailyRatePlanSchedulesProcessStatus.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getDailyRatePlanSchedulesProcessStatus.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/ratePlans/dailySchedules/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Use this API to check whether the rate plan pricing schedule process is completed. You can get value of summaryId from the Location header returned by the startSetDailyRatePlanSchedulesProcess operation.<p><strong>OperationId:</strong>getDailyRatePlanSchedulesProcessStatus</p>
     * Check status of setting daily rate plan schedule process
     */
    getDailyRatePlanSchedulesProcessStatus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getDailyRatePlanSchedulesProcessStatusRaw(requestParameters, initOverrides);
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getHurdleRates</p>
     * This API facilitates fetching of status for configured hurdle rates.
     */
    getHurdleRatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getHurdleRates.');
            }
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling getHurdleRates.');
            }
            if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
                throw new runtime.RequiredError('requestId', 'Required parameter requestParameters.requestId was null or undefined when calling getHurdleRates.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/rates/hurdles/{requestId}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))).replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.HurdleRatesStatusFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getHurdleRates</p>
     * This API facilitates fetching of status for configured hurdle rates.
     */
    getHurdleRates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getHurdleRatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getHurdleRatesProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    getHurdleRatesProcessStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
                throw new runtime.RequiredError('requestId', 'Required parameter requestParameters.requestId was null or undefined when calling getHurdleRatesProcessStatus.');
            }
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling getHurdleRatesProcessStatus.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getHurdleRatesProcessStatus.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/rates/hurdles/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getHurdleRatesProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    getHurdleRatesProcessStatus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getHurdleRatesProcessStatusRaw(requestParameters, initOverrides);
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getRatePlansHeaders</p>
     * This API facilitates fetching of status for configured rate plans.
     */
    getRatePlansHeadersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRatePlansHeaders.');
            }
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling getRatePlansHeaders.');
            }
            if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
                throw new runtime.RequiredError('requestId', 'Required parameter requestParameters.requestId was null or undefined when calling getRatePlansHeaders.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/ratePlans/headers/{requestId}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))).replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.HurdleRatesStatusFromJSON)(jsonValue));
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getRatePlansHeaders</p>
     * This API facilitates fetching of status for configured rate plans.
     */
    getRatePlansHeaders(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRatePlansHeadersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getRatePlansHeadersProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    getRatePlansHeadersProcessStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
                throw new runtime.RequiredError('requestId', 'Required parameter requestParameters.requestId was null or undefined when calling getRatePlansHeadersProcessStatus.');
            }
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling getRatePlansHeadersProcessStatus.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getRatePlansHeadersProcessStatus.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/ratePlans/headers/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     *  <p><strong>OperationId:</strong>getRatePlansHeadersProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    getRatePlansHeadersProcessStatus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getRatePlansHeadersProcessStatusRaw(requestParameters, initOverrides);
        });
    }
    /**
     *  <p><strong>OperationId:</strong>startHurdleRatesProcess</p>
     * Operation to configure hurdle rates.
     */
    startHurdleRatesProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling startHurdleRatesProcess.');
            }
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling startHurdleRatesProcess.');
            }
            if (requestParameters.hurdleRates === null || requestParameters.hurdleRates === undefined) {
                throw new runtime.RequiredError('hurdleRates', 'Required parameter requestParameters.hurdleRates was null or undefined when calling startHurdleRatesProcess.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/rates/hurdles`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.hurdleRates.map(index_1.HurdleRateTypeToJSON),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     *  <p><strong>OperationId:</strong>startHurdleRatesProcess</p>
     * Operation to configure hurdle rates.
     */
    startHurdleRatesProcess(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.startHurdleRatesProcessRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Use this API to start the process of adding and updating best available rate plans by day or by length of stay. Returns a header parameter Location that can be used in the getBestAvailableRatePlansProcessStatus operation. <p><strong>OperationId:</strong>startSetBestAvailableRatePlansProcess</p>
     * API to initiate setting best available rate plans process.
     */
    startSetBestAvailableRatePlansProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling startSetBestAvailableRatePlansProcess.');
            }
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling startSetBestAvailableRatePlansProcess.');
            }
            if (requestParameters.bestAvailableRatePlans === null || requestParameters.bestAvailableRatePlans === undefined) {
                throw new runtime.RequiredError('bestAvailableRatePlans', 'Required parameter requestParameters.bestAvailableRatePlans was null or undefined when calling startSetBestAvailableRatePlansProcess.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/ratePlans/bestAvailableLOS`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BestAvailableRatePlansToJSON)(requestParameters.bestAvailableRatePlans),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Use this API to start the process of adding and updating best available rate plans by day or by length of stay. Returns a header parameter Location that can be used in the getBestAvailableRatePlansProcessStatus operation. <p><strong>OperationId:</strong>startSetBestAvailableRatePlansProcess</p>
     * API to initiate setting best available rate plans process.
     */
    startSetBestAvailableRatePlansProcess(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.startSetBestAvailableRatePlansProcessRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Use this API to start the process to add and update daily rate plans&apos; pricing schedule. Returns a header parameter Location that can be used in the getDailyRatePlanSchedulesProcessStatus operation. <p><strong>OperationId:</strong>startSetDailyRatePlanSchedulesProcess</p>
     * API to initiate rate plans&apos; price update process
     */
    startSetDailyRatePlanSchedulesProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling startSetDailyRatePlanSchedulesProcess.');
            }
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling startSetDailyRatePlanSchedulesProcess.');
            }
            if (requestParameters.dailyRatePlanSchedules === null || requestParameters.dailyRatePlanSchedules === undefined) {
                throw new runtime.RequiredError('dailyRatePlanSchedules', 'Required parameter requestParameters.dailyRatePlanSchedules was null or undefined when calling startSetDailyRatePlanSchedulesProcess.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/ratePlans/dailySchedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DailyRatePlanSchedulesToJSON)(requestParameters.dailyRatePlanSchedules),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Use this API to start the process to add and update daily rate plans&apos; pricing schedule. Returns a header parameter Location that can be used in the getDailyRatePlanSchedulesProcessStatus operation. <p><strong>OperationId:</strong>startSetDailyRatePlanSchedulesProcess</p>
     * API to initiate rate plans&apos; price update process
     */
    startSetDailyRatePlanSchedulesProcess(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.startSetDailyRatePlanSchedulesProcessRaw(requestParameters, initOverrides);
        });
    }
    /**
     *  <p><strong>OperationId:</strong>startSetRatePlansHeadersProcess</p>
     * Operation to start the update of rate header flags. Recommendation is not to exceed 250 rate codes in one request.
     */
    startSetRatePlansHeadersProcessRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling startSetRatePlansHeadersProcess.');
            }
            if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
                throw new runtime.RequiredError('extSystemCode', 'Required parameter requestParameters.extSystemCode was null or undefined when calling startSetRatePlansHeadersProcess.');
            }
            if (requestParameters.ratePlan === null || requestParameters.ratePlan === undefined) {
                throw new runtime.RequiredError('ratePlan', 'Required parameter requestParameters.ratePlan was null or undefined when calling startSetRatePlansHeadersProcess.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/ratePlans/headers`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RatePlansToJSON)(requestParameters.ratePlan),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     *  <p><strong>OperationId:</strong>startSetRatePlansHeadersProcess</p>
     * Operation to start the update of rate header flags. Recommendation is not to exceed 250 rate codes in one request.
     */
    startSetRatePlansHeadersProcess(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.startSetRatePlansHeadersProcessRaw(requestParameters, initOverrides);
        });
    }
}
exports.RatePlanAsyncApi = RatePlanAsyncApi;
