/* tslint:disable */
/* eslint-disable */
/**
 * Opera Cloud Rate Plan Asynchronous Service API
 * APIs catering to the Rate Plan asynchronous related functionality in a hotel.  This includes adding/updating daily rates&apos; pricing schedules and best available rates by day or length of stay. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RateByAgeBucketType } from './RateByAgeBucketType';
import {
    RateByAgeBucketTypeFromJSON,
    RateByAgeBucketTypeFromJSONTyped,
    RateByAgeBucketTypeToJSON,
} from './RateByAgeBucketType';

/**
 * 
 * @export
 * @interface ScheduleRateAmountsType
 */
export interface ScheduleRateAmountsType {
    /**
     * Rate amount for one person.
     * @type {number}
     * @memberof ScheduleRateAmountsType
     */
    onePersonRate?: number;
    /**
     * Rate amount for two persons.
     * @type {number}
     * @memberof ScheduleRateAmountsType
     */
    twoPersonRate?: number;
    /**
     * Rate amount for three persons.
     * @type {number}
     * @memberof ScheduleRateAmountsType
     */
    threePersonRate?: number;
    /**
     * Rate amount for four persons.
     * @type {number}
     * @memberof ScheduleRateAmountsType
     */
    fourPersonRate?: number;
    /**
     * Rate amount for five persons.
     * @type {number}
     * @memberof ScheduleRateAmountsType
     */
    fivePersonRate?: number;
    /**
     * Rate amount for each extra person.
     * @type {number}
     * @memberof ScheduleRateAmountsType
     */
    extraPersonRate?: number;
    /**
     * Rate amount for each extra Child.
     * @type {number}
     * @memberof ScheduleRateAmountsType
     */
    extraChildRate?: number;
    /**
     * Rate amount for one Child.
     * @type {number}
     * @memberof ScheduleRateAmountsType
     */
    oneChildRate?: number;
    /**
     * Rate amount for two Children.
     * @type {number}
     * @memberof ScheduleRateAmountsType
     */
    twoChildrenRate?: number;
    /**
     * Rate amount for three Children.
     * @type {number}
     * @memberof ScheduleRateAmountsType
     */
    threeChildrenRate?: number;
    /**
     * Rate amount for four Children.
     * @type {number}
     * @memberof ScheduleRateAmountsType
     */
    fourChildrenRate?: number;
    /**
     * Rate amount by age bucket.
     * @type {Array<RateByAgeBucketType>}
     * @memberof ScheduleRateAmountsType
     */
    rateByAgeBuckets?: Array<RateByAgeBucketType>;
    /**
     * Minimum number of children needed to get free stay.
     * @type {number}
     * @memberof ScheduleRateAmountsType
     */
    minimumChildrenForFreeStay?: number;
    /**
     * The number of award points required for applying this rate plan schedule.
     * @type {number}
     * @memberof ScheduleRateAmountsType
     */
    pointsRequired?: number;
    /**
     * true if floor amount needs to be override
     * @type {boolean}
     * @memberof ScheduleRateAmountsType
     */
    overrideFloorAmount?: boolean;
}

/**
 * Check if a given object implements the ScheduleRateAmountsType interface.
 */
export function instanceOfScheduleRateAmountsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ScheduleRateAmountsTypeFromJSON(json: any): ScheduleRateAmountsType {
    return ScheduleRateAmountsTypeFromJSONTyped(json, false);
}

export function ScheduleRateAmountsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScheduleRateAmountsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'onePersonRate': !exists(json, 'onePersonRate') ? undefined : json['onePersonRate'],
        'twoPersonRate': !exists(json, 'twoPersonRate') ? undefined : json['twoPersonRate'],
        'threePersonRate': !exists(json, 'threePersonRate') ? undefined : json['threePersonRate'],
        'fourPersonRate': !exists(json, 'fourPersonRate') ? undefined : json['fourPersonRate'],
        'fivePersonRate': !exists(json, 'fivePersonRate') ? undefined : json['fivePersonRate'],
        'extraPersonRate': !exists(json, 'extraPersonRate') ? undefined : json['extraPersonRate'],
        'extraChildRate': !exists(json, 'extraChildRate') ? undefined : json['extraChildRate'],
        'oneChildRate': !exists(json, 'oneChildRate') ? undefined : json['oneChildRate'],
        'twoChildrenRate': !exists(json, 'twoChildrenRate') ? undefined : json['twoChildrenRate'],
        'threeChildrenRate': !exists(json, 'threeChildrenRate') ? undefined : json['threeChildrenRate'],
        'fourChildrenRate': !exists(json, 'fourChildrenRate') ? undefined : json['fourChildrenRate'],
        'rateByAgeBuckets': !exists(json, 'rateByAgeBuckets') ? undefined : ((json['rateByAgeBuckets'] as Array<any>).map(RateByAgeBucketTypeFromJSON)),
        'minimumChildrenForFreeStay': !exists(json, 'minimumChildrenForFreeStay') ? undefined : json['minimumChildrenForFreeStay'],
        'pointsRequired': !exists(json, 'pointsRequired') ? undefined : json['pointsRequired'],
        'overrideFloorAmount': !exists(json, 'overrideFloorAmount') ? undefined : json['overrideFloorAmount'],
    };
}

export function ScheduleRateAmountsTypeToJSON(value?: ScheduleRateAmountsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'onePersonRate': value.onePersonRate,
        'twoPersonRate': value.twoPersonRate,
        'threePersonRate': value.threePersonRate,
        'fourPersonRate': value.fourPersonRate,
        'fivePersonRate': value.fivePersonRate,
        'extraPersonRate': value.extraPersonRate,
        'extraChildRate': value.extraChildRate,
        'oneChildRate': value.oneChildRate,
        'twoChildrenRate': value.twoChildrenRate,
        'threeChildrenRate': value.threeChildrenRate,
        'fourChildrenRate': value.fourChildrenRate,
        'rateByAgeBuckets': value.rateByAgeBuckets === undefined ? undefined : ((value.rateByAgeBuckets as Array<any>).map(RateByAgeBucketTypeToJSON)),
        'minimumChildrenForFreeStay': value.minimumChildrenForFreeStay,
        'pointsRequired': value.pointsRequired,
        'overrideFloorAmount': value.overrideFloorAmount,
    };
}

