"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Opera Cloud Rate Plan Asynchronous Service API
 * APIs catering to the Rate Plan asynchronous related functionality in a hotel.  This includes adding/updating daily rates&apos; pricing schedules and best available rates by day or length of stay. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BestAvailableRatePlanTypeToJSON = exports.BestAvailableRatePlanTypeFromJSONTyped = exports.BestAvailableRatePlanTypeFromJSON = exports.instanceOfBestAvailableRatePlanType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the BestAvailableRatePlanType interface.
 */
function instanceOfBestAvailableRatePlanType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfBestAvailableRatePlanType = instanceOfBestAvailableRatePlanType;
function BestAvailableRatePlanTypeFromJSON(json) {
    return BestAvailableRatePlanTypeFromJSONTyped(json, false);
}
exports.BestAvailableRatePlanTypeFromJSON = BestAvailableRatePlanTypeFromJSON;
function BestAvailableRatePlanTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'los1': !(0, runtime_1.exists)(json, 'los1') ? undefined : json['los1'],
        'los2': !(0, runtime_1.exists)(json, 'los2') ? undefined : json['los2'],
        'los3': !(0, runtime_1.exists)(json, 'los3') ? undefined : json['los3'],
        'los4': !(0, runtime_1.exists)(json, 'los4') ? undefined : json['los4'],
        'los5': !(0, runtime_1.exists)(json, 'los5') ? undefined : json['los5'],
        'los6': !(0, runtime_1.exists)(json, 'los6') ? undefined : json['los6'],
        'los7': !(0, runtime_1.exists)(json, 'los7') ? undefined : json['los7'],
        'los8': !(0, runtime_1.exists)(json, 'los8') ? undefined : json['los8'],
        'rateDate': !(0, runtime_1.exists)(json, 'rateDate') ? undefined : json['rateDate'],
        'ratePlanCodes': !(0, runtime_1.exists)(json, 'ratePlanCodes') ? undefined : json['ratePlanCodes'],
    };
}
exports.BestAvailableRatePlanTypeFromJSONTyped = BestAvailableRatePlanTypeFromJSONTyped;
function BestAvailableRatePlanTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'los1': value.los1,
        'los2': value.los2,
        'los3': value.los3,
        'los4': value.los4,
        'los5': value.los5,
        'los6': value.los6,
        'los7': value.los7,
        'los8': value.los8,
        'rateDate': value.rateDate,
        'ratePlanCodes': value.ratePlanCodes,
    };
}
exports.BestAvailableRatePlanTypeToJSON = BestAvailableRatePlanTypeToJSON;
