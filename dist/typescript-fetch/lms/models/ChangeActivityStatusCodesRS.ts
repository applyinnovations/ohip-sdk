/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Leisure Management API
 * APIs to cater for external Leisure Management functionality integrated with OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ErrorType } from './ErrorType';
import {
    ErrorTypeFromJSON,
    ErrorTypeFromJSONTyped,
    ErrorTypeToJSON,
} from './ErrorType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Existing Operations Responses will eventually be modified to be extended from this type.
 * @export
 * @interface ChangeActivityStatusCodesRS
 */
export interface ChangeActivityStatusCodesRS {
    /**
     * Returning an empty element of this type indicates the successful processing of an message. This is used in conjunction with the Warning Type to report any warnings or business errors.
     * @type {object}
     * @memberof ChangeActivityStatusCodesRS
     */
    success?: object;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof ChangeActivityStatusCodesRS
     */
    warnings?: Array<WarningType>;
    /**
     * An error that occurred during the processing of a message.
     * @type {Array<ErrorType>}
     * @memberof ChangeActivityStatusCodesRS
     */
    errors?: Array<ErrorType>;
    /**
     * A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.
     * @type {string}
     * @memberof ChangeActivityStatusCodesRS
     */
    echoToken?: string;
    /**
     * Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).
     * @type {string}
     * @memberof ChangeActivityStatusCodesRS
     */
    timeStamp?: string;
    /**
     * For all Opera versioned messages, the version of the message is indicated by a Opera Version value.
     * @type {string}
     * @memberof ChangeActivityStatusCodesRS
     */
    version?: string;
    /**
     * Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.
     * @type {string}
     * @memberof ChangeActivityStatusCodesRS
     */
    correlationId?: string;
    /**
     * Indicates if the operation supports the ability to retry the request.
     * @type {boolean}
     * @memberof ChangeActivityStatusCodesRS
     */
    retryAllowed?: boolean;
    /**
     * Indicates if the operation supports the ability to force the retry request through OPERA services in the case where the external system continues to fail.
     * @type {boolean}
     * @memberof ChangeActivityStatusCodesRS
     */
    enforceAllowed?: boolean;
    /**
     * This attribute carries the user selected confirmation value on confirmation popup.
     * @type {boolean}
     * @memberof ChangeActivityStatusCodesRS
     */
    useLocalAllowed?: boolean;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof ChangeActivityStatusCodesRS
     */
    links?: Array<InstanceLink>;
}

/**
 * Check if a given object implements the ChangeActivityStatusCodesRS interface.
 */
export function instanceOfChangeActivityStatusCodesRS(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChangeActivityStatusCodesRSFromJSON(json: any): ChangeActivityStatusCodesRS {
    return ChangeActivityStatusCodesRSFromJSONTyped(json, false);
}

export function ChangeActivityStatusCodesRSFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChangeActivityStatusCodesRS {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'success': !exists(json, 'success') ? undefined : json['success'],
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
        'errors': !exists(json, 'errors') ? undefined : ((json['errors'] as Array<any>).map(ErrorTypeFromJSON)),
        'echoToken': !exists(json, 'echoToken') ? undefined : json['echoToken'],
        'timeStamp': !exists(json, 'timeStamp') ? undefined : json['timeStamp'],
        'version': !exists(json, 'version') ? undefined : json['version'],
        'correlationId': !exists(json, 'correlationId') ? undefined : json['correlationId'],
        'retryAllowed': !exists(json, 'retryAllowed') ? undefined : json['retryAllowed'],
        'enforceAllowed': !exists(json, 'enforceAllowed') ? undefined : json['enforceAllowed'],
        'useLocalAllowed': !exists(json, 'useLocalAllowed') ? undefined : json['useLocalAllowed'],
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
    };
}

export function ChangeActivityStatusCodesRSToJSON(value?: ChangeActivityStatusCodesRS | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'success': value.success,
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
        'errors': value.errors === undefined ? undefined : ((value.errors as Array<any>).map(ErrorTypeToJSON)),
        'echoToken': value.echoToken,
        'timeStamp': value.timeStamp,
        'version': value.version,
        'correlationId': value.correlationId,
        'retryAllowed': value.retryAllowed,
        'enforceAllowed': value.enforceAllowed,
        'useLocalAllowed': value.useLocalAllowed,
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
    };
}

