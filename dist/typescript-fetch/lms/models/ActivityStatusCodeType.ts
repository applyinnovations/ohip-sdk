/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Leisure Management API
 * APIs to cater for external Leisure Management functionality integrated with OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Activity Status Code detail information.
 * @export
 * @interface ActivityStatusCodeType
 */
export interface ActivityStatusCodeType {
    /**
     * Property to which the activity status code belongs to. Cannot be null.
     * @type {string}
     * @memberof ActivityStatusCodeType
     */
    hotelId?: string;
    /**
     * Code for the activity status code. Cannot be null.
     * @type {string}
     * @memberof ActivityStatusCodeType
     */
    code?: string;
    /**
     * Description for the Activity Status Code. Cannot be null.
     * @type {string}
     * @memberof ActivityStatusCodeType
     */
    description?: string;
    /**
     * Language identification.
     * @type {string}
     * @memberof ActivityStatusCodeType
     */
    language?: string;
    /**
     * Priority for the activity status code.
     * @type {number}
     * @memberof ActivityStatusCodeType
     */
    priority?: number;
    /**
     * Used in Application for the activity status code.
     * @type {string}
     * @memberof ActivityStatusCodeType
     */
    application?: string;
}

/**
 * Check if a given object implements the ActivityStatusCodeType interface.
 */
export function instanceOfActivityStatusCodeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ActivityStatusCodeTypeFromJSON(json: any): ActivityStatusCodeType {
    return ActivityStatusCodeTypeFromJSONTyped(json, false);
}

export function ActivityStatusCodeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivityStatusCodeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'language': !exists(json, 'language') ? undefined : json['language'],
        'priority': !exists(json, 'priority') ? undefined : json['priority'],
        'application': !exists(json, 'application') ? undefined : json['application'],
    };
}

export function ActivityStatusCodeTypeToJSON(value?: ActivityStatusCodeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'code': value.code,
        'description': value.description,
        'language': value.language,
        'priority': value.priority,
        'application': value.application,
    };
}

