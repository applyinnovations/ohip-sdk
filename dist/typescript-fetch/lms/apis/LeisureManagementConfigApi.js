"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Leisure Management API
 * APIs to cater for external Leisure Management functionality integrated with OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LeisureManagementConfigApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class LeisureManagementConfigApi extends runtime.BaseAPI {
    /**
     * Use this API to copy an Activity location for a property. <p><strong>OperationId:</strong>copyActivityLocations</p>
     * Copy Activity Locations
     */
    copyActivityLocationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.activityLocationsId === null || requestParameters.activityLocationsId === undefined) {
                throw new runtime.RequiredError('activityLocationsId', 'Required parameter requestParameters.activityLocationsId was null or undefined when calling copyActivityLocations.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling copyActivityLocations.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling copyActivityLocations.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling copyActivityLocations.');
            }
            if (requestParameters.copyActivityLocations === null || requestParameters.copyActivityLocations === undefined) {
                throw new runtime.RequiredError('copyActivityLocations', 'Required parameter requestParameters.copyActivityLocations was null or undefined when calling copyActivityLocations.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/activityLocations/{activityLocationsId}/copy`.replace(`{${"activityLocationsId"}}`, encodeURIComponent(String(requestParameters.activityLocationsId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CopyActivityLocationsToJSON)(requestParameters.copyActivityLocations),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CopyActivityLocationsRSFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to copy an Activity location for a property. <p><strong>OperationId:</strong>copyActivityLocations</p>
     * Copy Activity Locations
     */
    copyActivityLocations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyActivityLocationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Copy existing Activity Types from source property to target properties. <p><strong>OperationId:</strong>copyActivityTypes</p>
     * Copy Activity Types
     */
    copyActivityTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.activityTypesId === null || requestParameters.activityTypesId === undefined) {
                throw new runtime.RequiredError('activityTypesId', 'Required parameter requestParameters.activityTypesId was null or undefined when calling copyActivityTypes.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling copyActivityTypes.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling copyActivityTypes.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling copyActivityTypes.');
            }
            if (requestParameters.copyActivityTypes === null || requestParameters.copyActivityTypes === undefined) {
                throw new runtime.RequiredError('copyActivityTypes', 'Required parameter requestParameters.copyActivityTypes was null or undefined when calling copyActivityTypes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/activityTypes/{activityTypesId}/copy`.replace(`{${"activityTypesId"}}`, encodeURIComponent(String(requestParameters.activityTypesId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CopyActivityTypesToJSON)(requestParameters.copyActivityTypes),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CopyActivityTypesRSFromJSON)(jsonValue));
        });
    }
    /**
     * Copy existing Activity Types from source property to target properties. <p><strong>OperationId:</strong>copyActivityTypes</p>
     * Copy Activity Types
     */
    copyActivityTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyActivityTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to delete an Activity location for a property. <p><strong>OperationId:</strong>deleteActivityLocations</p>
     * Remove Activity Locations
     */
    deleteActivityLocationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.activityLocationsId === null || requestParameters.activityLocationsId === undefined) {
                throw new runtime.RequiredError('activityLocationsId', 'Required parameter requestParameters.activityLocationsId was null or undefined when calling deleteActivityLocations.');
            }
            if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
                throw new runtime.RequiredError('hotelIds', 'Required parameter requestParameters.hotelIds was null or undefined when calling deleteActivityLocations.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling deleteActivityLocations.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling deleteActivityLocations.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling deleteActivityLocations.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds !== undefined) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/activityLocations/{activityLocationsId}`.replace(`{${"activityLocationsId"}}`, encodeURIComponent(String(requestParameters.activityLocationsId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to delete an Activity location for a property. <p><strong>OperationId:</strong>deleteActivityLocations</p>
     * Remove Activity Locations
     */
    deleteActivityLocations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteActivityLocationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Remove an Activity Status Code that is configured for a property.  <p><strong>OperationId:</strong>deleteActivityStatusCodes</p>
     * Remove Activity Status Code
     */
    deleteActivityStatusCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.activityStatusCodesId === null || requestParameters.activityStatusCodesId === undefined) {
                throw new runtime.RequiredError('activityStatusCodesId', 'Required parameter requestParameters.activityStatusCodesId was null or undefined when calling deleteActivityStatusCodes.');
            }
            if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
                throw new runtime.RequiredError('hotelIds', 'Required parameter requestParameters.hotelIds was null or undefined when calling deleteActivityStatusCodes.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling deleteActivityStatusCodes.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling deleteActivityStatusCodes.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling deleteActivityStatusCodes.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds !== undefined) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/activityStatusCodes/{activityStatusCodesId}`.replace(`{${"activityStatusCodesId"}}`, encodeURIComponent(String(requestParameters.activityStatusCodesId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Remove an Activity Status Code that is configured for a property.  <p><strong>OperationId:</strong>deleteActivityStatusCodes</p>
     * Remove Activity Status Code
     */
    deleteActivityStatusCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteActivityStatusCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete an Activity Type Code that is configured for a property. <p><strong>OperationId:</strong>deleteActivityTypes</p>
     * Remove Activity Types
     */
    deleteActivityTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.activityTypesId === null || requestParameters.activityTypesId === undefined) {
                throw new runtime.RequiredError('activityTypesId', 'Required parameter requestParameters.activityTypesId was null or undefined when calling deleteActivityTypes.');
            }
            if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
                throw new runtime.RequiredError('hotelIds', 'Required parameter requestParameters.hotelIds was null or undefined when calling deleteActivityTypes.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling deleteActivityTypes.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling deleteActivityTypes.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling deleteActivityTypes.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds !== undefined) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/activityTypes/{activityTypesId}`.replace(`{${"activityTypesId"}}`, encodeURIComponent(String(requestParameters.activityTypesId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete an Activity Type Code that is configured for a property. <p><strong>OperationId:</strong>deleteActivityTypes</p>
     * Remove Activity Types
     */
    deleteActivityTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteActivityTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to fetch Activity location codes for a property. <p><strong>OperationId:</strong>getActivityLocations</p>
     * Look up of Activity Locations
     */
    getActivityLocationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
                throw new runtime.RequiredError('hotelIds', 'Required parameter requestParameters.hotelIds was null or undefined when calling getActivityLocations.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getActivityLocations.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getActivityLocations.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getActivityLocations.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.criteriaCodes) {
                queryParameters['criteriaCodes'] = requestParameters.criteriaCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/activityLocations`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FetchActivityLocationsFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to fetch Activity location codes for a property. <p><strong>OperationId:</strong>getActivityLocations</p>
     * Look up of Activity Locations
     */
    getActivityLocations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getActivityLocationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Fetch Activity Status Codes that are configured for a property.  <p><strong>OperationId:</strong>getActivityStatusCodes</p>
     * Get Activity Status Codes
     */
    getActivityStatusCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
                throw new runtime.RequiredError('hotelIds', 'Required parameter requestParameters.hotelIds was null or undefined when calling getActivityStatusCodes.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getActivityStatusCodes.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getActivityStatusCodes.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getActivityStatusCodes.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.criteriaCodes) {
                queryParameters['criteriaCodes'] = requestParameters.criteriaCodes;
            }
            if (requestParameters.applicationCodes) {
                queryParameters['applicationCodes'] = requestParameters.applicationCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/activityStatusCodes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FetchActivityStatusCodesFromJSON)(jsonValue));
        });
    }
    /**
     * Fetch Activity Status Codes that are configured for a property.  <p><strong>OperationId:</strong>getActivityStatusCodes</p>
     * Get Activity Status Codes
     */
    getActivityStatusCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getActivityStatusCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve Activity Types that are configured for a property.  Activity Types are typically used when an EAS (External Activities Scheduler system) interface is connected to OPERA.   <p><strong>OperationId:</strong>getActivityTypes</p>
     * Fetch Activity Types
     */
    getActivityTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
                throw new runtime.RequiredError('hotelIds', 'Required parameter requestParameters.hotelIds was null or undefined when calling getActivityTypes.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling getActivityTypes.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling getActivityTypes.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling getActivityTypes.');
            }
            const queryParameters = {};
            if (requestParameters.hotelIds) {
                queryParameters['hotelIds'] = requestParameters.hotelIds;
            }
            if (requestParameters.typeCodes) {
                queryParameters['typeCodes'] = requestParameters.typeCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/activityTypes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FetchActivityTypesFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve Activity Types that are configured for a property.  Activity Types are typically used when an EAS (External Activities Scheduler system) interface is connected to OPERA.   <p><strong>OperationId:</strong>getActivityTypes</p>
     * Fetch Activity Types
     */
    getActivityTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getActivityTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to create a new Activity location for a property. <p><strong>OperationId:</strong>postActivityLocations</p>
     * Create an Activity Locations
     */
    postActivityLocationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling postActivityLocations.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling postActivityLocations.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling postActivityLocations.');
            }
            if (requestParameters.createActivityLocations === null || requestParameters.createActivityLocations === undefined) {
                throw new runtime.RequiredError('createActivityLocations', 'Required parameter requestParameters.createActivityLocations was null or undefined when calling postActivityLocations.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/activityLocations`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CreateActivityLocationsToJSON)(requestParameters.createActivityLocations),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to create a new Activity location for a property. <p><strong>OperationId:</strong>postActivityLocations</p>
     * Create an Activity Locations
     */
    postActivityLocations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postActivityLocationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve Activity Status Code that are configured for a property.  Activity Status Codes are typically used when an EAS (External Activities Scheduler system) interface is connected to OPERA.   <p><strong>OperationId:</strong>postActivityStatusCodes</p>
     * Create Activity Status Code
     */
    postActivityStatusCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling postActivityStatusCodes.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling postActivityStatusCodes.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling postActivityStatusCodes.');
            }
            if (requestParameters.createActivityStatusCodes === null || requestParameters.createActivityStatusCodes === undefined) {
                throw new runtime.RequiredError('createActivityStatusCodes', 'Required parameter requestParameters.createActivityStatusCodes was null or undefined when calling postActivityStatusCodes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/activityStatusCodes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CreateActivityStatusCodesToJSON)(requestParameters.createActivityStatusCodes),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve Activity Status Code that are configured for a property.  Activity Status Codes are typically used when an EAS (External Activities Scheduler system) interface is connected to OPERA.   <p><strong>OperationId:</strong>postActivityStatusCodes</p>
     * Create Activity Status Code
     */
    postActivityStatusCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postActivityStatusCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new Activity Type Code for a specific property. <p><strong>OperationId:</strong>postActivityTypes</p>
     * Create Activity Types
     */
    postActivityTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling postActivityTypes.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling postActivityTypes.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling postActivityTypes.');
            }
            if (requestParameters.createActivityTypes === null || requestParameters.createActivityTypes === undefined) {
                throw new runtime.RequiredError('createActivityTypes', 'Required parameter requestParameters.createActivityTypes was null or undefined when calling postActivityTypes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/activityTypes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CreateActivityTypesToJSON)(requestParameters.createActivityTypes),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new Activity Type Code for a specific property. <p><strong>OperationId:</strong>postActivityTypes</p>
     * Create Activity Types
     */
    postActivityTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postActivityTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this API to update an existing Activity location Code for a property. <p><strong>OperationId:</strong>putActivityLocations</p>
     * Change in Activity Locations
     */
    putActivityLocationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.activityLocationsId === null || requestParameters.activityLocationsId === undefined) {
                throw new runtime.RequiredError('activityLocationsId', 'Required parameter requestParameters.activityLocationsId was null or undefined when calling putActivityLocations.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling putActivityLocations.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling putActivityLocations.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling putActivityLocations.');
            }
            if (requestParameters.changeActivityLocations === null || requestParameters.changeActivityLocations === undefined) {
                throw new runtime.RequiredError('changeActivityLocations', 'Required parameter requestParameters.changeActivityLocations was null or undefined when calling putActivityLocations.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/activityLocations/{activityLocationsId}`.replace(`{${"activityLocationsId"}}`, encodeURIComponent(String(requestParameters.activityLocationsId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChangeActivityLocationsToJSON)(requestParameters.changeActivityLocations),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChangeActivityLocationsRSFromJSON)(jsonValue));
        });
    }
    /**
     * Use this API to update an existing Activity location Code for a property. <p><strong>OperationId:</strong>putActivityLocations</p>
     * Change in Activity Locations
     */
    putActivityLocations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putActivityLocationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Modify an Activity Status Code that is configured for a property.  <p><strong>OperationId:</strong>putActivityStatusCodes</p>
     * Change Activity Status Code
     */
    putActivityStatusCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.activityStatusCodesId === null || requestParameters.activityStatusCodesId === undefined) {
                throw new runtime.RequiredError('activityStatusCodesId', 'Required parameter requestParameters.activityStatusCodesId was null or undefined when calling putActivityStatusCodes.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling putActivityStatusCodes.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling putActivityStatusCodes.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling putActivityStatusCodes.');
            }
            if (requestParameters.changeActivityStatusCodes === null || requestParameters.changeActivityStatusCodes === undefined) {
                throw new runtime.RequiredError('changeActivityStatusCodes', 'Required parameter requestParameters.changeActivityStatusCodes was null or undefined when calling putActivityStatusCodes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/activityStatusCodes/{activityStatusCodesId}`.replace(`{${"activityStatusCodesId"}}`, encodeURIComponent(String(requestParameters.activityStatusCodesId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChangeActivityStatusCodesToJSON)(requestParameters.changeActivityStatusCodes),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChangeActivityStatusCodesRSFromJSON)(jsonValue));
        });
    }
    /**
     * Modify an Activity Status Code that is configured for a property.  <p><strong>OperationId:</strong>putActivityStatusCodes</p>
     * Change Activity Status Code
     */
    putActivityStatusCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putActivityStatusCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Modify an Activity Type Code that is configured for a property. <p><strong>OperationId:</strong>putActivityTypes</p>
     * Change Activity Types
     */
    putActivityTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.activityTypesId === null || requestParameters.activityTypesId === undefined) {
                throw new runtime.RequiredError('activityTypesId', 'Required parameter requestParameters.activityTypesId was null or undefined when calling putActivityTypes.');
            }
            if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
                throw new runtime.RequiredError('authorization', 'Required parameter requestParameters.authorization was null or undefined when calling putActivityTypes.');
            }
            if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
                throw new runtime.RequiredError('xAppKey', 'Required parameter requestParameters.xAppKey was null or undefined when calling putActivityTypes.');
            }
            if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
                throw new runtime.RequiredError('xHotelid', 'Required parameter requestParameters.xHotelid was null or undefined when calling putActivityTypes.');
            }
            if (requestParameters.changeActivityTypes === null || requestParameters.changeActivityTypes === undefined) {
                throw new runtime.RequiredError('changeActivityTypes', 'Required parameter requestParameters.changeActivityTypes was null or undefined when calling putActivityTypes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/activityTypes/{activityTypesId}`.replace(`{${"activityTypesId"}}`, encodeURIComponent(String(requestParameters.activityTypesId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChangeActivityTypesToJSON)(requestParameters.changeActivityTypes),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChangeActivityTypesRSFromJSON)(jsonValue));
        });
    }
    /**
     * Modify an Activity Type Code that is configured for a property. <p><strong>OperationId:</strong>putActivityTypes</p>
     * Change Activity Types
     */
    putActivityTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putActivityTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.LeisureManagementConfigApi = LeisureManagementConfigApi;
