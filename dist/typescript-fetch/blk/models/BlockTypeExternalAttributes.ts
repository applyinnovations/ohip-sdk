/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventTypeType } from './EventTypeType';
import {
    EventTypeTypeFromJSON,
    EventTypeTypeFromJSONTyped,
    EventTypeTypeToJSON,
} from './EventTypeType';

/**
 * Block attributes used for external systems. Only available if configured in OPERA Cloud.
 * @export
 * @interface BlockTypeExternalAttributes
 */
export interface BlockTypeExternalAttributes {
    /**
     * Only available if configured in OPERA Cloud.
     * @type {boolean}
     * @memberof BlockTypeExternalAttributes
     */
    housingProtected?: boolean;
    /**
     * 
     * @type {EventTypeType}
     * @memberof BlockTypeExternalAttributes
     */
    eventType?: EventTypeType;
    /**
     * Group IATA number validated by an external system and block can't be saved unless confirmed that GIID is valid. Only available if configured in OPERA Cloud.
     * @type {string}
     * @memberof BlockTypeExternalAttributes
     */
    gIId?: string;
    /**
     * When this flag is set it will be used to roll Block End Date and Block Rate Program End Date in the night audit process. Only available if configured in OPERA Cloud.
     * @type {boolean}
     * @memberof BlockTypeExternalAttributes
     */
    rollEndDate?: boolean;
}

/**
 * Check if a given object implements the BlockTypeExternalAttributes interface.
 */
export function instanceOfBlockTypeExternalAttributes(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockTypeExternalAttributesFromJSON(json: any): BlockTypeExternalAttributes {
    return BlockTypeExternalAttributesFromJSONTyped(json, false);
}

export function BlockTypeExternalAttributesFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockTypeExternalAttributes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'housingProtected': !exists(json, 'housingProtected') ? undefined : json['housingProtected'],
        'eventType': !exists(json, 'eventType') ? undefined : EventTypeTypeFromJSON(json['eventType']),
        'gIId': !exists(json, 'gIId') ? undefined : json['gIId'],
        'rollEndDate': !exists(json, 'rollEndDate') ? undefined : json['rollEndDate'],
    };
}

export function BlockTypeExternalAttributesToJSON(value?: BlockTypeExternalAttributes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'housingProtected': value.housingProtected,
        'eventType': EventTypeTypeToJSON(value.eventType),
        'gIId': value.gIId,
        'rollEndDate': value.rollEndDate,
    };
}

