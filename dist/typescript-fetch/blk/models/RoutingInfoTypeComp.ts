/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CompRoutingRequestType } from './CompRoutingRequestType';
import {
    CompRoutingRequestTypeFromJSON,
    CompRoutingRequestTypeFromJSONTyped,
    CompRoutingRequestTypeToJSON,
} from './CompRoutingRequestType';
import type { PayeeInfoType } from './PayeeInfoType';
import {
    PayeeInfoTypeFromJSON,
    PayeeInfoTypeFromJSONTyped,
    PayeeInfoTypeToJSON,
} from './PayeeInfoType';
import type { RoutingInstructionType } from './RoutingInstructionType';
import {
    RoutingInstructionTypeFromJSON,
    RoutingInstructionTypeFromJSONTyped,
    RoutingInstructionTypeToJSON,
} from './RoutingInstructionType';

/**
 * Comp Accounting Routing Info
 * @export
 * @interface RoutingInfoTypeComp
 */
export interface RoutingInfoTypeComp {
    /**
     * 
     * @type {CompRoutingRequestType}
     * @memberof RoutingInfoTypeComp
     */
    compRequestInfo?: CompRoutingRequestType;
    /**
     * 
     * @type {PayeeInfoType}
     * @memberof RoutingInfoTypeComp
     */
    payeeInfo?: PayeeInfoType;
    /**
     * Set of routing instructions associated to this routing type.
     * @type {Array<RoutingInstructionType>}
     * @memberof RoutingInfoTypeComp
     */
    instructions?: Array<RoutingInstructionType>;
    /**
     * 
     * @type {number}
     * @memberof RoutingInfoTypeComp
     */
    folioWindowNo?: number;
}

/**
 * Check if a given object implements the RoutingInfoTypeComp interface.
 */
export function instanceOfRoutingInfoTypeComp(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoutingInfoTypeCompFromJSON(json: any): RoutingInfoTypeComp {
    return RoutingInfoTypeCompFromJSONTyped(json, false);
}

export function RoutingInfoTypeCompFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoutingInfoTypeComp {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'compRequestInfo': !exists(json, 'compRequestInfo') ? undefined : CompRoutingRequestTypeFromJSON(json['compRequestInfo']),
        'payeeInfo': !exists(json, 'payeeInfo') ? undefined : PayeeInfoTypeFromJSON(json['payeeInfo']),
        'instructions': !exists(json, 'instructions') ? undefined : ((json['instructions'] as Array<any>).map(RoutingInstructionTypeFromJSON)),
        'folioWindowNo': !exists(json, 'folioWindowNo') ? undefined : json['folioWindowNo'],
    };
}

export function RoutingInfoTypeCompToJSON(value?: RoutingInfoTypeComp | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'compRequestInfo': CompRoutingRequestTypeToJSON(value.compRequestInfo),
        'payeeInfo': PayeeInfoTypeToJSON(value.payeeInfo),
        'instructions': value.instructions === undefined ? undefined : ((value.instructions as Array<any>).map(RoutingInstructionTypeToJSON)),
        'folioWindowNo': value.folioWindowNo,
    };
}

