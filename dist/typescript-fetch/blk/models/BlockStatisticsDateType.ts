/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockRoomStatisticsType } from './BlockRoomStatisticsType';
import {
    BlockRoomStatisticsTypeFromJSON,
    BlockRoomStatisticsTypeFromJSONTyped,
    BlockRoomStatisticsTypeToJSON,
} from './BlockRoomStatisticsType';

/**
 * Holds the room type level statistics and total statistics for an allotment date.
 * @export
 * @interface BlockStatisticsDateType
 */
export interface BlockStatisticsDateType {
    /**
     * 
     * @type {number}
     * @memberof BlockStatisticsDateType
     */
    total?: number;
    /**
     * Collection of room type level statistics.
     * @type {Array<BlockRoomStatisticsType>}
     * @memberof BlockStatisticsDateType
     */
    roomStatisticsList?: Array<BlockRoomStatisticsType>;
    /**
     * 
     * @type {Date}
     * @memberof BlockStatisticsDateType
     */
    date?: Date;
}

/**
 * Check if a given object implements the BlockStatisticsDateType interface.
 */
export function instanceOfBlockStatisticsDateType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockStatisticsDateTypeFromJSON(json: any): BlockStatisticsDateType {
    return BlockStatisticsDateTypeFromJSONTyped(json, false);
}

export function BlockStatisticsDateTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockStatisticsDateType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'total': !exists(json, 'total') ? undefined : json['total'],
        'roomStatisticsList': !exists(json, 'roomStatisticsList') ? undefined : ((json['roomStatisticsList'] as Array<any>).map(BlockRoomStatisticsTypeFromJSON)),
        'date': !exists(json, 'date') ? undefined : (new Date(json['date'])),
    };
}

export function BlockStatisticsDateTypeToJSON(value?: BlockStatisticsDateType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'total': value.total,
        'roomStatisticsList': value.roomStatisticsList === undefined ? undefined : ((value.roomStatisticsList as Array<any>).map(BlockRoomStatisticsTypeToJSON)),
        'date': value.date === undefined ? undefined : (value.date.toISOString().substr(0,10)),
    };
}

