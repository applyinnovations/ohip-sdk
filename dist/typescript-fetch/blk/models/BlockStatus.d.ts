/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { BlockId } from './BlockId';
import type { InstanceLink } from './InstanceLink';
import type { WarningType } from './WarningType';
/**
 * Request object to transition the block status to Open for Pickup. This object contains unique identifier ( Block unique id ) to identify the block to be transitioned and the standard optional Opera Context element.
 * @export
 * @interface BlockStatus
 */
export interface BlockStatus {
    /**
     * Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
     * @type {string}
     * @memberof BlockStatus
     */
    hotelId?: string;
    /**
     *
     * @type {BlockId}
     * @memberof BlockStatus
     */
    blockId?: BlockId;
    /**
     *
     * @type {Array<InstanceLink>}
     * @memberof BlockStatus
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof BlockStatus
     */
    warnings?: Array<WarningType>;
}
/**
 * Check if a given object implements the BlockStatus interface.
 */
export declare function instanceOfBlockStatus(value: object): boolean;
export declare function BlockStatusFromJSON(json: any): BlockStatus;
export declare function BlockStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockStatus;
export declare function BlockStatusToJSON(value?: BlockStatus | null): any;
