/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { EventTypeType } from './EventTypeType';
/**
 * Block attributes used for external systems. Only available if configured in OPERA Cloud.
 * @export
 * @interface BlockInstructionTypeExternalAttributes
 */
export interface BlockInstructionTypeExternalAttributes {
    /**
     *
     * @type {EventTypeType}
     * @memberof BlockInstructionTypeExternalAttributes
     */
    eventType?: EventTypeType;
    /**
     * Group IATA number validated by an external system and block can't be saved unless confirmed that GIID is valid. Only available if configured in OPERA Cloud.
     * @type {string}
     * @memberof BlockInstructionTypeExternalAttributes
     */
    gIId?: string;
    /**
     * Only available if configured in OPERA Cloud.
     * @type {boolean}
     * @memberof BlockInstructionTypeExternalAttributes
     */
    housingProtected?: boolean;
    /**
     * When this flag is set it will be used to roll Block End Date and Block Rate Program End Date in the night audit process. Only available if configured in OPERA Cloud.
     * @type {boolean}
     * @memberof BlockInstructionTypeExternalAttributes
     */
    rollEndDate?: boolean;
}
/**
 * Check if a given object implements the BlockInstructionTypeExternalAttributes interface.
 */
export declare function instanceOfBlockInstructionTypeExternalAttributes(value: object): boolean;
export declare function BlockInstructionTypeExternalAttributesFromJSON(json: any): BlockInstructionTypeExternalAttributes;
export declare function BlockInstructionTypeExternalAttributesFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockInstructionTypeExternalAttributes;
export declare function BlockInstructionTypeExternalAttributesToJSON(value?: BlockInstructionTypeExternalAttributes | null): any;
