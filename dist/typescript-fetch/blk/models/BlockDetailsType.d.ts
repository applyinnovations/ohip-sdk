/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { BlockClassificationType } from './BlockClassificationType';
import type { BlockDetailsTypePrimaryOwners } from './BlockDetailsTypePrimaryOwners';
import type { BlockDetailsTypePrimaryProfiles } from './BlockDetailsTypePrimaryProfiles';
import type { BlockDetailsTypePrimaryRatePlanCodes } from './BlockDetailsTypePrimaryRatePlanCodes';
import type { BlockDetailsTypeShoulderRatePlanCode } from './BlockDetailsTypeShoulderRatePlanCode';
import type { BlockNonCompeteType } from './BlockNonCompeteType';
import type { BlockRateProtectionType } from './BlockRateProtectionType';
import type { BlockSourceOfSaleType } from './BlockSourceOfSaleType';
import type { BookingStatusDetailType } from './BookingStatusDetailType';
import type { BookingStatusHistoryType } from './BookingStatusHistoryType';
import type { CancellationDetailsType } from './CancellationDetailsType';
import type { CodeDescriptionType } from './CodeDescriptionType';
import type { HotelUseType } from './HotelUseType';
import type { MarketCodeInfoType } from './MarketCodeInfoType';
import type { ReservationTypeInfoType } from './ReservationTypeInfoType';
import type { TimeSpanType } from './TimeSpanType';
import type { UniqueIDType } from './UniqueIDType';
/**
 * Information about the Block Details
 * @export
 * @interface BlockDetailsType
 */
export interface BlockDetailsType {
    /**
     * Indicates whether rates of a block can be overridden. Applicable only for blocks with a Rate Code.
     * @type {boolean}
     * @memberof BlockDetailsType
     */
    allowRateOverride?: boolean;
    /**
     * Indicates if contract grid will be auto loaded from original grid.
     * @type {boolean}
     * @memberof BlockDetailsType
     */
    autoloadContractGrid?: boolean;
    /**
     * List of Block Aliases.
     * @type {Array<string>}
     * @memberof BlockDetailsType
     */
    blockAliases?: Array<string>;
    /**
     *
     * @type {BlockClassificationType}
     * @memberof BlockDetailsType
     */
    blockClassification?: BlockClassificationType;
    /**
     * Block code for the block.
     * @type {string}
     * @memberof BlockDetailsType
     */
    blockCode?: string;
    /**
     * Name of the block.
     * @type {string}
     * @memberof BlockDetailsType
     */
    blockName?: string;
    /**
     * Next booking status of the business block.
     * @type {Array<BookingStatusDetailType>}
     * @memberof BlockDetailsType
     */
    blockNextStatusList?: Array<BookingStatusDetailType>;
    /**
     * Origin information of the block PMS/ORS/SC/SFA
     * @type {string}
     * @memberof BlockDetailsType
     */
    blockOrigin?: string;
    /**
     *
     * @type {BookingStatusDetailType}
     * @memberof BlockDetailsType
     */
    blockStatus?: BookingStatusDetailType;
    /**
     * Collection of block status history.
     * @type {Array<BookingStatusHistoryType>}
     * @memberof BlockDetailsType
     */
    blockStatusChangeHistory?: Array<BookingStatusHistoryType>;
    /**
     * Internal type of the block.
     * @type {string}
     * @memberof BlockDetailsType
     */
    blockType?: string;
    /**
     *
     * @type {CodeDescriptionType}
     * @memberof BlockDetailsType
     */
    bookingType?: CodeDescriptionType;
    /**
     * Indicate whether arrivals exists on current business date.
     * @type {boolean}
     * @memberof BlockDetailsType
     */
    businessDateArrivalsExist?: boolean;
    /**
     *
     * @type {CancellationDetailsType}
     * @memberof BlockDetailsType
     */
    cancellationDetails?: CancellationDetailsType;
    /**
     * Indicates if this is a catering only block.
     * @type {boolean}
     * @memberof BlockDetailsType
     */
    cateringOnlyBlock?: boolean;
    /**
     * Indicate what percentage of this block is eligible for commission.
     * @type {number}
     * @memberof BlockDetailsType
     */
    commissionPercent?: number;
    /**
     * Determines whether or not the block can be managed at the CRS level.
     * @type {boolean}
     * @memberof BlockDetailsType
     */
    controlBlockLocally?: boolean;
    /**
     * Indicates the likelihood description of the block moving to the next active block status.
     * @type {string}
     * @memberof BlockDetailsType
     */
    conversionCode?: string;
    /**
     * Indicates the likelihood of the block moving to the next active block status.
     * @type {string}
     * @memberof BlockDetailsType
     */
    conversionCodeDescription?: string;
    /**
     * Currency Code attached to the business block.
     * @type {string}
     * @memberof BlockDetailsType
     */
    currencyCode?: string;
    /**
     * Indicates if the block is locked by an external system.
     * @type {boolean}
     * @memberof BlockDetailsType
     */
    externalLocked?: boolean;
    /**
     * Indicates if alternate dates are allowed for the booking.
     * @type {boolean}
     * @memberof BlockDetailsType
     */
    flexibleDates?: boolean;
    /**
     * A text field used to communicate the proper name of the hotel.
     * @type {string}
     * @memberof BlockDetailsType
     */
    hotelName?: string;
    /**
     *
     * @type {HotelUseType}
     * @memberof BlockDetailsType
     */
    hotelUse?: HotelUseType;
    /**
     * Indicates whether Block was cutoff manually.
     * @type {boolean}
     * @memberof BlockDetailsType
     */
    manualCutOff?: boolean;
    /**
     *
     * @type {MarketCodeInfoType}
     * @memberof BlockDetailsType
     */
    marketCode?: MarketCodeInfoType;
    /**
     *
     * @type {BlockNonCompeteType}
     * @memberof BlockDetailsType
     */
    nonCompeteDetails?: BlockNonCompeteType;
    /**
     *
     * @type {TimeSpanType}
     * @memberof BlockDetailsType
     */
    originalTimeSpan?: TimeSpanType;
    /**
     *
     * @type {CodeDescriptionType}
     * @memberof BlockDetailsType
     */
    paymentMethod?: CodeDescriptionType;
    /**
     *
     * @type {BlockDetailsTypePrimaryOwners}
     * @memberof BlockDetailsType
     */
    primaryOwners?: BlockDetailsTypePrimaryOwners;
    /**
     *
     * @type {BlockDetailsTypePrimaryProfiles}
     * @memberof BlockDetailsType
     */
    primaryProfiles?: BlockDetailsTypePrimaryProfiles;
    /**
     *
     * @type {BlockDetailsTypePrimaryRatePlanCodes}
     * @memberof BlockDetailsType
     */
    primaryRatePlanCodes?: BlockDetailsTypePrimaryRatePlanCodes;
    /**
     * Quote Reference Number is an alternate id number for the block that can be used in the SC Quote report and allows for tracking and managing revisions
     * @type {string}
     * @memberof BlockDetailsType
     */
    quoteReferenceNumber?: string;
    /**
     * Indicates the ranking of the block.
     * @type {string}
     * @memberof BlockDetailsType
     */
    rankingCode?: string;
    /**
     * Indicates the ranking description of the block.
     * @type {string}
     * @memberof BlockDetailsType
     */
    rankingCodeDescription?: string;
    /**
     *
     * @type {CodeDescriptionType}
     * @memberof BlockDetailsType
     */
    rateOverrideReason?: CodeDescriptionType;
    /**
     *
     * @type {BlockRateProtectionType}
     * @memberof BlockDetailsType
     */
    rateProtectionDetails?: BlockRateProtectionType;
    /**
     *
     * @type {CodeDescriptionType}
     * @memberof BlockDetailsType
     */
    reservationMethod?: CodeDescriptionType;
    /**
     *
     * @type {ReservationTypeInfoType}
     * @memberof BlockDetailsType
     */
    reservationType?: ReservationTypeInfoType;
    /**
     *
     * @type {TimeSpanType}
     * @memberof BlockDetailsType
     */
    shoulderDates?: TimeSpanType;
    /**
     *
     * @type {BlockDetailsTypeShoulderRatePlanCode}
     * @memberof BlockDetailsType
     */
    shoulderRatePlanCode?: BlockDetailsTypeShoulderRatePlanCode;
    /**
     *
     * @type {BlockSourceOfSaleType}
     * @memberof BlockDetailsType
     */
    sourceOfSale?: BlockSourceOfSaleType;
    /**
     * Internal status for the block.
     * @type {string}
     * @memberof BlockDetailsType
     */
    status?: string;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof BlockDetailsType
     */
    subBlockIdList?: Array<UniqueIDType>;
    /**
     * Indicate if Master/Sub Blocks are Synchronized.
     * @type {boolean}
     * @memberof BlockDetailsType
     */
    _synchronized?: boolean;
    /**
     * The Tax Type determines whether generates are applied when calculating prices and revenue. When populated, the Tax Type value will default on the Posting Master and will be used in the calculations for the Proforma Invoice report.
     * @type {string}
     * @memberof BlockDetailsType
     */
    taxType?: string;
    /**
     *
     * @type {TimeSpanType}
     * @memberof BlockDetailsType
     */
    timeSpan?: TimeSpanType;
    /**
     * The tour code that this block belongs to, if the block is a part of a tour series.
     * @type {string}
     * @memberof BlockDetailsType
     */
    tourCode?: string;
    /**
     * Indicates whether the business block should be considered as a wholesale block for revenue management block materialization forecasting
     * @type {boolean}
     * @memberof BlockDetailsType
     */
    wholesaleBlock?: boolean;
}
/**
 * Check if a given object implements the BlockDetailsType interface.
 */
export declare function instanceOfBlockDetailsType(value: object): boolean;
export declare function BlockDetailsTypeFromJSON(json: any): BlockDetailsType;
export declare function BlockDetailsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockDetailsType;
export declare function BlockDetailsTypeToJSON(value?: BlockDetailsType | null): any;
