/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockId } from './BlockId';
import {
    BlockIdFromJSON,
    BlockIdFromJSONTyped,
    BlockIdToJSON,
} from './BlockId';
import type { BorrowRoomType } from './BorrowRoomType';
import {
    BorrowRoomTypeFromJSON,
    BorrowRoomTypeFromJSONTyped,
    BorrowRoomTypeToJSON,
} from './BorrowRoomType';

/**
 * This holds the number of rooms for each date that will be borrowed from the candidate room type provided.
 * @export
 * @interface BorrowInventoryType
 */
export interface BorrowInventoryType {
    /**
     * 
     * @type {BlockId}
     * @memberof BorrowInventoryType
     */
    blockId?: BlockId;
    /**
     * The date on which rooms need to be borrowed for the block either from another room type in the block or from House if the block is elastic.
     * @type {Date}
     * @memberof BorrowInventoryType
     */
    borrowDate?: Date;
    /**
     * Specifies the number of rooms to be borrowed from the room type or House.
     * @type {Array<BorrowRoomType>}
     * @memberof BorrowInventoryType
     */
    borrowRooms?: Array<BorrowRoomType>;
}

/**
 * Check if a given object implements the BorrowInventoryType interface.
 */
export function instanceOfBorrowInventoryType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BorrowInventoryTypeFromJSON(json: any): BorrowInventoryType {
    return BorrowInventoryTypeFromJSONTyped(json, false);
}

export function BorrowInventoryTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BorrowInventoryType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockId': !exists(json, 'blockId') ? undefined : BlockIdFromJSON(json['blockId']),
        'borrowDate': !exists(json, 'borrowDate') ? undefined : (new Date(json['borrowDate'])),
        'borrowRooms': !exists(json, 'borrowRooms') ? undefined : ((json['borrowRooms'] as Array<any>).map(BorrowRoomTypeFromJSON)),
    };
}

export function BorrowInventoryTypeToJSON(value?: BorrowInventoryType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockId': BlockIdToJSON(value.blockId),
        'borrowDate': value.borrowDate === undefined ? undefined : (value.borrowDate.toISOString().substr(0,10)),
        'borrowRooms': value.borrowRooms === undefined ? undefined : ((value.borrowRooms as Array<any>).map(BorrowRoomTypeToJSON)),
    };
}

