/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';

/**
 * 
 * @export
 * @interface BookingStatusHistoryType
 */
export interface BookingStatusHistoryType {
    /**
     * Number indicating the sequence of status change.
     * @type {number}
     * @memberof BookingStatusHistoryType
     */
    sequence?: number;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof BookingStatusHistoryType
     */
    bookingStatus?: CodeDescriptionType;
    /**
     * Date and time of the status change.
     * @type {Date}
     * @memberof BookingStatusHistoryType
     */
    modifyDateTime?: Date;
    /**
     * User who modified the status.
     * @type {string}
     * @memberof BookingStatusHistoryType
     */
    modifierId?: string;
}

/**
 * Check if a given object implements the BookingStatusHistoryType interface.
 */
export function instanceOfBookingStatusHistoryType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BookingStatusHistoryTypeFromJSON(json: any): BookingStatusHistoryType {
    return BookingStatusHistoryTypeFromJSONTyped(json, false);
}

export function BookingStatusHistoryTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BookingStatusHistoryType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
        'bookingStatus': !exists(json, 'bookingStatus') ? undefined : CodeDescriptionTypeFromJSON(json['bookingStatus']),
        'modifyDateTime': !exists(json, 'modifyDateTime') ? undefined : (new Date(json['modifyDateTime'])),
        'modifierId': !exists(json, 'modifierId') ? undefined : json['modifierId'],
    };
}

export function BookingStatusHistoryTypeToJSON(value?: BookingStatusHistoryType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sequence': value.sequence,
        'bookingStatus': CodeDescriptionTypeToJSON(value.bookingStatus),
        'modifyDateTime': value.modifyDateTime === undefined ? undefined : (value.modifyDateTime.toISOString().substr(0,10)),
        'modifierId': value.modifierId,
    };
}

