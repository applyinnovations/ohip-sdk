/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { BlockId } from './BlockId';
import type { CancellationDetailsType } from './CancellationDetailsType';
import type { EventAttendeesType } from './EventAttendeesType';
import type { MasterBlockInfoType } from './MasterBlockInfoType';
/**
 * This holds the information required to change the catering status of the business block.
 * @export
 * @interface ChangeCateringStatusType
 */
export interface ChangeCateringStatusType {
    /**
     *
     * @type {BlockId}
     * @memberof ChangeCateringStatusType
     */
    blockId?: BlockId;
    /**
     *
     * @type {CancellationDetailsType}
     * @memberof ChangeCateringStatusType
     */
    cancellationDetails?: CancellationDetailsType;
    /**
     * Current catering status of the business block.
     * @type {string}
     * @memberof ChangeCateringStatusType
     */
    currentCateringStatus?: string;
    /**
     *
     * @type {EventAttendeesType}
     * @memberof ChangeCateringStatusType
     */
    eventAttendees?: EventAttendeesType;
    /**
     * Opera Hotel code for the change block status operation.
     * @type {string}
     * @memberof ChangeCateringStatusType
     */
    hotelId?: string;
    /**
     *
     * @type {MasterBlockInfoType}
     * @memberof ChangeCateringStatusType
     */
    masterSubBlockInfo?: MasterBlockInfoType;
    /**
     * New catering status of the business block.
     * @type {string}
     * @memberof ChangeCateringStatusType
     */
    newCateringStatus?: string;
    /**
     * Indicates whether to ignore any warning during applying the changes to the events associated with the current block.
     * @type {boolean}
     * @memberof ChangeCateringStatusType
     */
    overrideEventsProcessingWarnings?: boolean;
}
/**
 * Check if a given object implements the ChangeCateringStatusType interface.
 */
export declare function instanceOfChangeCateringStatusType(value: object): boolean;
export declare function ChangeCateringStatusTypeFromJSON(json: any): ChangeCateringStatusType;
export declare function ChangeCateringStatusTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChangeCateringStatusType;
export declare function ChangeCateringStatusTypeToJSON(value?: ChangeCateringStatusType | null): any;
