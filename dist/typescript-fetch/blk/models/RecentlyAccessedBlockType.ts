/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TimeSpanType } from './TimeSpanType';
import {
    TimeSpanTypeFromJSON,
    TimeSpanTypeFromJSONTyped,
    TimeSpanTypeToJSON,
} from './TimeSpanType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * A recently used block record.
 * @export
 * @interface RecentlyAccessedBlockType
 */
export interface RecentlyAccessedBlockType {
    /**
     * 
     * @type {Date}
     * @memberof RecentlyAccessedBlockType
     */
    accessDate?: Date;
    /**
     * Business Block Code
     * @type {string}
     * @memberof RecentlyAccessedBlockType
     */
    blockCode?: string;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof RecentlyAccessedBlockType
     */
    blockIdList?: Array<UniqueIDType>;
    /**
     * The name of the business block.
     * @type {string}
     * @memberof RecentlyAccessedBlockType
     */
    blockName?: string;
    /**
     * 
     * @type {string}
     * @memberof RecentlyAccessedBlockType
     */
    hotelId?: string;
    /**
     * A text field used to communicate the proper name of the hotel.
     * @type {string}
     * @memberof RecentlyAccessedBlockType
     */
    hotelName?: string;
    /**
     * 
     * @type {TimeSpanType}
     * @memberof RecentlyAccessedBlockType
     */
    timeSpan?: TimeSpanType;
}

/**
 * Check if a given object implements the RecentlyAccessedBlockType interface.
 */
export function instanceOfRecentlyAccessedBlockType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RecentlyAccessedBlockTypeFromJSON(json: any): RecentlyAccessedBlockType {
    return RecentlyAccessedBlockTypeFromJSONTyped(json, false);
}

export function RecentlyAccessedBlockTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RecentlyAccessedBlockType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessDate': !exists(json, 'accessDate') ? undefined : (new Date(json['accessDate'])),
        'blockCode': !exists(json, 'blockCode') ? undefined : json['blockCode'],
        'blockIdList': !exists(json, 'blockIdList') ? undefined : ((json['blockIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'blockName': !exists(json, 'blockName') ? undefined : json['blockName'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'hotelName': !exists(json, 'hotelName') ? undefined : json['hotelName'],
        'timeSpan': !exists(json, 'timeSpan') ? undefined : TimeSpanTypeFromJSON(json['timeSpan']),
    };
}

export function RecentlyAccessedBlockTypeToJSON(value?: RecentlyAccessedBlockType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accessDate': value.accessDate === undefined ? undefined : (value.accessDate.toISOString().substr(0,10)),
        'blockCode': value.blockCode,
        'blockIdList': value.blockIdList === undefined ? undefined : ((value.blockIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'blockName': value.blockName,
        'hotelId': value.hotelId,
        'hotelName': value.hotelName,
        'timeSpan': TimeSpanTypeToJSON(value.timeSpan),
    };
}

