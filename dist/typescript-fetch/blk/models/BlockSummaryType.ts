/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockClassificationType } from './BlockClassificationType';
import {
    BlockClassificationTypeFromJSON,
    BlockClassificationTypeFromJSONTyped,
    BlockClassificationTypeToJSON,
} from './BlockClassificationType';
import type { BlockInventoryControlType } from './BlockInventoryControlType';
import {
    BlockInventoryControlTypeFromJSON,
    BlockInventoryControlTypeFromJSONTyped,
    BlockInventoryControlTypeToJSON,
} from './BlockInventoryControlType';
import type { BlockOwnersType } from './BlockOwnersType';
import {
    BlockOwnersTypeFromJSON,
    BlockOwnersTypeFromJSONTyped,
    BlockOwnersTypeToJSON,
} from './BlockOwnersType';
import type { BookingStatusType } from './BookingStatusType';
import {
    BookingStatusTypeFromJSON,
    BookingStatusTypeFromJSONTyped,
    BookingStatusTypeToJSON,
} from './BookingStatusType';
import type { CustomFieldsType } from './CustomFieldsType';
import {
    CustomFieldsTypeFromJSON,
    CustomFieldsTypeFromJSONTyped,
    CustomFieldsTypeToJSON,
} from './CustomFieldsType';
import type { HotelUseType } from './HotelUseType';
import {
    HotelUseTypeFromJSON,
    HotelUseTypeFromJSONTyped,
    HotelUseTypeToJSON,
} from './HotelUseType';
import type { IndicatorType } from './IndicatorType';
import {
    IndicatorTypeFromJSON,
    IndicatorTypeFromJSONTyped,
    IndicatorTypeToJSON,
} from './IndicatorType';
import type { SearchMatchType } from './SearchMatchType';
import {
    SearchMatchTypeFromJSON,
    SearchMatchTypeFromJSONTyped,
    SearchMatchTypeToJSON,
} from './SearchMatchType';

/**
 * 
 * @export
 * @interface BlockSummaryType
 */
export interface BlockSummaryType {
    /**
     * Hotel code for this block.
     * @type {string}
     * @memberof BlockSummaryType
     */
    hotelId?: string;
    /**
     * Block code for this block.
     * @type {string}
     * @memberof BlockSummaryType
     */
    blockCode?: string;
    /**
     * Block name for this block.
     * @type {string}
     * @memberof BlockSummaryType
     */
    blockName?: string;
    /**
     * 
     * @type {BookingStatusType}
     * @memberof BlockSummaryType
     */
    blockStatus?: BookingStatusType;
    /**
     * Internal status for the block.
     * @type {string}
     * @memberof BlockSummaryType
     */
    status?: string;
    /**
     * Rate code assigned to block.
     * @type {string}
     * @memberof BlockSummaryType
     */
    rateCode?: string;
    /**
     * 
     * @type {BookingStatusType}
     * @memberof BlockSummaryType
     */
    cateringStatus?: BookingStatusType;
    /**
     * Number of Attendees for Catering Event
     * @type {number}
     * @memberof BlockSummaryType
     */
    cateringAttendees?: number;
    /**
     * Indicates if this is a catering only block.
     * @type {boolean}
     * @memberof BlockSummaryType
     */
    cateringOnlyBlock?: boolean;
    /**
     * Start date for this block.
     * @type {Date}
     * @memberof BlockSummaryType
     */
    startDate?: Date;
    /**
     * End date for this block.
     * @type {Date}
     * @memberof BlockSummaryType
     */
    endDate?: Date;
    /**
     * Shoulder begin date for this block.
     * @type {Date}
     * @memberof BlockSummaryType
     */
    shoulderStartDate?: Date;
    /**
     * Shoulder end date for this block.
     * @type {Date}
     * @memberof BlockSummaryType
     */
    shoulderEndDate?: Date;
    /**
     * 
     * @type {BlockInventoryControlType}
     * @memberof BlockSummaryType
     */
    inventoryControl?: BlockInventoryControlType;
    /**
     * 
     * @type {HotelUseType}
     * @memberof BlockSummaryType
     */
    hotelUse?: HotelUseType;
    /**
     * List of Generic Name-Value-Pair Parameters used for super search matches.
     * @type {Array<SearchMatchType>}
     * @memberof BlockSummaryType
     */
    searchMatches?: Array<SearchMatchType>;
    /**
     * Collection of lamp indicators.
     * @type {Array<IndicatorType>}
     * @memberof BlockSummaryType
     */
    blockIndicators?: Array<IndicatorType>;
    /**
     * The tour code that this block belongs to, if the block is a part of a tour series.
     * @type {string}
     * @memberof BlockSummaryType
     */
    tourCode?: string;
    /**
     * Inventory held for the business block.
     * @type {number}
     * @memberof BlockSummaryType
     */
    rooms?: number;
    /**
     * 
     * @type {BlockOwnersType}
     * @memberof BlockSummaryType
     */
    primaryOwners?: BlockOwnersType;
    /**
     * 
     * @type {BlockClassificationType}
     * @memberof BlockSummaryType
     */
    blockClassification?: BlockClassificationType;
    /**
     * Indicate if Master/Sub Blocks are Synchronized.
     * @type {boolean}
     * @memberof BlockSummaryType
     */
    _synchronized?: boolean;
    /**
     * Group name for this block.
     * @type {string}
     * @memberof BlockSummaryType
     */
    groupName?: string;
    /**
     * If tentative block, block inventory is not deducted from hotel inventory else block inventory is deducted.
     * @type {boolean}
     * @memberof BlockSummaryType
     */
    tentativeBlock?: boolean;
    /**
     * 
     * @type {CustomFieldsType}
     * @memberof BlockSummaryType
     */
    customFields?: CustomFieldsType;
    /**
     * Inventory held for the block's reservations.
     * @type {number}
     * @memberof BlockSummaryType
     */
    actualRooms?: number;
    /**
     * Date after which unused block rooms should be returned to house.
     * @type {Date}
     * @memberof BlockSummaryType
     */
    cutoffDate?: Date;
    /**
     * Reservation type of the business block.
     * @type {string}
     * @memberof BlockSummaryType
     */
    reservationType?: string;
    /**
     * Indicates if alternate dates are allowed for the booking.
     * @type {boolean}
     * @memberof BlockSummaryType
     */
    flexibleDates?: boolean;
    /**
     * Indicates if blocked rooms are deducted from inventory.
     * @type {boolean}
     * @memberof BlockSummaryType
     */
    deductInventory?: boolean;
    /**
     * Indicates if blocked catering events are deducted from inventory.
     * @type {boolean}
     * @memberof BlockSummaryType
     */
    cateringDeductInventory?: boolean;
    /**
     * Contains information about the date by which the group must make a decision on the block.
     * @type {Date}
     * @memberof BlockSummaryType
     */
    decisionDate?: Date;
    /**
     * Contains information to follow up on the block.
     * @type {Date}
     * @memberof BlockSummaryType
     */
    followupDate?: Date;
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof BlockSummaryType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof BlockSummaryType
     */
    creatorId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof BlockSummaryType
     */
    lastModifyDateTime?: string;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof BlockSummaryType
     */
    lastModifierId?: string;
}

/**
 * Check if a given object implements the BlockSummaryType interface.
 */
export function instanceOfBlockSummaryType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockSummaryTypeFromJSON(json: any): BlockSummaryType {
    return BlockSummaryTypeFromJSONTyped(json, false);
}

export function BlockSummaryTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockSummaryType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'blockCode': !exists(json, 'blockCode') ? undefined : json['blockCode'],
        'blockName': !exists(json, 'blockName') ? undefined : json['blockName'],
        'blockStatus': !exists(json, 'blockStatus') ? undefined : BookingStatusTypeFromJSON(json['blockStatus']),
        'status': !exists(json, 'status') ? undefined : json['status'],
        'rateCode': !exists(json, 'rateCode') ? undefined : json['rateCode'],
        'cateringStatus': !exists(json, 'cateringStatus') ? undefined : BookingStatusTypeFromJSON(json['cateringStatus']),
        'cateringAttendees': !exists(json, 'cateringAttendees') ? undefined : json['cateringAttendees'],
        'cateringOnlyBlock': !exists(json, 'cateringOnlyBlock') ? undefined : json['cateringOnlyBlock'],
        'startDate': !exists(json, 'startDate') ? undefined : (new Date(json['startDate'])),
        'endDate': !exists(json, 'endDate') ? undefined : (new Date(json['endDate'])),
        'shoulderStartDate': !exists(json, 'shoulderStartDate') ? undefined : (new Date(json['shoulderStartDate'])),
        'shoulderEndDate': !exists(json, 'shoulderEndDate') ? undefined : (new Date(json['shoulderEndDate'])),
        'inventoryControl': !exists(json, 'inventoryControl') ? undefined : BlockInventoryControlTypeFromJSON(json['inventoryControl']),
        'hotelUse': !exists(json, 'hotelUse') ? undefined : HotelUseTypeFromJSON(json['hotelUse']),
        'searchMatches': !exists(json, 'searchMatches') ? undefined : ((json['searchMatches'] as Array<any>).map(SearchMatchTypeFromJSON)),
        'blockIndicators': !exists(json, 'blockIndicators') ? undefined : ((json['blockIndicators'] as Array<any>).map(IndicatorTypeFromJSON)),
        'tourCode': !exists(json, 'tourCode') ? undefined : json['tourCode'],
        'rooms': !exists(json, 'rooms') ? undefined : json['rooms'],
        'primaryOwners': !exists(json, 'primaryOwners') ? undefined : BlockOwnersTypeFromJSON(json['primaryOwners']),
        'blockClassification': !exists(json, 'blockClassification') ? undefined : BlockClassificationTypeFromJSON(json['blockClassification']),
        '_synchronized': !exists(json, 'synchronized') ? undefined : json['synchronized'],
        'groupName': !exists(json, 'groupName') ? undefined : json['groupName'],
        'tentativeBlock': !exists(json, 'tentativeBlock') ? undefined : json['tentativeBlock'],
        'customFields': !exists(json, 'customFields') ? undefined : CustomFieldsTypeFromJSON(json['customFields']),
        'actualRooms': !exists(json, 'actualRooms') ? undefined : json['actualRooms'],
        'cutoffDate': !exists(json, 'cutoffDate') ? undefined : (new Date(json['cutoffDate'])),
        'reservationType': !exists(json, 'reservationType') ? undefined : json['reservationType'],
        'flexibleDates': !exists(json, 'flexibleDates') ? undefined : json['flexibleDates'],
        'deductInventory': !exists(json, 'deductInventory') ? undefined : json['deductInventory'],
        'cateringDeductInventory': !exists(json, 'cateringDeductInventory') ? undefined : json['cateringDeductInventory'],
        'decisionDate': !exists(json, 'decisionDate') ? undefined : (new Date(json['decisionDate'])),
        'followupDate': !exists(json, 'followupDate') ? undefined : (new Date(json['followupDate'])),
        'createDateTime': !exists(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'lastModifyDateTime': !exists(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
    };
}

export function BlockSummaryTypeToJSON(value?: BlockSummaryType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'blockCode': value.blockCode,
        'blockName': value.blockName,
        'blockStatus': BookingStatusTypeToJSON(value.blockStatus),
        'status': value.status,
        'rateCode': value.rateCode,
        'cateringStatus': BookingStatusTypeToJSON(value.cateringStatus),
        'cateringAttendees': value.cateringAttendees,
        'cateringOnlyBlock': value.cateringOnlyBlock,
        'startDate': value.startDate === undefined ? undefined : (value.startDate.toISOString().substr(0,10)),
        'endDate': value.endDate === undefined ? undefined : (value.endDate.toISOString().substr(0,10)),
        'shoulderStartDate': value.shoulderStartDate === undefined ? undefined : (value.shoulderStartDate.toISOString().substr(0,10)),
        'shoulderEndDate': value.shoulderEndDate === undefined ? undefined : (value.shoulderEndDate.toISOString().substr(0,10)),
        'inventoryControl': BlockInventoryControlTypeToJSON(value.inventoryControl),
        'hotelUse': HotelUseTypeToJSON(value.hotelUse),
        'searchMatches': value.searchMatches === undefined ? undefined : ((value.searchMatches as Array<any>).map(SearchMatchTypeToJSON)),
        'blockIndicators': value.blockIndicators === undefined ? undefined : ((value.blockIndicators as Array<any>).map(IndicatorTypeToJSON)),
        'tourCode': value.tourCode,
        'rooms': value.rooms,
        'primaryOwners': BlockOwnersTypeToJSON(value.primaryOwners),
        'blockClassification': BlockClassificationTypeToJSON(value.blockClassification),
        'synchronized': value._synchronized,
        'groupName': value.groupName,
        'tentativeBlock': value.tentativeBlock,
        'customFields': CustomFieldsTypeToJSON(value.customFields),
        'actualRooms': value.actualRooms,
        'cutoffDate': value.cutoffDate === undefined ? undefined : (value.cutoffDate.toISOString().substr(0,10)),
        'reservationType': value.reservationType,
        'flexibleDates': value.flexibleDates,
        'deductInventory': value.deductInventory,
        'cateringDeductInventory': value.cateringDeductInventory,
        'decisionDate': value.decisionDate === undefined ? undefined : (value.decisionDate.toISOString().substr(0,10)),
        'followupDate': value.followupDate === undefined ? undefined : (value.followupDate.toISOString().substr(0,10)),
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'lastModifierId': value.lastModifierId,
    };
}

