/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AttachmentsType } from './AttachmentsType';
import type { BlockAccessExclusionsType } from './BlockAccessExclusionsType';
import type { BlockAlternateDateType } from './BlockAlternateDateType';
import type { BlockDetailsType } from './BlockDetailsType';
import type { BlockIdList } from './BlockIdList';
import type { BlockInstructionTypeBlockProfiles } from './BlockInstructionTypeBlockProfiles';
import type { BlockInstructionTypeBlockSecurity } from './BlockInstructionTypeBlockSecurity';
import type { BlockInstructionTypeComments } from './BlockInstructionTypeComments';
import type { BlockInstructionTypeExternalAttributes } from './BlockInstructionTypeExternalAttributes';
import type { BlockInstructionTypeGenericRoomAllocations } from './BlockInstructionTypeGenericRoomAllocations';
import type { BlockInstructionTypeRoomAllocations } from './BlockInstructionTypeRoomAllocations';
import type { BlockInventoryItemsType } from './BlockInventoryItemsType';
import type { BlockOwnersType } from './BlockOwnersType';
import type { BlockPackageType } from './BlockPackageType';
import type { BlockReservationDetailsType } from './BlockReservationDetailsType';
import type { BlockRestrictionsType } from './BlockRestrictionsType';
import type { BlockStatisticsSummaryType } from './BlockStatisticsSummaryType';
import type { BlockStatisticsType } from './BlockStatisticsType';
import type { BlockTracesType } from './BlockTracesType';
import type { BlockWashSchedulesType } from './BlockWashSchedulesType';
import type { CateringType } from './CateringType';
import type { CentralSalesLeadsType } from './CentralSalesLeadsType';
import type { ExternalReferencesType } from './ExternalReferencesType';
import type { IndicatorsType } from './IndicatorsType';
import type { MasterBlockInfoType } from './MasterBlockInfoType';
import type { RateProgramType } from './RateProgramType';
import type { ReservationPoliciesType } from './ReservationPoliciesType';
import type { SellMessageConfigsType } from './SellMessageConfigsType';
import type { UserDefinedFieldsType } from './UserDefinedFieldsType';
/**
 *
 * @export
 * @interface BlockType
 */
export interface BlockType {
    /**
     *
     * @type {BlockAccessExclusionsType}
     * @memberof BlockType
     */
    accessExclusions?: BlockAccessExclusionsType;
    /**
     * Alternate Date information for the Block.
     * @type {Array<BlockAlternateDateType>}
     * @memberof BlockType
     */
    alternateDates?: Array<BlockAlternateDateType>;
    /**
     *
     * @type {AttachmentsType}
     * @memberof BlockType
     */
    attachments?: AttachmentsType;
    /**
     *
     * @type {BlockDetailsType}
     * @memberof BlockType
     */
    blockDetails?: BlockDetailsType;
    /**
     *
     * @type {BlockIdList}
     * @memberof BlockType
     */
    blockIdList?: BlockIdList;
    /**
     *
     * @type {IndicatorsType}
     * @memberof BlockType
     */
    blockIndicators?: IndicatorsType;
    /**
     *
     * @type {BlockOwnersType}
     * @memberof BlockType
     */
    blockOwners?: BlockOwnersType;
    /**
     * A Block Package represents a non-room product provided to guests. Block Pacakges may have associated inventory and charges.
     * @type {Array<BlockPackageType>}
     * @memberof BlockType
     */
    blockPackages?: Array<BlockPackageType>;
    /**
     *
     * @type {BlockInstructionTypeBlockProfiles}
     * @memberof BlockType
     */
    blockProfiles?: BlockInstructionTypeBlockProfiles;
    /**
     *
     * @type {BlockInstructionTypeBlockSecurity}
     * @memberof BlockType
     */
    blockSecurity?: BlockInstructionTypeBlockSecurity;
    /**
     *
     * @type {BlockStatisticsType}
     * @memberof BlockType
     */
    blockStatistics?: BlockStatisticsType;
    /**
     *
     * @type {CateringType}
     * @memberof BlockType
     */
    catering?: CateringType;
    /**
     *
     * @type {CentralSalesLeadsType}
     * @memberof BlockType
     */
    centralSalesLeads?: CentralSalesLeadsType;
    /**
     *
     * @type {BlockInstructionTypeComments}
     * @memberof BlockType
     */
    comments?: BlockInstructionTypeComments;
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof BlockType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof BlockType
     */
    creatorId?: string;
    /**
     *
     * @type {BlockInstructionTypeExternalAttributes}
     * @memberof BlockType
     */
    externalAttributes?: BlockInstructionTypeExternalAttributes;
    /**
     *
     * @type {ExternalReferencesType}
     * @memberof BlockType
     */
    externalReferences?: ExternalReferencesType;
    /**
     *
     * @type {BlockInstructionTypeGenericRoomAllocations}
     * @memberof BlockType
     */
    genericRoomAllocations?: BlockInstructionTypeGenericRoomAllocations;
    /**
     *
     * @type {string}
     * @memberof BlockType
     */
    hotelId?: string;
    /**
     *
     * @type {BlockInventoryItemsType}
     * @memberof BlockType
     */
    inventoryItems?: BlockInventoryItemsType;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof BlockType
     */
    lastModifierId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof BlockType
     */
    lastModifyDateTime?: string;
    /**
     * Mark this block as recently accessed.
     * @type {boolean}
     * @memberof BlockType
     */
    markAsRecentlyAccessed?: boolean;
    /**
     *
     * @type {MasterBlockInfoType}
     * @memberof BlockType
     */
    masterBlockInfo?: MasterBlockInfoType;
    /**
     * Rate Program contains rate information required for block creation, like room pool, rate amount, market code, etc. Only available if configured in OPERA Cloud.
     * @type {Array<RateProgramType>}
     * @memberof BlockType
     */
    ratePrograms?: Array<RateProgramType>;
    /**
     *
     * @type {BlockReservationDetailsType}
     * @memberof BlockType
     */
    reservationDetails?: BlockReservationDetailsType;
    /**
     * A list of reservation policies.
     * @type {Array<ReservationPoliciesType>}
     * @memberof BlockType
     */
    reservationPolicies?: Array<ReservationPoliciesType>;
    /**
     *
     * @type {BlockRestrictionsType}
     * @memberof BlockType
     */
    restrictions?: BlockRestrictionsType;
    /**
     *
     * @type {BlockInstructionTypeRoomAllocations}
     * @memberof BlockType
     */
    roomAllocations?: BlockInstructionTypeRoomAllocations;
    /**
     *
     * @type {SellMessageConfigsType}
     * @memberof BlockType
     */
    sellMessages?: SellMessageConfigsType;
    /**
     * Statistics summary information including Rooms Sold, Room Revenue, Food and Beverage Revenue, Average Room Rate,etc.
     * @type {Array<BlockStatisticsSummaryType>}
     * @memberof BlockType
     */
    statistics?: Array<BlockStatisticsSummaryType>;
    /**
     *
     * @type {BlockTracesType}
     * @memberof BlockType
     */
    traces?: BlockTracesType;
    /**
     *
     * @type {UserDefinedFieldsType}
     * @memberof BlockType
     */
    userDefinedFields?: UserDefinedFieldsType;
    /**
     *
     * @type {BlockWashSchedulesType}
     * @memberof BlockType
     */
    washSchedules?: BlockWashSchedulesType;
}
/**
 * Check if a given object implements the BlockType interface.
 */
export declare function instanceOfBlockType(value: object): boolean;
export declare function BlockTypeFromJSON(json: any): BlockType;
export declare function BlockTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockType;
export declare function BlockTypeToJSON(value?: BlockType | null): any;
