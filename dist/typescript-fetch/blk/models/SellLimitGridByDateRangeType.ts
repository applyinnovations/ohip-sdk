/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Indicates the sell limits for a date range. This will be rooms.
 * @export
 * @interface SellLimitGridByDateRangeType
 */
export interface SellLimitGridByDateRangeType {
    /**
     * The starting value of the date range.
     * @type {Date}
     * @memberof SellLimitGridByDateRangeType
     */
    start?: Date;
    /**
     * The ending value of the date range.
     * @type {Date}
     * @memberof SellLimitGridByDateRangeType
     */
    end?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof SellLimitGridByDateRangeType
     */
    sunday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SellLimitGridByDateRangeType
     */
    monday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SellLimitGridByDateRangeType
     */
    tuesday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SellLimitGridByDateRangeType
     */
    wednesday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SellLimitGridByDateRangeType
     */
    thursday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SellLimitGridByDateRangeType
     */
    friday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SellLimitGridByDateRangeType
     */
    saturday?: boolean;
    /**
     * Indicates the sell limit for the date range.
     * @type {number}
     * @memberof SellLimitGridByDateRangeType
     */
    sellLimit?: number;
}

/**
 * Check if a given object implements the SellLimitGridByDateRangeType interface.
 */
export function instanceOfSellLimitGridByDateRangeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SellLimitGridByDateRangeTypeFromJSON(json: any): SellLimitGridByDateRangeType {
    return SellLimitGridByDateRangeTypeFromJSONTyped(json, false);
}

export function SellLimitGridByDateRangeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SellLimitGridByDateRangeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'start': !exists(json, 'start') ? undefined : (new Date(json['start'])),
        'end': !exists(json, 'end') ? undefined : (new Date(json['end'])),
        'sunday': !exists(json, 'sunday') ? undefined : json['sunday'],
        'monday': !exists(json, 'monday') ? undefined : json['monday'],
        'tuesday': !exists(json, 'tuesday') ? undefined : json['tuesday'],
        'wednesday': !exists(json, 'wednesday') ? undefined : json['wednesday'],
        'thursday': !exists(json, 'thursday') ? undefined : json['thursday'],
        'friday': !exists(json, 'friday') ? undefined : json['friday'],
        'saturday': !exists(json, 'saturday') ? undefined : json['saturday'],
        'sellLimit': !exists(json, 'sellLimit') ? undefined : json['sellLimit'],
    };
}

export function SellLimitGridByDateRangeTypeToJSON(value?: SellLimitGridByDateRangeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'start': value.start === undefined ? undefined : (value.start.toISOString().substr(0,10)),
        'end': value.end === undefined ? undefined : (value.end.toISOString().substr(0,10)),
        'sunday': value.sunday,
        'monday': value.monday,
        'tuesday': value.tuesday,
        'wednesday': value.wednesday,
        'thursday': value.thursday,
        'friday': value.friday,
        'saturday': value.saturday,
        'sellLimit': value.sellLimit,
    };
}

