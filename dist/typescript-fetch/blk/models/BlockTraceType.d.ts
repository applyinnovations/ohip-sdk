/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { ReservationId } from './ReservationId';
import type { TraceResolveType } from './TraceResolveType';
import type { TraceTimeInfoType } from './TraceTimeInfoType';
/**
 * Extended Trace object to hold information for a block.
 * @export
 * @interface BlockTraceType
 */
export interface BlockTraceType {
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof BlockTraceType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof BlockTraceType
     */
    creatorId?: string;
    /**
     * Indicates the Department code.
     * @type {string}
     * @memberof BlockTraceType
     */
    departmentId?: string;
    /**
     * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
     * @type {string}
     * @memberof BlockTraceType
     */
    id?: string;
    /**
     * Used to identify the source of the identifier (e.g., IATA, ABTA).
     * @type {string}
     * @memberof BlockTraceType
     */
    idContext?: string;
    /**
     * The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
     * @type {string}
     * @memberof BlockTraceType
     */
    instance?: string;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof BlockTraceType
     */
    lastModifierId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof BlockTraceType
     */
    lastModifyDateTime?: string;
    /**
     *
     * @type {ReservationId}
     * @memberof BlockTraceType
     */
    reservationId?: ReservationId;
    /**
     *
     * @type {TraceResolveType}
     * @memberof BlockTraceType
     */
    resolveInfo?: TraceResolveType;
    /**
     *
     * @type {TraceTimeInfoType}
     * @memberof BlockTraceType
     */
    timeInfo?: TraceTimeInfoType;
    /**
     * The information this trace contains.
     * @type {string}
     * @memberof BlockTraceType
     */
    traceText?: string;
    /**
     * A reference to the type of object defined by the UniqueID element.
     * @type {string}
     * @memberof BlockTraceType
     */
    type?: string;
}
/**
 * Check if a given object implements the BlockTraceType interface.
 */
export declare function instanceOfBlockTraceType(value: object): boolean;
export declare function BlockTraceTypeFromJSON(json: any): BlockTraceType;
export declare function BlockTraceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockTraceType;
export declare function BlockTraceTypeToJSON(value?: BlockTraceType | null): any;
