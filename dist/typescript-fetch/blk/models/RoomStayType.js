"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoomStayTypeToJSON = exports.RoomStayTypeFromJSONTyped = exports.RoomStayTypeFromJSON = exports.instanceOfRoomStayType = void 0;
const runtime_1 = require("../runtime");
const CurrentRoomInfoType_1 = require("./CurrentRoomInfoType");
const GuestCountsType_1 = require("./GuestCountsType");
const OwnerResTypeType_1 = require("./OwnerResTypeType");
const PointsType_1 = require("./PointsType");
const PrimaryShareTypeType_1 = require("./PrimaryShareTypeType");
const PromotionType_1 = require("./PromotionType");
const ResExpectedTimesType_1 = require("./ResExpectedTimesType");
const ResGuaranteeType_1 = require("./ResGuaranteeType");
const ResMobileNotificationsType_1 = require("./ResMobileNotificationsType");
const RoomRateType_1 = require("./RoomRateType");
const TimeSpanType_1 = require("./TimeSpanType");
const TotalType_1 = require("./TotalType");
const UniqueIDType_1 = require("./UniqueIDType");
const UpsellInfoType_1 = require("./UpsellInfoType");
/**
 * Check if a given object implements the RoomStayType interface.
 */
function instanceOfRoomStayType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfRoomStayType = instanceOfRoomStayType;
function RoomStayTypeFromJSON(json) {
    return RoomStayTypeFromJSONTyped(json, false);
}
exports.RoomStayTypeFromJSON = RoomStayTypeFromJSON;
function RoomStayTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'arrivalDate': !(0, runtime_1.exists)(json, 'arrivalDate') ? undefined : (new Date(json['arrivalDate'])),
        'availableUpsellOfferCount': !(0, runtime_1.exists)(json, 'availableUpsellOfferCount') ? undefined : json['availableUpsellOfferCount'],
        'bookingMedium': !(0, runtime_1.exists)(json, 'bookingMedium') ? undefined : json['bookingMedium'],
        'bookingMediumDescription': !(0, runtime_1.exists)(json, 'bookingMediumDescription') ? undefined : json['bookingMediumDescription'],
        'currentRoomInfo': !(0, runtime_1.exists)(json, 'currentRoomInfo') ? undefined : (0, CurrentRoomInfoType_1.CurrentRoomInfoTypeFromJSON)(json['currentRoomInfo']),
        'departureDate': !(0, runtime_1.exists)(json, 'departureDate') ? undefined : (new Date(json['departureDate'])),
        'expectedTimes': !(0, runtime_1.exists)(json, 'expectedTimes') ? undefined : (0, ResExpectedTimesType_1.ResExpectedTimesTypeFromJSON)(json['expectedTimes']),
        'guarantee': !(0, runtime_1.exists)(json, 'guarantee') ? undefined : (0, ResGuaranteeType_1.ResGuaranteeTypeFromJSON)(json['guarantee']),
        'guestCounts': !(0, runtime_1.exists)(json, 'guestCounts') ? undefined : (0, GuestCountsType_1.GuestCountsTypeFromJSON)(json['guestCounts']),
        'mobileNotifications': !(0, runtime_1.exists)(json, 'mobileNotifications') ? undefined : (0, ResMobileNotificationsType_1.ResMobileNotificationsTypeFromJSON)(json['mobileNotifications']),
        'multiValueAttrs': !(0, runtime_1.exists)(json, 'multiValueAttrs') ? undefined : json['multiValueAttrs'],
        'originalTimeSpan': !(0, runtime_1.exists)(json, 'originalTimeSpan') ? undefined : (0, TimeSpanType_1.TimeSpanTypeFromJSON)(json['originalTimeSpan']),
        'ownerReservationType': !(0, runtime_1.exists)(json, 'ownerReservationType') ? undefined : (0, OwnerResTypeType_1.OwnerResTypeTypeFromJSON)(json['ownerReservationType']),
        'primaryShareType': !(0, runtime_1.exists)(json, 'primaryShareType') ? undefined : (0, PrimaryShareTypeType_1.PrimaryShareTypeTypeFromJSON)(json['primaryShareType']),
        'printRate': !(0, runtime_1.exists)(json, 'printRate') ? undefined : json['printRate'],
        'promotion': !(0, runtime_1.exists)(json, 'promotion') ? undefined : (0, PromotionType_1.PromotionTypeFromJSON)(json['promotion']),
        'registrationNumber': !(0, runtime_1.exists)(json, 'registrationNumber') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['registrationNumber']),
        'remoteCheckInAllowed': !(0, runtime_1.exists)(json, 'remoteCheckInAllowed') ? undefined : json['remoteCheckInAllowed'],
        'roomNumberLocked': !(0, runtime_1.exists)(json, 'roomNumberLocked') ? undefined : json['roomNumberLocked'],
        'roomRates': !(0, runtime_1.exists)(json, 'roomRates') ? undefined : (json['roomRates'].map(RoomRateType_1.RoomRateTypeFromJSON)),
        'suiteWith': !(0, runtime_1.exists)(json, 'suiteWith') ? undefined : json['suiteWith'],
        'total': !(0, runtime_1.exists)(json, 'total') ? undefined : (0, TotalType_1.TotalTypeFromJSON)(json['total']),
        'totalPoints': !(0, runtime_1.exists)(json, 'totalPoints') ? undefined : (0, PointsType_1.PointsTypeFromJSON)(json['totalPoints']),
        'upsellInfo': !(0, runtime_1.exists)(json, 'upsellInfo') ? undefined : (0, UpsellInfoType_1.UpsellInfoTypeFromJSON)(json['upsellInfo']),
    };
}
exports.RoomStayTypeFromJSONTyped = RoomStayTypeFromJSONTyped;
function RoomStayTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'arrivalDate': value.arrivalDate === undefined ? undefined : (value.arrivalDate.toISOString().substring(0, 10)),
        'availableUpsellOfferCount': value.availableUpsellOfferCount,
        'bookingMedium': value.bookingMedium,
        'bookingMediumDescription': value.bookingMediumDescription,
        'currentRoomInfo': (0, CurrentRoomInfoType_1.CurrentRoomInfoTypeToJSON)(value.currentRoomInfo),
        'departureDate': value.departureDate === undefined ? undefined : (value.departureDate.toISOString().substring(0, 10)),
        'expectedTimes': (0, ResExpectedTimesType_1.ResExpectedTimesTypeToJSON)(value.expectedTimes),
        'guarantee': (0, ResGuaranteeType_1.ResGuaranteeTypeToJSON)(value.guarantee),
        'guestCounts': (0, GuestCountsType_1.GuestCountsTypeToJSON)(value.guestCounts),
        'mobileNotifications': (0, ResMobileNotificationsType_1.ResMobileNotificationsTypeToJSON)(value.mobileNotifications),
        'multiValueAttrs': value.multiValueAttrs,
        'originalTimeSpan': (0, TimeSpanType_1.TimeSpanTypeToJSON)(value.originalTimeSpan),
        'ownerReservationType': (0, OwnerResTypeType_1.OwnerResTypeTypeToJSON)(value.ownerReservationType),
        'primaryShareType': (0, PrimaryShareTypeType_1.PrimaryShareTypeTypeToJSON)(value.primaryShareType),
        'printRate': value.printRate,
        'promotion': (0, PromotionType_1.PromotionTypeToJSON)(value.promotion),
        'registrationNumber': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.registrationNumber),
        'remoteCheckInAllowed': value.remoteCheckInAllowed,
        'roomNumberLocked': value.roomNumberLocked,
        'roomRates': value.roomRates === undefined ? undefined : (value.roomRates.map(RoomRateType_1.RoomRateTypeToJSON)),
        'suiteWith': value.suiteWith,
        'total': (0, TotalType_1.TotalTypeToJSON)(value.total),
        'totalPoints': (0, PointsType_1.PointsTypeToJSON)(value.totalPoints),
        'upsellInfo': (0, UpsellInfoType_1.UpsellInfoTypeToJSON)(value.upsellInfo),
    };
}
exports.RoomStayTypeToJSON = RoomStayTypeToJSON;
