/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { BlockId } from './BlockId';
import type { CancellationDetailsType } from './CancellationDetailsType';
import type { MasterBlockInfoType } from './MasterBlockInfoType';
/**
 * This holds the information required to change the booking status of the business block.
 * @export
 * @interface ChangeBlockStatusType
 */
export interface ChangeBlockStatusType {
    /**
     * Indicates to apply block status code to catering status if existing values are same.
     * @type {boolean}
     * @memberof ChangeBlockStatusType
     */
    applyChangesToCateringSatus?: boolean;
    /**
     *
     * @type {BlockId}
     * @memberof ChangeBlockStatusType
     */
    blockId?: BlockId;
    /**
     * Indicates whether to cancel all PM reservations when canceling a block, if any.
     * @type {boolean}
     * @memberof ChangeBlockStatusType
     */
    cancelAllPMReservations?: boolean;
    /**
     *
     * @type {CancellationDetailsType}
     * @memberof ChangeBlockStatusType
     */
    cancellationDetails?: CancellationDetailsType;
    /**
     * Current booking status of the business block.
     * @type {string}
     * @memberof ChangeBlockStatusType
     */
    currentBlockStatus?: string;
    /**
     * Opera Hotel code for the change block status operation.
     * @type {string}
     * @memberof ChangeBlockStatusType
     */
    hotelId?: string;
    /**
     *
     * @type {MasterBlockInfoType}
     * @memberof ChangeBlockStatusType
     */
    masterSubBlockInfo?: MasterBlockInfoType;
    /**
     * New booking status of the business block.
     * @type {string}
     * @memberof ChangeBlockStatusType
     */
    newBlockStatus?: string;
    /**
     * Indicates whether to overbook when transitioning from a non-deduct to deduct inventory status.
     * @type {boolean}
     * @memberof ChangeBlockStatusType
     */
    overbookAll?: boolean;
    /**
     * Indicates whether to ignore any warning during applying the changes to the events associated with the current block.
     * @type {boolean}
     * @memberof ChangeBlockStatusType
     */
    overrideEventsProcessingWarnings?: boolean;
    /**
     *
     * @type {CancellationDetailsType}
     * @memberof ChangeBlockStatusType
     */
    pMReservationsCancellationDetails?: CancellationDetailsType;
    /**
     * Reservation type of the business block.
     * @type {string}
     * @memberof ChangeBlockStatusType
     */
    reservationType?: string;
}
/**
 * Check if a given object implements the ChangeBlockStatusType interface.
 */
export declare function instanceOfChangeBlockStatusType(value: object): boolean;
export declare function ChangeBlockStatusTypeFromJSON(json: any): ChangeBlockStatusType;
export declare function ChangeBlockStatusTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChangeBlockStatusType;
export declare function ChangeBlockStatusTypeToJSON(value?: ChangeBlockStatusType | null): any;
