/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CurrencyAmountType } from './CurrencyAmountType';
/**
 * Currency code configuration.
 * @export
 * @interface CurrencyExchangeRateType
 */
export interface CurrencyExchangeRateType {
    /**
     * The code specifying a monetary unit. Use ISO 4217, three alpha code.
     * @type {string}
     * @memberof CurrencyExchangeRateType
     */
    currencyCode?: string;
    /**
     * The symbol for the currency, e.g, for currencyCode USD the symbol is $.
     * @type {string}
     * @memberof CurrencyExchangeRateType
     */
    currencySymbol?: string;
    /**
     * Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard "minor unit". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces="2" to represent $85).
     * @type {number}
     * @memberof CurrencyExchangeRateType
     */
    decimalPlaces?: number;
    /**
     * Description of the currency code.
     * @type {string}
     * @memberof CurrencyExchangeRateType
     */
    description?: string;
    /**
     *
     * @type {CurrencyAmountType}
     * @memberof CurrencyExchangeRateType
     */
    exchangeRate?: CurrencyAmountType;
}
/**
 * Check if a given object implements the CurrencyExchangeRateType interface.
 */
export declare function instanceOfCurrencyExchangeRateType(value: object): boolean;
export declare function CurrencyExchangeRateTypeFromJSON(json: any): CurrencyExchangeRateType;
export declare function CurrencyExchangeRateTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CurrencyExchangeRateType;
export declare function CurrencyExchangeRateTypeToJSON(value?: CurrencyExchangeRateType | null): any;
