/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { EmailInfoType } from './EmailInfoType';
import {
    EmailInfoTypeFromJSON,
    EmailInfoTypeFromJSONTyped,
    EmailInfoTypeToJSON,
} from './EmailInfoType';
import type { PersonNameType } from './PersonNameType';
import {
    PersonNameTypeFromJSON,
    PersonNameTypeFromJSONTyped,
    PersonNameTypeToJSON,
} from './PersonNameType';
import type { ProfileId } from './ProfileId';
import {
    ProfileIdFromJSON,
    ProfileIdFromJSONTyped,
    ProfileIdToJSON,
} from './ProfileId';
import type { TelephoneInfoType } from './TelephoneInfoType';
import {
    TelephoneInfoTypeFromJSON,
    TelephoneInfoTypeFromJSONTyped,
    TelephoneInfoTypeToJSON,
} from './TelephoneInfoType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Generic type for information about an owner.
 * @export
 * @interface OwnerType
 */
export interface OwnerType {
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof OwnerType
     */
    hotel?: CodeDescriptionType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof OwnerType
     */
    userId?: UniqueIDType;
    /**
     * Unique application user name of the owner.
     * @type {string}
     * @memberof OwnerType
     */
    userName?: string;
    /**
     * Unique Code to identify the owner.
     * @type {string}
     * @memberof OwnerType
     */
    ownerCode?: string;
    /**
     * 
     * @type {ProfileId}
     * @memberof OwnerType
     */
    profileId?: ProfileId;
    /**
     * 
     * @type {PersonNameType}
     * @memberof OwnerType
     */
    name?: PersonNameType;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof OwnerType
     */
    department?: CodeDescriptionType;
    /**
     * 
     * @type {EmailInfoType}
     * @memberof OwnerType
     */
    email?: EmailInfoType;
    /**
     * 
     * @type {TelephoneInfoType}
     * @memberof OwnerType
     */
    phone?: TelephoneInfoType;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof OwnerType
     */
    relationship?: CodeDescriptionType;
    /**
     * When true, this is a primary owner.
     * @type {boolean}
     * @memberof OwnerType
     */
    primary?: boolean;
}

/**
 * Check if a given object implements the OwnerType interface.
 */
export function instanceOfOwnerType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OwnerTypeFromJSON(json: any): OwnerType {
    return OwnerTypeFromJSONTyped(json, false);
}

export function OwnerTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): OwnerType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotel': !exists(json, 'hotel') ? undefined : CodeDescriptionTypeFromJSON(json['hotel']),
        'userId': !exists(json, 'userId') ? undefined : UniqueIDTypeFromJSON(json['userId']),
        'userName': !exists(json, 'userName') ? undefined : json['userName'],
        'ownerCode': !exists(json, 'ownerCode') ? undefined : json['ownerCode'],
        'profileId': !exists(json, 'profileId') ? undefined : ProfileIdFromJSON(json['profileId']),
        'name': !exists(json, 'name') ? undefined : PersonNameTypeFromJSON(json['name']),
        'department': !exists(json, 'department') ? undefined : CodeDescriptionTypeFromJSON(json['department']),
        'email': !exists(json, 'email') ? undefined : EmailInfoTypeFromJSON(json['email']),
        'phone': !exists(json, 'phone') ? undefined : TelephoneInfoTypeFromJSON(json['phone']),
        'relationship': !exists(json, 'relationship') ? undefined : CodeDescriptionTypeFromJSON(json['relationship']),
        'primary': !exists(json, 'primary') ? undefined : json['primary'],
    };
}

export function OwnerTypeToJSON(value?: OwnerType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotel': CodeDescriptionTypeToJSON(value.hotel),
        'userId': UniqueIDTypeToJSON(value.userId),
        'userName': value.userName,
        'ownerCode': value.ownerCode,
        'profileId': ProfileIdToJSON(value.profileId),
        'name': PersonNameTypeToJSON(value.name),
        'department': CodeDescriptionTypeToJSON(value.department),
        'email': EmailInfoTypeToJSON(value.email),
        'phone': TelephoneInfoTypeToJSON(value.phone),
        'relationship': CodeDescriptionTypeToJSON(value.relationship),
        'primary': value.primary,
    };
}

