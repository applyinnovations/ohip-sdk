/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { GridRoomAllocations } from './GridRoomAllocations';
import type { UniqueIDType } from './UniqueIDType';
/**
 *
 * @export
 * @interface BlockGridType
 */
export interface BlockGridType {
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof BlockGridType
     */
    blockIdList?: Array<UniqueIDType>;
    /**
     *
     * @type {GridRoomAllocations}
     * @memberof BlockGridType
     */
    roomAllocations?: GridRoomAllocations;
    /**
     * Evaluated total page count based on the requested max fetch count.
     * @type {number}
     * @memberof BlockGridType
     */
    totalPages?: number;
    /**
     * Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
     * @type {number}
     * @memberof BlockGridType
     */
    offset?: number;
    /**
     * Indicates maximum number of records a Web Service should return.
     * @type {number}
     * @memberof BlockGridType
     */
    limit?: number;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof BlockGridType
     */
    hasMore?: boolean;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof BlockGridType
     */
    totalResults?: number;
}
/**
 * Check if a given object implements the BlockGridType interface.
 */
export declare function instanceOfBlockGridType(value: object): boolean;
export declare function BlockGridTypeFromJSON(json: any): BlockGridType;
export declare function BlockGridTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockGridType;
export declare function BlockGridTypeToJSON(value?: BlockGridType | null): any;
