/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BlockAllocationRangeTypeOverbookListInner
 */
export interface BlockAllocationRangeTypeOverbookListInner {
    /**
     * A true value indicates that the date/room type should be overbooked for inventory. A false value indicates that this combination should be excluded from range.
     * @type {boolean}
     * @memberof BlockAllocationRangeTypeOverbookListInner
     */
    overbook?: boolean;
    /**
     * Room type that has to be overbooked or excluded.
     * @type {string}
     * @memberof BlockAllocationRangeTypeOverbookListInner
     */
    roomType?: string;
    /**
     * Date which has to be overbooked or excluded.
     * @type {Date}
     * @memberof BlockAllocationRangeTypeOverbookListInner
     */
    stayDate?: Date;
}

/**
 * Check if a given object implements the BlockAllocationRangeTypeOverbookListInner interface.
 */
export function instanceOfBlockAllocationRangeTypeOverbookListInner(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockAllocationRangeTypeOverbookListInnerFromJSON(json: any): BlockAllocationRangeTypeOverbookListInner {
    return BlockAllocationRangeTypeOverbookListInnerFromJSONTyped(json, false);
}

export function BlockAllocationRangeTypeOverbookListInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockAllocationRangeTypeOverbookListInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'overbook': !exists(json, 'overbook') ? undefined : json['overbook'],
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
        'stayDate': !exists(json, 'stayDate') ? undefined : (new Date(json['stayDate'])),
    };
}

export function BlockAllocationRangeTypeOverbookListInnerToJSON(value?: BlockAllocationRangeTypeOverbookListInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'overbook': value.overbook,
        'roomType': value.roomType,
        'stayDate': value.stayDate === undefined ? undefined : (value.stayDate.toISOString().substr(0,10)),
    };
}

