"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChangedBlockStatusToJSON = exports.ChangedBlockStatusFromJSONTyped = exports.ChangedBlockStatusFromJSON = exports.instanceOfChangedBlockStatus = void 0;
const runtime_1 = require("../runtime");
const BlockType_1 = require("./BlockType");
const BookingStatusDetailType_1 = require("./BookingStatusDetailType");
const BookingStatusHistoryType_1 = require("./BookingStatusHistoryType");
const CancellationDetailsType_1 = require("./CancellationDetailsType");
const CateringEventsProcessedInfoType_1 = require("./CateringEventsProcessedInfoType");
const InstanceLink_1 = require("./InstanceLink");
const UniqueIDType_1 = require("./UniqueIDType");
const WarningType_1 = require("./WarningType");
/**
 * Check if a given object implements the ChangedBlockStatus interface.
 */
function instanceOfChangedBlockStatus(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfChangedBlockStatus = instanceOfChangedBlockStatus;
function ChangedBlockStatusFromJSON(json) {
    return ChangedBlockStatusFromJSONTyped(json, false);
}
exports.ChangedBlockStatusFromJSON = ChangedBlockStatusFromJSON;
function ChangedBlockStatusFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'anyActivePMReservations': !(0, runtime_1.exists)(json, 'anyActivePMReservations') ? undefined : json['anyActivePMReservations'],
        'block': !(0, runtime_1.exists)(json, 'block') ? undefined : (0, BlockType_1.BlockTypeFromJSON)(json['block']),
        'blockNextStatusList': !(0, runtime_1.exists)(json, 'blockNextStatusList') ? undefined : (json['blockNextStatusList'].map(BookingStatusDetailType_1.BookingStatusDetailTypeFromJSON)),
        'blockStatusChangeHistory': !(0, runtime_1.exists)(json, 'blockStatusChangeHistory') ? undefined : (json['blockStatusChangeHistory'].map(BookingStatusHistoryType_1.BookingStatusHistoryTypeFromJSON)),
        'cancellationDetails': !(0, runtime_1.exists)(json, 'cancellationDetails') ? undefined : (0, CancellationDetailsType_1.CancellationDetailsTypeFromJSON)(json['cancellationDetails']),
        'cateringEventsProcessedInfo': !(0, runtime_1.exists)(json, 'cateringEventsProcessedInfo') ? undefined : (json['cateringEventsProcessedInfo'].map(CateringEventsProcessedInfoType_1.CateringEventsProcessedInfoTypeFromJSON)),
        'links': !(0, runtime_1.exists)(json, 'links') ? undefined : (json['links'].map(InstanceLink_1.InstanceLinkFromJSON)),
        'processId': !(0, runtime_1.exists)(json, 'processId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['processId']),
        'warnings': !(0, runtime_1.exists)(json, 'warnings') ? undefined : (json['warnings'].map(WarningType_1.WarningTypeFromJSON)),
    };
}
exports.ChangedBlockStatusFromJSONTyped = ChangedBlockStatusFromJSONTyped;
function ChangedBlockStatusToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'anyActivePMReservations': value.anyActivePMReservations,
        'block': (0, BlockType_1.BlockTypeToJSON)(value.block),
        'blockNextStatusList': value.blockNextStatusList === undefined ? undefined : (value.blockNextStatusList.map(BookingStatusDetailType_1.BookingStatusDetailTypeToJSON)),
        'blockStatusChangeHistory': value.blockStatusChangeHistory === undefined ? undefined : (value.blockStatusChangeHistory.map(BookingStatusHistoryType_1.BookingStatusHistoryTypeToJSON)),
        'cancellationDetails': (0, CancellationDetailsType_1.CancellationDetailsTypeToJSON)(value.cancellationDetails),
        'cateringEventsProcessedInfo': value.cateringEventsProcessedInfo === undefined ? undefined : (value.cateringEventsProcessedInfo.map(CateringEventsProcessedInfoType_1.CateringEventsProcessedInfoTypeToJSON)),
        'links': value.links === undefined ? undefined : (value.links.map(InstanceLink_1.InstanceLinkToJSON)),
        'processId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.processId),
        'warnings': value.warnings === undefined ? undefined : (value.warnings.map(WarningType_1.WarningTypeToJSON)),
    };
}
exports.ChangedBlockStatusToJSON = ChangedBlockStatusToJSON;
