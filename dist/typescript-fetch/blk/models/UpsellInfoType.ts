/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UpsellInfoTypeOriginalInfo } from './UpsellInfoTypeOriginalInfo';
import {
    UpsellInfoTypeOriginalInfoFromJSON,
    UpsellInfoTypeOriginalInfoFromJSONTyped,
    UpsellInfoTypeOriginalInfoToJSON,
} from './UpsellInfoTypeOriginalInfo';
import type { UpsellInfoTypeUpsellInfo } from './UpsellInfoTypeUpsellInfo';
import {
    UpsellInfoTypeUpsellInfoFromJSON,
    UpsellInfoTypeUpsellInfoFromJSONTyped,
    UpsellInfoTypeUpsellInfoToJSON,
} from './UpsellInfoTypeUpsellInfo';

/**
 * Information regarding upsell for a reservation.
 * @export
 * @interface UpsellInfoType
 */
export interface UpsellInfoType {
    /**
     * 
     * @type {UpsellInfoTypeOriginalInfo}
     * @memberof UpsellInfoType
     */
    originalInfo?: UpsellInfoTypeOriginalInfo;
    /**
     * 
     * @type {UpsellInfoTypeUpsellInfo}
     * @memberof UpsellInfoType
     */
    upsellInfo?: UpsellInfoTypeUpsellInfo;
}

/**
 * Check if a given object implements the UpsellInfoType interface.
 */
export function instanceOfUpsellInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UpsellInfoTypeFromJSON(json: any): UpsellInfoType {
    return UpsellInfoTypeFromJSONTyped(json, false);
}

export function UpsellInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpsellInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'originalInfo': !exists(json, 'originalInfo') ? undefined : UpsellInfoTypeOriginalInfoFromJSON(json['originalInfo']),
        'upsellInfo': !exists(json, 'upsellInfo') ? undefined : UpsellInfoTypeUpsellInfoFromJSON(json['upsellInfo']),
    };
}

export function UpsellInfoTypeToJSON(value?: UpsellInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'originalInfo': UpsellInfoTypeOriginalInfoToJSON(value.originalInfo),
        'upsellInfo': UpsellInfoTypeUpsellInfoToJSON(value.upsellInfo),
    };
}

