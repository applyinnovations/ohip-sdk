/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockId } from './BlockId';
import {
    BlockIdFromJSON,
    BlockIdFromJSONTyped,
    BlockIdToJSON,
} from './BlockId';
import type { ReturnRoomType } from './ReturnRoomType';
import {
    ReturnRoomTypeFromJSON,
    ReturnRoomTypeFromJSONTyped,
    ReturnRoomTypeToJSON,
} from './ReturnRoomType';

/**
 * This holds the number of rooms for each date that will be returned to the room destination type provided.
 * @export
 * @interface InventoryToReturnType
 */
export interface InventoryToReturnType {
    /**
     * 
     * @type {BlockId}
     * @memberof InventoryToReturnType
     */
    blockId?: BlockId;
    /**
     * The date on which rooms need to be returned for the block either to another room type in the block or to House if the borrowed room was from House.
     * @type {Date}
     * @memberof InventoryToReturnType
     */
    returnDate?: Date;
    /**
     * Specifies the collection of number of rooms to be returned to room types or House.
     * @type {Array<ReturnRoomType>}
     * @memberof InventoryToReturnType
     */
    returnRooms?: Array<ReturnRoomType>;
}

/**
 * Check if a given object implements the InventoryToReturnType interface.
 */
export function instanceOfInventoryToReturnType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InventoryToReturnTypeFromJSON(json: any): InventoryToReturnType {
    return InventoryToReturnTypeFromJSONTyped(json, false);
}

export function InventoryToReturnTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): InventoryToReturnType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockId': !exists(json, 'blockId') ? undefined : BlockIdFromJSON(json['blockId']),
        'returnDate': !exists(json, 'returnDate') ? undefined : (new Date(json['returnDate'])),
        'returnRooms': !exists(json, 'returnRooms') ? undefined : ((json['returnRooms'] as Array<any>).map(ReturnRoomTypeFromJSON)),
    };
}

export function InventoryToReturnTypeToJSON(value?: InventoryToReturnType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockId': BlockIdToJSON(value.blockId),
        'returnDate': value.returnDate === undefined ? undefined : (value.returnDate.toISOString().substr(0,10)),
        'returnRooms': value.returnRooms === undefined ? undefined : ((value.returnRooms as Array<any>).map(ReturnRoomTypeToJSON)),
    };
}

