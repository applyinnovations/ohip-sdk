/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RoomAllocationMasterInfoType } from './RoomAllocationMasterInfoType';
import {
    RoomAllocationMasterInfoTypeFromJSON,
    RoomAllocationMasterInfoTypeFromJSONTyped,
    RoomAllocationMasterInfoTypeToJSON,
} from './RoomAllocationMasterInfoType';
import type { RoomAllocationTypeType } from './RoomAllocationTypeType';
import {
    RoomAllocationTypeTypeFromJSON,
    RoomAllocationTypeTypeFromJSONTyped,
    RoomAllocationTypeTypeToJSON,
} from './RoomAllocationTypeType';

/**
 * Generic Room Type Allocations for the Block.
 * @export
 * @interface BlockTypeGenericRoomAllocations
 */
export interface BlockTypeGenericRoomAllocations {
    /**
     * 
     * @type {Array<RoomAllocationTypeType>}
     * @memberof BlockTypeGenericRoomAllocations
     */
    roomAllocationType?: Array<RoomAllocationTypeType>;
    /**
     * 
     * @type {RoomAllocationMasterInfoType}
     * @memberof BlockTypeGenericRoomAllocations
     */
    masterInfo?: RoomAllocationMasterInfoType;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof BlockTypeGenericRoomAllocations
     */
    hasMore?: boolean;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof BlockTypeGenericRoomAllocations
     */
    totalResults?: number;
    /**
     * Total number of rows returned
     * @type {number}
     * @memberof BlockTypeGenericRoomAllocations
     */
    count?: number;
    /**
     * 
     * @type {Date}
     * @memberof BlockTypeGenericRoomAllocations
     */
    startDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof BlockTypeGenericRoomAllocations
     */
    numberOfDays?: number;
}

/**
 * Check if a given object implements the BlockTypeGenericRoomAllocations interface.
 */
export function instanceOfBlockTypeGenericRoomAllocations(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockTypeGenericRoomAllocationsFromJSON(json: any): BlockTypeGenericRoomAllocations {
    return BlockTypeGenericRoomAllocationsFromJSONTyped(json, false);
}

export function BlockTypeGenericRoomAllocationsFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockTypeGenericRoomAllocations {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'roomAllocationType': !exists(json, 'roomAllocationType') ? undefined : ((json['roomAllocationType'] as Array<any>).map(RoomAllocationTypeTypeFromJSON)),
        'masterInfo': !exists(json, 'masterInfo') ? undefined : RoomAllocationMasterInfoTypeFromJSON(json['masterInfo']),
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
        'count': !exists(json, 'count') ? undefined : json['count'],
        'startDate': !exists(json, 'startDate') ? undefined : (new Date(json['startDate'])),
        'numberOfDays': !exists(json, 'numberOfDays') ? undefined : json['numberOfDays'],
    };
}

export function BlockTypeGenericRoomAllocationsToJSON(value?: BlockTypeGenericRoomAllocations | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'roomAllocationType': value.roomAllocationType === undefined ? undefined : ((value.roomAllocationType as Array<any>).map(RoomAllocationTypeTypeToJSON)),
        'masterInfo': RoomAllocationMasterInfoTypeToJSON(value.masterInfo),
        'hasMore': value.hasMore,
        'totalResults': value.totalResults,
        'count': value.count,
        'startDate': value.startDate === undefined ? undefined : (value.startDate.toISOString().substr(0,10)),
        'numberOfDays': value.numberOfDays,
    };
}

