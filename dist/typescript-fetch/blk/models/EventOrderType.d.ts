/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Event order distribution information.
 * @export
 * @interface EventOrderType
 */
export interface EventOrderType {
    /**
     * Indicates if the Banquet Event Orders have been distributed.
     * @type {boolean}
     * @memberof EventOrderType
     */
    distributed?: boolean;
    /**
     * This indicates which exchange rate date will be used for blocks when printing Banquet Event Orders. When the Distributed attribute is true this contains the date stamp of when the Distributed attribute was updated. When Distributed attribute is false, this is left blank. This date can also be taken into consideration as the 'Exchange Rate Date' when, for instance, converting catering revenue to base currency.
     * @type {string}
     * @memberof EventOrderType
     */
    distributedDate?: string;
    /**
     * This indicates which exchange rate date will be used for blocks when printing Banquet Event Orders. When the Distributed attribute is true this contains the date/time stamp of when the Distributed attribute was updated. When Distributed attribute is false, this is left blank. This date can also be taken into consideration as the 'Exchange Rate Date' when, for instance, converting catering revenue to base currency.
     * @type {string}
     * @memberof EventOrderType
     */
    distributedDateTime?: string;
}
/**
 * Check if a given object implements the EventOrderType interface.
 */
export declare function instanceOfEventOrderType(value: object): boolean;
export declare function EventOrderTypeFromJSON(json: any): EventOrderType;
export declare function EventOrderTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventOrderType;
export declare function EventOrderTypeToJSON(value?: EventOrderType | null): any;
