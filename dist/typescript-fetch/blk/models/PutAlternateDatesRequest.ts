/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockAlternateDateType } from './BlockAlternateDateType';
import {
    BlockAlternateDateTypeFromJSON,
    BlockAlternateDateTypeFromJSONTyped,
    BlockAlternateDateTypeToJSON,
} from './BlockAlternateDateType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * 
 * @export
 * @interface PutAlternateDatesRequest
 */
export interface PutAlternateDatesRequest {
    /**
     * Contains a list of Block Alternate Dates.
     * @type {Array<BlockAlternateDateType>}
     * @memberof PutAlternateDatesRequest
     */
    blockAlternateDates?: Array<BlockAlternateDateType>;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof PutAlternateDatesRequest
     */
    blockIdList?: Array<UniqueIDType>;
    /**
     * Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
     * @type {string}
     * @memberof PutAlternateDatesRequest
     */
    hotelId?: string;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof PutAlternateDatesRequest
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof PutAlternateDatesRequest
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the PutAlternateDatesRequest interface.
 */
export function instanceOfPutAlternateDatesRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PutAlternateDatesRequestFromJSON(json: any): PutAlternateDatesRequest {
    return PutAlternateDatesRequestFromJSONTyped(json, false);
}

export function PutAlternateDatesRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PutAlternateDatesRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockAlternateDates': !exists(json, 'blockAlternateDates') ? undefined : ((json['blockAlternateDates'] as Array<any>).map(BlockAlternateDateTypeFromJSON)),
        'blockIdList': !exists(json, 'blockIdList') ? undefined : ((json['blockIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function PutAlternateDatesRequestToJSON(value?: PutAlternateDatesRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockAlternateDates': value.blockAlternateDates === undefined ? undefined : ((value.blockAlternateDates as Array<any>).map(BlockAlternateDateTypeToJSON)),
        'blockIdList': value.blockIdList === undefined ? undefined : ((value.blockIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'hotelId': value.hotelId,
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

