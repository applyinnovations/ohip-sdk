/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockStatisticsAllotedRoomsType } from './BlockStatisticsAllotedRoomsType';
import {
    BlockStatisticsAllotedRoomsTypeFromJSON,
    BlockStatisticsAllotedRoomsTypeFromJSONTyped,
    BlockStatisticsAllotedRoomsTypeToJSON,
} from './BlockStatisticsAllotedRoomsType';
import type { BlockStatisticsDetailsType } from './BlockStatisticsDetailsType';
import {
    BlockStatisticsDetailsTypeFromJSON,
    BlockStatisticsDetailsTypeFromJSONTyped,
    BlockStatisticsDetailsTypeToJSON,
} from './BlockStatisticsDetailsType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * The response object that returns Block Statistics information.
 * @export
 * @interface BlockStatistics
 */
export interface BlockStatistics {
    /**
     * 
     * @type {BlockStatisticsDetailsType}
     * @memberof BlockStatistics
     */
    statisticsDetails?: BlockStatisticsDetailsType;
    /**
     * 
     * @type {BlockStatisticsAllotedRoomsType}
     * @memberof BlockStatistics
     */
    masterInfo?: BlockStatisticsAllotedRoomsType;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof BlockStatistics
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof BlockStatistics
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the BlockStatistics interface.
 */
export function instanceOfBlockStatistics(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockStatisticsFromJSON(json: any): BlockStatistics {
    return BlockStatisticsFromJSONTyped(json, false);
}

export function BlockStatisticsFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockStatistics {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'statisticsDetails': !exists(json, 'statisticsDetails') ? undefined : BlockStatisticsDetailsTypeFromJSON(json['statisticsDetails']),
        'masterInfo': !exists(json, 'masterInfo') ? undefined : BlockStatisticsAllotedRoomsTypeFromJSON(json['masterInfo']),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function BlockStatisticsToJSON(value?: BlockStatistics | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'statisticsDetails': BlockStatisticsDetailsTypeToJSON(value.statisticsDetails),
        'masterInfo': BlockStatisticsAllotedRoomsTypeToJSON(value.masterInfo),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

