/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ForeignExchangeType } from './ForeignExchangeType';
import {
    ForeignExchangeTypeFromJSON,
    ForeignExchangeTypeFromJSONTyped,
    ForeignExchangeTypeToJSON,
} from './ForeignExchangeType';
import type { GuestCountsType } from './GuestCountsType';
import {
    GuestCountsTypeFromJSON,
    GuestCountsTypeFromJSONTyped,
    GuestCountsTypeToJSON,
} from './GuestCountsType';
import type { MealPlanCodeType } from './MealPlanCodeType';
import {
    MealPlanCodeTypeFromJSON,
    MealPlanCodeTypeFromJSONTyped,
    MealPlanCodeTypeToJSON,
} from './MealPlanCodeType';
import type { PackageElementType } from './PackageElementType';
import {
    PackageElementTypeFromJSON,
    PackageElementTypeFromJSONTyped,
    PackageElementTypeToJSON,
} from './PackageElementType';
import type { PointsType } from './PointsType';
import {
    PointsTypeFromJSON,
    PointsTypeFromJSONTyped,
    PointsTypeToJSON,
} from './PointsType';
import type { RatesType } from './RatesType';
import {
    RatesTypeFromJSON,
    RatesTypeFromJSONTyped,
    RatesTypeToJSON,
} from './RatesType';
import type { ResAwardsType } from './ResAwardsType';
import {
    ResAwardsTypeFromJSON,
    ResAwardsTypeFromJSONTyped,
    ResAwardsTypeToJSON,
} from './ResAwardsType';
import type { ReservationBlockType } from './ReservationBlockType';
import {
    ReservationBlockTypeFromJSON,
    ReservationBlockTypeFromJSONTyped,
    ReservationBlockTypeToJSON,
} from './ReservationBlockType';
import type { ReservationProfileType } from './ReservationProfileType';
import {
    ReservationProfileTypeFromJSON,
    ReservationProfileTypeFromJSONTyped,
    ReservationProfileTypeToJSON,
} from './ReservationProfileType';
import type { RoomRateAvailReasonType } from './RoomRateAvailReasonType';
import {
    RoomRateAvailReasonTypeFromJSON,
    RoomRateAvailReasonTypeFromJSONTyped,
    RoomRateAvailReasonTypeToJSON,
} from './RoomRateAvailReasonType';
import type { TotalType } from './TotalType';
import {
    TotalTypeFromJSON,
    TotalTypeFromJSONTyped,
    TotalTypeToJSON,
} from './TotalType';

/**
 * 
 * @export
 * @interface RoomRateType
 */
export interface RoomRateType {
    /**
     * 
     * @type {TotalType}
     * @memberof RoomRateType
     */
    total?: TotalType;
    /**
     * 
     * @type {PointsType}
     * @memberof RoomRateType
     */
    totalPoints?: PointsType;
    /**
     * 
     * @type {RatesType}
     * @memberof RoomRateType
     */
    rates?: RatesType;
    /**
     * 
     * @type {Array<PackageElementType>}
     * @memberof RoomRateType
     */
    packages?: Array<PackageElementType>;
    /**
     * Profile associated with the room Stay.
     * @type {Array<ReservationProfileType>}
     * @memberof RoomRateType
     */
    stayProfiles?: Array<ReservationProfileType>;
    /**
     * 
     * @type {GuestCountsType}
     * @memberof RoomRateType
     */
    guestCounts?: GuestCountsType;
    /**
     * 
     * @type {GuestCountsType}
     * @memberof RoomRateType
     */
    taxFreeGuestCounts?: GuestCountsType;
    /**
     * 
     * @type {ResAwardsType}
     * @memberof RoomRateType
     */
    awards?: ResAwardsType;
    /**
     * 
     * @type {ForeignExchangeType}
     * @memberof RoomRateType
     */
    foreignExchange?: ForeignExchangeType;
    /**
     * 
     * @type {ReservationBlockType}
     * @memberof RoomRateType
     */
    reservationBlock?: ReservationBlockType;
    /**
     * Information about the Room Rate Combination.
     * @type {string}
     * @memberof RoomRateType
     */
    roomRateInfo?: string;
    /**
     * Meal plan codes associated with the rate codes.
     * @type {Array<MealPlanCodeType>}
     * @memberof RoomRateType
     */
    mealPlans?: Array<MealPlanCodeType>;
    /**
     * 
     * @type {string}
     * @memberof RoomRateType
     */
    roomType?: string;
    /**
     * 
     * @type {string}
     * @memberof RoomRateType
     */
    ratePlanCode?: string;
    /**
     * 
     * @type {string}
     * @memberof RoomRateType
     */
    promotionCode?: string;
    /**
     * The starting value of the date range.
     * @type {Date}
     * @memberof RoomRateType
     */
    start?: Date;
    /**
     * The ending value of the date range.
     * @type {Date}
     * @memberof RoomRateType
     */
    end?: Date;
    /**
     * 
     * @type {RoomRateAvailReasonType}
     * @memberof RoomRateType
     */
    availability?: RoomRateAvailReasonType;
    /**
     * 
     * @type {boolean}
     * @memberof RoomRateType
     */
    suppressRate?: boolean;
    /**
     * The code that relates to the market being sold to (e.g., the corporate market, packages).
     * @type {string}
     * @memberof RoomRateType
     */
    marketCode?: string;
    /**
     * Description of the market code.
     * @type {string}
     * @memberof RoomRateType
     */
    marketCodeDescription?: string;
    /**
     * To specify where the business came from e.g. radio, newspaper ad, etc.
     * @type {string}
     * @memberof RoomRateType
     */
    sourceCode?: string;
    /**
     * Description of the source of business.
     * @type {string}
     * @memberof RoomRateType
     */
    sourceCodeDescription?: string;
    /**
     * The number of rooms.
     * @type {number}
     * @memberof RoomRateType
     */
    numberOfUnits?: number;
    /**
     * A string value representing the unique identification of a room.
     * @type {string}
     * @memberof RoomRateType
     */
    roomId?: string;
    /**
     * True indicates as pseudo room type. This is usually used for a posting master reservation.
     * @type {boolean}
     * @memberof RoomRateType
     */
    pseudoRoom?: boolean;
    /**
     * Room Type used for the Rate calculation.
     * @type {string}
     * @memberof RoomRateType
     */
    roomTypeCharged?: string;
    /**
     * Commission Code applicable for commission calculation for Travel Agent/Company.
     * @type {string}
     * @memberof RoomRateType
     */
    commissionCode?: string;
    /**
     * Indicates Commission is applicable for commission calculation for Travel Agent/Company.
     * @type {boolean}
     * @memberof RoomRateType
     */
    commissionable?: boolean;
    /**
     * Indicates this reservation is for House use.
     * @type {boolean}
     * @memberof RoomRateType
     */
    houseUseOnly?: boolean;
    /**
     * Indicates this reservation rate is complimentary.
     * @type {boolean}
     * @memberof RoomRateType
     */
    complimentary?: boolean;
    /**
     * Indicates whether the room type inventory was taken from the allotment or House availability.
     * @type {string}
     * @memberof RoomRateType
     */
    inventoryLender?: string;
    /**
     * Fixed Rate Indicator.
     * @type {boolean}
     * @memberof RoomRateType
     */
    fixedRate?: boolean;
    /**
     * Best Available rates ranking.
     * @type {number}
     * @memberof RoomRateType
     */
    barRanking?: number;
    /**
     * For RatePlanSet equals BESTAVAILABLERATE, in case Rate Groups are enabled the element provides the rate group for the rate plan code.
     * @type {string}
     * @memberof RoomRateType
     */
    rateGroup?: string;
    /**
     * Indicates if the Rate Code is discountable i.e discounts are allowed on the rate code.
     * @type {boolean}
     * @memberof RoomRateType
     */
    discountAllowed?: boolean;
    /**
     * Indicates if the Rate Code has BOGO(Bye one Get one) indicator.
     * @type {boolean}
     * @memberof RoomRateType
     */
    bogoDiscount?: boolean;
    /**
     * Rate plan type like Corporate,Regular,Military,Weekend etc.
     * @type {string}
     * @memberof RoomRateType
     */
    rateLevel?: string;
    /**
     * Indicates commission percentage used by the rate plan.
     * @type {number}
     * @memberof RoomRateType
     */
    commissionPercentage?: number;
    /**
     * Indicates commission amount used by the rate plan.
     * @type {number}
     * @memberof RoomRateType
     */
    commissionAmount?: number;
    /**
     * If true, indicates that credentials is required to sell the rate code.
     * @type {boolean}
     * @memberof RoomRateType
     */
    credentialsRequired?: boolean;
    /**
     * If true, indicates if tax is included in the rate code.
     * @type {boolean}
     * @memberof RoomRateType
     */
    taxIncluded?: boolean;
    /**
     * Rate code description.
     * @type {string}
     * @memberof RoomRateType
     */
    rateDescription?: string;
}

/**
 * Check if a given object implements the RoomRateType interface.
 */
export function instanceOfRoomRateType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomRateTypeFromJSON(json: any): RoomRateType {
    return RoomRateTypeFromJSONTyped(json, false);
}

export function RoomRateTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomRateType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'total': !exists(json, 'total') ? undefined : TotalTypeFromJSON(json['total']),
        'totalPoints': !exists(json, 'totalPoints') ? undefined : PointsTypeFromJSON(json['totalPoints']),
        'rates': !exists(json, 'rates') ? undefined : RatesTypeFromJSON(json['rates']),
        'packages': !exists(json, 'packages') ? undefined : ((json['packages'] as Array<any>).map(PackageElementTypeFromJSON)),
        'stayProfiles': !exists(json, 'stayProfiles') ? undefined : ((json['stayProfiles'] as Array<any>).map(ReservationProfileTypeFromJSON)),
        'guestCounts': !exists(json, 'guestCounts') ? undefined : GuestCountsTypeFromJSON(json['guestCounts']),
        'taxFreeGuestCounts': !exists(json, 'taxFreeGuestCounts') ? undefined : GuestCountsTypeFromJSON(json['taxFreeGuestCounts']),
        'awards': !exists(json, 'awards') ? undefined : ResAwardsTypeFromJSON(json['awards']),
        'foreignExchange': !exists(json, 'foreignExchange') ? undefined : ForeignExchangeTypeFromJSON(json['foreignExchange']),
        'reservationBlock': !exists(json, 'reservationBlock') ? undefined : ReservationBlockTypeFromJSON(json['reservationBlock']),
        'roomRateInfo': !exists(json, 'roomRateInfo') ? undefined : json['roomRateInfo'],
        'mealPlans': !exists(json, 'mealPlans') ? undefined : ((json['mealPlans'] as Array<any>).map(MealPlanCodeTypeFromJSON)),
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
        'ratePlanCode': !exists(json, 'ratePlanCode') ? undefined : json['ratePlanCode'],
        'promotionCode': !exists(json, 'promotionCode') ? undefined : json['promotionCode'],
        'start': !exists(json, 'start') ? undefined : (new Date(json['start'])),
        'end': !exists(json, 'end') ? undefined : (new Date(json['end'])),
        'availability': !exists(json, 'availability') ? undefined : RoomRateAvailReasonTypeFromJSON(json['availability']),
        'suppressRate': !exists(json, 'suppressRate') ? undefined : json['suppressRate'],
        'marketCode': !exists(json, 'marketCode') ? undefined : json['marketCode'],
        'marketCodeDescription': !exists(json, 'marketCodeDescription') ? undefined : json['marketCodeDescription'],
        'sourceCode': !exists(json, 'sourceCode') ? undefined : json['sourceCode'],
        'sourceCodeDescription': !exists(json, 'sourceCodeDescription') ? undefined : json['sourceCodeDescription'],
        'numberOfUnits': !exists(json, 'numberOfUnits') ? undefined : json['numberOfUnits'],
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'pseudoRoom': !exists(json, 'pseudoRoom') ? undefined : json['pseudoRoom'],
        'roomTypeCharged': !exists(json, 'roomTypeCharged') ? undefined : json['roomTypeCharged'],
        'commissionCode': !exists(json, 'commissionCode') ? undefined : json['commissionCode'],
        'commissionable': !exists(json, 'commissionable') ? undefined : json['commissionable'],
        'houseUseOnly': !exists(json, 'houseUseOnly') ? undefined : json['houseUseOnly'],
        'complimentary': !exists(json, 'complimentary') ? undefined : json['complimentary'],
        'inventoryLender': !exists(json, 'inventoryLender') ? undefined : json['inventoryLender'],
        'fixedRate': !exists(json, 'fixedRate') ? undefined : json['fixedRate'],
        'barRanking': !exists(json, 'barRanking') ? undefined : json['barRanking'],
        'rateGroup': !exists(json, 'rateGroup') ? undefined : json['rateGroup'],
        'discountAllowed': !exists(json, 'discountAllowed') ? undefined : json['discountAllowed'],
        'bogoDiscount': !exists(json, 'bogoDiscount') ? undefined : json['bogoDiscount'],
        'rateLevel': !exists(json, 'rateLevel') ? undefined : json['rateLevel'],
        'commissionPercentage': !exists(json, 'commissionPercentage') ? undefined : json['commissionPercentage'],
        'commissionAmount': !exists(json, 'commissionAmount') ? undefined : json['commissionAmount'],
        'credentialsRequired': !exists(json, 'credentialsRequired') ? undefined : json['credentialsRequired'],
        'taxIncluded': !exists(json, 'taxIncluded') ? undefined : json['taxIncluded'],
        'rateDescription': !exists(json, 'rateDescription') ? undefined : json['rateDescription'],
    };
}

export function RoomRateTypeToJSON(value?: RoomRateType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'total': TotalTypeToJSON(value.total),
        'totalPoints': PointsTypeToJSON(value.totalPoints),
        'rates': RatesTypeToJSON(value.rates),
        'packages': value.packages === undefined ? undefined : ((value.packages as Array<any>).map(PackageElementTypeToJSON)),
        'stayProfiles': value.stayProfiles === undefined ? undefined : ((value.stayProfiles as Array<any>).map(ReservationProfileTypeToJSON)),
        'guestCounts': GuestCountsTypeToJSON(value.guestCounts),
        'taxFreeGuestCounts': GuestCountsTypeToJSON(value.taxFreeGuestCounts),
        'awards': ResAwardsTypeToJSON(value.awards),
        'foreignExchange': ForeignExchangeTypeToJSON(value.foreignExchange),
        'reservationBlock': ReservationBlockTypeToJSON(value.reservationBlock),
        'roomRateInfo': value.roomRateInfo,
        'mealPlans': value.mealPlans === undefined ? undefined : ((value.mealPlans as Array<any>).map(MealPlanCodeTypeToJSON)),
        'roomType': value.roomType,
        'ratePlanCode': value.ratePlanCode,
        'promotionCode': value.promotionCode,
        'start': value.start === undefined ? undefined : (value.start.toISOString().substr(0,10)),
        'end': value.end === undefined ? undefined : (value.end.toISOString().substr(0,10)),
        'availability': RoomRateAvailReasonTypeToJSON(value.availability),
        'suppressRate': value.suppressRate,
        'marketCode': value.marketCode,
        'marketCodeDescription': value.marketCodeDescription,
        'sourceCode': value.sourceCode,
        'sourceCodeDescription': value.sourceCodeDescription,
        'numberOfUnits': value.numberOfUnits,
        'roomId': value.roomId,
        'pseudoRoom': value.pseudoRoom,
        'roomTypeCharged': value.roomTypeCharged,
        'commissionCode': value.commissionCode,
        'commissionable': value.commissionable,
        'houseUseOnly': value.houseUseOnly,
        'complimentary': value.complimentary,
        'inventoryLender': value.inventoryLender,
        'fixedRate': value.fixedRate,
        'barRanking': value.barRanking,
        'rateGroup': value.rateGroup,
        'discountAllowed': value.discountAllowed,
        'bogoDiscount': value.bogoDiscount,
        'rateLevel': value.rateLevel,
        'commissionPercentage': value.commissionPercentage,
        'commissionAmount': value.commissionAmount,
        'credentialsRequired': value.credentialsRequired,
        'taxIncluded': value.taxIncluded,
        'rateDescription': value.rateDescription,
    };
}

