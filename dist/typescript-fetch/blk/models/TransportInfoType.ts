/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TransportInfoType
 */
export interface TransportInfoType {
    /**
     * 
     * @type {string}
     * @memberof TransportInfoType
     */
    comments?: string;
    /**
     * 
     * @type {string}
     * @memberof TransportInfoType
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof TransportInfoType
     */
    transportCode?: string;
    /**
     * 
     * @type {string}
     * @memberof TransportInfoType
     */
    carrierCode?: string;
    /**
     * 
     * @type {string}
     * @memberof TransportInfoType
     */
    stationCode?: string;
    /**
     * 
     * @type {string}
     * @memberof TransportInfoType
     */
    dateTime?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TransportInfoType
     */
    transportationReqd?: boolean;
}

/**
 * Check if a given object implements the TransportInfoType interface.
 */
export function instanceOfTransportInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TransportInfoTypeFromJSON(json: any): TransportInfoType {
    return TransportInfoTypeFromJSONTyped(json, false);
}

export function TransportInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransportInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'comments': !exists(json, 'comments') ? undefined : json['comments'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'transportCode': !exists(json, 'transportCode') ? undefined : json['transportCode'],
        'carrierCode': !exists(json, 'carrierCode') ? undefined : json['carrierCode'],
        'stationCode': !exists(json, 'stationCode') ? undefined : json['stationCode'],
        'dateTime': !exists(json, 'dateTime') ? undefined : json['dateTime'],
        'transportationReqd': !exists(json, 'transportationReqd') ? undefined : json['transportationReqd'],
    };
}

export function TransportInfoTypeToJSON(value?: TransportInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'comments': value.comments,
        'type': value.type,
        'transportCode': value.transportCode,
        'carrierCode': value.carrierCode,
        'stationCode': value.stationCode,
        'dateTime': value.dateTime,
        'transportationReqd': value.transportationReqd,
    };
}

