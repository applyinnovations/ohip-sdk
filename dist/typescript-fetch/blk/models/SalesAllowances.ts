/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { SalesAllowanceType } from './SalesAllowanceType';
import {
    SalesAllowanceTypeFromJSON,
    SalesAllowanceTypeFromJSONTyped,
    SalesAllowanceTypeToJSON,
} from './SalesAllowanceType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Response returned by fetch corrected sales allowances.
 * @export
 * @interface SalesAllowances
 */
export interface SalesAllowances {
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof SalesAllowances
     */
    links?: Array<InstanceLink>;
    /**
     * Collection of Sales Allowances.
     * @type {Array<SalesAllowanceType>}
     * @memberof SalesAllowances
     */
    salesAllowances?: Array<SalesAllowanceType>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof SalesAllowances
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the SalesAllowances interface.
 */
export function instanceOfSalesAllowances(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SalesAllowancesFromJSON(json: any): SalesAllowances {
    return SalesAllowancesFromJSONTyped(json, false);
}

export function SalesAllowancesFromJSONTyped(json: any, ignoreDiscriminator: boolean): SalesAllowances {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'salesAllowances': !exists(json, 'salesAllowances') ? undefined : ((json['salesAllowances'] as Array<any>).map(SalesAllowanceTypeFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function SalesAllowancesToJSON(value?: SalesAllowances | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'salesAllowances': value.salesAllowances === undefined ? undefined : ((value.salesAllowances as Array<any>).map(SalesAllowanceTypeToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

