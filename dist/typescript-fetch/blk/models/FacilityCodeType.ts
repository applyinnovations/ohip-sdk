/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Facility Housekeeping Code, its description and quantity.
 * @export
 * @interface FacilityCodeType
 */
export interface FacilityCodeType {
    /**
     * Facility Code.
     * @type {string}
     * @memberof FacilityCodeType
     */
    description?: string;
    /**
     * Signifies the quantity.
     * @type {number}
     * @memberof FacilityCodeType
     */
    quantity?: number;
    /**
     * Facility code value.
     * @type {string}
     * @memberof FacilityCodeType
     */
    code?: string;
}

/**
 * Check if a given object implements the FacilityCodeType interface.
 */
export function instanceOfFacilityCodeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FacilityCodeTypeFromJSON(json: any): FacilityCodeType {
    return FacilityCodeTypeFromJSONTyped(json, false);
}

export function FacilityCodeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FacilityCodeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'quantity': !exists(json, 'quantity') ? undefined : json['quantity'],
        'code': !exists(json, 'code') ? undefined : json['code'],
    };
}

export function FacilityCodeTypeToJSON(value?: FacilityCodeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'quantity': value.quantity,
        'code': value.code,
    };
}

