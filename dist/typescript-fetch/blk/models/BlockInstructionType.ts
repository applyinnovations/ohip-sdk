/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AttachmentType } from './AttachmentType';
import {
    AttachmentTypeFromJSON,
    AttachmentTypeFromJSONTyped,
    AttachmentTypeToJSON,
} from './AttachmentType';
import type { BlockAccessExclusionsType } from './BlockAccessExclusionsType';
import {
    BlockAccessExclusionsTypeFromJSON,
    BlockAccessExclusionsTypeFromJSONTyped,
    BlockAccessExclusionsTypeToJSON,
} from './BlockAccessExclusionsType';
import type { BlockAlternateDateType } from './BlockAlternateDateType';
import {
    BlockAlternateDateTypeFromJSON,
    BlockAlternateDateTypeFromJSONTyped,
    BlockAlternateDateTypeToJSON,
} from './BlockAlternateDateType';
import type { BlockDetailsType } from './BlockDetailsType';
import {
    BlockDetailsTypeFromJSON,
    BlockDetailsTypeFromJSONTyped,
    BlockDetailsTypeToJSON,
} from './BlockDetailsType';
import type { BlockInstructionTypeResponseInstructions } from './BlockInstructionTypeResponseInstructions';
import {
    BlockInstructionTypeResponseInstructionsFromJSON,
    BlockInstructionTypeResponseInstructionsFromJSONTyped,
    BlockInstructionTypeResponseInstructionsToJSON,
} from './BlockInstructionTypeResponseInstructions';
import type { BlockInventoryItemType } from './BlockInventoryItemType';
import {
    BlockInventoryItemTypeFromJSON,
    BlockInventoryItemTypeFromJSONTyped,
    BlockInventoryItemTypeToJSON,
} from './BlockInventoryItemType';
import type { BlockOwnersType } from './BlockOwnersType';
import {
    BlockOwnersTypeFromJSON,
    BlockOwnersTypeFromJSONTyped,
    BlockOwnersTypeToJSON,
} from './BlockOwnersType';
import type { BlockPackageType } from './BlockPackageType';
import {
    BlockPackageTypeFromJSON,
    BlockPackageTypeFromJSONTyped,
    BlockPackageTypeToJSON,
} from './BlockPackageType';
import type { BlockReservationDetailsType } from './BlockReservationDetailsType';
import {
    BlockReservationDetailsTypeFromJSON,
    BlockReservationDetailsTypeFromJSONTyped,
    BlockReservationDetailsTypeToJSON,
} from './BlockReservationDetailsType';
import type { BlockRestrictionsType } from './BlockRestrictionsType';
import {
    BlockRestrictionsTypeFromJSON,
    BlockRestrictionsTypeFromJSONTyped,
    BlockRestrictionsTypeToJSON,
} from './BlockRestrictionsType';
import type { BlockStatisticsSummaryType } from './BlockStatisticsSummaryType';
import {
    BlockStatisticsSummaryTypeFromJSON,
    BlockStatisticsSummaryTypeFromJSONTyped,
    BlockStatisticsSummaryTypeToJSON,
} from './BlockStatisticsSummaryType';
import type { BlockStatisticsType } from './BlockStatisticsType';
import {
    BlockStatisticsTypeFromJSON,
    BlockStatisticsTypeFromJSONTyped,
    BlockStatisticsTypeToJSON,
} from './BlockStatisticsType';
import type { BlockTraceType } from './BlockTraceType';
import {
    BlockTraceTypeFromJSON,
    BlockTraceTypeFromJSONTyped,
    BlockTraceTypeToJSON,
} from './BlockTraceType';
import type { BlockTypeBlockProfiles } from './BlockTypeBlockProfiles';
import {
    BlockTypeBlockProfilesFromJSON,
    BlockTypeBlockProfilesFromJSONTyped,
    BlockTypeBlockProfilesToJSON,
} from './BlockTypeBlockProfiles';
import type { BlockTypeBlockSecurity } from './BlockTypeBlockSecurity';
import {
    BlockTypeBlockSecurityFromJSON,
    BlockTypeBlockSecurityFromJSONTyped,
    BlockTypeBlockSecurityToJSON,
} from './BlockTypeBlockSecurity';
import type { BlockTypeComments } from './BlockTypeComments';
import {
    BlockTypeCommentsFromJSON,
    BlockTypeCommentsFromJSONTyped,
    BlockTypeCommentsToJSON,
} from './BlockTypeComments';
import type { BlockTypeExternalAttributes } from './BlockTypeExternalAttributes';
import {
    BlockTypeExternalAttributesFromJSON,
    BlockTypeExternalAttributesFromJSONTyped,
    BlockTypeExternalAttributesToJSON,
} from './BlockTypeExternalAttributes';
import type { BlockTypeGenericRoomAllocations } from './BlockTypeGenericRoomAllocations';
import {
    BlockTypeGenericRoomAllocationsFromJSON,
    BlockTypeGenericRoomAllocationsFromJSONTyped,
    BlockTypeGenericRoomAllocationsToJSON,
} from './BlockTypeGenericRoomAllocations';
import type { BlockTypeRoomAllocations } from './BlockTypeRoomAllocations';
import {
    BlockTypeRoomAllocationsFromJSON,
    BlockTypeRoomAllocationsFromJSONTyped,
    BlockTypeRoomAllocationsToJSON,
} from './BlockTypeRoomAllocations';
import type { BlockWashScheduleType } from './BlockWashScheduleType';
import {
    BlockWashScheduleTypeFromJSON,
    BlockWashScheduleTypeFromJSONTyped,
    BlockWashScheduleTypeToJSON,
} from './BlockWashScheduleType';
import type { CateringType } from './CateringType';
import {
    CateringTypeFromJSON,
    CateringTypeFromJSONTyped,
    CateringTypeToJSON,
} from './CateringType';
import type { ExternalReferenceType } from './ExternalReferenceType';
import {
    ExternalReferenceTypeFromJSON,
    ExternalReferenceTypeFromJSONTyped,
    ExternalReferenceTypeToJSON,
} from './ExternalReferenceType';
import type { IndicatorType } from './IndicatorType';
import {
    IndicatorTypeFromJSON,
    IndicatorTypeFromJSONTyped,
    IndicatorTypeToJSON,
} from './IndicatorType';
import type { MasterBlockInfoType } from './MasterBlockInfoType';
import {
    MasterBlockInfoTypeFromJSON,
    MasterBlockInfoTypeFromJSONTyped,
    MasterBlockInfoTypeToJSON,
} from './MasterBlockInfoType';
import type { RateProgramType } from './RateProgramType';
import {
    RateProgramTypeFromJSON,
    RateProgramTypeFromJSONTyped,
    RateProgramTypeToJSON,
} from './RateProgramType';
import type { ReservationPoliciesType } from './ReservationPoliciesType';
import {
    ReservationPoliciesTypeFromJSON,
    ReservationPoliciesTypeFromJSONTyped,
    ReservationPoliciesTypeToJSON,
} from './ReservationPoliciesType';
import type { SellMessageConfigsType } from './SellMessageConfigsType';
import {
    SellMessageConfigsTypeFromJSON,
    SellMessageConfigsTypeFromJSONTyped,
    SellMessageConfigsTypeToJSON,
} from './SellMessageConfigsType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';
import type { UserDefinedFieldsType } from './UserDefinedFieldsType';
import {
    UserDefinedFieldsTypeFromJSON,
    UserDefinedFieldsTypeFromJSONTyped,
    UserDefinedFieldsTypeToJSON,
} from './UserDefinedFieldsType';

/**
 * Extended Block object to hold additional instructions along with the block. This should be used during create/update operations on a block.
 * @export
 * @interface BlockInstructionType
 */
export interface BlockInstructionType {
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof BlockInstructionType
     */
    blockIdList?: Array<UniqueIDType>;
    /**
     * This type contains unique information of external reference.
     * @type {Array<ExternalReferenceType>}
     * @memberof BlockInstructionType
     */
    externalReferences?: Array<ExternalReferenceType>;
    /**
     * 
     * @type {BlockDetailsType}
     * @memberof BlockInstructionType
     */
    blockDetails?: BlockDetailsType;
    /**
     * 
     * @type {BlockOwnersType}
     * @memberof BlockInstructionType
     */
    blockOwners?: BlockOwnersType;
    /**
     * 
     * @type {MasterBlockInfoType}
     * @memberof BlockInstructionType
     */
    masterBlockInfo?: MasterBlockInfoType;
    /**
     * A list of reservation policies.
     * @type {Array<ReservationPoliciesType>}
     * @memberof BlockInstructionType
     */
    reservationPolicies?: Array<ReservationPoliciesType>;
    /**
     * 
     * @type {BlockReservationDetailsType}
     * @memberof BlockInstructionType
     */
    reservationDetails?: BlockReservationDetailsType;
    /**
     * 
     * @type {CateringType}
     * @memberof BlockInstructionType
     */
    catering?: CateringType;
    /**
     * 
     * @type {BlockTypeBlockProfiles}
     * @memberof BlockInstructionType
     */
    blockProfiles?: BlockTypeBlockProfiles;
    /**
     * A Block Package represents a non-room product provided to guests. Block Pacakges may have associated inventory and charges.
     * @type {Array<BlockPackageType>}
     * @memberof BlockInstructionType
     */
    blockPackages?: Array<BlockPackageType>;
    /**
     * Inventory item attached to a block.
     * @type {Array<BlockInventoryItemType>}
     * @memberof BlockInstructionType
     */
    inventoryItems?: Array<BlockInventoryItemType>;
    /**
     * 
     * @type {BlockStatisticsType}
     * @memberof BlockInstructionType
     */
    blockStatistics?: BlockStatisticsType;
    /**
     * 
     * @type {BlockTypeComments}
     * @memberof BlockInstructionType
     */
    comments?: BlockTypeComments;
    /**
     * 
     * @type {BlockTypeRoomAllocations}
     * @memberof BlockInstructionType
     */
    roomAllocations?: BlockTypeRoomAllocations;
    /**
     * 
     * @type {UserDefinedFieldsType}
     * @memberof BlockInstructionType
     */
    userDefinedFields?: UserDefinedFieldsType;
    /**
     * Collection of lamp indicators.
     * @type {Array<IndicatorType>}
     * @memberof BlockInstructionType
     */
    blockIndicators?: Array<IndicatorType>;
    /**
     * List of Block traces.
     * @type {Array<BlockTraceType>}
     * @memberof BlockInstructionType
     */
    traces?: Array<BlockTraceType>;
    /**
     * Statistics summary information including Rooms Sold, Room Revenue, Food and Beverage Revenue, Average Room Rate,etc.
     * @type {Array<BlockStatisticsSummaryType>}
     * @memberof BlockInstructionType
     */
    statistics?: Array<BlockStatisticsSummaryType>;
    /**
     * 
     * @type {BlockTypeBlockSecurity}
     * @memberof BlockInstructionType
     */
    blockSecurity?: BlockTypeBlockSecurity;
    /**
     * Rate Program contains rate information required for block creation, like room pool, rate amount, market code, etc. Only available if configured in OPERA Cloud.
     * @type {Array<RateProgramType>}
     * @memberof BlockInstructionType
     */
    ratePrograms?: Array<RateProgramType>;
    /**
     * 
     * @type {BlockTypeExternalAttributes}
     * @memberof BlockInstructionType
     */
    externalAttributes?: BlockTypeExternalAttributes;
    /**
     * 
     * @type {BlockTypeGenericRoomAllocations}
     * @memberof BlockInstructionType
     */
    genericRoomAllocations?: BlockTypeGenericRoomAllocations;
    /**
     * Alternate Date information for the Block.
     * @type {Array<BlockAlternateDateType>}
     * @memberof BlockInstructionType
     */
    alternateDates?: Array<BlockAlternateDateType>;
    /**
     * 
     * @type {SellMessageConfigsType}
     * @memberof BlockInstructionType
     */
    sellMessages?: SellMessageConfigsType;
    /**
     * Attachment List.
     * @type {Array<AttachmentType>}
     * @memberof BlockInstructionType
     */
    attachments?: Array<AttachmentType>;
    /**
     * Wash Schedule attached to the block, which allows to release inventory based on selected wash schedule type.
     * @type {Array<BlockWashScheduleType>}
     * @memberof BlockInstructionType
     */
    washSchedules?: Array<BlockWashScheduleType>;
    /**
     * 
     * @type {BlockRestrictionsType}
     * @memberof BlockInstructionType
     */
    restrictions?: BlockRestrictionsType;
    /**
     * 
     * @type {BlockAccessExclusionsType}
     * @memberof BlockInstructionType
     */
    accessExclusions?: BlockAccessExclusionsType;
    /**
     * 
     * @type {string}
     * @memberof BlockInstructionType
     */
    hotelId?: string;
    /**
     * Mark this block as recently accessed.
     * @type {boolean}
     * @memberof BlockInstructionType
     */
    markAsRecentlyAccessed?: boolean;
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof BlockInstructionType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof BlockInstructionType
     */
    creatorId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof BlockInstructionType
     */
    lastModifyDateTime?: string;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof BlockInstructionType
     */
    lastModifierId?: string;
    /**
     * Date an item will be purged from a database (e.g., from a live database to an archive).
     * @type {Date}
     * @memberof BlockInstructionType
     */
    purgeDate?: Date;
    /**
     * 
     * @type {BlockInstructionTypeResponseInstructions}
     * @memberof BlockInstructionType
     */
    responseInstructions?: BlockInstructionTypeResponseInstructions;
}

/**
 * Check if a given object implements the BlockInstructionType interface.
 */
export function instanceOfBlockInstructionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockInstructionTypeFromJSON(json: any): BlockInstructionType {
    return BlockInstructionTypeFromJSONTyped(json, false);
}

export function BlockInstructionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockInstructionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockIdList': !exists(json, 'blockIdList') ? undefined : ((json['blockIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'externalReferences': !exists(json, 'externalReferences') ? undefined : ((json['externalReferences'] as Array<any>).map(ExternalReferenceTypeFromJSON)),
        'blockDetails': !exists(json, 'blockDetails') ? undefined : BlockDetailsTypeFromJSON(json['blockDetails']),
        'blockOwners': !exists(json, 'blockOwners') ? undefined : BlockOwnersTypeFromJSON(json['blockOwners']),
        'masterBlockInfo': !exists(json, 'masterBlockInfo') ? undefined : MasterBlockInfoTypeFromJSON(json['masterBlockInfo']),
        'reservationPolicies': !exists(json, 'reservationPolicies') ? undefined : ((json['reservationPolicies'] as Array<any>).map(ReservationPoliciesTypeFromJSON)),
        'reservationDetails': !exists(json, 'reservationDetails') ? undefined : BlockReservationDetailsTypeFromJSON(json['reservationDetails']),
        'catering': !exists(json, 'catering') ? undefined : CateringTypeFromJSON(json['catering']),
        'blockProfiles': !exists(json, 'blockProfiles') ? undefined : BlockTypeBlockProfilesFromJSON(json['blockProfiles']),
        'blockPackages': !exists(json, 'blockPackages') ? undefined : ((json['blockPackages'] as Array<any>).map(BlockPackageTypeFromJSON)),
        'inventoryItems': !exists(json, 'inventoryItems') ? undefined : ((json['inventoryItems'] as Array<any>).map(BlockInventoryItemTypeFromJSON)),
        'blockStatistics': !exists(json, 'blockStatistics') ? undefined : BlockStatisticsTypeFromJSON(json['blockStatistics']),
        'comments': !exists(json, 'comments') ? undefined : BlockTypeCommentsFromJSON(json['comments']),
        'roomAllocations': !exists(json, 'roomAllocations') ? undefined : BlockTypeRoomAllocationsFromJSON(json['roomAllocations']),
        'userDefinedFields': !exists(json, 'userDefinedFields') ? undefined : UserDefinedFieldsTypeFromJSON(json['userDefinedFields']),
        'blockIndicators': !exists(json, 'blockIndicators') ? undefined : ((json['blockIndicators'] as Array<any>).map(IndicatorTypeFromJSON)),
        'traces': !exists(json, 'traces') ? undefined : ((json['traces'] as Array<any>).map(BlockTraceTypeFromJSON)),
        'statistics': !exists(json, 'statistics') ? undefined : ((json['statistics'] as Array<any>).map(BlockStatisticsSummaryTypeFromJSON)),
        'blockSecurity': !exists(json, 'blockSecurity') ? undefined : BlockTypeBlockSecurityFromJSON(json['blockSecurity']),
        'ratePrograms': !exists(json, 'ratePrograms') ? undefined : ((json['ratePrograms'] as Array<any>).map(RateProgramTypeFromJSON)),
        'externalAttributes': !exists(json, 'externalAttributes') ? undefined : BlockTypeExternalAttributesFromJSON(json['externalAttributes']),
        'genericRoomAllocations': !exists(json, 'genericRoomAllocations') ? undefined : BlockTypeGenericRoomAllocationsFromJSON(json['genericRoomAllocations']),
        'alternateDates': !exists(json, 'alternateDates') ? undefined : ((json['alternateDates'] as Array<any>).map(BlockAlternateDateTypeFromJSON)),
        'sellMessages': !exists(json, 'sellMessages') ? undefined : SellMessageConfigsTypeFromJSON(json['sellMessages']),
        'attachments': !exists(json, 'attachments') ? undefined : ((json['attachments'] as Array<any>).map(AttachmentTypeFromJSON)),
        'washSchedules': !exists(json, 'washSchedules') ? undefined : ((json['washSchedules'] as Array<any>).map(BlockWashScheduleTypeFromJSON)),
        'restrictions': !exists(json, 'restrictions') ? undefined : BlockRestrictionsTypeFromJSON(json['restrictions']),
        'accessExclusions': !exists(json, 'accessExclusions') ? undefined : BlockAccessExclusionsTypeFromJSON(json['accessExclusions']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'markAsRecentlyAccessed': !exists(json, 'markAsRecentlyAccessed') ? undefined : json['markAsRecentlyAccessed'],
        'createDateTime': !exists(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'lastModifyDateTime': !exists(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'purgeDate': !exists(json, 'purgeDate') ? undefined : (new Date(json['purgeDate'])),
        'responseInstructions': !exists(json, 'responseInstructions') ? undefined : BlockInstructionTypeResponseInstructionsFromJSON(json['responseInstructions']),
    };
}

export function BlockInstructionTypeToJSON(value?: BlockInstructionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockIdList': value.blockIdList === undefined ? undefined : ((value.blockIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'externalReferences': value.externalReferences === undefined ? undefined : ((value.externalReferences as Array<any>).map(ExternalReferenceTypeToJSON)),
        'blockDetails': BlockDetailsTypeToJSON(value.blockDetails),
        'blockOwners': BlockOwnersTypeToJSON(value.blockOwners),
        'masterBlockInfo': MasterBlockInfoTypeToJSON(value.masterBlockInfo),
        'reservationPolicies': value.reservationPolicies === undefined ? undefined : ((value.reservationPolicies as Array<any>).map(ReservationPoliciesTypeToJSON)),
        'reservationDetails': BlockReservationDetailsTypeToJSON(value.reservationDetails),
        'catering': CateringTypeToJSON(value.catering),
        'blockProfiles': BlockTypeBlockProfilesToJSON(value.blockProfiles),
        'blockPackages': value.blockPackages === undefined ? undefined : ((value.blockPackages as Array<any>).map(BlockPackageTypeToJSON)),
        'inventoryItems': value.inventoryItems === undefined ? undefined : ((value.inventoryItems as Array<any>).map(BlockInventoryItemTypeToJSON)),
        'blockStatistics': BlockStatisticsTypeToJSON(value.blockStatistics),
        'comments': BlockTypeCommentsToJSON(value.comments),
        'roomAllocations': BlockTypeRoomAllocationsToJSON(value.roomAllocations),
        'userDefinedFields': UserDefinedFieldsTypeToJSON(value.userDefinedFields),
        'blockIndicators': value.blockIndicators === undefined ? undefined : ((value.blockIndicators as Array<any>).map(IndicatorTypeToJSON)),
        'traces': value.traces === undefined ? undefined : ((value.traces as Array<any>).map(BlockTraceTypeToJSON)),
        'statistics': value.statistics === undefined ? undefined : ((value.statistics as Array<any>).map(BlockStatisticsSummaryTypeToJSON)),
        'blockSecurity': BlockTypeBlockSecurityToJSON(value.blockSecurity),
        'ratePrograms': value.ratePrograms === undefined ? undefined : ((value.ratePrograms as Array<any>).map(RateProgramTypeToJSON)),
        'externalAttributes': BlockTypeExternalAttributesToJSON(value.externalAttributes),
        'genericRoomAllocations': BlockTypeGenericRoomAllocationsToJSON(value.genericRoomAllocations),
        'alternateDates': value.alternateDates === undefined ? undefined : ((value.alternateDates as Array<any>).map(BlockAlternateDateTypeToJSON)),
        'sellMessages': SellMessageConfigsTypeToJSON(value.sellMessages),
        'attachments': value.attachments === undefined ? undefined : ((value.attachments as Array<any>).map(AttachmentTypeToJSON)),
        'washSchedules': value.washSchedules === undefined ? undefined : ((value.washSchedules as Array<any>).map(BlockWashScheduleTypeToJSON)),
        'restrictions': BlockRestrictionsTypeToJSON(value.restrictions),
        'accessExclusions': BlockAccessExclusionsTypeToJSON(value.accessExclusions),
        'hotelId': value.hotelId,
        'markAsRecentlyAccessed': value.markAsRecentlyAccessed,
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'lastModifierId': value.lastModifierId,
        'purgeDate': value.purgeDate === undefined ? undefined : (value.purgeDate.toISOString().substr(0,10)),
        'responseInstructions': BlockInstructionTypeResponseInstructionsToJSON(value.responseInstructions),
    };
}

