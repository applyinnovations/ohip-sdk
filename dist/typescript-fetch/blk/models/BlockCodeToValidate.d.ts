/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { BlockIdList } from './BlockIdList';
import type { Links } from './Links';
import type { WarningsType } from './WarningsType';
/**
 * Request object for validating blocks in a train. Block is not created. The standard optional Opera Context element is also included.
 * @export
 * @interface BlockCodeToValidate
 */
export interface BlockCodeToValidate {
    /**
     *
     * @type {BlockIdList}
     * @memberof BlockCodeToValidate
     */
    blockIdList?: BlockIdList;
    /**
     * End date for this block.
     * @type {Date}
     * @memberof BlockCodeToValidate
     */
    endDate?: Date;
    /**
     * Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
     * @type {string}
     * @memberof BlockCodeToValidate
     */
    hotelId?: string;
    /**
     *
     * @type {Links}
     * @memberof BlockCodeToValidate
     */
    links?: Links;
    /**
     * Start date for this block.
     * @type {Date}
     * @memberof BlockCodeToValidate
     */
    startDate?: Date;
    /**
     *
     * @type {WarningsType}
     * @memberof BlockCodeToValidate
     */
    warnings?: WarningsType;
}
/**
 * Check if a given object implements the BlockCodeToValidate interface.
 */
export declare function instanceOfBlockCodeToValidate(value: object): boolean;
export declare function BlockCodeToValidateFromJSON(json: any): BlockCodeToValidate;
export declare function BlockCodeToValidateFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockCodeToValidate;
export declare function BlockCodeToValidateToJSON(value?: BlockCodeToValidate | null): any;
