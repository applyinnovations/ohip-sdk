/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AllRestrictions, Allocation, Block, BlockAccessExclusion, BlockAccessExclusionInfo, BlockActivityLog, BlockAllocationRange, BlockAllocationWash, BlockAlternateDates, BlockAttachments, BlockAvailability, BlockBasicInfos, BlockChanged, BlockChangesByDateTimeSummary, BlockCodeToValidate, BlockCopy, BlockDailyStatistics, BlockGridType, BlockOwners, BlockOwnersToAssign, BlockOwnersToChange, BlockPMReservations, BlockPostingMaster, BlockRangeInfo, BlockReservations, BlockReservationsToChange, BlockRestriction, BlockRestrictions, BlockRevenueChanges, BlockRoomTypes, BlockRoomsStatus, BlockStatistics, BlockStatus, BlockStatusChanges, BlockStatusToChange, BlockSummaries, BlockToBeChanged, BlockToCancel, BlockToShift, BlockValidate, BlockWashInfo, BlockWashSchedules, BlockWashSchedulesInfo, BorrowedInventoryToReturn, CateringRevenueToChange, CateringStatusToChange, ChangedBlockReservations, ChangedBlockStatus, ChangedCateringStatus, DefaultBlockCodeDetails, InventoryToBorrow, InventoryToBorrowInfo, NextBlockStatus, PropertyLeadsType, RateOverride, RateOverrideStatus, RecentlyAccessedBlocks, RoomTypeOrder, RoomingList, RoomingListDetails, SalesAllowances, ShiftedBlock, Status, SubAllocation, SubBlock, TourSeries, TracesByDateRange } from '../models/index';
export interface BlockChangesByDateTimeRequest {
    hotelId: string;
    startLastModifiedDate: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    endLastModifiedDate?: string;
    blockStatus?: Set<BlockChangesByDateTimeBlockStatusEnum>;
    openForPickup?: boolean;
    cateringOnly?: boolean;
    includeEventChanges?: boolean;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface ChangeRateOverrideRequest {
    blockId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rateOverride: RateOverride;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface CreatePropertyLeadsRequest {
    hotelId: string;
    leadId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    propertyLeads: PropertyLeadsType;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteAlternateDatesRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteBlockRequest {
    blockId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteBlockAccessExclusionRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    allowCancelReservation?: boolean;
    allowCreateReservation?: boolean;
    allowModifyReservation?: boolean;
    excludeFromAvailability?: boolean;
    inactive?: boolean;
    sourceType?: string;
    sourceValue?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteBlockAttachmentRequest {
    attachId: string;
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteBlockOwnersRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteBlockRestrictionRequest {
    blockId: string;
    hotelId: string;
    startDate: string;
    endDate: string;
    code: DeleteBlockRestrictionCodeEnum;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomTypes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteBlockWashScheduleRequest {
    blockId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    washDate?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface DeleteBlockWashSchedulesRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockRequest {
    blockId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    markAsRecentlyAccessed?: boolean;
    fetchInstructions?: Set<GetBlockFetchInstructionsEnum>;
    fetchAllocatedRoomTypes?: boolean;
    startDate?: string;
    numberOfDays?: number;
    roomAllocationCriteria?: Set<GetBlockRoomAllocationCriteriaEnum>;
    roomTypes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockAccessExclusionRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockActivityLogRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelId?: string;
    module?: GetBlockActivityLogModuleEnum;
    moduleParamsParameterName?: Array<string>;
    moduleParamsParameterValue?: Array<string>;
    activityGroup?: string;
    activityType?: string;
    activityParamsFromDate?: string;
    activityParamsToDate?: string;
    activityParamsSearchText?: string;
    userByIDsUserId?: Array<number>;
    userForIDsUserId?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockAttachmentsRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    attachedFileName?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockAvailabilityRequest {
    blockId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    overrideRateCode?: boolean;
    arrivalDate?: string;
    nights?: number;
    adults?: number;
    children?: number;
    rooms?: number;
    ratePlanCode?: string;
    existingReservationId?: string;
    existingReservationIdType?: string;
    roomType?: Array<string>;
    fetchAllocatedRoomType?: Set<GetBlockAvailabilityFetchAllocatedRoomTypeEnum>;
    roomTypeCount?: number;
    detailedAvailability?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockByExtIdRequest {
    blockExternalId: string;
    externalSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    markAsRecentlyAccessed?: boolean;
    fetchInstructions?: Set<GetBlockByExtIdFetchInstructionsEnum>;
    fetchAllocatedRoomTypes?: boolean;
    startDate?: string;
    numberOfDays?: number;
    roomAllocationCriteria?: Set<GetBlockByExtIdRoomAllocationCriteriaEnum>;
    roomTypes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockDailyStatisticsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    genericRoomType?: boolean;
    limit?: number;
    offset?: number;
    hotelId?: string;
    end?: string;
    start?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockOwnersRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockPMReservationsRequest {
    blockId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    postingmaster?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockPMReservationsByExtIdRequest {
    blockExternalId: string;
    externalSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    postingmaster?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockRangeInfoRequest {
    blockId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    genericRoomType?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockReservationsRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    fetchInstructions?: Set<GetBlockReservationsFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockRestrictionsRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    startDate?: string;
    endDate?: string;
    duration?: string;
    roomType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockRevenueChangesRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelId?: string;
    status?: Array<string>;
    changeEndDate?: string;
    changeStartDate?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockRoomRateGridRequest {
    blockId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchAllocatedRoomTypes?: boolean;
    startDate?: string;
    numberOfDays?: number;
    roomAllocationCriteria?: Set<GetBlockRoomRateGridRoomAllocationCriteriaEnum>;
    roomTypes?: Array<string>;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockRoomTypesRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    fetchAllocatedRoomTypes?: boolean;
    startDate?: string;
    endDate?: string;
    fetchGenericRoomTypes?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockRoomsStatusRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockStatisticsRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    startDate?: string;
    numberOfDays?: number;
    statisticsInstructions?: Set<GetBlockStatisticsStatisticsInstructionsEnum>;
    roomTypeHotelId?: Array<string>;
    invBlockCode?: Array<string>;
    promotionCode?: Array<string>;
    roomCategory?: Array<string>;
    roomClass?: Array<string>;
    roomQualifierCode?: Array<string>;
    roomQualifierMatchIndicator?: Array<string>;
    roomType?: Array<string>;
    roomViewCode?: Array<string>;
    roomFeatureCode?: Array<string>;
    defaultOccupancy?: number;
    maximumOccupancy?: number;
    noOfPhysicalRooms?: number;
    bookingChannelCode?: Array<string>;
    bookingChannelMappingCode?: Array<string>;
    bookingChannelMappingName?: Array<string>;
    bedTypeCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockStatusChangesRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelId?: string;
    changeEndDate?: string;
    changeStartDate?: string;
    currentStatus?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockWashInfoRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    blockId?: string;
    blockIdType?: string;
    genericRoomType?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlockWashSchedulesRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetBlocksRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    markAsRecentlyAccessed?: boolean;
    limit?: number;
    offset?: number;
    multipleHotelsSearchHotelIds?: Array<string>;
    superSearch?: string;
    blockIdList?: Array<string>;
    blockIdType?: Array<string>;
    externalReferenceIds?: Array<string>;
    externalSystemCodes?: Array<string>;
    blockCode?: string;
    blockName?: string;
    blockOwner?: Array<string>;
    blockStatus?: Array<string>;
    cateringStatus?: Array<string>;
    reservationMethod?: Array<string>;
    createdByUser?: string;
    blockStartEndDate?: string;
    blockStartStartDate?: string;
    blockEndEndDate?: string;
    blockEndStartDate?: string;
    reservationArrival?: string;
    reservationDeparture?: string;
    includeShoulderDates?: boolean;
    stayDate?: string;
    blockCreatedOnEndDate?: string;
    blockCreatedOnStartDate?: string;
    decisionEndDate?: string;
    decisionStartDate?: string;
    cutOffEndDate?: string;
    cutOffStartDate?: string;
    category?: Set<GetBlocksCategoryEnum>;
    name?: Array<string>;
    attachedProfileId?: string;
    attachedProfileIdType?: string;
    leads?: boolean;
    tourSeries?: boolean;
    onlyPickupBlocks?: boolean;
    onlyOpportunities?: boolean;
    ratePlanCode?: Array<string>;
    tourCode?: string;
    attributeName?: Array<string>;
    orderType?: Set<GetBlocksOrderTypeEnum>;
    fetchInstructions?: Set<GetBlocksFetchInstructionsEnum>;
    fetchAllocatedRoomTypes?: boolean;
    additionalCriteriaStartDate?: string;
    numberOfDays?: number;
    adults?: number;
    children?: number;
    childAge?: Array<number>;
    bucket1Count?: number;
    bucket2Count?: number;
    bucket3Count?: number;
    bucket4Count?: number;
    bucket5Count?: number;
    existingReservationId?: string;
    existingReservationIdType?: string;
    roomAllocationCriteria?: Set<GetBlocksRoomAllocationCriteriaEnum>;
    roomType?: Array<string>;
    additionalCriteriaRatePlanCode?: string;
    currencyCode?: string;
    accessRestriction?: Set<GetBlocksAccessRestrictionEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetDefaultBlockCodeRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    blockName?: string;
    startDate?: string;
    blockCodeTemplate?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetInventoryToBorrowRequest {
    hotelId: string;
    blockId: string;
    startDate: string;
    requiredRooms: Array<number>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockIdContext?: string;
    blockIdType?: string;
    existingReservationId?: string;
    existingReservationIdType?: string;
    roomType?: string;
    endDate?: string;
    duration?: string;
    numberOfRooms?: number;
    borrowDate?: Array<string>;
    overrideRateCode?: boolean;
    overrideRestriction?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetNextBlockStatusRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    currentStatus?: string;
    includeCateringStatus?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetRecentlyAccessedBlocksRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetSalesAllowancesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ceilingId?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface GetTracesByDateRangeRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    beginDate?: string;
    endDate?: string;
    department?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostAlternateDatesRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockAlternateDates: BlockAlternateDates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostBlockRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    block: Block;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostBlockOwnersRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockOwnersToAssign: BlockOwnersToAssign;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostBlockPostingMasterRequest {
    blockId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockPostingMaster: BlockPostingMaster;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostBlockRestrictionRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockRestriction: BlockRestriction;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostBlockValidateRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockValidate: BlockValidate;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostBlockWashSchedulesRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockWashSchedulesInfo: BlockWashSchedulesInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCancelBlockRequest {
    blockId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockToCancel: BlockToCancel;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostCopyBlockRequest {
    sourceBlockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockCopy: BlockCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostDefaultBlockCodeRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockDetails: BlockBasicInfos;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostRoomingListRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomingList: RoomingList;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostSubAllocationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    subAllocation: SubAllocation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostSubBlockRequest {
    blockId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    subBlock: SubBlock;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostSubBlockByExtIdRequest {
    blockExternalId: string;
    externalSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    subBlock: SubBlock;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PostTourSeriesRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    tourSeries: TourSeries;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutAlternateDatesRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockAlternateDates: BlockAlternateDates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutBlockRequest {
    blockId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockToBeChanged: BlockToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutBlockAccessExclusionRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockAccessExclusion: BlockAccessExclusion;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutBlockAllocationRequest {
    blockId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    allocation: Allocation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutBlockAllocationByExtIdRequest {
    roomType: string;
    blockExternalId: string;
    externalSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    allocation: Allocation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutBlockAllocationRangeRequest {
    blockId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockAllocationRange: BlockAllocationRange;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutBlockAllocationRangeByExtIdRequest {
    blockExternalId: string;
    externalSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockAllocationRange: BlockAllocationRange;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutBlockAllocationWashRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockAllocationWash: BlockAllocationWash;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutBlockByExtIdRequest {
    blockExternalId: string;
    externalSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockToBeChanged: BlockToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutBlockCutoffRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockStatus: BlockStatus;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutBlockOwnersRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockOwnersToChange: BlockOwnersToChange;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutBlockRatesRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockStatus: BlockStatus;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutBlockReservationsRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockReservationsToChange: BlockReservationsToChange;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutBlockShiftRequest {
    blockId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockToShift: BlockToShift;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutBlockStatusRequest {
    blockId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockStatusToChange: BlockStatusToChange;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutBlockStatusByExtIdRequest {
    blockExternalId: string;
    externalSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockStatusToChange: BlockStatusToChange;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutBlockStatusToOpenRequest {
    blockId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockStatus: BlockStatus;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutBlockWashSchedulesRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockWashSchedulesInfo: BlockWashSchedulesInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutCateringRevenueRequest {
    hotelId: string;
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringRevenueToChange: CateringRevenueToChange;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutCateringStatusRequest {
    eventId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringStatusToChange: CateringStatusToChange;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutClearAllRestrictionsRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    allRestrictions: AllRestrictions;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutContractDefaultsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockStatus: BlockStatus;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutInventoryRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    inventoryToBorrow: InventoryToBorrow;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutRegularToMasterBlockRequest {
    hotelId: string;
    blockId: string;
    masterBlockCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutReleasedInventoryRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    borrowedInventoryToReturn: BorrowedInventoryToReturn;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutRoomTypeOrderRequest {
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomTypeOrder: RoomTypeOrder;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutSubBlockToRegularRequest {
    hotelId: string;
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
export interface PutValidateBlockCodeRequest {
    blockCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockCodeToValidate: BlockCodeToValidate;
    xExternalsystem?: string;
    acceptLanguage?: string;
}
/**
 *
 */
export declare class BlockApi extends runtime.BaseAPI {
    /**
     * A user can search for blocks that have been created, updated and/or deleted within maximum 3 day date range. If in the time period searched a block was created and deleted, the query won\'t return this information. If a block is created and updated, the create information is returned. If a block is updated only, it returns the update. If a block is updated and delete, it returns the delete. <p>The maximum allowable limit for this API is <strong>1000</strong>.</p> <p>This API allows a time span of <strong>3</strong> days.</p>
     * Get modified blocks from a specific time period in OPERA.
     */
    blockChangesByDateTimeRaw(requestParameters: BlockChangesByDateTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockChangesByDateTimeSummary>>;
    /**
     * A user can search for blocks that have been created, updated and/or deleted within maximum 3 day date range. If in the time period searched a block was created and deleted, the query won\'t return this information. If a block is created and updated, the create information is returned. If a block is updated only, it returns the update. If a block is updated and delete, it returns the delete. <p>The maximum allowable limit for this API is <strong>1000</strong>.</p> <p>This API allows a time span of <strong>3</strong> days.</p>
     * Get modified blocks from a specific time period in OPERA.
     */
    blockChangesByDateTime(requestParameters: BlockChangesByDateTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockChangesByDateTimeSummary>;
    /**
     * Use this API to change rate override. <p><strong>OperationId:</strong>changeRateOverride</p>
     * Change rate override
     */
    changeRateOverrideRaw(requestParameters: ChangeRateOverrideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RateOverrideStatus>>;
    /**
     * Use this API to change rate override. <p><strong>OperationId:</strong>changeRateOverride</p>
     * Change rate override
     */
    changeRateOverride(requestParameters: ChangeRateOverrideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RateOverrideStatus>;
    /**
     * You would use this request to create property leads for the properties provided. You will need to know the Central Lead ID, which you want the property leads to fall under.<p><strong>OperationId:</strong>createPropertyLeads</p>
     * Use this API to create Property Leads
     */
    createPropertyLeadsRaw(requestParameters: CreatePropertyLeadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * You would use this request to create property leads for the properties provided. You will need to know the Central Lead ID, which you want the property leads to fall under.<p><strong>OperationId:</strong>createPropertyLeads</p>
     * Use this API to create Property Leads
     */
    createPropertyLeads(requestParameters: CreatePropertyLeadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete alternate dates for a block. <p><strong>OperationId:</strong>deleteAlternateDates</p>
     * Delete alternate dates for a Block
     * @deprecated
     */
    deleteAlternateDatesRaw(requestParameters: DeleteAlternateDatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete alternate dates for a block. <p><strong>OperationId:</strong>deleteAlternateDates</p>
     * Delete alternate dates for a Block
     * @deprecated
     */
    deleteAlternateDates(requestParameters: DeleteAlternateDatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete block, if any reservations attached to the block, you will be unable to delete.  <p><strong>OperationId:</strong>deleteBlock</p>
     * Delete a Block
     */
    deleteBlockRaw(requestParameters: DeleteBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete block, if any reservations attached to the block, you will be unable to delete.  <p><strong>OperationId:</strong>deleteBlock</p>
     * Delete a Block
     */
    deleteBlock(requestParameters: DeleteBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete block access exclusion <p><strong>OperationId:</strong>deleteBlockAccessExclusion</p>
     * Delete Block access exclusion
     */
    deleteBlockAccessExclusionRaw(requestParameters: DeleteBlockAccessExclusionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete block access exclusion <p><strong>OperationId:</strong>deleteBlockAccessExclusion</p>
     * Delete Block access exclusion
     */
    deleteBlockAccessExclusion(requestParameters: DeleteBlockAccessExclusionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API remove block attachments. <p><strong>OperationId:</strong>deleteBlockAttachment</p>
     * Delete Block Attachment
     */
    deleteBlockAttachmentRaw(requestParameters: DeleteBlockAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API remove block attachments. <p><strong>OperationId:</strong>deleteBlockAttachment</p>
     * Delete Block Attachment
     */
    deleteBlockAttachment(requestParameters: DeleteBlockAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete a block owner. <p><strong>OperationId:</strong>deleteBlockOwners</p>
     * Delete a Block owner
     * @deprecated
     */
    deleteBlockOwnersRaw(requestParameters: DeleteBlockOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete a block owner. <p><strong>OperationId:</strong>deleteBlockOwners</p>
     * Delete a Block owner
     * @deprecated
     */
    deleteBlockOwners(requestParameters: DeleteBlockOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to delete block restrictions. <p><strong>OperationId:</strong>deleteBlockRestriction</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Delete Block Restriction
     */
    deleteBlockRestrictionRaw(requestParameters: DeleteBlockRestrictionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to delete block restrictions. <p><strong>OperationId:</strong>deleteBlockRestriction</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Delete Block Restriction
     */
    deleteBlockRestriction(requestParameters: DeleteBlockRestrictionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to remove block wash schedule based on the HotelCode, Block ID and Wash Date. <p><strong>OperationId:</strong>deleteBlockWashSchedule</p>
     * Remove Block Wash Schedule
     */
    deleteBlockWashScheduleRaw(requestParameters: DeleteBlockWashScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to remove block wash schedule based on the HotelCode, Block ID and Wash Date. <p><strong>OperationId:</strong>deleteBlockWashSchedule</p>
     * Remove Block Wash Schedule
     */
    deleteBlockWashSchedule(requestParameters: DeleteBlockWashScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to remove block wash schedules based on the HotelCode, Block ID and Wash Date. <p><strong>OperationId:</strong>deleteBlockWashSchedules</p>
     * Remove Block Wash Schedules
     * @deprecated
     */
    deleteBlockWashSchedulesRaw(requestParameters: DeleteBlockWashSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to remove block wash schedules based on the HotelCode, Block ID and Wash Date. <p><strong>OperationId:</strong>deleteBlockWashSchedules</p>
     * Remove Block Wash Schedules
     * @deprecated
     */
    deleteBlockWashSchedules(requestParameters: DeleteBlockWashSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to retrieve a specific block.  You will need to know the blockID in the request; if you don\'t know it, please go ahead and use getBlocks API first.  The response will include detailed information about the block. <p><strong>OperationId:</strong>getBlock</p>
     * Get a Block By ID
     */
    getBlockRaw(requestParameters: GetBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Block>>;
    /**
     * Use this API to retrieve a specific block.  You will need to know the blockID in the request; if you don\'t know it, please go ahead and use getBlocks API first.  The response will include detailed information about the block. <p><strong>OperationId:</strong>getBlock</p>
     * Get a Block By ID
     */
    getBlock(requestParameters: GetBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Block>;
    /**
     * This API retrieves block exclusion information. <p><strong>OperationId:</strong>getBlockAccessExclusion</p>
     * Get Block exclusion information
     */
    getBlockAccessExclusionRaw(requestParameters: GetBlockAccessExclusionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockAccessExclusionInfo>>;
    /**
     * This API retrieves block exclusion information. <p><strong>OperationId:</strong>getBlockAccessExclusion</p>
     * Get Block exclusion information
     */
    getBlockAccessExclusion(requestParameters: GetBlockAccessExclusionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockAccessExclusionInfo>;
    /**
     * Use this API to facilitate retrieving the block activity log. <p><strong>OperationId:</strong>getBlockActivityLog</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>
     * Get the Block activity log
     */
    getBlockActivityLogRaw(requestParameters: GetBlockActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockActivityLog>>;
    /**
     * Use this API to facilitate retrieving the block activity log. <p><strong>OperationId:</strong>getBlockActivityLog</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>
     * Get the Block activity log
     */
    getBlockActivityLog(requestParameters: GetBlockActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockActivityLog>;
    /**
     * Use this API to retrieve block attachments. <p><strong>OperationId:</strong>getBlockAttachments</p>
     * Get Block Attachments
     */
    getBlockAttachmentsRaw(requestParameters: GetBlockAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockAttachments>>;
    /**
     * Use this API to retrieve block attachments. <p><strong>OperationId:</strong>getBlockAttachments</p>
     * Get Block Attachments
     */
    getBlockAttachments(requestParameters: GetBlockAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockAttachments>;
    /**
     * Use this API to search for availability on an OPERA block.  You will need to know the block ID.  Once you know what rooms and rates are available you can proceed to post a block reservation. <p><strong>OperationId:</strong>getBlockAvailability</p>
     * Get Block AvailaBility
     */
    getBlockAvailabilityRaw(requestParameters: GetBlockAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockAvailability>>;
    /**
     * Use this API to search for availability on an OPERA block.  You will need to know the block ID.  Once you know what rooms and rates are available you can proceed to post a block reservation. <p><strong>OperationId:</strong>getBlockAvailability</p>
     * Get Block AvailaBility
     */
    getBlockAvailability(requestParameters: GetBlockAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockAvailability>;
    /**
     * Use this API to retrieve a specific block.  You will need to know the blockID in the request; if you don\'t know it, please go ahead and use getBlocks API first.  The response will include detailed information about the block. <p><strong>OperationId:</strong>getBlockByExtId</p>
     * Get a Block By ID
     */
    getBlockByExtIdRaw(requestParameters: GetBlockByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Block>>;
    /**
     * Use this API to retrieve a specific block.  You will need to know the blockID in the request; if you don\'t know it, please go ahead and use getBlocks API first.  The response will include detailed information about the block. <p><strong>OperationId:</strong>getBlockByExtId</p>
     * Get a Block By ID
     */
    getBlockByExtId(requestParameters: GetBlockByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Block>;
    /**
     * Use this API to retrieve block daily statistics for the given date range and hotel ID. It returns allocated, picked up, and available number of room nights per block, per day, per room type.<p><strong>OperationId:</strong>getBlockDailyStatistics</p>
     * Get Block Daily Statistics
     */
    getBlockDailyStatisticsRaw(requestParameters: GetBlockDailyStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockDailyStatistics>>;
    /**
     * Use this API to retrieve block daily statistics for the given date range and hotel ID. It returns allocated, picked up, and available number of room nights per block, per day, per room type.<p><strong>OperationId:</strong>getBlockDailyStatistics</p>
     * Get Block Daily Statistics
     */
    getBlockDailyStatistics(requestParameters: GetBlockDailyStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockDailyStatistics>;
    /**
     * Use this API to retrieve block owners. <p><strong>OperationId:</strong>getBlockOwners</p>
     * Get Block owners
     */
    getBlockOwnersRaw(requestParameters: GetBlockOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockOwners>>;
    /**
     * Use this API to retrieve block owners. <p><strong>OperationId:</strong>getBlockOwners</p>
     * Get Block owners
     */
    getBlockOwners(requestParameters: GetBlockOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockOwners>;
    /**
     * Use this API to retrieve PM (Posting Master) reservations for a block. <p><strong>OperationId:</strong>getBlockPMReservations</p>
     * Get Posting Master Reservations for a Block
     */
    getBlockPMReservationsRaw(requestParameters: GetBlockPMReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockPMReservations>>;
    /**
     * Use this API to retrieve PM (Posting Master) reservations for a block. <p><strong>OperationId:</strong>getBlockPMReservations</p>
     * Get Posting Master Reservations for a Block
     */
    getBlockPMReservations(requestParameters: GetBlockPMReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockPMReservations>;
    /**
     * Use this API to retrieve PM (Posting Master) reservations for a block. <p><strong>OperationId:</strong>getBlockPMReservationsByExtId</p>
     * Get Posting Master Reservations for a Block
     */
    getBlockPMReservationsByExtIdRaw(requestParameters: GetBlockPMReservationsByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockPMReservations>>;
    /**
     * Use this API to retrieve PM (Posting Master) reservations for a block. <p><strong>OperationId:</strong>getBlockPMReservationsByExtId</p>
     * Get Posting Master Reservations for a Block
     */
    getBlockPMReservationsByExtId(requestParameters: GetBlockPMReservationsByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockPMReservations>;
    /**
     * Request for updating block allocation for a range of dates. <p><strong>OperationId:</strong>getBlockRangeInfo</p>
     * Get Block Range Information
     */
    getBlockRangeInfoRaw(requestParameters: GetBlockRangeInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockRangeInfo>>;
    /**
     * Request for updating block allocation for a range of dates. <p><strong>OperationId:</strong>getBlockRangeInfo</p>
     * Get Block Range Information
     */
    getBlockRangeInfo(requestParameters: GetBlockRangeInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockRangeInfo>;
    /**
     * Use this API to  retrieve all reservations created for the given block ID. <p><strong>OperationId:</strong>getBlockReservations</p>
     * Retrieves all reservations created for the Block
     */
    getBlockReservationsRaw(requestParameters: GetBlockReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockReservations>>;
    /**
     * Use this API to  retrieve all reservations created for the given block ID. <p><strong>OperationId:</strong>getBlockReservations</p>
     * Retrieves all reservations created for the Block
     */
    getBlockReservations(requestParameters: GetBlockReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockReservations>;
    /**
     * This API retrieves block restrictions. <p><strong>OperationId:</strong>getBlockRestrictions</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Get Block restrictions
     */
    getBlockRestrictionsRaw(requestParameters: GetBlockRestrictionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockRestrictions>>;
    /**
     * This API retrieves block restrictions. <p><strong>OperationId:</strong>getBlockRestrictions</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Get Block restrictions
     */
    getBlockRestrictions(requestParameters: GetBlockRestrictionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockRestrictions>;
    /**
     * This API will fetch revenue changes for a specific block recorded in the revenue change log for a specified date range. Please note that the revenue changes are delta changes only and single records do not represent a total summary of the block revenue per date. <p><strong>OperationId:</strong>getBlockRevenueChanges</p>
     * Fetch Block Revenue Changes
     */
    getBlockRevenueChangesRaw(requestParameters: GetBlockRevenueChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockRevenueChanges>>;
    /**
     * This API will fetch revenue changes for a specific block recorded in the revenue change log for a specified date range. Please note that the revenue changes are delta changes only and single records do not represent a total summary of the block revenue per date. <p><strong>OperationId:</strong>getBlockRevenueChanges</p>
     * Fetch Block Revenue Changes
     */
    getBlockRevenueChanges(requestParameters: GetBlockRevenueChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockRevenueChanges>;
    /**
     * Use this API to retrieve grid details for a specific block. The response will include detailed information about the block grid and response can be paginated for blocks with longer date range.. <p><strong>OperationId:</strong>getBlockRoomRateGrid</p>
     * Operation to get room rate grid for a Block and supports pagination.
     */
    getBlockRoomRateGridRaw(requestParameters: GetBlockRoomRateGridRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockGridType>>;
    /**
     * Use this API to retrieve grid details for a specific block. The response will include detailed information about the block grid and response can be paginated for blocks with longer date range.. <p><strong>OperationId:</strong>getBlockRoomRateGrid</p>
     * Operation to get room rate grid for a Block and supports pagination.
     */
    getBlockRoomRateGrid(requestParameters: GetBlockRoomRateGridRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockGridType>;
    /**
     * Use this API to retrieve room types for a block based on search criteria <p><strong>OperationId:</strong>getBlockRoomTypes</p> <p>This API allows a time span of <strong>30</strong> days.</p>
     * Get Bock Room Types
     */
    getBlockRoomTypesRaw(requestParameters: GetBlockRoomTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockRoomTypes>>;
    /**
     * Use this API to retrieve room types for a block based on search criteria <p><strong>OperationId:</strong>getBlockRoomTypes</p> <p>This API allows a time span of <strong>30</strong> days.</p>
     * Get Bock Room Types
     */
    getBlockRoomTypes(requestParameters: GetBlockRoomTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockRoomTypes>;
    /**
     * This API facilitates retrieving room status for the block. <p><strong>OperationId:</strong>getBlockRoomsStatus</p>
     * Get room status for a Block
     */
    getBlockRoomsStatusRaw(requestParameters: GetBlockRoomsStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockRoomsStatus>>;
    /**
     * This API facilitates retrieving room status for the block. <p><strong>OperationId:</strong>getBlockRoomsStatus</p>
     * Get room status for a Block
     */
    getBlockRoomsStatus(requestParameters: GetBlockRoomsStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockRoomsStatus>;
    /**
     * Use this API to API retrieve detailed block statistics <p><strong>OperationId:</strong>getBlockStatistics</p>
     * Get Block Statistics
     */
    getBlockStatisticsRaw(requestParameters: GetBlockStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockStatistics>>;
    /**
     * Use this API to API retrieve detailed block statistics <p><strong>OperationId:</strong>getBlockStatistics</p>
     * Get Block Statistics
     */
    getBlockStatistics(requestParameters: GetBlockStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockStatistics>;
    /**
     * Use this API to retrieve block status change log based on the HotelCode and Block ID. <p><strong>OperationId:</strong>getBlockStatusChanges</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p> <p>This API allows a time span of <strong>30</strong> days.</p>
     * Get Block Status Activity Log
     */
    getBlockStatusChangesRaw(requestParameters: GetBlockStatusChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockStatusChanges>>;
    /**
     * Use this API to retrieve block status change log based on the HotelCode and Block ID. <p><strong>OperationId:</strong>getBlockStatusChanges</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p> <p>This API allows a time span of <strong>30</strong> days.</p>
     * Get Block Status Activity Log
     */
    getBlockStatusChanges(requestParameters: GetBlockStatusChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockStatusChanges>;
    /**
     * This API retrieves block information needed to perform block wash operation. <p><strong>OperationId:</strong>getBlockWashInfo</p>
     * Get Block Wash Information
     */
    getBlockWashInfoRaw(requestParameters: GetBlockWashInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockWashInfo>>;
    /**
     * This API retrieves block information needed to perform block wash operation. <p><strong>OperationId:</strong>getBlockWashInfo</p>
     * Get Block Wash Information
     */
    getBlockWashInfo(requestParameters: GetBlockWashInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockWashInfo>;
    /**
     * Use this API to retrieve the information regarding block wash schedule based on the parameter HotelCode and Block ID. <p><strong>OperationId:</strong>getBlockWashSchedules</p>
     * Get Block Wash Schedule
     */
    getBlockWashSchedulesRaw(requestParameters: GetBlockWashSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockWashSchedules>>;
    /**
     * Use this API to retrieve the information regarding block wash schedule based on the parameter HotelCode and Block ID. <p><strong>OperationId:</strong>getBlockWashSchedules</p>
     * Get Block Wash Schedule
     */
    getBlockWashSchedules(requestParameters: GetBlockWashSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockWashSchedules>;
    /**
     * Use this API to retrieve a list of blocks for requested query parameters. A wide range of query parameters is available to support various persona requirements, so it is recommended to include, at least, the hotel block date range, stay date range, and/or number of days as query parameters. You can use more query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data. If x-hubid is used as a header, it returns matching data from multiple hotels within the same chain. <p><strong>OperationId:</strong>getBlocks</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>
     * Get Blocks
     */
    getBlocksRaw(requestParameters: GetBlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockSummaries>>;
    /**
     * Use this API to retrieve a list of blocks for requested query parameters. A wide range of query parameters is available to support various persona requirements, so it is recommended to include, at least, the hotel block date range, stay date range, and/or number of days as query parameters. You can use more query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data. If x-hubid is used as a header, it returns matching data from multiple hotels within the same chain. <p><strong>OperationId:</strong>getBlocks</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>
     * Get Blocks
     */
    getBlocks(requestParameters: GetBlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockSummaries>;
    /**
     * Use this API to retrieve a default block code based on template. <p><strong>OperationId:</strong>getDefaultBlockCode</p>
     * Get default Block Code
     */
    getDefaultBlockCodeRaw(requestParameters: GetDefaultBlockCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultBlockCodeDetails>>;
    /**
     * Use this API to retrieve a default block code based on template. <p><strong>OperationId:</strong>getDefaultBlockCode</p>
     * Get default Block Code
     */
    getDefaultBlockCode(requestParameters: GetDefaultBlockCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultBlockCodeDetails>;
    /**
     * Use this API to retrieve borrowable inventory for the requested dates when encountering an insufficient number of rooms in a block for a specific room type, or for overall inventory. This operations would usually be used when attempting to pick up a reservation against a block, and the block inventory does not have enough rooms left to support the reservation pick up. <p><strong>OperationId:</strong>getInventoryToBorrow</p>
     * Get inventory to Borrow
     */
    getInventoryToBorrowRaw(requestParameters: GetInventoryToBorrowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryToBorrowInfo>>;
    /**
     * Use this API to retrieve borrowable inventory for the requested dates when encountering an insufficient number of rooms in a block for a specific room type, or for overall inventory. This operations would usually be used when attempting to pick up a reservation against a block, and the block inventory does not have enough rooms left to support the reservation pick up. <p><strong>OperationId:</strong>getInventoryToBorrow</p>
     * Get inventory to Borrow
     */
    getInventoryToBorrow(requestParameters: GetInventoryToBorrowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryToBorrowInfo>;
    /**
     * Use this API to retrieve next set of statuses and their next statuses for the current status passed in the request. <p><strong>OperationId:</strong>getNextBlockStatus</p>
     * Get Next Block Status
     */
    getNextBlockStatusRaw(requestParameters: GetNextBlockStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NextBlockStatus>>;
    /**
     * Use this API to retrieve next set of statuses and their next statuses for the current status passed in the request. <p><strong>OperationId:</strong>getNextBlockStatus</p>
     * Get Next Block Status
     */
    getNextBlockStatus(requestParameters: GetNextBlockStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NextBlockStatus>;
    /**
     * This API retrieves recently accessed blocks. <p><strong>OperationId:</strong>getRecentlyAccessedBlocks</p>
     * Get recently accessed Blocks
     */
    getRecentlyAccessedBlocksRaw(requestParameters: GetRecentlyAccessedBlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecentlyAccessedBlocks>>;
    /**
     * This API retrieves recently accessed blocks. <p><strong>OperationId:</strong>getRecentlyAccessedBlocks</p>
     * Get recently accessed Blocks
     */
    getRecentlyAccessedBlocks(requestParameters: GetRecentlyAccessedBlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecentlyAccessedBlocks>;
    /**
     * Use this API to retrieve the Sales Allowance of max amount of rooms that can be sold. <p><strong>OperationId:</strong>getSalesAllowances</p>
     * Get Sales allowances
     */
    getSalesAllowancesRaw(requestParameters: GetSalesAllowancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesAllowances>>;
    /**
     * Use this API to retrieve the Sales Allowance of max amount of rooms that can be sold. <p><strong>OperationId:</strong>getSalesAllowances</p>
     * Get Sales allowances
     */
    getSalesAllowances(requestParameters: GetSalesAllowancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesAllowances>;
    /**
     * You can use this API to get traces for Reservations and Blocks. <p><strong>OperationId:</strong>getTracesByDateRange</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Get Traces By Date Range
     */
    getTracesByDateRangeRaw(requestParameters: GetTracesByDateRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TracesByDateRange>>;
    /**
     * You can use this API to get traces for Reservations and Blocks. <p><strong>OperationId:</strong>getTracesByDateRange</p> <p>This API allows a time span of <strong>90</strong> days.</p>
     * Get Traces By Date Range
     */
    getTracesByDateRange(requestParameters: GetTracesByDateRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TracesByDateRange>;
    /**
     * Use this API to create alternate dates for a block. <p><strong>OperationId:</strong>postAlternateDates</p>
     * Create alternate dates for a Block
     * @deprecated
     */
    postAlternateDatesRaw(requestParameters: PostAlternateDatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to create alternate dates for a block. <p><strong>OperationId:</strong>postAlternateDates</p>
     * Create alternate dates for a Block
     * @deprecated
     */
    postAlternateDates(requestParameters: PostAlternateDatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to create a new group block in OPERA Cloud. You must first use the ListOfValues APIs to find block attributes, such as Block Status, Room Types, and so on. Knowing this list of values helps ensure a successful postBlock. <p><strong>OperationId:</strong>postBlock</p>
     * Create a Block
     */
    postBlockRaw(requestParameters: PostBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to create a new group block in OPERA Cloud. You must first use the ListOfValues APIs to find block attributes, such as Block Status, Room Types, and so on. Knowing this list of values helps ensure a successful postBlock. <p><strong>OperationId:</strong>postBlock</p>
     * Create a Block
     */
    postBlock(requestParameters: PostBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to assign block owners. <p><strong>OperationId:</strong>postBlockOwners</p>
     * Assign a Block owner
     * @deprecated
     */
    postBlockOwnersRaw(requestParameters: PostBlockOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to assign block owners. <p><strong>OperationId:</strong>postBlockOwners</p>
     * Assign a Block owner
     * @deprecated
     */
    postBlockOwners(requestParameters: PostBlockOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to create a new posting Master reservation against a block in OPERA.  The block status in OPERA needs to be \'Open for Pick up\' to successfully post a BlockPostingMaster reservation. <p><strong>OperationId:</strong>postBlockPostingMaster</p>
     * Create Block posting master
     */
    postBlockPostingMasterRaw(requestParameters: PostBlockPostingMasterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to create a new posting Master reservation against a block in OPERA.  The block status in OPERA needs to be \'Open for Pick up\' to successfully post a BlockPostingMaster reservation. <p><strong>OperationId:</strong>postBlockPostingMaster</p>
     * Create Block posting master
     */
    postBlockPostingMaster(requestParameters: PostBlockPostingMasterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to create block restrictions. <p><strong>OperationId:</strong>postBlockRestriction</p>
     * Create Block Restriction
     */
    postBlockRestrictionRaw(requestParameters: PostBlockRestrictionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to create block restrictions. <p><strong>OperationId:</strong>postBlockRestriction</p>
     * Create Block Restriction
     */
    postBlockRestriction(requestParameters: PostBlockRestrictionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to validate if block rate code has overlapping blocks and also validates and creates block details. <p><strong>OperationId:</strong>postBlockValidate</p>
     * Validate Block
     */
    postBlockValidateRaw(requestParameters: PostBlockValidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to validate if block rate code has overlapping blocks and also validates and creates block details. <p><strong>OperationId:</strong>postBlockValidate</p>
     * Validate Block
     */
    postBlockValidate(requestParameters: PostBlockValidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API creates new block wash schedules based on Wash Date, Room Type, Occupancy detail, Sell limit and Wash by percent value. <p><strong>OperationId:</strong>postBlockWashSchedules</p>
     * Create Block Wash Schedules
     */
    postBlockWashSchedulesRaw(requestParameters: PostBlockWashSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API creates new block wash schedules based on Wash Date, Room Type, Occupancy detail, Sell limit and Wash by percent value. <p><strong>OperationId:</strong>postBlockWashSchedules</p>
     * Create Block Wash Schedules
     */
    postBlockWashSchedules(requestParameters: PostBlockWashSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to complete a cancellation of the block. <p><strong>OperationId:</strong>postCancelBlock</p>
     * Cancel the Block
     * @deprecated
     */
    postCancelBlockRaw(requestParameters: PostCancelBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to complete a cancellation of the block. <p><strong>OperationId:</strong>postCancelBlock</p>
     * Cancel the Block
     * @deprecated
     */
    postCancelBlock(requestParameters: PostCancelBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to copy the a block. The block copied (Source block) will serve as a template for the new one. <p><strong>OperationId:</strong>postCopyBlock</p>
     * Copy a Block
     */
    postCopyBlockRaw(requestParameters: PostCopyBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to copy the a block. The block copied (Source block) will serve as a template for the new one. <p><strong>OperationId:</strong>postCopyBlock</p>
     * Copy a Block
     */
    postCopyBlock(requestParameters: PostCopyBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to retrieve a list of default block code for Multiple blocks based on template. <p><strong>OperationId:</strong>getDefaultBlockCode</p>>
     * Create default Block Code for Multiple blocks
     */
    postDefaultBlockCodeRaw(requestParameters: PostDefaultBlockCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockBasicInfos>>;
    /**
     * Use this API to retrieve a list of default block code for Multiple blocks based on template. <p><strong>OperationId:</strong>getDefaultBlockCode</p>>
     * Create default Block Code for Multiple blocks
     */
    postDefaultBlockCode(requestParameters: PostDefaultBlockCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockBasicInfos>;
    /**
     * Use this API to create a Reservation Rooming List. <p><strong>OperationId:</strong>postRoomingList</p>
     * Create Block Rooming List Reservations
     */
    postRoomingListRaw(requestParameters: PostRoomingListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomingListDetails>>;
    /**
     * Use this API to create a Reservation Rooming List. <p><strong>OperationId:</strong>postRoomingList</p>
     * Create Block Rooming List Reservations
     */
    postRoomingList(requestParameters: PostRoomingListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomingListDetails>;
    /**
     * Use this API to create sub allocation. <p><strong>OperationId:</strong>postSubAllocation</p>
     * Create Sub allocation
     */
    postSubAllocationRaw(requestParameters: PostSubAllocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to create sub allocation. <p><strong>OperationId:</strong>postSubAllocation</p>
     * Create Sub allocation
     */
    postSubAllocation(requestParameters: PostSubAllocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this when you want to create a sub block.You will need to know the OPERA Block ID, which you want this sub block to fall under. <p><strong>OperationId:</strong>postSubBlock</p>
     * Create a sub-Block
     */
    postSubBlockRaw(requestParameters: PostSubBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this when you want to create a sub block.You will need to know the OPERA Block ID, which you want this sub block to fall under. <p><strong>OperationId:</strong>postSubBlock</p>
     * Create a sub-Block
     */
    postSubBlock(requestParameters: PostSubBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this when you want to create a sub block.You will need to know the OPERA Block ID, which you want this sub block to fall under. <p><strong>OperationId:</strong>postSubBlockByExtId</p>
     * Create a sub-Block
     */
    postSubBlockByExtIdRaw(requestParameters: PostSubBlockByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this when you want to create a sub block.You will need to know the OPERA Block ID, which you want this sub block to fall under. <p><strong>OperationId:</strong>postSubBlockByExtId</p>
     * Create a sub-Block
     */
    postSubBlockByExtId(requestParameters: PostSubBlockByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to create a block tour series. <p><strong>OperationId:</strong>postTourSeries</p>
     * Create a Block tour series
     */
    postTourSeriesRaw(requestParameters: PostTourSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to create a block tour series. <p><strong>OperationId:</strong>postTourSeries</p>
     * Create a Block tour series
     */
    postTourSeries(requestParameters: PostTourSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to change alternate dates for a block. <p><strong>OperationId:</strong>putAlternateDates</p>
     * Change alternate dates for a Block
     * @deprecated
     */
    putAlternateDatesRaw(requestParameters: PutAlternateDatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to change alternate dates for a block. <p><strong>OperationId:</strong>putAlternateDates</p>
     * Change alternate dates for a Block
     * @deprecated
     */
    putAlternateDates(requestParameters: PutAlternateDatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to update an existing group block in OPERA Cloud. This API allows update of block header information, such as description, market segment, source code, rate code, and other details, but does not include updates for room grid or events, which have their own update API calls. <p><strong>OperationId:</strong>putBlock</p>
     * Change a Block
     */
    putBlockRaw(requestParameters: PutBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockChanged>>;
    /**
     * Use this API to update an existing group block in OPERA Cloud. This API allows update of block header information, such as description, market segment, source code, rate code, and other details, but does not include updates for room grid or events, which have their own update API calls. <p><strong>OperationId:</strong>putBlock</p>
     * Change a Block
     */
    putBlock(requestParameters: PutBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockChanged>;
    /**
     * Us this API to create/change block access exclusion information. <p><strong>OperationId:</strong>putBlockAccessExclusion</p>
     * Set Block Exclusion information
     */
    putBlockAccessExclusionRaw(requestParameters: PutBlockAccessExclusionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Us this API to create/change block access exclusion information. <p><strong>OperationId:</strong>putBlockAccessExclusion</p>
     * Set Block Exclusion information
     */
    putBlockAccessExclusion(requestParameters: PutBlockAccessExclusionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to add block room type allocations and rates to a specified Block. <p><strong>OperationId:</strong>putBlockAllocation</p>
     * Set Block Allocation
     */
    putBlockAllocationRaw(requestParameters: PutBlockAllocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to add block room type allocations and rates to a specified Block. <p><strong>OperationId:</strong>putBlockAllocation</p>
     * Set Block Allocation
     */
    putBlockAllocation(requestParameters: PutBlockAllocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to add block room type allocations and rates to a specified Block. <p><strong>OperationId:</strong>putBlockAllocationByExtId</p>
     * Set Block Allocation
     */
    putBlockAllocationByExtIdRaw(requestParameters: PutBlockAllocationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to add block room type allocations and rates to a specified Block. <p><strong>OperationId:</strong>putBlockAllocationByExtId</p>
     * Set Block Allocation
     */
    putBlockAllocationByExtId(requestParameters: PutBlockAllocationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to set block allocation for a range of dates for a list of room types. <p><strong>OperationId:</strong>putBlockAllocationRange</p>
     * Set Block Allocation Range
     */
    putBlockAllocationRangeRaw(requestParameters: PutBlockAllocationRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to set block allocation for a range of dates for a list of room types. <p><strong>OperationId:</strong>putBlockAllocationRange</p>
     * Set Block Allocation Range
     */
    putBlockAllocationRange(requestParameters: PutBlockAllocationRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to set block allocation for a range of dates for a list of room types. <p><strong>OperationId:</strong>putBlockAllocationRangeByExtId</p>
     * Set Block Allocation Range
     */
    putBlockAllocationRangeByExtIdRaw(requestParameters: PutBlockAllocationRangeByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to set block allocation for a range of dates for a list of room types. <p><strong>OperationId:</strong>putBlockAllocationRangeByExtId</p>
     * Set Block Allocation Range
     */
    putBlockAllocationRangeByExtId(requestParameters: PutBlockAllocationRangeByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API removes block allocation to a range of dates for a set of room types. <p><strong>OperationId:</strong>putBlockAllocationWash</p>
     * Update Block Allocation Wash
     */
    putBlockAllocationWashRaw(requestParameters: PutBlockAllocationWashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API removes block allocation to a range of dates for a set of room types. <p><strong>OperationId:</strong>putBlockAllocationWash</p>
     * Update Block Allocation Wash
     */
    putBlockAllocationWash(requestParameters: PutBlockAllocationWashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * You can use this API to update an existing block.  You must know the block ID for the request message.  Use getBlocks if you dont already know the block ID. <p><strong>OperationId:</strong>putBlockByExtId</p>
     * Change a Block
     */
    putBlockByExtIdRaw(requestParameters: PutBlockByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockChanged>>;
    /**
     * You can use this API to update an existing block.  You must know the block ID for the request message.  Use getBlocks if you dont already know the block ID. <p><strong>OperationId:</strong>putBlockByExtId</p>
     * Change a Block
     */
    putBlockByExtId(requestParameters: PutBlockByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockChanged>;
    /**
     * This API cuts off block allocation effective current date. <p><strong>OperationId:</strong>putBlockCutoff</p>
     * Block Cut Off
     */
    putBlockCutoffRaw(requestParameters: PutBlockCutoffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API cuts off block allocation effective current date. <p><strong>OperationId:</strong>putBlockCutoff</p>
     * Block Cut Off
     */
    putBlockCutoff(requestParameters: PutBlockCutoffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to change block owners. <p><strong>OperationId:</strong>putBlockOwners</p>
     * Change Block owners
     * @deprecated
     */
    putBlockOwnersRaw(requestParameters: PutBlockOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to change block owners. <p><strong>OperationId:</strong>putBlockOwners</p>
     * Change Block owners
     * @deprecated
     */
    putBlockOwners(requestParameters: PutBlockOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to refreshes block rates. <p><strong>OperationId:</strong>putBlockRates</p>
     * Refreshes Block rates
     */
    putBlockRatesRaw(requestParameters: PutBlockRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to refreshes block rates. <p><strong>OperationId:</strong>putBlockRates</p>
     * Refreshes Block rates
     */
    putBlockRates(requestParameters: PutBlockRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to make changes to block reservations. <p><strong>OperationId:</strong>putBlockReservations</p>
     * Change Block reservations
     */
    putBlockReservationsRaw(requestParameters: PutBlockReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedBlockReservations>>;
    /**
     * Use this API to make changes to block reservations. <p><strong>OperationId:</strong>putBlockReservations</p>
     * Change Block reservations
     */
    putBlockReservations(requestParameters: PutBlockReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedBlockReservations>;
    /**
     * Use this API to move or shift the dates of a block in OPERA.  <p><strong>OperationId:</strong>putBlockShift</p>
     * Shifts the Block start date
     */
    putBlockShiftRaw(requestParameters: PutBlockShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShiftedBlock>>;
    /**
     * Use this API to move or shift the dates of a block in OPERA.  <p><strong>OperationId:</strong>putBlockShift</p>
     * Shifts the Block start date
     */
    putBlockShift(requestParameters: PutBlockShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShiftedBlock>;
    /**
     * Use this to change the status of a block in Opera.  To know a hotels Block status codes, use the List Of Values API - BlockStatuses.  Also note, you can only change the status in a particular order, for example INQ to DEF, but not DEF to INQ. <p><strong>OperationId:</strong>putBlockStatus</p>
     * Change the Status of a Block
     */
    putBlockStatusRaw(requestParameters: PutBlockStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedBlockStatus>>;
    /**
     * Use this to change the status of a block in Opera.  To know a hotels Block status codes, use the List Of Values API - BlockStatuses.  Also note, you can only change the status in a particular order, for example INQ to DEF, but not DEF to INQ. <p><strong>OperationId:</strong>putBlockStatus</p>
     * Change the Status of a Block
     */
    putBlockStatus(requestParameters: PutBlockStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedBlockStatus>;
    /**
     * Use this to change the status of a block in Opera.  To know a hotels Block status codes, use the List Of Values API - BlockStatuses.  Also note, you can only change the status in a particular order, for example INQ to DEF, but not DEF to INQ. <p><strong>OperationId:</strong>putBlockStatusByExtId</p>
     * Change the Status of a Block
     */
    putBlockStatusByExtIdRaw(requestParameters: PutBlockStatusByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedBlockStatus>>;
    /**
     * Use this to change the status of a block in Opera.  To know a hotels Block status codes, use the List Of Values API - BlockStatuses.  Also note, you can only change the status in a particular order, for example INQ to DEF, but not DEF to INQ. <p><strong>OperationId:</strong>putBlockStatusByExtId</p>
     * Change the Status of a Block
     */
    putBlockStatusByExtId(requestParameters: PutBlockStatusByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedBlockStatus>;
    /**
     * Use this API to transition booking status in allotment header to an Open for Pickup Status, which ready to receive reservation bookings. <p><strong>OperationId:</strong>putBlockStatusToOpen</p>
     * Change Block status to Open
     */
    putBlockStatusToOpenRaw(requestParameters: PutBlockStatusToOpenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to transition booking status in allotment header to an Open for Pickup Status, which ready to receive reservation bookings. <p><strong>OperationId:</strong>putBlockStatusToOpen</p>
     * Change Block status to Open
     */
    putBlockStatusToOpen(requestParameters: PutBlockStatusToOpenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API changes block wash schedules Wash Date, Room Type, Occupancy detail, Sell limit and Wash by percent value. <p><strong>OperationId:</strong>putBlockWashSchedules</p>
     * Change Block Wash Schedules
     */
    putBlockWashSchedulesRaw(requestParameters: PutBlockWashSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API changes block wash schedules Wash Date, Room Type, Occupancy detail, Sell limit and Wash by percent value. <p><strong>OperationId:</strong>putBlockWashSchedules</p>
     * Change Block Wash Schedules
     */
    putBlockWashSchedules(requestParameters: PutBlockWashSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to recalculate catering revenue for the business block. <p><strong>OperationId:</strong>putCateringRevenue</p>
     * Recalculate Catering Revenue
     */
    putCateringRevenueRaw(requestParameters: PutCateringRevenueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to recalculate catering revenue for the business block. <p><strong>OperationId:</strong>putCateringRevenue</p>
     * Recalculate Catering Revenue
     */
    putCateringRevenue(requestParameters: PutCateringRevenueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to update catering status. <p><strong>OperationId:</strong>putCateringStatus</p>
     * Change Catering Status
     */
    putCateringStatusRaw(requestParameters: PutCateringStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedCateringStatus>>;
    /**
     * Use this API to update catering status. <p><strong>OperationId:</strong>putCateringStatus</p>
     * Change Catering Status
     */
    putCateringStatus(requestParameters: PutCateringStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedCateringStatus>;
    /**
     * This API clears all block restrictions for a given date. <p><strong>OperationId:</strong>putClearAllRestrictions</p>
     * Clear-All Block Restrictions
     */
    putClearAllRestrictionsRaw(requestParameters: PutClearAllRestrictionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API clears all block restrictions for a given date. <p><strong>OperationId:</strong>putClearAllRestrictions</p>
     * Clear-All Block Restrictions
     */
    putClearAllRestrictions(requestParameters: PutClearAllRestrictionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to set the contract defaults. <p><strong>OperationId:</strong>putContractDefaults</p>
     * Set Contract Defaults
     * @deprecated
     */
    putContractDefaultsRaw(requestParameters: PutContractDefaultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to set the contract defaults. <p><strong>OperationId:</strong>putContractDefaults</p>
     * Set Contract Defaults
     * @deprecated
     */
    putContractDefaults(requestParameters: PutContractDefaultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to borrow inventory from the block or house when you encounter an insufficient number of rooms for block a reservation. <p><strong>OperationId:</strong>putInventory</p>
     * Borrow Inventory
     * @deprecated
     */
    putInventoryRaw(requestParameters: PutInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to borrow inventory from the block or house when you encounter an insufficient number of rooms for block a reservation. <p><strong>OperationId:</strong>putInventory</p>
     * Borrow Inventory
     * @deprecated
     */
    putInventory(requestParameters: PutInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API converts a regular block to a master block. The regular block is converted to a sub block with its room grid and events (if any on the original) and a master block is created with the same information as in the original block, except room grid and events. <p><strong>OperationId:</strong>putRegularToMasterBlock</p>
     * Use this API to convert a regular block to a master block
     */
    putRegularToMasterBlockRaw(requestParameters: PutRegularToMasterBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API converts a regular block to a master block. The regular block is converted to a sub block with its room grid and events (if any on the original) and a master block is created with the same information as in the original block, except room grid and events. <p><strong>OperationId:</strong>putRegularToMasterBlock</p>
     * Use this API to convert a regular block to a master block
     */
    putRegularToMasterBlock(requestParameters: PutRegularToMasterBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to return the previously borrowed inventory on the block back to the original source from which it was borrowed. The original source can be a room type or house inventory, as indicated in the request. <p><strong>OperationId:</strong>putReleasedInventory</p>
     * Return Borrowed Inventory
     * @deprecated
     */
    putReleasedInventoryRaw(requestParameters: PutReleasedInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to return the previously borrowed inventory on the block back to the original source from which it was borrowed. The original source can be a room type or house inventory, as indicated in the request. <p><strong>OperationId:</strong>putReleasedInventory</p>
     * Return Borrowed Inventory
     * @deprecated
     */
    putReleasedInventory(requestParameters: PutReleasedInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * Use this API to set room type order for a block. <p><strong>OperationId:</strong>putRoomTypeOrder</p>
     * Set room type order for a Block
     */
    putRoomTypeOrderRaw(requestParameters: PutRoomTypeOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * Use this API to set room type order for a block. <p><strong>OperationId:</strong>putRoomTypeOrder</p>
     * Set room type order for a Block
     */
    putRoomTypeOrder(requestParameters: PutRoomTypeOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API converts a sub block to a regular block. If this is the only sub block for its master block, then the master block becomes a regular block as well.<p><strong>OperationId:</strong>putSubBlockToRegular</p>
     * Use this API to convert a sub block to a regular block
     */
    putSubBlockToRegularRaw(requestParameters: PutSubBlockToRegularRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API converts a sub block to a regular block. If this is the only sub block for its master block, then the master block becomes a regular block as well.<p><strong>OperationId:</strong>putSubBlockToRegular</p>
     * Use this API to convert a sub block to a regular block
     */
    putSubBlockToRegular(requestParameters: PutSubBlockToRegularRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
    /**
     * This API validates the block code for the following if applicable - Unique block code/ Start of inventory week/ Block code template. <p><strong>OperationId:</strong>putValidateBlockCode</p>
     * Validate Block Code
     */
    putValidateBlockCodeRaw(requestParameters: PutValidateBlockCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>>;
    /**
     * This API validates the block code for the following if applicable - Unique block code/ Start of inventory week/ Block code template. <p><strong>OperationId:</strong>putValidateBlockCode</p>
     * Validate Block Code
     */
    putValidateBlockCode(requestParameters: PutValidateBlockCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status>;
}
/**
 * @export
 */
export declare const BlockChangesByDateTimeBlockStatusEnum: {
    readonly Inquiry: "INQUIRY";
    readonly Nondeduct: "NONDEDUCT";
    readonly Deduct: "DEDUCT";
    readonly Actual: "ACTUAL";
    readonly Cancel: "CANCEL";
};
export type BlockChangesByDateTimeBlockStatusEnum = typeof BlockChangesByDateTimeBlockStatusEnum[keyof typeof BlockChangesByDateTimeBlockStatusEnum];
/**
 * @export
 */
export declare const DeleteBlockRestrictionCodeEnum: {
    readonly Closed: "Closed";
    readonly ClosedForArrival: "ClosedForArrival";
    readonly ClosedForDeparture: "ClosedForDeparture";
    readonly MinimumStayThrough: "MinimumStayThrough";
    readonly MaximumStayThrough: "MaximumStayThrough";
    readonly MinimumLengthOfStay: "MinimumLengthOfStay";
    readonly MaximumLengthOfStay: "MaximumLengthOfStay";
    readonly LosNotAvailable: "LOSNotAvailable";
    readonly MinimumAdvanceBooking: "MinimumAdvanceBooking";
    readonly MaximumAdvanceBooking: "MaximumAdvanceBooking";
    readonly Open: "Open";
    readonly OpenForArrival: "OpenForArrival";
    readonly OpenForDeparture: "OpenForDeparture";
};
export type DeleteBlockRestrictionCodeEnum = typeof DeleteBlockRestrictionCodeEnum[keyof typeof DeleteBlockRestrictionCodeEnum];
/**
 * @export
 */
export declare const GetBlockFetchInstructionsEnum: {
    readonly AccessExclusions: "AccessExclusions";
    readonly Aliases: "Aliases";
    readonly AlternateDates: "AlternateDates";
    readonly Attachments: "Attachments";
    readonly Block: "Block";
    readonly BlockNextStatuses: "BlockNextStatuses";
    readonly BlockStatusHistory: "BlockStatusHistory";
    readonly CatNextStatuses: "CatNextStatuses";
    readonly CatStatusHistory: "CatStatusHistory";
    readonly CentralSalesLeads: "CentralSalesLeads";
    readonly Comments: "Comments";
    readonly DateProtect: "DateProtect";
    readonly ExternalReferences: "ExternalReferences";
    readonly GenericRateGrid: "GenericRateGrid";
    readonly Header: "Header";
    readonly Indicators: "Indicators";
    readonly InventoryItems: "InventoryItems";
    readonly Owners: "Owners";
    readonly Packages: "Packages";
    readonly Policies: "Policies";
    readonly PrimaryOwners: "PrimaryOwners";
    readonly PrimaryProfiles: "PrimaryProfiles";
    readonly PrimaryRates: "PrimaryRates";
    readonly Profiles: "Profiles";
    readonly RateGrid: "RateGrid";
    readonly RateProgram: "RateProgram";
    readonly Rates: "Rates";
    readonly Restrictions: "Restrictions";
    readonly SellMessages: "SellMessages";
    readonly Statistics: "Statistics";
    readonly SummaryStatistics: "SummaryStatistics";
    readonly Traces: "Traces";
    readonly WashSchedules: "WashSchedules";
};
export type GetBlockFetchInstructionsEnum = typeof GetBlockFetchInstructionsEnum[keyof typeof GetBlockFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetBlockRoomAllocationCriteriaEnum: {
    readonly Initial: "Initial";
    readonly Actual: "Actual";
    readonly Rates: "Rates";
    readonly Pickup: "Pickup";
    readonly Contract: "Contract";
    readonly Available: "Available";
    readonly Pickupperc: "Pickupperc";
    readonly Changes: "Changes";
    readonly Released: "Released";
    readonly Houseavailability: "Houseavailability";
    readonly SellLimit: "SellLimit";
    readonly AvailableSellLimit: "AvailableSellLimit";
    readonly MasterAllocInitial: "MasterAllocInitial";
    readonly Allocated: "Allocated";
    readonly SubAllocResv: "SubAllocResv";
    readonly CutoffDate: "CutoffDate";
    readonly ForecastRooms: "ForecastRooms";
    readonly ForecastRates: "ForecastRates";
};
export type GetBlockRoomAllocationCriteriaEnum = typeof GetBlockRoomAllocationCriteriaEnum[keyof typeof GetBlockRoomAllocationCriteriaEnum];
/**
 * @export
 */
export declare const GetBlockActivityLogModuleEnum: {
    readonly Reservation: "Reservation";
    readonly Contract: "Contract";
    readonly Allotment: "Allotment";
    readonly Outlookview: "Outlookview";
    readonly Profile: "Profile";
    readonly Accountreceivables: "Accountreceivables";
    readonly GdsConvRateCodes: "GdsConvRateCodes";
    readonly RateCode: "RateCode";
    readonly Billing: "Billing";
    readonly Activity: "Activity";
};
export type GetBlockActivityLogModuleEnum = typeof GetBlockActivityLogModuleEnum[keyof typeof GetBlockActivityLogModuleEnum];
/**
 * @export
 */
export declare const GetBlockAvailabilityFetchAllocatedRoomTypeEnum: {
    readonly Allocated: "Allocated";
    readonly Available: "Available";
    readonly GenericAllocated: "GenericAllocated";
    readonly GenericAvailable: "GenericAvailable";
};
export type GetBlockAvailabilityFetchAllocatedRoomTypeEnum = typeof GetBlockAvailabilityFetchAllocatedRoomTypeEnum[keyof typeof GetBlockAvailabilityFetchAllocatedRoomTypeEnum];
/**
 * @export
 */
export declare const GetBlockByExtIdFetchInstructionsEnum: {
    readonly AccessExclusions: "AccessExclusions";
    readonly Aliases: "Aliases";
    readonly AlternateDates: "AlternateDates";
    readonly Attachments: "Attachments";
    readonly Block: "Block";
    readonly BlockNextStatuses: "BlockNextStatuses";
    readonly BlockStatusHistory: "BlockStatusHistory";
    readonly CatNextStatuses: "CatNextStatuses";
    readonly CatStatusHistory: "CatStatusHistory";
    readonly CentralSalesLeads: "CentralSalesLeads";
    readonly Comments: "Comments";
    readonly DateProtect: "DateProtect";
    readonly ExternalReferences: "ExternalReferences";
    readonly GenericRateGrid: "GenericRateGrid";
    readonly Header: "Header";
    readonly Indicators: "Indicators";
    readonly InventoryItems: "InventoryItems";
    readonly Owners: "Owners";
    readonly Packages: "Packages";
    readonly Policies: "Policies";
    readonly PrimaryOwners: "PrimaryOwners";
    readonly PrimaryProfiles: "PrimaryProfiles";
    readonly PrimaryRates: "PrimaryRates";
    readonly Profiles: "Profiles";
    readonly RateGrid: "RateGrid";
    readonly RateProgram: "RateProgram";
    readonly Rates: "Rates";
    readonly Restrictions: "Restrictions";
    readonly SellMessages: "SellMessages";
    readonly Statistics: "Statistics";
    readonly SummaryStatistics: "SummaryStatistics";
    readonly Traces: "Traces";
    readonly WashSchedules: "WashSchedules";
};
export type GetBlockByExtIdFetchInstructionsEnum = typeof GetBlockByExtIdFetchInstructionsEnum[keyof typeof GetBlockByExtIdFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetBlockByExtIdRoomAllocationCriteriaEnum: {
    readonly Initial: "Initial";
    readonly Actual: "Actual";
    readonly Rates: "Rates";
    readonly Pickup: "Pickup";
    readonly Contract: "Contract";
    readonly Available: "Available";
    readonly Pickupperc: "Pickupperc";
    readonly Changes: "Changes";
    readonly Released: "Released";
    readonly Houseavailability: "Houseavailability";
    readonly SellLimit: "SellLimit";
    readonly AvailableSellLimit: "AvailableSellLimit";
    readonly MasterAllocInitial: "MasterAllocInitial";
    readonly Allocated: "Allocated";
    readonly SubAllocResv: "SubAllocResv";
    readonly CutoffDate: "CutoffDate";
};
export type GetBlockByExtIdRoomAllocationCriteriaEnum = typeof GetBlockByExtIdRoomAllocationCriteriaEnum[keyof typeof GetBlockByExtIdRoomAllocationCriteriaEnum];
/**
 * @export
 */
export declare const GetBlockReservationsFetchInstructionsEnum: {
    readonly Reservation: "Reservation";
    readonly Comments: "Comments";
    readonly GuestComments: "GuestComments";
    readonly Packages: "Packages";
    readonly InventoryItems: "InventoryItems";
    readonly ReservationPaymentMethods: "ReservationPaymentMethods";
    readonly RoutingInstructions: "RoutingInstructions";
    readonly Preferences: "Preferences";
    readonly Memberships: "Memberships";
    readonly Alerts: "Alerts";
    readonly Traces: "Traces";
    readonly ConfirmationLetters: "ConfirmationLetters";
    readonly CallHistory: "CallHistory";
    readonly FixedCharges: "FixedCharges";
    readonly GuestMessages: "GuestMessages";
    readonly ReservationPolicies: "ReservationPolicies";
    readonly Indicators: "Indicators";
    readonly LinkedReservations: "LinkedReservations";
    readonly RevenuesAndBalances: "RevenuesAndBalances";
    readonly GuestLastStay: "GuestLastStay";
    readonly ECoupons: "ECoupons";
    readonly TrackItItems: "TrackItItems";
    readonly TotalCostOfStay: "TotalCostOfStay";
    readonly ReservationAwards: "ReservationAwards";
    readonly WebRegistrationCards: "WebRegistrationCards";
    readonly ServiceRequests: "ServiceRequests";
    readonly ReservationActivities: "ReservationActivities";
    readonly ScheduledActivities: "ScheduledActivities";
    readonly PrepaidCards: "PrepaidCards";
    readonly Shares: "Shares";
    readonly Attachments: "Attachments";
    readonly Locators: "Locators";
    readonly ProfileAwards: "ProfileAwards";
    readonly TransactionDiversions: "TransactionDiversions";
    readonly Tickets: "Tickets";
    readonly GuestMemberships: "GuestMemberships";
    readonly ECertificates: "ECertificates";
    readonly UpsellInfo: "UpsellInfo";
    readonly RoomAssignedByAi: "RoomAssignedByAI";
    readonly CustomNameValue: "CustomNameValue";
    readonly CustomChargeExemptions: "CustomChargeExemptions";
};
export type GetBlockReservationsFetchInstructionsEnum = typeof GetBlockReservationsFetchInstructionsEnum[keyof typeof GetBlockReservationsFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetBlockRoomRateGridRoomAllocationCriteriaEnum: {
    readonly Initial: "Initial";
    readonly Actual: "Actual";
    readonly Rates: "Rates";
    readonly Pickup: "Pickup";
    readonly Contract: "Contract";
    readonly Available: "Available";
    readonly Pickupperc: "Pickupperc";
    readonly Changes: "Changes";
    readonly Released: "Released";
    readonly Houseavailability: "Houseavailability";
    readonly SellLimit: "SellLimit";
    readonly AvailableSellLimit: "AvailableSellLimit";
    readonly MasterAllocInitial: "MasterAllocInitial";
    readonly Allocated: "Allocated";
    readonly SubAllocResv: "SubAllocResv";
    readonly CutoffDate: "CutoffDate";
    readonly ForecastRooms: "ForecastRooms";
    readonly ForecastRates: "ForecastRates";
};
export type GetBlockRoomRateGridRoomAllocationCriteriaEnum = typeof GetBlockRoomRateGridRoomAllocationCriteriaEnum[keyof typeof GetBlockRoomRateGridRoomAllocationCriteriaEnum];
/**
 * @export
 */
export declare const GetBlockStatisticsStatisticsInstructionsEnum: {
    readonly Contract: "Contract";
    readonly Initial: "Initial";
    readonly Actual: "Actual";
    readonly Pickup: "Pickup";
    readonly Available: "Available";
    readonly Change: "Change";
    readonly Rates: "Rates";
    readonly Totalavailable: "Totalavailable";
    readonly Tentativereservations: "Tentativereservations";
    readonly Pickuppersons: "Pickuppersons";
    readonly Roomrevenue: "Roomrevenue";
    readonly Totalrevenue: "Totalrevenue";
    readonly Avgroomrate: "Avgroomrate";
};
export type GetBlockStatisticsStatisticsInstructionsEnum = typeof GetBlockStatisticsStatisticsInstructionsEnum[keyof typeof GetBlockStatisticsStatisticsInstructionsEnum];
/**
 * @export
 */
export declare const GetBlocksCategoryEnum: {
    readonly Group: "Group";
    readonly Source: "Source";
    readonly Agent: "Agent";
    readonly Contact: "Contact";
    readonly Company: "Company";
    readonly Account: "Account";
};
export type GetBlocksCategoryEnum = typeof GetBlocksCategoryEnum[keyof typeof GetBlocksCategoryEnum];
/**
 * @export
 */
export declare const GetBlocksOrderTypeEnum: {
    readonly Asc: "Asc";
    readonly Desc: "Desc";
};
export type GetBlocksOrderTypeEnum = typeof GetBlocksOrderTypeEnum[keyof typeof GetBlocksOrderTypeEnum];
/**
 * @export
 */
export declare const GetBlocksFetchInstructionsEnum: {
    readonly AccessExclusions: "AccessExclusions";
    readonly Aliases: "Aliases";
    readonly AlternateDates: "AlternateDates";
    readonly Attachments: "Attachments";
    readonly Block: "Block";
    readonly BlockNextStatuses: "BlockNextStatuses";
    readonly BlockStatusHistory: "BlockStatusHistory";
    readonly CatNextStatuses: "CatNextStatuses";
    readonly CatStatusHistory: "CatStatusHistory";
    readonly CentralSalesLeads: "CentralSalesLeads";
    readonly Comments: "Comments";
    readonly DateProtect: "DateProtect";
    readonly ExternalReferences: "ExternalReferences";
    readonly GenericRateGrid: "GenericRateGrid";
    readonly Header: "Header";
    readonly Indicators: "Indicators";
    readonly InventoryItems: "InventoryItems";
    readonly Owners: "Owners";
    readonly Packages: "Packages";
    readonly Policies: "Policies";
    readonly PrimaryOwners: "PrimaryOwners";
    readonly PrimaryProfiles: "PrimaryProfiles";
    readonly PrimaryRates: "PrimaryRates";
    readonly Profiles: "Profiles";
    readonly RateGrid: "RateGrid";
    readonly RateProgram: "RateProgram";
    readonly Rates: "Rates";
    readonly Restrictions: "Restrictions";
    readonly SellMessages: "SellMessages";
    readonly Statistics: "Statistics";
    readonly SummaryStatistics: "SummaryStatistics";
    readonly Traces: "Traces";
    readonly WashSchedules: "WashSchedules";
    readonly IncludeSubBlocks: "IncludeSubBlocks";
};
export type GetBlocksFetchInstructionsEnum = typeof GetBlocksFetchInstructionsEnum[keyof typeof GetBlocksFetchInstructionsEnum];
/**
 * @export
 */
export declare const GetBlocksRoomAllocationCriteriaEnum: {
    readonly Initial: "Initial";
    readonly Actual: "Actual";
    readonly Rates: "Rates";
    readonly Pickup: "Pickup";
    readonly Contract: "Contract";
    readonly Available: "Available";
    readonly Pickupperc: "Pickupperc";
    readonly Changes: "Changes";
    readonly Released: "Released";
    readonly Houseavailability: "Houseavailability";
    readonly SellLimit: "SellLimit";
    readonly AvailableSellLimit: "AvailableSellLimit";
    readonly MasterAllocInitial: "MasterAllocInitial";
    readonly Allocated: "Allocated";
    readonly SubAllocResv: "SubAllocResv";
    readonly CutoffDate: "CutoffDate";
};
export type GetBlocksRoomAllocationCriteriaEnum = typeof GetBlocksRoomAllocationCriteriaEnum[keyof typeof GetBlocksRoomAllocationCriteriaEnum];
/**
 * @export
 */
export declare const GetBlocksAccessRestrictionEnum: {
    readonly Availability: "Availability";
    readonly Create: "Create";
    readonly Modify: "Modify";
    readonly Cancel: "Cancel";
};
export type GetBlocksAccessRestrictionEnum = typeof GetBlocksAccessRestrictionEnum[keyof typeof GetBlocksAccessRestrictionEnum];
