/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block API
 * APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 22.3
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Block,
  BlockAvailability,
  BlockChanged,
  BlockDailyStatistics,
  BlockPMReservations,
  BlockRevenueChanges,
  BlockStatistics,
  BlockSummaries,
  ExceptionDetailType,
  PostBlockRequest,
  PutBlockAllocationRequest,
  PutBlockRequest,
  Status,
} from '../models';
import {
    BlockFromJSON,
    BlockToJSON,
    BlockAvailabilityFromJSON,
    BlockAvailabilityToJSON,
    BlockChangedFromJSON,
    BlockChangedToJSON,
    BlockDailyStatisticsFromJSON,
    BlockDailyStatisticsToJSON,
    BlockPMReservationsFromJSON,
    BlockPMReservationsToJSON,
    BlockRevenueChangesFromJSON,
    BlockRevenueChangesToJSON,
    BlockStatisticsFromJSON,
    BlockStatisticsToJSON,
    BlockSummariesFromJSON,
    BlockSummariesToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    PostBlockRequestFromJSON,
    PostBlockRequestToJSON,
    PutBlockAllocationRequestFromJSON,
    PutBlockAllocationRequestToJSON,
    PutBlockRequestFromJSON,
    PutBlockRequestToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models';

export interface GetBlockRequest {
    blockId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    markAsRecentlyAccessed?: boolean;
    fetchInstructions?: Set<GetBlockFetchInstructionsEnum>;
    fetchAllocatedRoomTypes?: boolean;
    startDate?: Date;
    numberOfDays?: number;
    roomAllocationCriteria?: Set<GetBlockRoomAllocationCriteriaEnum>;
    roomTypes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockAvailabilityRequest {
    blockId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    overrideRateCode?: boolean;
    arrivalDate?: Date;
    nights?: number;
    adults?: number;
    children?: number;
    rooms?: number;
    ratePlanCode?: string;
    existingReservationId?: string;
    existingReservationIdType?: string;
    roomType?: Array<string>;
    fetchAllocatedRoomType?: Set<GetBlockAvailabilityFetchAllocatedRoomTypeEnum>;
    roomTypeCount?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockDailyStatisticsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    genericRoomType?: boolean;
    limit?: number;
    offset?: number;
    hotelId?: string;
    end?: Date;
    start?: Date;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockPMReservationsRequest {
    blockId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    postingmaster?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockRevenueChangesRequest {
    blockId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelId?: string;
    status?: Array<string>;
    changeEndDate?: Date;
    changeStartDate?: Date;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockStatisticsRequest {
    blockId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    startDate?: Date;
    numberOfDays?: number;
    statisticsInstructions?: Set<GetBlockStatisticsStatisticsInstructionsEnum>;
    roomTypeHotelId?: Array<string>;
    invBlockCode?: Array<string>;
    promotionCode?: Array<string>;
    roomCategory?: Array<string>;
    roomClass?: Array<string>;
    roomQualifierCode?: Array<string>;
    roomQualifierMatchIndicator?: Array<string>;
    roomType?: Array<string>;
    roomViewCode?: Array<string>;
    roomFeatureCode?: Array<string>;
    defaultOccupancy?: number;
    maximumOccupancy?: number;
    noOfPhysicalRooms?: number;
    bookingChannelCode?: Array<string>;
    bookingChannelMappingCode?: Array<string>;
    bookingChannelMappingName?: Array<string>;
    bedTypeCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlocksRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    markAsRecentlyAccessed?: boolean;
    limit?: number;
    offset?: number;
    multipleHotelsSearchHotelIds?: Array<string>;
    superSearch?: string;
    blockIdList?: Array<string>;
    blockIdType?: Array<string>;
    externalReferenceIds?: Array<string>;
    externalSystemCodes?: Array<string>;
    blockCode?: string;
    blockName?: string;
    blockOwner?: Array<string>;
    blockStatus?: Array<string>;
    cateringStatus?: Array<string>;
    createdByUser?: string;
    blockStartEndDate?: Date;
    blockStartStartDate?: Date;
    blockEndEndDate?: Date;
    blockEndStartDate?: Date;
    reservationArrival?: Date;
    reservationDeparture?: Date;
    includeShoulderDates?: boolean;
    stayDate?: Date;
    blockCreatedOnEndDate?: Date;
    blockCreatedOnStartDate?: Date;
    decisionEndDate?: Date;
    decisionStartDate?: Date;
    cutOffEndDate?: Date;
    cutOffStartDate?: Date;
    category?: Set<GetBlocksCategoryEnum>;
    name?: Array<string>;
    attachedProfileId?: string;
    attachedProfileIdType?: string;
    leads?: boolean;
    tourSeries?: boolean;
    onlyPickupBlocks?: boolean;
    onlyOpportunities?: boolean;
    ratePlanCode?: Array<string>;
    tourCode?: string;
    attributeName?: Array<string>;
    orderType?: Set<GetBlocksOrderTypeEnum>;
    fetchInstructions?: Set<GetBlocksFetchInstructionsEnum>;
    fetchAllocatedRoomTypes?: boolean;
    additionalCriteriaStartDate?: Date;
    numberOfDays?: number;
    adults?: number;
    children?: number;
    childAge?: Array<number>;
    bucket1Count?: number;
    bucket2Count?: number;
    bucket3Count?: number;
    bucket4Count?: number;
    bucket5Count?: number;
    existingReservationId?: string;
    existingReservationIdType?: string;
    roomAllocationCriteria?: Set<GetBlocksRoomAllocationCriteriaEnum>;
    roomType?: Array<string>;
    additionalCriteriaRatePlanCode?: string;
    currencyCode?: string;
    customCharUDFsAltname?: Array<string>;
    customCharUDFsName?: Array<string>;
    customCharUDFsValue?: Array<string>;
    customNumericUDFsAltname?: Array<string>;
    customNumericUDFsName?: Array<string>;
    customNumericUDFsValue?: Array<number>;
    customDateUDFsAltname?: Array<string>;
    customDateUDFsName?: Array<string>;
    customDateUDFsValue?: Array<Date>;
    accessRestriction?: Set<GetBlocksAccessRestrictionEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBlockOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    block?: PostBlockRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutBlockOperationRequest {
    blockId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockToBeChanged?: PutBlockRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutBlockAllocationOperationRequest {
    blockId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    allocation?: PutBlockAllocationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class BlockApi extends runtime.BaseAPI {

    /**
     * Use this API to retrieve a specific block.  You will need to know the blockID in the request; if you don\'t know it, please go ahead and use getBlocks API first.  The response will include detailed information about the block. <p><strong>OperationId:</strong>getBlock</p>
     * Get a Block By ID
     */
    async getBlockRaw(requestParameters: GetBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Block>> {
        const queryParameters: any = {};

        if (requestParameters.markAsRecentlyAccessed !== undefined) {
            queryParameters['markAsRecentlyAccessed'] = requestParameters.markAsRecentlyAccessed;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.fetchAllocatedRoomTypes !== undefined) {
            queryParameters['fetchAllocatedRoomTypes'] = requestParameters.fetchAllocatedRoomTypes;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.numberOfDays !== undefined) {
            queryParameters['numberOfDays'] = requestParameters.numberOfDays;
        }

        if (requestParameters.roomAllocationCriteria) {
            queryParameters['roomAllocationCriteria'] = requestParameters.roomAllocationCriteria;
        }

        if (requestParameters.roomTypes) {
            queryParameters['roomTypes'] = requestParameters.roomTypes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/blocks/{blockId}`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve a specific block.  You will need to know the blockID in the request; if you don\'t know it, please go ahead and use getBlocks API first.  The response will include detailed information about the block. <p><strong>OperationId:</strong>getBlock</p>
     * Get a Block By ID
     */
    async getBlock(requestParameters: GetBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Block> {
        const response = await this.getBlockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to search for availability on an OPERA block.  You will need to know the block ID.  Once you know what rooms and rates are available you can proceed to post a block reservation. <p><strong>OperationId:</strong>getBlockAvailability</p>
     * Get Block AvailaBility
     */
    async getBlockAvailabilityRaw(requestParameters: GetBlockAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockAvailability>> {
        const queryParameters: any = {};

        if (requestParameters.overrideRateCode !== undefined) {
            queryParameters['overrideRateCode'] = requestParameters.overrideRateCode;
        }

        if (requestParameters.arrivalDate !== undefined) {
            queryParameters['arrivalDate'] = (requestParameters.arrivalDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.nights !== undefined) {
            queryParameters['nights'] = requestParameters.nights;
        }

        if (requestParameters.adults !== undefined) {
            queryParameters['adults'] = requestParameters.adults;
        }

        if (requestParameters.children !== undefined) {
            queryParameters['children'] = requestParameters.children;
        }

        if (requestParameters.rooms !== undefined) {
            queryParameters['rooms'] = requestParameters.rooms;
        }

        if (requestParameters.ratePlanCode !== undefined) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.existingReservationId !== undefined) {
            queryParameters['existingReservationId'] = requestParameters.existingReservationId;
        }

        if (requestParameters.existingReservationIdType !== undefined) {
            queryParameters['existingReservationIdType'] = requestParameters.existingReservationIdType;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.fetchAllocatedRoomType) {
            queryParameters['fetchAllocatedRoomType'] = requestParameters.fetchAllocatedRoomType;
        }

        if (requestParameters.roomTypeCount !== undefined) {
            queryParameters['roomTypeCount'] = requestParameters.roomTypeCount;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/blocks/{blockId}/availability`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockAvailabilityFromJSON(jsonValue));
    }

    /**
     * Use this API to search for availability on an OPERA block.  You will need to know the block ID.  Once you know what rooms and rates are available you can proceed to post a block reservation. <p><strong>OperationId:</strong>getBlockAvailability</p>
     * Get Block AvailaBility
     */
    async getBlockAvailability(requestParameters: GetBlockAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockAvailability> {
        const response = await this.getBlockAvailabilityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve block daily statistics for the given date range and hotel ID. It returns allocated, picked up, and available number of room nights per block, per day, per room type.<p><strong>OperationId:</strong>getBlockDailyStatistics</p>
     * Get Block Daily Statistics
     */
    async getBlockDailyStatisticsRaw(requestParameters: GetBlockDailyStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockDailyStatistics>> {
        const queryParameters: any = {};

        if (requestParameters.genericRoomType !== undefined) {
            queryParameters['genericRoomType'] = requestParameters.genericRoomType;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blocks/dailyStatistics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockDailyStatisticsFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve block daily statistics for the given date range and hotel ID. It returns allocated, picked up, and available number of room nights per block, per day, per room type.<p><strong>OperationId:</strong>getBlockDailyStatistics</p>
     * Get Block Daily Statistics
     */
    async getBlockDailyStatistics(requestParameters: GetBlockDailyStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockDailyStatistics> {
        const response = await this.getBlockDailyStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve PM (Posting Master) reservations for a block. <p><strong>OperationId:</strong>getBlockPMReservations</p>
     * Get Posting Master Reservations for a Block
     */
    async getBlockPMReservationsRaw(requestParameters: GetBlockPMReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockPMReservations>> {
        const queryParameters: any = {};

        if (requestParameters.postingmaster !== undefined) {
            queryParameters['postingmaster'] = requestParameters.postingmaster;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/blocks/{blockId}/postingMaster/reservations`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockPMReservationsFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve PM (Posting Master) reservations for a block. <p><strong>OperationId:</strong>getBlockPMReservations</p>
     * Get Posting Master Reservations for a Block
     */
    async getBlockPMReservations(requestParameters: GetBlockPMReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockPMReservations> {
        const response = await this.getBlockPMReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will fetch revenue changes for a specific block recorded in the revenue change log for a specified date range. Please note that the revenue changes are delta changes only and single records do not represent a total summary of the block revenue per date. <p><strong>OperationId:</strong>getBlockRevenueChanges</p>
     * Fetch Block Revenue Changes
     */
    async getBlockRevenueChangesRaw(requestParameters: GetBlockRevenueChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockRevenueChanges>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.changeEndDate !== undefined) {
            queryParameters['changeEndDate'] = (requestParameters.changeEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.changeStartDate !== undefined) {
            queryParameters['changeStartDate'] = (requestParameters.changeStartDate as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blocks/{blockId}/revenueActivityLog`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockRevenueChangesFromJSON(jsonValue));
    }

    /**
     * This API will fetch revenue changes for a specific block recorded in the revenue change log for a specified date range. Please note that the revenue changes are delta changes only and single records do not represent a total summary of the block revenue per date. <p><strong>OperationId:</strong>getBlockRevenueChanges</p>
     * Fetch Block Revenue Changes
     */
    async getBlockRevenueChanges(requestParameters: GetBlockRevenueChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockRevenueChanges> {
        const response = await this.getBlockRevenueChangesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to API retrieve detailed block statistics <p><strong>OperationId:</strong>getBlockStatistics</p>
     * Get Block Statistics
     */
    async getBlockStatisticsRaw(requestParameters: GetBlockStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockStatistics>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.numberOfDays !== undefined) {
            queryParameters['numberOfDays'] = requestParameters.numberOfDays;
        }

        if (requestParameters.statisticsInstructions) {
            queryParameters['statisticsInstructions'] = requestParameters.statisticsInstructions;
        }

        if (requestParameters.roomTypeHotelId) {
            queryParameters['roomTypeHotelId'] = requestParameters.roomTypeHotelId;
        }

        if (requestParameters.invBlockCode) {
            queryParameters['invBlockCode'] = requestParameters.invBlockCode;
        }

        if (requestParameters.promotionCode) {
            queryParameters['promotionCode'] = requestParameters.promotionCode;
        }

        if (requestParameters.roomCategory) {
            queryParameters['roomCategory'] = requestParameters.roomCategory;
        }

        if (requestParameters.roomClass) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }

        if (requestParameters.roomQualifierCode) {
            queryParameters['roomQualifierCode'] = requestParameters.roomQualifierCode;
        }

        if (requestParameters.roomQualifierMatchIndicator) {
            queryParameters['roomQualifierMatchIndicator'] = requestParameters.roomQualifierMatchIndicator;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.roomViewCode) {
            queryParameters['roomViewCode'] = requestParameters.roomViewCode;
        }

        if (requestParameters.roomFeatureCode) {
            queryParameters['roomFeatureCode'] = requestParameters.roomFeatureCode;
        }

        if (requestParameters.defaultOccupancy !== undefined) {
            queryParameters['defaultOccupancy'] = requestParameters.defaultOccupancy;
        }

        if (requestParameters.maximumOccupancy !== undefined) {
            queryParameters['maximumOccupancy'] = requestParameters.maximumOccupancy;
        }

        if (requestParameters.noOfPhysicalRooms !== undefined) {
            queryParameters['noOfPhysicalRooms'] = requestParameters.noOfPhysicalRooms;
        }

        if (requestParameters.bookingChannelCode) {
            queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
        }

        if (requestParameters.bookingChannelMappingCode) {
            queryParameters['bookingChannelMappingCode'] = requestParameters.bookingChannelMappingCode;
        }

        if (requestParameters.bookingChannelMappingName) {
            queryParameters['bookingChannelMappingName'] = requestParameters.bookingChannelMappingName;
        }

        if (requestParameters.bedTypeCode) {
            queryParameters['bedTypeCode'] = requestParameters.bedTypeCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blocks/{blockId}/statistics`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockStatisticsFromJSON(jsonValue));
    }

    /**
     * Use this API to API retrieve detailed block statistics <p><strong>OperationId:</strong>getBlockStatistics</p>
     * Get Block Statistics
     */
    async getBlockStatistics(requestParameters: GetBlockStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockStatistics> {
        const response = await this.getBlockStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve blocks.  You can use the query parameters to narrow down your results. <p><strong>OperationId:</strong>getBlocks</p>
     * Get Blocks
     */
    async getBlocksRaw(requestParameters: GetBlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockSummaries>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.markAsRecentlyAccessed !== undefined) {
            queryParameters['markAsRecentlyAccessed'] = requestParameters.markAsRecentlyAccessed;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.multipleHotelsSearchHotelIds) {
            queryParameters['multipleHotelsSearchHotelIds'] = requestParameters.multipleHotelsSearchHotelIds;
        }

        if (requestParameters.superSearch !== undefined) {
            queryParameters['superSearch'] = requestParameters.superSearch;
        }

        if (requestParameters.blockIdList) {
            queryParameters['blockIdList'] = requestParameters.blockIdList;
        }

        if (requestParameters.blockIdType) {
            queryParameters['blockIdType'] = requestParameters.blockIdType;
        }

        if (requestParameters.externalReferenceIds) {
            queryParameters['externalReferenceIds'] = requestParameters.externalReferenceIds;
        }

        if (requestParameters.externalSystemCodes) {
            queryParameters['externalSystemCodes'] = requestParameters.externalSystemCodes;
        }

        if (requestParameters.blockCode !== undefined) {
            queryParameters['blockCode'] = requestParameters.blockCode;
        }

        if (requestParameters.blockName !== undefined) {
            queryParameters['blockName'] = requestParameters.blockName;
        }

        if (requestParameters.blockOwner) {
            queryParameters['blockOwner'] = requestParameters.blockOwner;
        }

        if (requestParameters.blockStatus) {
            queryParameters['blockStatus'] = requestParameters.blockStatus;
        }

        if (requestParameters.cateringStatus) {
            queryParameters['cateringStatus'] = requestParameters.cateringStatus;
        }

        if (requestParameters.createdByUser !== undefined) {
            queryParameters['createdByUser'] = requestParameters.createdByUser;
        }

        if (requestParameters.blockStartEndDate !== undefined) {
            queryParameters['blockStartEndDate'] = (requestParameters.blockStartEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.blockStartStartDate !== undefined) {
            queryParameters['blockStartStartDate'] = (requestParameters.blockStartStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.blockEndEndDate !== undefined) {
            queryParameters['blockEndEndDate'] = (requestParameters.blockEndEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.blockEndStartDate !== undefined) {
            queryParameters['blockEndStartDate'] = (requestParameters.blockEndStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.reservationArrival !== undefined) {
            queryParameters['reservationArrival'] = (requestParameters.reservationArrival as any).toISOString().substr(0,10);
        }

        if (requestParameters.reservationDeparture !== undefined) {
            queryParameters['reservationDeparture'] = (requestParameters.reservationDeparture as any).toISOString().substr(0,10);
        }

        if (requestParameters.includeShoulderDates !== undefined) {
            queryParameters['includeShoulderDates'] = requestParameters.includeShoulderDates;
        }

        if (requestParameters.stayDate !== undefined) {
            queryParameters['stayDate'] = (requestParameters.stayDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.blockCreatedOnEndDate !== undefined) {
            queryParameters['blockCreatedOnEndDate'] = (requestParameters.blockCreatedOnEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.blockCreatedOnStartDate !== undefined) {
            queryParameters['blockCreatedOnStartDate'] = (requestParameters.blockCreatedOnStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.decisionEndDate !== undefined) {
            queryParameters['decisionEndDate'] = (requestParameters.decisionEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.decisionStartDate !== undefined) {
            queryParameters['decisionStartDate'] = (requestParameters.decisionStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.cutOffEndDate !== undefined) {
            queryParameters['cutOffEndDate'] = (requestParameters.cutOffEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.cutOffStartDate !== undefined) {
            queryParameters['cutOffStartDate'] = (requestParameters.cutOffStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.category) {
            queryParameters['category'] = requestParameters.category;
        }

        if (requestParameters.name) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.attachedProfileId !== undefined) {
            queryParameters['attachedProfileId'] = requestParameters.attachedProfileId;
        }

        if (requestParameters.attachedProfileIdType !== undefined) {
            queryParameters['attachedProfileIdType'] = requestParameters.attachedProfileIdType;
        }

        if (requestParameters.leads !== undefined) {
            queryParameters['leads'] = requestParameters.leads;
        }

        if (requestParameters.tourSeries !== undefined) {
            queryParameters['tourSeries'] = requestParameters.tourSeries;
        }

        if (requestParameters.onlyPickupBlocks !== undefined) {
            queryParameters['onlyPickupBlocks'] = requestParameters.onlyPickupBlocks;
        }

        if (requestParameters.onlyOpportunities !== undefined) {
            queryParameters['onlyOpportunities'] = requestParameters.onlyOpportunities;
        }

        if (requestParameters.ratePlanCode) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.tourCode !== undefined) {
            queryParameters['tourCode'] = requestParameters.tourCode;
        }

        if (requestParameters.attributeName) {
            queryParameters['attributeName'] = requestParameters.attributeName;
        }

        if (requestParameters.orderType) {
            queryParameters['orderType'] = requestParameters.orderType;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.fetchAllocatedRoomTypes !== undefined) {
            queryParameters['fetchAllocatedRoomTypes'] = requestParameters.fetchAllocatedRoomTypes;
        }

        if (requestParameters.additionalCriteriaStartDate !== undefined) {
            queryParameters['additionalCriteriaStartDate'] = (requestParameters.additionalCriteriaStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.numberOfDays !== undefined) {
            queryParameters['numberOfDays'] = requestParameters.numberOfDays;
        }

        if (requestParameters.adults !== undefined) {
            queryParameters['adults'] = requestParameters.adults;
        }

        if (requestParameters.children !== undefined) {
            queryParameters['children'] = requestParameters.children;
        }

        if (requestParameters.childAge) {
            queryParameters['childAge'] = requestParameters.childAge;
        }

        if (requestParameters.bucket1Count !== undefined) {
            queryParameters['bucket1Count'] = requestParameters.bucket1Count;
        }

        if (requestParameters.bucket2Count !== undefined) {
            queryParameters['bucket2Count'] = requestParameters.bucket2Count;
        }

        if (requestParameters.bucket3Count !== undefined) {
            queryParameters['bucket3Count'] = requestParameters.bucket3Count;
        }

        if (requestParameters.bucket4Count !== undefined) {
            queryParameters['bucket4Count'] = requestParameters.bucket4Count;
        }

        if (requestParameters.bucket5Count !== undefined) {
            queryParameters['bucket5Count'] = requestParameters.bucket5Count;
        }

        if (requestParameters.existingReservationId !== undefined) {
            queryParameters['existingReservationId'] = requestParameters.existingReservationId;
        }

        if (requestParameters.existingReservationIdType !== undefined) {
            queryParameters['existingReservationIdType'] = requestParameters.existingReservationIdType;
        }

        if (requestParameters.roomAllocationCriteria) {
            queryParameters['roomAllocationCriteria'] = requestParameters.roomAllocationCriteria;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.additionalCriteriaRatePlanCode !== undefined) {
            queryParameters['additionalCriteriaRatePlanCode'] = requestParameters.additionalCriteriaRatePlanCode;
        }

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        if (requestParameters.customCharUDFsAltname) {
            queryParameters['customCharUDFsAltname'] = requestParameters.customCharUDFsAltname;
        }

        if (requestParameters.customCharUDFsName) {
            queryParameters['customCharUDFsName'] = requestParameters.customCharUDFsName;
        }

        if (requestParameters.customCharUDFsValue) {
            queryParameters['customCharUDFsValue'] = requestParameters.customCharUDFsValue;
        }

        if (requestParameters.customNumericUDFsAltname) {
            queryParameters['customNumericUDFsAltname'] = requestParameters.customNumericUDFsAltname;
        }

        if (requestParameters.customNumericUDFsName) {
            queryParameters['customNumericUDFsName'] = requestParameters.customNumericUDFsName;
        }

        if (requestParameters.customNumericUDFsValue) {
            queryParameters['customNumericUDFsValue'] = requestParameters.customNumericUDFsValue;
        }

        if (requestParameters.customDateUDFsAltname) {
            queryParameters['customDateUDFsAltname'] = requestParameters.customDateUDFsAltname;
        }

        if (requestParameters.customDateUDFsName) {
            queryParameters['customDateUDFsName'] = requestParameters.customDateUDFsName;
        }

        if (requestParameters.customDateUDFsValue) {
            queryParameters['customDateUDFsValue'] = requestParameters.customDateUDFsValue;
        }

        if (requestParameters.accessRestriction) {
            queryParameters['accessRestriction'] = requestParameters.accessRestriction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blocks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockSummariesFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve blocks.  You can use the query parameters to narrow down your results. <p><strong>OperationId:</strong>getBlocks</p>
     * Get Blocks
     */
    async getBlocks(requestParameters: GetBlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockSummaries> {
        const response = await this.getBlocksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new group block in OPERA Cloud. You must first use the ListOfValues APIs to find block attributes, such as Block Status, Room Types, and so on. Knowing this list of values helps ensure a successful postBlock. <p><strong>OperationId:</strong>postBlock</p>
     * Create a Block
     */
    async postBlockRaw(requestParameters: PostBlockOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/block`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostBlockRequestToJSON(requestParameters.block),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new group block in OPERA Cloud. You must first use the ListOfValues APIs to find block attributes, such as Block Status, Room Types, and so on. Knowing this list of values helps ensure a successful postBlock. <p><strong>OperationId:</strong>postBlock</p>
     * Create a Block
     */
    async postBlock(requestParameters: PostBlockOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postBlockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update an existing group block in OPERA Cloud. This API allows update of block header information, such as description, market segment, source code, rate code, and other details, but does not include updates for room grid or events, which have their own update API calls. <p><strong>OperationId:</strong>putBlock</p>
     * Change a Block
     */
    async putBlockRaw(requestParameters: PutBlockOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockChanged>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/blocks/{blockId}`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutBlockRequestToJSON(requestParameters.blockToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockChangedFromJSON(jsonValue));
    }

    /**
     * Use this API to update an existing group block in OPERA Cloud. This API allows update of block header information, such as description, market segment, source code, rate code, and other details, but does not include updates for room grid or events, which have their own update API calls. <p><strong>OperationId:</strong>putBlock</p>
     * Change a Block
     */
    async putBlock(requestParameters: PutBlockOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockChanged> {
        const response = await this.putBlockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add block room type allocations and rates to a specified Block. <p><strong>OperationId:</strong>putBlockAllocation</p>
     * Set Block Allocation  
     */
    async putBlockAllocationRaw(requestParameters: PutBlockAllocationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/blocks/{blockId}/allocation`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutBlockAllocationRequestToJSON(requestParameters.allocation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add block room type allocations and rates to a specified Block. <p><strong>OperationId:</strong>putBlockAllocation</p>
     * Set Block Allocation  
     */
    async putBlockAllocation(requestParameters: PutBlockAllocationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putBlockAllocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetBlockFetchInstructionsEnum = {
    AccessExclusions: 'AccessExclusions',
    Aliases: 'Aliases',
    AlternateDates: 'AlternateDates',
    Attachments: 'Attachments',
    Block: 'Block',
    BlockNextStatuses: 'BlockNextStatuses',
    BlockStatusHistory: 'BlockStatusHistory',
    CatNextStatuses: 'CatNextStatuses',
    CatStatusHistory: 'CatStatusHistory',
    Comments: 'Comments',
    DateProtect: 'DateProtect',
    ExternalReferences: 'ExternalReferences',
    GenericRateGrid: 'GenericRateGrid',
    Header: 'Header',
    Indicators: 'Indicators',
    InventoryItems: 'InventoryItems',
    Owners: 'Owners',
    Packages: 'Packages',
    Policies: 'Policies',
    PrimaryOwners: 'PrimaryOwners',
    PrimaryProfiles: 'PrimaryProfiles',
    PrimaryRates: 'PrimaryRates',
    Profiles: 'Profiles',
    RateGrid: 'RateGrid',
    RateProgram: 'RateProgram',
    Rates: 'Rates',
    Restrictions: 'Restrictions',
    SellMessages: 'SellMessages',
    Statistics: 'Statistics',
    SummaryStatistics: 'SummaryStatistics',
    Traces: 'Traces',
    WashSchedules: 'WashSchedules'
} as const;
export type GetBlockFetchInstructionsEnum = typeof GetBlockFetchInstructionsEnum[keyof typeof GetBlockFetchInstructionsEnum];
/**
 * @export
 */
export const GetBlockRoomAllocationCriteriaEnum = {
    Initial: 'Initial',
    Actual: 'Actual',
    Rates: 'Rates',
    Pickup: 'Pickup',
    Contract: 'Contract',
    Available: 'Available',
    Pickupperc: 'Pickupperc',
    Changes: 'Changes',
    Released: 'Released',
    Houseavailability: 'Houseavailability',
    SellLimit: 'SellLimit',
    AvailableSellLimit: 'AvailableSellLimit',
    MasterAllocInitial: 'MasterAllocInitial',
    Allocated: 'Allocated',
    SubAllocResv: 'SubAllocResv',
    CutoffDate: 'CutoffDate'
} as const;
export type GetBlockRoomAllocationCriteriaEnum = typeof GetBlockRoomAllocationCriteriaEnum[keyof typeof GetBlockRoomAllocationCriteriaEnum];
/**
 * @export
 */
export const GetBlockAvailabilityFetchAllocatedRoomTypeEnum = {
    Allocated: 'Allocated',
    Available: 'Available',
    GenericAllocated: 'GenericAllocated',
    GenericAvailable: 'GenericAvailable'
} as const;
export type GetBlockAvailabilityFetchAllocatedRoomTypeEnum = typeof GetBlockAvailabilityFetchAllocatedRoomTypeEnum[keyof typeof GetBlockAvailabilityFetchAllocatedRoomTypeEnum];
/**
 * @export
 */
export const GetBlockStatisticsStatisticsInstructionsEnum = {
    Contract: 'Contract',
    Initial: 'Initial',
    Actual: 'Actual',
    Pickup: 'Pickup',
    Available: 'Available',
    Change: 'Change',
    Rates: 'Rates',
    Totalavailable: 'Totalavailable',
    Tentativereservations: 'Tentativereservations',
    Pickuppersons: 'Pickuppersons',
    Roomrevenue: 'Roomrevenue',
    Totalrevenue: 'Totalrevenue',
    Avgroomrate: 'Avgroomrate'
} as const;
export type GetBlockStatisticsStatisticsInstructionsEnum = typeof GetBlockStatisticsStatisticsInstructionsEnum[keyof typeof GetBlockStatisticsStatisticsInstructionsEnum];
/**
 * @export
 */
export const GetBlocksCategoryEnum = {
    Group: 'Group',
    Source: 'Source',
    Agent: 'Agent',
    Contact: 'Contact',
    Company: 'Company',
    Account: 'Account'
} as const;
export type GetBlocksCategoryEnum = typeof GetBlocksCategoryEnum[keyof typeof GetBlocksCategoryEnum];
/**
 * @export
 */
export const GetBlocksOrderTypeEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
} as const;
export type GetBlocksOrderTypeEnum = typeof GetBlocksOrderTypeEnum[keyof typeof GetBlocksOrderTypeEnum];
/**
 * @export
 */
export const GetBlocksFetchInstructionsEnum = {
    AccessExclusions: 'AccessExclusions',
    Aliases: 'Aliases',
    AlternateDates: 'AlternateDates',
    Attachments: 'Attachments',
    Block: 'Block',
    BlockNextStatuses: 'BlockNextStatuses',
    BlockStatusHistory: 'BlockStatusHistory',
    CatNextStatuses: 'CatNextStatuses',
    CatStatusHistory: 'CatStatusHistory',
    Comments: 'Comments',
    DateProtect: 'DateProtect',
    ExternalReferences: 'ExternalReferences',
    GenericRateGrid: 'GenericRateGrid',
    Header: 'Header',
    Indicators: 'Indicators',
    InventoryItems: 'InventoryItems',
    Owners: 'Owners',
    Packages: 'Packages',
    Policies: 'Policies',
    PrimaryOwners: 'PrimaryOwners',
    PrimaryProfiles: 'PrimaryProfiles',
    PrimaryRates: 'PrimaryRates',
    Profiles: 'Profiles',
    RateGrid: 'RateGrid',
    RateProgram: 'RateProgram',
    Rates: 'Rates',
    Restrictions: 'Restrictions',
    SellMessages: 'SellMessages',
    Statistics: 'Statistics',
    SummaryStatistics: 'SummaryStatistics',
    Traces: 'Traces',
    WashSchedules: 'WashSchedules'
} as const;
export type GetBlocksFetchInstructionsEnum = typeof GetBlocksFetchInstructionsEnum[keyof typeof GetBlocksFetchInstructionsEnum];
/**
 * @export
 */
export const GetBlocksRoomAllocationCriteriaEnum = {
    Initial: 'Initial',
    Actual: 'Actual',
    Rates: 'Rates',
    Pickup: 'Pickup',
    Contract: 'Contract',
    Available: 'Available',
    Pickupperc: 'Pickupperc',
    Changes: 'Changes',
    Released: 'Released',
    Houseavailability: 'Houseavailability',
    SellLimit: 'SellLimit',
    AvailableSellLimit: 'AvailableSellLimit',
    MasterAllocInitial: 'MasterAllocInitial',
    Allocated: 'Allocated',
    SubAllocResv: 'SubAllocResv',
    CutoffDate: 'CutoffDate'
} as const;
export type GetBlocksRoomAllocationCriteriaEnum = typeof GetBlocksRoomAllocationCriteriaEnum[keyof typeof GetBlocksRoomAllocationCriteriaEnum];
/**
 * @export
 */
export const GetBlocksAccessRestrictionEnum = {
    Availability: 'Availability',
    Create: 'Create',
    Modify: 'Modify',
    Cancel: 'Cancel'
} as const;
export type GetBlocksAccessRestrictionEnum = typeof GetBlocksAccessRestrictionEnum[keyof typeof GetBlocksAccessRestrictionEnum];
