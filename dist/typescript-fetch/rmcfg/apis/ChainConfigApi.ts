/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Configuration API
 * APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BedTypeRequestsDetails,
  BedTypesDetails,
  ChangeRoomMoveReasonsRequest,
  ExceptionDetailType,
  FloorTypesDetails,
  PostBedTypeRequestsRequest,
  PostBedTypesRequest,
  PostFloorTypesRequest,
  PostRoomMoveReasonsRequest,
  PostRoomPotentialsRequest,
  PostRoomPreferencePrioritiesRequest,
  PostSmokingTypesRequest,
  PutBedTypeRequestsRequest,
  PutBedTypesRequest,
  PutFloorTypesRequest,
  PutRoomPotentialsRequest,
  PutRoomPreferencePrioritiesRequest,
  PutSmokingTypesRequest,
  RoomMoveReasonsDetails,
  RoomPotentialsDetails,
  RoomPreferencePrioritiesDetails,
  SmokingTypesDetails,
  Status,
} from '../models';
import {
    BedTypeRequestsDetailsFromJSON,
    BedTypeRequestsDetailsToJSON,
    BedTypesDetailsFromJSON,
    BedTypesDetailsToJSON,
    ChangeRoomMoveReasonsRequestFromJSON,
    ChangeRoomMoveReasonsRequestToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    FloorTypesDetailsFromJSON,
    FloorTypesDetailsToJSON,
    PostBedTypeRequestsRequestFromJSON,
    PostBedTypeRequestsRequestToJSON,
    PostBedTypesRequestFromJSON,
    PostBedTypesRequestToJSON,
    PostFloorTypesRequestFromJSON,
    PostFloorTypesRequestToJSON,
    PostRoomMoveReasonsRequestFromJSON,
    PostRoomMoveReasonsRequestToJSON,
    PostRoomPotentialsRequestFromJSON,
    PostRoomPotentialsRequestToJSON,
    PostRoomPreferencePrioritiesRequestFromJSON,
    PostRoomPreferencePrioritiesRequestToJSON,
    PostSmokingTypesRequestFromJSON,
    PostSmokingTypesRequestToJSON,
    PutBedTypeRequestsRequestFromJSON,
    PutBedTypeRequestsRequestToJSON,
    PutBedTypesRequestFromJSON,
    PutBedTypesRequestToJSON,
    PutFloorTypesRequestFromJSON,
    PutFloorTypesRequestToJSON,
    PutRoomPotentialsRequestFromJSON,
    PutRoomPotentialsRequestToJSON,
    PutRoomPreferencePrioritiesRequestFromJSON,
    PutRoomPreferencePrioritiesRequestToJSON,
    PutSmokingTypesRequestFromJSON,
    PutSmokingTypesRequestToJSON,
    RoomMoveReasonsDetailsFromJSON,
    RoomMoveReasonsDetailsToJSON,
    RoomPotentialsDetailsFromJSON,
    RoomPotentialsDetailsToJSON,
    RoomPreferencePrioritiesDetailsFromJSON,
    RoomPreferencePrioritiesDetailsToJSON,
    SmokingTypesDetailsFromJSON,
    SmokingTypesDetailsToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models';

export interface ChangeRoomMoveReasonsOperationRequest {
    reasonCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomMoveReasonsToBeChanged?: ChangeRoomMoveReasonsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteBedTypeRequestsRequest {
    bedTypeRequestsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    bedTypeRequestsCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteBedTypesRequest {
    bedTypesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    bedTypeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteFloorTypesRequest {
    floorTypesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    floorTypesCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRoomPotentialsRequest {
    roomPotentialsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomPotentialsCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRoomPreferencePrioritiesRequest {
    roomPreferencePrioritiesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomPreferencePrioritiesCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteSmokingTypesRequest {
    smokingTypesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    smokingTypesCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBedTypeRequestsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBedTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFloorTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomMoveReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomPotentialsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomPreferencePrioritiesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSmokingTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBedTypeRequestsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    bedTypeRequestsCriteria?: PostBedTypeRequestsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBedTypesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    bedTypesCriteria?: PostBedTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostFloorTypesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    floorTypesCriteria?: PostFloorTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRoomMoveReasonsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomMoveReasonsCriteria?: PostRoomMoveReasonsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRoomPotentialsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomPotentialsCriteria?: PostRoomPotentialsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRoomPreferencePrioritiesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomPreferencePrioritiesCriteria?: PostRoomPreferencePrioritiesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostSmokingTypesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    smokingTypesCriteria?: PostSmokingTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutBedTypeRequestsOperationRequest {
    bedTypeRequestsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    bedTypeRequestsToBeChanged?: PutBedTypeRequestsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutBedTypesOperationRequest {
    bedTypesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    bedTypesToBeChanged?: PutBedTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutFloorTypesOperationRequest {
    floorTypesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    floorTypesToBeChanged?: PutFloorTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoomPotentialsOperationRequest {
    roomPotentialsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomPotentialsToBeChanged?: PutRoomPotentialsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoomPreferencePrioritiesOperationRequest {
    roomPreferencePrioritiesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomPreferencePrioritiesToBeChanged?: PutRoomPreferencePrioritiesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutSmokingTypesOperationRequest {
    smokingTypesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    smokingTypesToBeChanged?: PutSmokingTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveRoomMoveReasonsRequest {
    reasonCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomMoveReasonsCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ChainConfigApi extends runtime.BaseAPI {

    /**
     * Use this API to update room move reasons based on reasonCode, roomMoveReasonsToBeChanged. Room move reasons are used when moving a guest from one room in a property to another room in the same property after the reservation has been checked in. <p><strong>OperationId:</strong>changeRoomMoveReasons</p>
     * Change Room Move Reasons
     */
    async changeRoomMoveReasonsRaw(requestParameters: ChangeRoomMoveReasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomMoveReasons/{reasonCode}`.replace(`{${"reasonCode"}}`, encodeURIComponent(String(requestParameters.reasonCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeRoomMoveReasonsRequestToJSON(requestParameters.roomMoveReasonsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update room move reasons based on reasonCode, roomMoveReasonsToBeChanged. Room move reasons are used when moving a guest from one room in a property to another room in the same property after the reservation has been checked in. <p><strong>OperationId:</strong>changeRoomMoveReasons</p>
     * Change Room Move Reasons
     */
    async changeRoomMoveReasons(requestParameters: ChangeRoomMoveReasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeRoomMoveReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete bed type requests based on the bedTypeRequestsId, bedTypeRequestsCodes. <p>Bed types are referenced in room type configuration to identify the bed configuration in the room.</p>  <p><strong>OperationId:</strong>deleteBedTypeRequests</p>
     * Delete Bed Type Requests
     */
    async deleteBedTypeRequestsRaw(requestParameters: DeleteBedTypeRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.bedTypeRequestsCodes) {
            queryParameters['bedTypeRequestsCodes'] = requestParameters.bedTypeRequestsCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/bedTypeRequests/{bedTypeRequestsId}`.replace(`{${"bedTypeRequestsId"}}`, encodeURIComponent(String(requestParameters.bedTypeRequestsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete bed type requests based on the bedTypeRequestsId, bedTypeRequestsCodes. <p>Bed types are referenced in room type configuration to identify the bed configuration in the room.</p>  <p><strong>OperationId:</strong>deleteBedTypeRequests</p>
     * Delete Bed Type Requests
     */
    async deleteBedTypeRequests(requestParameters: DeleteBedTypeRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteBedTypeRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete an existing Bed type. <p><strong>OperationId:</strong>deleteBedTypes</p>
     * Delete an existing Bed type
     */
    async deleteBedTypesRaw(requestParameters: DeleteBedTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.bedTypeCodes) {
            queryParameters['bedTypeCodes'] = requestParameters.bedTypeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/bedTypes/{bedTypesId}`.replace(`{${"bedTypesId"}}`, encodeURIComponent(String(requestParameters.bedTypesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete an existing Bed type. <p><strong>OperationId:</strong>deleteBedTypes</p>
     * Delete an existing Bed type
     */
    async deleteBedTypes(requestParameters: DeleteBedTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteBedTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete floor types based on floorTypesId, floorTypesCodes. <p><strong>OperationId:</strong>deleteFloorTypes</p>
     * Delete Floor Types
     */
    async deleteFloorTypesRaw(requestParameters: DeleteFloorTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.floorTypesCodes) {
            queryParameters['floorTypesCodes'] = requestParameters.floorTypesCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/floorTypes/{floorTypesId}`.replace(`{${"floorTypesId"}}`, encodeURIComponent(String(requestParameters.floorTypesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete floor types based on floorTypesId, floorTypesCodes. <p><strong>OperationId:</strong>deleteFloorTypes</p>
     * Delete Floor Types
     */
    async deleteFloorTypes(requestParameters: DeleteFloorTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteFloorTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Room Potentials. <p><strong>OperationId:</strong>deleteRoomPotentials</p>
     * Delete Room Potentials
     */
    async deleteRoomPotentialsRaw(requestParameters: DeleteRoomPotentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.roomPotentialsCodes) {
            queryParameters['roomPotentialsCodes'] = requestParameters.roomPotentialsCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomPotentials/{roomPotentialsId}`.replace(`{${"roomPotentialsId"}}`, encodeURIComponent(String(requestParameters.roomPotentialsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Room Potentials. <p><strong>OperationId:</strong>deleteRoomPotentials</p>
     * Delete Room Potentials
     */
    async deleteRoomPotentials(requestParameters: DeleteRoomPotentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRoomPotentialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Room Preference Priorities. <p><strong>OperationId:</strong>deleteRoomPreferencePriorities</p>
     * Delete Room Preference Priorities
     */
    async deleteRoomPreferencePrioritiesRaw(requestParameters: DeleteRoomPreferencePrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.roomPreferencePrioritiesCodes) {
            queryParameters['roomPreferencePrioritiesCodes'] = requestParameters.roomPreferencePrioritiesCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomPreferencePriorities/{roomPreferencePrioritiesId}`.replace(`{${"roomPreferencePrioritiesId"}}`, encodeURIComponent(String(requestParameters.roomPreferencePrioritiesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Room Preference Priorities. <p><strong>OperationId:</strong>deleteRoomPreferencePriorities</p>
     * Delete Room Preference Priorities
     */
    async deleteRoomPreferencePriorities(requestParameters: DeleteRoomPreferencePrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRoomPreferencePrioritiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Smoking Types. <p><strong>OperationId:</strong>deleteSmokingTypes</p>
     * Delete Smoking Types
     */
    async deleteSmokingTypesRaw(requestParameters: DeleteSmokingTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.smokingTypesCodes) {
            queryParameters['smokingTypesCodes'] = requestParameters.smokingTypesCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/smokingTypes/{smokingTypesId}`.replace(`{${"smokingTypesId"}}`, encodeURIComponent(String(requestParameters.smokingTypesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Smoking Types. <p><strong>OperationId:</strong>deleteSmokingTypes</p>
     * Delete Smoking Types
     */
    async deleteSmokingTypes(requestParameters: DeleteSmokingTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteSmokingTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return bed type requests based on search criteria such as fetchInactive, codes, wildCard, description.  <p> Bed types are referenced in room type configuration to identify the bed configuration in the room. <p>  <p><strong>OperationId:</strong>getBedTypeRequests</p>
     * Get Bed Type Requests
     */
    async getBedTypeRequestsRaw(requestParameters: GetBedTypeRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BedTypeRequestsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/bedTypeRequests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BedTypeRequestsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to return bed type requests based on search criteria such as fetchInactive, codes, wildCard, description.  <p> Bed types are referenced in room type configuration to identify the bed configuration in the room. <p>  <p><strong>OperationId:</strong>getBedTypeRequests</p>
     * Get Bed Type Requests
     */
    async getBedTypeRequests(requestParameters: GetBedTypeRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BedTypeRequestsDetails> {
        const response = await this.getBedTypeRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return bed types based on search criteria such as fetchInactive, codes, wildCard, description.<p><strong>OperationId:</strong>getBedTypes</p>
     * Get bed types
     */
    async getBedTypesRaw(requestParameters: GetBedTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BedTypesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/bedTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BedTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to return bed types based on search criteria such as fetchInactive, codes, wildCard, description.<p><strong>OperationId:</strong>getBedTypes</p>
     * Get bed types
     */
    async getBedTypes(requestParameters: GetBedTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BedTypesDetails> {
        const response = await this.getBedTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return floor types based on search criteria such as fetchInactive, codes, wildCard, description. <p><strong>OperationId:</strong>getFloorTypes</p>
     * Get Floor Types
     */
    async getFloorTypesRaw(requestParameters: GetFloorTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FloorTypesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/floorTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FloorTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to return floor types based on search criteria such as fetchInactive, codes, wildCard, description. <p><strong>OperationId:</strong>getFloorTypes</p>
     * Get Floor Types
     */
    async getFloorTypes(requestParameters: GetFloorTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FloorTypesDetails> {
        const response = await this.getFloorTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Room Move Reasons. <p><strong>OperationId:</strong>getRoomMoveReasons</p>
     * Get Room Move Reasons
     */
    async getRoomMoveReasonsRaw(requestParameters: GetRoomMoveReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomMoveReasonsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomMoveReasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomMoveReasonsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Room Move Reasons. <p><strong>OperationId:</strong>getRoomMoveReasons</p>
     * Get Room Move Reasons
     */
    async getRoomMoveReasons(requestParameters: GetRoomMoveReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomMoveReasonsDetails> {
        const response = await this.getRoomMoveReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Room Potentials. <p><strong>OperationId:</strong>getRoomPotentials</p>
     * Get Room Potentials
     */
    async getRoomPotentialsRaw(requestParameters: GetRoomPotentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomPotentialsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomPotentials`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomPotentialsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Room Potentials. <p><strong>OperationId:</strong>getRoomPotentials</p>
     * Get Room Potentials
     */
    async getRoomPotentials(requestParameters: GetRoomPotentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomPotentialsDetails> {
        const response = await this.getRoomPotentialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Room Preference Priorities. <p><strong>OperationId:</strong>getRoomPreferencePriorities</p>
     * Get Room Preference Priorities
     */
    async getRoomPreferencePrioritiesRaw(requestParameters: GetRoomPreferencePrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomPreferencePrioritiesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomPreferencePriorities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomPreferencePrioritiesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Room Preference Priorities. <p><strong>OperationId:</strong>getRoomPreferencePriorities</p>
     * Get Room Preference Priorities
     */
    async getRoomPreferencePriorities(requestParameters: GetRoomPreferencePrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomPreferencePrioritiesDetails> {
        const response = await this.getRoomPreferencePrioritiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Smoking Types. <p><strong>OperationId:</strong>getSmokingTypes</p>
     * Get Smoking Types
     */
    async getSmokingTypesRaw(requestParameters: GetSmokingTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SmokingTypesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/smokingTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SmokingTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Smoking Types. <p><strong>OperationId:</strong>getSmokingTypes</p>
     * Get Smoking Types
     */
    async getSmokingTypes(requestParameters: GetSmokingTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SmokingTypesDetails> {
        const response = await this.getSmokingTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create bed type requests. <p>Bed types are referenced in room type configuration to identify the bed configuration in the room.</p>  <p><strong>OperationId:</strong>postBedTypeRequests</p>
     * Create Bed Type Requests
     */
    async postBedTypeRequestsRaw(requestParameters: PostBedTypeRequestsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/bedTypeRequests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostBedTypeRequestsRequestToJSON(requestParameters.bedTypeRequestsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create bed type requests. <p>Bed types are referenced in room type configuration to identify the bed configuration in the room.</p>  <p><strong>OperationId:</strong>postBedTypeRequests</p>
     * Create Bed Type Requests
     */
    async postBedTypeRequests(requestParameters: PostBedTypeRequestsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postBedTypeRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new Bed type. <p><strong>OperationId:</strong>postBedTypes</p>
     * Create a new Bed type
     */
    async postBedTypesRaw(requestParameters: PostBedTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/bedTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostBedTypesRequestToJSON(requestParameters.bedTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new Bed type. <p><strong>OperationId:</strong>postBedTypes</p>
     * Create a new Bed type
     */
    async postBedTypes(requestParameters: PostBedTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postBedTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create floor types. <p><strong>OperationId:</strong>postFloorTypes</p>
     * Create Floor Types
     */
    async postFloorTypesRaw(requestParameters: PostFloorTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/floorTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostFloorTypesRequestToJSON(requestParameters.floorTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create floor types. <p><strong>OperationId:</strong>postFloorTypes</p>
     * Create Floor Types
     */
    async postFloorTypes(requestParameters: PostFloorTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postFloorTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Room Move Reasons. <p><strong>OperationId:</strong>postRoomMoveReasons</p>
     * Create Room Move Reasons
     */
    async postRoomMoveReasonsRaw(requestParameters: PostRoomMoveReasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomMoveReasons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRoomMoveReasonsRequestToJSON(requestParameters.roomMoveReasonsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Room Move Reasons. <p><strong>OperationId:</strong>postRoomMoveReasons</p>
     * Create Room Move Reasons
     */
    async postRoomMoveReasons(requestParameters: PostRoomMoveReasonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRoomMoveReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Room Potentials. <p><strong>OperationId:</strong>postRoomPotentials</p>
     * Create Room Potentials
     */
    async postRoomPotentialsRaw(requestParameters: PostRoomPotentialsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomPotentials`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRoomPotentialsRequestToJSON(requestParameters.roomPotentialsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Room Potentials. <p><strong>OperationId:</strong>postRoomPotentials</p>
     * Create Room Potentials
     */
    async postRoomPotentials(requestParameters: PostRoomPotentialsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRoomPotentialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Room Preference Priorities. <p><strong>OperationId:</strong>postRoomPreferencePriorities</p>
     * Create Room Preference Priorities
     */
    async postRoomPreferencePrioritiesRaw(requestParameters: PostRoomPreferencePrioritiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomPreferencePriorities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRoomPreferencePrioritiesRequestToJSON(requestParameters.roomPreferencePrioritiesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Room Preference Priorities. <p><strong>OperationId:</strong>postRoomPreferencePriorities</p>
     * Create Room Preference Priorities
     */
    async postRoomPreferencePriorities(requestParameters: PostRoomPreferencePrioritiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRoomPreferencePrioritiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Smoking Types. <p><strong>OperationId:</strong>postSmokingTypes</p>
     * Create Smoking Types
     */
    async postSmokingTypesRaw(requestParameters: PostSmokingTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/smokingTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostSmokingTypesRequestToJSON(requestParameters.smokingTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Smoking Types. <p><strong>OperationId:</strong>postSmokingTypes</p>
     * Create Smoking Types
     */
    async postSmokingTypes(requestParameters: PostSmokingTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postSmokingTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update bed type requests based on the bedTypeRequestsId, bedTypeRequestsToBeChanged. <p>Bed types are referenced in room type configuration to identify the bed configuration in the room.</p>  <p><strong>OperationId:</strong>putBedTypeRequests</p>
     * Change Bed Type Requests
     */
    async putBedTypeRequestsRaw(requestParameters: PutBedTypeRequestsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/bedTypeRequests/{bedTypeRequestsId}`.replace(`{${"bedTypeRequestsId"}}`, encodeURIComponent(String(requestParameters.bedTypeRequestsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutBedTypeRequestsRequestToJSON(requestParameters.bedTypeRequestsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update bed type requests based on the bedTypeRequestsId, bedTypeRequestsToBeChanged. <p>Bed types are referenced in room type configuration to identify the bed configuration in the room.</p>  <p><strong>OperationId:</strong>putBedTypeRequests</p>
     * Change Bed Type Requests
     */
    async putBedTypeRequests(requestParameters: PutBedTypeRequestsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putBedTypeRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update bed type based on the bedTypesId, bedTypesToBeChanged. Bed types are referenced in room type configuration to identify the bed configuration in the room. <p><strong>OperationId:</strong>putBedTypes</p>
     * Change an existing Bed type
     */
    async putBedTypesRaw(requestParameters: PutBedTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/bedTypes/{bedTypesId}`.replace(`{${"bedTypesId"}}`, encodeURIComponent(String(requestParameters.bedTypesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutBedTypesRequestToJSON(requestParameters.bedTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update bed type based on the bedTypesId, bedTypesToBeChanged. Bed types are referenced in room type configuration to identify the bed configuration in the room. <p><strong>OperationId:</strong>putBedTypes</p>
     * Change an existing Bed type
     */
    async putBedTypes(requestParameters: PutBedTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putBedTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Floor Types. <p><strong>OperationId:</strong>putFloorTypes</p>
     * Change Floor Types
     */
    async putFloorTypesRaw(requestParameters: PutFloorTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/floorTypes/{floorTypesId}`.replace(`{${"floorTypesId"}}`, encodeURIComponent(String(requestParameters.floorTypesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutFloorTypesRequestToJSON(requestParameters.floorTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Floor Types. <p><strong>OperationId:</strong>putFloorTypes</p>
     * Change Floor Types
     */
    async putFloorTypes(requestParameters: PutFloorTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putFloorTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Room Potentials. <p><strong>OperationId:</strong>putRoomPotentials</p>
     * Change Room Potentials
     */
    async putRoomPotentialsRaw(requestParameters: PutRoomPotentialsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomPotentials/{roomPotentialsId}`.replace(`{${"roomPotentialsId"}}`, encodeURIComponent(String(requestParameters.roomPotentialsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutRoomPotentialsRequestToJSON(requestParameters.roomPotentialsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Room Potentials. <p><strong>OperationId:</strong>putRoomPotentials</p>
     * Change Room Potentials
     */
    async putRoomPotentials(requestParameters: PutRoomPotentialsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRoomPotentialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Room Preference Priorities. <p><strong>OperationId:</strong>putRoomPreferencePriorities</p>
     * Change Room Preference Priorities
     */
    async putRoomPreferencePrioritiesRaw(requestParameters: PutRoomPreferencePrioritiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomPreferencePriorities/{roomPreferencePrioritiesId}`.replace(`{${"roomPreferencePrioritiesId"}}`, encodeURIComponent(String(requestParameters.roomPreferencePrioritiesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutRoomPreferencePrioritiesRequestToJSON(requestParameters.roomPreferencePrioritiesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Room Preference Priorities. <p><strong>OperationId:</strong>putRoomPreferencePriorities</p>
     * Change Room Preference Priorities
     */
    async putRoomPreferencePriorities(requestParameters: PutRoomPreferencePrioritiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRoomPreferencePrioritiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Smoking Types. <p><strong>OperationId:</strong>putSmokingTypes</p>
     * Change Smoking Types
     */
    async putSmokingTypesRaw(requestParameters: PutSmokingTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/smokingTypes/{smokingTypesId}`.replace(`{${"smokingTypesId"}}`, encodeURIComponent(String(requestParameters.smokingTypesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutSmokingTypesRequestToJSON(requestParameters.smokingTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Smoking Types. <p><strong>OperationId:</strong>putSmokingTypes</p>
     * Change Smoking Types
     */
    async putSmokingTypes(requestParameters: PutSmokingTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putSmokingTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete room move reasons based on reasonCode, roomMoveReasonsCodes. Room move reasons are used when moving a guest from one room in a property to another room in the same property after the reservation has been checked in. <p><strong>OperationId:</strong>removeRoomMoveReasons</p>
     * Delete Room Move Reasons
     */
    async removeRoomMoveReasonsRaw(requestParameters: RemoveRoomMoveReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.roomMoveReasonsCodes) {
            queryParameters['roomMoveReasonsCodes'] = requestParameters.roomMoveReasonsCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomMoveReasons/{reasonCode}`.replace(`{${"reasonCode"}}`, encodeURIComponent(String(requestParameters.reasonCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete room move reasons based on reasonCode, roomMoveReasonsCodes. Room move reasons are used when moving a guest from one room in a property to another room in the same property after the reservation has been checked in. <p><strong>OperationId:</strong>removeRoomMoveReasons</p>
     * Delete Room Move Reasons
     */
    async removeRoomMoveReasons(requestParameters: RemoveRoomMoveReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeRoomMoveReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
