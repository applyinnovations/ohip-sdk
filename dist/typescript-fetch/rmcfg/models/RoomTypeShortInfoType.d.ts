/**
 * OPERA Cloud Room Configuration API
 * APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { ComponentRoomInfoType } from './ComponentRoomInfoType';
import type { ComponentSuiteInfoType } from './ComponentSuiteInfoType';
import type { RatePlanRatingType } from './RatePlanRatingType';
import type { RoomFeatureType } from './RoomFeatureType';
/**
 * Basic information of room type.
 * @export
 * @interface RoomTypeShortInfoType
 */
export interface RoomTypeShortInfoType {
    /**
     * Indicates if room is a pseudo. This is read-only.
     * @type {boolean}
     * @memberof RoomTypeShortInfoType
     */
    pseudo?: boolean;
    /**
     * Indicates if room is a suite. This is read-only.
     * @type {boolean}
     * @memberof RoomTypeShortInfoType
     */
    suite?: boolean;
    /**
     * Room Class of the room. This is read-only.
     * @type {string}
     * @memberof RoomTypeShortInfoType
     */
    roomClass?: string;
    /**
     * Short Description of room type.
     * @type {string}
     * @memberof RoomTypeShortInfoType
     */
    shortDescription?: string;
    /**
     * Indicates if room type of the room is flagged as housekeeping. This is read-only.
     * @type {boolean}
     * @memberof RoomTypeShortInfoType
     */
    houseKeeping?: boolean;
    /**
     * Specifies the smoking preference for room type of the room.
     * @type {string}
     * @memberof RoomTypeShortInfoType
     */
    smokingPreference?: string;
    /**
     * Building associated with the room.
     * @type {string}
     * @memberof RoomTypeShortInfoType
     */
    building?: string;
    /**
     *
     * @type {RatePlanRatingType}
     * @memberof RoomTypeShortInfoType
     */
    roomAssignmentRating?: RatePlanRatingType;
    /**
     * Minimum occupancy for the room type.
     * @type {number}
     * @memberof RoomTypeShortInfoType
     */
    minimumOccupancy?: number;
    /**
     * Maximum occupancy for the room type.
     * @type {number}
     * @memberof RoomTypeShortInfoType
     */
    maximumOccupancy?: number;
    /**
     * A recurring element that identifies the room features.
     * @type {Array<RoomFeatureType>}
     * @memberof RoomTypeShortInfoType
     */
    roomFeatures?: Array<RoomFeatureType>;
    /**
     * Indicates if room type is accessible.
     * @type {boolean}
     * @memberof RoomTypeShortInfoType
     */
    accessible?: boolean;
    /**
     * Room type of the room.
     * @type {string}
     * @memberof RoomTypeShortInfoType
     */
    roomType?: string;
    /**
     * Indicates whether function space can be meeting room.
     * @type {boolean}
     * @memberof RoomTypeShortInfoType
     */
    meetingRoom?: boolean;
    /**
     * Room Status of the room.
     * @type {string}
     * @memberof RoomTypeShortInfoType
     */
    roomStatus?: string;
    /**
     * This type holds information of Component Rooms attached to the Component Suite.
     * @type {Array<ComponentRoomInfoType>}
     * @memberof RoomTypeShortInfoType
     */
    componentRoomsInfo?: Array<ComponentRoomInfoType>;
    /**
     * This type holds information of Component Suites to which the Component Room is attached.
     * @type {Array<ComponentSuiteInfoType>}
     * @memberof RoomTypeShortInfoType
     */
    componentSuitesInfo?: Array<ComponentSuiteInfoType>;
}
/**
 * Check if a given object implements the RoomTypeShortInfoType interface.
 */
export declare function instanceOfRoomTypeShortInfoType(value: object): boolean;
export declare function RoomTypeShortInfoTypeFromJSON(json: any): RoomTypeShortInfoType;
export declare function RoomTypeShortInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomTypeShortInfoType;
export declare function RoomTypeShortInfoTypeToJSON(value?: RoomTypeShortInfoType | null): any;
