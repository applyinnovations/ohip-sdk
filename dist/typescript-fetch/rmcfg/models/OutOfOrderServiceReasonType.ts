/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Configuration API
 * APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Base details of the Out of order/service reason.
 * @export
 * @interface OutOfOrderServiceReasonType
 */
export interface OutOfOrderServiceReasonType {
    /**
     * Description for the out of order/service reason.
     * @type {string}
     * @memberof OutOfOrderServiceReasonType
     */
    description?: string;
    /**
     * Hotel code the out of order/service reason belongs to.
     * @type {string}
     * @memberof OutOfOrderServiceReasonType
     */
    hotelId?: string;
    /**
     * Indicator that tells whether the out of order/service reason in the hotel is active or not.
     * @type {boolean}
     * @memberof OutOfOrderServiceReasonType
     */
    inactive?: boolean;
    /**
     * Out of order/service reason code identifying the reason.
     * @type {string}
     * @memberof OutOfOrderServiceReasonType
     */
    reasonCode?: string;
    /**
     * Sequence number for displaying the out of order/service reason.
     * @type {number}
     * @memberof OutOfOrderServiceReasonType
     */
    sequence?: number;
}

/**
 * Check if a given object implements the OutOfOrderServiceReasonType interface.
 */
export function instanceOfOutOfOrderServiceReasonType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OutOfOrderServiceReasonTypeFromJSON(json: any): OutOfOrderServiceReasonType {
    return OutOfOrderServiceReasonTypeFromJSONTyped(json, false);
}

export function OutOfOrderServiceReasonTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): OutOfOrderServiceReasonType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'reasonCode': !exists(json, 'reasonCode') ? undefined : json['reasonCode'],
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
    };
}

export function OutOfOrderServiceReasonTypeToJSON(value?: OutOfOrderServiceReasonType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'hotelId': value.hotelId,
        'inactive': value.inactive,
        'reasonCode': value.reasonCode,
        'sequence': value.sequence,
    };
}

