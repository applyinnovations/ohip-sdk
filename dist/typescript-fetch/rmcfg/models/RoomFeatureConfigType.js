"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Configuration API
 * APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoomFeatureConfigTypeToJSON = exports.RoomFeatureConfigTypeFromJSONTyped = exports.RoomFeatureConfigTypeFromJSON = exports.instanceOfRoomFeatureConfigType = void 0;
const runtime_1 = require("../runtime");
const ConfigHotelPreferenceType_1 = require("./ConfigHotelPreferenceType");
const ManagedByOptions_1 = require("./ManagedByOptions");
const TranslationTextType50_1 = require("./TranslationTextType50");
/**
 * Check if a given object implements the RoomFeatureConfigType interface.
 */
function instanceOfRoomFeatureConfigType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfRoomFeatureConfigType = instanceOfRoomFeatureConfigType;
function RoomFeatureConfigTypeFromJSON(json) {
    return RoomFeatureConfigTypeFromJSONTyped(json, false);
}
exports.RoomFeatureConfigTypeFromJSON = RoomFeatureConfigTypeFromJSON;
function RoomFeatureConfigTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : (0, TranslationTextType50_1.TranslationTextType50FromJSON)(json['description']),
        'sequence': !(0, runtime_1.exists)(json, 'sequence') ? undefined : json['sequence'],
        'code': !(0, runtime_1.exists)(json, 'code') ? undefined : json['code'],
        'inactive': !(0, runtime_1.exists)(json, 'inactive') ? undefined : json['inactive'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'groupCode': !(0, runtime_1.exists)(json, 'groupCode') ? undefined : json['groupCode'],
        'mappedPreferenceCodes': !(0, runtime_1.exists)(json, 'mappedPreferenceCodes') ? undefined : (json['mappedPreferenceCodes'].map(ConfigHotelPreferenceType_1.ConfigHotelPreferenceTypeFromJSON)),
        'managedBy': !(0, runtime_1.exists)(json, 'managedBy') ? undefined : (0, ManagedByOptions_1.ManagedByOptionsFromJSON)(json['managedBy']),
    };
}
exports.RoomFeatureConfigTypeFromJSONTyped = RoomFeatureConfigTypeFromJSONTyped;
function RoomFeatureConfigTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'description': (0, TranslationTextType50_1.TranslationTextType50ToJSON)(value.description),
        'sequence': value.sequence,
        'code': value.code,
        'inactive': value.inactive,
        'hotelId': value.hotelId,
        'groupCode': value.groupCode,
        'mappedPreferenceCodes': value.mappedPreferenceCodes === undefined ? undefined : (value.mappedPreferenceCodes.map(ConfigHotelPreferenceType_1.ConfigHotelPreferenceTypeToJSON)),
        'managedBy': (0, ManagedByOptions_1.ManagedByOptionsToJSON)(value.managedBy),
    };
}
exports.RoomFeatureConfigTypeToJSON = RoomFeatureConfigTypeToJSON;
