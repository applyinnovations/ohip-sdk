"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Configuration API
 * APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoomHierarchyTypeToJSON = exports.RoomHierarchyTypeFromJSONTyped = exports.RoomHierarchyTypeFromJSON = exports.instanceOfRoomHierarchyType = void 0;
const runtime_1 = require("../runtime");
const RoomHierarchyTypeType_1 = require("./RoomHierarchyTypeType");
/**
 * Check if a given object implements the RoomHierarchyType interface.
 */
function instanceOfRoomHierarchyType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfRoomHierarchyType = instanceOfRoomHierarchyType;
function RoomHierarchyTypeFromJSON(json) {
    return RoomHierarchyTypeFromJSONTyped(json, false);
}
exports.RoomHierarchyTypeFromJSON = RoomHierarchyTypeFromJSON;
function RoomHierarchyTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'roomHierarchyType': !(0, runtime_1.exists)(json, 'roomHierarchyType') ? undefined : (0, RoomHierarchyTypeType_1.RoomHierarchyTypeTypeFromJSON)(json['roomHierarchyType']),
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'fromCode': !(0, runtime_1.exists)(json, 'fromCode') ? undefined : json['fromCode'],
        'toCodes': !(0, runtime_1.exists)(json, 'toCodes') ? undefined : json['toCodes'],
        'displaySequence': !(0, runtime_1.exists)(json, 'displaySequence') ? undefined : json['displaySequence'],
    };
}
exports.RoomHierarchyTypeFromJSONTyped = RoomHierarchyTypeFromJSONTyped;
function RoomHierarchyTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'roomHierarchyType': (0, RoomHierarchyTypeType_1.RoomHierarchyTypeTypeToJSON)(value.roomHierarchyType),
        'hotelId': value.hotelId,
        'fromCode': value.fromCode,
        'toCodes': value.toCodes,
        'displaySequence': value.displaySequence,
    };
}
exports.RoomHierarchyTypeToJSON = RoomHierarchyTypeToJSON;
