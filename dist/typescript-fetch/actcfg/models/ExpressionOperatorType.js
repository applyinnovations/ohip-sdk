"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Activity Management API
 * APIs to cater for Activity Configuration functionality in OPERA Cloud. In this module you can retrieve, create, update Activity configuration codes, for example create a new Activity Type.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpressionOperatorTypeToJSON = exports.ExpressionOperatorTypeFromJSONTyped = exports.ExpressionOperatorTypeFromJSON = exports.instanceOfExpressionOperatorType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the ExpressionOperatorType interface.
 */
function instanceOfExpressionOperatorType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfExpressionOperatorType = instanceOfExpressionOperatorType;
function ExpressionOperatorTypeFromJSON(json) {
    return ExpressionOperatorTypeFromJSONTyped(json, false);
}
exports.ExpressionOperatorTypeFromJSON = ExpressionOperatorTypeFromJSON;
function ExpressionOperatorTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'operatorDescription': !(0, runtime_1.exists)(json, 'operatorDescription') ? undefined : json['operatorDescription'],
        'operatorName': !(0, runtime_1.exists)(json, 'operatorName') ? undefined : json['operatorName'],
        'parameterSize': !(0, runtime_1.exists)(json, 'parameterSize') ? undefined : json['parameterSize'],
    };
}
exports.ExpressionOperatorTypeFromJSONTyped = ExpressionOperatorTypeFromJSONTyped;
function ExpressionOperatorTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'operatorDescription': value.operatorDescription,
        'operatorName': value.operatorName,
        'parameterSize': value.parameterSize,
    };
}
exports.ExpressionOperatorTypeToJSON = ExpressionOperatorTypeToJSON;
