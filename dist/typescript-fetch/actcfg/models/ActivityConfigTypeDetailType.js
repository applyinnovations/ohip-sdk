"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Activity Management API
 * APIs to cater for Activity Configuration functionality in OPERA Cloud. In this module you can retrieve, create, update Activity configuration codes, for example create a new Activity Type.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivityConfigTypeDetailTypeToJSON = exports.ActivityConfigTypeDetailTypeFromJSONTyped = exports.ActivityConfigTypeDetailTypeFromJSON = exports.instanceOfActivityConfigTypeDetailType = void 0;
const runtime_1 = require("../runtime");
const ActivityConfigClassType_1 = require("./ActivityConfigClassType");
/**
 * Check if a given object implements the ActivityConfigTypeDetailType interface.
 */
function instanceOfActivityConfigTypeDetailType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfActivityConfigTypeDetailType = instanceOfActivityConfigTypeDetailType;
function ActivityConfigTypeDetailTypeFromJSON(json) {
    return ActivityConfigTypeDetailTypeFromJSONTyped(json, false);
}
exports.ActivityConfigTypeDetailTypeFromJSON = ActivityConfigTypeDetailTypeFromJSON;
function ActivityConfigTypeDetailTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'activityClassList': !(0, runtime_1.exists)(json, 'activityClassList') ? undefined : (json['activityClassList'].map(ActivityConfigClassType_1.ActivityConfigClassTypeFromJSON)),
        'activityTypeCode': !(0, runtime_1.exists)(json, 'activityTypeCode') ? undefined : json['activityTypeCode'],
        'autoiCalendar': !(0, runtime_1.exists)(json, 'autoiCalendar') ? undefined : json['autoiCalendar'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'inactive': !(0, runtime_1.exists)(json, 'inactive') ? undefined : json['inactive'],
        'internal': !(0, runtime_1.exists)(json, 'internal') ? undefined : json['internal'],
        'minutesBeforeAlert': !(0, runtime_1.exists)(json, 'minutesBeforeAlert') ? undefined : json['minutesBeforeAlert'],
        'sequence': !(0, runtime_1.exists)(json, 'sequence') ? undefined : json['sequence'],
    };
}
exports.ActivityConfigTypeDetailTypeFromJSONTyped = ActivityConfigTypeDetailTypeFromJSONTyped;
function ActivityConfigTypeDetailTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'activityClassList': value.activityClassList === undefined ? undefined : (value.activityClassList.map(ActivityConfigClassType_1.ActivityConfigClassTypeToJSON)),
        'activityTypeCode': value.activityTypeCode,
        'autoiCalendar': value.autoiCalendar,
        'description': value.description,
        'hotelId': value.hotelId,
        'inactive': value.inactive,
        'internal': value.internal,
        'minutesBeforeAlert': value.minutesBeforeAlert,
        'sequence': value.sequence,
    };
}
exports.ActivityConfigTypeDetailTypeToJSON = ActivityConfigTypeDetailTypeToJSON;
