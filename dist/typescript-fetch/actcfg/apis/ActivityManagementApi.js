"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Activity Management API
 * APIs to cater for Activity Configuration functionality in OPERA Cloud. In this module you can retrieve, create, update Activity configuration codes, for example create a new Activity Type.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetAutoTraceDefinitionsAutoTraceGroupsEnum = exports.GetAutoTraceCodesAutoTraceGroupsEnum = exports.ActivityManagementApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class ActivityManagementApi extends runtime.BaseAPI {
    /**
     * With this API you can select  existing Activity Type Codes from the source property and copy them to another (target) property. <p><strong>OperationId:</strong>copyActivityTypesConfig</p>
     * Copy Activity Types configuration codes
     */
    copyActivityTypesConfigRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling copyActivityTypesConfig.');
            }
            if (requestParameters.activityTypesConfigCopy === null || requestParameters.activityTypesConfigCopy === undefined) {
                throw new runtime.RequiredError('activityTypesConfigCopy', 'Required parameter requestParameters.activityTypesConfigCopy was null or undefined when calling copyActivityTypesConfig.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/copyActivityTypes/sourceHotel/{hotelId}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ActivityTypesConfigCopyToJSON)(requestParameters.activityTypesConfigCopy),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * With this API you can select  existing Activity Type Codes from the source property and copy them to another (target) property. <p><strong>OperationId:</strong>copyActivityTypesConfig</p>
     * Copy Activity Types configuration codes
     */
    copyActivityTypesConfig(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyActivityTypesConfigRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Copy an existing auto trace definition code to another property. <p><strong>OperationId:</strong>copyAutoTraceDefinitions</p>
     * Copy an Auto Trace definition Code
     */
    copyAutoTraceDefinitionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling copyAutoTraceDefinitions.');
            }
            if (requestParameters.autoTraceDefinitionCopy === null || requestParameters.autoTraceDefinitionCopy === undefined) {
                throw new runtime.RequiredError('autoTraceDefinitionCopy', 'Required parameter requestParameters.autoTraceDefinitionCopy was null or undefined when calling copyAutoTraceDefinitions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/copyAutoTraceDefinitions/sourceHotel/{hotelId}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AutoTraceDefinitionCopyToJSON)(requestParameters.autoTraceDefinitionCopy),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Copy an existing auto trace definition code to another property. <p><strong>OperationId:</strong>copyAutoTraceDefinitions</p>
     * Copy an Auto Trace definition Code
     */
    copyAutoTraceDefinitions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyAutoTraceDefinitionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete an Activity Result Code from OPERA Cloud. <p><strong>OperationId:</strong>deleteActivityResultsConfig</p>
     * Delete an Activity results code
     */
    deleteActivityResultsConfigRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.activityResultCode === null || requestParameters.activityResultCode === undefined) {
                throw new runtime.RequiredError('activityResultCode', 'Required parameter requestParameters.activityResultCode was null or undefined when calling deleteActivityResultsConfig.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/activityResults/{activityResultCode}`.replace(`{${"activityResultCode"}}`, encodeURIComponent(String(requestParameters.activityResultCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete an Activity Result Code from OPERA Cloud. <p><strong>OperationId:</strong>deleteActivityResultsConfig</p>
     * Delete an Activity results code
     */
    deleteActivityResultsConfig(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteActivityResultsConfigRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This will delete an Activity Type Code from the properties configuration. <p><strong>OperationId:</strong>deleteActivityTypes</p>
     * Delete an Activity Type Code
     */
    deleteActivityTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.activityTypeCode === null || requestParameters.activityTypeCode === undefined) {
                throw new runtime.RequiredError('activityTypeCode', 'Required parameter requestParameters.activityTypeCode was null or undefined when calling deleteActivityTypes.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling deleteActivityTypes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/activityTypes/{activityTypeCode}`.replace(`{${"activityTypeCode"}}`, encodeURIComponent(String(requestParameters.activityTypeCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * This will delete an Activity Type Code from the properties configuration. <p><strong>OperationId:</strong>deleteActivityTypes</p>
     * Delete an Activity Type Code
     */
    deleteActivityTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteActivityTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete an Auto trace code. <p><strong>OperationId:</strong>deleteAutoTraceCodes</p>
     * Delete an Auto Trace code
     */
    deleteAutoTraceCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.autoTraceCode === null || requestParameters.autoTraceCode === undefined) {
                throw new runtime.RequiredError('autoTraceCode', 'Required parameter requestParameters.autoTraceCode was null or undefined when calling deleteAutoTraceCodes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/autoTraceCodes/{autoTraceCode}`.replace(`{${"autoTraceCode"}}`, encodeURIComponent(String(requestParameters.autoTraceCode))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete an Auto trace code. <p><strong>OperationId:</strong>deleteAutoTraceCodes</p>
     * Delete an Auto Trace code
     */
    deleteAutoTraceCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteAutoTraceCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete an Auto trace definition code. <p><strong>OperationId:</strong>deleteAutoTraceDefinitions</p>
     * Delete an Auto Trace definitions Code
     */
    deleteAutoTraceDefinitionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.autoTraceDefinitionId === null || requestParameters.autoTraceDefinitionId === undefined) {
                throw new runtime.RequiredError('autoTraceDefinitionId', 'Required parameter requestParameters.autoTraceDefinitionId was null or undefined when calling deleteAutoTraceDefinitions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/autoTraceDefinitions/{autoTraceDefinitionId}`.replace(`{${"autoTraceDefinitionId"}}`, encodeURIComponent(String(requestParameters.autoTraceDefinitionId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete an Auto trace definition code. <p><strong>OperationId:</strong>deleteAutoTraceDefinitions</p>
     * Delete an Auto Trace definitions Code
     */
    deleteAutoTraceDefinitions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteAutoTraceDefinitionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a Trace owner assignment configured for a property. <p><strong>OperationId:</strong>deleteAutoTraceOwnerAssignments</p>
     * Delete an Auto Trace owner assignment
     */
    deleteAutoTraceOwnerAssignmentsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.autoTraceOwnerAssignmentID === null || requestParameters.autoTraceOwnerAssignmentID === undefined) {
                throw new runtime.RequiredError('autoTraceOwnerAssignmentID', 'Required parameter requestParameters.autoTraceOwnerAssignmentID was null or undefined when calling deleteAutoTraceOwnerAssignments.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/autoTraceOwnerAssignments/{autoTraceOwnerAssignmentID}`.replace(`{${"autoTraceOwnerAssignmentID"}}`, encodeURIComponent(String(requestParameters.autoTraceOwnerAssignmentID))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Delete a Trace owner assignment configured for a property. <p><strong>OperationId:</strong>deleteAutoTraceOwnerAssignments</p>
     * Delete an Auto Trace owner assignment
     */
    deleteAutoTraceOwnerAssignments(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteAutoTraceOwnerAssignmentsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve a list of all configured Activity Result codes and descriptions.  Activity Results appear on the Activities screen in the Results field after the Activity is completed.  And example could be Call Again - an activity is Completed but the result code as part of the completion is to Call Again. <p><strong>OperationId:</strong>getActivityResultsConfig</p>
     * Get all Configured Activity Result Codes
     */
    getActivityResultsConfigRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.fetchInactive !== undefined) {
                queryParameters['fetchInactive'] = requestParameters.fetchInactive;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.wildCard !== undefined) {
                queryParameters['wildCard'] = requestParameters.wildCard;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/activityResults`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ActivityResultsConfigDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve a list of all configured Activity Result codes and descriptions.  Activity Results appear on the Activities screen in the Results field after the Activity is completed.  And example could be Call Again - an activity is Completed but the result code as part of the completion is to Call Again. <p><strong>OperationId:</strong>getActivityResultsConfig</p>
     * Get all Configured Activity Result Codes
     */
    getActivityResultsConfig(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getActivityResultsConfigRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve all configured Activity types for a specified hotel. <p><strong>OperationId:</strong>getActivityTypes</p>
     * Get all Activity Type Codes
     */
    getActivityTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getActivityTypes.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.activityType) {
                queryParameters['activityType'] = requestParameters.activityType;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/activityTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ActivityTypesConfigDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve all configured Activity types for a specified hotel. <p><strong>OperationId:</strong>getActivityTypes</p>
     * Get all Activity Type Codes
     */
    getActivityTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getActivityTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve a list of all configured Auto Trace Codes for a property. <p><strong>OperationId:</strong>getAutoTraceCodes</p>
     * Get Auto Trace codes
     */
    getAutoTraceCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.autoTraceGroups) {
                queryParameters['autoTraceGroups'] = requestParameters.autoTraceGroups;
            }
            if (requestParameters.description !== undefined) {
                queryParameters['description'] = requestParameters.description;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/autoTraceCodes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AutoTraceCodesDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve a list of all configured Auto Trace Codes for a property. <p><strong>OperationId:</strong>getAutoTraceCodes</p>
     * Get Auto Trace codes
     */
    getAutoTraceCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAutoTraceCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all Auto trace definitions for a property. <p><strong>OperationId:</strong>getAutoTraceDefinitions</p>
     * Get a list of Auto Trace definition Codes
     */
    getAutoTraceDefinitionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getAutoTraceDefinitions.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.autoTraceGroups) {
                queryParameters['autoTraceGroups'] = requestParameters.autoTraceGroups;
            }
            if (requestParameters.inactive !== undefined) {
                queryParameters['inactive'] = requestParameters.inactive;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/autoTraceDefinitions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AutoTraceDefinitionsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * Get a list of all Auto trace definitions for a property. <p><strong>OperationId:</strong>getAutoTraceDefinitions</p>
     * Get a list of Auto Trace definition Codes
     */
    getAutoTraceDefinitions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAutoTraceDefinitionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This API will provide a list of all configured Auto Trace Owner Mappings.   <p><strong>OperationId:</strong>getAutoTraceOwnerAssignments</p>
     * Get an Auto Trace owner mappings
     */
    getAutoTraceOwnerAssignmentsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling getAutoTraceOwnerAssignments.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.codes) {
                queryParameters['codes'] = requestParameters.codes;
            }
            if (requestParameters.traceOwnerCodes) {
                queryParameters['traceOwnerCodes'] = requestParameters.traceOwnerCodes;
            }
            const headerParameters = {};
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/autoTraceOwnerAssignments`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AutoTraceOwnerAssignmentsDetailsFromJSON)(jsonValue));
        });
    }
    /**
     * This API will provide a list of all configured Auto Trace Owner Mappings.   <p><strong>OperationId:</strong>getAutoTraceOwnerAssignments</p>
     * Get an Auto Trace owner mappings
     */
    getAutoTraceOwnerAssignments(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAutoTraceOwnerAssignmentsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new Activity Results Code, for example SUCCESS, END, CALLAGAIN.  These codes are used when you complete an activity.  You need to specify an Activity Result Code as part of that completion process. <p><strong>OperationId:</strong>postActivityResultsConfig</p>
     * Create an Activity results code
     */
    postActivityResultsConfigRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.activityResultsConfigInfo === null || requestParameters.activityResultsConfigInfo === undefined) {
                throw new runtime.RequiredError('activityResultsConfigInfo', 'Required parameter requestParameters.activityResultsConfigInfo was null or undefined when calling postActivityResultsConfig.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/activityResults`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ActivityResultsConfigInfoToJSON)(requestParameters.activityResultsConfigInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new Activity Results Code, for example SUCCESS, END, CALLAGAIN.  These codes are used when you complete an activity.  You need to specify an Activity Result Code as part of that completion process. <p><strong>OperationId:</strong>postActivityResultsConfig</p>
     * Create an Activity results code
     */
    postActivityResultsConfig(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postActivityResultsConfigRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new Activity Type for a specified hotel. Examples could be  MEETING, LUNCH, EXTMEETING. <p><strong>OperationId:</strong>postActivityTypes</p>
     * Create a new Activity type in configuration
     */
    postActivityTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postActivityTypes.');
            }
            if (requestParameters.activityTypesConfigInfo === null || requestParameters.activityTypesConfigInfo === undefined) {
                throw new runtime.RequiredError('activityTypesConfigInfo', 'Required parameter requestParameters.activityTypesConfigInfo was null or undefined when calling postActivityTypes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/activityTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ActivityTypesConfigInfoToJSON)(requestParameters.activityTypesConfigInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new Activity Type for a specified hotel. Examples could be  MEETING, LUNCH, EXTMEETING. <p><strong>OperationId:</strong>postActivityTypes</p>
     * Create a new Activity type in configuration
     */
    postActivityTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postActivityTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create an Auto trace code. <p><strong>OperationId:</strong>postAutoTraceCodes</p>
     * Create an Auto Trace code
     */
    postAutoTraceCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.autoTraceCodesInfo === null || requestParameters.autoTraceCodesInfo === undefined) {
                throw new runtime.RequiredError('autoTraceCodesInfo', 'Required parameter requestParameters.autoTraceCodesInfo was null or undefined when calling postAutoTraceCodes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/autoTraceCodes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AutoTraceCodesInfoToJSON)(requestParameters.autoTraceCodesInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Create an Auto trace code. <p><strong>OperationId:</strong>postAutoTraceCodes</p>
     * Create an Auto Trace code
     */
    postAutoTraceCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postAutoTraceCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new Auto Trace Definition code for a specified property. <p><strong>OperationId:</strong>postAutoTraceDefinitions</p>
     * Create an Auto Trace Definition Code
     */
    postAutoTraceDefinitionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postAutoTraceDefinitions.');
            }
            if (requestParameters.autoTraceDefinitionsInfo === null || requestParameters.autoTraceDefinitionsInfo === undefined) {
                throw new runtime.RequiredError('autoTraceDefinitionsInfo', 'Required parameter requestParameters.autoTraceDefinitionsInfo was null or undefined when calling postAutoTraceDefinitions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/autoTraceDefinitions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AutoTraceDefinitionsInfoToJSON)(requestParameters.autoTraceDefinitionsInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new Auto Trace Definition code for a specified property. <p><strong>OperationId:</strong>postAutoTraceDefinitions</p>
     * Create an Auto Trace Definition Code
     */
    postAutoTraceDefinitions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postAutoTraceDefinitionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * You can create Auto traces so that activities are created automatically under certain configured conditions. You first need a Trace code configured, and then using this API you can link the Owner code and Trace Code to a Trace Group (account, contact, activity, or block). <p><strong>OperationId:</strong>postAutoTraceOwnerAssignments</p>
     * Create an Auto Trace owner assignment
     */
    postAutoTraceOwnerAssignmentsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling postAutoTraceOwnerAssignments.');
            }
            if (requestParameters.autoTraceOwnerAssignmentsInfo === null || requestParameters.autoTraceOwnerAssignmentsInfo === undefined) {
                throw new runtime.RequiredError('autoTraceOwnerAssignmentsInfo', 'Required parameter requestParameters.autoTraceOwnerAssignmentsInfo was null or undefined when calling postAutoTraceOwnerAssignments.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/autoTraceOwnerAssignments`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AutoTraceOwnerAssignmentsInfoToJSON)(requestParameters.autoTraceOwnerAssignmentsInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * You can create Auto traces so that activities are created automatically under certain configured conditions. You first need a Trace code configured, and then using this API you can link the Owner code and Trace Code to a Trace Group (account, contact, activity, or block). <p><strong>OperationId:</strong>postAutoTraceOwnerAssignments</p>
     * Create an Auto Trace owner assignment
     */
    postAutoTraceOwnerAssignments(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postAutoTraceOwnerAssignmentsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Change or update details of an existing Activity Results Code. <p><strong>OperationId:</strong>putActivityResultsConfig</p>
     * Change an Activity Result Code
     */
    putActivityResultsConfigRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.activityResultCode === null || requestParameters.activityResultCode === undefined) {
                throw new runtime.RequiredError('activityResultCode', 'Required parameter requestParameters.activityResultCode was null or undefined when calling putActivityResultsConfig.');
            }
            if (requestParameters.activityResultsConfigInfo === null || requestParameters.activityResultsConfigInfo === undefined) {
                throw new runtime.RequiredError('activityResultsConfigInfo', 'Required parameter requestParameters.activityResultsConfigInfo was null or undefined when calling putActivityResultsConfig.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/activityResults/{activityResultCode}`.replace(`{${"activityResultCode"}}`, encodeURIComponent(String(requestParameters.activityResultCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ActivityResultsConfigInfoToJSON)(requestParameters.activityResultsConfigInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Change or update details of an existing Activity Results Code. <p><strong>OperationId:</strong>putActivityResultsConfig</p>
     * Change an Activity Result Code
     */
    putActivityResultsConfig(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putActivityResultsConfigRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Change or update details of an existing Activity Type for a property. <p><strong>OperationId:</strong>putActivityTypes</p>
     * Update Activity Types
     */
    putActivityTypesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.activityTypeCode === null || requestParameters.activityTypeCode === undefined) {
                throw new runtime.RequiredError('activityTypeCode', 'Required parameter requestParameters.activityTypeCode was null or undefined when calling putActivityTypes.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putActivityTypes.');
            }
            if (requestParameters.activityTypesConfigInfo === null || requestParameters.activityTypesConfigInfo === undefined) {
                throw new runtime.RequiredError('activityTypesConfigInfo', 'Required parameter requestParameters.activityTypesConfigInfo was null or undefined when calling putActivityTypes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/activityTypes/{activityTypeCode}`.replace(`{${"activityTypeCode"}}`, encodeURIComponent(String(requestParameters.activityTypeCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ActivityTypesConfigInfoToJSON)(requestParameters.activityTypesConfigInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Change or update details of an existing Activity Type for a property. <p><strong>OperationId:</strong>putActivityTypes</p>
     * Update Activity Types
     */
    putActivityTypes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putActivityTypesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update an Auto Trace Code. <p><strong>OperationId:</strong>putAutoTraceCodes</p>
     * Change an Auto Trace code
     */
    putAutoTraceCodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.autoTraceCode === null || requestParameters.autoTraceCode === undefined) {
                throw new runtime.RequiredError('autoTraceCode', 'Required parameter requestParameters.autoTraceCode was null or undefined when calling putAutoTraceCodes.');
            }
            if (requestParameters.autoTraceCodesInfo === null || requestParameters.autoTraceCodesInfo === undefined) {
                throw new runtime.RequiredError('autoTraceCodesInfo', 'Required parameter requestParameters.autoTraceCodesInfo was null or undefined when calling putAutoTraceCodes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/autoTraceCodes/{autoTraceCode}`.replace(`{${"autoTraceCode"}}`, encodeURIComponent(String(requestParameters.autoTraceCode))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AutoTraceCodesInfoToJSON)(requestParameters.autoTraceCodesInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusFromJSON)(jsonValue));
        });
    }
    /**
     * Update an Auto Trace Code. <p><strong>OperationId:</strong>putAutoTraceCodes</p>
     * Change an Auto Trace code
     */
    putAutoTraceCodes(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putAutoTraceCodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Change an Auto Trace Definition code for a specified property. <p><strong>OperationId:</strong>putAutoTraceDefinitions</p>
     * Change an Auto Trace definition Code
     */
    putAutoTraceDefinitionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.autoTraceDefinitionId === null || requestParameters.autoTraceDefinitionId === undefined) {
                throw new runtime.RequiredError('autoTraceDefinitionId', 'Required parameter requestParameters.autoTraceDefinitionId was null or undefined when calling putAutoTraceDefinitions.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putAutoTraceDefinitions.');
            }
            if (requestParameters.autoTraceDefinitionsInfo === null || requestParameters.autoTraceDefinitionsInfo === undefined) {
                throw new runtime.RequiredError('autoTraceDefinitionsInfo', 'Required parameter requestParameters.autoTraceDefinitionsInfo was null or undefined when calling putAutoTraceDefinitions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/autoTraceDefinitions/{autoTraceDefinitionId}`.replace(`{${"autoTraceDefinitionId"}}`, encodeURIComponent(String(requestParameters.autoTraceDefinitionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AutoTraceDefinitionsInfoToJSON)(requestParameters.autoTraceDefinitionsInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AutoTraceDefinitionsStatusFromJSON)(jsonValue));
        });
    }
    /**
     * Change an Auto Trace Definition code for a specified property. <p><strong>OperationId:</strong>putAutoTraceDefinitions</p>
     * Change an Auto Trace definition Code
     */
    putAutoTraceDefinitions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putAutoTraceDefinitionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Change a Trace owner assignment configured for a property. <p><strong>OperationId:</strong>putAutoTraceOwnerAssignments</p>
     * Change Trace owner assignments
     */
    putAutoTraceOwnerAssignmentsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.autoTraceOwnerAssignmentID === null || requestParameters.autoTraceOwnerAssignmentID === undefined) {
                throw new runtime.RequiredError('autoTraceOwnerAssignmentID', 'Required parameter requestParameters.autoTraceOwnerAssignmentID was null or undefined when calling putAutoTraceOwnerAssignments.');
            }
            if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
                throw new runtime.RequiredError('hotelId', 'Required parameter requestParameters.hotelId was null or undefined when calling putAutoTraceOwnerAssignments.');
            }
            if (requestParameters.autoTraceOwnerAssignmentsInfo === null || requestParameters.autoTraceOwnerAssignmentsInfo === undefined) {
                throw new runtime.RequiredError('autoTraceOwnerAssignmentsInfo', 'Required parameter requestParameters.autoTraceOwnerAssignmentsInfo was null or undefined when calling putAutoTraceOwnerAssignments.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
            if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
                headerParameters['authorization'] = String(requestParameters.authorization);
            }
            if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
                headerParameters['x-app-key'] = String(requestParameters.xAppKey);
            }
            if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
                headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
            }
            if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
                headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
            }
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/hotels/{hotelId}/autoTraceOwnerAssignments/{autoTraceOwnerAssignmentID}`.replace(`{${"autoTraceOwnerAssignmentID"}}`, encodeURIComponent(String(requestParameters.autoTraceOwnerAssignmentID))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AutoTraceOwnerAssignmentsInfoToJSON)(requestParameters.autoTraceOwnerAssignmentsInfo),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AutoTraceOwnerAssignmentsStatusFromJSON)(jsonValue));
        });
    }
    /**
     * Change a Trace owner assignment configured for a property. <p><strong>OperationId:</strong>putAutoTraceOwnerAssignments</p>
     * Change Trace owner assignments
     */
    putAutoTraceOwnerAssignments(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putAutoTraceOwnerAssignmentsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.ActivityManagementApi = ActivityManagementApi;
/**
 * @export
 */
exports.GetAutoTraceCodesAutoTraceGroupsEnum = {
    Accounts: 'Accounts',
    Contacts: 'Contacts',
    Blocks: 'Blocks',
    Activities: 'Activities'
};
/**
 * @export
 */
exports.GetAutoTraceDefinitionsAutoTraceGroupsEnum = {
    Accounts: 'Accounts',
    Contacts: 'Contacts',
    Blocks: 'Blocks',
    Activities: 'Activities'
};
