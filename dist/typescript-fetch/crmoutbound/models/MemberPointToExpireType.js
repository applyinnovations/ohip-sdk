"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management Outbound API
 * APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 20.99.99.99
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberPointToExpireTypeToJSON = exports.MemberPointToExpireTypeFromJSONTyped = exports.MemberPointToExpireTypeFromJSON = exports.instanceOfMemberPointToExpireType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the MemberPointToExpireType interface.
 */
function instanceOfMemberPointToExpireType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfMemberPointToExpireType = instanceOfMemberPointToExpireType;
function MemberPointToExpireTypeFromJSON(json) {
    return MemberPointToExpireTypeFromJSONTyped(json, false);
}
exports.MemberPointToExpireTypeFromJSON = MemberPointToExpireTypeFromJSON;
function MemberPointToExpireTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'pointsExpiryDate': !(0, runtime_1.exists)(json, 'pointsExpiryDate') ? undefined : (new Date(json['pointsExpiryDate'])),
        'pointsToExpire': !(0, runtime_1.exists)(json, 'pointsToExpire') ? undefined : json['pointsToExpire'],
        'previousPointsToExpire': !(0, runtime_1.exists)(json, 'previousPointsToExpire') ? undefined : json['previousPointsToExpire'],
        'extend': !(0, runtime_1.exists)(json, 'extend') ? undefined : json['extend'],
        'awardGenerationMethod': !(0, runtime_1.exists)(json, 'awardGenerationMethod') ? undefined : json['awardGenerationMethod'],
    };
}
exports.MemberPointToExpireTypeFromJSONTyped = MemberPointToExpireTypeFromJSONTyped;
function MemberPointToExpireTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'pointsExpiryDate': value.pointsExpiryDate === undefined ? undefined : (value.pointsExpiryDate.toISOString().substring(0, 10)),
        'pointsToExpire': value.pointsToExpire,
        'previousPointsToExpire': value.previousPointsToExpire,
        'extend': value.extend,
        'awardGenerationMethod': value.awardGenerationMethod,
    };
}
exports.MemberPointToExpireTypeToJSON = MemberPointToExpireTypeToJSON;
