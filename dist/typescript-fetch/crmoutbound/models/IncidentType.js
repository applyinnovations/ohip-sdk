"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management Outbound API
 * APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 20.99.99.99
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IncidentTypeToJSON = exports.IncidentTypeFromJSONTyped = exports.IncidentTypeFromJSON = exports.instanceOfIncidentType = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the IncidentType interface.
 */
function instanceOfIncidentType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfIncidentType = instanceOfIncidentType;
function IncidentTypeFromJSON(json) {
    return IncidentTypeFromJSONTyped(json, false);
}
exports.IncidentTypeFromJSON = IncidentTypeFromJSON;
function IncidentTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'incidentCode': !(0, runtime_1.exists)(json, 'incidentCode') ? undefined : json['incidentCode'],
        'description': !(0, runtime_1.exists)(json, 'description') ? undefined : json['description'],
        'incidentOn': !(0, runtime_1.exists)(json, 'incidentOn') ? undefined : json['incidentOn'],
        'status': !(0, runtime_1.exists)(json, 'status') ? undefined : json['status'],
        'priority': !(0, runtime_1.exists)(json, 'priority') ? undefined : json['priority'],
        'source': !(0, runtime_1.exists)(json, 'source') ? undefined : json['source'],
        'note': !(0, runtime_1.exists)(json, 'note') ? undefined : json['note'],
    };
}
exports.IncidentTypeFromJSONTyped = IncidentTypeFromJSONTyped;
function IncidentTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'incidentCode': value.incidentCode,
        'description': value.description,
        'incidentOn': value.incidentOn,
        'status': value.status,
        'priority': value.priority,
        'source': value.source,
        'note': value.note,
    };
}
exports.IncidentTypeToJSON = IncidentTypeToJSON;
