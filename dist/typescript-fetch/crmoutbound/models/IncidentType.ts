/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management Outbound API
 * APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 20.99.99.99
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Guest Incident details for the profile.
 * @export
 * @interface IncidentType
 */
export interface IncidentType {
    /**
     * If specified Incident belongs to the Hotel listed, otherwise it is a global Incident.
     * @type {string}
     * @memberof IncidentType
     */
    hotelId?: string;
    /**
     * Code for the Incident.
     * @type {string}
     * @memberof IncidentType
     */
    incidentCode?: string;
    /**
     * Incident Description for display purposes.
     * @type {string}
     * @memberof IncidentType
     */
    description?: string;
    /**
     * Date and Time the Incident was raised.
     * @type {string}
     * @memberof IncidentType
     */
    incidentOn?: string;
    /**
     * Status of the Incident.
     * @type {string}
     * @memberof IncidentType
     */
    status?: string;
    /**
     * Incident Priority.
     * @type {string}
     * @memberof IncidentType
     */
    priority?: string;
    /**
     * Source of the incident.
     * @type {string}
     * @memberof IncidentType
     */
    source?: string;
    /**
     * Holds Note for the Incident.
     * @type {string}
     * @memberof IncidentType
     */
    note?: string;
}

/**
 * Check if a given object implements the IncidentType interface.
 */
export function instanceOfIncidentType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function IncidentTypeFromJSON(json: any): IncidentType {
    return IncidentTypeFromJSONTyped(json, false);
}

export function IncidentTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): IncidentType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'incidentCode': !exists(json, 'incidentCode') ? undefined : json['incidentCode'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'incidentOn': !exists(json, 'incidentOn') ? undefined : json['incidentOn'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'priority': !exists(json, 'priority') ? undefined : json['priority'],
        'source': !exists(json, 'source') ? undefined : json['source'],
        'note': !exists(json, 'note') ? undefined : json['note'],
    };
}

export function IncidentTypeToJSON(value?: IncidentType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'incidentCode': value.incidentCode,
        'description': value.description,
        'incidentOn': value.incidentOn,
        'status': value.status,
        'priority': value.priority,
        'source': value.source,
        'note': value.note,
    };
}

