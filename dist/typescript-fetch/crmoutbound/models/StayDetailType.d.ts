/**
 * OPERA Cloud Customer Relationship Management Outbound API
 * APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 20.99.99.99
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AdvanceCheckInType } from './AdvanceCheckInType';
import type { CommissionPayoutToType } from './CommissionPayoutToType';
import type { HousekeepingRoomStatusType } from './HousekeepingRoomStatusType';
import type { IndicatorType } from './IndicatorType';
import type { PMSResStatusType } from './PMSResStatusType';
import type { ResAccessRestrictionType } from './ResAccessRestrictionType';
import type { ResAttachedProfileType } from './ResAttachedProfileType';
import type { ResCashieringType } from './ResCashieringType';
import type { ResCommunicationType } from './ResCommunicationType';
import type { ResGuestInfoType } from './ResGuestInfoType';
import type { ResHousekeepingType } from './ResHousekeepingType';
import type { ResMobileNotificationsType } from './ResMobileNotificationsType';
import type { ResRevenueBalanceType } from './ResRevenueBalanceType';
import type { ResSharedGuestInfoType } from './ResSharedGuestInfoType';
import type { ReservationAllowedActionType } from './ReservationAllowedActionType';
import type { ReservationDepositType } from './ReservationDepositType';
import type { ReservationFolioWindowType } from './ReservationFolioWindowType';
import type { ReservationInterfaceStatusType } from './ReservationInterfaceStatusType';
import type { ReservationPaymentMethodType } from './ReservationPaymentMethodType';
import type { ReservationQueueInformationType } from './ReservationQueueInformationType';
import type { ReservationTurndownInfoType } from './ReservationTurndownInfoType';
import type { SearchMatchType } from './SearchMatchType';
import type { SourceOfSaleType } from './SourceOfSaleType';
import type { StayDetailTypeCancellationInfo } from './StayDetailTypeCancellationInfo';
import type { StayInfoType } from './StayInfoType';
import type { TaxTypeType } from './TaxTypeType';
import type { UniqueIDType } from './UniqueIDType';
import type { WaitlistResType } from './WaitlistResType';
/**
 * The Reservation class contains the current reservation being created or altered.
 * @export
 * @interface StayDetailType
 */
export interface StayDetailType {
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof StayDetailType
     */
    reservationIdList?: Array<UniqueIDType>;
    /**
     *
     * @type {StayInfoType}
     * @memberof StayDetailType
     */
    roomStay?: StayInfoType;
    /**
     *
     * @type {ResGuestInfoType}
     * @memberof StayDetailType
     */
    resGuest?: ResGuestInfoType;
    /**
     * Collection of shared guest reservations.
     * @type {Array<ResSharedGuestInfoType>}
     * @memberof StayDetailType
     */
    sharedGuests?: Array<ResSharedGuestInfoType>;
    /**
     *
     * @type {Array<ResAttachedProfileType>}
     * @memberof StayDetailType
     */
    attachedProfiles?: Array<ResAttachedProfileType>;
    /**
     *
     * @type {ReservationPaymentMethodType}
     * @memberof StayDetailType
     */
    reservationPaymentMethod?: ReservationPaymentMethodType;
    /**
     * Collection of reservation folio windows.
     * @type {Array<ReservationFolioWindowType>}
     * @memberof StayDetailType
     */
    reservationFolioWindows?: Array<ReservationFolioWindowType>;
    /**
     * Set of reservation preferences which belongs to the Specials group.
     * @type {string}
     * @memberof StayDetailType
     */
    specials?: string;
    /**
     * Last Privacy Prompt Date
     * @type {Date}
     * @memberof StayDetailType
     */
    lastPrivacyPromptDate?: Date;
    /**
     * Color setting of the reservation.
     * @type {string}
     * @memberof StayDetailType
     */
    displayColor?: string;
    /**
     * Collection of lamp indicators.
     * @type {Array<IndicatorType>}
     * @memberof StayDetailType
     */
    reservationIndicators?: Array<IndicatorType>;
    /**
     *
     * @type {HousekeepingRoomStatusType}
     * @memberof StayDetailType
     */
    roomStatus?: HousekeepingRoomStatusType;
    /**
     * List of Generic Name-Value-Pair Parameters used for super search matches.
     * @type {Array<SearchMatchType>}
     * @memberof StayDetailType
     */
    searchMatches?: Array<SearchMatchType>;
    /**
     *
     * @type {SourceOfSaleType}
     * @memberof StayDetailType
     */
    sourceOfSale?: SourceOfSaleType;
    /**
     *
     * @type {WaitlistResType}
     * @memberof StayDetailType
     */
    waitlist?: WaitlistResType;
    /**
     *
     * @type {ReservationQueueInformationType}
     * @memberof StayDetailType
     */
    queue?: ReservationQueueInformationType;
    /**
     *
     * @type {ResHousekeepingType}
     * @memberof StayDetailType
     */
    housekeeping?: ResHousekeepingType;
    /**
     *
     * @type {ResCashieringType}
     * @memberof StayDetailType
     */
    cashiering?: ResCashieringType;
    /**
     *
     * @type {TaxTypeType}
     * @memberof StayDetailType
     */
    taxType?: TaxTypeType;
    /**
     *
     * @type {ReservationDepositType}
     * @memberof StayDetailType
     */
    deposit?: ReservationDepositType;
    /**
     * Allowed action.
     * @type {Array<ReservationAllowedActionType>}
     * @memberof StayDetailType
     */
    allowedActions?: Array<ReservationAllowedActionType>;
    /**
     *
     * @type {ResRevenueBalanceType}
     * @memberof StayDetailType
     */
    revenuesAndBalances?: ResRevenueBalanceType;
    /**
     * Collection of Hotel Interfaces and rights, this is populated only when fetching interface status for rooms.
     * @type {Array<ReservationInterfaceStatusType>}
     * @memberof StayDetailType
     */
    hotelInterfaceStatusList?: Array<ReservationInterfaceStatusType>;
    /**
     * Currency code preferred by guest.
     * @type {string}
     * @memberof StayDetailType
     */
    guestPreferredCurrency?: string;
    /**
     *
     * @type {ReservationTurndownInfoType}
     * @memberof StayDetailType
     */
    turndownInfo?: ReservationTurndownInfoType;
    /**
     *
     * @type {ResMobileNotificationsType}
     * @memberof StayDetailType
     */
    mobileNotifications?: ResMobileNotificationsType;
    /**
     *
     * @type {ResCommunicationType}
     * @memberof StayDetailType
     */
    resCommunication?: ResCommunicationType;
    /**
     *
     * @type {AdvanceCheckInType}
     * @memberof StayDetailType
     */
    advanceCheckIn?: AdvanceCheckInType;
    /**
     * This flag will determine wheather the reservation is eligible for Welcome Offer or not.
     * @type {boolean}
     * @memberof StayDetailType
     */
    welcomeOffer?: boolean;
    /**
     *
     * @type {StayDetailTypeCancellationInfo}
     * @memberof StayDetailType
     */
    cancellationInfo?: StayDetailTypeCancellationInfo;
    /**
     * Number of keys created for the reservation.
     * @type {number}
     * @memberof StayDetailType
     */
    keyCount?: number;
    /**
     *
     * @type {string}
     * @memberof StayDetailType
     */
    hotelId?: string;
    /**
     *
     * @type {string}
     * @memberof StayDetailType
     */
    hotelName?: string;
    /**
     *
     * @type {string}
     * @memberof StayDetailType
     */
    expectedServiceTime?: string;
    /**
     * Boolean True if this reservation is reserving rooms. False if it is only reserving services.
     * @type {boolean}
     * @memberof StayDetailType
     */
    roomStayReservation?: boolean;
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof StayDetailType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof StayDetailType
     */
    creatorId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof StayDetailType
     */
    lastModifyDateTime?: string;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof StayDetailType
     */
    lastModifierId?: string;
    /**
     * Date an item will be purged from a database (e.g., from a live database to an archive).
     * @type {Date}
     * @memberof StayDetailType
     */
    purgeDate?: Date;
    /**
     *
     * @type {PMSResStatusType}
     * @memberof StayDetailType
     */
    resStatus?: PMSResStatusType;
    /**
     *
     * @type {PMSResStatusType}
     * @memberof StayDetailType
     */
    computedResStatus?: PMSResStatusType;
    /**
     * When true, indicates the reservation is for a guest that walks-in without a reservation. When false, the reservation is not a walk-in.
     * @type {boolean}
     * @memberof StayDetailType
     */
    walkInIndicator?: boolean;
    /**
     *
     * @type {ResAccessRestrictionType}
     * @memberof StayDetailType
     */
    accessRestriction?: ResAccessRestrictionType;
    /**
     *
     * @type {CommissionPayoutToType}
     * @memberof StayDetailType
     */
    commissionPayoutTo?: CommissionPayoutToType;
    /**
     * Payment Method.
     * @type {string}
     * @memberof StayDetailType
     */
    paymentMethod?: string;
    /**
     * Defines if the reservation is pre-registered or not.
     * @type {boolean}
     * @memberof StayDetailType
     */
    preRegistered?: boolean;
    /**
     * Returns true when reservation has an open folio.
     * @type {boolean}
     * @memberof StayDetailType
     */
    openFolio?: boolean;
    /**
     * Flag containing true or false value for reservation to be eligible for self-checkout by guest using mobile device . Pass the 'true' or 'false' values when creating / modifying reservation to indicate whether a reservation is eligible for mobile checkout yes / no. Upon fetch, the current state of the flag will show true or false.
     * @type {boolean}
     * @memberof StayDetailType
     */
    allowMobileCheckout?: boolean;
    /**
     * Attribute AllowMobileViewFolio is set to true when the reservation is eligible for viewing folio using mobile device.
     * @type {boolean}
     * @memberof StayDetailType
     */
    allowMobileViewFolio?: boolean;
    /**
     * Attribute OptedForCommunication is set to true when the guest has opted for receiving communicationsl related to the reservation.
     * @type {boolean}
     * @memberof StayDetailType
     */
    optedForCommunication?: boolean;
    /**
     * Indicates the profile stay record is complimentaray.
     * @type {boolean}
     * @memberof StayDetailType
     */
    complimentaray?: boolean;
    /**
     * Indicates the profile stay record reservation source code.
     * @type {string}
     * @memberof StayDetailType
     */
    reservationSourceCode?: string;
    /**
     * Indicates the profile stay record reservation source Type.
     * @type {string}
     * @memberof StayDetailType
     */
    reservationSourceType?: string;
    /**
     * Indicates the share Number for Stay if reservation was a share.
     * @type {string}
     * @memberof StayDetailType
     */
    shareNumber?: string;
    /**
     * Booking date of the stay record.
     * @type {Date}
     * @memberof StayDetailType
     */
    bookingDate?: Date;
    /**
     * Booked arrival date of the stay record.
     * @type {Date}
     * @memberof StayDetailType
     */
    bookedArrivalDate?: Date;
    /**
     * Booked departure date of the stay record.
     * @type {Date}
     * @memberof StayDetailType
     */
    bookedDepartureDate?: Date;
    /**
     * Cancellation date of the stay record.
     * @type {Date}
     * @memberof StayDetailType
     */
    cancellationDate?: Date;
    /**
     * Number of cancelled room nights.
     * @type {number}
     * @memberof StayDetailType
     */
    cancelledRoomNights?: number;
    /**
     * Number of no show room nights.
     * @type {number}
     * @memberof StayDetailType
     */
    noShowRoomNights?: number;
    /**
     * Travel Agent reference number for stay record.
     * @type {string}
     * @memberof StayDetailType
     */
    travelAgentReferenceId?: string;
    /**
     * Allotment Code for stay record.
     * @type {string}
     * @memberof StayDetailType
     */
    allotmentCode?: string;
    /**
     * Indicates whether the guest was the primary sharer or not.
     * @type {boolean}
     * @memberof StayDetailType
     */
    primarySharer?: boolean;
    /**
     * Exchange Rate.
     * @type {number}
     * @memberof StayDetailType
     */
    exchangeRate?: number;
    /**
     * Promotion code associated with the stay.
     * @type {string}
     * @memberof StayDetailType
     */
    promotionCode?: string;
    /**
     * Indicate the category of room originally booked.
     * @type {string}
     * @memberof StayDetailType
     */
    bookedRoomType?: string;
    /**
     * Indicate channel for stay.
     * @type {string}
     * @memberof StayDetailType
     */
    channelCode?: string;
    /**
     *
     * @type {UniqueIDType}
     * @memberof StayDetailType
     */
    stayRecordId?: UniqueIDType;
}
/**
 * Check if a given object implements the StayDetailType interface.
 */
export declare function instanceOfStayDetailType(value: object): boolean;
export declare function StayDetailTypeFromJSON(json: any): StayDetailType;
export declare function StayDetailTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): StayDetailType;
export declare function StayDetailTypeToJSON(value?: StayDetailType | null): any;
