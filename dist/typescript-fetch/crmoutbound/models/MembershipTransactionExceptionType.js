"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management Outbound API
 * APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 20.99.99.99
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MembershipTransactionExceptionTypeToJSON = exports.MembershipTransactionExceptionTypeFromJSONTyped = exports.MembershipTransactionExceptionTypeFromJSON = exports.instanceOfMembershipTransactionExceptionType = void 0;
const runtime_1 = require("../runtime");
const CodeDescriptionType_1 = require("./CodeDescriptionType");
const DateRangeType_1 = require("./DateRangeType");
const MembershipTransactionExceptionComputePointsType_1 = require("./MembershipTransactionExceptionComputePointsType");
const MembershipTransactionId_1 = require("./MembershipTransactionId");
const MembershipTransactionTierPointsType_1 = require("./MembershipTransactionTierPointsType");
const ProfileId_1 = require("./ProfileId");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the MembershipTransactionExceptionType interface.
 */
function instanceOfMembershipTransactionExceptionType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfMembershipTransactionExceptionType = instanceOfMembershipTransactionExceptionType;
function MembershipTransactionExceptionTypeFromJSON(json) {
    return MembershipTransactionExceptionTypeFromJSONTyped(json, false);
}
exports.MembershipTransactionExceptionTypeFromJSON = MembershipTransactionExceptionTypeFromJSON;
function MembershipTransactionExceptionTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'profileId': !(0, runtime_1.exists)(json, 'profileId') ? undefined : (0, ProfileId_1.ProfileIdFromJSON)(json['profileId']),
        'name': !(0, runtime_1.exists)(json, 'name') ? undefined : json['name'],
        'membershipId': !(0, runtime_1.exists)(json, 'membershipId') ? undefined : (0, UniqueIDType_1.UniqueIDTypeFromJSON)(json['membershipId']),
        'membershipCardNo': !(0, runtime_1.exists)(json, 'membershipCardNo') ? undefined : json['membershipCardNo'],
        'membershipType': !(0, runtime_1.exists)(json, 'membershipType') ? undefined : (0, CodeDescriptionType_1.CodeDescriptionTypeFromJSON)(json['membershipType']),
        'membershipLevel': !(0, runtime_1.exists)(json, 'membershipLevel') ? undefined : json['membershipLevel'],
        'joinedDate': !(0, runtime_1.exists)(json, 'joinedDate') ? undefined : (new Date(json['joinedDate'])),
        'cardExpirationDate': !(0, runtime_1.exists)(json, 'cardExpirationDate') ? undefined : (new Date(json['cardExpirationDate'])),
        'membershipTransactionId': !(0, runtime_1.exists)(json, 'membershipTransactionId') ? undefined : (0, MembershipTransactionId_1.MembershipTransactionIdFromJSON)(json['membershipTransactionId']),
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'fromToRangeDate': !(0, runtime_1.exists)(json, 'fromToRangeDate') ? undefined : (0, DateRangeType_1.DateRangeTypeFromJSON)(json['fromToRangeDate']),
        'reservationNumber': !(0, runtime_1.exists)(json, 'reservationNumber') ? undefined : json['reservationNumber'],
        'roomsBooked': !(0, runtime_1.exists)(json, 'roomsBooked') ? undefined : json['roomsBooked'],
        'backToBack': !(0, runtime_1.exists)(json, 'backToBack') ? undefined : json['backToBack'],
        'averageRate': !(0, runtime_1.exists)(json, 'averageRate') ? undefined : json['averageRate'],
        'tierStays': !(0, runtime_1.exists)(json, 'tierStays') ? undefined : json['tierStays'],
        'totalAwardPoints': !(0, runtime_1.exists)(json, 'totalAwardPoints') ? undefined : json['totalAwardPoints'],
        'totalNights': !(0, runtime_1.exists)(json, 'totalNights') ? undefined : json['totalNights'],
        'totalRevenue': !(0, runtime_1.exists)(json, 'totalRevenue') ? undefined : json['totalRevenue'],
        'pointsCalculate': !(0, runtime_1.exists)(json, 'pointsCalculate') ? undefined : json['pointsCalculate'],
        'userNotes': !(0, runtime_1.exists)(json, 'userNotes') ? undefined : json['userNotes'],
        'processingMessages': !(0, runtime_1.exists)(json, 'processingMessages') ? undefined : json['processingMessages'],
        'totalPoints': !(0, runtime_1.exists)(json, 'totalPoints') ? undefined : json['totalPoints'],
        'awardBasePoints': !(0, runtime_1.exists)(json, 'awardBasePoints') ? undefined : json['awardBasePoints'],
        'awardBonusPoints': !(0, runtime_1.exists)(json, 'awardBonusPoints') ? undefined : json['awardBonusPoints'],
        'tierPoints': !(0, runtime_1.exists)(json, 'tierPoints') ? undefined : (0, MembershipTransactionTierPointsType_1.MembershipTransactionTierPointsTypeFromJSON)(json['tierPoints']),
        'computedPoints': !(0, runtime_1.exists)(json, 'computedPoints') ? undefined : (0, MembershipTransactionExceptionComputePointsType_1.MembershipTransactionExceptionComputePointsTypeFromJSON)(json['computedPoints']),
        'exceptionType': !(0, runtime_1.exists)(json, 'exceptionType') ? undefined : json['exceptionType'],
    };
}
exports.MembershipTransactionExceptionTypeFromJSONTyped = MembershipTransactionExceptionTypeFromJSONTyped;
function MembershipTransactionExceptionTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'profileId': (0, ProfileId_1.ProfileIdToJSON)(value.profileId),
        'name': value.name,
        'membershipId': (0, UniqueIDType_1.UniqueIDTypeToJSON)(value.membershipId),
        'membershipCardNo': value.membershipCardNo,
        'membershipType': (0, CodeDescriptionType_1.CodeDescriptionTypeToJSON)(value.membershipType),
        'membershipLevel': value.membershipLevel,
        'joinedDate': value.joinedDate === undefined ? undefined : (value.joinedDate.toISOString().substr(0, 10)),
        'cardExpirationDate': value.cardExpirationDate === undefined ? undefined : (value.cardExpirationDate.toISOString().substr(0, 10)),
        'membershipTransactionId': (0, MembershipTransactionId_1.MembershipTransactionIdToJSON)(value.membershipTransactionId),
        'hotelId': value.hotelId,
        'fromToRangeDate': (0, DateRangeType_1.DateRangeTypeToJSON)(value.fromToRangeDate),
        'reservationNumber': value.reservationNumber,
        'roomsBooked': value.roomsBooked,
        'backToBack': value.backToBack,
        'averageRate': value.averageRate,
        'tierStays': value.tierStays,
        'totalAwardPoints': value.totalAwardPoints,
        'totalNights': value.totalNights,
        'totalRevenue': value.totalRevenue,
        'pointsCalculate': value.pointsCalculate,
        'userNotes': value.userNotes,
        'processingMessages': value.processingMessages,
        'totalPoints': value.totalPoints,
        'awardBasePoints': value.awardBasePoints,
        'awardBonusPoints': value.awardBonusPoints,
        'tierPoints': (0, MembershipTransactionTierPointsType_1.MembershipTransactionTierPointsTypeToJSON)(value.tierPoints),
        'computedPoints': (0, MembershipTransactionExceptionComputePointsType_1.MembershipTransactionExceptionComputePointsTypeToJSON)(value.computedPoints),
        'exceptionType': value.exceptionType,
    };
}
exports.MembershipTransactionExceptionTypeToJSON = MembershipTransactionExceptionTypeToJSON;
