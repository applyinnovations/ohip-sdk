"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management Outbound API
 * APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 20.99.99.99
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClaimReservationInfoTypeToJSON = exports.ClaimReservationInfoTypeFromJSONTyped = exports.ClaimReservationInfoTypeFromJSON = exports.instanceOfClaimReservationInfoType = void 0;
const runtime_1 = require("../runtime");
const UniqueIDType_1 = require("./UniqueIDType");
/**
 * Check if a given object implements the ClaimReservationInfoType interface.
 */
function instanceOfClaimReservationInfoType(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfClaimReservationInfoType = instanceOfClaimReservationInfoType;
function ClaimReservationInfoTypeFromJSON(json) {
    return ClaimReservationInfoTypeFromJSONTyped(json, false);
}
exports.ClaimReservationInfoTypeFromJSON = ClaimReservationInfoTypeFromJSON;
function ClaimReservationInfoTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'hotelId': !(0, runtime_1.exists)(json, 'hotelId') ? undefined : json['hotelId'],
        'confirmationNo': !(0, runtime_1.exists)(json, 'confirmationNo') ? undefined : (json['confirmationNo'].map(UniqueIDType_1.UniqueIDTypeFromJSON)),
        'arrival': !(0, runtime_1.exists)(json, 'arrival') ? undefined : (new Date(json['arrival'])),
        'departure': !(0, runtime_1.exists)(json, 'departure') ? undefined : (new Date(json['departure'])),
    };
}
exports.ClaimReservationInfoTypeFromJSONTyped = ClaimReservationInfoTypeFromJSONTyped;
function ClaimReservationInfoTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'hotelId': value.hotelId,
        'confirmationNo': value.confirmationNo === undefined ? undefined : (value.confirmationNo.map(UniqueIDType_1.UniqueIDTypeToJSON)),
        'arrival': value.arrival === undefined ? undefined : (value.arrival.toISOString().substring(0, 10)),
        'departure': value.departure === undefined ? undefined : (value.departure.toISOString().substring(0, 10)),
    };
}
exports.ClaimReservationInfoTypeToJSON = ClaimReservationInfoTypeToJSON;
